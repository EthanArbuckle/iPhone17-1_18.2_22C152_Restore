void sub_192B38F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,std::__shared_weak_count *a56)
{
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  void *v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;

  if (a54) {
    nitro::nitro_function::nitro_function(a54);
  }
  if (a56) {
    nitro::nitro_function::nitro_function(a56);
  }
  v60 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v60;
    operator delete(v60);
  }
  v61 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v61;
    operator delete(v61);
  }
  if (STACK[0x308]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x308]);
  }
  v62 = *(std::__shared_weak_count **)(v58 - 232);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  v63 = *(std::__shared_weak_count **)(v58 - 200);
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  v64 = *(std::__shared_weak_count **)(v58 - 168);
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  if (STACK[0x328])
  {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x328]);
    if (!v57)
    {
LABEL_19:
      if (!v56) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  else if (!v57)
  {
    goto LABEL_19;
  }
  nitro::nitro_function::nitro_function(v57);
  if (!v56)
  {
LABEL_21:
    std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy((void *)STACK[0x360]);
    _Unwind_Resume(a1);
  }
LABEL_20:
  nitro::nitro_function::nitro_function(v56);
  goto LABEL_21;
}

uint64_t Espresso::range_quantizer<signed char>::quantize_chunks(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = (a2 - 1) / a3;
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (v6 + 1);
    do
    {
      uint64_t v10 = v7 * a3;
      uint64_t v11 = v7 + 1;
      int v12 = (v7 + 1) * a3;
      if (v12 >= a2) {
        int v12 = a2;
      }
      float v13 = *(float *)(result + 4 * v10);
      if (v10 >= v12)
      {
        float v17 = (float)(v13 - v13) / 255.0;
        float v18 = v13 + (float)(v17 * 128.0);
      }
      else
      {
        uint64_t v14 = v8;
        float v15 = v13;
        do
        {
          float v16 = *(float *)(result + 4 * v14);
          if (v16 < v15) {
            float v15 = *(float *)(result + 4 * v14);
          }
          if (v16 > v13) {
            float v13 = *(float *)(result + 4 * v14);
          }
          ++v14;
        }
        while (v14 < v12);
        float v17 = (float)(v13 - v15) / 255.0;
        float v18 = v15 + (float)(v17 * 128.0);
        uint64_t v19 = v8;
        do
        {
          float v20 = roundf((float)(1.0 / v17) * (float)(*(float *)(result + 4 * v19) - v18));
          if (v20 <= 2147500000.0)
          {
            if (v20 >= -2147500000.0)
            {
              int v21 = (int)v20;
              if ((int)v20 <= -128) {
                int v21 = -128;
              }
              if (v21 >= 127) {
                LOBYTE(v21) = 127;
              }
            }
            else
            {
              LOBYTE(v21) = 0x80;
            }
          }
          else
          {
            LOBYTE(v21) = 127;
          }
          *(unsigned char *)(a6 + v19++) = v21;
        }
        while (v19 < v12);
      }
      *(float *)(a4 + 4 * v7) = v17;
      *(float *)(a5 + 4 * v7) = v18;
      v8 += a3;
      ++v7;
    }
    while (v11 != v9);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<short,2>,std::allocator<Espresso::blob<short,2>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389CA0;
  *((void *)v10 + 3) = &unk_1EE36C0B0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  uint64_t v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  int v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_192B39A38(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t Espresso::range_quantizer<short>::quantize_chunks(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = (a2 - 1) / a3;
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (v6 + 1);
    do
    {
      uint64_t v10 = v7 * a3;
      uint64_t v11 = v7 + 1;
      int v12 = (v7 + 1) * a3;
      if (v12 >= a2) {
        int v12 = a2;
      }
      float v13 = *(float *)(result + 4 * v10);
      if (v10 >= v12)
      {
        float v17 = (float)(v13 - v13) / 2047.0;
        float v18 = v13 + (float)(v17 * 1024.0);
      }
      else
      {
        uint64_t v14 = v8;
        float v15 = v13;
        do
        {
          float v16 = *(float *)(result + 4 * v14);
          if (v16 < v15) {
            float v15 = *(float *)(result + 4 * v14);
          }
          if (v16 > v13) {
            float v13 = *(float *)(result + 4 * v14);
          }
          ++v14;
        }
        while (v14 < v12);
        float v17 = (float)(v13 - v15) / 2047.0;
        float v18 = v15 + (float)(v17 * 1024.0);
        uint64_t v19 = v8;
        do
        {
          float v20 = roundf((float)(1.0 / v17) * (float)(*(float *)(result + 4 * v19) - v18));
          if (v20 <= 2147500000.0)
          {
            if (v20 >= -2147500000.0)
            {
              int v21 = (int)v20;
              if ((int)v20 <= -1024) {
                int v21 = -1024;
              }
              if (v21 >= 1023) {
                LOWORD(v21) = 1023;
              }
            }
            else
            {
              LOWORD(v21) = -1024;
            }
          }
          else
          {
            LOWORD(v21) = 1023;
          }
          *(_WORD *)(a6 + 2 * v19++) = v21;
        }
        while (v19 < v12);
      }
      *(float *)(a4 + 4 * v7) = v17;
      *(float *)(a5 + 4 * v7) = v18;
      v8 += a3;
      ++v7;
    }
    while (v11 != v9);
  }
  return result;
}

uint64_t Espresso::range_quantizer<unsigned char>::quantize_chunks(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  int v7 = (a2 - 1) / a3;
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = (v7 + 1);
    do
    {
      uint64_t v11 = v8 * a3;
      uint64_t v12 = v8 + 1;
      if (((int)v8 + 1) * a3 >= a2) {
        int v13 = a2;
      }
      else {
        int v13 = (v8 + 1) * a3;
      }
      float v14 = *(float *)(result + 4 * v11);
      uint64_t v15 = v13;
      BOOL v16 = v11 < v13;
      float v17 = v14;
      uint64_t v18 = v9;
      if (v16)
      {
        do
        {
          float v19 = *(float *)(result + 4 * v18);
          if (v19 < v14) {
            float v14 = *(float *)(result + 4 * v18);
          }
          if (v19 > v17) {
            float v17 = *(float *)(result + 4 * v18);
          }
          ++v18;
        }
        while (v18 < v15);
      }
      if (a7)
      {
        float v20 = fabsf(v14);
        float v21 = fabsf(v17);
        if (v20 >= v21) {
          float v21 = v20;
        }
        float v22 = v21 / 127.0;
        float v23 = v22 * -128.0;
      }
      else
      {
        float v22 = (float)(v17 - v14) / 255.0;
        float v23 = v14 + (float)(v22 * -0.0);
      }
      if (v11 < v15)
      {
        uint64_t v24 = v9;
        do
        {
          float v25 = roundf((float)(1.0 / v22) * (float)(*(float *)(result + 4 * v24) - v23));
          if (v25 <= 2147500000.0)
          {
            if (v25 >= -2147500000.0)
            {
              unsigned int v26 = (int)v25 & ~((int)v25 >> 31);
              if (v26 >= 0xFF) {
                LOBYTE(v26) = -1;
              }
            }
            else
            {
              LOBYTE(v26) = 0;
            }
          }
          else
          {
            LOBYTE(v26) = -1;
          }
          *(unsigned char *)(a6 + v24++) = v26;
        }
        while (v24 < v15);
      }
      *(float *)(a4 + 4 * v8) = v22;
      *(float *)(a5 + 4 * v8) = v23;
      v9 += a3;
      ++v8;
    }
    while (v12 != v10);
  }
  return result;
}

void get_weights_for_quantization<Espresso::generic_convolution_kernel>(void **a1, uint64_t a2, char a3, unsigned char *a4)
{
  *a1 = 0;
  a1[1] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 456))(&v19);
  if (v19 || (a3 & 1) == 0)
  {
    if (v19)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v19 + 8);
      uint64_t v14 = 0;
      data = (void **)src.data;
      *(_OWORD *)a1 = *(_OWORD *)&src.data;
      uint64_t v16 = *(int *)(v19 + 8);
      do
      {
        v16 *= *(int *)(v19 + 12 + v14);
        v14 += 4;
      }
      while (v14 != 12);
      memcpy(data[3], *(const void **)(v19 + 24), 4 * v16);
    }
  }
  else
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 552))(&src);
    uint64_t v8 = src.data;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (v8)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 552))(&v17);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v17 + 8);
      uint64_t v9 = 0;
      uint64_t v10 = src.data;
      vImagePixelCount height = src.height;
      *a1 = src.data;
      a1[1] = (void *)height;
      uint64_t v12 = (void *)v10[3];
      vImagePixelCount v13 = *(int *)(v17 + 8);
      do
      {
        v13 *= *(int *)(v17 + 12 + v9);
        v9 += 4;
      }
      while (v9 != 12);
      src.data = *(void **)(v17 + 24);
      src.vImagePixelCount height = 1;
      src.width = v13;
      src.rowBytes = 2 * v13;
      dest.data = v12;
      dest.vImagePixelCount height = 1;
      dest.width = v13;
      dest.rowBytes = 4 * v13;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      *a4 = 1;
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
    }
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
}

void sub_192B39EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::generic_convolution_kernel>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::generic_convolution_kernel> const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return (uint64_t *)v7;
      }
      v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x40uLL);
    uint64_t v10 = v9;
    uint64_t v11 = a3[1];
    v9[4] = *a3;
    v9[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    v9[6] = 0;
    v9[7] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *int v6 = v9;
    uint64_t v12 = (uint64_t *)**a1;
    vImagePixelCount v13 = v9;
    if (v12)
    {
      *a1 = v12;
      vImagePixelCount v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::generic_convolution_kernel> const,std::shared_ptr<Espresso::blob<float,4>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::generic_convolution_kernel> const,std::shared_ptr<Espresso::blob<float,4>>>,0>(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::blob<short,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C0B0;
  if (*(unsigned char *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<short,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C0B0;
  if (*(unsigned char *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<short,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385F98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSGraphEngine::Kernels::reshape_like_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSGraphEngine::Kernels::reshape_like_kernel::~reshape_like_kernel(Espresso::MPSGraphEngine::Kernels::reshape_like_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::MPSGraphEngine::Kernels::tile_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  BOOL v3 = a3[1] - *a3 == 64 && a3[4] - a3[3] == 64;
  uint64_t v4 = v3;
  if (!v3)
  {
    int v6 = a2[1];
    v14[0] = *a2;
    v14[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "[Dispatch::MPSGraph::tile_kernel] unsupported: invalid number of inputs or outputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v8, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    uint64_t v15 = (void **)&v12;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
    uint64_t v15 = (void **)&v11;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (v6) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
    }
  }
  return v4;
}

void sub_192B3A4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::tile_kernel::~tile_kernel(Espresso::MPSGraphEngine::Kernels::tile_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::ANECompilerEngine::blob_container::compute_path(Espresso::ANECompilerEngine::blob_container *this)
{
  uint64_t result = *((unsigned int *)this + 49);
  if (result == 4)
  {
    if (*((_DWORD *)this + 29)) {
      return 2;
    }
  }
  return result;
}

uint64_t Espresso::ANECompilerEngine::blob_container::platform(Espresso::ANECompilerEngine::blob_container *this)
{
  return 10008;
}

void Espresso::ANECompilerEngine::blob_container::~blob_container(Espresso::ANECompilerEngine::blob_container *this)
{
  Espresso::abstract_blob_container::~abstract_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*>(char *a1, void *a2)
{
}

uint64_t Espresso::espresso_error_base::get_status(Espresso::espresso_error_base *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t Espresso::espresso_error_base::what(Espresso::espresso_error_base *this)
{
  uint64_t result = (uint64_t)this + 40;
  if (*((char *)this + 63) < 0) {
    return *(void *)result;
  }
  return result;
}

void Espresso::espresso_error_base::~espresso_error_base(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE34F388;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[4].__vftable);
  }
  if (SHIBYTE(this[3].__imp_.__imp_) < 0) {
    operator delete((void *)this[2].__imp_.__imp_);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::runtime_error::~runtime_error(this);
}

uint64_t Espresso::device_not_found_error::get_status(Espresso::device_not_found_error *this)
{
  return 4294967290;
}

void Espresso::device_not_found_error::~device_not_found_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob_not_found_error::get_status(Espresso::blob_not_found_error *this)
{
  return 4294967288;
}

void Espresso::blob_not_found_error::~blob_not_found_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::invalid_context_error::get_status(Espresso::invalid_context_error *this)
{
  return 4294967290;
}

void Espresso::invalid_context_error::~invalid_context_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::invalid_state_error::get_status(Espresso::invalid_state_error *this)
{
  return 4294967291;
}

void Espresso::invalid_state_error::~invalid_state_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::invalid_argument_error::get_status(Espresso::invalid_argument_error *this)
{
  return 4294967290;
}

void Espresso::invalid_argument_error::~invalid_argument_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::invalid_blob_shape_error::get_status(Espresso::invalid_blob_shape_error *this)
{
  return 4294967289;
}

void Espresso::invalid_blob_shape_error::~invalid_blob_shape_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::not_implemented_error::get_status(Espresso::not_implemented_error *this)
{
  return 4294967287;
}

void Espresso::not_implemented_error::~not_implemented_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::unsupported_configuration_error::get_status(Espresso::unsupported_configuration_error *this)
{
  return 4294967284;
}

void Espresso::unsupported_configuration_error::~unsupported_configuration_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::memory_error::get_status(Espresso::memory_error *this)
{
  return 4294967292;
}

void Espresso::memory_error::~memory_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::io_error::get_status(Espresso::io_error *this)
{
  return 4294967294;
}

void Espresso::io_error::~io_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::generic_error::get_status(Espresso::generic_error *this)
{
  return 0xFFFFFFFFLL;
}

void Espresso::generic_error::~generic_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::overflow_error::get_status(Espresso::overflow_error *this)
{
  return 4294967285;
}

void Espresso::overflow_error::~overflow_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::context_exceeded::get_status(Espresso::context_exceeded *this)
{
  return 4294967283;
}

void Espresso::context_exceeded::~context_exceeded(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::network_translation_error::get_status(Espresso::network_translation_error *this)
{
  return 4294967282;
}

void Espresso::network_translation_error::~network_translation_error(std::runtime_error *this)
{
  Espresso::espresso_error_base::~espresso_error_base(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::espresso_error_base::init_what_str(const std::runtime_error *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Espresso exception: ", 20);
  int v3 = SHIBYTE(this[5].__vftable);
  if (v3 >= 0) {
    uint64_t v4 = (std::runtime_error_vtbl *)&this[4];
  }
  else {
    uint64_t v4 = this[4].__vftable;
  }
  if (v3 >= 0) {
    uint64_t imp = HIBYTE(this[5].__vftable);
  }
  else {
    uint64_t imp = (uint64_t)this[4].__imp_.__imp_;
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, imp);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  unint64_t v8 = std::runtime_error::what(this);
  size_t v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  if (SHIBYTE(this[2].__vftable) < 0)
  {
    if (!this[1].__imp_.__imp_) {
      goto LABEL_18;
    }
  }
  else if (!HIBYTE(this[2].__vftable))
  {
    goto LABEL_18;
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" [Thrown from: ", 15);
  int v11 = SHIBYTE(this[2].__vftable);
  if (v11 >= 0) {
    uint64_t v12 = (std::runtime_error_vtbl *)&this[1];
  }
  else {
    uint64_t v12 = this[1].__vftable;
  }
  if (v11 >= 0) {
    uint64_t v13 = HIBYTE(this[2].__vftable);
  }
  else {
    uint64_t v13 = (uint64_t)this[1].__imp_.__imp_;
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
LABEL_18:
  std::stringbuf::str();
  p_uint64_t imp = (void **)&this[2].__imp_;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0) {
    operator delete(*p_imp);
  }
  *(_OWORD *)p_uint64_t imp = v17;
  this[3].__imp_.__imp_ = v18;
  v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FF15B0](&v21);
}

void sub_192B3AC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::device_not_found_error::device_not_found_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE357EF8;
  MEMORY[0x192FF0F50](&v3[4], "\"Device not found\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3ACFC(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::blob_not_found_error::blob_not_found_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE350BC8;
  MEMORY[0x192FF0F50](&v3[4], "\"Blob not found\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3AD7C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_context_error::invalid_context_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE355148;
  MEMORY[0x192FF0F50](&v3[4], "\"Invalid context\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3ADFC(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_state_error::invalid_state_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE350050;
  MEMORY[0x192FF0F50](&v2[4], "\"Invalid state\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3AE84(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_state_error::invalid_state_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE350050;
  MEMORY[0x192FF0F50](&v3[4], "\"Invalid state\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3AF04(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_argument_error::invalid_argument_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE3597B8;
  MEMORY[0x192FF0F50](&v2[4], "\"Invalid argument\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3AF8C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_argument_error::invalid_argument_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE3597B8;
  MEMORY[0x192FF0F50](&v3[4], "\"Invalid argument\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B00C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::invalid_blob_shape_error::invalid_blob_shape_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE35CC90;
  MEMORY[0x192FF0F50](&v3[4], "\"Invalid blob shape\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B08C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::not_implemented_error::not_implemented_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE356F00;
  MEMORY[0x192FF0F50](&v2[4], "\"Not implemented\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B114(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::not_implemented_error::not_implemented_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE356F00;
  MEMORY[0x192FF0F50](&v3[4], "\"Not implemented\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B194(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::unsupported_configuration_error::unsupported_configuration_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE3675C8;
  MEMORY[0x192FF0F50](&v2[4], "\"Unsupported configuration\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B21C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::unsupported_configuration_error::unsupported_configuration_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE3675C8;
  MEMORY[0x192FF0F50](&v3[4], "\"Unsupported configuration\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B29C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::memory_error::memory_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE32A898;
  MEMORY[0x192FF0F50](&v2[4], "\"Memory error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B324(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::memory_error::memory_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE32A898;
  MEMORY[0x192FF0F50](&v3[4], "\"Memory error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B3A4(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::io_error::io_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE371980;
  MEMORY[0x192FF0F50](&v2[4], "\"I/O error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B42C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::io_error::io_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE371980;
  MEMORY[0x192FF0F50](&v3[4], "\"I/O error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B4AC(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::generic_error::generic_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE32BAA0;
  MEMORY[0x192FF0F50](&v2[4], "\"Generic error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B534(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::generic_error::generic_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE32BAA0;
  MEMORY[0x192FF0F50](&v3[4], "\"Generic error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B5B4(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::generic_error::generic_error(std::runtime_error *a1, const std::string *a2)
{
  int v3 = std::runtime_error::runtime_error(a1, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1EE32BAA0;
  MEMORY[0x192FF0F50](&v3[4], "\"Generic error\"");
  Espresso::espresso_error_base::init_what_str(a1);
  return a1;
}

void sub_192B3B634(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::overflow_error::overflow_error(std::runtime_error *this)
{
  v2 = std::runtime_error::runtime_error(this, "");
  v2[5].__vftable = 0;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v2[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE331E08;
  MEMORY[0x192FF0F50](&v2[4], "\"Overflow error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B6BC(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *Espresso::network_translation_error::network_translation_error(std::runtime_error *this, const char *a2)
{
  int v3 = std::runtime_error::runtime_error(this, a2);
  v3[5].__vftable = 0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE35DBD8;
  MEMORY[0x192FF0F50](&v3[4], "\"Network translation error\"");
  Espresso::espresso_error_base::init_what_str(this);
  return this;
}

void sub_192B3B73C(_Unwind_Exception *a1)
{
  Espresso::espresso_error_base::~espresso_error_base(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception<Espresso::device_not_found_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::device_not_found_error::device_not_found_error(exception, a1);
}

void sub_192B3B798(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::format_string(Espresso *this, const char *__format, va_list a3)
{
  va_list v9 = a3;
  va_list v8 = a3;
  char __str = 0;
  int v5 = vsnprintf(&__str, 1uLL, __format, a3);
  if (v5 <= 0)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    std::vector<char>::__append(&__p, (v5 + 1));
    vsnprintf(__p.__begin_, __p.__end_ - __p.__begin_, __format, v8);
    std::string::basic_string[abi:ne180100](this, __p.__begin_, __p.__end_ - __p.__begin_);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
}

void sub_192B3B854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::blob_not_found_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::blob_not_found_error::blob_not_found_error(exception, a1);
}

void sub_192B3B8B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception<Espresso::invalid_context_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_context_error::invalid_context_error(exception, a1);
}

void sub_192B3B914(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_context_error>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v11 = &a9;
  Espresso::format_string((Espresso *)&v10, "Failed to create compiler on platform %zu", &a9);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v10);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE355148;
  MEMORY[0x192FF0F50](&exception[4], "\"Invalid context\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3B9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::invalid_state_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_state_error::invalid_state_error(exception, a1);
}

void sub_192B3BA5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_state_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE350050;
  MEMORY[0x192FF0F50](&exception[4], "\"Invalid state\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3BB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::invalid_argument_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_argument_error::invalid_argument_error(exception, a1);
}

void sub_192B3BBA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE3597B8;
  MEMORY[0x192FF0F50](&exception[4], "\"Invalid argument\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3BC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::invalid_blob_shape_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_blob_shape_error::invalid_blob_shape_error(exception, a1);
}

void sub_192B3BCE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE35CC90;
  MEMORY[0x192FF0F50](&exception[4], "\"Invalid blob shape\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3BDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_with_format<Espresso::not_implemented_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE356F00;
  MEMORY[0x192FF0F50](&exception[4], "\"Not implemented\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3BE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::unsupported_configuration_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::unsupported_configuration_error::unsupported_configuration_error(exception, a1);
}

void sub_192B3BF10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::unsupported_configuration_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE3675C8;
  MEMORY[0x192FF0F50](&exception[4], "\"Unsupported configuration\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3BFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::memory_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::memory_error::memory_error(exception, a1);
}

void sub_192B3C054(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::memory_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE32A898;
  MEMORY[0x192FF0F50](&exception[4], "\"Memory error\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3C114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::io_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::io_error::io_error(exception, a1);
}

void sub_192B3C198(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::io_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE371980;
  MEMORY[0x192FF0F50](&exception[4], "\"I/O error\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3C258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::generic_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::generic_error::generic_error(exception, a1);
}

void sub_192B3C2DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::generic_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::generic_error::generic_error(exception, &v2);
}

void sub_192B3C354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_with_format<Espresso::context_exceeded>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE33DDA8;
  MEMORY[0x192FF0F50](&exception[4], "\"Context exceeded\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3C42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception<Espresso::network_translation_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::network_translation_error::network_translation_error(exception, a1);
}

void sub_192B3C4B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_with_format<Espresso::network_translation_error>(char *__format, ...)
{
  va_start(va, __format);
  va_copy(v3, va);
  Espresso::format_string((Espresso *)&v2, __format, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(exception, &v2);
  exception[5].__vftable = 0;
  exception[2] = 0u;
  exception[3] = 0u;
  exception[1] = 0u;
  exception[4] = 0u;
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE35DBD8;
  MEMORY[0x192FF0F50](&exception[4], "\"Network translation error\"");
  Espresso::espresso_error_base::init_what_str(exception);
}

void sub_192B3C570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

double Espresso::analysis_debug_metadata::analysis_debug_metadata(Espresso::analysis_debug_metadata *this)
{
  *(void *)this = &unk_1EE359F38;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 52) = 1065353216;
  return result;
}

uint64_t Espresso::analysis_debug_metadata::get_debug_metadata(Espresso::analysis_debug_metadata *this)
{
  return (uint64_t)this + 176;
}

void Espresso::convolution_kernel_cpu::transform_transfer_global_parameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 16 * a4;
  Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a3 + 32) + 16 * a4) + 16), 2, &v28);
  if ((void *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &v28))
  {
    va_list v9 = (void *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &v28);
    std::string v10 = (std::__shared_weak_count *)v9[1];
    v27[0] = *v9;
    v27[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::sync_copy_to_host(&__p, v27);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v25, *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 16));
    uint64_t v12 = 0;
    uint64_t v13 = v25;
    uint64_t v14 = *(int *)(v11 + 8);
    do
    {
      v14 *= *(int *)(v11 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    memcpy(*(void **)(v25 + 16), *(const void **)(v11 + 24), 4 * v14);
    uint64_t v15 = v26;
    uint64_t v23 = v13;
    uint64_t v24 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 392))(a1, &v23);
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&v28);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (__p.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a3 + 32) + v8) + 16), 1, &__p);
  if ((void *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &__p))
  {
    uint64_t v16 = (void *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &__p);
    long long v17 = (std::__shared_weak_count *)v16[1];
    v21[0] = *v16;
    v21[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::sync_copy_to_host(&v25, v21);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    uint64_t v18 = v26;
    uint64_t v19 = v25;
    char v20 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 400))(a1, &v19);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&__p);
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_192B3C994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 65) < 0) {
    operator delete(*(void **)(v21 - 88));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::remove_layer_input(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v30 = a2;
  uint64_t v5 = a1 + 56;
  v31 = &v30;
  int v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v31);
  int v7 = -1431655765 * ((v6[4] - v6[3]) >> 3);
  uint64_t v8 = (v7 - 1);
  if (v7 < 1)
  {
LABEL_20:
    int v16 = v8;
  }
  else
  {
    do
    {
      v31 = &v30;
      va_list v9 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v31)[3]+ 24 * v8);
      uint64_t v10 = v9[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v9[23];
      }
      else {
        uint64_t v11 = *((void *)v9 + 1);
      }
      uint64_t v12 = a3[23];
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *((void *)a3 + 1);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = a3;
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)a3;
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v9, v14, *((void *)v9 + 1))) {
            goto LABEL_20;
          }
        }
        else
        {
          if (!v9[23]) {
            goto LABEL_20;
          }
          while (*v9 == *v14)
          {
            ++v9;
            ++v14;
            if (!--v10) {
              goto LABEL_20;
            }
          }
        }
      }
    }
    while (v8-- > 0);
    int v16 = -1;
  }
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 16 * v30);
  int v18 = v16;
  uint64_t v19 = *(void *)(v17 + 88);
  uint64_t v20 = *(void *)(v17 + 80) + 16 * v16;
  uint64_t v21 = v20 + 16;
  if (v20 + 16 != v19)
  {
    do
    {
      uint64_t v20 = v21;
      long long v22 = *(_OWORD *)v21;
      *(void *)uint64_t v21 = 0;
      *(void *)(v21 + 8) = 0;
      uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
      *(_OWORD *)(v21 - 16) = v22;
      if (v23) {
        nitro::nitro_function::nitro_function(v23);
      }
      v21 += 16;
    }
    while (v20 + 16 != v19);
    uint64_t v21 = *(void *)(v17 + 88);
  }
  while (v21 != v20)
  {
    uint64_t v24 = *(std::__shared_weak_count **)(v21 - 8);
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    v21 -= 16;
  }
  *(void *)(v17 + 88) = v20;
  v31 = &v30;
  uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v31);
  v31 = &v30;
  uint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v31)[3]+ 24 * v18;
  uint64_t v27 = v26 + 24;
  uint64_t v28 = v25[4];
  if (v26 + 24 != v28)
  {
    do
    {
      if (*(char *)(v26 + 23) < 0) {
        operator delete(*(void **)v26);
      }
      *(_OWORD *)uint64_t v26 = *(_OWORD *)(v26 + 24);
      *(void *)(v26 + 16) = *(void *)(v26 + 40);
      *(unsigned char *)(v26 + 47) = 0;
      uint64_t v29 = v26 + 48;
      *(unsigned char *)(v26 + 24) = 0;
      v26 += 24;
    }
    while (v29 != v28);
    uint64_t v27 = v25[4];
  }
  while (v27 != v26)
  {
    if (*(char *)(v27 - 1) < 0) {
      operator delete(*(void **)(v27 - 24));
    }
    v27 -= 24;
  }
  v25[4] = v26;
}

void Espresso::convolution_kernel_cpu::transform_parameters_as_input(int32x2_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 16 * a3;
  Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a2 + 32) + 16 * a3) + 16), 1, &__p);
  *(_OWORD *)v38 = 0uLL;
  int32x2_t v10 = a1[72];
  if (!*(void *)&v10)
  {
    if (a1[74]) {
      uint64_t v28 = "convolution has fp16 weights; must use fp32 weights for training.";
    }
    else {
      uint64_t v28 = "convolution layer is missing weights.";
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v28);
  }
  int v11 = a1[43].i32[1] / a1[52].i32[1];
  int v35 = a1[43].i32[0];
  int v36 = v11;
  *(int32x2_t *)&long long v37 = vrev64_s32(a1[44]);
  *((void *)&v37 + 1) = 0x400000000;
  uint64_t v12 = (std::__shared_weak_count *)a1[73];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v35, 0, (uint64_t)&v43);
  double v13 = std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,void>((uint64_t *)&v42, (void *)(a2 + 16), 0);
  uint64_t v14 = v42;
  uint64_t v40 = 0;
  v41 = 0;
  (*(void (**)(void, std::string *, uint64_t *, double))(*(void *)v42 + 16))(v42, &v43, &v40, v13);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  uint64_t v15 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v43);
  uint64_t v16 = 0;
  uint64_t v17 = *(int *)(*(void *)&v10 + 8);
  do
  {
    v17 *= *(int *)(*(void *)&v10 + 12 + v16);
    v16 += 4;
  }
  while (v16 != 12);
  if (v17 != v15) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("blob to copy has different total dim from required shape");
  }
  memcpy(*(void **)(*(void *)(v14 + 160) + 24), *(const void **)(*(void *)&v10 + 24), 4 * v15);
  long long v18 = v42;
  long long v29 = v42;
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
    long long v18 = v29;
  }
  *(_OWORD *)v38 = v18;
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
    *((void *)&v18 + 1) = *((void *)&v29 + 1);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&__p, v38);
  uint64_t v33 = 0;
  v34 = 0;
  (*(void (**)(int32x2_t *, uint64_t *))(*(void *)a1 + 400))(a1, &v33);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  unint64_t v20 = *(void *)(a5 + 8);
  if (v20 >= *(void *)(a5 + 16))
  {
    long long v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v20 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v20 = v21;
    }
    long long v22 = (std::string *)(v20 + 24);
    *(void *)(a5 + 8) = v20 + 24;
  }
  *(void *)(a5 + 8) = v22;
  if (a1[42].i32[0] && *(void *)&a1[70])
  {
    Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a2 + 32) + v9) + 16), 2, &v43);
    __int32 v23 = a1[43].i32[0];
    int v35 = 1;
    int v36 = v23;
    long long v37 = xmmword_192DCA840;
    uint64_t v24 = (std::__shared_weak_count *)a1[71];
    v32[0] = a1[70];
    v32[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(&v42, (void *)(a2 + 16), (Espresso::layer_nd_shape *)&v35, (uint64_t)v32);
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&v43, (uint64_t *)&v42);
    uint64_t v30 = 0;
    v31 = 0;
    (*(void (**)(int32x2_t *, uint64_t *))(*(void *)a1 + 392))(a1, &v30);
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
    unint64_t v25 = *(void *)(a5 + 8);
    if (v25 >= *(void *)(a5 + 16))
    {
      uint64_t v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v43);
    }
    else
    {
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v26 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        *(void *)(v25 + 16) = *((void *)&v43.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v25 = v26;
      }
      uint64_t v27 = (std::string *)(v25 + 24);
      *(void *)(a5 + 8) = v25 + 24;
    }
    *(void *)(a5 + 8) = v27;
    if (*((void *)&v42 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v42 + 1));
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192B3D0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  *(void *)(v33 + 8) = v35;
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *Espresso::add_layer_input(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v37 = a2;
  int v7 = *(void **)(*(void *)(a1 + 32) + 16 * a2);
  uint64_t v8 = (uint64_t *)v7[11];
  unint64_t v9 = v7[12];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v7[10];
    uint64_t v13 = ((uint64_t)v8 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    v34 = v7 + 12;
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
    long long v18 = &v17[16 * v13];
    *(void *)&long long v32 = v17;
    *((void *)&v32 + 1) = v18;
    *((void *)&v33 + 1) = &v17[16 * v19];
    long long v20 = *(_OWORD *)a4;
    *(_OWORD *)long long v18 = *(_OWORD *)a4;
    if (*((void *)&v20 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v33 = v18 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v7 + 10, &v32);
    int v11 = (void *)v7[11];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v32);
  }
  else
  {
    *uint64_t v8 = *a4;
    uint64_t v10 = a4[1];
    v8[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    int v11 = v8 + 2;
    v7[11] = v8 + 2;
  }
  v7[11] = v11;
  *(void *)&long long v32 = a3;
  long long v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 136, a3, (long long **)&v32);
  uint64_t v23 = *a4;
  uint64_t v22 = a4[1];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)v21 + 6);
  *((void *)v21 + 5) = v23;
  *((void *)v21 + 6) = v22;
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  Espresso::abstract_blob_container::shape((char *)&v32, *a4);
  v38 = a3;
  unint64_t v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), a3, (long long **)&v38);
  long long v26 = v33;
  *(_OWORD *)(v25 + 56) = v32;
  *(_OWORD *)(v25 + 72) = v26;
  *((void *)v25 + 11) = v34;
  uint64_t v27 = (void *)*((void *)v25 + 12);
  if (v27)
  {
    *((void *)v25 + 13) = v27;
    operator delete(v27);
    *((void *)v25 + 12) = 0;
    *((void *)v25 + 13) = 0;
    *((void *)v25 + 14) = 0;
  }
  *((_OWORD *)v25 + 6) = v35;
  *((void *)v25 + 14) = v36;
  *(void *)&long long v32 = &v37;
  uint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 56, &v37, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
  long long v29 = (char **)(v28 + 3);
  uint64_t v30 = (std::string *)v28[4];
  if ((unint64_t)v30 >= v28[5])
  {
    double result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v29, (uint64_t)a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v29, (long long *)a3);
    double result = v30 + 1;
  }
  v28[4] = result;
  return result;
}

void sub_192B3D3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(_OWORD *a1, void *a2, Espresso::layer_nd_shape *this, uint64_t a4)
{
  Espresso::layer_nd_shape::to_canonical_5d_shape(this, 0, (uint64_t)v13);
  double v7 = std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,void>((uint64_t *)&v12, a2, 0);
  uint64_t v8 = v12;
  uint64_t v10 = 0;
  int v11 = 0;
  (*(void (**)(void, unsigned char *, uint64_t *, double))(*(void *)v12 + 16))(v12, v13, &v10, v7);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  uint64_t v9 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v13);
  if (v9 != *(_DWORD *)(*(void *)a4 + 8)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("blob to copy has different total dim from required shape");
  }
  memcpy(*(void **)(*(void *)(v8 + 160) + 24), *(const void **)(*(void *)a4 + 16), 4 * v9);
  *a1 = v12;
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_192B3D4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::convolution_kernel_cpu::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  BOOL v3 = Espresso::generic_convolution_kernel::supports_weight_key(a1, a2);
  return v3 | Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 0);
}

void Espresso::convolution_kernel_cpu::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (v2
    && *(void *)v2
    && (*(void *)(v2 + 32) || *(void *)(v2 + 48) || *(void *)(v2 + 64) || *(void *)(v2 + 80)))
  {
    if (*(_DWORD *)(*(void *)(a1 + 8) + 76))
    {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v2, (uint64_t *)&v4);
      BOOL v3 = *(std::__shared_weak_count **)(a1 + 584);
      *(_OWORD *)(a1 + 576) = v4;
      if (v3) {
        nitro::nitro_function::nitro_function(v3);
      }
    }
    else if (*(int *)(v2 + 156) <= 7)
    {
      Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v2);
    }
  }
}

void Espresso::convolution_kernel_cpu::__set_weight_raw_blob(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  int v11 = (*(void *(**)(long long *__return_ptr, uint64_t *))(*a1 + 464))(v19, a1);
  uint64_t v15 = a1 + 59;
  uint64_t v16 = a1[1];
  uint64_t v17 = (std::__shared_weak_count *)a1[2];
  v18[0] = v16;
  v18[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::set_conv_quantized_weight_helper(v12, v13, v14, (uint64_t)v11, (unsigned __int8 **)a3, (char *)a4, a5, a6, v15, v19, v18, 0, 0);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (__p)
  {
    long long v21 = __p;
    operator delete(__p);
  }
}

void sub_192B3D6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_kernel_cpu::clear_weights(Espresso::convolution_kernel_cpu *this)
{
  Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::clear_weights((uint64_t)this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 79);
  long long v3 = 0uLL;
  *((_OWORD *)this + 39) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    long long v3 = 0uLL;
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 77);
  *((_OWORD *)this + 38) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 59);
  if (v5 && *v5 && (v5[4] || v5[6] || v5[8] || v5[10]))
  {
    int v6 = (std::__shared_weak_count *)*((void *)this + 60);
    *((void *)this + 59) = 0;
    *((void *)this + 60) = 0;
    if (v6)
    {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void Espresso::convolution_kernel_cpu::__launch(__n128 *a1, __n128 a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v268 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a6 + 8) == *(void *)a6)
  {
    uint64_t v264 = 0;
    v265 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v264, *(uint64_t **)a6);
  }
  if (*(void *)(a7 + 8) == *(void *)a7)
  {
    uint64_t v262 = 0;
    v263 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v262, *(uint64_t **)a7);
  }
  v230 = a1;
  unint64_t v216 = a1[36].n128_u64[0];
  if (!v216)
  {
    if (a1[31].n128_u64[1] && a1[32].n128_u64[1])
    {
      (*(void (**)(unsigned char *__return_ptr, __n128 *))(a1->n128_u64[0] + 608))(v266, a1);
      __n128 v22 = *(__n128 *)v266;
      *(_OWORD *)v266 = 0uLL;
      uint64_t v23 = (std::__shared_weak_count *)a1[36].n128_u64[1];
      a1[36] = v22;
      if (!v23) {
        goto LABEL_46;
      }
      nitro::nitro_function::nitro_function(v23);
      uint64_t v24 = *(std::__shared_weak_count **)&v266[8];
      if (!*(void *)&v266[8]) {
        goto LABEL_46;
      }
LABEL_45:
      nitro::nitro_function::nitro_function(v24);
      goto LABEL_46;
    }
    unint64_t v25 = a1[37].n128_u64[0];
    if (v25)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v260, v25 + 8);
      uint64_t v26 = *(void *)(a1[37].n128_u64[0] + 24);
      std::string::size_type v27 = v260.__r_.__value_.__r.__words[0];
      uint64_t v28 = *(void **)(v260.__r_.__value_.__r.__words[0] + 24);
      vImagePixelCount v29 = *(int *)(v260.__r_.__value_.__r.__words[0] + 8);
      for (uint64_t i = 12; i != 24; i += 4)
        v29 *= *(int *)(v260.__r_.__value_.__r.__words[0] + i);
      *(void *)v266 = v26;
      *(void *)&v266[8] = 1;
      *(void *)&v266[16] = v29;
      *(void *)&v266[24] = 2 * v29;
      v267.data = v28;
      v267.vImagePixelCount height = 1;
      v267.width = v29;
      v267.rowBytes = 4 * v29;
      vImageConvert_Planar16FtoPlanarF((const vImage_Buffer *)v266, &v267, 0);
      std::string::size_type size = v260.__r_.__value_.__l.__size_;
      if (v260.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v260.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      v230[36].n128_u64[0] = v27;
      a1 = v230;
      v31 = (std::__shared_weak_count *)v230[36].n128_u64[1];
      v230[36].n128_u64[1] = size;
      if (v31) {
        nitro::nitro_function::nitro_function(v31);
      }
      goto LABEL_43;
    }
  }
  uint64_t v9 = (uint64_t *)a1[29].n128_u64[1];
  if (v9 && *v9 && (v9[4] || v9[6] || v9[8] || v9[10]))
  {
    unint64_t v10 = a1[36].n128_u64[0];
    if (!v216)
    {
      (*(void (**)(unsigned char *__return_ptr, __n128 *))(a1->n128_u64[0] + 472))(v266, a1);
      a2 = *(__n128 *)v266;
      *(_OWORD *)v266 = 0uLL;
      int v11 = (std::__shared_weak_count *)a1[36].n128_u64[1];
      a1[36] = a2;
      if (v11)
      {
        nitro::nitro_function::nitro_function(v11);
        if (*(void *)&v266[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v266[8]);
        }
      }
      unint64_t v10 = a1[36].n128_u64[0];
      uint64_t v9 = (uint64_t *)a1[29].n128_u64[1];
    }
    std::string::size_type size = a1[36].n128_u64[1];
    v261[0] = v10;
    v261[1] = size;
    if (size) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::quantized_weights_helper::dequantize_to_float32_4d(v9, (uint64_t)v261, a2.n128_f64[0], a3, a4);
LABEL_43:
    if (!size) {
      goto LABEL_46;
    }
    uint64_t v24 = (std::__shared_weak_count *)size;
    goto LABEL_45;
  }
  if (!v216 && *(void *)(a7 + 8) - *(void *)a7 <= 0x1FuLL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v259, a1[31].n128_u64[1] != 0);
    int32x2_t v14 = std::string::insert(&v259, 0, "Conv weights not set ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v260, " / ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v267.width = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v267.data = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v258, a1[32].n128_u64[1] != 0);
    if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v18 = &v258;
    }
    else {
      long long v18 = (std::string *)v258.__r_.__value_.__r.__words[0];
    }
    if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v258.__r_.__value_.__l.__size_;
    }
    long long v20 = std::string::append((std::string *)&v267, (const std::string::value_type *)v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    *(void *)&v266[16] = *((void *)&v20->__r_.__value_.__l + 2);
    *(_OWORD *)v266 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v266);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_46:
  uint64_t v32 = *(void *)(a7 + 8);
  if ((unint64_t)(v32 - *(void *)a7) < 0x11) {
    long long v33 = a1 + 36;
  }
  else {
    long long v33 = (__n128 *)((char *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a7, v32, 1) + 160);
  }
  v34 = (std::__shared_weak_count *)v33->n128_u64[1];
  unint64_t v223 = v33->n128_u64[0];
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v215 = v34;
  uint64_t v35 = *(void *)(a7 + 8);
  if ((unint64_t)(v35 - *(void *)a7) < 0x21)
  {
    v221 = (char *)a1[35].n128_u64[0];
    unint64_t v42 = a1[35].n128_u64[1];
    if (v42)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      v41 = (std::__shared_weak_count *)v42;
    }
    else
    {
      v41 = 0;
    }
  }
  else
  {
    uint64_t v36 = *((void *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a7, v35, 2) + 20);
    uint64_t v37 = *(void *)(*(void *)a7 + 32);
    v38 = (char *)operator new(0x58uLL);
    *((void *)v38 + 1) = 0;
    *((void *)v38 + 2) = 0;
    *(void *)v38 = &unk_1EE389920;
    uint64_t v39 = *(void *)(v36 + 24);
    int v40 = *(_DWORD *)(v37 + 8);
    v221 = v38 + 24;
    *((void *)v38 + 3) = &unk_1EE36BEB0;
    *(_OWORD *)(v38 + 56) = 0u;
    *(_OWORD *)(v38 + 72) = 0u;
    *((_DWORD *)v38 + 8) = v40;
    *((void *)v38 + 5) = v39;
    v41 = (std::__shared_weak_count *)v38;
    v38[48] = 0;
    a1 = v230;
  }
  uint64_t v43 = v264;
  v214 = v41;
  if (!v264)
  {
    v209 = "convolution_kernel_cpu: Null top blob";
    goto LABEL_237;
  }
  uint64_t v218 = v262;
  if (!v262)
  {
    v209 = "convolution_kernel_cpu: Null bottom blob";
LABEL_237:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v209);
  }
  int v44 = a1[26].n128_i32[1];
  if (v44 <= 1) {
    int v44 = 1;
  }
  int v224 = v44;
  int v45 = a1[25].n128_i16[0];
  if (v45 <= 1) {
    int v45 = 1;
  }
  int v248 = v45;
  int v46 = a1[25].n128_i16[1];
  if (v46 <= 1) {
    int v46 = 1;
  }
  int v240 = v46;
  __asm { FMOV            V0.2S, #1.0 }
  *(_OWORD *)&v266[4] = _D0;
  *(_OWORD *)&v266[20] = 0uLL;
  unsigned __int32 v51 = a1[20].n128_u32[2];
  if (v51 == 2)
  {
    *(_DWORD *)v266 = 2;
    *(_DWORD *)&v266[4] = a1[21].n128_u32[1];
  }
  else if (v51 == 1)
  {
    *(_DWORD *)v266 = 0;
  }
  else if (a1[20].n128_u32[3])
  {
    *(_DWORD *)v266 = 1;
  }
  else
  {
    *(_DWORD *)v266 = a1[22].n128_u32[3];
    *(void *)&v266[4] = a1[23].n128_u64[0];
  }
  if (*(int *)(v264 + 20) >= 1)
  {
    int v52 = 0;
    uint64_t v53 = v264 + 8;
    uint64_t v54 = v262 + 8;
    uint64_t v219 = v264;
    uint64_t v217 = v264 + 8;
    while (1)
    {
      uint64_t v55 = 0;
      v267.data = *(void **)v53;
      LODWORD(v267.height) = *(_DWORD *)(v53 + 8);
      int v56 = 1;
      do
      {
        v56 *= *(_DWORD *)(v53 + v55);
        v55 += 4;
      }
      while (v55 != 12);
      uint64_t v57 = *(void *)(v43 + 24);
      v58 = operator new(0x60uLL);
      uint64_t v59 = 0;
      v58[1] = 0;
      v58[2] = 0;
      void *v58 = &unk_1EE389990;
      *((_OWORD *)v58 + 4) = 0u;
      *((_OWORD *)v58 + 5) = 0u;
      data = v267.data;
      v58[3] = &unk_1EE36BEF0;
      v58[4] = data;
      *((_DWORD *)v58 + 10) = v267.height;
      v58[6] = v57 + 4 * v56 * v52;
      v234 = v58;
      *((unsigned char *)v58 + 56) = 0;
      v267.data = *(void **)v54;
      LODWORD(v267.height) = *(_DWORD *)(v54 + 8);
      int v61 = 1;
      do
      {
        v61 *= *(_DWORD *)(v54 + v59);
        v59 += 4;
      }
      while (v59 != 12);
      uint64_t v62 = *(void *)(v218 + 24);
      v63 = (std::__shared_weak_count *)operator new(0x60uLL);
      v63->__shared_owners_ = 0;
      v63->__shared_weak_owners_ = 0;
      v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
      *(_OWORD *)&v63[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v63[3].__shared_owners_ = 0u;
      v64 = v267.data;
      v63[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BEF0;
      v63[1].__shared_owners_ = (uint64_t)v64;
      LODWORD(v63[1].__shared_weak_owners_) = v267.height;
      v63[2].__vftable = (std::__shared_weak_count_vtbl *)(v62 + 4 * v61 * v52);
      LOBYTE(v63[2].__shared_owners_) = 0;
      int shared_owners = v63[1].__shared_owners_;
      v246 = v63;
      int shared_owners_high = HIDWORD(v63[1].__shared_owners_);
      uint64_t v65 = *((unsigned int *)v234 + 8);
      uint64_t v254 = *((unsigned int *)v234 + 9);
      unsigned __int32 v66 = v230[22].n128_u32[0];
      unsigned __int32 v67 = v230[22].n128_u32[1];
      int v68 = v230[24].n128_i16[6];
      int v244 = v230[24].n128_i16[7];
      int v69 = v230[23].n128_i16[4];
      if (v69 == 4) {
        break;
      }
      if (v69 == 2)
      {
        unsigned int v243 = 0;
        unsigned int v81 = 0;
      }
      else
      {
        if (v69 == 1) {
          break;
        }
        unsigned int v81 = v230[24].n128_i16[0];
        unsigned int v243 = v230[24].n128_i16[2];
      }
LABEL_88:
      int v82 = (signed __int32)(v230[21].n128_u32[3] - 1) / v224 + 1;
      unsigned __int32 v83 = v230[21].n128_u32[2];
      unsigned int v225 = v66 * v82 * v67;
      v84 = (_DWORD *)v230[38].n128_u64[0];
      v85 = v63;
      if (!v84
        || (v84[4] == v225 ? (BOOL v86 = v84[3] == v254) : (BOOL v86 = 0),
            v86 ? (BOOL v87 = v84[2] == v65) : (BOOL v87 = 0),
            !v87))
      {
        v88 = (std::__shared_weak_count *)v230[38].n128_u64[1];
        v230[38] = 0uLL;
        int v89 = v225;
        if (v88)
        {
          nitro::nitro_function::nitro_function(v88);
          int v89 = v230[22].n128_u32[0] * v82 * v230[22].n128_u32[1];
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v267, v65, v254, v89, 1);
        v90 = (std::__shared_weak_count *)v230[38].n128_u64[1];
        v230[38] = *(__n128 *)&v267.data;
        if (v90) {
          nitro::nitro_function::nitro_function(v90);
        }
      }
      int v231 = v82;
      int v220 = v52;
      uint64_t v247 = (v254 * v65);
      if (v223)
      {
        signed __int32 v91 = v83 - 1;
        int v92 = 0;
        CBLAS_TRANSPOSE __M = v91 / v224 + 1;
        uint64_t v257 = 4 * v65;
        int v93 = v254 & ~((int)v254 >> 31);
        int v94 = v65 & ~((int)v65 >> 31);
        int v249 = -v81;
        uint64_t v95 = 4 * (int)v65;
        int v241 = shared_owners * v244;
        do
        {
          int v227 = *((_DWORD *)v234 + 9);
          int v228 = *((_DWORD *)v234 + 8);
          int v229 = v92;
          int v96 = HIDWORD(v85[1].__shared_owners_)
              * LODWORD(v85[1].__shared_owners_)
              * (v230[26].n128_u16[6] + v92 * v231);
          int v226 = v230[26].n128_u16[7];
          signed __int32 v232 = v230[22].n128_i32[1];
          signed __int32 v233 = v230[22].n128_i32[0];
          if (v230[25].n128_u32[3])
          {
            v97 = (int *)v230[39].n128_u64[0];
            if (!v97
              || (v97[3] == v254 ? (BOOL v98 = v97[2] == v65) : (BOOL v98 = 0), v99 = v254, v100 = v65, !v98))
            {
              v101 = (std::__shared_weak_count *)v230[39].n128_u64[1];
              v230[39] = 0u;
              if (v101) {
                nitro::nitro_function::nitro_function(v101);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v267, v65, v254, 2, 1);
              v102 = (int *)v267.data;
              v103 = (std::__shared_weak_count *)v230[39].n128_u64[1];
              v230[39] = *(__n128 *)&v267.data;
              if (v103)
              {
                nitro::nitro_function::nitro_function(v103);
                v97 = (int *)v230[39].n128_u64[0];
              }
              else
              {
                v97 = v102;
              }
              int v100 = v97[2];
              int v99 = v97[3];
            }
            uint64_t v127 = v97[4];
            v128 = (char *)*((void *)v97 + 3);
            if (v99 * (uint64_t)v100 * v127) {
              bzero(v128, 4 * v100 * (uint64_t)v99 * v127);
            }
            v104 = *(float **)(v230[38].n128_u64[0] + 24);
            signed __int32 v237 = v230[22].n128_i32[1];
            signed __int32 v239 = v230[22].n128_i32[0];
            uint64_t v236 = (v239 * v231 * v237);
            if ((int)v236 >= 1)
            {
              uint64_t v251 = 0;
              int v253 = 0;
              uint64_t v256 = 0;
              uint64_t v129 = (uint64_t)v85[2].__vftable + 4 * v96;
              v235 = v128;
              do
              {
                if ((int)v254 >= 1)
                {
                  uint64_t v130 = v254;
                  int v131 = v253;
                  do
                  {
                    if ((int)v65 >= 1) {
                      bzero(&v104[v131], v257);
                    }
                    v131 += v65;
                    --v130;
                  }
                  while (v130);
                }
                int v132 = 0;
                int v133 = 0;
                int v134 = (int)v256 / v239 % v237 * v240;
                int v135 = v134 - v243;
                while (v93 != v133)
                {
                  int v136 = v133 + 1;
                  if (v135 < 0) {
                    int v132 = v133 + 1;
                  }
                  v135 += v244;
                  ++v133;
                  if (v135 - v244 >= shared_owners_high)
                  {
                    int v137 = v136 - 1;
                    goto LABEL_158;
                  }
                }
                int v137 = v254;
LABEL_158:
                int v138 = 0;
                int v139 = 0;
                int v140 = v249 + v248 * ((int)v256 % v239);
                v85 = v246;
                while (v94 != v139)
                {
                  int v141 = v139 + 1;
                  if (v140 < 0) {
                    int v138 = v139 + 1;
                  }
                  v140 += v68;
                  ++v139;
                  if (v140 - v68 >= shared_owners)
                  {
                    int v142 = v141 - 1;
                    goto LABEL_165;
                  }
                }
                int v142 = v65;
LABEL_165:
                if (v132 < v137)
                {
                  uint64_t v143 = v132;
                  v144 = (float *)&v235[4 * v138 + 4 * (int)v65 * (uint64_t)v132];
                  v145 = &v104[(int)v65 * (v251 + v132) + v138];
                  int v146 = v249
                       + shared_owners * ((int)v256 / v237 / v239 * shared_owners_high - v243 + v244 * v132 + v134)
                       + v68 * v138
                       + v248 * ((int)v256 % v239);
                  do
                  {
                    int v147 = v146;
                    v148 = v145;
                    v149 = v144;
                    uint64_t v150 = v142 - (uint64_t)v138;
                    if (v138 < v142)
                    {
                      do
                      {
                        float v151 = *(float *)(v129 + 4 * v147);
                        *v148++ = v151;
                        float *v149 = v151 + *v149;
                        v149[(int)v247] = v149[(int)v247] + (float)(v151 * v151);
                        ++v149;
                        v147 += v68;
                        --v150;
                      }
                      while (v150);
                    }
                    ++v143;
                    v144 = (float *)((char *)v144 + v95);
                    v145 = (float *)((char *)v145 + v95);
                    v146 += v241;
                  }
                  while (v143 != v137);
                }
                v253 += v247;
                v251 += (int)v254;
                ++v256;
              }
              while (v256 != v236);
            }
          }
          else
          {
            v104 = *(float **)(v230[38].n128_u64[0] + 24);
            uint64_t v238 = v230[22].n128_u32[0] * v231 * v230[22].n128_u32[1];
            if ((int)v238 >= 1)
            {
              uint64_t v105 = 0;
              int v255 = 0;
              uint64_t v106 = 0;
              uint64_t v107 = (uint64_t)v85[2].__vftable + 4 * v96;
              do
              {
                uint64_t v250 = v106;
                uint64_t v252 = v105;
                if ((int)v254 >= 1)
                {
                  uint64_t v108 = v254;
                  int v109 = v255;
                  do
                  {
                    if ((int)v65 >= 1) {
                      bzero(&v104[v109], v257);
                    }
                    v109 += v65;
                    --v108;
                  }
                  while (v108);
                }
                int v110 = 0;
                int v111 = 0;
                int v112 = (int)v250 / v233 % v232 * v240;
                int v113 = v112 - v243;
                while (v93 != v111)
                {
                  int v114 = v111 + 1;
                  if (v113 < 0) {
                    int v110 = v111 + 1;
                  }
                  v113 += v244;
                  ++v111;
                  if (v113 - v244 >= shared_owners_high)
                  {
                    int v115 = v114 - 1;
                    goto LABEL_126;
                  }
                }
                int v115 = v254;
LABEL_126:
                int v116 = 0;
                int v117 = 0;
                int v118 = v249 + v248 * ((int)v250 % v233);
                v85 = v246;
                while (v94 != v117)
                {
                  int v119 = v117 + 1;
                  if (v118 < 0) {
                    int v116 = v117 + 1;
                  }
                  v118 += v68;
                  ++v117;
                  if (v118 - v68 >= shared_owners)
                  {
                    int v120 = v119 - 1;
                    goto LABEL_133;
                  }
                }
                int v120 = v65;
LABEL_133:
                if (v110 < v115)
                {
                  uint64_t v121 = v110;
                  v122 = &v104[(int)v65 * (v252 + v110) + v116];
                  int v123 = v249
                       + shared_owners * ((int)v250 / v232 / v233 * shared_owners_high - v243 + v244 * v110 + v112)
                       + v68 * v116
                       + v248 * ((int)v250 % v233);
                  do
                  {
                    int v124 = v123;
                    v125 = v122;
                    uint64_t v126 = v120 - (uint64_t)v116;
                    if (v116 < v120)
                    {
                      do
                      {
                        *v125++ = *(float *)(v107 + 4 * v124);
                        v124 += v68;
                        --v126;
                      }
                      while (v126);
                    }
                    ++v121;
                    v122 = (float *)((char *)v122 + v95);
                    v123 += v241;
                  }
                  while (v121 != v115);
                }
                uint64_t v106 = v250 + 1;
                v255 += v247;
                uint64_t v105 = v252 + (int)v254;
              }
              while (v250 + 1 != v238);
            }
          }
          LODWORD(v212) = v254 * v65;
          LODWORD(__ldb) = v254 * v65;
          LODWORD(__B) = v225;
          Espresso::wrapper_for_cblas_sgemm((Espresso *)v230[29].n128_u8[4], 101, 111, 111, __M, v247, v225, (const float *)(*(void *)(v223 + 24) + 4 * (int)(v229 * __M * v231 * v233 * v232)), 1.0, 0.0, __B, v104, __ldb, (float *)(v234[6] + 4 * (int)(v227 * v228 * (v229 * __M + v226))), v212, v213);
          int v92 = v229 + 1;
        }
        while (v229 + 1 != v224);
      }
      v152 = v230;
      uint64_t v43 = v219;
      uint64_t v54 = v218 + 8;
      if (v230[25].n128_u32[3] && (int)v254 >= 1)
      {
        int v153 = 0;
        int v154 = 0;
        float v155 = 1.0 / (float)(v230[22].n128_u32[0] * v230[21].n128_u32[3] * v230[22].n128_u32[1]);
        unint64_t v156 = v230[39].n128_u64[0];
        int v157 = v230[21].n128_i32[2];
        do
        {
          if ((int)v65 >= 1)
          {
            int v158 = 0;
            uint64_t v159 = *(void *)(v156 + 24);
            uint64_t v160 = v154;
            uint64_t v161 = 4 * v154;
            do
            {
              float v162 = *(float *)(v159 + 4 * (v160 + (int)v247))
                   + (float)((float)-(float)(*(float *)(v159 + 4 * v160) * *(float *)(v159 + 4 * v160)) * v155);
              if (v162 < 0.000001) {
                float v162 = 0.000001;
              }
              if (v157 >= 1)
              {
                float v163 = 1.0 / sqrtf(v162);
                v164 = (float *)(v234[6] + v161);
                int v165 = v157;
                do
                {
                  float *v164 = v163 * *v164;
                  v164 += (int)v247;
                  --v165;
                }
                while (v165);
              }
              ++v160;
              ++v158;
              v161 += 4;
            }
            while (v158 != v65);
            int v154 = v160;
          }
          ++v153;
        }
        while (v153 != v254);
      }
      if (!v230[27].n128_u16[1])
      {
        if (v230[26].n128_u32[0])
        {
          uint64_t v166 = v230[21].n128_u32[2];
          if ((int)v166 >= 1)
          {
            uint64_t v167 = 0;
            int v168 = 0;
            int v169 = *((_DWORD *)v234 + 9) * *((_DWORD *)v234 + 8);
            uint64_t v170 = *((void *)v221 + 2);
            do
            {
              if (v169 >= 1)
              {
                v171 = (float *)(v170 + 16 * v167);
                float v172 = *v171;
                float v173 = v171[1];
                float v174 = v171[2];
                float v175 = v171[3];
                v176 = (float *)(v234[6] + 4 * v168);
                int v177 = v169;
                float v178 = 1.0 / v175;
                do
                {
                  float *v176 = v173 + (float)((float)(v178 * (float)(*v176 - v174)) * v172);
                  ++v176;
                  --v177;
                }
                while (v177);
              }
              ++v167;
              v168 += v169;
            }
            while (v167 != v166);
          }
        }
        else if (v221 && v230[21].n128_i32[2] >= 1)
        {
          uint64_t v179 = 0;
          uint64_t v180 = 0;
          vDSP_Length v181 = *((int *)v234 + 9) * (uint64_t)*((int *)v234 + 8);
          do
          {
            LODWORD(v267.data) = 0;
            LODWORD(v267.data) = *(_DWORD *)(*((void *)v221 + 2) + 4 * v180);
            vDSP_vsadd((const float *)(v234[6] + v179), 1, (const float *)&v267, (float *)(v234[6] + v179), 1, v181);
            ++v180;
            v179 += 4 * v181;
          }
          while (v180 < v230[21].n128_i32[2]);
        }
        v152 = v230;
        if (*(_DWORD *)v266 != -1) {
          Espresso::activation_chunk((unsigned int *)v266, (const float *)v234[6], (float *)v234[6], *((_DWORD *)v234 + 9) * *((_DWORD *)v234 + 8) * *((_DWORD *)v234 + 10));
        }
      }
      v182 = (std::__shared_weak_count *)v152[38].n128_u64[1];
      v152[38] = 0u;
      if (v182) {
        nitro::nitro_function::nitro_function(v182);
      }
      v183 = (std::__shared_weak_count *)v152[39].n128_u64[1];
      v152[39] = 0u;
      if (v183) {
        nitro::nitro_function::nitro_function(v183);
      }
      nitro::nitro_function::nitro_function(v246);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v234);
      int v52 = v220 + 1;
      int v184 = *(_DWORD *)(v219 + 20);
      uint64_t v53 = v217;
      if (v220 + 1 >= v184)
      {
        if (v230[27].n128_u16[1] && v184 >= 1)
        {
          int v185 = 0;
          do
          {
            int v186 = *(_DWORD *)(v43 + 8);
            int v187 = *(_DWORD *)(v43 + 12);
            int v188 = v187 * v186;
            uint64_t v189 = v230[21].n128_u32[2];
            uint64_t v190 = *(void *)(v43 + 24);
            int v191 = *(_DWORD *)(v43 + 16);
            int v192 = v187 * v186 * v230[26].n128_u16[7];
            if (v230[26].n128_u32[0])
            {
              if ((int)v189 >= 1)
              {
                uint64_t v193 = 0;
                int v194 = 0;
                uint64_t v195 = *((void *)v221 + 2);
                uint64_t v196 = v190 + 4 * v192 + 4 * v186 * v187 * v191 * v185;
                do
                {
                  if (v188 >= 1)
                  {
                    v197 = (float *)(v196 + 4 * v194);
                    v198 = (float *)(v195 + 16 * v193);
                    float v199 = *v198;
                    float v200 = v198[1];
                    float v201 = v198[2];
                    float v202 = v198[3];
                    int v203 = v188;
                    float v204 = 1.0 / v202;
                    do
                    {
                      float *v197 = v200 + (float)((float)(v204 * (float)(*v197 - v201)) * v199);
                      ++v197;
                      --v203;
                    }
                    while (v203);
                  }
                  ++v193;
                  v194 += v188;
                }
                while (v193 != v189);
              }
            }
            else if (v221 && (int)v189 >= 1)
            {
              uint64_t v205 = 0;
              v206 = (float *)(v190 + 4 * v192 + 4 * v186 * v187 * v191 * v185);
              do
              {
                LODWORD(v267.data) = 0;
                LODWORD(v267.data) = *(_DWORD *)(*((void *)v221 + 2) + 4 * v205);
                vDSP_vsadd(v206, 1, (const float *)&v267, v206, 1, v188);
                ++v205;
                v206 += v188;
              }
              while (v205 < v230[21].n128_i32[2]);
            }
            if (*(_DWORD *)v266 != -1)
            {
              v207 = (float *)(v190 + 4 * v188 * v185 * v191 + 4 * v192);
              Espresso::activation_chunk((unsigned int *)v266, v207, v207, v188 * v189);
            }
            ++v185;
            uint64_t v43 = v219;
          }
          while (v185 < *(_DWORD *)(v219 + 20));
        }
        goto LABEL_223;
      }
    }
    int v70 = v230[23].n128_u16[4];
    int v71 = (v67 - 1) * v240 - shared_owners_high + (v254 - 1) * v244 + 1;
    int v72 = (v66 - 1) * v248 - shared_owners + (v65 - 1) * v68 + 1;
    unsigned int v73 = v71 & ~(v71 >> 31);
    unsigned int v74 = v72 & ~(v72 >> 31);
    unsigned int v75 = v74 >> 1;
    unsigned int v76 = v73 >> 1;
    unsigned int v77 = v73 - (v73 >> 1);
    unsigned int v78 = v74 - (v74 >> 1);
    _ZF = v70 == 1;
    if (v70 == 1) {
      unsigned int v80 = v76;
    }
    else {
      unsigned int v80 = v77;
    }
    unsigned int v243 = v80;
    if (_ZF) {
      unsigned int v81 = v75;
    }
    else {
      unsigned int v81 = v78;
    }
    goto LABEL_88;
  }
LABEL_223:
  if (!v216)
  {
    v208 = (std::__shared_weak_count *)v230[36].n128_u64[1];
    v230[36] = 0u;
    if (v208) {
      nitro::nitro_function::nitro_function(v208);
    }
  }
  if (v214) {
    nitro::nitro_function::nitro_function(v214);
  }
  if (v215) {
    nitro::nitro_function::nitro_function(v215);
  }
  if (v263) {
    nitro::nitro_function::nitro_function(v263);
  }
  if (v265) {
    nitro::nitro_function::nitro_function(v265);
  }
}

void sub_192B3EAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (*(char *)(v70 - 185) < 0) {
    operator delete(*(void **)(v70 - 208));
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v70 - 137) < 0) {
    operator delete(*(void **)(v70 - 160));
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a62 < 0)
  {
    operator delete(a57);
    if ((v69 & 1) == 0)
    {
LABEL_14:
      int v72 = *(std::__shared_weak_count **)(v70 - 232);
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      unsigned int v73 = *(std::__shared_weak_count **)(v70 - 216);
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v69)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v68);
  goto LABEL_14;
}

void sub_192B3EB78(_Unwind_Exception *a1)
{
  long long v3 = *(std::__shared_weak_count **)(v1 - 232);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(v1 - 216);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(a1);
}

void sub_192B3EB98(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function();
  }
  if (*(void *)(v2 - 232)) {
    nitro::nitro_function::nitro_function();
  }
  if (*(void *)(v2 - 216)) {
    nitro::nitro_function::nitro_function();
  }
  _Unwind_Resume(a1);
}

void sub_192B3EBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    JUMPOUT(0x192B3EC8CLL);
  }
  if (*(void *)(v16 - 232)) {
    nitro::nitro_function::nitro_function();
  }
  if (*(void *)(v16 - 216)) {
    nitro::nitro_function::nitro_function();
  }
  _Unwind_Resume(a1);
}

void sub_192B3EBB0()
{
}

void sub_192B3EBB8()
{
}

void sub_192B3EC20()
{
}

void sub_192B3EC2C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x192B3ECA8);
}

void sub_192B3EC44()
{
}

void sub_192B3EC4C()
{
}

void sub_192B3EC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a16) {
    JUMPOUT(0x192B3EC8CLL);
  }
  JUMPOUT(0x192B3EC90);
}

void Espresso::pool3d_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    int v100 = 0;
    v101 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v100, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    BOOL v98 = 0;
    int v99 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v98, *(uint64_t **)a4);
  }
  int v69 = v100;
  if (!v100)
  {
    unsigned __int32 v67 = "pool3d_kernel_cpu: Null top blob";
    goto LABEL_92;
  }
  if (!v98)
  {
    unsigned __int32 v67 = "pool3d_kernel_cpu: Null bottom blob";
LABEL_92:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v67);
  }
  int v6 = v98 + 2;
  int v5 = v98[2];
  double v7 = v100 + 2;
  int v8 = v100[2];
  uint64_t v71 = v100[5];
  uint64_t v79 = v100[4];
  uint64_t v91 = v100[3];
  int v77 = v98[4];
  int v90 = v98[3];
  int v9 = *(_DWORD *)(a1 + 296);
  int v10 = *(_DWORD *)(a1 + 300);
  int v80 = *(_DWORD *)(a1 + 304);
  int v11 = *(_DWORD *)(a1 + 284);
  int v88 = *(_DWORD *)(a1 + 288);
  int v75 = *(_DWORD *)(a1 + 292);
  int v12 = *(__int16 *)(a1 + 316);
  int v96 = v98;
  if (v12 != 4)
  {
    if (v12 == 2)
    {
      unsigned int v24 = 0;
      unsigned int v25 = 0;
      unsigned int v89 = 0;
      unsigned int v20 = 0;
      unsigned int v27 = 0;
      unsigned int v76 = 0;
      goto LABEL_29;
    }
    if (v12 != 1)
    {
      unsigned int v24 = *(__int16 *)(a1 + 324);
      unsigned int v25 = *(__int16 *)(a1 + 326);
      unsigned int v89 = *(__int16 *)(a1 + 328);
      unsigned int v20 = *(__int16 *)(a1 + 330);
      unsigned int v76 = *(__int16 *)(a1 + 332);
      unsigned int v27 = *(__int16 *)(a1 + 334);
      goto LABEL_29;
    }
  }
  unsigned int v13 = (v10 * (v91 - 1) - v90 + v88) & ~((v10 * ((int)v91 - 1) - v90 + v88) >> 31);
  unsigned int v14 = (v9 * (v8 - 1) - v5 + v11) & ~((v9 * (v8 - 1) - v5 + v11) >> 31);
  unsigned int v15 = (v80 * (v79 - 1) - v77 + v75) & ~((v80 * ((int)v79 - 1) - v77 + v75) >> 31);
  unsigned int v16 = v14 >> 1;
  int v17 = *(unsigned __int16 *)(a1 + 316);
  unsigned int v18 = v14 - (v14 >> 1);
  unsigned int v19 = v13 >> 1;
  unsigned int v20 = v13 - (v13 >> 1);
  unsigned int v21 = v15 >> 1;
  unsigned int v22 = v15 - (v15 >> 1);
  BOOL v23 = v17 == 1;
  if (v17 == 1) {
    unsigned int v24 = v16;
  }
  else {
    unsigned int v24 = v18;
  }
  if (v17 == 1) {
    unsigned int v25 = v18;
  }
  else {
    unsigned int v25 = v16;
  }
  if (v23) {
    unsigned int v26 = v19;
  }
  else {
    unsigned int v26 = v20;
  }
  unsigned int v89 = v26;
  if (v23)
  {
    unsigned int v27 = v22;
  }
  else
  {
    unsigned int v20 = v19;
    unsigned int v27 = v21;
  }
  if (v23) {
    unsigned int v22 = v21;
  }
  unsigned int v76 = v22;
LABEL_29:
  uint64_t v28 = 0;
  uint64_t v107 = 0;
  long long v105 = 0u;
  long long v106 = 0u;
  uint64_t v29 = 1;
  do
  {
    *((void *)&v105 + v28) = (int)v29;
    v29 *= v6[v28++];
  }
  while (v28 != 4);
  uint64_t v30 = 0;
  uint64_t v104 = 0;
  long long v102 = 0u;
  long long v103 = 0u;
  uint64_t v31 = 1;
  do
  {
    *((void *)&v102 + v30) = (int)v31;
    v31 *= v7[v30++];
  }
  while (v30 != 4);
  unsigned int v32 = *(_DWORD *)(a1 + 280);
  if (v32 > 1) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Unsupported Pool3D mode.");
  }
  if ((int)v71 >= 1)
  {
    uint64_t v97 = 0;
    uint64_t v72 = 0;
    int v74 = v27 + v77;
    uint64_t v68 = *((void *)&v103 + 1);
    uint64_t v73 = v103;
    uint64_t v82 = *((void *)&v102 + 1);
    int v86 = v20 + v90;
    int v87 = v10;
    int v33 = v25 + v5;
    uint64_t v70 = 4 * *((void *)&v106 + 1);
    uint64_t v34 = 4 * v106;
    uint64_t v35 = 4 * *((void *)&v105 + 1);
    while ((int)v79 < 1)
    {
LABEL_82:
      v97 += v70;
      if (++v72 == v71) {
        goto LABEL_83;
      }
    }
    *(_DWORD *)&v81[8] = 0;
    uint64_t v78 = *((void *)v69 + 3) + 4 * v68 * v72;
    *(void *)unsigned int v81 = -v76;
    while ((int)v91 < 1)
    {
LABEL_81:
      *(_DWORD *)v81 += v80;
      if (++*(void *)&v81[4] == v79) {
        goto LABEL_82;
      }
    }
    uint64_t v36 = 0;
    int v37 = v80 * *(_DWORD *)&v81[4] - v76;
    int v38 = v37 + v75;
    if (v37 + v75 >= v74) {
      int v38 = v74;
    }
    int v39 = v77;
    if (v38 < v77) {
      int v39 = v38;
    }
    int v40 = v37 & ~(v37 >> 31);
    int v85 = v38 - v37;
    int v84 = v39 - v40;
    uint64_t v41 = v39;
    int v93 = -v89;
    while (1)
    {
      uint64_t v92 = v36;
      int v42 = v10 * v36 - v89;
      int v43 = v42 + v88;
      if (v42 + v88 >= v86) {
        int v43 = v86;
      }
      int v44 = v43 >= v90 ? v90 : v43;
      if (v8 >= 1) {
        break;
      }
LABEL_80:
      uint64_t v36 = v92 + 1;
      int v10 = v87;
      v93 += v87;
      if (v92 + 1 == v91) {
        goto LABEL_81;
      }
    }
    int v45 = 0;
    int v46 = v42 & ~(v42 >> 31);
    v47 = (float *)(v78 + 4 * v73 * *(void *)&v81[4] + 4 * v82 * v36);
    int v95 = (v43 - v42) * v85;
    int v94 = *(_DWORD *)(a1 + 308);
    int v48 = -v24;
    while (1)
    {
      int v49 = v45 * v9 - v24;
      int v50 = v49 + v11 >= v33 ? v33 : v49 + v11;
      int v51 = v49 & ~(v49 >> 31);
      int v52 = v50 >= v5 ? v5 : v50;
      if (v40 < (int)v41) {
        break;
      }
      float v54 = 0.0;
      float v55 = -3.4028e38;
      if (!v32) {
        goto LABEL_76;
      }
LABEL_79:
      *v47++ = v55;
      ++v45;
      v48 += v9;
      if (v45 == v8) {
        goto LABEL_80;
      }
    }
    uint64_t v53 = *((void *)v96 + 3)
        + v97
        + v34 * (*(_DWORD *)v81 & ~(*(int *)v81 >> 31))
        + v35 * (v93 & ~(v93 >> 31))
        + 4 * (v48 & ~(v48 >> 31));
    float v54 = 0.0;
    float v55 = -3.4028e38;
    uint64_t v56 = *(_DWORD *)v81 & ~(*(int *)v81 >> 31);
    do
    {
      if (v44 > v46)
      {
        uint64_t v57 = (float *)v53;
        int v58 = v46;
        do
        {
          uint64_t v59 = v57;
          uint64_t v60 = v48 & ~(v48 >> 31);
          if (v52 > v51)
          {
            do
            {
              float v61 = *v59++;
              float v62 = v61;
              if (v32) {
                float v63 = -0.0;
              }
              else {
                float v63 = v62;
              }
              float v64 = v54 + v63;
              if (v62 <= v55) {
                float v62 = v55;
              }
              if (v32 == 1) {
                float v55 = v62;
              }
              else {
                float v54 = v64;
              }
              ++v60;
            }
            while (v60 < v52);
          }
          ++v58;
          uint64_t v57 = (float *)((char *)v57 + v35);
        }
        while (v58 < v44);
      }
      ++v56;
      v53 += v34;
    }
    while (v56 < v41);
    if (v32) {
      goto LABEL_79;
    }
LABEL_76:
    int v65 = (v44 - v46) * v84 * (v52 - v51);
    if (!v94) {
      int v65 = v95 * (v50 - v49);
    }
    float v55 = v54 * (float)(1.0 / (float)v65);
    goto LABEL_79;
  }
LABEL_83:
  if (v99) {
    nitro::nitro_function::nitro_function(v99);
  }
  unsigned __int32 v66 = v101;
  if (v101)
  {
    nitro::nitro_function::nitro_function(v66);
  }
}

void sub_192B3F3BC(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 - 184);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pool3d_kernel_cpu::~pool3d_kernel_cpu(Espresso::pool3d_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::pool_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v180 = 0;
    vDSP_Length v181 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v180, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v178 = 0;
    uint64_t v179 = 0;
    goto LABEL_160;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v178, *(uint64_t **)a4);
  uint64_t v6 = v180;
  if (!v180 || (uint64_t v7 = v178) == 0) {
LABEL_160:
  }
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("pool_kernel_cpu: One top and bottom required");
  int v8 = *(_DWORD *)(v178 + 8);
  uint64_t v10 = *(unsigned int *)(v180 + 8);
  int v9 = (int *)(v180 + 8);
  int v177 = *(_DWORD *)(v180 + 12);
  int v11 = *(_DWORD *)(a1 + 320);
  int v12 = *(_DWORD *)(a1 + 324);
  uint64_t v13 = *(int *)(a1 + 308);
  int v174 = *(_DWORD *)(v178 + 12);
  int v175 = *(_DWORD *)(a1 + 312);
  int v14 = *(__int16 *)(a1 + 340);
  if (v14 != 4)
  {
    if (v14 == 2)
    {
      unsigned int v23 = 0;
      unsigned int v176 = 0;
      unsigned int v24 = 0;
      unsigned int v25 = 0;
      goto LABEL_23;
    }
    if (v14 != 1)
    {
      unsigned int v25 = *(__int16 *)(a1 + 348);
      unsigned int v24 = *(__int16 *)(a1 + 350);
      unsigned int v176 = *(__int16 *)(a1 + 352);
      unsigned int v23 = *(__int16 *)(a1 + 354);
      goto LABEL_23;
    }
  }
  unsigned int v15 = (v12 * (v177 - 1) - *(_DWORD *)(v178 + 12) + v175) & ~((v12 * (v177 - 1) - *(_DWORD *)(v178 + 12) + v175) >> 31);
  unsigned int v16 = (v11 * (v10 - 1) - v8 + v13) & ~((v11 * ((int)v10 - 1) - v8 + (int)v13) >> 31);
  int v17 = *(unsigned __int16 *)(a1 + 340);
  unsigned int v18 = v16 >> 1;
  unsigned int v19 = v16 - (v16 >> 1);
  unsigned int v20 = v15 >> 1;
  unsigned int v21 = v15 - (v15 >> 1);
  BOOL v22 = v17 == 1;
  if (v17 == 1) {
    unsigned int v23 = v21;
  }
  else {
    unsigned int v23 = v20;
  }
  if (v22) {
    unsigned int v21 = v20;
  }
  unsigned int v176 = v21;
  if (v22) {
    unsigned int v24 = v19;
  }
  else {
    unsigned int v24 = v18;
  }
  if (v22) {
    unsigned int v25 = v18;
  }
  else {
    unsigned int v25 = v19;
  }
LABEL_23:
  uint64_t v26 = 0;
  uint64_t v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  uint64_t v27 = 1;
  do
  {
    *((void *)&v185 + v26) = (int)v27;
    v27 *= *(unsigned int *)(v7 + 8 + 4 * v26++);
  }
  while (v26 != 4);
  uint64_t v28 = 0;
  uint64_t v184 = 0;
  long long v182 = 0u;
  long long v183 = 0u;
  uint64_t v29 = 1;
  do
  {
    *((void *)&v182 + v28) = (int)v29;
    v29 *= v9[v28++];
  }
  while (v28 != 4);
  int v153 = *(unsigned __int16 *)(a1 + 372);
  int v30 = v174;
  if (!*(_WORD *)(a1 + 372)) {
    int v153 = *(_DWORD *)(v6 + 16);
  }
  int v31 = *(_DWORD *)(a1 + 304);
  uint64_t v149 = v7;
  uint64_t v150 = v6;
  uint64_t v157 = a1;
  if (v31)
  {
    if (v31 == 1)
    {
      if (v25 || v24 || v176 || v23 || v174 != 1 || v177 != 1 || v11 != 2)
      {
        uint64_t v162 = *(unsigned int *)(v6 + 20);
        if ((int)v162 >= 1)
        {
          uint64_t v101 = 0;
          uint64_t v165 = 4 * v174 * v8 * *(unsigned __int16 *)(a1 + 364);
          uint64_t v154 = *((void *)&v183 + 1);
          uint64_t v156 = (int)(v177 * v10 * *(unsigned __int16 *)(a1 + 366));
          uint64_t v169 = v183;
          uint64_t v159 = 4 * *((void *)&v186 + 1);
          uint64_t v102 = 4 * v186;
          do
          {
            if (v153 >= 1)
            {
              uint64_t v103 = 0;
              uint64_t v171 = *(void *)(v150 + 24) + 4 * v154 * v101 + 4 * v156;
              uint64_t v104 = *(void *)(v7 + 24) + v165;
              do
              {
                if (v177 >= 1)
                {
                  int v105 = 0;
                  long long v106 = (float *)(v171 + 4 * v169 * v103);
                  uint64_t v107 = 4 * *((void *)&v185 + 1);
                  int v108 = -v176;
                  do
                  {
                    int v109 = v105 * v12 - v176;
                    int v110 = v109 + v175;
                    if (v109 + v175 >= v174) {
                      int v110 = v174;
                    }
                    if ((int)v10 >= 1)
                    {
                      int v111 = 0;
                      int v112 = v109 & ~(v109 >> 31);
                      int v113 = -v25;
                      do
                      {
                        float v114 = 0.0;
                        if (v112 < v110)
                        {
                          int v115 = v111 * v11 - v25;
                          int v116 = v115 + v13;
                          if (v115 + (int)v13 >= v8) {
                            int v116 = v8;
                          }
                          int v117 = v115 & ~(v115 >> 31);
                          char v118 = 1;
                          uint64_t v119 = v104 + v107 * (v108 & ~(v108 >> 31));
                          int v120 = v112;
                          do
                          {
                            uint64_t v121 = v113 & ~(v113 >> 31);
                            if (v117 < v116)
                            {
                              do
                              {
                                if ((*(float *)(v119 + 4 * v121) > v114) | v118 & 1) {
                                  float v114 = *(float *)(v119 + 4 * v121);
                                }
                                ++v121;
                                char v118 = 0;
                              }
                              while (v121 < v116);
                            }
                            ++v120;
                            v119 += v107;
                          }
                          while (v120 < v110);
                        }
                        *v106++ = v114;
                        ++v111;
                        v113 += v11;
                      }
                      while (v111 != v10);
                    }
                    ++v105;
                    v108 += v12;
                  }
                  while (v105 != v177);
                }
                ++v103;
                v104 += v102;
              }
              while (v103 != v153);
            }
            v165 += v159;
            ++v101;
          }
          while (v101 != v162);
        }
      }
      else if (v13 == 2)
      {
        int v53 = v10 + 3;
        if ((int)v10 >= 0) {
          int v53 = v10;
        }
        if (*(int *)(v6 + 20) >= 1)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = (v53 >> 2);
          long long v58 = v186;
          uint64_t v59 = 4 * *((void *)&v183 + 1);
          uint64_t v60 = 4 * v183;
          uint64_t v61 = 4 * *((void *)&v186 + 1);
          uint64_t v62 = 4 * v186;
          do
          {
            if (v153 >= 1)
            {
              uint64_t v63 = 0;
              int v64 = *v9;
              uint64_t v65 = v54;
              uint64_t v66 = v55;
              do
              {
                uint64_t v67 = *(void *)(v149 + 24);
                int v68 = *(_DWORD *)(v149 + 12) * *(_DWORD *)(v149 + 8) * *(unsigned __int16 *)(v157 + 364);
                uint64_t v69 = *(void *)(v150 + 24);
                uint64_t v70 = *(_DWORD *)(v150 + 12) * v64 * *(unsigned __int16 *)(v157 + 366);
                if ((int)v10 < 4)
                {
                  unsigned int v74 = 0;
                }
                else
                {
                  uint64_t v71 = (int8x16_t *)(v69 + v66 + 4 * v70);
                  uint64_t v72 = (const float *)(v67 + v65 + 4 * v68);
                  uint64_t v73 = v57;
                  do
                  {
                    float32x4x2_t v189 = vld2q_f32(v72);
                    v72 += 8;
                    *v71++ = vbslq_s8((int8x16_t)vcgtq_f32(v189.val[1], v189.val[0]), (int8x16_t)v189.val[1], (int8x16_t)v189.val[0]);
                    --v73;
                  }
                  while (v73);
                  int v64 = *v9;
                  unsigned int v74 = v57;
                }
                if (v64 > (int)(4 * v74))
                {
                  uint64_t v75 = v67 + 4 * *((void *)&v58 + 1) * v56 + 4 * v58 * v63 + 4 * v68;
                  uint64_t v76 = v64 - 4 * v74;
                  uint64_t v77 = v69 + 4 * v70 + 16 * v74;
                  unsigned int v78 = 8 * v74;
                  do
                  {
                    float v79 = *(float *)(v75 + 4 * v78);
                    if (v79 < *(float *)(v75 + 4 * (v78 + 1))) {
                      float v79 = *(float *)(v75 + 4 * (v78 + 1));
                    }
                    *(float *)(v77 + v66) = v79;
                    v77 += 4;
                    v78 += 2;
                    --v76;
                  }
                  while (v76);
                }
                ++v63;
                v66 += v60;
                v65 += v62;
              }
              while (v63 != v153);
            }
            ++v56;
            v55 += v59;
            v54 += v61;
          }
          while (v56 < *(int *)(v150 + 20));
        }
      }
      else
      {
        uint64_t v123 = *(unsigned int *)(v6 + 20);
        if ((int)v123 >= 1)
        {
          uint64_t v124 = 0;
          long long v125 = v186;
          uint64_t v126 = v8 * *(unsigned __int16 *)(a1 + 364);
          uint64_t v127 = (int)(v10 * *(unsigned __int16 *)(a1 + 366));
          long long v128 = v183;
          uint64_t v129 = 4 * v126 + 4;
          uint64_t v130 = 4 * *((void *)&v186 + 1);
          uint64_t v131 = 4 * v186;
          do
          {
            if (v153 >= 1)
            {
              uint64_t v132 = 0;
              uint64_t v133 = *(void *)(v149 + 24);
              uint64_t v134 = v133 + 4 * *((void *)&v125 + 1) * v124 + 4 * v126;
              uint64_t v135 = *(void *)(v150 + 24) + 4 * *((void *)&v128 + 1) * v124 + 4 * v127;
              int v136 = (float *)(v133 + v129);
              do
              {
                if ((int)v10 >= 1)
                {
                  uint64_t v137 = 0;
                  int v138 = (float *)(v135 + 4 * v128 * v132);
                  int v139 = v136;
                  do
                  {
                    float v140 = *(float *)(v134 + 4 * v125 * v132 + 8 * v137);
                    int v141 = v139;
                    uint64_t v142 = v13 - 1;
                    if (v13 >= 2)
                    {
                      do
                      {
                        float v143 = *v141++;
                        float v144 = v143;
                        if (v143 > v140) {
                          float v140 = v144;
                        }
                        --v142;
                      }
                      while (v142);
                    }
                    *v138++ = v140;
                    ++v137;
                    v139 += 2;
                  }
                  while (v137 != v10);
                }
                ++v132;
                int v136 = (float *)((char *)v136 + v131);
              }
              while (v132 != v153);
            }
            ++v124;
            v129 += v130;
          }
          while (v124 != v123);
        }
      }
    }
    else if (v31 == 2)
    {
      uint64_t v166 = *(unsigned int *)(v6 + 20);
      if ((int)v166 >= 1)
      {
        uint64_t v160 = *((void *)&v183 + 1);
        uint64_t v170 = 0;
        uint64_t v172 = v183;
        uint64_t v158 = (int)(v177 * v10 * *(unsigned __int16 *)(a1 + 366));
        uint64_t v167 = 4 * v174 * v8 * *(unsigned __int16 *)(a1 + 364);
        uint64_t v163 = 4 * *((void *)&v186 + 1);
        uint64_t v32 = 4 * v186;
        do
        {
          if (v153 >= 1)
          {
            uint64_t v33 = 0;
            uint64_t v34 = *(void *)(v150 + 24) + 4 * v160 * v170 + 4 * v158;
            uint64_t v35 = *(void *)(v149 + 24) + v167;
            do
            {
              if (v177 >= 1)
              {
                int v36 = 0;
                int v37 = (float *)(v34 + 4 * v172 * v33);
                uint64_t v38 = 4 * *((void *)&v185 + 1);
                int v39 = -v176;
                do
                {
                  int v40 = v36 * v12 - v176;
                  int v41 = v40 + v175;
                  if (v40 + v175 >= v174) {
                    int v41 = v174;
                  }
                  if ((int)v10 >= 1)
                  {
                    int v42 = 0;
                    int v43 = v40 & ~(v40 >> 31);
                    int v44 = -v25;
                    do
                    {
                      float v45 = 0.0;
                      if (v43 < v41)
                      {
                        int v46 = v42 * v11 - v25;
                        int v47 = v46 + v13;
                        if (v46 + (int)v13 >= v8) {
                          int v47 = v8;
                        }
                        int v48 = v46 & ~(v46 >> 31);
                        uint64_t v49 = v47;
                        uint64_t v50 = v35 + v38 * (v39 & ~(v39 >> 31));
                        int v51 = v43;
                        do
                        {
                          uint64_t v52 = v44 & ~(v44 >> 31);
                          if (v48 < (int)v49)
                          {
                            do
                            {
                              float v45 = v45 + (float)(*(float *)(v50 + 4 * v52) * *(float *)(v50 + 4 * v52));
                              ++v52;
                            }
                            while (v52 < v49);
                          }
                          ++v51;
                          v50 += v38;
                        }
                        while (v51 < v41);
                      }
                      if (v45 < 0.0001) {
                        float v45 = 0.0001;
                      }
                      *v37++ = sqrtf(v45);
                      ++v42;
                      v44 += v11;
                    }
                    while (v42 != v10);
                  }
                  ++v36;
                  v39 += v12;
                }
                while (v36 != v177);
              }
              ++v33;
              v35 += v32;
            }
            while (v33 != v153);
          }
          v167 += v163;
          ++v170;
        }
        while (v170 != v166);
      }
    }
  }
  else
  {
    uint64_t v148 = *(unsigned int *)(v6 + 20);
    if ((int)v148 >= 1)
    {
      uint64_t v152 = 0;
      uint64_t v145 = *((void *)&v183 + 1);
      uint64_t v146 = (int)(v177 * v10 * *(unsigned __int16 *)(a1 + 366));
      uint64_t v155 = v183;
      uint64_t v151 = 4 * v174 * v8 * *(unsigned __int16 *)(a1 + 364);
      uint64_t v147 = 4 * *((void *)&v186 + 1);
      uint64_t v164 = 4 * v186;
      do
      {
        if (v153 >= 1)
        {
          uint64_t v168 = 0;
          uint64_t v161 = *(void *)(v150 + 24) + 4 * v145 * v152 + 4 * v146;
          uint64_t v173 = *(void *)(v149 + 24) + v151;
          do
          {
            if (v177 >= 1)
            {
              int v80 = 0;
              unsigned int v81 = (float *)(v161 + 4 * v155 * v168);
              int v82 = *(_DWORD *)(v157 + 332);
              uint64_t v83 = 4 * *((void *)&v185 + 1);
              int v84 = -v176;
              do
              {
                int v85 = v80 * v12 - v176;
                if (v85 + v175 >= (int)(v176 + v174)) {
                  int v86 = v176 + v174;
                }
                else {
                  int v86 = v85 + v175;
                }
                if (v86 >= v30) {
                  int v87 = v30;
                }
                else {
                  int v87 = v86;
                }
                if ((int)v10 >= 1)
                {
                  int v88 = 0;
                  int v89 = v85 & ~(v85 >> 31);
                  int v90 = v86 - v85;
                  int v91 = -v25;
                  do
                  {
                    int v92 = v88 * v11 - v25;
                    if (v92 + (int)v13 >= (int)(v25 + v8)) {
                      int v93 = v25 + v8;
                    }
                    else {
                      int v93 = v92 + v13;
                    }
                    int v94 = v92 & ~(v92 >> 31);
                    if (v93 >= v8) {
                      int v95 = v8;
                    }
                    else {
                      int v95 = v93;
                    }
                    float v96 = 0.0;
                    if (v87 > v89)
                    {
                      uint64_t v97 = v173 + v83 * (v84 & ~(v84 >> 31));
                      int v98 = v85 & ~(v85 >> 31);
                      do
                      {
                        uint64_t v99 = v91 & ~(v91 >> 31);
                        if (v95 > v94)
                        {
                          do
                            float v96 = v96 + *(float *)(v97 + 4 * v99++);
                          while (v99 < v95);
                        }
                        ++v98;
                        v97 += v83;
                      }
                      while (v98 < v87);
                    }
                    int v100 = (v93 - v92) * v90;
                    if (v82) {
                      int v100 = (v95 - v94) * (v87 - v89);
                    }
                    *v81++ = v96 * (float)(1.0 / (float)v100);
                    ++v88;
                    v91 += v11;
                  }
                  while (v88 != v10);
                }
                ++v80;
                v84 += v12;
                int v30 = v174;
              }
              while (v80 != v177);
            }
            v173 += v164;
            ++v168;
          }
          while (v168 != v153);
        }
        v151 += v147;
        ++v152;
      }
      while (v152 != v148);
    }
  }
  if (v179) {
    nitro::nitro_function::nitro_function(v179);
  }
  v122 = v181;
  if (v181)
  {
    nitro::nitro_function::nitro_function(v122);
  }
}

void sub_192B3FF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pool_kernel_cpu::~pool_kernel_cpu(Espresso::pool_kernel_cpu *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::lrn_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v36 = 0;
    int v37 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v36, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v34, *(uint64_t **)a4);
  }
  uint64_t v6 = 0;
  *(_OWORD *)__ID = 0u;
  long long v44 = 0u;
  uint64_t v7 = v36;
  uint64_t v8 = v36 + 8;
  uint64_t v9 = 1;
  do
  {
    __ID[v6] = (int)v9;
    v9 *= *(unsigned int *)(v8 + 4 * v6++);
  }
  while (v6 != 4);
  uint64_t v10 = 0;
  int v11 = *(_DWORD *)(v7 + 8);
  do
  {
    v11 *= *(_DWORD *)(v7 + 12 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  int v42 = v11;
  int v12 = v44;
  int v41 = DWORD2(v44);
  int v13 = *(_DWORD *)(v7 + 20);
  int v33 = *(_DWORD *)(a1 + 288);
  if (v33) {
    int v14 = *(_DWORD *)(a1 + 288);
  }
  else {
    int v14 = 3;
  }
  float __B = *(float *)(a1 + 280) / (float)v14;
  float v38 = 2.0;
  float __C = 1.0;
  uint64_t v32 = v34;
  vvpowsf(*(float **)(v7 + 24), &v38, *(const float **)(v34 + 24), &v42);
  if (v13 >= 1)
  {
    vDSP_Stride v15 = __ID[0];
    int v31 = (float *)(a1 + 284);
    int v16 = 0;
    uint64_t v17 = v12;
    uint64_t v29 = -(uint64_t)v12;
    uint64_t v18 = 4 * v12;
    uint64_t v28 = v7;
    int v27 = v13;
    do
    {
      uint64_t v19 = *(void *)(v7 + 24);
      int v20 = v41;
      unsigned int v21 = (float *)(v19 + 4 * v41 * v16);
      uint64_t v22 = *(void *)(v32 + 24);
      unsigned int v23 = (const float *)(v22 + 4 * v41 * v16);
      if (v33 >= 2)
      {
        int v30 = v16;
        uint64_t v24 = v18 + 4 * v41 * v16;
        uint64_t v25 = v29;
        uint64_t v26 = (v33 / 2 + 1) - 1;
        do
        {
          vDSP_vma((const float *)(v22 + v24), v15, (const float *)(v22 + v24), v15, v21, v15, v21, v15, v25 + v41);
          vDSP_vma(v23, v15, v23, v15, (const float *)(v19 + v24), v15, (float *)(v19 + v24), v15, v25 + v41);
          v25 -= v17;
          v24 += v18;
          --v26;
        }
        while (v26);
        int v20 = v41;
        uint64_t v7 = v28;
        int v13 = v27;
        int v16 = v30;
      }
      vDSP_vsmsa(v21, v15, &__B, &__C, v21, v15, v20);
      vvpowsf(v21, v31, v21, &v41);
      vvdivf(v21, v23, v21, &v41);
      ++v16;
    }
    while (v16 != v13);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
}

void sub_192B4026C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::lrn_kernel_cpu::~lrn_kernel_cpu(Espresso::lrn_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::softmax_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v46 = 0;
    int v47 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v46, *(uint64_t **)a3);
  }
  uint64_t v7 = a4[1];
  if (v7 == *a4)
  {
    uint64_t v44 = 0;
    float v45 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v44, *a4);
    uint64_t v7 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)buf, *v7);
  uint64_t v8 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  if (__p)
  {
    int v43 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)buf, **(void **)a3);
  uint64_t v10 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  int v11 = (Espresso *)__p;
  if (__p)
  {
    int v43 = __p;
    operator delete(__p);
  }
  if (v8 && v10)
  {
    Espresso::abstract_blob_container::shape((char *)buf, **(void **)a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v34, (const Espresso::layer_shape *)buf, 0);
    if (__p)
    {
      int v43 = __p;
      operator delete(__p);
    }
    if (*(unsigned char *)(a1 + 307) || v39 <= 3)
    {
      switch(v39)
      {
        case 1u:
          int v12 = 1;
          if (!v39) {
            goto LABEL_39;
          }
          break;
        case 2u:
          int v12 = v34;
          if (!v39) {
            goto LABEL_39;
          }
          break;
        case 3u:
          int v12 = v35 * v34;
          if (!v39) {
            goto LABEL_39;
          }
          break;
        case 4u:
          int v12 = v35 * v34 * v36;
          if (!v39) {
            goto LABEL_39;
          }
          break;
        case 5u:
          int v12 = v35 * v34 * v36 * v37;
          if (!v39) {
            goto LABEL_39;
          }
          break;
        default:
          int v12 = 0;
          if (!v39) {
            goto LABEL_39;
          }
          break;
      }
      int v13 = *(&v34 + (int)v39 - 1);
    }
    else if (v39 == 5)
    {
      int v12 = v35 * v34;
      int v13 = v37 * v38 * v36;
    }
    else if (v39 == 4)
    {
      int v12 = v34;
      int v13 = v36 * v37 * v35;
    }
    else
    {
      int v12 = 0;
LABEL_39:
      int v13 = 0;
    }
    Espresso::abstract_blob_container::shape((char *)buf, **a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v28, (const Espresso::layer_shape *)buf, 0);
    int v15 = *(unsigned __int8 *)(a1 + 307);
    if (*(unsigned char *)(a1 + 307) || v33 <= 3)
    {
      switch(v33)
      {
        case 1u:
          int v16 = 1;
          if (!v33) {
            goto LABEL_57;
          }
          break;
        case 2u:
          int v16 = v28;
          if (!v33) {
            goto LABEL_57;
          }
          break;
        case 3u:
          int v16 = v29 * v28;
          if (!v33) {
            goto LABEL_57;
          }
          break;
        case 4u:
          int v16 = v29 * v28 * v30;
          if (!v33) {
            goto LABEL_57;
          }
          break;
        case 5u:
          int v16 = v29 * v28 * v30 * v31;
          if (!v33) {
            goto LABEL_57;
          }
          break;
        default:
          int v16 = 0;
          if (!v33) {
            goto LABEL_57;
          }
          break;
      }
      int v17 = *(&v28 + (int)v33 - 1);
    }
    else if (v33 == 5)
    {
      int v16 = v29 * v28;
      int v17 = v31 * v32 * v30;
    }
    else if (v33 == 4)
    {
      int v16 = v28;
      int v17 = v30 * v31 * v29;
    }
    else
    {
      int v16 = 0;
LABEL_57:
      int v17 = 0;
    }
    if (__p)
    {
      int v43 = __p;
      operator delete(__p);
      int v15 = *(unsigned __int8 *)(a1 + 307);
    }
    uint64_t v18 = v46;
    if (v15 || v39 <= 3)
    {
      uint64_t v19 = (std::__shared_weak_count *)operator new(0x60uLL);
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
      int v20 = *(std::__shared_weak_count_vtbl **)(v18 + 24);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BF10;
      *(_OWORD *)&v19[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v19[3].__shared_owners_ = 0u;
      v19[1].__shared_owners_ = 0x100000001;
      LODWORD(v19[1].__shared_weak_owners_) = v13;
      HIDWORD(v19[1].__shared_weak_owners_) = v12;
      v19[2].__vftable = v20;
      LOBYTE(v19[2].__shared_owners_) = 0;
      uint64_t v21 = v44;
      uint64_t v22 = (std::__shared_weak_count *)operator new(0x60uLL);
      v22->__shared_owners_ = 0;
      v22->__shared_weak_owners_ = 0;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
      unsigned int v23 = *(std::__shared_weak_count_vtbl **)(v21 + 24);
      v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BF10;
      *(_OWORD *)&v22[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v22[3].__shared_owners_ = 0u;
      v22[1].__shared_owners_ = 0x100000001;
      LODWORD(v22[1].__shared_weak_owners_) = v17;
      HIDWORD(v22[1].__shared_weak_owners_) = v16;
      v22[2].__vftable = v23;
      LOBYTE(v22[2].__shared_owners_) = 0;
      Espresso::compute_softmax_cpu((uint64_t)&v19[1], (uint64_t)&v22[1], *(_DWORD *)(a1 + 300), *(unsigned char *)(a1 + 306));
      nitro::nitro_function::nitro_function(v22);
      nitro::nitro_function::nitro_function(v19);
    }
    else
    {
      Espresso::compute_softmax_cpu(v46, v44, *(_DWORD *)(a1 + 300), *(unsigned char *)(a1 + 306));
    }
    uint64_t v24 = *a4;
    if ((char *)a4[1] - (char *)*a4 == 32)
    {
      uint64_t v25 = *(uint64_t **)a3;
      if (*(void *)(a3 + 8) - *(void *)a3 == 32)
      {
        LOBYTE(v28) = *(unsigned char *)(a1 + 307);
        LOBYTE(v30) = *(unsigned char *)(a1 + 305);
        int v29 = 1;
        uint64_t v26 = v25 + 2;
        Espresso::compute_cross_entropy_cpu(v25, v24 + 2, v25 + 2, &v28);
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(buf, v26);
        int v27 = v41;
        *(_DWORD *)(a1 + 308) = **(_DWORD **)(*(void *)buf + 24);
        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
      }
    }
  }
  else
  {
    {
      if (v11)
      {
        if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
          dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
        }
        Espresso::softmax_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1E9306FC4;
      }
    }
    if (Espresso::softmax_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
    {
      int v14 = Espresso::espresso_os_log_subsystem(v11, v9);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v14, OS_LOG_TYPE_DEBUG, "softmax_kernel_cpu: Zero shaped input or output so skipping computation", buf, 2u);
      }
    }
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
}

void sub_192B40898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  int v27 = *(std::__shared_weak_count **)(v25 - 112);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(exception_object);
}

float Espresso::compute_cross_entropy_cpu(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  Espresso::abstract_blob_container::shape((char *)&v29, *a1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v33, (const Espresso::layer_shape *)&v29, 0);
  if (__p)
  {
    int v32 = __p;
    operator delete(__p);
  }
  if (!*a4 && v38 > 3)
  {
    if (v38 == 5)
    {
      uint64_t v26 = v34 * (uint64_t)v33;
      uint64_t v8 = v36 * (uint64_t)v37 * v35;
    }
    else
    {
      if (v38 != 4)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        goto LABEL_13;
      }
      uint64_t v26 = v33;
      uint64_t v8 = v35 * (uint64_t)v36 * v34;
    }
    uint64_t v25 = v8;
LABEL_13:
    uint64_t v10 = *(int *)(*a1 + 12) * (uint64_t)*(int *)(*a1 + 8);
    goto LABEL_23;
  }
  switch(v38)
  {
    case 1u:
      uint64_t v9 = 1;
      goto LABEL_20;
    case 2u:
      uint64_t v9 = v33;
      goto LABEL_20;
    case 3u:
      uint64_t v9 = v34 * (uint64_t)v33;
      goto LABEL_20;
    case 4u:
      uint64_t v9 = v34 * (uint64_t)v33 * v35;
      goto LABEL_20;
    case 5u:
      uint64_t v9 = v34 * (uint64_t)v33 * v35 * v36;
LABEL_20:
      uint64_t v26 = v9;
      if (v38) {
        goto LABEL_21;
      }
      goto LABEL_15;
    default:
      uint64_t v26 = 0;
      if (v38) {
LABEL_21:
      }
        uint64_t v25 = *(&v33 + (int)v38 - 1);
      else {
LABEL_15:
      }
        uint64_t v25 = 0;
      uint64_t v10 = 1;
      break;
  }
LABEL_23:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29, a1);
  uint64_t v11 = *(void *)(v29 + 24);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29, a2);
  uint64_t v12 = *(void *)(v29 + 24);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29, a3);
  int v14 = *(float **)(v29 + 24);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  uint64_t v24 = a4;
  int v15 = a4[8];
  if (a4[8]) {
    *int v14 = 0.0;
  }
  if (v26)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      uint64_t v27 = v18;
      uint64_t v28 = v16;
      uint64_t v19 = v17;
      for (uint64_t i = v10; i; --i)
      {
        float v21 = *(float *)(v11 + 4 * (v19 + v10 * (int)llroundf(*(float *)(v12 + v16))));
        if (v21 < 1.1755e-38) {
          float v21 = 1.1755e-38;
        }
        float v22 = logf(v21);
        if (v15)
        {
          float result = *v14 - v22;
          *int v14 = result;
        }
        else
        {
          float result = -v22;
          *(float *)((char *)v14 + v16) = result;
        }
        ++v19;
        v16 += 4;
      }
      uint64_t v18 = v27 + 1;
      v17 += v25;
      uint64_t v16 = v28 + 4 * v10;
    }
    while (v27 + 1 != v26);
  }
  if (v15)
  {
    int v23 = *((_DWORD *)v24 + 1);
    if (v23)
    {
      if (v23 != 1) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("cross_entropy: only REDUCE_MODE_AVG and REDUCE_MODE_SUM are supported");
      }
      float result = *v14 / (float)(unint64_t)(v10 * v26);
      *int v14 = result;
    }
  }
  return result;
}

void sub_192B40C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::softmax_kernel_cpu::~softmax_kernel_cpu(Espresso::softmax_kernel_cpu *this)
{
  *(void *)this = &unk_1EE34ECE0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE34ECE0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::inner_product_kernel_cpu::__launch_bias_nonlinearity(uint64_t a1, int a2, uint64_t *a3, int a4, uint64_t a5, vDSP_Length __N, uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = 0;
  int v13 = *(_DWORD *)(*a3 + 8);
  do
  {
    v13 *= *(_DWORD *)(*a3 + 12 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  int v14 = (_OWORD *)(a1 + 304);
  if (*(_DWORD *)(a1 + 312) && (uint64_t v15 = *(void *)(a1 + 544)) != 0)
  {
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    if ((unint64_t)(v17 - *a8) < 0x21)
    {
      uint64_t v18 = (const float **)(v15 + 16);
      if (!a5) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    if ((unint64_t)(v17 - *a8) <= 0x20) {
      goto LABEL_12;
    }
  }
  uint64_t v18 = (const float **)(*((void *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(v16, v17, 2) + 20) + 24);
  if (!a5) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v19 = 0;
  int v20 = *v18;
  uint64_t v21 = a5;
  do
  {
    vDSP_vadd(v20, 1, (const float *)(*(void *)(*a3 + 24) + v19), 1, (float *)(*(void *)(*a3 + 24) + v19), 1, __N);
    v19 += 4 * __N;
    --v21;
  }
  while (v21);
LABEL_12:
  long long v22 = *(_OWORD *)(a1 + 416);
  v32[6] = *(_OWORD *)(a1 + 400);
  v32[7] = v22;
  int v33 = *(_DWORD *)(a1 + 432);
  long long v23 = *(_OWORD *)(a1 + 352);
  void v32[2] = *(_OWORD *)(a1 + 336);
  v32[3] = v23;
  long long v24 = *(_OWORD *)(a1 + 384);
  v32[4] = *(_OWORD *)(a1 + 368);
  v32[5] = v24;
  long long v25 = *(_OWORD *)(a1 + 320);
  v32[0] = *v14;
  v32[1] = v25;
  uint64_t v26 = *a3;
  uint64_t v27 = (std::__shared_weak_count *)a3[1];
  v31[0] = v26;
  v31[1] = (uint64_t)v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = *(void *)(a1 + 544);
  uint64_t v29 = *(std::__shared_weak_count **)(a1 + 552);
  v30[0] = v28;
  v30[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v32, v31, v13, (uint64_t)v30, __N, a5);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v27)
  {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192B40ED4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::fused_nonlinearity(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LODWORD(v9) = a3;
  int v12 = *(_DWORD *)(a1 + 12);
  if (v12 == 1)
  {
    float __B = 0.0;
    vDSP_vthr(*(const float **)(*a2 + 24), 1, &__B, *(float **)(*a2 + 24), 1, a3);
  }
  else if (v12 == 2)
  {
    unint64_t v13 = 0;
    uint64_t v14 = *a2;
    unint64_t v15 = *(int *)(*a2 + 8);
    uint64_t v16 = *a2 + 12;
    while (1)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v15;
      do
      {
        v18 *= *(int *)(v16 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      if (v18 <= v13) {
        break;
      }
      uint64_t v19 = *(void *)(v14 + 24);
      float v20 = *(float *)(v19 + 4 * v13);
      if (v20 < 0.0) {
        *(float *)(v19 + 4 * v13) = v20 * 0.25;
      }
      ++v13;
    }
  }
  if (*(_DWORD *)(a1 + 16)) {
    BOOL v21 = (int)v9 < 1;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    long long v22 = *(float **)(*a2 + 24);
    uint64_t v9 = v9;
    do
    {
      float v23 = *(float *)(a1 + 20);
      *long long v22 = v23 * tanhf(*(float *)(a1 + 24) * *v22);
      ++v22;
      --v9;
    }
    while (v9);
  }
  if (*(_DWORD *)(a1 + 28) && a6)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(*(void *)a4 + 16) + 4 * a5;
    uint64_t v26 = *(float **)(*a2 + 24);
    do
    {
      uint64_t v27 = v26;
      uint64_t v28 = (float *)v25;
      for (uint64_t i = a5; i; --i)
      {
        if (*v27 < 0.0) {
          *uint64_t v27 = *v27 * *v28;
        }
        ++v28;
        ++v27;
      }
      ++v24;
      v26 += a5;
    }
    while (v24 != a6);
  }
}

uint64_t Espresso::inner_product_kernel_cpu::__launch_quantized_int16_int16(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 672))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQrow_sums");
    goto LABEL_45;
  }
  uint64_t v8 = *(void *)(a1 + 592);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: weights_int16");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 912))
  {
    uint64_t v14 = *(const void **)(a1 + 8);
    if (v14)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 308);
      unsigned int v17 = *(_DWORD *)(a1 + 304);
      unint64_t v18 = *(const void **)(v8 + 16);
      size_t v19 = v15 ? v15[21] : 0;
    }
    else
    {
      size_t v19 = 0;
      unsigned int v16 = *(_DWORD *)(a1 + 308);
      unsigned int v17 = *(_DWORD *)(a1 + 304);
      unint64_t v18 = *(const void **)(v8 + 16);
    }
    uint64_t bnns_filter = Espresso::inner_product_kernel_cpu::create_bnns_filter((Espresso::inner_product_kernel_cpu *)v16, (const float *)v17, v18, 0, (const BNNSFilterParameters *)0x20010, BNNSDataTypeInt16, v19);
    *(void *)(a1 + 912) = bnns_filter;
    if (!bnns_filter)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "BNNS Error");
LABEL_45:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v21 = 0;
  int v22 = *(_DWORD *)(*(void *)a4 + 8);
  do
  {
    v22 *= *(_DWORD *)(*(void *)a4 + 12 + v21);
    v21 += 4;
  }
  while (v21 != 12);
  if (!*(void *)(a1 + 752))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v50, a5, 1, 1, 1);
    float v23 = *(std::__shared_weak_count **)(a1 + 760);
    *(_OWORD *)(a1 + 752) = v50;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v50, a5, 1, 1, 1);
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 776);
    *(_OWORD *)(a1 + 768) = v50;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v50, a5, 1, 1, 1);
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 792);
    *(_OWORD *)(a1 + 784) = v50;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<short,1>,std::allocator<Espresso::blob<short,1>>,int &,int &,int &,int &,void>(&v50, v22, 1, 1, 1);
    uint64_t v26 = *(std::__shared_weak_count **)(a1 + 824);
    *(_OWORD *)(a1 + 816) = v50;
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
  }
  if (a5)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    do
    {
      vDSP_sve((const float *)(*(void *)(*(void *)a4 + 24) + 4 * (*(_DWORD *)(a1 + 308) * v28++)), 1, (float *)(*(void *)(*(void *)(a1 + 752) + 16) + v27), *(unsigned int *)(a1 + 308));
      v27 += 4;
    }
    while (a5 != v28);
  }
  Espresso::range_quantizer<short>::quantize_chunks(*(void *)(*(void *)a4 + 24), v22, *(_DWORD *)(a1 + 308), *(void *)(*(void *)(a1 + 768) + 16), *(void *)(*(void *)(a1 + 784) + 16), *(void *)(*(void *)(a1 + 816) + 16));
  uint64_t v29 = *(void **)(a1 + 912);
  if (a5 == 1) {
    uint64_t result = BNNSFilterApply(v29, *(const void **)(*(void *)(a1 + 816) + 16), *(void **)(*a3 + 24));
  }
  else {
    uint64_t result = BNNSFilterApplyBatch(v29, a5, *(const void **)(*(void *)(a1 + 816) + 16), a7, *(void **)(*a3 + 24), a6);
  }
  if (result == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNS Error");
    goto LABEL_45;
  }
  if (a5)
  {
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)(*(void *)(a1 + 768) + 16);
    uint64_t v33 = *(void *)(*(void *)(a1 + 784) + 16);
    uint64_t v34 = *(unsigned int *)(a1 + 304);
    uint64_t v35 = *a3;
    do
    {
      if (v34)
      {
        float v36 = *(float *)(v32 + 4 * v31);
        float v37 = *(float *)(v33 + 4 * v31);
        unsigned int v38 = *(float **)(*(void *)(a1 + 640) + 16);
        unsigned int v39 = *(float **)(*(void *)(a1 + 656) + 16);
        uint64_t v40 = *(void *)(v35 + 24);
        int v41 = *(float **)(*(void *)(a1 + 672) + 16);
        unsigned int v42 = *(_DWORD *)(a1 + 308) * v31;
        uint64_t result = v34;
        uint64_t v43 = *(void *)(*(void *)(a1 + 752) + 16);
        do
        {
          float v44 = *v38++;
          float v45 = v44;
          float v46 = *v39++;
          float v47 = v46;
          float v48 = *v41++;
          *(float *)(v40 + 4 * v42) = (float)((float)((float)(v37 * v45) * v48)
                                              + (float)((float)(v36 * v45) * *(float *)(v40 + 4 * v42)))
                                      + (float)(v47 * *(float *)(v43 + 4 * v31));
          ++v42;
          --result;
        }
        while (result);
      }
      ++v31;
    }
    while (v31 != a5);
  }
  return result;
}

void sub_192B414CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_kernel_cpu::create_bnns_filter(Espresso::inner_product_kernel_cpu *this, const float *a2, const void *a3, void *a4, const BNNSFilterParameters *a5, BNNSDataType a6, size_t a7)
{
  uint64_t v15 = 0;
  *(void *)&v11.data_bias = 0;
  int v12 = this;
  int v13 = (int)a5;
  int v14 = 1065353216;
  v11.std::string::size_type size = (size_t)a2;
  *(void *)&v11.data_type = 0x3F80000000010020;
  *(void *)&v8.weights.data_bias = this;
  v8.weights.data_table = a2;
  v8.bias.data = a3;
  v8.bias.data_type = a6;
  v8.bias.data_scale = 1.0;
  *(void *)&v8.bias.data_bias = 0;
  v8.bias.data_table = 0;
  *(void *)&v8.activation.function = a4;
  *(void *)&v8.activation.beta = 0x3F80000000010020;
  memset(&v8.activation.ioffset, 0, 32);
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)&v8.weights.data = 0u;
  v8.in_std::string::size_type size = 1;
  v8.out_std::string::size_type size = a7;
  return Espresso::BNNSEngine::create_bnns_fully_connect((Espresso::BNNSEngine *)&v12, &v11, (const BNNSVectorDescriptor *)&v8.weights.data_bias, &v8, a5);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<short,1>,std::allocator<Espresso::blob<short,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  long long v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)long long v10 = &unk_1EE389C68;
  *((void *)v10 + 3) = &unk_1EE36C090;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  BNNSVectorDescriptor v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  int v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_192B41658(_Unwind_Exception *a1)
{
  int shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<short,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C090;
  if (*(unsigned char *)(a1 + 24))
  {
    long long v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  long long v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<short,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C090;
  if (*(unsigned char *)(a1 + 24))
  {
    long long v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  long long v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<short,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389C68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::BNNSEngine::create_bnns_fully_connect(Espresso::BNNSEngine *this, const BNNSVectorDescriptor *a2, const BNNSVectorDescriptor *a3, const BNNSFullyConnectedLayerParameters *a4, const BNNSFilterParameters *a5)
{
  BNNSFullyConnectedLayerParameters v8 = this;
  {
    if (this)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
      }
      Espresso::BNNSEngine::create_bnns_fully_connect(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSFullyConnectedLayerParameters const*,BNNSFilterParameters const*)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
    }
  }
  if (Espresso::BNNSEngine::create_bnns_fully_connect(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSFullyConnectedLayerParameters const*,BNNSFilterParameters const*)::log_requested)
  {
    long long v9 = Espresso::espresso_os_log_subsystem(this, (const char *)a2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)BNNSVectorDescriptor v11 = 0;
      _os_log_debug_impl(&dword_1920CB000, v9, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateFullyConnectedLayer", v11, 2u);
    }
  }
  return MEMORY[0x192FEE710](v8, a2, a3, a4, a5);
}

void Espresso::inner_product_kernel_cpu::__launch_dynamic_quantized_s8_s8()
{
}

uint64_t Espresso::inner_product_kernel_cpu::__launch_quantized_int8_int8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 672))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQrow_sums");
    goto LABEL_45;
  }
  uint64_t v8 = *(void *)(a1 + 576);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: weights_8bit");
    goto LABEL_45;
  }
  if (!*(void *)(a1 + 912))
  {
    int v14 = *(const void **)(a1 + 8);
    if (v14)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 308);
      unsigned int v17 = *(_DWORD *)(a1 + 304);
      unint64_t v18 = *(const void **)(v8 + 16);
      size_t v19 = v15 ? v15[21] : 0;
    }
    else
    {
      size_t v19 = 0;
      unsigned int v16 = *(_DWORD *)(a1 + 308);
      unsigned int v17 = *(_DWORD *)(a1 + 304);
      unint64_t v18 = *(const void **)(v8 + 16);
    }
    uint64_t bnns_filter = Espresso::inner_product_kernel_cpu::create_bnns_filter((Espresso::inner_product_kernel_cpu *)v16, (const float *)v17, v18, 0, (const BNNSFilterParameters *)0x20008, BNNSDataTypeInt8, v19);
    *(void *)(a1 + 912) = bnns_filter;
    if (!bnns_filter)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "BNNS Error");
LABEL_45:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v21 = 0;
  int v22 = *(_DWORD *)(*(void *)a4 + 8);
  do
  {
    v22 *= *(_DWORD *)(*(void *)a4 + 12 + v21);
    v21 += 4;
  }
  while (v21 != 12);
  if (!*(void *)(a1 + 752))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v50, a5, 1, 1, 1);
    float v23 = *(std::__shared_weak_count **)(a1 + 760);
    *(_OWORD *)(a1 + 752) = v50;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v50, a5, 1, 1, 1);
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 776);
    *(_OWORD *)(a1 + 768) = v50;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v50, a5, 1, 1, 1);
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 792);
    *(_OWORD *)(a1 + 784) = v50;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v50, a5, 1, 1, 1);
    uint64_t v26 = *(std::__shared_weak_count **)(a1 + 808);
    *(_OWORD *)(a1 + 800) = v50;
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
  }
  if (a5)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    do
    {
      vDSP_sve((const float *)(*(void *)(*(void *)a4 + 24) + 4 * (*(_DWORD *)(a1 + 308) * v28++)), 1, (float *)(*(void *)(*(void *)(a1 + 752) + 16) + v27), *(unsigned int *)(a1 + 308));
      v27 += 4;
    }
    while (a5 != v28);
  }
  Espresso::range_quantizer<signed char>::quantize_chunks(*(void *)(*(void *)a4 + 24), v22, *(_DWORD *)(a1 + 308), *(void *)(*(void *)(a1 + 768) + 16), *(void *)(*(void *)(a1 + 784) + 16), *(void *)(*(void *)(a1 + 800) + 16));
  uint64_t v29 = *(void **)(a1 + 912);
  if (a5 == 1) {
    uint64_t result = BNNSFilterApply(v29, *(const void **)(*(void *)(a1 + 800) + 16), *(void **)(*a3 + 24));
  }
  else {
    uint64_t result = BNNSFilterApplyBatch(v29, a5, *(const void **)(*(void *)(a1 + 800) + 16), a7, *(void **)(*a3 + 24), a6);
  }
  if (result == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNS Error");
    goto LABEL_45;
  }
  if (a6)
  {
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)(*(void *)(a1 + 768) + 16);
    uint64_t v33 = *(void *)(*(void *)(a1 + 784) + 16);
    uint64_t v34 = *(unsigned int *)(a1 + 304);
    uint64_t v35 = *a3;
    do
    {
      if (v34)
      {
        float v36 = *(float *)(v32 + 4 * v31);
        float v37 = *(float *)(v33 + 4 * v31);
        unsigned int v38 = *(float **)(*(void *)(a1 + 640) + 16);
        unsigned int v39 = *(float **)(*(void *)(a1 + 656) + 16);
        uint64_t v40 = *(void *)(v35 + 24);
        int v41 = *(float **)(*(void *)(a1 + 672) + 16);
        unsigned int v42 = *(_DWORD *)(a1 + 308) * v31;
        uint64_t result = v34;
        uint64_t v43 = *(void *)(*(void *)(a1 + 752) + 16);
        do
        {
          float v44 = *v38++;
          float v45 = v44;
          float v46 = *v39++;
          float v47 = v46;
          float v48 = *v41++;
          *(float *)(v40 + 4 * v42) = (float)((float)((float)(v37 * v45) * v48)
                                              + (float)((float)(v36 * v45) * *(float *)(v40 + 4 * v42)))
                                      + (float)(v47 * *(float *)(v43 + 4 * v31));
          ++v42;
          --result;
        }
        while (result);
      }
      ++v31;
    }
    while (v31 != a6);
  }
  return result;
}

void sub_192B41DA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_non_quantized_is_lookup(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a3;
  int v9 = *(_DWORD *)(*a3 + 8);
  for (uint64_t i = 12; i != 24; i += 4)
    v9 *= *(_DWORD *)(v8 + i);
  BNNSVectorDescriptor v11 = (unsigned int *)(a1 + 304);
  float v12 = 0.0;
  if (*(_DWORD *)(a1 + 428)) {
    float v12 = 1.0;
  }
  if (a5)
  {
    uint64_t v13 = 0;
    float v14 = v12 * 0.5;
    uint64_t v15 = *(void *)(*(void *)a4 + 24);
    uint64_t v16 = *(unsigned int *)(a1 + 308);
    uint64_t v17 = *(void *)(v8 + 24);
    uint64_t v18 = *(void *)(a1 + 560);
    do
    {
      int v19 = (int)(float)(v14 + *(float *)(v15 + 4 * v13));
      if (v16 <= v19) {
        int v19 = v16 - 1;
      }
      unsigned int v20 = v19 & ~(v19 >> 31);
      if (v18)
      {
        uint64_t v21 = *v11;
        if (v21)
        {
          uint64_t v22 = 0;
          float v23 = (float *)(*(void *)(v18 + 16) + 4 * v20);
          int v24 = *(_DWORD *)(a1 + 312);
          uint64_t v25 = 4 * v21;
          do
          {
            float v26 = *v23;
            if (v24) {
              float v26 = v26 + *(float *)(*(void *)(*(void *)(a1 + 544) + 16) + v22);
            }
            *(float *)(v17 + v22) = v26;
            v22 += 4;
            v23 += v16;
          }
          while (v25 != v22);
        }
      }
      else
      {
        uint64_t v27 = *(void *)(a1 + 512);
        if (!v27) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel_cpu: FP32 transposed weights not set");
        }
        uint64_t v28 = *v11;
        if (v28)
        {
          uint64_t v29 = 0;
          uint64_t v30 = *(void *)(v27 + 16) + 4 * v28 * v20;
          int v31 = *(_DWORD *)(a1 + 312);
          uint64_t v32 = 4 * v28;
          do
          {
            float v33 = *(float *)(v30 + v29);
            *(float *)(v17 + v29) = v33;
            if (v31) {
              *(float *)(v17 + v29) = v33 + *(float *)(*(void *)(*(void *)(a1 + 544) + 16) + v29);
            }
            v29 += 4;
          }
          while (v32 != v29);
        }
      }
      ++v13;
      v17 += 4 * a6;
    }
    while (v13 != a5);
  }
  long long v34 = *(_OWORD *)(a1 + 416);
  v42[6] = *(_OWORD *)(a1 + 400);
  v42[7] = v34;
  int v43 = *(_DWORD *)(a1 + 432);
  long long v35 = *(_OWORD *)(a1 + 352);
  v42[2] = *(_OWORD *)(a1 + 336);
  v42[3] = v35;
  long long v36 = *(_OWORD *)(a1 + 384);
  v42[4] = *(_OWORD *)(a1 + 368);
  v42[5] = v36;
  long long v37 = *(_OWORD *)(a1 + 320);
  v42[0] = *(_OWORD *)v11;
  v42[1] = v37;
  unsigned int v38 = (std::__shared_weak_count *)a3[1];
  v41[0] = v8;
  v41[1] = (uint64_t)v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v39 = *(std::__shared_weak_count **)(a1 + 552);
  v40[0] = *(void *)(a1 + 544);
  v40[1] = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v42, v41, v9, (uint64_t)v40, a6, a5);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (v38)
  {
    nitro::nitro_function::nitro_function(v38);
  }
}

void sub_192B41FEC(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::__launch_non_quantized(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8, double a9, double a10, float a11, uint64_t a12)
{
  unsigned int v20 = *(uint64_t **)(a1 + 440);
  if (v20 && *v20 && (v20[4] || v20[6] || v20[8] || v20[10]) && !*(_DWORD *)(*(void *)(a1 + 8) + 76))
  {
    double v31 = *(double *)(a1 + 560);
    BOOL v21 = *(void *)&v31 == 0;
    if (v31 == 0.0)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&v37, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1, 1);
      a9 = *(double *)&v37;
      uint64_t v32 = *(std::__shared_weak_count **)(a1 + 568);
      *(_OWORD *)(a1 + 560) = v37;
      if (v32)
      {
        nitro::nitro_function::nitro_function(v32);
        double v31 = *(double *)(a1 + 560);
      }
      else
      {
        double v31 = a9;
      }
      unsigned int v20 = *(uint64_t **)(a1 + 440);
    }
    int v35 = a5;
    *(double *)long long v36 = v31;
    float v33 = *(std::__shared_weak_count **)(a1 + 568);
    v36[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::quantized_weights_helper::dequantize_to_float32_2d(v20, (uint64_t)v36, a9, a10, a11);
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    a5 = v35;
  }
  else
  {
    BOOL v21 = 0;
  }
  uint64_t v22 = *(void *)(a1 + 560);
  uint64_t v23 = a8[1];
  unint64_t v24 = v23 - *a8;
  if (v22) {
    BOOL v25 = 0;
  }
  else {
    BOOL v25 = v24 == 16;
  }
  if (v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "FC weights not set");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v24 < 0x11) {
    float v26 = (const float **)(v22 + 16);
  }
  else {
    float v26 = (const float **)(*((void *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a8, v23, 1) + 20) + 24);
  }
  if (*(_DWORD *)(a1 + 336))
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 576);
    v27(a1, a2, a3, a4, a12, a6, a7);
  }
  else
  {
    float __B = *v26;
    float v29 = 0.0;
    if (*(_DWORD *)(a1 + 348)) {
      float v29 = 1.0;
    }
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, a5, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), 1.0, *(const float **)(*(void *)a4 + 24), *(_DWORD *)(a1 + 308), __B, *(_DWORD *)(a1 + 308), v29, *(float **)(*(void *)a3 + 24), *(_DWORD *)(a1 + 304));
    if (v21)
    {
      uint64_t v30 = *(std::__shared_weak_count **)(a1 + 568);
      *(_OWORD *)(a1 + 560) = 0u;
      if (v30)
      {
        nitro::nitro_function::nitro_function(v30);
      }
    }
  }
}

void sub_192B422C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::__launch_transposed(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)(a7 + 8) == *(void *)a7)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v26, *(uint64_t **)a7);
  }
  if (*(void *)(a6 + 8) == *(void *)a6)
  {
    uint64_t v24 = 0;
    BOOL v25 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v24, *(uint64_t **)a6);
  }
  uint64_t v13 = v26;
  if (!v26)
  {
    uint64_t v23 = "inner_product_kernel_cpu: destination data does not exist";
    goto LABEL_30;
  }
  uint64_t v14 = v24;
  if (!v24)
  {
    uint64_t v23 = "inner_product_kernel_cpu: src data does not exist";
    goto LABEL_30;
  }
  uint64_t v15 = a1[64];
  if (*((_DWORD *)a1 + 84))
  {
    uint64_t v16 = *a1;
    if (v15) {
      uint64_t v17 = (void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(v16 + 576);
    }
    else {
      uint64_t v17 = (void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(v16 + 544);
    }
    (*v17)(a1, a2, &v26, &v24, a3, a4, a5);
    goto LABEL_22;
  }
  uint64_t v18 = *(void *)(a6 + 8);
  unint64_t v19 = v18 - *(void *)a6;
  if (!v15 && v19 == 16)
  {
    uint64_t v23 = "inner_product_kernel_cpu: FP32 transposed weights expected but not found";
LABEL_30:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v23);
  }
  if (v19 < 0x11) {
    unsigned int v20 = (const float **)(v15 + 16);
  }
  else {
    unsigned int v20 = (const float **)(*((void *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a6, v18, 1) + 20)
  }
                         + 24);
  float __B = *v20;
  float v22 = 0.0;
  if (*((_DWORD *)a1 + 87)) {
    float v22 = 1.0;
  }
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, a3, *((_DWORD *)a1 + 76), *((_DWORD *)a1 + 77), 1.0, *(const float **)(v14 + 24), *((_DWORD *)a1 + 77), __B, *((_DWORD *)a1 + 76), v22, *(float **)(v13 + 24), *((_DWORD *)a1 + 76));
LABEL_22:
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192B424C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::__launch_f16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a1 + 336))
  {
    uint64_t v7 = *(void (**)(void))(*(void *)a1 + 544);
    v7();
  }
  else
  {
    uint64_t v8 = *(const float **)(*(void *)a4 + 24);
    float __C = *(float **)(*(void *)a3 + 24);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v14, (int *)(*(void *)(a1 + 688) + 8));
    uint64_t v10 = v14;
    BNNSVectorDescriptor v11 = *(void **)(v14 + 16);
    vImagePixelCount v12 = *(int *)(v14 + 12) * (uint64_t)*(int *)(v14 + 8);
    src.data = *(void **)(*(void *)(a1 + 688) + 16);
    src.vImagePixelCount height = 1;
    src.width = v12;
    src.rowBytes = 2 * v12;
    dest.data = v11;
    dest.vImagePixelCount height = 1;
    dest.width = v12;
    dest.rowBytes = 4 * v12;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    float v13 = 0.0;
    if (*(_DWORD *)(a1 + 348)) {
      float v13 = 1.0;
    }
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, a5, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), 1.0, v8, *(_DWORD *)(a1 + 308), *(const float **)(v10 + 16), *(_DWORD *)(a1 + 308), v13, __C, *(_DWORD *)(a1 + 304));
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
}

void sub_192B42648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::__launch_f16_is_lookup(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a3;
  int v8 = *(_DWORD *)(*a3 + 8);
  for (uint64_t i = 12; i != 24; i += 4)
    v8 *= *(_DWORD *)(v7 + i);
  if (a5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 308);
    do
    {
      if (*(_DWORD *)(a1 + 428)) {
        float v13 = 1.0;
      }
      else {
        float v13 = 0.0;
      }
      float v14 = *(float *)(*(void *)(*(void *)a4 + 24) + 4 * v11) + (float)(v13 * 0.5);
      unsigned int v15 = (int)v14 & ~((int)v14 >> 31);
      if (v15 > v12) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("inner_product_kernel_cpu_is_lookup: Layer bottom values indexing out of bounds");
      }
      uint64_t v16 = *(void *)(*a3 + 24);
      uint64_t v17 = *(void *)(a1 + 688);
      if (v17)
      {
        if (*(_DWORD *)(a1 + 304))
        {
          unint64_t v18 = 0;
          unint64_t v19 = (__int16 *)(*(void *)(v17 + 16) + 2 * v15);
          do
          {
            _H3 = *v19;
            __asm { FCVT            S3, H3 }
            if (*(_DWORD *)(a1 + 312)) {
              _S3 = *(float *)(*(void *)(*(void *)(a1 + 544) + 16) + 4 * v18) + _S3;
            }
            *(float *)(v16 + v10 + 4 * v18) = _S3;
            uint64_t v12 = *(unsigned int *)(a1 + 308);
            v19 += v12;
            ++v18;
          }
          while (v18 < *(unsigned int *)(a1 + 304));
        }
      }
      else
      {
        uint64_t v26 = *(void *)(a1 + 528);
        if (!v26) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel_cpu: FP16 transposed weights not set");
        }
        uint64_t v27 = *(unsigned int *)(a1 + 304);
        if (v27)
        {
          uint64_t v28 = 0;
          uint64_t v29 = *(void *)(v26 + 16) + 2 * v27 * v15;
          int v30 = *(_DWORD *)(a1 + 312);
          uint64_t v31 = v16 + v10;
          do
          {
            _H3 = *(_WORD *)(v29 + 2 * v28);
            __asm { FCVT            S3, H3 }
            *(float *)(v31 + 4 * v28) = _S3;
            if (v30) {
              *(float *)(v31 + 4 * v28) = *(float *)(*(void *)(*(void *)(a1 + 544) + 16) + 4 * v28) + _S3;
            }
            ++v28;
          }
          while (v27 != v28);
        }
      }
      ++v11;
      v10 += 4 * a6;
    }
    while (v11 != a5);
    uint64_t v7 = *a3;
  }
  long long v34 = *(_OWORD *)(a1 + 416);
  v42[6] = *(_OWORD *)(a1 + 400);
  v42[7] = v34;
  int v43 = *(_DWORD *)(a1 + 432);
  long long v35 = *(_OWORD *)(a1 + 352);
  v42[2] = *(_OWORD *)(a1 + 336);
  v42[3] = v35;
  long long v36 = *(_OWORD *)(a1 + 384);
  v42[4] = *(_OWORD *)(a1 + 368);
  v42[5] = v36;
  long long v37 = *(_OWORD *)(a1 + 320);
  v42[0] = *(_OWORD *)(a1 + 304);
  v42[1] = v37;
  unsigned int v38 = (std::__shared_weak_count *)a3[1];
  v41[0] = v7;
  v41[1] = (uint64_t)v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v39 = *(std::__shared_weak_count **)(a1 + 552);
  v40[0] = *(void *)(a1 + 544);
  v40[1] = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v42, v41, v8, (uint64_t)v40, a6, a5);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (v38)
  {
    nitro::nitro_function::nitro_function(v38);
  }
}

void sub_192B42898(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::__launch_quantized_8bit(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, vDSP_Length __N)
{
  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_29;
  }
  if (!*(void *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_29;
  }
  if (!*(void *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
LABEL_29:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v13 = *(void *)(a1 + 736);
  if (!v13
    || *(_DWORD *)(v13 + 8) != *(_DWORD *)(a1 + 308)
    && ((float v14 = *(std::__shared_weak_count **)(a1 + 744), *(_OWORD *)(a1 + 736) = 0u, !v14)
     || (nitro::nitro_function::nitro_function(v14), !*(void *)(a1 + 736))))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__C, *(_DWORD *)(a1 + 308), 1, 1, 1);
    unsigned int v15 = *(std::__shared_weak_count **)(a1 + 744);
    *(_OWORD *)(a1 + 736) = __C;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  uint64_t v16 = *(void *)(a1 + 752);
  if (!v16
    || *(_DWORD *)(v16 + 8) != a5
    && ((uint64_t v17 = *(std::__shared_weak_count **)(a1 + 760), *(_OWORD *)(a1 + 752) = 0u, !v17)
     || (nitro::nitro_function::nitro_function(v17), !*(void *)(a1 + 752))))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__C, a5, 1, 1, 1);
    unint64_t v18 = *(std::__shared_weak_count **)(a1 + 760);
    *(_OWORD *)(a1 + 752) = __C;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
  }
  uint64_t v35 = a3;
  vDSP_Length v19 = 4 * __N;
  if (a5)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = a5;
    do
    {
      vDSP_sve((const float *)(*(void *)(*(void *)a4 + 24) + v20), 1, (float *)(*(void *)(*(void *)(a1 + 752) + 16) + v21), __N);
      v21 += 4;
      v20 += v19;
      --v22;
    }
    while (v22);
  }
  uint64_t v23 = a5;
  if (*(_DWORD *)(a1 + 304))
  {
    uint64_t v37 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 4 * a6;
    do
    {
      uint64_t v26 = *(float **)(*(void *)(a1 + 736) + 16);
      uint64_t v36 = v24;
      vDSP_vfltu8((const unsigned __int8 *)(*(void *)(*(void *)(a1 + 576) + 16) + (*(_DWORD *)(a1 + 308) * v24)), 1, v26, 1, *(unsigned int *)(a1 + 308));
      if (v23)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = v37;
        float v30 = *(float *)(*(void *)(*(void *)(a1 + 640) + 16) + 4 * v36);
        float v31 = *(float *)(*(void *)(*(void *)(a1 + 656) + 16) + 4 * v36);
        do
        {
          uint64_t v32 = *(void *)(*(void *)v35 + 24);
          float v33 = (const float *)(*(void *)(*(void *)a4 + 24) + v27);
          LODWORD(__C) = 0;
          vDSP_dotpr(v33, 1, v26, 1, (float *)&__C, *(unsigned int *)(a1 + 308));
          *(float *)(v32 + v29) = (float)(v31 * *(float *)(*(void *)(*(void *)(a1 + 752) + 16) + 4 * v28))
                                + (float)(*(float *)&__C * v30);
          uint64_t v23 = a5;
          ++v28;
          v27 += v19;
          v29 += v25;
        }
        while (a5 != v28);
      }
      uint64_t v24 = v36 + 1;
      v37 += 4;
    }
    while (v36 + 1 < (unint64_t)*(unsigned int *)(a1 + 304));
  }
}

void sub_192B42BAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__launch_quantized_8bit_clipinput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const BNNSFilterParameters *a5, size_t a6, size_t a7)
{
  uint64_t v7 = *(void *)(a1 + 608);
  if (!v7) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel_cpu: Q not set");
  }
  uint64_t v13 = *(float **)(v7 + 16);
  float v14 = v13[1];
  float v15 = v14 * 0.0078125;
  float v16 = 1.0;
  float v17 = 1.0 / (float)(v14 * 0.0078125);
  if (!*(_DWORD *)(a1 + 336))
  {
    float v49 = *v13;
    uint64_t v50 = *(unsigned int *)(a1 + 308);
    *(void *)&v98.data_bias = 0;
    v99[0] = v50;
    v99[1] = 0x3F80000000020008;
    v99[2] = 0;
    size_t v51 = *(unsigned int *)(a1 + 304);
    v98.std::string::size_type size = v51;
    *(void *)&v98.data_type = 0x3F80000000010020;
    if (*(_DWORD *)(a1 + 312)) {
      uint64_t v52 = *(void *)(*(void *)(a1 + 544) + 16);
    }
    else {
      uint64_t v52 = 0;
    }
    int v53 = *(_DWORD *)(a1 + 316);
    float v54 = 0.0;
    float v55 = 0.25;
    if (v53 == 2) {
      int v56 = 2;
    }
    else {
      int v56 = 0;
    }
    if (v53 != 2) {
      float v55 = 0.0;
    }
    BOOL v57 = v53 == 1;
    if (v53 == 1) {
      int v58 = 1;
    }
    else {
      int v58 = v56;
    }
    if (v57) {
      float v59 = 0.0;
    }
    else {
      float v59 = v55;
    }
    if (*(_DWORD *)(a1 + 320))
    {
      float v60 = *(float *)(a1 + 324);
      float v54 = *(float *)(a1 + 328);
      if (v60 == 1.0 && v54 == 1.0)
      {
        int v58 = 4;
        float v60 = v59;
        float v54 = 0.0;
      }
      else
      {
        int v58 = 5;
      }
    }
    else
    {
      float v60 = v59;
    }
    if (*(_DWORD *)(a1 + 332))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Leaky relu not supported with quant weights");
    }
    else
    {
      uint64_t v61 = *(void *)(*(void *)(a1 + 576) + 16);
      *(void *)&v95[32] = v50;
      *(void *)&v95[40] = v51;
      *(void *)&v95[48] = v61;
      *(_DWORD *)&v95[56] = 131080;
      *(_DWORD *)&v95[60] = 1065353216;
      *(void *)&v95[64] = 0;
      *(void *)&v95[72] = 0;
      *(void *)&v95[80] = v52;
      *(_DWORD *)&v95[88] = 65568;
      *(_DWORD *)&v95[92] = 1065353216;
      *(void *)&v95[96] = 0;
      *(void *)&v95[104] = 0;
      *(_DWORD *)&v95[112] = v58;
      *(float *)&v95[116] = v60;
      *(float *)&v95[120] = v54;
      *(_OWORD *)&v95[124] = 0u;
      long long v96 = 0u;
      int v97 = 0;
      memset(v95, 0, 32);
      *(_DWORD *)int v95 = 1;
      uint64_t v62 = *(const void **)(a1 + 8);
      if (v62)
      {
        if (v63) {
          *(void *)&v95[8] = v63[21];
        }
      }
      uint64_t v64 = Espresso::BNNSEngine::create_bnns_fully_connect((Espresso::BNNSEngine *)v99, &v98, (const BNNSVectorDescriptor *)&v95[32], (const BNNSFullyConnectedLayerParameters *)v95, a5);
      if (v64)
      {
        uint64_t v65 = (void *)v64;
        std::allocate_shared[abi:ne180100]<Espresso::blob<char,4>,std::allocator<Espresso::blob<char,4>>,int (&)[4],void>(&v93, *(void *)a4 + 8);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v91, *(void *)a3 + 8);
        uint64_t v66 = 0;
        uint64_t v67 = v93;
        uint64_t v68 = *(int *)(v93 + 8);
        do
        {
          v68 *= *(int *)(v93 + 12 + v66);
          v66 += 4;
        }
        while (v66 != 12);
        if (*(_DWORD *)(a1 + 340) != 2)
        {
          unsigned int v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v81, "inconsistent state!");
          __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (v68)
        {
          for (uint64_t i = 0; i != v68; ++i)
          {
            float v70 = *(float *)(*(void *)(*(void *)a4 + 24) + 4 * i);
            if (v70 < v49) {
              float v70 = v49;
            }
            if (v70 > v14) {
              float v70 = v14;
            }
            int v71 = llroundf(v17 * v70);
            if (v71 <= -127) {
              int v71 = -127;
            }
            if (v71 >= 127) {
              LOBYTE(v71) = 127;
            }
            *(unsigned char *)(*(void *)(v67 + 24) + i) = v71;
          }
        }
        uint64_t v72 = v91;
        if (a5 == (const BNNSFilterParameters *)1) {
          int v73 = BNNSFilterApply(v65, *(const void **)(v67 + 24), *(void **)(v91 + 24));
        }
        else {
          int v73 = BNNSFilterApplyBatch(v65, (size_t)a5, *(const void **)(v67 + 24), a7, *(void **)(v91 + 24), a6);
        }
        int v74 = v73;
        float __B = v15 * v15;
        uint64_t v75 = *(const float **)(v72 + 24);
        uint64_t v76 = *(float **)(*(void *)a3 + 24);
        vDSP_Length v77 = *(int *)(v72 + 8);
        if (*(_DWORD *)(a1 + 348))
        {
          for (uint64_t j = 0; j != 12; j += 4)
            v77 *= *(int *)(v72 + 12 + j);
          vDSP_vsma(v75, 1, &__B, v76, 1, *(float **)(*(void *)a3 + 24), 1, v77);
        }
        else
        {
          for (uint64_t k = 0; k != 12; k += 4)
            v77 *= *(int *)(v72 + 12 + k);
          vDSP_vsmul(v75, 1, &__B, v76, 1, v77);
        }
        if (v74)
        {
          int v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v88, v74);
          uint64_t v83 = std::string::insert(&v88, 0, "BNNS Error ");
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v82, &v89);
          __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        BNNSFilterDestroy(v65);
        if (v92) {
          nitro::nitro_function::nitro_function(v92);
        }
        if (v94) {
          nitro::nitro_function::nitro_function(v94);
        }
        return;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "BNNS Error");
    }
LABEL_97:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(_DWORD *)(a1 + 428)) {
    float v16 = 0.0;
  }
  if (a5)
  {
    unint64_t v18 = 0;
    float v19 = roundf(v17);
    float v20 = v16 * 0.5;
    uint64_t v21 = *(unsigned int *)(a1 + 308);
    uint64_t v22 = *(void *)(*(void *)a3 + 24);
    uint64_t v86 = *(void *)(*(void *)a4 + 24);
    uint64_t v87 = *(void *)(a1 + 576);
    float v23 = v15 * v15;
    uint64_t v85 = 4 * a6;
    while (1)
    {
      int v24 = (int)(float)(v20 + *(float *)(v86 + 4 * (void)v18)) & ~((int)(float)(v20
                                                                                   + *(float *)(v86 + 4 * (void)v18)) >> 31);
      if (v24 >= v21) {
        int v24 = *(_DWORD *)(a1 + 304) - 1;
      }
      if (!v87) {
        break;
      }
      uint64_t v25 = *(unsigned int *)(a1 + 304);
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (char *)(*(void *)(v87 + 16) + v24);
        uint64_t v28 = *(void *)(a1 + 544);
        int v29 = *(_DWORD *)(a1 + 316);
        uint64_t v30 = 4 * v25;
        while (1)
        {
          float v31 = v19 * (float)*v27;
          *(float *)(v22 + v26) = v31;
          if (v28)
          {
            float v31 = v31 + *(float *)(*(void *)(v28 + 16) + v26);
            *(float *)(v22 + v26) = v31;
          }
          float v32 = v23 * v31;
          *(float *)(v22 + v26) = v32;
          if (v29) {
            break;
          }
          if (*(_DWORD *)(a1 + 320))
          {
            float v34 = *(float *)(a1 + 324);
            float v33 = v34 * tanhf(v32 * *(float *)(a1 + 328));
            goto LABEL_18;
          }
          if (*(_DWORD *)(a1 + 332)) {
            goto LABEL_22;
          }
LABEL_19:
          v27 += v21;
          v26 += 4;
          if (v30 == v26) {
            goto LABEL_40;
          }
        }
        float v33 = fmaxf(v32, 0.0);
LABEL_18:
        *(float *)(v22 + v26) = v33;
        goto LABEL_19;
      }
LABEL_40:
      unint64_t v18 = (const BNNSFilterParameters *)((char *)v18 + 1);
      v22 += v85;
      if (v18 == a5) {
        return;
      }
    }
    uint64_t v35 = *(void *)(a1 + 896);
    if (!v35) {
      goto LABEL_40;
    }
    uint64_t v36 = *(void *)(a1 + 624);
    float v37 = v36 ? *(float *)(*(void *)(v36 + 16) + 4 * v24) : 1.0;
    uint64_t v38 = *(unsigned int *)(a1 + 304);
    if (!v38) {
      goto LABEL_40;
    }
    uint64_t v39 = 0;
    uint64_t v40 = *(void *)(v35 + 16) + (v38 * v24);
    float v41 = v23 * v37;
    uint64_t v42 = *(void *)(a1 + 544);
    int v43 = *(_DWORD *)(a1 + 316);
    while (1)
    {
      float v44 = v19 * (float)*(char *)(v40 + v39);
      *(float *)(v22 + 4 * v39) = v44;
      if (v42)
      {
        float v44 = v44 + *(float *)(*(void *)(v42 + 16) + 4 * v39);
        *(float *)(v22 + 4 * v39) = v44;
      }
      float v45 = v41 * v44;
      *(float *)(v22 + 4 * v39) = v45;
      if (v43) {
        break;
      }
      if (*(_DWORD *)(a1 + 320))
      {
        float v47 = *(float *)(a1 + 324);
        float v46 = v47 * tanhf(v45 * *(float *)(a1 + 328));
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 332))
      {
LABEL_22:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported activation fn with quantized weights and lookup");
        goto LABEL_97;
      }
LABEL_36:
      if (v38 == ++v39) {
        goto LABEL_40;
      }
    }
    float v46 = fmaxf(v45, 0.0);
LABEL_35:
    *(float *)(v22 + 4 * v39) = v46;
    goto LABEL_36;
  }
}

void sub_192B432B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      if (a26) {
        nitro::nitro_function::nitro_function(a26);
      }
      if (a28) {
        nitro::nitro_function::nitro_function(a28);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<char,4>,std::allocator<Espresso::blob<char,4>>,int (&)[4],void>(void *a1, uint64_t a2)
{
  long long v4 = operator new(0x60uLL);
  int v5 = v4;
  uint64_t v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE3898E8;
  uint64_t v7 = (char *)(v4 + 3);
  v4[3] = &unk_1EE36BE90;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  size_t v8 = 1;
  do
  {
    uint64_t v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  uint64_t v10 = Espresso::kern_alloc_uninitialized((Espresso *)v8);
  bzero(v10, v8);
  v5[6] = v10;
  *((unsigned char *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_192B43434(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  long long v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(void *a1, uint64_t a2)
{
  long long v4 = operator new(0x60uLL);
  int v5 = v4;
  uint64_t v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE3899C8;
  uint64_t v7 = (char *)(v4 + 3);
  v4[3] = &unk_1EE36BF10;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  uint64_t v8 = 1;
  do
  {
    uint64_t v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  size_t v10 = 4 * v8;
  uint64_t v11 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v8));
  bzero(v11, v10);
  v5[6] = v11;
  *((unsigned char *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_192B43538(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  long long v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<char,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE90;
  if (*(unsigned char *)(a1 + 32))
  {
    long long v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  long long v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<char,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE90;
  if (*(unsigned char *)(a1 + 32))
  {
    long long v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  long long v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<char,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3898E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3898E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::inner_product_kernel_cpu::get_f16_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 728);
  *a2 = *(void *)(this + 720);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::inner_product_kernel_cpu::num_weights_blob(Espresso::inner_product_kernel_cpu *this)
{
  if (*((_DWORD *)this + 78)) {
    return 2;
  }
  else {
    return 1;
  }
}

void Espresso::inner_product_kernel_cpu::get_weights_blob(Espresso::inner_product_kernel_cpu *this@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  long long v4 = (void *)((char *)this + 8);
  if (a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 408))(&v15);
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v17, v4, &v15);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 416))(&v15);
    std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v17, v4);
    int v5 = v16;
    uint64_t v6 = v17;
    uint64_t v7 = v15;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 232);
    *(void *)(v6 + 224) = v7;
    *(void *)(v6 + 232) = v5;
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    uint64_t v9 = operator new(0x60uLL);
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = &unk_1EE3899C8;
    size_t v10 = (char *)(v9 + 3);
    v9[3] = &unk_1EE36BF10;
    v9[4] = 0;
    v9[5] = 0;
    v9[6] = 0;
    *((unsigned char *)v9 + 56) = 0;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    uint64_t v11 = *(std::__shared_weak_count **)(v6 + 168);
    *(void *)(v6 + 160) = v9 + 3;
    *(void *)(v6 + 168) = v9;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      size_t v10 = *(char **)(v6 + 160);
    }
    *(void *)&long long v12 = 0x100000001;
    *((void *)&v12 + 1) = 0x100000001;
    *(_OWORD *)(v10 + 8) = v12;
    uint64_t v13 = v15;
    int v14 = *(_DWORD *)(v15 + 8);
    *((_DWORD *)v10 + 2) = v14;
    *((_DWORD *)v10 + 3) = *(_DWORD *)(v13 + 12);
    *(_DWORD *)(v6 + 8) = v14;
    *(_DWORD *)(v6 + 12) = *((_DWORD *)v10 + 3);
    *(_DWORD *)(v6 + 16) = *((_DWORD *)v10 + 4);
    *(_DWORD *)(v6 + 20) = *((_DWORD *)v10 + 5);
    *(_DWORD *)(v6 + 24) = 1;
    *((void *)v10 + 3) = *(void *)(v13 + 16);
    v10[32] = 0;
  }
  *a3 = v17;
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192B438F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::transform_transfer_global_parameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 16 * a4;
  Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a3 + 32) + 16 * a4) + 16), 2, &v34);
  if ((void *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &v34))
  {
    uint64_t v9 = (void *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &v34);
    size_t v10 = (std::__shared_weak_count *)v9[1];
    v33[0] = *v9;
    v33[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::sync_copy_to_host(&__p, v33);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v31, *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 16));
    uint64_t v12 = 0;
    uint64_t v13 = v31;
    uint64_t v14 = *(int *)(v11 + 8);
    do
    {
      v14 *= *(int *)(v11 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    memcpy(*(void **)(v31 + 16), *(const void **)(v11 + 24), 4 * v14);
    uint64_t v15 = v32;
    uint64_t v29 = v13;
    uint64_t v30 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 392))(a1, &v29);
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&v34);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (__p.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a3 + 32) + v8) + 16), 1, &__p);
  if ((void *)(a2 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, &__p))
  {
    float v16 = (void *)std::map<std::string,Espresso::blob_numerical_properties>::at(a2, &__p);
    long long v17 = (std::__shared_weak_count *)v16[1];
    v27[0] = *v16;
    v27[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::sync_copy_to_host(&v31, v27);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    uint64_t v18 = v31;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v25, *(_DWORD *)(v31 + 8), *(_DWORD *)(v31 + 12));
    uint64_t v19 = 0;
    uint64_t v20 = v25;
    uint64_t v21 = *(int *)(v18 + 8);
    do
    {
      v21 *= *(int *)(v18 + 12 + v19);
      v19 += 4;
    }
    while (v19 != 12);
    memcpy(*(void **)(v25 + 16), *(const void **)(v18 + 24), 4 * v21);
    uint64_t v22 = v26;
    uint64_t v23 = v20;
    int v24 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 400))(a1, &v23);
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    Espresso::remove_layer_input(a3, a4, (unsigned __int8 *)&__p);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_192B43BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 65) < 0) {
    operator delete(*(void **)(v25 - 88));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::transform_parameters_as_input(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 16 * a3;
  Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a2 + 32) + 16 * a3) + 16), 1, &__p);
  int v10 = *(_DWORD *)(a1 + 304);
  int v11 = *(_DWORD *)(a1 + 308);
  if (*(unsigned char *)(a1 + 344))
  {
    int v41 = 0;
    uint64_t v40 = 0;
    int v12 = 2;
  }
  else
  {
    LODWORD(v40) = *(_DWORD *)(a1 + 304);
    HIDWORD(v40) = v11;
    int v12 = 4;
    int v10 = 1;
    int v11 = 1;
    int v41 = 0;
  }
  v39[0] = v10;
  v39[1] = v11;
  int v42 = v12;
  long long v38 = 0uLL;
  uint64_t v13 = *(void *)(a1 + 560);
  if (!v13)
  {
    if (*(void *)(a1 + 688)) {
      uint64_t v29 = "inner product has fp16 weights; must use fp32 weights for training.";
    }
    else {
      uint64_t v29 = "inner product layer is missing weights";
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v29);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 568);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v39, 0, (uint64_t)&v45);
  double v15 = std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,void>((uint64_t *)v34, (void *)(a2 + 16), 0);
  uint64_t v16 = *(void *)v34;
  long long v44 = 0uLL;
  (*(void (**)(void, std::string *, long long *, double))(**(void **)v34 + 16))(*(void *)v34, &v45, &v44, v15);
  if (*((void *)&v44 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v44 + 1));
  }
  uint64_t v17 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v45);
  if (*(int *)(v13 + 12) * (uint64_t)*(int *)(v13 + 8) != v17) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("blob to copy has different total dim from required shape");
  }
  memcpy(*(void **)(*(void *)(v16 + 160) + 24), *(const void **)(v13 + 16), 4 * v17);
  long long v18 = *(_OWORD *)v34;
  long long v30 = *(_OWORD *)v34;
  if (v46)
  {
    float v47 = v46;
    operator delete(v46);
    long long v18 = v30;
  }
  long long v38 = v18;
  if (v14)
  {
    nitro::nitro_function::nitro_function(v14);
    *((void *)&v18 + 1) = *((void *)&v30 + 1);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&__p, (uint64_t *)&v38);
  uint64_t v36 = 0;
  float v37 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 400))(a1, &v36);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  unint64_t v20 = *(void *)(a5 + 8);
  if (v20 >= *(void *)(a5 + 16))
  {
    uint64_t v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v20 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v20 = v21;
    }
    uint64_t v22 = (std::string *)(v20 + 24);
    *(void *)(a5 + 8) = v20 + 24;
  }
  *(void *)(a5 + 8) = v22;
  if (*(_DWORD *)(a1 + 312) && *(void *)(a1 + 544))
  {
    Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a2 + 32) + v9) + 16), 2, &v45);
    int v23 = *(_DWORD *)(a1 + 304);
    if (*(unsigned char *)(a1 + 344))
    {
      *(_OWORD *)&v34[4] = 0uLL;
      int v24 = 1;
    }
    else
    {
      *(_DWORD *)&v34[4] = *(_DWORD *)(a1 + 304);
      *(void *)&v34[8] = 0x100000001;
      *(_DWORD *)&v34[16] = 0;
      int v24 = 4;
      int v23 = 1;
    }
    *(_DWORD *)std::string v34 = v23;
    int v35 = v24;
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 552);
    v33[0] = *(void *)(a1 + 544);
    v33[1] = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(&v44, (void *)(a2 + 16), (Espresso::layer_nd_shape *)v34, (uint64_t)v33);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    Espresso::add_layer_input(a2, a3, (unsigned __int8 *)&v45, (uint64_t *)&v44);
    uint64_t v31 = 0;
    float v32 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 392))(a1, &v31);
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    unint64_t v26 = *(void *)(a5 + 8);
    if (v26 >= *(void *)(a5 + 16))
    {
      uint64_t v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v45);
    }
    else
    {
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(void *)(v26 + 16) = *((void *)&v45.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v26 = v27;
      }
      uint64_t v28 = (std::string *)(v26 + 24);
      *(void *)(a5 + 8) = v26 + 24;
    }
    *(void *)(a5 + 8) = v28;
    if (*((void *)&v44 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v44 + 1));
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192B440C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33)
{
  *(void *)(v34 + 8) = v35;
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::inner_product_kernel_cpu::supports_weight_key(uint64_t a1, uint64_t a2)
{
  int v3 = Espresso::generic_inner_product_kernel::supports_weight_key(a1, (unsigned __int8 **)a2);
  int v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80) == 0)
  {
    switch(*(unsigned char *)(a2 + 23))
    {
      case 1:
        goto LABEL_3;
      case 5:
        goto LABEL_45;
      case 6:
        if ((*(_DWORD *)a2 != 1647861591 || *(_WORD *)(a2 + 4) != 29801)
          && (*(_DWORD *)a2 != 1852399447 || *(_WORD *)(a2 + 4) != 14452))
        {
          goto LABEL_55;
        }
        goto LABEL_98;
      case 7:
        if (*(_DWORD *)a2 == 1769299799 && *(_DWORD *)(a2 + 3) == 947154537) {
          goto LABEL_98;
        }
        int v15 = *(_DWORD *)(a2 + 3);
        BOOL v16 = *(_DWORD *)a2 == 1852399447;
        int v17 = 909210734;
        break;
      case 8:
        if (*(void *)a2 == 0x38746E695F745F57 || *(void *)a2 == 0x745F656C61637351) {
          goto LABEL_98;
        }
        goto LABEL_90;
      case 9:
        goto LABEL_44;
      default:
        goto LABEL_90;
    }
LABEL_86:
    if (v16 && v15 == v17) {
      goto LABEL_98;
    }
    goto LABEL_90;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  switch(v5)
  {
    case 6:
      uint64_t v6 = *(unsigned __int8 **)a2;
      if (**(_DWORD **)a2 == 1647861591 && *(_WORD *)(*(void *)a2 + 4) == 29801) {
        goto LABEL_98;
      }
      int v8 = *(_DWORD *)v6;
      int v9 = *((unsigned __int16 *)v6 + 2);
      if (v8 == 1852399447 && v9 == 14452) {
        goto LABEL_98;
      }
      break;
    case 7:
      if (**(_DWORD **)a2 == 1769299799 && *(_DWORD *)(*(void *)a2 + 3) == 947154537) {
        goto LABEL_98;
      }
      if (**(_DWORD **)a2 == 1852399447 && *(_DWORD *)(*(void *)a2 + 3) == 909210734) {
        goto LABEL_98;
      }
      break;
    case 8:
      if (**(void **)a2 == 0x38746E695F745F57 || **(void **)a2 == 0x745F656C61637351) {
        goto LABEL_98;
      }
      if ((v4 & 0x80) == 0)
      {
        switch(*(unsigned char *)(a2 + 23))
        {
          case 1:
LABEL_3:
            if (*(unsigned char *)a2 == 81) {
              goto LABEL_98;
            }
            goto LABEL_90;
          case 5:
            goto LABEL_45;
          case 6:
LABEL_55:
            BOOL v20 = *(_DWORD *)a2 == 1633907537 && *(_WORD *)(a2 + 4) == 25964;
            uint64_t v14 = (unsigned __int8 *)a2;
            if (!v20) {
              goto LABEL_85;
            }
            goto LABEL_98;
          case 9:
            goto LABEL_44;
          default:
            goto LABEL_90;
        }
      }
      break;
  }
  if (*(void *)(a2 + 8) == 1)
  {
    if (**(unsigned char **)a2 == 81) {
      goto LABEL_98;
    }
    if ((v4 & 0x80) == 0) {
      goto LABEL_90;
    }
  }
  if (*(void *)(a2 + 8) != 6) {
    goto LABEL_74;
  }
  if (**(_DWORD **)a2 == 1633907537 && *(_WORD *)(*(void *)a2 + 4) == 25964) {
    goto LABEL_98;
  }
  if ((v4 & 0x80) != 0)
  {
LABEL_74:
    if (*(void *)(a2 + 8) == 5)
    {
      if (**(_DWORD **)a2 == 1634296401 && *(unsigned char *)(*(void *)a2 + 4) == 115) {
        goto LABEL_98;
      }
      if ((v4 & 0x80) == 0) {
        goto LABEL_90;
      }
    }
    if (*(void *)(a2 + 8) != 9) {
      goto LABEL_83;
    }
    if (**(void **)a2 == 0x6D75735F776F7251 && *(unsigned char *)(*(void *)a2 + 8) == 115) {
      goto LABEL_98;
    }
    if ((v4 & 0x80) != 0)
    {
LABEL_83:
      if (*(void *)(a2 + 8) != 6) {
        goto LABEL_90;
      }
      uint64_t v14 = *(unsigned __int8 **)a2;
    }
    else
    {
      uint64_t v14 = (unsigned __int8 *)a2;
      if (v4 != 6) {
        goto LABEL_90;
      }
    }
LABEL_85:
    int v24 = *(_DWORD *)v14;
    int v15 = *((unsigned __int16 *)v14 + 2);
    BOOL v16 = v24 == 1701147252;
    int v17 = 22367;
    goto LABEL_86;
  }
  if (v4 == 5)
  {
LABEL_45:
    int v15 = *(unsigned __int8 *)(a2 + 4);
    BOOL v16 = *(_DWORD *)a2 == 1634296401;
    goto LABEL_46;
  }
  uint64_t v14 = (unsigned __int8 *)a2;
  if (v4 == 6) {
    goto LABEL_85;
  }
  if (v4 == 9)
  {
LABEL_44:
    int v15 = *(unsigned __int8 *)(a2 + 8);
    BOOL v16 = *(void *)a2 == 0x6D75735F776F7251;
LABEL_46:
    int v17 = 115;
    goto LABEL_86;
  }
LABEL_90:
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "tree_b")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "tree_map_to_index")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "tree_cluster_end")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "block_starts")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "w_f16_t")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "w_f32_t")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "block_cols")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "sparse_weights_f32"))
  {
    BOOL v26 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "sparse_weights_f16");
    return v26 | v3 | Espresso::weight_key_supported_by_conv_quantized_weights_helper((unsigned char *)a2, 1);
  }
LABEL_98:
  BOOL v26 = 1;
  return v26 | v3 | Espresso::weight_key_supported_by_conv_quantized_weights_helper((unsigned char *)a2, 1);
}

void Espresso::blob<int,1>::make(void *a1, int a2)
{
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,1>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a6;
  int v11 = (std::__shared_weak_count *)a6[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(a1, a2, a4, a5, v10, (uint64_t)v11, a7, a8);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (a3)
  {
    nitro::nitro_function::nitro_function(a3);
  }
}

void sub_192B44780(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

float Espresso::inner_product_kernel_cpu::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  if (*(_DWORD *)(a1 + 412))
  {
    Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
    uint64_t v5 = *(void *)(a1 + 848);
    if (v5)
    {
      unint64_t v6 = (unint64_t)*(int *)(v5 + 8) >> 1;
    }
    else
    {
      unint64_t v6 = *(void *)(a1 + 832);
      if (v6) {
        unint64_t v6 = (unint64_t)*(int *)(v6 + 8) >> 2;
      }
    }
    return ((double)*((int *)*a2 + 3) * (double)v6 + (double)*((int *)*a2 + 3) * (double)v6) * 0.000000001;
  }
  else
  {
    Espresso::generic_inner_product_kernel::estimated_compute_resources(a1, a2, a3);
  }
  return result;
}

void Espresso::inner_product_kernel_cpu::clear_weights(std::__shared_weak_count **this)
{
  Espresso::generic_inner_product_kernel::clear_weights((Espresso::generic_inner_product_kernel *)this);
  uint64_t v2 = this[69];
  long long v3 = 0uLL;
  *((_OWORD *)this + 34) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    long long v3 = 0uLL;
  }
  int v4 = this[71];
  *((_OWORD *)this + 35) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = this[73];
  long long v6 = 0uLL;
  *((_OWORD *)this + 36) = 0u;
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
    long long v6 = 0uLL;
  }
  uint64_t v7 = this[75];
  *((_OWORD *)this + 37) = v6;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  int v8 = this[77];
  long long v9 = 0uLL;
  *((_OWORD *)this + 38) = 0u;
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    long long v9 = 0uLL;
  }
  uint64_t v10 = this[81];
  *((_OWORD *)this + 40) = v9;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  int v11 = this[83];
  long long v12 = 0uLL;
  *((_OWORD *)this + 41) = 0u;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    long long v12 = 0uLL;
  }
  uint64_t v13 = this[85];
  *((_OWORD *)this + 42) = v12;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v14 = this[87];
  long long v15 = 0uLL;
  *((_OWORD *)this + 43) = 0u;
  if (v14)
  {
    nitro::nitro_function::nitro_function(v14);
    long long v15 = 0uLL;
  }
  BOOL v16 = this[97];
  *((_OWORD *)this + 48) = v15;
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  int v17 = this[99];
  long long v18 = 0uLL;
  *((_OWORD *)this + 49) = 0u;
  if (v17)
  {
    nitro::nitro_function::nitro_function(v17);
    long long v18 = 0uLL;
  }
  uint64_t v19 = this[101];
  *((_OWORD *)this + 50) = v18;
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  BOOL v20 = this[103];
  *((_OWORD *)this + 51) = 0u;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  long long v21 = this[56];
  this[55] = 0;
  this[56] = 0;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  uint64_t v22 = this[105];
  long long v23 = 0uLL;
  *((_OWORD *)this + 52) = 0u;
  if (v22)
  {
    nitro::nitro_function::nitro_function(v22);
    long long v23 = 0uLL;
  }
  int v24 = this[107];
  *((_OWORD *)this + 53) = v23;
  if (v24)
  {
    nitro::nitro_function::nitro_function(v24);
  }
}

void Espresso::inner_product_kernel_cpu::share_weights(void *a1, const void **a2)
{
  if (*a2)
  {
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = v3[70];
      uint64_t v6 = v3[71];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      a1[70] = v5;
      uint64_t v7 = (std::__shared_weak_count *)a1[71];
      a1[71] = v6;
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      uint64_t v8 = v4[68];
      uint64_t v9 = v4[69];
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      a1[68] = v8;
      uint64_t v10 = (std::__shared_weak_count *)a1[69];
      a1[69] = v9;
      if (v10)
      {
        nitro::nitro_function::nitro_function(v10);
      }
    }
  }
}

void Espresso::inner_product_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3) {
    long long v103 = 0uLL;
  }
  else {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v103, *(uint64_t **)a3);
  }
  uint64_t v8 = a4[1];
  if (v8 == *a4)
  {
    long long v102 = 0uLL;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v102, *a4);
    uint64_t v8 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)&v91, *v8);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v96, (const Espresso::layer_shape *)&v91, 0);
  if (__p)
  {
    int v95 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v91, **(void **)a3);
  char v9 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, v92)));
  if (v93 == -1) {
    BOOL v10 = v92.i32[3] != 1;
  }
  else {
    BOOL v10 = v93 == 5;
  }
  if (v92.i32[3]) {
    BOOL v10 = 0;
  }
  if ((v9 & 1) == 0 && v91 >= 1 && !v10)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v85, (const Espresso::layer_shape *)&v91, 0);
    unsigned int v11 = v101;
    if (*(unsigned char *)(a1 + 344) || v101 <= 3)
    {
      switch(v101)
      {
        case 1u:
          uint64_t v12 = 1;
          if (!v101) {
            goto LABEL_27;
          }
          break;
        case 2u:
          uint64_t v12 = v96;
          if (!v101) {
            goto LABEL_27;
          }
          break;
        case 3u:
          uint64_t v12 = v97 * (uint64_t)v96;
          if (!v101) {
            goto LABEL_27;
          }
          break;
        case 4u:
          uint64_t v12 = v97 * (uint64_t)v96 * v98;
          if (!v101) {
            goto LABEL_27;
          }
          break;
        case 5u:
          uint64_t v12 = v97 * (uint64_t)v96 * v98 * v99;
          if (!v101) {
            goto LABEL_27;
          }
          break;
        default:
          uint64_t v12 = 0;
          if (!v101) {
            goto LABEL_27;
          }
          break;
      }
      uint64_t v13 = *(&v96 + (int)v101 - 1);
    }
    else if (v101 == 5)
    {
      uint64_t v12 = v97 * (uint64_t)v96;
      uint64_t v13 = v99 * (uint64_t)v100 * v98;
    }
    else if (v101 == 4)
    {
      uint64_t v12 = v96;
      uint64_t v13 = v98 * (uint64_t)v99 * v97;
    }
    else
    {
      uint64_t v12 = 0;
LABEL_27:
      uint64_t v13 = 0;
    }
    if (*(unsigned char *)(a1 + 344) || v90 <= 3)
    {
      switch(v90)
      {
        case 1u:
          uint64_t v14 = 1;
          if (!v90) {
            goto LABEL_48;
          }
          break;
        case 2u:
          uint64_t v14 = v85;
          if (!v90) {
            goto LABEL_48;
          }
          break;
        case 3u:
          uint64_t v14 = v86 * (uint64_t)v85;
          if (!v90) {
            goto LABEL_48;
          }
          break;
        case 4u:
          uint64_t v14 = v86 * (uint64_t)v85 * v87;
          if (!v90) {
            goto LABEL_48;
          }
          break;
        case 5u:
          uint64_t v14 = v86 * (uint64_t)v85 * v87 * v88;
          if (!v90) {
            goto LABEL_48;
          }
          break;
        default:
          uint64_t v14 = 0;
          if (!v90) {
            goto LABEL_48;
          }
          break;
      }
      uint64_t v15 = *(&v85 + (int)v90 - 1);
    }
    else if (v90 == 5)
    {
      uint64_t v14 = v86 * (uint64_t)v85;
      uint64_t v15 = v88 * (uint64_t)v89 * v87;
    }
    else if (v90 == 4)
    {
      uint64_t v14 = v85;
      uint64_t v15 = v87 * (uint64_t)v88 * v86;
    }
    else
    {
      uint64_t v14 = 0;
LABEL_48:
      uint64_t v15 = 0;
    }
    int v16 = *(_DWORD *)(a1 + 424);
    if (v16 >= 1)
    {
      int v17 = *(_DWORD *)(a1 + 944);
      if (v17 && v16 > v17)
      {
        *(_DWORD *)(a1 + 944) = v17 + 1;
        goto LABEL_144;
      }
      *(_DWORD *)(a1 + 944) = 1;
    }
    if (!v11) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid rank");
    }
    if (v12 != v14) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Mismatching batch size: %zu / %zu", v12, v14);
    }
    int v22 = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))(*(void *)(*(void *)(a1 + 8) + 8));
    uint64_t v23 = v103;
    *((void *)&v71 + 1) = v15;
    DWORD1(v70) = ((unint64_t)v103 | (unint64_t)v102) == 0;
    if ((unint64_t)v103 | (unint64_t)v102)
    {
      *((void *)&v70 + 1) = 0;
      *(void *)&long long v71 = 0;
      BOOL v26 = 0;
      goto LABEL_86;
    }
    int v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
    if (v24)
    {
      uint64_t v25 = v24[23];
      *((void *)&v70 + 1) = v24[22];
      if (v25)
      {
        *(void *)&long long v71 = v24[23];
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_73;
      }
    }
    else
    {
      *((void *)&v70 + 1) = 0;
    }
    *(void *)&long long v71 = 0;
LABEL_73:
    long long v27 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)*a4, (uint64_t)a4[1], 0);
    if (!v27) {
      goto LABEL_153;
    }
    uint64_t v28 = *((void *)v27 + 22);
    BOOL v26 = (std::__shared_weak_count *)*((void *)v27 + 23);
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!*((void *)&v70 + 1) || !v28)
    {
LABEL_153:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected null blobs");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, *((void *)&v70 + 1) + 8);
    uint64_t v29 = (std::__shared_weak_count *)*((void *)&v103 + 1);
    long long v103 = *(_OWORD *)&src.data;
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v28 + 8);
    long long v30 = (std::__shared_weak_count *)*((void *)&v102 + 1);
    long long v102 = *(_OWORD *)&src.data;
    if (v30)
    {
      nitro::nitro_function::nitro_function(v30);
      data = (void *)v102;
    }
    else
    {
      data = src.data;
    }
    uint64_t v32 = 0;
    float v33 = (void *)data[3];
    uint64_t v34 = (char *)data + 12;
    vImagePixelCount v35 = *((int *)data + 2);
    do
    {
      v35 *= *(int *)&v34[v32];
      v32 += 4;
    }
    while (v32 != 12);
    src.data = *(void **)(v28 + 24);
    src.vImagePixelCount height = 1;
    src.width = v35;
    src.rowBytes = 2 * v35;
    dest.data = v33;
    dest.vImagePixelCount height = 1;
    dest.width = v35;
    dest.rowBytes = 4 * v35;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    uint64_t v23 = v103;
LABEL_86:
    uint64_t v36 = 0;
    int v37 = *(_DWORD *)(v23 + 8);
    uint64_t v38 = v23 + 12;
    do
    {
      v37 *= *(_DWORD *)(v38 + v36);
      v36 += 4;
    }
    while (v36 != 12);
    if (*(_DWORD *)(a1 + 412)
      && *(_DWORD *)(a1 + 416)
      && Espresso::__launch_spmv_inner_product((void *)a1, (uint64_t)&v103, (uint64_t)&v102, v22 == 100, v18, v19, v20, v21, v69, v70, v71, v72, v73, *((uint64_t *)&v73 + 1), v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76,
                         *((long long **)&v76 + 1)))
    {
LABEL_91:
      (*(void (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, void, uint64_t, uint64_t **))(*(void *)a1 + 608))(a1, a2, &v103, &v102, v12, *((void *)&v71 + 1), v13, a4);
LABEL_135:
      if (DWORD1(v70))
      {
        uint64_t v55 = 0;
        int v56 = *(int **)(v103 + 24);
        BOOL v57 = *(_WORD **)(*((void *)&v70 + 1) + 24);
        uint64_t v58 = *(int *)(v103 + 8);
        do
        {
          v58 *= *(int *)(v103 + 12 + v55);
          v55 += 4;
        }
        while (v55 != 12);
        for (; v58; --v58)
        {
          int v59 = *v56++;
          _S0 = v59;
          __asm { FCVT            H0, S0 }
          *v57++ = _S0;
        }
      }
      goto LABEL_140;
    }
    int v39 = *(_DWORD *)(a1 + 340);
    if (v39 == 5)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, void, uint64_t))(*(void *)a1 + 592))(a1, a2, a3, a4, v12, *((void *)&v71 + 1), v13);
LABEL_140:
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      if ((void)v71) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v71);
      }
      goto LABEL_144;
    }
    int v40 = *(_DWORD *)(a1 + 404);
    if (v40)
    {
      int v41 = *(void **)(a1 + 928);
      int v42 = *(_DWORD *)(a1 + 408);
      int v43 = *(std::__shared_weak_count **)(a1 + 568);
      v84[0] = *(void *)(a1 + 560);
      v84[1] = v43;
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v44 = *(std::__shared_weak_count **)(a1 + 584);
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v45 = *(std::__shared_weak_count **)(a1 + 552);
      v83[0] = *(void *)(a1 + 544);
      v83[1] = v45;
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::argmax_tree_approximator::__launch(v41, v40, v42, (uint64_t)v84, (uint64_t)v83, (uint64_t)&v103, (uint64_t)&v102);
      if (v45) {
        nitro::nitro_function::nitro_function(v45);
      }
      if (v44) {
        nitro::nitro_function::nitro_function(v44);
      }
      if (v43) {
        nitro::nitro_function::nitro_function(v43);
      }
      long long v46 = *(_OWORD *)(a1 + 416);
      long long v80 = *(_OWORD *)(a1 + 400);
      long long v81 = v46;
      int v82 = *(_DWORD *)(a1 + 432);
      long long v47 = *(_OWORD *)(a1 + 352);
      long long v76 = *(_OWORD *)(a1 + 336);
      long long v77 = v47;
      long long v48 = *(_OWORD *)(a1 + 384);
      long long v78 = *(_OWORD *)(a1 + 368);
      long long v79 = v48;
      long long v49 = *(_OWORD *)(a1 + 320);
      long long v74 = *(_OWORD *)(a1 + 304);
      long long v75 = v49;
      uint64_t v50 = (std::__shared_weak_count *)*((void *)&v103 + 1);
      long long v73 = v103;
      if (*((void *)&v103 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      size_t v51 = *(std::__shared_weak_count **)(a1 + 552);
      *(void *)&long long v72 = *(void *)(a1 + 544);
      *((void *)&v72 + 1) = v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)&v74, (uint64_t *)&v73, v37, (uint64_t)&v72, *((uint64_t *)&v71 + 1), v12);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      goto LABEL_135;
    }
    if (v39)
    {
      uint64_t v52 = *(void **)(a1 + 440);
      uint64_t v53 = v13;
      uint64_t v54 = *((void *)&v71 + 1);
      if (!v52 || !*v52 || !v52[4] && !v52[6] && !v52[8] && !v52[10])
      {
        switch(v39)
        {
          case 1:
            (*(void (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, void, uint64_t))(*(void *)a1 + 536))(a1, a2, &v103, &v102, v12, *((void *)&v71 + 1), v13);
            goto LABEL_91;
          case 2:
            (*(void (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, void, uint64_t))(*(void *)a1 + 528))(a1, a2, &v103, &v102, v12, *((void *)&v71 + 1), v13);
            goto LABEL_135;
          case 3:
            (*(void (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, void, uint64_t))(*(void *)a1 + 584))(a1, a2, &v103, &v102, v12, *((void *)&v71 + 1), v13);
            goto LABEL_91;
          case 4:
            (*(void (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, void, uint64_t))(*(void *)a1 + 600))(a1, a2, &v103, &v102, v12, *((void *)&v71 + 1), v13);
            goto LABEL_91;
          default:
            uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string((std::string *)&dest, *(_DWORD *)(a1 + 340));
            uint64_t v67 = std::string::insert((std::string *)&dest, 0, "Quantization not supported ");
            long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            src.width = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&src.data = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v66, (const std::string *)&src);
            __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
    }
    else
    {
      uint64_t v53 = v13;
      uint64_t v54 = *((void *)&v71 + 1);
      if (*(void *)(a1 + 688) || *(void *)(a1 + 704))
      {
        (*(void (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, void, uint64_t))(*(void *)a1 + 552))(a1, a2, &v103, &v102, v12, *((void *)&v71 + 1), v13);
        goto LABEL_134;
      }
      if (*(void *)(a1 + 512) || *(void *)(a1 + 528))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t **, uint64_t))(*(void *)a1 + 560))(a1, a2, v12, *((void *)&v71 + 1), v13, a4, a3);
        goto LABEL_140;
      }
    }
    (*(void (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t))(*(void *)a1 + 568))(a1, a2, &v103, &v102, v12, v54, v53, a4, v12);
LABEL_134:
    if (*(_DWORD *)(a1 + 336)) {
      goto LABEL_135;
    }
    goto LABEL_91;
  }
LABEL_144:
  if (__p)
  {
    int v95 = __p;
    operator delete(__p);
  }
  if (*((void *)&v102 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v102 + 1));
  }
  if (*((void *)&v103 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v103 + 1));
  }
}

void sub_192B455A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (*(char *)(v53 - 105) < 0) {
    operator delete(*(void **)(v53 - 128));
  }
  if (*(char *)(v53 - 137) < 0)
  {
    operator delete(*(void **)(v53 - 160));
    if ((v52 & 1) == 0)
    {
LABEL_8:
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      if (__p) {
        operator delete(__p);
      }
      uint64_t v55 = *(std::__shared_weak_count **)(v53 - 184);
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      int v56 = *(std::__shared_weak_count **)(v53 - 168);
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v50);
  goto LABEL_8;
}

void Espresso::argmax_tree_approximator::__launch(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t __ldb = *(int *)(*(void *)a7 + 16);
  uint64_t v68 = *(int *)(*(void *)a6 + 16);
  uint64_t v70 = *(unsigned int *)(*(void *)a6 + 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v84, 1, 1, a2, v70);
  BOOL v10 = (std::__shared_weak_count *)a1[1];
  v83[0] = *a1;
  v83[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v11 = (std::__shared_weak_count *)a1[3];
  v82[0] = a1[2];
  v82[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v67 = v84;
  Espresso::matrix_vector_mult_batched((uint64_t)v83, (uint64_t)v82, __ldb, *(const float **)(*(void *)a7 + 24), a2, *(float **)(v84 + 24), v70, 0.0);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v80, v68, 1, 1, 1);
  if ((int)v70 >= 1)
  {
    uint64_t v74 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = a2;
    uint64_t v15 = a3;
    unint64_t v16 = (unint64_t)(a3 - 2) >> 1;
    unint64_t v64 = v16 + 1;
    uint64_t v65 = a3 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v63 = 2 * v16;
    uint64_t v17 = a3;
    int v71 = a3;
    do
    {
      std::vector<std::pair<float,int>>::vector(&__p, v14);
      uint64_t v72 = v12;
      uint64_t v73 = v13;
      uint64_t v18 = *(void *)(v67 + 24);
      float v19 = *(float *)(v18 + 4 * v13 * v14);
      uint64_t v20 = (float *)__p;
      if (a2 >= 1)
      {
        uint64_t v21 = 0;
        int v22 = (float *)((char *)__p + 4);
        uint64_t v23 = v18 + v12;
        do
        {
          float v24 = *(float *)(v23 + 4 * v21);
          *(v22 - 1) = v24;
          *(_DWORD *)int v22 = v21;
          v22 += 2;
          if (v24 < v19) {
            float v19 = v24;
          }
          ++v21;
        }
        while (a2 != v21);
      }
      if (a3)
      {
        uint64_t v25 = v79;
        if (a3 >= 2)
        {
          unint64_t v26 = v64;
          long long v27 = &v20[v63];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::argmax_tree_approximator::__launch(int,int,std::shared_ptr<Espresso::blob<float,2>>,std::shared_ptr<Espresso::blob<unsigned char,2>>,std::shared_ptr<Espresso::blob<float,1>>,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&)::{lambda(std::pair<float,int> const&,std::pair<float,int> const&)#1} &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)v20, v15, v27);
            v27 -= 2;
            --v26;
          }
          while (v26);
        }
        uint64_t v28 = &v20[2 * v15];
        if (v28 != v25)
        {
          uint64_t v29 = &v20[2 * v15];
          do
          {
            float v30 = *v29;
            if (*v29 > *v20)
            {
              *uint64_t v29 = *v20;
              *uint64_t v20 = v30;
              int v31 = *((_DWORD *)v29 + 1);
              v29[1] = v20[1];
              *((_DWORD *)v20 + 1) = v31;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::argmax_tree_approximator::__launch(int,int,std::shared_ptr<Espresso::blob<float,2>>,std::shared_ptr<Espresso::blob<unsigned char,2>>,std::shared_ptr<Espresso::blob<float,1>>,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&)::{lambda(std::pair<float,int> const&,std::pair<float,int> const&)#1} &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)v20, v15, v20);
            }
            v29 += 2;
          }
          while (v29 != v25);
        }
        a3 = v71;
        if (v71 > 1)
        {
          uint64_t v32 = v65;
          do
          {
            uint64_t v33 = 0;
            float v34 = *v20;
            int v35 = *((_DWORD *)v20 + 1);
            uint64_t v36 = v20;
            do
            {
              int v37 = v36;
              v36 += 2 * v33 + 2;
              uint64_t v38 = 2 * v33;
              uint64_t v33 = (2 * v33) | 1;
              uint64_t v39 = v38 + 2;
              if (v39 < v32 && *v36 > v36[2])
              {
                v36 += 2;
                uint64_t v33 = v39;
              }
              *int v37 = *v36;
              v37[1] = v36[1];
            }
            while (v33 <= (uint64_t)((unint64_t)(v32 - 2) >> 1));
            if (v36 == v28 - 2)
            {
              *uint64_t v36 = v34;
              *((_DWORD *)v36 + 1) = v35;
            }
            else
            {
              *uint64_t v36 = *(v28 - 2);
              v36[1] = *(v28 - 1);
              *(v28 - 2) = v34;
              *((_DWORD *)v28 - 1) = v35;
              uint64_t v40 = (char *)v36 - (char *)v20 + 8;
              if (v40 >= 9)
              {
                unint64_t v41 = (unint64_t)((v40 >> 3) - 2) >> 1;
                int v42 = &v20[2 * v41];
                float v43 = *v42;
                float v44 = *v36;
                if (*v42 > *v36)
                {
                  int v45 = *((_DWORD *)v36 + 1);
                  do
                  {
                    long long v46 = v36;
                    uint64_t v36 = v42;
                    *long long v46 = v43;
                    v46[1] = v42[1];
                    if (!v41) {
                      break;
                    }
                    unint64_t v41 = (v41 - 1) >> 1;
                    int v42 = &v20[2 * v41];
                    float v43 = *v42;
                  }
                  while (*v42 > v44);
                  *uint64_t v36 = v44;
                  *((_DWORD *)v36 + 1) = v45;
                }
              }
            }
            v28 -= 2;
          }
          while (v32-- > 2);
        }
      }
      if ((int)v68 >= 1)
      {
        long long v48 = (float *)(*(void *)(*(void *)a6 + 24) + v74);
        uint64_t v49 = v68;
        do
        {
          *v48++ = v19;
          --v49;
        }
        while (v49);
      }
      if (a3 >= 1)
      {
        uint64_t v50 = 0;
        size_t v51 = (const float *)(*(void *)(*(void *)a7 + 24) + 4 * v73 * __ldb);
        uint64_t v52 = v80;
        do
        {
          uint64_t v53 = *((int *)__p + 2 * v50 + 1);
          uint64_t v54 = *(void *)(a1[4] + 16);
          if ((int)v53 < 1) {
            int v55 = 0;
          }
          else {
            int v55 = *(_DWORD *)(v54 + 4 * (v53 - 1));
          }
          if (!*(void *)a4)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "not supported");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t __ldc = (*(_DWORD *)(v54 + 4 * v53) - v55);
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, 1, *(_DWORD *)(v54 + 4 * v53) - v55, __ldb, 1.0, v51, __ldb, (const float *)(*(void *)(*(void *)a4 + 16) + 4 * v55 * (int)__ldb), __ldb, 0.0, *(float **)(v52 + 16), __ldc);
          vDSP_vadd((const float *)(*(void *)(*(void *)a5 + 16) + 4 * v55), 1, *(const float **)(v52 + 16), 1, *(float **)(v52 + 16), 1, (int)__ldc);
          if ((int)__ldc >= 1)
          {
            BOOL v57 = *(_DWORD **)(v52 + 16);
            uint64_t v58 = *(void *)(*(void *)a6 + 24);
            int v59 = (int *)(*(void *)(a1[6] + 16) + 4 * v55);
            do
            {
              uint64_t v61 = *v59++;
              uint64_t v60 = v61;
              LODWORD(v61) = *v57++;
              *(_DWORD *)(v58 + 4 * v60) = v61;
              --__ldc;
            }
            while (__ldc);
          }
          ++v50;
        }
        while (v50 != v17);
      }
      if (__p)
      {
        long long v79 = (float *)__p;
        operator delete(__p);
      }
      uint64_t v13 = v73 + 1;
      uint64_t v12 = v72 + 4 * a2;
      v74 += 4 * v68;
      a3 = v71;
      unint64_t v14 = a2;
    }
    while (v73 + 1 != v70);
  }
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
}

void sub_192B45C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v36 = *(std::__shared_weak_count **)(v34 - 112);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<float,int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_192B45D84(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::argmax_tree_approximator::__launch(int,int,std::shared_ptr<Espresso::blob<float,2>>,std::shared_ptr<Espresso::blob<unsigned char,2>>,std::shared_ptr<Espresso::blob<float,1>>,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&)::{lambda(std::pair<float,int> const&,std::pair<float,int> const&)#1} &,std::__wrap_iter<std::pair<float,int>*>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) | 1;
      uint64_t v7 = (float *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2 && *v7 > v7[2])
      {
        v7 += 2;
        uint64_t v6 = v8;
      }
      float v9 = *v7;
      float v10 = *a3;
      if (*v7 <= *a3)
      {
        int v11 = *((_DWORD *)a3 + 1);
        do
        {
          uint64_t v12 = a3;
          a3 = v7;
          *uint64_t v12 = v9;
          v12[1] = v7[1];
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (float *)(result + 8 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a2 && *v7 > v7[2])
          {
            v7 += 2;
            uint64_t v6 = v14;
          }
          float v9 = *v7;
        }
        while (*v7 <= v10);
        *a3 = v10;
        *((_DWORD *)a3 + 1) = v11;
      }
    }
  }
  return result;
}

void Espresso::concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t v36 = a1;
  uint64_t v5 = a3[1];
  if (v5 == *a3)
  {
    size_t v51 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v51, *a3);
    uint64_t v5 = *a3;
  }
  Espresso::abstract_blob_container::shape((char *)&v45, *v5);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v49, (const Espresso::layer_shape *)&v45, 0);
  if (__p)
  {
    long long v48 = __p;
    operator delete(__p);
  }
  if (v50 < 4)
  {
    if (v50) {
      uint64_t v22 = (int)v49[v50 - 1];
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *a4;
    uint64_t v24 = a4[1];
    if (v24 != *a4)
    {
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      long long v27 = v51;
      uint64_t v28 = 4 * v22;
      do
      {
        if (v25 >= (v24 - v23) >> 4)
        {
          uint64_t v43 = 0;
          float v44 = 0;
        }
        else
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v43, (uint64_t *)(v23 + 16 * v25));
          uint64_t v23 = *a4;
        }
        Espresso::abstract_blob_container::shape((char *)&v45, *(void *)(v23 + 16 * v25));
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v37, (const Espresso::layer_shape *)&v45, 0);
        if (*(unsigned char *)(v36 + 340) || v42 <= 3)
        {
          switch(v42)
          {
            case 1u:
              uint64_t v29 = 1;
              if (!v42) {
                goto LABEL_53;
              }
              break;
            case 2u:
              uint64_t v29 = v37;
              if (!v42) {
                goto LABEL_53;
              }
              break;
            case 3u:
              uint64_t v29 = v38 * (uint64_t)v37;
              if (!v42) {
                goto LABEL_53;
              }
              break;
            case 4u:
              uint64_t v29 = v38 * (uint64_t)v37 * v39;
              if (!v42) {
                goto LABEL_53;
              }
              break;
            case 5u:
              uint64_t v29 = v38 * (uint64_t)v37 * v39 * v40;
              if (!v42) {
                goto LABEL_53;
              }
              break;
            default:
              uint64_t v29 = 0;
              if (!v42) {
                goto LABEL_53;
              }
              break;
          }
          uint64_t v30 = *(&v37 + (int)v42 - 1);
        }
        else if (v42 == 5)
        {
          uint64_t v29 = v38 * (uint64_t)v37;
          uint64_t v30 = v40 * (uint64_t)v41 * v39;
        }
        else if (v42 == 4)
        {
          uint64_t v29 = v37;
          uint64_t v30 = v39 * (uint64_t)v40 * v38;
        }
        else
        {
          uint64_t v29 = 0;
LABEL_53:
          uint64_t v30 = 0;
        }
        if (__p)
        {
          long long v48 = __p;
          operator delete(__p);
        }
        if (v43)
        {
          uint64_t v31 = *((void *)v27 + 3);
          if (v31)
          {
            uint64_t v32 = *(char **)(v43 + 24);
            if (v32)
            {
              if (v29)
              {
                uint64_t v33 = (char *)(v31 + 4 * v26);
                do
                {
                  if (v33 != v32) {
                    memcpy(v33, v32, 4 * v30);
                  }
                  v32 += 4 * v30;
                  v33 += v28;
                  --v29;
                }
                while (v29);
              }
            }
          }
        }
        if (v44) {
          nitro::nitro_function::nitro_function(v44);
        }
        v26 += v30;
        ++v25;
        uint64_t v23 = *a4;
        uint64_t v24 = a4[1];
      }
      while (v25 < (v24 - *a4) >> 4);
    }
  }
  else
  {
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    if (v8 != *a4)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v34 = v51;
      int v35 = a4;
      uint64_t v11 = 4 * v51[3] * v51[2] * v51[4];
      do
      {
        if (v9 >= (v8 - v7) >> 4)
        {
          uint64_t v12 = 0;
          uint64_t v45 = 0;
          long long v46 = 0;
        }
        else
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v45, (uint64_t *)(v7 + 16 * v9));
          uint64_t v12 = v45;
        }
        int v13 = *(_DWORD *)(v12 + 16);
        if (!v9)
        {
          int v13 = *(unsigned __int16 *)(v36 + 320);
          if (!*(_WORD *)(v36 + 320)) {
            int v13 = *(_DWORD *)(v12 + 16);
          }
        }
        int v14 = *(_DWORD *)(v12 + 12) * *(_DWORD *)(v12 + 8);
        int v15 = v14 * v13;
        if (*(int *)(v12 + 20) <= 0)
        {
          uint64_t v19 = v15;
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = *(char **)(v12 + 24);
          uint64_t v18 = (char *)(*((void *)v34 + 3) + 4 * v10);
          uint64_t v19 = v15;
          size_t v20 = 4 * v15;
          uint64_t v21 = 4 * v14 * *(_DWORD *)(v12 + 16);
          do
          {
            if (v18 != v17) {
              memcpy(v18, v17, v20);
            }
            ++v16;
            v17 += v21;
            v18 += v11;
          }
          while (v16 < *(_DWORD *)(v12 + 20));
        }
        if (v46) {
          nitro::nitro_function::nitro_function(v46);
        }
        v10 += v19;
        ++v9;
        uint64_t v7 = *v35;
        uint64_t v8 = v35[1];
      }
      while (v9 < (v8 - *v35) >> 4);
    }
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
}

void sub_192B4626C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v25 = *(std::__shared_weak_count **)(v23 - 96);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::concat_kernel_cpu::~concat_kernel_cpu(Espresso::concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::upsample_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v168 = 0;
    uint64_t v169 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v168, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v166 = 0;
    uint64_t v167 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v166, *(uint64_t **)a3);
  }
  uint64_t v6 = v168;
  if (!v168)
  {
    uint64_t v151 = "Blob of wrong type (bottom)";
    goto LABEL_158;
  }
  uint64_t v159 = v166;
  if (!v166)
  {
    uint64_t v151 = "Blob of wrong type (top)";
LABEL_158:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v151);
  }
  uint64_t v7 = 0;
  uint64_t v165 = 0;
  long long v163 = 0u;
  long long v164 = 0u;
  uint64_t v8 = 1;
  do
  {
    *((void *)&v163 + v7) = (int)v8;
    v8 *= *(unsigned int *)(v6 + 8 + 4 * v7++);
  }
  while (v7 != 4);
  uint64_t v9 = 0;
  uint64_t v162 = 0;
  long long v160 = 0u;
  long long v161 = 0u;
  uint64_t v10 = 1;
  do
  {
    *((void *)&v160 + v9) = (int)v10;
    v10 *= *(unsigned int *)(v159 + 8 + 4 * v9++);
  }
  while (v9 != 4);
  int v11 = *(_DWORD *)(a1 + 292);
  if (v11 == 1)
  {
    if (*(_DWORD *)(a1 + 300))
    {
      uint64_t v154 = *(unsigned int *)(v159 + 20);
      if ((int)v154 >= 1)
      {
        uint64_t v155 = 0;
        uint64_t v156 = 0;
        uint64_t v50 = *(int *)(a1 + 284);
        uint64_t v51 = *(unsigned int *)(a1 + 284);
        uint64_t v52 = *(int *)(a1 + 288);
        uint64_t v53 = *(unsigned int *)(a1 + 288);
        uint64_t v54 = *(unsigned int *)(v159 + 16);
        uint64_t v152 = *((void *)&v164 + 1);
        uint64_t v55 = *((void *)&v163 + 1);
        uint64_t v157 = v164;
        uint64_t v153 = 4 * *((void *)&v161 + 1);
        uint64_t v158 = 4 * v161;
        uint64_t v56 = 4 * *((void *)&v160 + 1) * v52;
        uint64_t v57 = 4 * *((void *)&v160 + 1);
        do
        {
          if ((int)v54 >= 1)
          {
            uint64_t v58 = 0;
            uint64_t v59 = *(unsigned int *)(v6 + 12);
            int v60 = *(_DWORD *)(v6 + 12);
            uint64_t v61 = (float *)(*(void *)(v159 + 24) + v156);
            do
            {
              if (v60 >= 1)
              {
                uint64_t v62 = 0;
                uint64_t v63 = *(void *)(v6 + 24) + 4 * v152 * v155 + 4 * v157 * v58;
                uint64_t v64 = *(unsigned int *)(v6 + 8);
                int v65 = *(_DWORD *)(v6 + 8);
                uint64_t v66 = v61;
                do
                {
                  uint64_t v67 = v62 + 1;
                  if (v62 + 1 >= (int)v59) {
                    int v68 = v59 - 1;
                  }
                  else {
                    int v68 = v62 + 1;
                  }
                  if (v65 >= 1)
                  {
                    uint64_t v69 = 0;
                    uint64_t v70 = v63 + 4 * v55 * v62;
                    uint64_t v71 = v63 + 4 * v55 * v68;
                    uint64_t v72 = v66;
                    do
                    {
                      uint64_t v73 = v69 + 1;
                      if (v69 + 1 >= (int)v64) {
                        int v74 = v64 - 1;
                      }
                      else {
                        int v74 = v69 + 1;
                      }
                      if ((int)v52 >= 1)
                      {
                        uint64_t v75 = 0;
                        float v76 = *(float *)(v70 + 4 * v69);
                        float v77 = *(float *)(v70 + 4 * v74);
                        float v78 = *(float *)(v71 + 4 * v69);
                        float v79 = 0.0;
                        uint64_t v80 = v72;
                        float v81 = *(float *)(v71 + 4 * v74);
                        do
                        {
                          if ((int)v50 >= 1)
                          {
                            float v82 = 0.0;
                            uint64_t v83 = v80;
                            uint64_t v84 = v51;
                            do
                            {
                              *v83++ = (float)((float)((float)(v79 * (float)(v78 * (float)(1.0 - v82)))
                                                     + (float)((float)(v76 * (float)(1.0 - v82)) * (float)(1.0 - v79)))
                                             + (float)((float)(v77 * v82) * (float)(1.0 - v79)))
                                     + (float)((float)(v81 * v82) * v79);
                              float v82 = (float)(1.0 / (float)(int)v50) + v82;
                              --v84;
                            }
                            while (v84);
                          }
                          float v79 = (float)(1.0 / (float)(int)v52) + v79;
                          ++v75;
                          uint64_t v80 = (float *)((char *)v80 + v57);
                        }
                        while (v75 != v53);
                      }
                      v72 += v50;
                      uint64_t v69 = v73;
                    }
                    while (v73 != v64);
                  }
                  uint64_t v66 = (float *)((char *)v66 + v56);
                  uint64_t v62 = v67;
                }
                while (v67 != v59);
              }
              ++v58;
              uint64_t v61 = (float *)((char *)v61 + v158);
            }
            while (v58 != v54);
          }
          ++v155;
          v156 += v153;
        }
        while (v155 != v154);
      }
    }
    else
    {
      uint64_t v85 = *(unsigned int *)(v159 + 8);
      float v86 = 0.0;
      float v87 = 0.0;
      if (*(_DWORD *)(a1 + 296))
      {
        if ((int)v85 >= 2) {
          float v87 = (float)((float)*(int *)(v6 + 8) + -1.0) / (float)((float)(int)v85 + -1.0);
        }
        uint64_t v88 = *(unsigned int *)(v159 + 12);
        if ((int)v88 > 1) {
          float v86 = (float)((float)*(int *)(v6 + 12) + -1.0) / (float)((float)(int)v88 + -1.0);
        }
        uint64_t v89 = *(unsigned int *)(v159 + 20);
        if ((int)v89 >= 1)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          uint64_t v92 = *(unsigned int *)(v159 + 16);
          long long v93 = v164;
          uint64_t v94 = *((void *)&v163 + 1);
          uint64_t v95 = 4 * *((void *)&v161 + 1);
          uint64_t v96 = 4 * v161;
          uint64_t v97 = 4 * *((void *)&v160 + 1);
          do
          {
            if ((int)v92 >= 1)
            {
              uint64_t v98 = 0;
              uint64_t v99 = *(void *)(v159 + 24) + v90;
              do
              {
                if ((int)v88 >= 1)
                {
                  uint64_t v100 = 0;
                  int v101 = *(_DWORD *)(v6 + 12) - 1;
                  uint64_t v102 = *(void *)(v6 + 24) + 4 * *((void *)&v93 + 1) * v91 + 4 * v93 * v98;
                  uint64_t v103 = v99;
                  do
                  {
                    float v104 = v86 * (float)(int)v100;
                    if (v101 >= (int)v104) {
                      int v105 = (int)v104;
                    }
                    else {
                      int v105 = v101;
                    }
                    if (v101 <= (int)v104) {
                      int v106 = v105;
                    }
                    else {
                      int v106 = v105 + 1;
                    }
                    if ((int)v85 >= 1)
                    {
                      uint64_t v107 = 0;
                      float v108 = v104 - (float)v105;
                      uint64_t v109 = v102 + 4 * v94 * v105;
                      uint64_t v110 = v102 + 4 * v94 * v106;
                      int v111 = *(_DWORD *)(v6 + 8) - 1;
                      do
                      {
                        float v112 = v87 * (float)(int)v107;
                        int v113 = (int)v112;
                        BOOL v114 = v111 <= (int)v112;
                        if (v111 < (int)v112) {
                          int v113 = v111;
                        }
                        float v115 = v112 - (float)v113;
                        if (v114) {
                          int v116 = v113;
                        }
                        else {
                          int v116 = v113 + 1;
                        }
                        *(float *)(v103 + 4 * v107++) = (float)(*(float *)(v110 + 4 * v116) * (float)(v108 * v115))
                                                      + (float)((float)(*(float *)(v110 + 4 * v113)
                                                                      * (float)(v108 * (float)(1.0 - v115)))
                                                              + (float)((float)(*(float *)(v109 + 4 * v116)
                                                                              * (float)((float)(1.0 - v108) * v115))
                                                                      + (float)(*(float *)(v109 + 4 * v113)
                                                                              * (float)((float)(1.0 - v108)
                                                                                      * (float)(1.0 - v115)))));
                      }
                      while (v85 != v107);
                    }
                    ++v100;
                    v103 += v97;
                  }
                  while (v100 != v88);
                }
                ++v98;
                v99 += v96;
              }
              while (v98 != v92);
            }
            ++v91;
            v90 += v95;
          }
          while (v91 != v89);
        }
      }
      else
      {
        if ((int)v85 >= 2) {
          float v87 = (float)*(int *)(v6 + 8) / (float)(int)v85;
        }
        uint64_t v117 = *(unsigned int *)(v159 + 12);
        int v118 = *(_DWORD *)(v6 + 12);
        if ((int)v117 >= 2) {
          float v86 = (float)v118 / (float)(int)v117;
        }
        int v119 = *(_DWORD *)(v6 + 8);
        if (*(unsigned char *)(a1 + 304) && !*(unsigned char *)(a1 + 316))
        {
          if (v119 != v85)
          {
            float v120 = *(float *)(a1 + 308);
            if (v120 > 0.0) {
              float v87 = 1.0 / v120;
            }
          }
          if (v118 != v117)
          {
            float v121 = *(float *)(a1 + 312);
            if (v121 > 0.0) {
              float v86 = 1.0 / v121;
            }
          }
        }
        uint64_t v122 = *(unsigned int *)(v159 + 20);
        if ((int)v122 >= 1)
        {
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          uint64_t v125 = *(unsigned int *)(v159 + 16);
          int v126 = v118 - 1;
          long long v127 = v164;
          uint64_t v128 = *((void *)&v163 + 1);
          int v129 = v119 - 1;
          uint64_t v130 = 4 * *((void *)&v161 + 1);
          uint64_t v131 = 4 * v161;
          uint64_t v132 = 4 * *((void *)&v160 + 1);
          do
          {
            if ((int)v125 >= 1)
            {
              uint64_t v133 = 0;
              uint64_t v134 = *(void *)(v159 + 24) + v123;
              do
              {
                if ((int)v117 >= 1)
                {
                  uint64_t v135 = 0;
                  uint64_t v136 = *(void *)(v6 + 24) + 4 * *((void *)&v127 + 1) * v124 + 4 * v127 * v133;
                  uint64_t v137 = v134;
                  do
                  {
                    float v138 = (float)((float)((float)(int)v135 + 0.5) * v86) + -0.5;
                    if (v138 < 0.0) {
                      float v138 = 0.0;
                    }
                    if (v126 >= (int)v138) {
                      int v139 = (int)v138;
                    }
                    else {
                      int v139 = v126;
                    }
                    if (v126 <= (int)v138) {
                      int v140 = v139;
                    }
                    else {
                      int v140 = v139 + 1;
                    }
                    if ((int)v85 >= 1)
                    {
                      uint64_t v141 = 0;
                      float v142 = v138 - (float)v139;
                      uint64_t v143 = v136 + 4 * v128 * v139;
                      uint64_t v144 = v136 + 4 * v128 * v140;
                      do
                      {
                        float v145 = (float)((float)((float)(int)v141 + 0.5) * v87) + -0.5;
                        if (v145 < 0.0) {
                          float v145 = 0.0;
                        }
                        int v146 = (int)v145;
                        BOOL v147 = v129 <= (int)v145;
                        if (v129 < (int)v145) {
                          int v146 = v129;
                        }
                        float v148 = v145 - (float)v146;
                        if (v147) {
                          int v149 = v146;
                        }
                        else {
                          int v149 = v146 + 1;
                        }
                        *(float *)(v137 + 4 * v141++) = (float)((float)((float)((float)((float)(1.0 - v142)
                                                                                      * (float)(1.0 - v148))
                                                                              * *(float *)(v143 + 4 * v146))
                                                                      + (float)((float)((float)(1.0 - v142) * v148)
                                                                              * *(float *)(v143 + 4 * v149)))
                                                              + (float)((float)(v142 * (float)(1.0 - v148))
                                                                      * *(float *)(v144 + 4 * v146)))
                                                      + (float)((float)(v142 * v148) * *(float *)(v144 + 4 * v149));
                      }
                      while (v85 != v141);
                    }
                    ++v135;
                    v137 += v132;
                  }
                  while (v135 != v117);
                }
                ++v133;
                v134 += v131;
              }
              while (v133 != v125);
            }
            ++v124;
            v123 += v130;
          }
          while (v124 != v122);
        }
      }
    }
  }
  else
  {
    if (v11) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Unknown mode in upsample_kernel_cpu.");
    }
    uint64_t v12 = *(unsigned int *)(v159 + 20);
    if ((int)v12 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = *(unsigned int *)(v159 + 16);
      long long v16 = v164;
      uint64_t v17 = *((void *)&v163 + 1);
      uint64_t v18 = *((void *)&v160 + 1);
      uint64_t v19 = 4 * *((void *)&v161 + 1);
      uint64_t v20 = 4 * v161;
      uint64_t v21 = 4 * *((void *)&v160 + 1);
      do
      {
        if ((int)v15 >= 1)
        {
          uint64_t v22 = 0;
          uint64_t v23 = *(void *)(v6 + 24) + 4 * *((void *)&v16 + 1) * v14;
          int v24 = *(unsigned __int8 *)(a1 + 304);
          uint64_t v25 = *(void *)(v159 + 24) + v13;
          do
          {
            uint64_t v26 = v23 + 4 * v16 * v22;
            if (v24)
            {
              if (*(_DWORD *)(a1 + 300)) {
                Espresso::throw_exception_selector<Espresso::generic_error>("Nearest neighbor sampling mode with fractional scale factors cannot be used in legacy mode in kernel upsample_kernel_cpu.");
              }
              float v27 = *(float *)(a1 + 308);
              if (v27 <= 0.0) {
                float v28 = 0.0;
              }
              else {
                float v28 = 1.0 / v27;
              }
              int v29 = *(_DWORD *)(v6 + 12);
              uint64_t v30 = *(unsigned int *)(v159 + 12);
              if (v29 == v30
                || ((v31 = *(float *)(a1 + 312), v31 <= 0.0) ? (float v32 = 0.0) : (float v32 = 1.0 / v31), *(unsigned char *)(a1 + 316)))
              {
                float v32 = (float)v29 / (float)(int)v30;
              }
              int v33 = *(_DWORD *)(v6 + 8);
              uint64_t v34 = *(unsigned int *)(v159 + 8);
              if (v33 == v34 || *(unsigned char *)(a1 + 316)) {
                float v28 = (float)v33 / (float)(int)v34;
              }
              if ((int)v30 >= 1)
              {
                uint64_t v35 = 0;
                uint64_t v36 = v25;
                do
                {
                  if ((int)v34 >= 1)
                  {
                    uint64_t v37 = 0;
                    uint64_t v38 = v17 * (int)vcvtms_s32_f32(v32 * (float)(int)v35);
                    do
                    {
                      *(_DWORD *)(v36 + 4 * v37) = *(_DWORD *)(v26
                                                             + 4 * (v38 + (int)vcvtms_s32_f32(v28 * (float)(int)v37)));
                      ++v37;
                    }
                    while (v34 != v37);
                  }
                  ++v35;
                  v36 += v21;
                }
                while (v35 != v30);
              }
            }
            else
            {
              int v39 = *(_DWORD *)(v6 + 12);
              if (v39 >= 1)
              {
                int v40 = 0;
                uint64_t v41 = *(unsigned int *)(v6 + 8);
                do
                {
                  if ((int)v41 >= 1)
                  {
                    uint64_t v42 = 0;
                    uint64_t v43 = *(unsigned int *)(a1 + 288);
                    do
                    {
                      if ((int)v43 >= 1)
                      {
                        uint64_t v44 = 0;
                        int v45 = *(_DWORD *)(v26 + 4 * v42);
                        uint64_t v46 = *(unsigned int *)(a1 + 284);
                        long long v47 = (_DWORD *)(v25 + 4 * (v18 * (int)v43 * v40 + (int)v46 * (int)v42));
                        do
                        {
                          long long v48 = v47;
                          uint64_t v49 = v46;
                          if ((int)v46 >= 1)
                          {
                            do
                            {
                              *v48++ = v45;
                              --v49;
                            }
                            while (v49);
                          }
                          ++v44;
                          long long v47 = (_DWORD *)((char *)v47 + v21);
                        }
                        while (v44 != v43);
                      }
                      ++v42;
                    }
                    while (v42 != v41);
                  }
                  v26 += 4 * v17;
                  ++v40;
                }
                while (v40 != v39);
              }
            }
            ++v22;
            v25 += v20;
          }
          while (v22 != v15);
        }
        ++v14;
        v13 += v19;
      }
      while (v14 != v12);
    }
  }
  if (v167) {
    nitro::nitro_function::nitro_function(v167);
  }
  uint64_t v150 = v169;
  if (v169)
  {
    nitro::nitro_function::nitro_function(v150);
  }
}

void sub_192B46CC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 112);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int64_t v4 = *(std::__shared_weak_count **)(v1 - 96);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::upsample_kernel_cpu::~upsample_kernel_cpu(Espresso::upsample_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::pow_op>(float *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = result;
  uint64_t v6 = 0;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  v59[0] = a3;
  v59[1] = a5;
  v58[0] = a4;
  v58[1] = a6;
  unint64_t v56 = *a2;
  unsigned int v51 = a2[1];
  unsigned int v47 = a2[2];
  unsigned int v42 = a2[3];
  v64[0] = 0;
  v64[1] = 0;
  LOBYTE(result) = 1;
  v63[0] = 0;
  v63[1] = 0;
  v62[0] = 0;
  v62[1] = 0;
  int v60 = 0;
  uint64_t v61 = 0;
  do
  {
    uint64_t v7 = (int *)v58[v6];
    int v8 = *v7;
    int v9 = v7[1];
    v66[v6 + 2] = v9 * *v7;
    int v10 = v7[2];
    int v11 = v7[3];
    int v12 = v10 * v9 * v8;
    v66[v6] = v12;
    v65[v6 + 10] = v11 * v12;
    LOBYTE(v12) = (_BYTE)result;
    v65[v6 + 8] = v7[4] != 1;
    v65[v6 + 6] = v11 != 1;
    v65[v6 + 4] = v10 != 1;
    v65[v6 + 2] = v9 != 1;
    v65[v6] = v8 != 1;
    uint64_t v6 = 1;
    float result = 0;
  }
  while ((v12 & 1) != 0);
  uint64_t v41 = a2[4];
  if (v41)
  {
    uint64_t v13 = 0;
    int v14 = v51;
    int v15 = v51 * v56 * v47;
    int v16 = v42;
    if (v56 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v56;
    }
    uint64_t v54 = v17;
    if (v51 <= 1) {
      int v14 = 1;
    }
    uint64_t v55 = v14;
    if (v47 <= 1) {
      int v18 = 1;
    }
    else {
      int v18 = v47;
    }
    uint64_t v50 = v18;
    if (v42 <= 1) {
      int v16 = 1;
    }
    uint64_t v19 = 4 * v65[1];
    uint64_t v20 = 4 * v65[0];
    uint64_t v40 = 4 * (int)(v15 * v42);
    uint64_t v45 = 4 * v15;
    uint64_t v46 = v16;
    float result = (float *)v66;
    do
    {
      uint64_t v21 = 0;
      char v22 = 1;
      do
      {
        char v23 = v22;
        v64[v21] = *(void *)(v59[v21] + 24) + 4 * v13 * (int)v65[v21 + 10] * (int)v65[v21 + 8];
        uint64_t v21 = 1;
        char v22 = 0;
      }
      while ((v23 & 1) != 0);
      uint64_t v43 = v13;
      if (v42)
      {
        uint64_t v24 = 0;
        uint64_t v49 = v44;
        do
        {
          uint64_t v25 = 0;
          char v26 = 1;
          do
          {
            char v27 = v26;
            v63[v25] = v64[v25] + 4 * v24 * (int)v66[v25] * (int)v65[v25 + 6];
            uint64_t v25 = 1;
            char v26 = 0;
          }
          while ((v27 & 1) != 0);
          uint64_t v48 = v24;
          if (v47)
          {
            uint64_t v28 = 0;
            uint64_t v53 = v49;
            do
            {
              uint64_t v29 = 0;
              char v30 = 1;
              do
              {
                char v31 = v30;
                v62[v29] = v63[v29] + 4 * v28 * (int)v66[v29 + 2] * (int)v65[v29 + 4];
                uint64_t v29 = 1;
                char v30 = 0;
              }
              while ((v31 & 1) != 0);
              uint64_t v52 = v28;
              if (v51)
              {
                uint64_t v32 = 0;
                uint64_t v57 = v53;
                do
                {
                  uint64_t v33 = 0;
                  char v34 = 1;
                  do
                  {
                    char v35 = v34;
                    (&v60)[v33] = (float *)(v62[v33] + 4 * v32 * *(int *)v58[v33] * (int)v65[v33 + 2]);
                    uint64_t v33 = 1;
                    char v34 = 0;
                  }
                  while ((v35 & 1) != 0);
                  if (v56)
                  {
                    uint64_t v36 = v60;
                    uint64_t v37 = v61;
                    uint64_t v38 = v57;
                    uint64_t v39 = v54;
                    do
                    {
                      *v38++ = powf(*v36, *v37);
                      uint64_t v37 = (float *)((char *)v37 + v19);
                      uint64_t v36 = (float *)((char *)v36 + v20);
                      --v39;
                    }
                    while (v39);
                  }
                  ++v32;
                  v57 += v56;
                }
                while (v32 != v55);
              }
              uint64_t v28 = v52 + 1;
              v53 += (int)(v51 * v56);
            }
            while (v52 + 1 != v50);
          }
          uint64_t v24 = v48 + 1;
          uint64_t v49 = (float *)((char *)v49 + v45);
          float result = (float *)v66;
        }
        while (v48 + 1 != v46);
      }
      uint64_t v13 = v43 + 1;
      uint64_t v44 = (float *)((char *)v44 + v40);
    }
    while (v43 + 1 != v41);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mod_op>(float *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = result;
  uint64_t v6 = 0;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  v59[0] = a3;
  v59[1] = a5;
  v58[0] = a4;
  v58[1] = a6;
  unint64_t v56 = *a2;
  unsigned int v51 = a2[1];
  unsigned int v47 = a2[2];
  unsigned int v42 = a2[3];
  v64[0] = 0;
  v64[1] = 0;
  LOBYTE(result) = 1;
  v63[0] = 0;
  v63[1] = 0;
  v62[0] = 0;
  v62[1] = 0;
  int v60 = 0;
  uint64_t v61 = 0;
  do
  {
    uint64_t v7 = (int *)v58[v6];
    int v8 = *v7;
    int v9 = v7[1];
    v66[v6 + 2] = v9 * *v7;
    int v10 = v7[2];
    int v11 = v7[3];
    int v12 = v10 * v9 * v8;
    v66[v6] = v12;
    v65[v6 + 10] = v11 * v12;
    LOBYTE(v12) = (_BYTE)result;
    v65[v6 + 8] = v7[4] != 1;
    v65[v6 + 6] = v11 != 1;
    v65[v6 + 4] = v10 != 1;
    v65[v6 + 2] = v9 != 1;
    v65[v6] = v8 != 1;
    uint64_t v6 = 1;
    float result = 0;
  }
  while ((v12 & 1) != 0);
  uint64_t v41 = a2[4];
  if (v41)
  {
    uint64_t v13 = 0;
    int v14 = v51;
    int v15 = v51 * v56 * v47;
    int v16 = v42;
    if (v56 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v56;
    }
    uint64_t v54 = v17;
    if (v51 <= 1) {
      int v14 = 1;
    }
    uint64_t v55 = v14;
    if (v47 <= 1) {
      int v18 = 1;
    }
    else {
      int v18 = v47;
    }
    uint64_t v50 = v18;
    if (v42 <= 1) {
      int v16 = 1;
    }
    uint64_t v19 = 4 * v65[1];
    uint64_t v20 = 4 * v65[0];
    uint64_t v40 = 4 * (int)(v15 * v42);
    uint64_t v45 = 4 * v15;
    uint64_t v46 = v16;
    float result = (float *)v66;
    do
    {
      uint64_t v21 = 0;
      char v22 = 1;
      do
      {
        char v23 = v22;
        v64[v21] = *(void *)(v59[v21] + 24) + 4 * v13 * (int)v65[v21 + 10] * (int)v65[v21 + 8];
        uint64_t v21 = 1;
        char v22 = 0;
      }
      while ((v23 & 1) != 0);
      uint64_t v43 = v13;
      if (v42)
      {
        uint64_t v24 = 0;
        uint64_t v49 = v44;
        do
        {
          uint64_t v25 = 0;
          char v26 = 1;
          do
          {
            char v27 = v26;
            v63[v25] = v64[v25] + 4 * v24 * (int)v66[v25] * (int)v65[v25 + 6];
            uint64_t v25 = 1;
            char v26 = 0;
          }
          while ((v27 & 1) != 0);
          uint64_t v48 = v24;
          if (v47)
          {
            uint64_t v28 = 0;
            uint64_t v53 = v49;
            do
            {
              uint64_t v29 = 0;
              char v30 = 1;
              do
              {
                char v31 = v30;
                v62[v29] = v63[v29] + 4 * v28 * (int)v66[v29 + 2] * (int)v65[v29 + 4];
                uint64_t v29 = 1;
                char v30 = 0;
              }
              while ((v31 & 1) != 0);
              uint64_t v52 = v28;
              if (v51)
              {
                uint64_t v32 = 0;
                uint64_t v57 = v53;
                do
                {
                  uint64_t v33 = 0;
                  char v34 = 1;
                  do
                  {
                    char v35 = v34;
                    (&v60)[v33] = (float *)(v62[v33] + 4 * v32 * *(int *)v58[v33] * (int)v65[v33 + 2]);
                    uint64_t v33 = 1;
                    char v34 = 0;
                  }
                  while ((v35 & 1) != 0);
                  if (v56)
                  {
                    uint64_t v36 = v60;
                    uint64_t v37 = v61;
                    uint64_t v38 = v57;
                    uint64_t v39 = v54;
                    do
                    {
                      *v38++ = fmodf(*v36, *v37);
                      uint64_t v37 = (float *)((char *)v37 + v19);
                      uint64_t v36 = (float *)((char *)v36 + v20);
                      --v39;
                    }
                    while (v39);
                  }
                  ++v32;
                  v57 += v56;
                }
                while (v32 != v55);
              }
              uint64_t v28 = v52 + 1;
              v53 += (int)(v51 * v56);
            }
            while (v52 + 1 != v50);
          }
          uint64_t v24 = v48 + 1;
          uint64_t v49 = (float *)((char *)v49 + v45);
          float result = (float *)v66;
        }
        while (v48 + 1 != v46);
      }
      uint64_t v13 = v43 + 1;
      uint64_t v44 = (float *)((char *)v44 + v40);
    }
    while (v43 + 1 != v41);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  float result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        float result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            float result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            char v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                float result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    float result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    unsigned int v42 = v54;
                    uint64_t v41 = v55;
                    float result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      if (*v42 >= *v41) {
                        float v44 = 0.0;
                      }
                      else {
                        float v44 = 1.0;
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      unsigned int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_or_equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  float result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        float result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            float result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            char v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                float result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    float result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    unsigned int v42 = v54;
                    uint64_t v41 = v55;
                    float result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      if (*v42 > *v41) {
                        float v44 = 0.0;
                      }
                      else {
                        float v44 = 1.0;
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      unsigned int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  float result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        float result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            float result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            char v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                float result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    float result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    unsigned int v42 = v54;
                    uint64_t v41 = v55;
                    float result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      if (*v42 <= *v41) {
                        float v44 = 0.0;
                      }
                      else {
                        float v44 = 1.0;
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      unsigned int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_or_equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  float result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        float result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            float result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            char v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                float result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    float result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    unsigned int v42 = v54;
                    uint64_t v41 = v55;
                    float result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      if (*v42 < *v41) {
                        float v44 = 0.0;
                      }
                      else {
                        float v44 = 1.0;
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      unsigned int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

void Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::if_op>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v52[0] = a3;
  v52[1] = a5;
  void v52[2] = a7;
  v51[0] = a4;
  v51[1] = a6;
  v51[2] = a8;
  unint64_t v9 = *a2;
  unsigned int v50 = a2[1];
  unsigned int v48 = a2[2];
  unsigned int v43 = a2[3];
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, sizeof(v57));
  memset(v56, 0, sizeof(v56));
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v10 = (int *)v51[v8];
    int v11 = *v10;
    int v12 = v10[1];
    v59[v8 + 21] = v12 * *v10;
    int v13 = v10[2];
    int v14 = v10[3];
    int v15 = v13 * v12 * v11;
    v59[v8 + 18] = v15;
    v59[v8 + 15] = v14 * v15;
    v59[v8 + 12] = v10[4] != 1;
    v59[v8 + 9] = v14 != 1;
    v59[v8 + 6] = v13 != 1;
    v59[v8 + 3] = v12 != 1;
    v59[v8++] = v11 != 1;
  }
  while (v8 != 3);
  uint64_t v42 = a2[4];
  if (v42)
  {
    uint64_t v16 = 0;
    int v17 = v50;
    int v18 = v50 * v9 * v48;
    int v19 = v43;
    int v20 = v18 * v43;
    if (v9 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v9;
    }
    if (v50 <= 1) {
      int v17 = 1;
    }
    uint64_t v22 = v17;
    if (v48 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v48;
    }
    if (v43 <= 1) {
      int v19 = 1;
    }
    uint64_t v24 = 4 * v59[2];
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v46 = 4 * v18;
    uint64_t v47 = v19;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
        v58[i] = *(void *)(v52[i] + 24) + 4 * v16 * (int)v59[i + 15] * (int)v59[i + 12];
      uint64_t v44 = v16;
      if (v43)
      {
        uint64_t v28 = 0;
        uint64_t v49 = a1;
        do
        {
          for (uint64_t j = 0; j != 3; ++j)
            v57[j] = v58[j] + 4 * v28 * (int)v59[j + 18] * (int)v59[j + 9];
          if (v48)
          {
            uint64_t v30 = 0;
            uint64_t v31 = v49;
            do
            {
              for (uint64_t k = 0; k != 3; ++k)
                v56[k] = v57[k] + 4 * v30 * (int)v59[k + 21] * (int)v59[k + 6];
              if (v50)
              {
                uint64_t v33 = 0;
                char v34 = v31;
                do
                {
                  for (uint64_t m = 0; m != 3; ++m)
                    (&v53)[m] = (float *)(v56[m] + 4 * v33 * *(int *)v51[m] * (int)v59[m + 3]);
                  if (v9)
                  {
                    uint64_t v37 = v53;
                    uint64_t v36 = v54;
                    uint64_t v38 = v34;
                    uint64_t v39 = v21;
                    uint64_t v40 = v55;
                    do
                    {
                      if (*v37 == 0.0) {
                        uint64_t v41 = v40;
                      }
                      else {
                        uint64_t v41 = v36;
                      }
                      *v38++ = *v41;
                      uint64_t v40 = (_DWORD *)((char *)v40 + v24);
                      uint64_t v36 = (_DWORD *)((char *)v36 + v25);
                      uint64_t v37 = (float *)((char *)v37 + v26);
                      --v39;
                    }
                    while (v39);
                  }
                  ++v33;
                  v34 += v9;
                }
                while (v33 != v22);
              }
              ++v30;
              v31 += (int)(v50 * v9);
            }
            while (v30 != v23);
          }
          ++v28;
          uint64_t v49 = (_DWORD *)((char *)v49 + v46);
        }
        while (v28 != v47);
      }
      uint64_t v16 = v44 + 1;
      a1 += v20;
    }
    while (v44 + 1 != v42);
  }
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::and_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  float result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 10] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 8] = v16;
    v60[v6 + 6] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 4] = v11[4] != 1;
    v60[v6 + 2] = v15 != 1;
    v60[v6] = v14 != 1;
    v59[v6 + 2] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v49 = v19;
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        float result = (float *)(int)v60[v27 + 4];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 6] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            float result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 8] * (int)v60[v31 + 2];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            char v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                float result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 10] * (int)v60[v35];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    float result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v59[v39 + 2]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    uint64_t v42 = v54;
                    uint64_t v41 = v55;
                    float result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      if (*v42 == 0.0)
                      {
                        float v44 = 0.0;
                      }
                      else if (*v41 == 0.0)
                      {
                        float v44 = 0.0;
                      }
                      else
                      {
                        float v44 = 1.0;
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      uint64_t v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::or_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  float result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 10] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 8] = v16;
    v60[v6 + 6] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 4] = v11[4] != 1;
    v60[v6 + 2] = v15 != 1;
    v60[v6] = v14 != 1;
    v59[v6 + 2] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v49 = v19;
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        float result = (float *)(int)v60[v27 + 4];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 6] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            float result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 8] * (int)v60[v31 + 2];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            char v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                float result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 10] * (int)v60[v35];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    float result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v59[v39 + 2]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    uint64_t v42 = v54;
                    uint64_t v41 = v55;
                    float result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      float v44 = 1.0;
                      if (*v42 == 0.0)
                      {
                        if (*v41 == 0.0) {
                          float v44 = 0.0;
                        }
                        else {
                          float v44 = 1.0;
                        }
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      uint64_t v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::xor_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  unint64_t v7 = *a2;
  unsigned int v50 = a2[1];
  unsigned int v48 = a2[2];
  unsigned int v44 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  char v8 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  uint64_t result = (uint64_t)v59;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  do
  {
    int v10 = (int *)v51[v6];
    int v11 = *v10;
    int v12 = v10[1];
    v59[v6 + 12] = v12 * *v10;
    int v13 = v10[2];
    int v14 = v10[3];
    int v15 = v13 * v12 * v11;
    v59[v6 + 10] = v15;
    v59[v6 + 8] = v14 * v15;
    LOBYTE(v15) = v8;
    v59[v6 + 6] = v10[4] != 1;
    v59[v6 + 4] = v14 != 1;
    v59[v6 + 2] = v13 != 1;
    v59[v6] = v12 != 1;
    v58[v6] = v11 != 1;
    uint64_t v6 = 1;
    char v8 = 0;
  }
  while ((v15 & 1) != 0);
  uint64_t v43 = a2[4];
  if (v43)
  {
    uint64_t v16 = 0;
    int v17 = v50 * v7 * v48;
    int v18 = v44;
    if (v7 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v7;
    }
    if (v50 <= 1) {
      int v20 = 1;
    }
    else {
      int v20 = v50;
    }
    uint64_t v21 = v20;
    if (v48 <= 1) {
      int v22 = 1;
    }
    else {
      int v22 = v48;
    }
    uint64_t v23 = v22;
    if (v44 <= 1) {
      int v18 = 1;
    }
    uint64_t v47 = v18;
    uint64_t v24 = 4 * v58[1];
    uint64_t v25 = 4 * v58[0];
    do
    {
      uint64_t v26 = 0;
      char v27 = 1;
      do
      {
        char v28 = v27;
        uint64_t result = (int)v59[v26 + 6];
        v57[v26] = *(void *)(v52[v26] + 24) + 4 * v16 * (int)v59[v26 + 8] * result;
        uint64_t v26 = 1;
        char v27 = 0;
      }
      while ((v28 & 1) != 0);
      uint64_t v45 = v16;
      if (v44)
      {
        uint64_t v29 = 0;
        uint64_t v49 = a1;
        do
        {
          uint64_t v30 = 0;
          uint64_t v31 = 1;
          do
          {
            uint64_t result = v31;
            v56[v30] = v57[v30] + 4 * v29 * (int)v59[v30 + 10] * (int)v59[v30 + 4];
            uint64_t v30 = 1;
            uint64_t v31 = 0;
          }
          while ((result & 1) != 0);
          if (v48)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v49;
            do
            {
              uint64_t v34 = 0;
              uint64_t v35 = 1;
              do
              {
                uint64_t result = v35;
                v55[v34] = v56[v34] + 4 * v32 * (int)v59[v34 + 12] * (int)v59[v34 + 2];
                uint64_t v34 = 1;
                uint64_t v35 = 0;
              }
              while ((result & 1) != 0);
              if (v50)
              {
                uint64_t v36 = 0;
                uint64_t v37 = v33;
                do
                {
                  uint64_t v38 = 0;
                  uint64_t v39 = 1;
                  do
                  {
                    uint64_t result = v39;
                    (&v53)[v38] = (float *)(v55[v38] + 4 * v36 * *(int *)v51[v38] * (int)v59[v38]);
                    uint64_t v38 = 1;
                    uint64_t v39 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v7)
                  {
                    uint64_t v41 = v53;
                    uint64_t v40 = v54;
                    uint64_t result = (uint64_t)v37;
                    uint64_t v42 = v19;
                    do
                    {
                      *(float *)uint64_t result = (float)((*v41 != 0.0) ^ (*v40 != 0.0));
                      result += 4;
                      uint64_t v40 = (float *)((char *)v40 + v24);
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      --v42;
                    }
                    while (v42);
                  }
                  ++v36;
                  v37 += v7;
                }
                while (v36 != v21);
              }
              ++v32;
              v33 += (int)(v50 * v7);
            }
            while (v32 != v23);
          }
          ++v29;
          v49 += v17;
        }
        while (v29 != v47);
      }
      uint64_t v16 = v45 + 1;
      a1 += (int)(v17 * v44);
    }
    while (v45 + 1 != v43);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  uint64_t result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    uint64_t v42 = v54;
                    uint64_t v41 = v55;
                    uint64_t result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      if (*v42 == *v41) {
                        float v44 = 1.0;
                      }
                      else {
                        float v44 = 0.0;
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      uint64_t v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

float *Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::not_equal_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  uint64_t result = (float *)v60;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (float *)(int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * (void)result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        unsigned int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = (float *)v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = (float *)v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = (float *)v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    uint64_t v42 = v54;
                    uint64_t v41 = v55;
                    uint64_t result = v38;
                    uint64_t v43 = v20;
                    do
                    {
                      if (*v42 == *v41) {
                        float v44 = 0.0;
                      }
                      else {
                        float v44 = 1.0;
                      }
                      *result++ = v44;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      uint64_t v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::div_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v49 = a2[2];
  unsigned int v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  char v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  uint64_t result = (uint64_t)v59;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  do
  {
    int v11 = (int *)v51[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v44 = a2[4];
  if (v44)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v49;
    int v19 = v45;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v49 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v49;
    }
    uint64_t v24 = v23;
    if (v45 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v58[1];
    uint64_t v26 = 4 * v58[0];
    uint64_t v48 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (int)v59[v27 + 6];
        v57[v27] = *(void *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v46 = v17;
      if (v45)
      {
        uint64_t v30 = 0;
        unsigned int v50 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v50;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    uint64_t v42 = v53;
                    uint64_t v41 = v54;
                    uint64_t result = (uint64_t)v38;
                    uint64_t v43 = v20;
                    do
                    {
                      *(float *)uint64_t result = *v42 / *v41;
                      result += 4;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      uint64_t v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      uint64_t v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::floordiv_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v49 = a2[2];
  unsigned int v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  char v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  uint64_t result = (uint64_t)v59;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  do
  {
    int v11 = (int *)v51[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v44 = a2[4];
  if (v44)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v49;
    int v19 = v45;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v49 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v49;
    }
    uint64_t v24 = v23;
    if (v45 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v58[1];
    uint64_t v26 = 4 * v58[0];
    uint64_t v48 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (int)v59[v27 + 6];
        v57[v27] = *(void *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v46 = v17;
      if (v45)
      {
        uint64_t v30 = 0;
        unsigned int v50 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v50;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    uint64_t v42 = v53;
                    uint64_t v41 = v54;
                    uint64_t result = (uint64_t)v38;
                    uint64_t v43 = v20;
                    do
                    {
                      *(float *)uint64_t result = floorf(*v42 / *v41);
                      result += 4;
                      uint64_t v41 = (float *)((char *)v41 + v25);
                      uint64_t v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      uint64_t v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

void Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*(float *)(*a1 + 288) != 1.0) {
    vDSP_vsmul(*(const float **)(a1[1] + 24), 1, (const float *)(v2 + 288), *(float **)(a1[1] + 24), 1, *((int *)a1 + 6));
  }
  if (*(float *)(v2 + 292) != 0.0)
  {
    uint64_t v3 = *(float **)(a1[1] + 24);
    vDSP_Length v4 = *((int *)a1 + 6);
    vDSP_vsadd(v3, 1, (const float *)(v2 + 292), v3, 1, v4);
  }
}

float32x4_t *Espresso::compute_sign_fp32(float32x4_t *this, float *a2, float *a3, const int *a4)
{
  *(float *)&unint64_t v4 = *a3;
  if (*(_DWORD *)a3)
  {
    if (v4 >= 0x10)
    {
      unint64_t v5 = 16;
      do
      {
        float32x4_t v6 = *(float32x4_t *)(a2 + 8);
        float32x4_t v7 = *(float32x4_t *)(a2 + 12);
        float32x4_t v8 = *(float32x4_t *)a2;
        float32x4_t v9 = *(float32x4_t *)(a2 + 4);
        a2 += 16;
        this[2] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v6), vcgtzq_f32(v6)));
        this[3] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v7), vcgtzq_f32(v7)));
        *this = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v8), vcgtzq_f32(v8)));
        this[1] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v9), vcgtzq_f32(v9)));
        this += 4;
        v5 += 16;
        unint64_t v4 = *(int *)a3;
      }
      while (v5 <= v4);
    }
    unint64_t v10 = v4 & 0xF;
    if (v10 > 7)
    {
      float32x4_t v12 = *(float32x4_t *)a2;
      float32x4_t v11 = *(float32x4_t *)(a2 + 4);
      a2 += 8;
      *this = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v12), vcgtzq_f32(v12)));
      this[1] = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v11), vcgtzq_f32(v11)));
      this += 2;
      v10 -= 8;
    }
    if (v10 >= 4)
    {
      float32x4_t v13 = *(float32x4_t *)a2;
      a2 += 4;
      *this++ = vcvtq_f32_s32(vsubq_s32(vcltzq_f32(v13), vcgtzq_f32(v13)));
      v10 -= 4;
    }
    for (; v10; --v10)
    {
      float v14 = *a2++;
      BOOL v15 = v14 <= 0.0;
      if (v14 >= 0.0) {
        float v16 = 0.0;
      }
      else {
        float v16 = -1.0;
      }
      if (!v15) {
        float v16 = 1.0;
      }
      this->f32[0] = v16;
      this = (float32x4_t *)((char *)this + 4);
    }
  }
  return this;
}

void Espresso::elementwise_kernel_cpu::~elementwise_kernel_cpu(Espresso::elementwise_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::split_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  float32x4_t v6 = a4[1];
  if (v6 == *a4)
  {
    uint64_t v74 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v74, *a4);
    float32x4_t v6 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)&v64, *v6);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v68, (const Espresso::layer_shape *)&v64, 0);
  if (__p)
  {
    uint64_t v67 = __p;
    operator delete(__p);
  }
  int v8 = *(unsigned __int8 *)(a1 + 288);
  unint64_t v9 = v73;
  if (*(unsigned char *)(a1 + 288) || v73 <= 3)
  {
    if (v73)
    {
      uint64_t v13 = *(&v68 + v73 - 1);
      switch(v73)
      {
        case 1:
          unint64_t v9 = 1;
          uint64_t v57 = 1;
          break;
        case 2:
          uint64_t v57 = v68;
          unint64_t v9 = 2;
          break;
        case 3:
          uint64_t v57 = v69 * (uint64_t)v68;
          unint64_t v9 = 3;
          break;
        case 4:
          uint64_t v57 = v69 * (uint64_t)v68 * v70;
          unint64_t v9 = 4;
          break;
        case 5:
          uint64_t v57 = v69 * (uint64_t)v68 * v70 * v71;
          unint64_t v9 = 5;
          break;
        default:
          goto LABEL_15;
      }
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v13 = 0;
LABEL_15:
      uint64_t v57 = 0;
    }
    if (v8) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v73 == 5)
    {
      int v11 = v71;
      int v10 = v72;
      uint64_t v12 = v70;
      goto LABEL_19;
    }
    if (v73 == 4)
    {
      int v11 = v70;
      int v10 = v71;
      uint64_t v12 = v69;
LABEL_19:
      uint64_t v13 = v11 * (uint64_t)v10 * v12;
      goto LABEL_43;
    }
    uint64_t v57 = 0;
    uint64_t v13 = 0;
    if ((v73 & 0xFFFFFFFFFFFFFFFELL) == 4) {
      goto LABEL_43;
    }
  }
  if (v9 <= 3)
  {
LABEL_22:
    float v14 = *a3;
    if (a3[1] == *a3) {
      goto LABEL_74;
    }
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = v74;
    uint64_t v18 = 4 * v13;
    uint64_t v56 = a1;
    while (1)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v62, &v14[2 * v16]);
      Espresso::abstract_blob_container::shape((char *)&v64, (*a3)[2 * v16]);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v58, (const Espresso::layer_shape *)&v64, 0);
      if (__p)
      {
        uint64_t v67 = __p;
        operator delete(__p);
      }
      if (!*(unsigned char *)(a1 + 288) && v61 > 3) {
        break;
      }
      if (!v61) {
        goto LABEL_33;
      }
      uint64_t v22 = *((int *)&v58 + (int)v61 - 1);
LABEL_36:
      if (v57)
      {
        uint64_t v23 = 0;
        size_t v24 = 4 * v22;
        uint64_t v25 = v62;
        uint64_t v26 = v22 * v15;
        uint64_t v27 = v57;
        do
        {
          memcpy((void *)(*(void *)(v25 + 24) + v23), (const void *)(*(void *)(v17 + 24) + v26), v24);
          v23 += v24;
          v26 += v18;
          --v27;
        }
        while (v27);
      }
      if (v63) {
        nitro::nitro_function::nitro_function(v63);
      }
      ++v16;
      float v14 = *a3;
      v15 += 4;
      a1 = v56;
      if (v16 >= ((char *)a3[1] - (char *)*a3) >> 4) {
        goto LABEL_74;
      }
    }
    if (v61 == 5)
    {
      int v20 = HIDWORD(v59);
      int v19 = v60;
      uint64_t v21 = (int)v59;
      goto LABEL_35;
    }
    if (v61 == 4)
    {
      int v20 = (int)v59;
      int v19 = HIDWORD(v59);
      uint64_t v21 = SHIDWORD(v58);
LABEL_35:
      uint64_t v22 = v20 * (uint64_t)v19 * v21;
      goto LABEL_36;
    }
LABEL_33:
    uint64_t v22 = 0;
    goto LABEL_36;
  }
LABEL_43:
  uint64_t v28 = v74;
  int v29 = *(_DWORD *)(v74 + 12) * *(_DWORD *)(v74 + 8);
  if (*(_DWORD *)(a1 + 296))
  {
    uint64_t v30 = a3[1];
    if (v30 == *a3)
    {
      uint64_t v64 = 0;
      int v65 = 0;
      uint64_t v31 = v30;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, *a3);
      uint64_t v30 = *a3;
      uint64_t v31 = a3[1];
    }
    if ((unint64_t)((char *)v31 - (char *)v30) <= 0x10)
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v58, v30 + 2);
    }
    int v38 = *(_DWORD *)(a1 + 292);
    if (v38 <= 0) {
      int v38 = *(_DWORD *)(v28 + 16) / 2;
    }
    if (*(int *)(v28 + 20) >= 1)
    {
      uint64_t v39 = 0;
      int v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = v13;
      uint64_t v43 = v64;
      uint64_t v44 = v58;
      uint64_t v57 = 4 * v38 * v29;
      uint64_t v45 = 4 * v42;
      do
      {
        uint64_t v46 = (char *)(*(void *)(v28 + 24) + v39);
        uint64_t v47 = (void *)(*(void *)(v44 + 24) + 4 * *(_DWORD *)(v44 + 16) * v40);
        memcpy((void *)(*(void *)(v43 + 24) + 4 * *(_DWORD *)(v43 + 16) * v40), v46, 4 * *(_DWORD *)(v43 + 16) * v29);
        memcpy(v47, &v46[v57], 4 * *(_DWORD *)(v44 + 16) * v29);
        ++v41;
        v40 += v29;
        v39 += v45;
      }
      while (v41 < *(int *)(v28 + 20));
    }
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    if (v65) {
      nitro::nitro_function::nitro_function(v65);
    }
  }
  else
  {
    uint64_t v32 = *a3;
    uint64_t v33 = a3[1];
    if (*(_DWORD *)(a1 + 284) == 3)
    {
      if (v33 != v32)
      {
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        uint64_t v36 = 0;
        do
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, &v32[v34]);
          uint64_t v37 = *(int *)(v64 + 20);
          memcpy(*(void **)(v64 + 24), (const void *)(*(void *)(v28 + 24) + 4 * v36 * v13), 4 * v13 * v37);
          if (v65) {
            nitro::nitro_function::nitro_function(v65);
          }
          v36 += v37;
          ++v35;
          uint64_t v32 = *a3;
          v34 += 2;
        }
        while (v35 < ((char *)a3[1] - (char *)*a3) >> 4);
      }
    }
    else if (v33 != v32)
    {
      unint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v57 = 4 * v29;
      uint64_t v50 = 4 * v13;
      do
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, &v32[2 * v48]);
        uint64_t v51 = v64;
        if (*(int *)(v28 + 20) >= 1)
        {
          int v52 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = v57 * v49;
          do
          {
            memcpy((void *)(*(void *)(v51 + 24) + 4 * v52 * *(_DWORD *)(v51 + 16)), (const void *)(*(void *)(v28 + 24) + v54), 4 * *(_DWORD *)(v51 + 16) * v29);
            ++v53;
            v52 += v29;
            v54 += v50;
          }
          while (v53 < *(int *)(v28 + 20));
        }
        uint64_t v55 = *(int *)(v51 + 16);
        if (v65) {
          nitro::nitro_function::nitro_function(v65);
        }
        v49 += v55;
        ++v48;
        uint64_t v32 = *a3;
      }
      while (v48 < ((char *)a3[1] - (char *)*a3) >> 4);
    }
  }
LABEL_74:
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
}

void sub_192B4AAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 96);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::split_kernel_cpu::~split_kernel_cpu(Espresso::split_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::general_padding_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v453 = 0;
    v454 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v453, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v451 = 0;
    v452 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v451, *(uint64_t **)a3);
  }
  float32x4_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, *(void *)(a4 + 8), 0);
  if (v7)
  {
    uint64_t v9 = *((void *)v7 + 22);
    int v8 = (std::__shared_weak_count *)*((void *)v7 + 23);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
  }
  int v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
  if (v10)
  {
    int v11 = (std::__shared_weak_count *)*((void *)v10 + 23);
    uint64_t v358 = *((void *)v10 + 22);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v358 = 0;
  }
  uint64_t v362 = v453;
  if (v453)
  {
    uint64_t v344 = v451;
    if (v451)
    {
      uint64_t v12 = v454;
      if (v454) {
        atomic_fetch_add_explicit(&v454->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v452;
      if (v452) {
        atomic_fetch_add_explicit(&v452->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = *(_DWORD *)(a1 + 284);
      v280 = v11;
      v282 = v8;
      v274 = v13;
      v275 = v12;
      switch(*(_WORD *)(a1 + 282))
      {
        case 0:
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v15 = v362;
          if (*(int *)(v362 + 20) >= 1)
          {
            uint64_t v328 = 0;
            uint64_t v334 = 0;
            int v16 = *(_DWORD *)(v362 + 12);
            uint64_t v17 = *(int *)(v362 + 8);
            uint64_t v18 = *(__int16 *)(a1 + 288);
            uint64_t v19 = *(unsigned int *)(v344 + 8);
            uint64_t v20 = (v19 - (v17 + v18));
            uint64_t v443 = *(unsigned int *)(v344 + 12);
            uint64_t v347 = (int)v443 * (int)v19;
            uint64_t v340 = v16 * (int)v17;
            size_t v409 = 4 * v17;
            uint64_t v304 = *(int *)(v344 + 16) * v347;
            uint64_t v312 = 4 * v304;
            uint64_t v296 = *(int *)(v362 + 16) * v340;
            uint64_t v367 = 4 * v347;
            uint64_t v21 = (int)v19;
            uint64_t v22 = 4 * (int)v19;
            int v417 = *(_DWORD *)(v362 + 8);
            uint64_t v320 = 4 * v18 + 4 * v17;
            uint64_t v23 = 4 * v19;
            do
            {
              if (*(int *)(v15 + 16) >= 1)
              {
                uint64_t v379 = v320;
                uint64_t v383 = 0;
                uint64_t v373 = v334;
                do
                {
                  if ((int)v443 >= 1)
                  {
                    uint64_t v24 = 0;
                    uint64_t v433 = *(void *)(v362 + 24) + 4 * v328 * v296 + 4 * v383 * v340;
                    uint64_t v25 = *(void *)(v344 + 24);
                    uint64_t v425 = v25 + 4 * v328 * v304 + 4 * v383 * v347;
                    uint64_t v26 = (_DWORD *)(v25 + v373);
                    uint64_t v27 = (_DWORD *)(v25 + v379);
                    do
                    {
                      int v28 = v24 - *(__int16 *)(a1 + 292);
                      int v29 = *(unsigned __int16 *)(a1 + 282);
                      int v30 = v16 - 1;
                      if (v28 < v16) {
                        int v30 = v24 - *(__int16 *)(a1 + 292);
                      }
                      if (v28 < 0) {
                        int v30 = 0;
                      }
                      if (v29 == 1) {
                        int v28 = v30;
                      }
                      if (v28 >= v16 || v28 <= -1) {
                        int v32 = -1;
                      }
                      else {
                        int v32 = v28;
                      }
                      if (!*(_WORD *)(a1 + 282)) {
                        int v28 = v32;
                      }
                      if ((v29 & 0xFFFE) == 2)
                      {
                        _ZF = v29 == 3;
                        BOOL v34 = v29 == 3;
                        int v35 = 2 * v16;
                        int v36 = 2 * v16 - 2;
                        if (_ZF) {
                          int v36 = 2 * v16 - 1;
                        }
                        else {
                          int v35 = 2 * v16 - 2;
                        }
                        if (v28 >= 0) {
                          BOOL v34 = 0;
                        }
                        int v37 = v28 + v34;
                        if (v37 < 0) {
                          int v37 = -v37;
                        }
                        int v28 = v37 % v35;
                        if (v36 - v28 < v28) {
                          int v28 = v36 - v28;
                        }
                      }
                      if (v28 == -1)
                      {
                        if ((int)v21 >= 1)
                        {
                          unint64_t v42 = 0;
                          do
                          {
                            v26[v42 / 4] = v14;
                            v42 += 4;
                          }
                          while (v23 != v42);
                        }
                      }
                      else
                      {
                        int v38 = v26;
                        uint64_t v39 = v18;
                        if ((int)v18 >= 1)
                        {
                          do
                          {
                            *v38++ = v14;
                            --v39;
                          }
                          while (v39);
                        }
                        memcpy((void *)(v425 + 4 * v24 * v21 + 4 * v18), (const void *)(v433 + 4 * v28 * v417), v409);
                        int v40 = v27;
                        uint64_t v41 = v20;
                        if ((int)v20 >= 1)
                        {
                          do
                          {
                            *v40++ = v14;
                            --v41;
                          }
                          while (v41);
                        }
                      }
                      ++v24;
                      uint64_t v26 = (_DWORD *)((char *)v26 + v22);
                      uint64_t v27 = (_DWORD *)((char *)v27 + v22);
                    }
                    while (v24 != v443);
                  }
                  uint64_t v15 = v362;
                  v373 += v367;
                  v379 += v367;
                  ++v383;
                }
                while (v383 < *(int *)(v362 + 16));
              }
              ++v328;
              v334 += v312;
              v320 += v312;
            }
            while (v328 < *(int *)(v15 + 20));
          }
          goto LABEL_462;
        case 1:
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v247 = v362;
          if (*(int *)(v362 + 20) >= 1)
          {
            uint64_t v319 = 0;
            uint64_t v327 = 0;
            int v248 = *(_DWORD *)(v362 + 12);
            uint64_t v249 = *(int *)(v362 + 8);
            uint64_t v250 = *(__int16 *)(a1 + 288);
            uint64_t v251 = *(unsigned int *)(v344 + 8);
            uint64_t v408 = (v251 - (v249 + v250));
            uint64_t v450 = *(unsigned int *)(v344 + 12);
            uint64_t v339 = (int)v450 * (int)v251;
            uint64_t v333 = v248 * (int)v249;
            size_t v402 = 4 * v249;
            uint64_t v295 = *(int *)(v344 + 16) * v339;
            uint64_t v303 = 4 * v295;
            uint64_t v289 = *(int *)(v362 + 16) * v333;
            uint64_t v252 = v249 - 1;
            uint64_t v357 = 4 * v339;
            uint64_t v442 = (int)v251;
            uint64_t v253 = 4 * (int)v251;
            int v416 = *(_DWORD *)(v362 + 8);
            uint64_t v311 = 4 * v250 + 4 * v249;
            uint64_t v254 = 4 * v251;
            do
            {
              if (*(int *)(v247 + 16) >= 1)
              {
                uint64_t v372 = v311;
                uint64_t v378 = 0;
                uint64_t v361 = v327;
                do
                {
                  if ((int)v450 >= 1)
                  {
                    uint64_t v255 = 0;
                    uint64_t v432 = *(void *)(v362 + 24) + 4 * v319 * v289 + 4 * v378 * v333;
                    uint64_t v256 = *(void *)(v344 + 24);
                    uint64_t v424 = v256 + 4 * v319 * v295 + 4 * v378 * v339;
                    uint64_t v257 = (_DWORD *)(v256 + v361);
                    std::string v258 = (_DWORD *)(v256 + v372);
                    do
                    {
                      int v259 = v255 - *(__int16 *)(a1 + 292);
                      int v260 = *(unsigned __int16 *)(a1 + 282);
                      int v261 = v248 - 1;
                      if (v259 < v248) {
                        int v261 = v255 - *(__int16 *)(a1 + 292);
                      }
                      if (v259 < 0) {
                        int v261 = 0;
                      }
                      if (v260 == 1) {
                        int v259 = v261;
                      }
                      if (v259 >= v248 || v259 <= -1) {
                        int v263 = -1;
                      }
                      else {
                        int v263 = v259;
                      }
                      if (!*(_WORD *)(a1 + 282)) {
                        int v259 = v263;
                      }
                      if ((v260 & 0xFFFE) == 2)
                      {
                        _ZF = v260 == 3;
                        BOOL v264 = v260 == 3;
                        int v265 = 2 * v248;
                        int v266 = 2 * v248 - 2;
                        if (_ZF) {
                          int v266 = 2 * v248 - 1;
                        }
                        else {
                          int v265 = 2 * v248 - 2;
                        }
                        if (v259 >= 0) {
                          BOOL v264 = 0;
                        }
                        int v267 = v259 + v264;
                        if (v267 < 0) {
                          int v267 = -v267;
                        }
                        int v259 = v267 % v265;
                        if (v266 - v259 < v259) {
                          int v259 = v266 - v259;
                        }
                      }
                      if (v259 == -1)
                      {
                        if ((int)v442 >= 1)
                        {
                          unint64_t v273 = 0;
                          do
                          {
                            v257[v273 / 4] = v14;
                            v273 += 4;
                          }
                          while (v254 != v273);
                        }
                      }
                      else
                      {
                        uint64_t v268 = (_DWORD *)(v432 + 4 * v259 * v416);
                        v269 = v257;
                        uint64_t v270 = v250;
                        if ((int)v250 >= 1)
                        {
                          do
                          {
                            *v269++ = *v268;
                            --v270;
                          }
                          while (v270);
                        }
                        memcpy((void *)(v424 + 4 * v255 * v442 + 4 * v250), v268, v402);
                        v271 = v258;
                        uint64_t v272 = v408;
                        if ((int)v408 >= 1)
                        {
                          do
                          {
                            *v271++ = v268[v252];
                            --v272;
                          }
                          while (v272);
                        }
                      }
                      ++v255;
                      uint64_t v257 = (_DWORD *)((char *)v257 + v253);
                      std::string v258 = (_DWORD *)((char *)v258 + v253);
                    }
                    while (v255 != v450);
                  }
                  uint64_t v247 = v362;
                  v361 += v357;
                  v372 += v357;
                  ++v378;
                }
                while (v378 < *(int *)(v362 + 16));
              }
              ++v319;
              v327 += v303;
              v311 += v303;
            }
            while (v319 < *(int *)(v247 + 20));
          }
          goto LABEL_462;
        case 2:
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v180 = v362;
          if (*(int *)(v362 + 20) >= 1)
          {
            uint64_t v317 = 0;
            uint64_t v325 = 0;
            uint64_t v181 = *(unsigned int *)(v362 + 8);
            int v182 = *(_DWORD *)(v362 + 12);
            uint64_t v183 = *(__int16 *)(a1 + 288);
            uint64_t v184 = *(unsigned int *)(v344 + 8);
            uint64_t v406 = (v184 - (v181 + v183));
            uint64_t v448 = *(unsigned int *)(v344 + 12);
            uint64_t v332 = v182 * (int)v181;
            uint64_t v338 = (int)v448 * (int)v184;
            uint64_t v400 = *(__int16 *)(a1 + 288);
            uint64_t v287 = *(int *)(v362 + 16) * v332;
            uint64_t v293 = *(int *)(v344 + 16) * v338;
            uint64_t v301 = 4 * v293;
            int v440 = v182;
            int v430 = v182 - 1;
            uint64_t v355 = 4 * v338;
            int v387 = 2 * v182 - 2;
            int v391 = 2 * v182;
            int v382 = 2 * v182 - 1;
            int v185 = 2 * v181 - 2;
            uint64_t v435 = (int)v184;
            uint64_t v186 = 4 * (int)v184;
            uint64_t __nb = 4 * (int)v181;
            uint64_t v309 = __nb + 4 * v400;
            uint64_t v187 = 4 * v184;
            do
            {
              if (*(int *)(v180 + 16) >= 1)
              {
                uint64_t v371 = v309;
                uint64_t v377 = 0;
                uint64_t v359 = v325;
                do
                {
                  if ((int)v448 >= 1)
                  {
                    uint64_t v188 = 0;
                    uint64_t v422 = *(void *)(v362 + 24) + 4 * v317 * v287 + 4 * v377 * v332;
                    uint64_t v189 = *(void *)(v344 + 24);
                    uint64_t v414 = v189 + 4 * v317 * v293 + 4 * v377 * v338;
                    uint64_t v190 = (_DWORD *)(v189 + v359);
                    int v191 = (_DWORD *)(v189 + v371);
                    do
                    {
                      int v192 = v188 - *(__int16 *)(a1 + 292);
                      int v193 = *(unsigned __int16 *)(a1 + 282);
                      int v194 = v430;
                      if (v192 < v440) {
                        int v194 = v188 - *(__int16 *)(a1 + 292);
                      }
                      if (v192 < 0) {
                        int v194 = 0;
                      }
                      if (v193 == 1) {
                        int v192 = v194;
                      }
                      if (v192 >= v440 || v192 <= -1) {
                        int v196 = -1;
                      }
                      else {
                        int v196 = v192;
                      }
                      if (!*(_WORD *)(a1 + 282)) {
                        int v192 = v196;
                      }
                      if ((v193 & 0xFFFE) == 2)
                      {
                        _ZF = v193 == 3;
                        BOOL v197 = v193 == 3;
                        int v198 = v391;
                        int v199 = v387;
                        if (_ZF) {
                          int v199 = v382;
                        }
                        else {
                          int v198 = v387;
                        }
                        if (v192 >= 0) {
                          BOOL v197 = 0;
                        }
                        int v200 = v192 + v197;
                        if (v200 < 0) {
                          int v200 = -v200;
                        }
                        int v192 = v200 % v198;
                        if (v199 - v192 < v192) {
                          int v192 = v199 - v192;
                        }
                      }
                      if (v192 == -1)
                      {
                        if ((int)v435 >= 1)
                        {
                          unint64_t v211 = 0;
                          do
                          {
                            v190[v211 / 4] = v14;
                            v211 += 4;
                          }
                          while (v187 != v211);
                        }
                      }
                      else
                      {
                        uint64_t v201 = v181;
                        float v202 = (_DWORD *)(v422 + 4 * v192 * (int)v181);
                        if ((int)v183 >= 1)
                        {
                          uint64_t v203 = 0;
                          float v204 = v190;
                          do
                          {
                            int v205 = ((int)v183 + (int)v203) % v185;
                            if (v185 - v205 < v205) {
                              int v205 = v185 - v205;
                            }
                            *v204++ = v202[v205];
                            --v203;
                          }
                          while (v183 + v203);
                        }
                        memcpy((void *)(v414 + 4 * v188 * v435 + 4 * v400), v202, __nb);
                        uint64_t v181 = v201;
                        int v206 = v201;
                        v207 = v191;
                        uint64_t v208 = v406;
                        if ((int)v406 >= 1)
                        {
                          do
                          {
                            if (v206 >= 0) {
                              int v209 = v206;
                            }
                            else {
                              int v209 = -v206;
                            }
                            int v210 = v209 % v185;
                            if (v185 - v210 < v210) {
                              int v210 = v185 - v210;
                            }
                            *v207++ = v202[v210];
                            ++v206;
                            --v208;
                          }
                          while (v208);
                        }
                      }
                      ++v188;
                      uint64_t v190 = (_DWORD *)((char *)v190 + v186);
                      int v191 = (_DWORD *)((char *)v191 + v186);
                    }
                    while (v188 != v448);
                  }
                  uint64_t v180 = v362;
                  v359 += v355;
                  v371 += v355;
                  ++v377;
                }
                while (v377 < *(int *)(v362 + 16));
              }
              ++v317;
              v325 += v301;
              v309 += v301;
            }
            while (v317 < *(int *)(v180 + 20));
          }
          goto LABEL_462;
        case 3:
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v212 = v362;
          if (*(int *)(v362 + 20) >= 1)
          {
            uint64_t v302 = 0;
            uint64_t v310 = 0;
            uint64_t v213 = *(unsigned int *)(v362 + 8);
            int v214 = *(_DWORD *)(v362 + 12);
            unsigned int v215 = *(__int16 *)(a1 + 288);
            uint64_t v216 = *(unsigned int *)(v344 + 8);
            uint64_t v407 = v216 - (v213 + v215);
            uint64_t v449 = *(unsigned int *)(v344 + 12);
            uint64_t v326 = (int)v449 * (int)v216;
            uint64_t v318 = v214 * (int)v213;
            int v217 = 2 * v213;
            uint64_t v401 = *(__int16 *)(a1 + 288);
            uint64_t v277 = *(int *)(v362 + 16) * v318;
            uint64_t v279 = *(int *)(v344 + 16) * v326;
            uint64_t v288 = 4 * v279;
            uint64_t v343 = 4 * v326;
            uint64_t v441 = (int)v216;
            uint64_t v218 = 4 * (int)v216;
            int v392 = v215 - 1;
            int v388 = -v215;
            uint64_t v415 = v215;
            uint64_t __nc = 4 * (int)v213;
            uint64_t v294 = __nc + 4 * v401;
            uint64_t v219 = 4 * v216;
            do
            {
              if (*(int *)(v212 + 16) >= 1)
              {
                uint64_t v356 = v294;
                uint64_t v360 = 0;
                uint64_t v351 = v310;
                do
                {
                  if ((int)v449 >= 1)
                  {
                    uint64_t v220 = 0;
                    uint64_t v431 = *(void *)(v362 + 24) + 4 * v302 * v277 + 4 * v360 * v318;
                    uint64_t v221 = *(void *)(v344 + 24);
                    uint64_t v423 = v221 + 4 * v302 * v279 + 4 * v360 * v326;
                    v222 = (_DWORD *)(v221 + v351);
                    unint64_t v223 = (_DWORD *)(v221 + v356);
                    do
                    {
                      int v224 = v220 - *(__int16 *)(a1 + 292);
                      int v225 = *(unsigned __int16 *)(a1 + 282);
                      int v226 = v214 - 1;
                      if (v224 < v214) {
                        int v226 = v220 - *(__int16 *)(a1 + 292);
                      }
                      if (v224 < 0) {
                        int v226 = 0;
                      }
                      if (v225 == 1) {
                        int v224 = v226;
                      }
                      if (v224 >= v214 || v224 <= -1) {
                        int v228 = -1;
                      }
                      else {
                        int v228 = v224;
                      }
                      if (!*(_WORD *)(a1 + 282)) {
                        int v224 = v228;
                      }
                      if ((v225 & 0xFFFE) == 2)
                      {
                        _ZF = v225 == 3;
                        BOOL v229 = v225 == 3;
                        int v230 = 2 * v214;
                        int v231 = 2 * v214 - 2;
                        if (_ZF) {
                          int v231 = 2 * v214 - 1;
                        }
                        else {
                          int v230 = 2 * v214 - 2;
                        }
                        if (v224 >= 0) {
                          BOOL v229 = 0;
                        }
                        int v232 = v224 + v229;
                        if (v232 < 0) {
                          int v232 = -v232;
                        }
                        int v224 = v232 % v230;
                        if (v231 - v224 < v224) {
                          int v224 = v231 - v224;
                        }
                      }
                      if (v224 == -1)
                      {
                        if ((int)v441 >= 1)
                        {
                          unint64_t v246 = 0;
                          do
                          {
                            v222[v246 / 4] = v14;
                            v246 += 4;
                          }
                          while (v219 != v246);
                        }
                      }
                      else
                      {
                        uint64_t v233 = v213;
                        v234 = (_DWORD *)(v431 + 4 * v224 * (int)v213);
                        int v235 = v388;
                        int v236 = v392;
                        signed __int32 v237 = v222;
                        uint64_t v238 = v415;
                        if ((int)v415 >= 1)
                        {
                          do
                          {
                            if (v235 >= -1) {
                              int v239 = v235 + 1;
                            }
                            else {
                              int v239 = v236;
                            }
                            int v240 = v239 % v217;
                            if (v217 + ~v240 < v240) {
                              int v240 = v217 + ~v240;
                            }
                            ++v235;
                            *v237++ = v234[v240];
                            --v236;
                            --v238;
                          }
                          while (v238);
                        }
                        memcpy((void *)(v423 + 4 * v220 * v441 + 4 * v401), v234, __nc);
                        uint64_t v213 = v233;
                        int v241 = v233;
                        v242 = v223;
                        uint64_t v243 = v407;
                        if ((int)v407 >= 1)
                        {
                          do
                          {
                            if (v241 >= 0) {
                              int v244 = v241;
                            }
                            else {
                              int v244 = -v241;
                            }
                            int v245 = v244 % v217;
                            if (v217 + ~v245 < v245) {
                              int v245 = v217 + ~v245;
                            }
                            *v242++ = v234[v245];
                            ++v241;
                            --v243;
                          }
                          while (v243);
                        }
                      }
                      ++v220;
                      v222 = (_DWORD *)((char *)v222 + v218);
                      unint64_t v223 = (_DWORD *)((char *)v223 + v218);
                    }
                    while (v220 != v449);
                  }
                  uint64_t v212 = v362;
                  v351 += v343;
                  v356 += v343;
                  ++v360;
                }
                while (v360 < *(int *)(v362 + 16));
              }
              ++v302;
              v310 += v288;
              v294 += v288;
            }
            while (v302 < *(int *)(v212 + 20));
          }
LABEL_462:
          uint64_t v13 = v274;
          if (v274) {
            nitro::nitro_function::nitro_function(v274);
          }
          int v11 = v280;
          int v8 = v282;
          uint64_t v12 = v275;
          if (v275) {
            nitro::nitro_function::nitro_function(v275);
          }
          break;
        default:
          break;
      }
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      if (!v12) {
        goto LABEL_293;
      }
LABEL_292:
      nitro::nitro_function::nitro_function(v12);
      goto LABEL_293;
    }
  }
  if (!v9 || !v358) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _S0 = *(_DWORD *)(a1 + 284);
  __asm { FCVT            H8, S0 }
  v281 = v11;
  v283 = v8;
  switch(*(_WORD *)(a1 + 282))
  {
    case 0:
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(int *)(v9 + 20) >= 1)
      {
        uint64_t v329 = 0;
        uint64_t v335 = 0;
        int v48 = *(_DWORD *)(v9 + 12);
        uint64_t v49 = *(int *)(v9 + 8);
        uint64_t v50 = *(__int16 *)(a1 + 288);
        uint64_t v51 = *(unsigned int *)(v358 + 8);
        uint64_t v52 = (v51 - (v49 + v50));
        uint64_t v444 = *(unsigned int *)(v358 + 12);
        uint64_t v345 = (int)v444 * (int)v51;
        uint64_t v341 = v48 * (int)v49;
        size_t v410 = 2 * v49;
        uint64_t v305 = *(int *)(v358 + 16) * v345;
        uint64_t v313 = 2 * v305;
        uint64_t v297 = *(int *)(v9 + 16) * v341;
        uint64_t v53 = v9;
        uint64_t v368 = 2 * v345;
        uint64_t v436 = (int)v51;
        uint64_t v54 = 2 * (int)v51;
        int v418 = *(_DWORD *)(v9 + 8);
        uint64_t v55 = 2 * v50 + 2 * v49;
        uint64_t v56 = 2 * v51;
        do
        {
          uint64_t v321 = v55;
          if (*(int *)(v53 + 16) >= 1)
          {
            uint64_t v57 = 0;
            uint64_t v58 = v335;
            do
            {
              if ((int)v444 >= 1)
              {
                uint64_t v59 = 0;
                uint64_t v363 = v53;
                uint64_t v426 = *(void *)(v53 + 24) + 2 * v329 * v297 + 2 * v57 * v341;
                uint64_t v60 = *(void *)(v358 + 24);
                uint64_t v380 = v55;
                uint64_t v384 = v57;
                uint64_t v61 = v60 + 2 * v329 * v305 + 2 * v57 * v345;
                uint64_t v374 = v58;
                uint64_t v62 = (_WORD *)(v60 + v58);
                uint64_t v63 = (_WORD *)(v60 + v55);
                do
                {
                  int v64 = v59 - *(__int16 *)(a1 + 292);
                  int v65 = *(unsigned __int16 *)(a1 + 282);
                  int v66 = v48 - 1;
                  if (v64 < v48) {
                    int v66 = v59 - *(__int16 *)(a1 + 292);
                  }
                  if (v64 < 0) {
                    int v66 = 0;
                  }
                  if (v65 == 1) {
                    int v64 = v66;
                  }
                  if (v64 >= v48 || v64 <= -1) {
                    int v68 = -1;
                  }
                  else {
                    int v68 = v64;
                  }
                  if (!*(_WORD *)(a1 + 282)) {
                    int v64 = v68;
                  }
                  if ((v65 & 0xFFFE) == 2)
                  {
                    _ZF = v65 == 3;
                    BOOL v69 = v65 == 3;
                    int v70 = 2 * v48;
                    int v71 = 2 * v48 - 2;
                    if (_ZF) {
                      int v71 = 2 * v48 - 1;
                    }
                    else {
                      int v70 = 2 * v48 - 2;
                    }
                    if (v64 >= 0) {
                      BOOL v69 = 0;
                    }
                    int v72 = v64 + v69;
                    if (v72 < 0) {
                      int v72 = -v72;
                    }
                    int v64 = v72 % v70;
                    if (v71 - v64 < v64) {
                      int v64 = v71 - v64;
                    }
                  }
                  if (v64 == -1)
                  {
                    if ((int)v436 >= 1)
                    {
                      unint64_t v77 = 0;
                      do
                      {
                        v62[v77 / 2] = _H8;
                        v77 += 2;
                      }
                      while (v56 != v77);
                    }
                  }
                  else
                  {
                    signed int v73 = v62;
                    uint64_t v74 = v50;
                    if ((int)v50 >= 1)
                    {
                      do
                      {
                        *v73++ = _H8;
                        --v74;
                      }
                      while (v74);
                    }
                    memcpy((void *)(v61 + 2 * v59 * v436 + 2 * v50), (const void *)(v426 + 2 * v64 * v418), v410);
                    uint64_t v75 = v63;
                    uint64_t v76 = v52;
                    if ((int)v52 >= 1)
                    {
                      do
                      {
                        *v75++ = _H8;
                        --v76;
                      }
                      while (v76);
                    }
                  }
                  ++v59;
                  uint64_t v62 = (_WORD *)((char *)v62 + v54);
                  uint64_t v63 = (_WORD *)((char *)v63 + v54);
                }
                while (v59 != v444);
                uint64_t v53 = v363;
                uint64_t v55 = v380;
                uint64_t v57 = v384;
                uint64_t v58 = v374;
              }
              ++v57;
              v58 += v368;
              v55 += v368;
            }
            while (v57 < *(int *)(v53 + 16));
          }
          ++v329;
          v335 += v313;
          uint64_t v55 = v321 + v313;
        }
        while (v329 < *(int *)(v53 + 20));
      }
      goto LABEL_285;
    case 1:
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(int *)(v9 + 20) >= 1)
      {
        uint64_t v316 = 0;
        uint64_t v324 = 0;
        int v150 = *(_DWORD *)(v9 + 12);
        uint64_t v151 = *(int *)(v9 + 8);
        uint64_t v152 = *(__int16 *)(a1 + 288);
        uint64_t v153 = *(unsigned int *)(v358 + 8);
        uint64_t v405 = (v153 - (v151 + v152));
        uint64_t v447 = *(unsigned int *)(v358 + 12);
        uint64_t v337 = (int)v447 * (int)v153;
        uint64_t v331 = v150 * (int)v151;
        size_t v399 = 2 * v151;
        uint64_t v292 = *(int *)(v358 + 16) * v337;
        uint64_t v300 = 2 * v292;
        uint64_t v286 = *(int *)(v9 + 16) * v331;
        uint64_t v154 = v151 - 1;
        uint64_t v350 = 2 * v337;
        uint64_t v439 = (int)v153;
        uint64_t v155 = 2 * (int)v153;
        int v413 = *(_DWORD *)(v9 + 8);
        uint64_t v156 = 2 * v152 + 2 * v151;
        uint64_t v157 = 2 * v153;
        do
        {
          uint64_t v308 = v156;
          if (*(int *)(v9 + 16) >= 1)
          {
            uint64_t v158 = 0;
            uint64_t v159 = v324;
            do
            {
              if ((int)v447 >= 1)
              {
                uint64_t v160 = 0;
                uint64_t v366 = v9;
                uint64_t v429 = *(void *)(v9 + 24) + 2 * v316 * v286 + 2 * v158 * v331;
                uint64_t v161 = *(void *)(v358 + 24);
                uint64_t v376 = v158;
                uint64_t v421 = v161 + 2 * v316 * v292 + 2 * v158 * v337;
                uint64_t v354 = v159;
                uint64_t v162 = (_WORD *)(v161 + v159);
                uint64_t v370 = v156;
                long long v163 = (_WORD *)(v161 + v156);
                do
                {
                  int v164 = v160 - *(__int16 *)(a1 + 292);
                  int v165 = *(unsigned __int16 *)(a1 + 282);
                  int v166 = v150 - 1;
                  if (v164 < v150) {
                    int v166 = v160 - *(__int16 *)(a1 + 292);
                  }
                  if (v164 < 0) {
                    int v166 = 0;
                  }
                  if (v165 == 1) {
                    int v164 = v166;
                  }
                  if (v164 >= v150 || v164 <= -1) {
                    int v168 = -1;
                  }
                  else {
                    int v168 = v164;
                  }
                  if (!*(_WORD *)(a1 + 282)) {
                    int v164 = v168;
                  }
                  if ((v165 & 0xFFFE) == 2)
                  {
                    _ZF = v165 == 3;
                    BOOL v169 = v165 == 3;
                    int v170 = 2 * v150;
                    int v171 = 2 * v150 - 2;
                    if (_ZF) {
                      int v171 = 2 * v150 - 1;
                    }
                    else {
                      int v170 = 2 * v150 - 2;
                    }
                    if (v164 >= 0) {
                      BOOL v169 = 0;
                    }
                    int v172 = v164 + v169;
                    if (v172 < 0) {
                      int v172 = -v172;
                    }
                    int v164 = v172 % v170;
                    if (v171 - v164 < v164) {
                      int v164 = v171 - v164;
                    }
                  }
                  if (v164 == -1)
                  {
                    if ((int)v439 >= 1)
                    {
                      unint64_t v178 = 0;
                      do
                      {
                        v162[v178 / 2] = _H8;
                        v178 += 2;
                      }
                      while (v157 != v178);
                    }
                  }
                  else
                  {
                    uint64_t v173 = (_WORD *)(v429 + 2 * v164 * v413);
                    int v174 = v162;
                    uint64_t v175 = v152;
                    if ((int)v152 >= 1)
                    {
                      do
                      {
                        *v174++ = *v173;
                        --v175;
                      }
                      while (v175);
                    }
                    memcpy((void *)(v421 + 2 * v160 * v439 + 2 * v152), v173, v399);
                    unsigned int v176 = v163;
                    uint64_t v177 = v405;
                    if ((int)v405 >= 1)
                    {
                      do
                      {
                        *v176++ = v173[v154];
                        --v177;
                      }
                      while (v177);
                    }
                  }
                  ++v160;
                  uint64_t v162 = (_WORD *)((char *)v162 + v155);
                  long long v163 = (_WORD *)((char *)v163 + v155);
                }
                while (v160 != v447);
                uint64_t v9 = v366;
                uint64_t v156 = v370;
                uint64_t v158 = v376;
                uint64_t v159 = v354;
              }
              ++v158;
              v159 += v350;
              v156 += v350;
            }
            while (v158 < *(int *)(v9 + 16));
          }
          ++v316;
          v324 += v300;
          uint64_t v156 = v308 + v300;
        }
        while (v316 < *(int *)(v9 + 20));
      }
      goto LABEL_285;
    case 2:
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(int *)(v9 + 20) >= 1)
      {
        uint64_t v314 = 0;
        uint64_t v322 = 0;
        uint64_t v78 = *(unsigned int *)(v9 + 8);
        int v79 = *(_DWORD *)(v9 + 12);
        uint64_t v80 = *(__int16 *)(a1 + 288);
        uint64_t v81 = *(unsigned int *)(v358 + 8);
        uint64_t v403 = (v81 - (v78 + v80));
        uint64_t v445 = *(unsigned int *)(v358 + 12);
        uint64_t v330 = v79 * (int)v78;
        uint64_t v336 = (int)v445 * (int)v81;
        uint64_t v397 = *(__int16 *)(a1 + 288);
        uint64_t v284 = *(int *)(v9 + 16) * v330;
        uint64_t v290 = *(int *)(v358 + 16) * v336;
        uint64_t v298 = 2 * v290;
        int v437 = v79;
        int v427 = v79 - 1;
        uint64_t v348 = 2 * v336;
        int v385 = 2 * v79 - 2;
        int v389 = 2 * v79;
        int v381 = 2 * v79 - 1;
        int v82 = 2 * v78 - 2;
        uint64_t v434 = (int)v81;
        uint64_t v83 = 2 * (int)v81;
        uint64_t __n = 2 * (int)v78;
        uint64_t v84 = __n + 2 * v397;
        uint64_t v85 = 2 * v81;
        do
        {
          uint64_t v306 = v84;
          if (*(int *)(v9 + 16) >= 1)
          {
            uint64_t v86 = 0;
            uint64_t v87 = v322;
            do
            {
              if ((int)v445 >= 1)
              {
                uint64_t v88 = 0;
                uint64_t v364 = v9;
                uint64_t v419 = *(void *)(v9 + 24) + 2 * v314 * v284 + 2 * v86 * v330;
                uint64_t v89 = *(void *)(v358 + 24);
                uint64_t v375 = v86;
                uint64_t v411 = v89 + 2 * v314 * v290 + 2 * v86 * v336;
                uint64_t v352 = v87;
                uint64_t v90 = (_WORD *)(v89 + v87);
                uint64_t v369 = v84;
                uint64_t v91 = (_WORD *)(v89 + v84);
                do
                {
                  int v92 = v88 - *(__int16 *)(a1 + 292);
                  int v93 = *(unsigned __int16 *)(a1 + 282);
                  int v94 = v427;
                  if (v92 < v437) {
                    int v94 = v88 - *(__int16 *)(a1 + 292);
                  }
                  if (v92 < 0) {
                    int v94 = 0;
                  }
                  if (v93 == 1) {
                    int v92 = v94;
                  }
                  if (v92 >= v437 || v92 <= -1) {
                    int v96 = -1;
                  }
                  else {
                    int v96 = v92;
                  }
                  if (!*(_WORD *)(a1 + 282)) {
                    int v92 = v96;
                  }
                  if ((v93 & 0xFFFE) == 2)
                  {
                    _ZF = v93 == 3;
                    BOOL v97 = v93 == 3;
                    int v98 = v389;
                    int v99 = v385;
                    if (_ZF) {
                      int v99 = v381;
                    }
                    else {
                      int v98 = v385;
                    }
                    if (v92 >= 0) {
                      BOOL v97 = 0;
                    }
                    int v100 = v92 + v97;
                    if (v100 < 0) {
                      int v100 = -v100;
                    }
                    int v92 = v100 % v98;
                    if (v99 - v92 < v92) {
                      int v92 = v99 - v92;
                    }
                  }
                  if (v92 == -1)
                  {
                    if ((int)v434 >= 1)
                    {
                      unint64_t v112 = 0;
                      do
                      {
                        v90[v112 / 2] = _H8;
                        v112 += 2;
                      }
                      while (v85 != v112);
                    }
                  }
                  else
                  {
                    uint64_t v101 = a1;
                    uint64_t v102 = v78;
                    uint64_t v103 = (_WORD *)(v419 + 2 * v92 * (int)v78);
                    if ((int)v80 >= 1)
                    {
                      uint64_t v104 = 0;
                      int v105 = v90;
                      do
                      {
                        int v106 = ((int)v80 + (int)v104) % v82;
                        if (v82 - v106 < v106) {
                          int v106 = v82 - v106;
                        }
                        *v105++ = v103[v106];
                        --v104;
                      }
                      while (v80 + v104);
                    }
                    memcpy((void *)(v411 + 2 * v88 * v434 + 2 * v397), v103, __n);
                    uint64_t v78 = v102;
                    int v107 = v102;
                    float v108 = v91;
                    uint64_t v109 = v403;
                    a1 = v101;
                    if ((int)v403 >= 1)
                    {
                      do
                      {
                        if (v107 >= 0) {
                          int v110 = v107;
                        }
                        else {
                          int v110 = -v107;
                        }
                        int v111 = v110 % v82;
                        if (v82 - v111 < v111) {
                          int v111 = v82 - v111;
                        }
                        *v108++ = v103[v111];
                        ++v107;
                        --v109;
                      }
                      while (v109);
                    }
                  }
                  ++v88;
                  uint64_t v90 = (_WORD *)((char *)v90 + v83);
                  uint64_t v91 = (_WORD *)((char *)v91 + v83);
                }
                while (v88 != v445);
                uint64_t v9 = v364;
                uint64_t v84 = v369;
                uint64_t v86 = v375;
                uint64_t v87 = v352;
              }
              ++v86;
              v87 += v348;
              v84 += v348;
            }
            while (v86 < *(int *)(v9 + 16));
          }
          ++v314;
          v322 += v298;
          uint64_t v84 = v306 + v298;
        }
        while (v314 < *(int *)(v9 + 20));
      }
      goto LABEL_285;
    case 3:
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(int *)(v9 + 20) >= 1)
      {
        uint64_t v299 = 0;
        uint64_t v307 = 0;
        uint64_t v113 = *(unsigned int *)(v9 + 8);
        int v114 = *(_DWORD *)(v9 + 12);
        unsigned int v115 = *(__int16 *)(a1 + 288);
        uint64_t v116 = *(unsigned int *)(v358 + 8);
        uint64_t v404 = v116 - (v113 + v115);
        uint64_t v446 = *(unsigned int *)(v358 + 12);
        uint64_t v323 = (int)v446 * (int)v116;
        uint64_t v315 = v114 * (int)v113;
        int v117 = 2 * v113;
        uint64_t v398 = *(__int16 *)(a1 + 288);
        uint64_t v276 = *(int *)(v9 + 16) * v315;
        uint64_t v278 = *(int *)(v358 + 16) * v323;
        uint64_t v285 = 2 * v278;
        uint64_t v342 = 2 * v323;
        uint64_t v438 = (int)v116;
        uint64_t v118 = 2 * (int)v116;
        int v390 = v115 - 1;
        int v386 = -v115;
        uint64_t v412 = v115;
        uint64_t __na = 2 * (int)v113;
        uint64_t v119 = __na + 2 * v398;
        uint64_t v120 = 2 * v116;
        do
        {
          uint64_t v291 = v119;
          if (*(int *)(v9 + 16) >= 1)
          {
            uint64_t v121 = 0;
            uint64_t v122 = v307;
            do
            {
              if ((int)v446 >= 1)
              {
                uint64_t v123 = 0;
                uint64_t v365 = v9;
                uint64_t v428 = *(void *)(v9 + 24) + 2 * v299 * v276 + 2 * v121 * v315;
                uint64_t v124 = *(void *)(v358 + 24);
                uint64_t v353 = v121;
                uint64_t v420 = v124 + 2 * v299 * v278 + 2 * v121 * v323;
                uint64_t v346 = v122;
                uint64_t v349 = v119;
                uint64_t v125 = (_WORD *)(v124 + v122);
                int v126 = (_WORD *)(v124 + v119);
                do
                {
                  int v127 = v123 - *(__int16 *)(a1 + 292);
                  int v128 = *(unsigned __int16 *)(a1 + 282);
                  int v129 = v114 - 1;
                  if (v127 < v114) {
                    int v129 = v123 - *(__int16 *)(a1 + 292);
                  }
                  if (v127 < 0) {
                    int v129 = 0;
                  }
                  if (v128 == 1) {
                    int v127 = v129;
                  }
                  if (v127 >= v114 || v127 <= -1) {
                    int v131 = -1;
                  }
                  else {
                    int v131 = v127;
                  }
                  if (!*(_WORD *)(a1 + 282)) {
                    int v127 = v131;
                  }
                  if ((v128 & 0xFFFE) == 2)
                  {
                    _ZF = v128 == 3;
                    BOOL v132 = v128 == 3;
                    int v133 = 2 * v114;
                    int v134 = 2 * v114 - 2;
                    if (_ZF) {
                      int v134 = 2 * v114 - 1;
                    }
                    else {
                      int v133 = 2 * v114 - 2;
                    }
                    if (v127 >= 0) {
                      BOOL v132 = 0;
                    }
                    int v135 = v127 + v132;
                    if (v135 < 0) {
                      int v135 = -v135;
                    }
                    int v127 = v135 % v133;
                    if (v134 - v127 < v127) {
                      int v127 = v134 - v127;
                    }
                  }
                  if (v127 == -1)
                  {
                    if ((int)v438 >= 1)
                    {
                      unint64_t v149 = 0;
                      do
                      {
                        v125[v149 / 2] = _H8;
                        v149 += 2;
                      }
                      while (v120 != v149);
                    }
                  }
                  else
                  {
                    uint64_t v136 = v113;
                    uint64_t v137 = (_WORD *)(v428 + 2 * v127 * (int)v113);
                    int v138 = v386;
                    int v139 = v390;
                    int v140 = v125;
                    uint64_t v141 = v412;
                    if ((int)v412 >= 1)
                    {
                      do
                      {
                        if (v138 >= -1) {
                          int v142 = v138 + 1;
                        }
                        else {
                          int v142 = v139;
                        }
                        int v143 = v142 % v117;
                        if (v117 + ~v143 < v143) {
                          int v143 = v117 + ~v143;
                        }
                        ++v138;
                        *v140++ = v137[v143];
                        --v139;
                        --v141;
                      }
                      while (v141);
                    }
                    memcpy((void *)(v420 + 2 * v123 * v438 + 2 * v398), v137, __na);
                    uint64_t v113 = v136;
                    int v144 = v136;
                    float v145 = v126;
                    uint64_t v146 = v404;
                    if ((int)v404 >= 1)
                    {
                      do
                      {
                        if (v144 >= 0) {
                          int v147 = v144;
                        }
                        else {
                          int v147 = -v144;
                        }
                        int v148 = v147 % v117;
                        if (v117 + ~v148 < v148) {
                          int v148 = v117 + ~v148;
                        }
                        *v145++ = v137[v148];
                        ++v144;
                        --v146;
                      }
                      while (v146);
                    }
                  }
                  ++v123;
                  uint64_t v125 = (_WORD *)((char *)v125 + v118);
                  int v126 = (_WORD *)((char *)v126 + v118);
                }
                while (v123 != v446);
                uint64_t v9 = v365;
                uint64_t v119 = v349;
                uint64_t v121 = v353;
                uint64_t v122 = v346;
              }
              ++v121;
              v122 += v342;
              v119 += v342;
            }
            while (v121 < *(int *)(v9 + 16));
          }
          ++v299;
          v307 += v285;
          uint64_t v119 = v291 + v285;
        }
        while (v299 < *(int *)(v9 + 20));
      }
LABEL_285:
      int v11 = v281;
      if (v281) {
        nitro::nitro_function::nitro_function(v281);
      }
      int v8 = v283;
      if (v283) {
        nitro::nitro_function::nitro_function(v283);
      }
      break;
    default:
      break;
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  uint64_t v12 = v8;
  if (v8) {
    goto LABEL_292;
  }
LABEL_293:
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v452) {
    nitro::nitro_function::nitro_function(v452);
  }
  uint64_t v179 = v454;
  if (v454)
  {
    nitro::nitro_function::nitro_function(v179);
  }
}

void sub_192B4C80C(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v3 - 128);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  float32x4_t v6 = *(std::__shared_weak_count **)(v3 - 112);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::general_padding_kernel_cpu::~general_padding_kernel_cpu(Espresso::general_padding_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::crop_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v66, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v64 = 0;
    int v65 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, *(uint64_t **)a3);
  }
  float32x4_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, *(void *)(a4 + 8), 0);
  if (v7)
  {
    uint64_t v9 = *((void *)v7 + 22);
    int v8 = (std::__shared_weak_count *)*((void *)v7 + 23);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
  }
  int v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
  if (v10)
  {
    uint64_t v11 = *((void *)v10 + 22);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 + 23);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v13 = v66;
  if (v66)
  {
    uint64_t v14 = v64;
    if (v64)
    {
      uint64_t v15 = v67;
      if (v67) {
        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v16 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *(unsigned int *)(v13 + 20);
      if ((int)v17 >= 1)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v22 = *(unsigned int *)(v14 + 8);
        uint64_t v21 = *(unsigned int *)(v14 + 12);
        uint64_t v23 = *(unsigned int *)(v13 + 16);
        uint64_t v24 = *(int *)(v13 + 8);
        int v25 = *(_DWORD *)(v13 + 12) * v24;
        uint64_t v26 = 4 * (int)v21 * (int)v22 * *(_DWORD *)(v14 + 16);
        uint64_t v27 = 4 * v25 * (int)v23;
        uint64_t v28 = 4 * v24;
        uint64_t v29 = 4 * v25;
        do
        {
          if ((int)v23 >= 1)
          {
            uint64_t v30 = 0;
            uint64_t v31 = (_DWORD *)(*(void *)(v14 + 24) + v19);
            uint64_t v32 = *(void *)(v13 + 24) + v18 + v28 * *(int *)(a1 + 288);
            do
            {
              if ((int)v21 >= 1)
              {
                uint64_t v33 = 0;
                BOOL v34 = (int *)(v32 + 4 * *(int *)(a1 + 280));
                int v35 = v31;
                do
                {
                  int v36 = v34;
                  int v37 = v35;
                  uint64_t v38 = v22;
                  if ((int)v22 >= 1)
                  {
                    do
                    {
                      int v39 = *v36++;
                      *v37++ = v39;
                      --v38;
                    }
                    while (v38);
                  }
                  ++v33;
                  v35 += (int)v22;
                  BOOL v34 = (int *)((char *)v34 + v28);
                }
                while (v33 != v21);
              }
              ++v30;
              v31 += (int)v21 * (int)v22;
              v32 += v29;
            }
            while (v30 != v23);
          }
          ++v20;
          v19 += v26;
          v18 += v27;
        }
        while (v20 != v17);
      }
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      if (!v15) {
        goto LABEL_57;
      }
LABEL_56:
      nitro::nitro_function::nitro_function(v15);
      goto LABEL_57;
    }
  }
  if (!v9 || !v11) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = *(unsigned int *)(v9 + 20);
  if ((int)v40 >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v45 = *(unsigned int *)(v11 + 8);
    uint64_t v44 = *(unsigned int *)(v11 + 12);
    uint64_t v46 = *(unsigned int *)(v9 + 16);
    uint64_t v47 = *(int *)(v9 + 8);
    int v48 = *(_DWORD *)(v9 + 12) * v47;
    uint64_t v49 = 2 * (int)v44 * (int)v45 * *(_DWORD *)(v11 + 16);
    uint64_t v50 = 2 * v48 * (int)v46;
    uint64_t v51 = 2 * v47;
    uint64_t v52 = 2 * v48;
    do
    {
      if ((int)v46 >= 1)
      {
        uint64_t v53 = 0;
        uint64_t v54 = (_WORD *)(*(void *)(v11 + 24) + v42);
        uint64_t v55 = *(void *)(v9 + 24) + v41 + v51 * *(int *)(a1 + 288);
        do
        {
          if ((int)v44 >= 1)
          {
            uint64_t v56 = 0;
            uint64_t v57 = (__int16 *)(v55 + 2 * *(int *)(a1 + 280));
            uint64_t v58 = v54;
            do
            {
              uint64_t v59 = v57;
              uint64_t v60 = v58;
              uint64_t v61 = v45;
              if ((int)v45 >= 1)
              {
                do
                {
                  __int16 v62 = *v59++;
                  *v60++ = v62;
                  --v61;
                }
                while (v61);
              }
              ++v56;
              v58 += (int)v45;
              uint64_t v57 = (__int16 *)((char *)v57 + v51);
            }
            while (v56 != v44);
          }
          ++v53;
          v54 += (int)v44 * (int)v45;
          v55 += v52;
        }
        while (v53 != v46);
      }
      ++v43;
      v42 += v49;
      v41 += v50;
    }
    while (v43 != v40);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v15 = v8;
  if (v8) {
    goto LABEL_56;
  }
LABEL_57:
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  uint64_t v63 = v67;
  if (v67)
  {
    nitro::nitro_function::nitro_function(v63);
  }
}

void sub_192B4CC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::crop_kernel_cpu::~crop_kernel_cpu(Espresso::crop_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::batchnorm_kernel_cpu::num_weights_blob(Espresso::batchnorm_kernel_cpu *this)
{
  return 1;
}

double Espresso::batchnorm_kernel_cpu::get_weights_blob@<D0>(Espresso::batchnorm_kernel_cpu *this@<X0>, _OWORD *a2@<X8>)
{
  Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, (void *)this + 1, (void *)this + 50);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t Espresso::batchnorm_kernel_cpu::transform_kernel_for_training(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (!*a4) {
    *(_DWORD *)(result + 308) = 1;
  }
  return result;
}

void Espresso::batchnorm_kernel_cpu::transform_intermediate_results_as_output(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v32 = a3;
  if (*(_DWORD *)(a1 + 308))
  {
    uint64_t v4 = a2 + 136;
    uint64_t v25 = (uint64_t)&v32;
    uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v32, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25)[3];
    int v5 = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (unsigned __int8 *)v25, (long long **)&v25)+ 5)+ 16);
    uint64_t v31 = 0;
    long long v30 = 0u;
    long long v29 = 0u;
    uint64_t v25 = 0x100000001;
    int v26 = v5;
    uint64_t v27 = 0x100000001;
    int v28 = -1;
    uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 16 * v32);
    std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,void>((uint64_t *)__p, (void *)(a2 + 16), *(_DWORD *)(v6 + 12));
    long long v24 = *(_OWORD *)__p;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    (*(void (**)(void *, uint64_t *, uint64_t *, __n128))(*(void *)__p[0] + 16))(__p[0], &v25, &v22, *(__n128 *)__p);
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    unint64_t v7 = v32;
    if (*(char *)(v6 + 39) >= 0) {
      size_t v8 = *(unsigned __int8 *)(v6 + 39);
    }
    else {
      size_t v8 = *(void *)(v6 + 24);
    }
    uint64_t v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 3);
    if (v21 < 0) {
      uint64_t v9 = (void **)__p[0];
    }
    if (v8)
    {
      if (*(char *)(v6 + 39) >= 0) {
        int v10 = (const void *)(v6 + 16);
      }
      else {
        int v10 = *(const void **)(v6 + 16);
      }
      memmove(v9, v10, v8);
    }
    *(_DWORD *)((char *)v9 + v8) = 7695674;
    Espresso::add_layer_output(a2, v7, (unsigned __int8 *)__p, (uint64_t *)&v24);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    double v11 = std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,void>((uint64_t *)__p, (void *)(a2 + 16), *(_DWORD *)(v6 + 12));
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    v19[0] = (uint64_t)__p[0];
    v19[1] = (uint64_t)__p[1];
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    (*(void (**)(void *, uint64_t *, uint64_t *, double))(*(void *)__p[0] + 16))(__p[0], &v25, &v17, v11);
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    unint64_t v13 = v32;
    if (*(char *)(v6 + 39) >= 0) {
      size_t v14 = *(unsigned __int8 *)(v6 + 39);
    }
    else {
      size_t v14 = *(void *)(v6 + 24);
    }
    uint64_t v15 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 6);
    if (v21 < 0) {
      uint64_t v15 = (void **)__p[0];
    }
    if (v14)
    {
      if (*(char *)(v6 + 39) >= 0) {
        int v16 = (const void *)(v6 + 16);
      }
      else {
        int v16 = *(const void **)(v6 + 16);
      }
      memmove(v15, v16, v14);
    }
    strcpy((char *)v15 + v14, ":sigma");
    Espresso::add_layer_output(a2, v13, (unsigned __int8 *)__p, v19);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (*((void *)&v24 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
    }
    if ((void)v30)
    {
      *((void *)&v30 + 1) = v30;
      operator delete((void *)v30);
    }
  }
}

void sub_192B4D014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

std::string *Espresso::add_layer_output(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v37 = a2;
  unint64_t v7 = *(void **)(*(void *)(a1 + 32) + 16 * a2);
  size_t v8 = (uint64_t *)v7[14];
  unint64_t v9 = v7[15];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v12 = v7[13];
    uint64_t v13 = ((uint64_t)v8 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    BOOL v34 = v7 + 15;
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
    uint64_t v18 = &v17[16 * v13];
    *(void *)&long long v32 = v17;
    *((void *)&v32 + 1) = v18;
    *((void *)&v33 + 1) = &v17[16 * v19];
    long long v20 = *(_OWORD *)a4;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)a4;
    if (*((void *)&v20 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v33 = v18 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v7 + 13, &v32);
    double v11 = (void *)v7[14];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v32);
  }
  else
  {
    *size_t v8 = *a4;
    uint64_t v10 = a4[1];
    v8[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    double v11 = v8 + 2;
    v7[14] = v8 + 2;
  }
  v7[14] = v11;
  *(void *)&long long v32 = a3;
  char v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 136, a3, (long long **)&v32);
  uint64_t v23 = *a4;
  uint64_t v22 = a4[1];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v24 = (std::__shared_weak_count *)*((void *)v21 + 6);
  *((void *)v21 + 5) = v23;
  *((void *)v21 + 6) = v22;
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  Espresso::abstract_blob_container::shape((char *)&v32, *a4);
  uint64_t v38 = a3;
  uint64_t v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), a3, (long long **)&v38);
  long long v26 = v33;
  *(_OWORD *)(v25 + 56) = v32;
  *(_OWORD *)(v25 + 72) = v26;
  *((void *)v25 + 11) = v34;
  uint64_t v27 = (void *)*((void *)v25 + 12);
  if (v27)
  {
    *((void *)v25 + 13) = v27;
    operator delete(v27);
    *((void *)v25 + 12) = 0;
    *((void *)v25 + 13) = 0;
    *((void *)v25 + 14) = 0;
  }
  *((_OWORD *)v25 + 6) = v35;
  *((void *)v25 + 14) = v36;
  *(void *)&long long v32 = &v37;
  int v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a1 + 96, &v37, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
  long long v29 = (char **)(v28 + 3);
  long long v30 = (std::string *)v28[4];
  if ((unint64_t)v30 >= v28[5])
  {
    double result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v29, (uint64_t)a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v29, (long long *)a3);
    double result = v30 + 1;
  }
  v28[4] = result;
  return result;
}

void sub_192B4D2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::batchnorm_kernel_cpu::transform_parameters_as_input(_DWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v46 = a3;
  uint64_t v8 = a2 + 136;
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  v45.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v46, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45)[3];
  uint64_t v9 = *(int *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)v45.__r_.__value_.__l.__data_, (long long **)&v45)+ 5)+ 16);
  if (a1[77])
  {
    uint64_t v10 = (const void **)(*(void *)(*(void *)(a2 + 32) + 16 * v46) + 16);
    Espresso::get_layer_parameter_name(v10, 1, &v45);
    Espresso::get_layer_parameter_name(v10, 2, &v44);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,int,unsigned long &,int,void>(&v43, 1, 1, v9, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,int,unsigned long &,int,void>(&v41, 1, 1, v9, 1);
    (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(void *)a1 + 408))(&v39, a1);
    if (v39)
    {
      if (v9)
      {
        double v11 = *(_DWORD **)(v43 + 24);
        uint64_t v12 = *(_DWORD **)(v41 + 24);
        uint64_t v13 = (int *)(*(void *)(v39 + 16) + 4);
        do
        {
          *v11++ = *(v13 - 1);
          int v14 = *v13;
          v13 += 4;
          *v12++ = v14;
          --v9;
        }
        while (v9);
      }
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      (*(void (**)(_DWORD *, uint64_t *))(*(void *)a1 + 392))(a1, &v37);
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
    }
    else if (v9)
    {
      uint64_t v15 = *(_DWORD **)(v43 + 24);
      unint64_t v16 = *(_DWORD **)(v41 + 24);
      do
      {
        *v15++ = 1065353216;
        *v16++ = 0;
        --v9;
      }
      while (v9);
    }
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v35, (void *)(a2 + 16), (uint64_t *)&v43);
    long long v36 = v35;
    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    Espresso::add_layer_input(a2, v46, (unsigned __int8 *)&v45, (uint64_t *)&v36);
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v34, (void *)(a2 + 16), &v41);
    long long v35 = v34;
    uint64_t v18 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    Espresso::add_layer_input(a2, v46, (unsigned __int8 *)&v44, (uint64_t *)&v35);
    unint64_t v19 = *(void *)(a5 + 8);
    if (v19 >= *(void *)(a5 + 16))
    {
      char v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v45);
    }
    else
    {
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v20 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(void *)(v19 + 16) = *((void *)&v45.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v19 = v20;
      }
      char v21 = (std::string *)(v19 + 24);
      *(void *)(a5 + 8) = v21;
    }
    *(void *)(a5 + 8) = v21;
    if ((unint64_t)v21 >= *(void *)(a5 + 16))
    {
      long long v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a5, (uint64_t)&v44);
    }
    else
    {
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v21, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v29 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
        v21->__r_.__value_.__r.__words[2] = v44.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v29;
      }
      long long v30 = v21 + 1;
      *(void *)(a5 + 8) = v21 + 1;
    }
    *(void *)(a5 + 8) = v30;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (*((void *)&v43 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v43 + 1));
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(void *)a1 + 408))(&v44, a1);
    if (v44.__r_.__value_.__r.__words[0])
    {
      uint64_t v32 = 0;
      long long v33 = 0;
      (*(void (**)(_DWORD *, uint64_t *))(*(void *)a1 + 392))(a1, &v32);
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,unsigned long,void>(&v45, 4 * v9);
      std::string::size_type size = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
      if (size) {
        nitro::nitro_function::nitro_function(size);
      }
      if (v9)
      {
        uint64_t v23 = *(_OWORD **)(v44.__r_.__value_.__r.__words[0] + 16);
        uint64_t v24 = v9;
        do
        {
          *v23++ = xmmword_192DCA1E0;
          --v24;
        }
        while (v24);
      }
    }
    LODWORD(v45.__r_.__value_.__l.__data_) = 1;
    HIDWORD(v45.__r_.__value_.__r.__words[0]) = 4 * v9;
    *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_192DCA840;
    uint64_t v25 = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
    long long v31 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    if (v44.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::make_blob_container_and_copy_blob<std::shared_ptr<Espresso::blob<float,1>>>(&v43, (void *)(a2 + 16), (Espresso::layer_nd_shape *)&v45, (uint64_t)&v31);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    Espresso::get_layer_parameter_name((const void **)(*(void *)(*(void *)(a2 + 32) + 16 * v46) + 16), 1, &v45);
    Espresso::add_layer_input(a2, v46, (unsigned __int8 *)&v45, (uint64_t *)&v43);
    unint64_t v26 = *(void *)(a5 + 32);
    if (v26 >= *(void *)(a5 + 40))
    {
      int v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a5 + 24), (uint64_t)&v45);
    }
    else
    {
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 32), v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        *(void *)(v26 + 16) = *((void *)&v45.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v26 = v27;
      }
      int v28 = (std::string *)(v26 + 24);
      *(void *)(a5 + 32) = v26 + 24;
    }
    *(void *)(a5 + 32) = v28;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v43 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v43 + 1));
    }
    if (v44.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v44.__r_.__value_.__l.__size_);
    }
  }
}

void sub_192B4D7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  *(void *)(v26 + 32) = v27;
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  long long v30 = *(std::__shared_weak_count **)(v28 - 104);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,int,unsigned long &,int,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *uint64_t v10 = &unk_1EE3899C8;
  v10[3] = &unk_1EE36BF10;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  double v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  uint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_192B4D9F0(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::batchnorm_kernel_cpu::clear_weights(Espresso::batchnorm_kernel_cpu *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::batchnorm_kernel_cpu::share_weights(uint64_t a1, const void **a2)
{
  if (*a2)
  {
    if (v3)
    {
      uint64_t v5 = v3[50];
      uint64_t v4 = v3[51];
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 408);
      *(void *)(a1 + 400) = v5;
      *(void *)(a1 + 408) = v4;
      if (v6)
      {
        nitro::nitro_function::nitro_function(v6);
      }
    }
  }
}

void Espresso::batchnorm_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v198 = 0;
    int v199 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v198, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v196 = 0;
    BOOL v197 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v196, *(uint64_t **)a4);
  }
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
  if (v6)
  {
    unint64_t v7 = (std::__shared_weak_count *)v6[23];
    uint64_t v178 = v6[22];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v178 = 0;
    unint64_t v7 = 0;
  }
  uint64_t v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, *(void *)(a4 + 8), 0);
  if (v8)
  {
    uint64_t v9 = (std::__shared_weak_count *)v8[23];
    uint64_t v179 = v8[22];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v179 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = v198;
  if (!(v198 | v178) || (uint64_t v193 = v196, !(v196 | v179))) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
  }
  uint64_t v11 = *(unsigned int *)(a1 + 376);
  if (v11 == 2)
  {
    uint64_t v12 = *(void *)(a3 + 8);
    if (v12 == *(void *)a3)
    {
      src.int data = 0;
      src.vImagePixelCount height = 0;
      uint64_t v13 = (uint64_t *)v12;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, *(uint64_t **)a3);
      uint64_t v13 = *(uint64_t **)a3;
      uint64_t v12 = *(void *)(a3 + 8);
    }
    shared_weak_owners = (std::__shared_weak_count *)Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v13, v12, 0);
    if (shared_weak_owners)
    {
      int shared_owners = (_DWORD *)shared_weak_owners[7].__shared_owners_;
      shared_weak_owners = (std::__shared_weak_count *)shared_weak_owners[7].__shared_weak_owners_;
      if (shared_weak_owners) {
        atomic_fetch_add_explicit(&shared_weak_owners->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int shared_owners = 0;
    }
    if (src.data) {
      int shared_owners = src.data;
    }
    unsigned int v14 = shared_owners[5];
    unsigned int v175 = shared_owners[4];
    int v26 = shared_owners[2];
    int v25 = shared_owners[3];
    if (shared_weak_owners) {
      nitro::nitro_function::nitro_function(shared_weak_owners);
    }
    unsigned int v21 = v26 * v25;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
  }
  else
  {
    if ((v11 - 4) <= 0xFFFFFFFC) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent input tensor rank and operator rank specification");
    }
    Espresso::abstract_blob_container::shape((char *)&src, **(void **)a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&dest, (const Espresso::layer_shape *)&src, 0);
    if (__p)
    {
      float v202 = __p;
      operator delete(__p);
    }
    if (SHIDWORD(dest.width) >= v11 + 2) {
      unsigned int v14 = v203[SHIDWORD(dest.width) - v11];
    }
    else {
      unsigned int v14 = 1;
    }
    if (SHIDWORD(dest.width) >= v11 + 1) {
      int v15 = *((_DWORD *)&dest.data + SHIDWORD(dest.width) + ~v11);
    }
    else {
      int v15 = 1;
    }
    unsigned int v175 = v15;
    if (SHIDWORD(dest.width) >= v11) {
      uint64_t width_high = v11;
    }
    else {
      uint64_t width_high = HIDWORD(dest.width);
    }
    uint64_t v17 = SHIDWORD(dest.width) - width_high - 2;
    if (v17 >= 1)
    {
      p_vImage_Buffer dest = &dest;
      do
      {
        int data = (int)p_dest->data;
        p_vImage_Buffer dest = (vImage_Buffer *)((char *)p_dest + 4);
        v14 *= data;
        --v17;
      }
      while (v17);
    }
    if (width_high)
    {
      long long v20 = (int *)&dest + SHIDWORD(dest.width) - 1;
      unsigned int v21 = 1;
      do
      {
        int v22 = *v20--;
        v21 *= v22;
        --width_high;
      }
      while (width_high);
    }
    else
    {
      unsigned int v21 = 1;
    }
  }
  vDSP_Length __N = v175 * v21;
  uint64_t v185 = v175;
  uint64_t v27 = v14;
  uint64_t v192 = v10;
  uint64_t v186 = v14;
  long long v163 = v7;
  int v164 = v9;
  if (!*(_DWORD *)(a1 + 308))
  {
    if (*(void *)(a4 + 8) - *(void *)a4 < 0x11uLL)
    {
      uint64_t v74 = *(void *)(a1 + 400);
      int v71 = v175 * v21;
      if (!v74) {
        goto LABEL_257;
      }
      uint64_t v72 = *(void *)(v74 + 16);
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, (uint64_t *)(*(void *)a4 + 16));
      int v71 = v175 * v21;
      uint64_t v72 = *((void *)src.data + 3);
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
    }
    if (v72)
    {
      if (!v14) {
        goto LABEL_247;
      }
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      uint64_t v188 = v71;
      uint64_t v180 = 2 * v71;
      while (1)
      {
        if (v10)
        {
          uint64_t v77 = *(void *)(v10 + 24);
          vImagePixelCount height = (vImagePixelCount)operator new(0x60uLL);
          *(void *)(height + 8) = 0;
          *(void *)(height + 16) = 0;
          *(void *)vImagePixelCount height = &unk_1EE389990;
          int v79 = (int *)(height + 24);
          *(void *)(height + 24) = &unk_1EE36BEF0;
          *(_OWORD *)(height + 64) = 0u;
          *(_OWORD *)(height + 80) = 0u;
          *(_DWORD *)(height + 32) = v21;
          *(_DWORD *)(height + 36) = v175;
          *(_DWORD *)(height + 40) = 1;
          *(void *)(height + 48) = v77 + 4 * v76 * v188;
          *(unsigned char *)(height + 56) = 0;
          uint64_t v80 = *(void *)(v193 + 24);
          vImagePixelCount v81 = (vImagePixelCount)operator new(0x60uLL);
          *(void *)(v81 + 8) = 0;
          *(void *)(v81 + 16) = 0;
          *(void *)vImagePixelCount v81 = &unk_1EE389990;
          int v82 = (void *)(v81 + 24);
          *(void *)(v81 + 24) = &unk_1EE36BEF0;
          *(_OWORD *)(v81 + 64) = 0u;
          *(_OWORD *)(v81 + 80) = 0u;
          *(_DWORD *)(v81 + 32) = v21;
          *(_DWORD *)(v81 + 36) = v175;
          *(_DWORD *)(v81 + 40) = 1;
          *(void *)(v81 + 48) = v80 + 4 * v76 * v188;
          *(unsigned char *)(v81 + 56) = 0;
          uint64_t v83 = v175;
          if (!v175) {
            goto LABEL_142;
          }
        }
        else
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&src, v21, v175, 1, 1);
          int v79 = (int *)src.data;
          vImagePixelCount height = src.height;
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&src, v21, v175, 1, 1);
          uint64_t v83 = v175;
          int v82 = src.data;
          vImagePixelCount v81 = src.height;
          uint64_t v84 = (void *)*((void *)src.data + 3);
          vImagePixelCount v85 = *((int *)src.data + 3) * (uint64_t)*((int *)src.data + 2) * *((int *)src.data + 4);
          src.int data = (void *)(*(void *)(v179 + 24) + 2 * v76 * v188);
          src.vImagePixelCount height = 1;
          src.width = v85;
          src.rowBytes = 2 * v85;
          dest.int data = v84;
          dest.vImagePixelCount height = 1;
          dest.width = v85;
          dest.rowBytes = 4 * v85;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          if (!v175) {
            goto LABEL_142;
          }
        }
        uint64_t v86 = 0;
        int v87 = 0;
        do
        {
          if (v21)
          {
            uint64_t v88 = 4 * v87;
            uint64_t v89 = (float *)(v72 + 16 * v86);
            float v90 = *v89;
            float v91 = v89[1];
            float v92 = v89[2];
            float v93 = v89[3];
            int v94 = (float *)(*((void *)v79 + 3) + v88);
            uint64_t v95 = (float *)(v82[3] + v88);
            unsigned int v96 = v21;
            float v97 = 1.0 / v93;
            do
            {
              float v98 = *v95++;
              *v94++ = v91 + (float)((float)(v97 * (float)(v98 - v92)) * v90);
              --v96;
            }
            while (v96);
          }
          ++v86;
          v87 += v21;
        }
        while (v86 != v83);
LABEL_142:
        int v99 = *(_DWORD *)(a1 + 332);
        if (v99 == 1)
        {
          LODWORD(src.data) = 0;
          uint64_t v100 = v175 * v21;
          vDSP_vthr(*((const float **)v79 + 3), 1, (const float *)&src, *((float **)v79 + 3), 1, __N);
LABEL_151:
          if (*(_DWORD *)(a1 + 328)) {
            BOOL v104 = v100 == 0;
          }
          else {
            BOOL v104 = 1;
          }
          if (!v104)
          {
            int v105 = (float *)*((void *)v79 + 3);
            do
            {
              *int v105 = tanhf(*v105);
              ++v105;
              --v100;
            }
            while (v100);
          }
          goto LABEL_157;
        }
        uint64_t v100 = v175 * v21;
        if (v99 != 2) {
          goto LABEL_151;
        }
        if (__N)
        {
          uint64_t v101 = (float *)*((void *)v79 + 3);
          uint64_t v102 = v175 * v21;
          do
          {
            float v103 = *v101;
            if (*v101 <= 0.0) {
              float v103 = v103 * *(float *)(a1 + 340);
            }
            *v101++ = v103;
            --v102;
          }
          while (v102);
          goto LABEL_151;
        }
LABEL_157:
        if (!v192)
        {
          uint64_t v106 = v79[3] * (uint64_t)v79[2] * v79[4];
          if (v106)
          {
            int v107 = (int *)*((void *)v79 + 3);
            float v108 = (_WORD *)(*(void *)(v178 + 24) + v75);
            do
            {
              int v109 = *v107++;
              _S0 = v109;
              __asm { FCVT            H0, S0 }
              *v108++ = _S0;
              --v106;
            }
            while (v106);
          }
        }
        if (v81) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v81);
        }
        if (height) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)height);
        }
        ++v76;
        v75 += v180;
        uint64_t v10 = v192;
        if (v76 == v186) {
          goto LABEL_247;
        }
      }
    }
LABEL_257:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("batchnorm_coefs is neither provided as a second input nor set as kernel property");
  }
  int v28 = *(_DWORD *)(a1 + 312);
  if (!v28)
  {
    if (*(void *)(a4 + 8) - *(void *)a4 < 0x30uLL)
    {
      uint64_t v160 = "3 inputs (x, gamma, beta) are needed if training && training_instancenorm == MVA_NONE";
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, (uint64_t *)(*(void *)a4 + 16));
      uint64_t v73 = *((void *)src.data + 3);
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, (uint64_t *)(*(void *)a4 + 32));
      uint64_t v166 = *((void *)src.data + 3);
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
      if (*(void *)(a3 + 8) - *(void *)a3 >= 0x30uLL)
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, (uint64_t *)(*(void *)a3 + 16));
        int v165 = src.data;
        uint64_t v162 = (std::__shared_weak_count *)src.height;
        if (*(void *)(a3 + 8) - *(void *)a3 < 0x21uLL)
        {
          uint64_t v161 = 0;
          int v168 = 0;
        }
        else
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, (uint64_t *)(*(void *)a3 + 32));
          int v168 = src.data;
          uint64_t v161 = (std::__shared_weak_count *)src.height;
        }
        if (!v175)
        {
LABEL_243:
          if (v161) {
            nitro::nitro_function::nitro_function(v161);
          }
          if (v162) {
            nitro::nitro_function::nitro_function(v162);
          }
          goto LABEL_247;
        }
        unsigned int v111 = 0;
        uint64_t v112 = (int)__N;
        float v113 = 1.0 / (float)(v21 * v27);
        uint64_t v176 = 0;
        uint64_t v189 = 2 * (int)__N;
        vDSP_Length __Nb = 4 * (int)__N;
        uint64_t v167 = v73;
        while (1)
        {
          unsigned int v174 = v111;
          uint64_t v114 = 2 * v111;
          if (v10)
          {
            uint64_t v181 = 0;
            int v170 = 0;
            int v172 = 0;
            int v191 = 0;
          }
          else
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v21, v27, 1, 1);
            uint64_t v181 = src.data;
            int v172 = (std::__shared_weak_count *)src.height;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v21, v27, 1, 1);
            int v191 = src.data;
            int v170 = (std::__shared_weak_count *)src.height;
            if (v27)
            {
              unsigned int v115 = 0;
              uint64_t v116 = v114;
              uint64_t v117 = v27;
              do
              {
                uint64_t v118 = (void *)(v191[2] + 4 * v115);
                src.int data = (void *)(*(void *)(v179 + 24) + v116);
                src.vImagePixelCount height = 1;
                src.width = v21;
                src.rowBytes = 2 * v21;
                dest.int data = v118;
                dest.vImagePixelCount height = 1;
                dest.width = v21;
                dest.rowBytes = 4 * v21;
                vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                v115 += v21;
                v116 += v189;
                --v117;
              }
              while (v117);
              uint64_t v73 = v167;
            }
          }
          if (v73) {
            break;
          }
          uint64_t v121 = *(void *)(a1 + 400);
          uint64_t v120 = v168;
          if (v121)
          {
            uint64_t v119 = (float *)(*(void *)(v121 + 16) + 4 * (4 * v176));
            goto LABEL_180;
          }
          float v122 = 1.0;
LABEL_181:
          if (v166)
          {
            uint64_t v123 = (float *)(v166 + 4 * v176);
LABEL_185:
            float v125 = *v123;
            goto LABEL_186;
          }
          uint64_t v124 = *(void *)(a1 + 400);
          if (v124)
          {
            uint64_t v123 = (float *)(*(void *)(v124 + 16) + 4 * (4 * v176) + 4);
            goto LABEL_185;
          }
          float v125 = 0.0;
LABEL_186:
          uint64_t v126 = v193;
          if (v27)
          {
            unsigned int v127 = 0;
            uint64_t v128 = v27;
            uint64_t v129 = 4 * v174;
            uint64_t v130 = v176 * v21;
            float v131 = 0.0;
            do
            {
              if (v126) {
                BOOL v132 = (const float *)(*(void *)(v126 + 24) + v129);
              }
              else {
                BOOL v132 = (const float *)(v191[2] + 4 * v127);
              }
              LODWORD(src.data) = 0;
              vDSP_sve(v132, 1, (float *)&src, v21);
              float v131 = v131 + (float)(*(float *)&src.data * v113);
              v127 += v21;
              v129 += __Nb;
              --v128;
              uint64_t v126 = v193;
            }
            while (v128);
            uint64_t v133 = 0;
            float v134 = 0.0;
            LODWORD(v27) = v186;
            while (1)
            {
              if (v126)
              {
                int v135 = (float *)(*(void *)(v126 + 24) + 4 * v133 * v112 + 4 * v130);
                if (!v10) {
                  goto LABEL_197;
                }
              }
              else
              {
                int v135 = (float *)(v191[2] + 4 * v133 * v21);
                if (!v10)
                {
LABEL_197:
                  uint64_t v136 = (const float *)(v181[2] + 4 * v133 * v21);
                  goto LABEL_198;
                }
              }
              uint64_t v136 = (const float *)(*(void *)(v10 + 24) + 4 * v133 * v112 + 4 * v130);
LABEL_198:
              uint64_t v137 = (float *)v136;
              uint64_t v138 = v21;
              if (v21)
              {
                do
                {
                  float v139 = *v135++;
                  *v137++ = (float)(v139 - v131) * (float)(v139 - v131);
                  --v138;
                }
                while (v138);
              }
              LODWORD(src.data) = 0;
              vDSP_sve(v136, 1, (float *)&src, v21);
              float v134 = v134 + (float)(*(float *)&src.data * v113);
              ++v133;
              uint64_t v126 = v193;
              if (v133 == v186)
              {
                uint64_t v120 = v168;
                goto LABEL_203;
              }
            }
          }
          float v131 = 0.0;
          float v134 = 0.0;
LABEL_203:
          if (v165) {
            *(float *)(v165[3] + 4 * v176) = v131;
          }
          float v140 = sqrtf(v134 + *(float *)(a1 + 316));
          if (v120) {
            *(float *)(v120[3] + 4 * v176) = v140;
          }
          if (v27)
          {
            uint64_t v141 = 0;
            uint64_t v142 = v176 * v21;
            float v143 = 1.0 / v140;
            do
            {
              if (v193)
              {
                int v144 = (float *)(*(void *)(v193 + 24) + 4 * v141 * v112 + 4 * v142);
                if (v10) {
                  goto LABEL_211;
                }
              }
              else
              {
                int v144 = (float *)(v191[2] + 4 * v141 * v21);
                if (v10)
                {
LABEL_211:
                  float v145 = (float *)(*(void *)(v10 + 24) + 4 * v141 * v112 + 4 * v142);
                  goto LABEL_214;
                }
              }
              float v145 = (float *)(v181[2] + 4 * v141 * v21);
LABEL_214:
              uint64_t v146 = v145;
              uint64_t v147 = v21;
              if (v21)
              {
                do
                {
                  float v148 = *v144++;
                  *v146++ = v125 + (float)((float)(v143 * (float)(v148 - v131)) * v122);
                  --v147;
                }
                while (v147);
              }
              int v149 = *(_DWORD *)(a1 + 332);
              if (v149 == 1)
              {
                LODWORD(src.data) = 0;
                vDSP_vthr(v145, 1, (const float *)&src, v145, 1, v21);
LABEL_224:
                if (*(_DWORD *)(a1 + 328)) {
                  BOOL v153 = v21 == 0;
                }
                else {
                  BOOL v153 = 1;
                }
                if (!v153)
                {
                  uint64_t v154 = v145;
                  uint64_t v155 = v21;
                  do
                  {
                    *uint64_t v154 = tanhf(*v154);
                    ++v154;
                    --v155;
                  }
                  while (v155);
                }
                uint64_t v10 = v192;
                if (!v192 && v21)
                {
                  uint64_t v156 = (_WORD *)(*(void *)(v178 + 24) + v114);
                  uint64_t v157 = v21;
                  do
                  {
                    float v158 = *v145++;
                    _S0 = v158;
                    __asm { FCVT            H0, S0 }
                    *v156++ = LOWORD(_S0);
                    --v157;
                  }
                  while (v157);
                }
                goto LABEL_234;
              }
              if (v149 != 2) {
                goto LABEL_224;
              }
              int v150 = v145;
              uint64_t v151 = v21;
              if (v21)
              {
                do
                {
                  float v152 = *v150;
                  if (*v150 <= 0.0) {
                    float v152 = v152 * *(float *)(a1 + 340);
                  }
                  *v150++ = v152;
                  --v151;
                }
                while (v151);
                goto LABEL_224;
              }
LABEL_234:
              ++v141;
              v114 += v189;
            }
            while (v141 != v186);
          }
          if (v170) {
            nitro::nitro_function::nitro_function(v170);
          }
          uint64_t v27 = v186;
          uint64_t v73 = v167;
          if (v172) {
            nitro::nitro_function::nitro_function(v172);
          }
          unsigned int v111 = v174 + v21;
          if (++v176 == v185) {
            goto LABEL_243;
          }
        }
        uint64_t v119 = (float *)(v73 + 4 * v176);
        uint64_t v120 = v168;
LABEL_180:
        float v122 = *v119;
        goto LABEL_181;
      }
      uint64_t v160 = "3 outputs (y, x_mean, sqrt(x_var + eps) are needed if training && training_instancenorm == MVA_NONE";
    }
    Espresso::throw_exception_selector<Espresso::generic_error>(v160);
  }
  if (v28 == 3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("MVA_L2 not supported");
  }
  if (v14)
  {
    float v29 = 1.0 / (float)v21;
    uint64_t v169 = (int)__N;
    uint64_t v177 = 0;
    uint64_t v171 = 2 * (int)__N;
    uint64_t v173 = 0;
    while (!v175)
    {
LABEL_115:
      v177 += v171;
      if (++v173 == v186) {
        goto LABEL_247;
      }
    }
    unsigned int v30 = 0;
    uint64_t v31 = 0;
    uint64_t v190 = v173 * v169;
    int __Na = v175 * v173;
    while (1)
    {
      if (v10)
      {
        uint64_t v32 = 0;
        long long v33 = 0;
        long long v34 = 0;
        long long v35 = 0;
      }
      else
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v21, 1, 1, 1);
        uint64_t v32 = src.data;
        long long v33 = (std::__shared_weak_count *)src.height;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&src, v21, 1, 1, 1);
        long long v34 = src.data;
        long long v35 = (std::__shared_weak_count *)src.height;
        long long v36 = (void *)*((void *)src.data + 2);
        src.int data = (void *)(*(void *)(v179 + 24) + 2 * v190 + 2 * v31 * v21);
        src.vImagePixelCount height = 1;
        src.width = v21;
        src.rowBytes = 2 * v21;
        dest.int data = v36;
        dest.vImagePixelCount height = 1;
        dest.width = v21;
        dest.rowBytes = 4 * v21;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      }
      uint64_t v37 = *(void *)(a1 + 400);
      if (v37)
      {
        uint64_t v38 = *(void *)(v37 + 16);
        float v39 = *(float *)(v38 + 4 * (4 * v31));
        float v40 = *(float *)(v38 + 4 * ((4 * v31) | 1u));
      }
      else
      {
        float v40 = 0.0;
        float v39 = 1.0;
      }
      if (*(_DWORD *)(a1 + 368))
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, (uint64_t *)(*(void *)a3 + 16));
        if (*(_DWORD *)(a1 + 368))
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&dest, (uint64_t *)(*(void *)a3 + 32));
          goto LABEL_69;
        }
      }
      else
      {
        src.int data = 0;
        src.vImagePixelCount height = 0;
      }
      dest.int data = 0;
      dest.vImagePixelCount height = 0;
LABEL_69:
      if (v193)
      {
        uint64_t v41 = (const float *)(*(void *)(v193 + 24) + 4 * v190 + 4 * v31 * v21);
        if (v10) {
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v41 = (const float *)*((void *)v34 + 2);
        if (v10)
        {
LABEL_71:
          uint64_t v42 = (float *)(*(void *)(v10 + 24) + 4 * v190 + 4 * v31 * v21);
          goto LABEL_74;
        }
      }
      uint64_t v42 = (float *)*((void *)v32 + 2);
LABEL_74:
      float __C = 0.0;
      vDSP_sve(v41, 1, &__C, v21);
      float v43 = (float)(__C * v29) + 0.0;
      int v44 = *(_DWORD *)(a1 + 312);
      if (v44 == 1)
      {
        int v48 = (float *)v41;
        uint64_t v49 = v42;
        uint64_t v50 = v21;
        if (v21)
        {
          do
          {
            float v51 = *v48++;
            *v49++ = (float)(v51 - v43) * (float)(v51 - v43);
            --v50;
          }
          while (v50);
        }
        float __C = 0.0;
        vDSP_sve(v42, 1, &__C, v21);
        float v52 = (float)(__C * v29) + 0.0;
        if (v21)
        {
          float v53 = 1.0 / sqrtf(v52 + *(float *)(a1 + 316));
          uint64_t v54 = v42;
          uint64_t v55 = v21;
          do
          {
            float v56 = *v41++;
            *v54++ = v40 + (float)((float)(v53 * (float)(v56 - v43)) * v39);
            --v55;
          }
          while (v55);
        }
        if (src.data) {
          *(float *)(*((void *)src.data + 3) + 4 * (__Na + v31)) = v43;
        }
        if (dest.data) {
          *(float *)(*((void *)dest.data + 3) + 4 * (__Na + v31)) = 1.0
        }
                                                                                    / sqrtf(v52 + *(float *)(a1 + 316));
      }
      else if (v44 == 2)
      {
        std::string v45 = v42;
        uint64_t v46 = v21;
        if (v21)
        {
          do
          {
            float v47 = *v41++;
            *v45++ = v40 + (float)((float)(v47 - v43) * v39);
            --v46;
          }
          while (v46);
        }
      }
      int v57 = *(_DWORD *)(a1 + 332);
      if (v57 == 1)
      {
        float __B = 0.0;
        vDSP_vthr(v42, 1, &__B, v42, 1, v21);
LABEL_96:
        if (*(_DWORD *)(a1 + 328)) {
          _ZF = v21 == 0;
        }
        else {
          _ZF = 1;
        }
        if (!_ZF)
        {
          __int16 v62 = v42;
          uint64_t v63 = v21;
          do
          {
            *__int16 v62 = tanhf(*v62);
            ++v62;
            --v63;
          }
          while (v63);
        }
        uint64_t v10 = v192;
        if (!v192 && v21)
        {
          uint64_t v64 = (_WORD *)(*(void *)(v178 + 24) + v177 + 2 * v30);
          uint64_t v65 = v21;
          do
          {
            float v66 = *v42++;
            _S0 = v66;
            __asm { FCVT            H0, S0 }
            *v64++ = LOWORD(_S0);
            --v65;
          }
          while (v65);
        }
        goto LABEL_106;
      }
      if (v57 != 2) {
        goto LABEL_96;
      }
      uint64_t v58 = v42;
      uint64_t v59 = v21;
      if (v21)
      {
        do
        {
          float v60 = *v58;
          if (*v58 <= 0.0) {
            float v60 = v60 * *(float *)(a1 + 340);
          }
          *v58++ = v60;
          --v59;
        }
        while (v59);
        goto LABEL_96;
      }
LABEL_106:
      if (dest.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
      }
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
      if (v35) {
        nitro::nitro_function::nitro_function(v35);
      }
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      ++v31;
      v30 += v21;
      if (v31 == v175) {
        goto LABEL_115;
      }
    }
  }
LABEL_247:
  if (v164) {
    nitro::nitro_function::nitro_function(v164);
  }
  if (v163) {
    nitro::nitro_function::nitro_function(v163);
  }
  if (v197) {
    nitro::nitro_function::nitro_function(v197);
  }
  if (v199) {
    nitro::nitro_function::nitro_function(v199);
  }
}

void sub_192B4EB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (a35) {
    nitro::nitro_function::nitro_function(a35);
  }
  if (a37) {
    nitro::nitro_function::nitro_function(a37);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::batchnorm_kernel_cpu::~batchnorm_kernel_cpu(Espresso::batchnorm_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3507D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3507D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

void Espresso::activation_kernel_cpu::__launch_gru_activation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v68 = 0;
    BOOL v69 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v68, *(uint64_t **)a3);
  }
  uint64_t v6 = a4[1];
  if (v6 == *a4)
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    unint64_t v7 = v6;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v66, *a4);
    uint64_t v6 = *a4;
    unint64_t v7 = a4[1];
  }
  if ((unint64_t)((char *)v7 - (char *)v6) <= 0x10)
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, v6 + 2);
    uint64_t v6 = *a4;
    if ((unint64_t)((char *)a4[1] - (char *)*a4) > 0x20)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v62, v6 + 4);
      uint64_t v6 = *a4;
      goto LABEL_12;
    }
  }
  uint64_t v62 = 0;
  uint64_t v63 = 0;
LABEL_12:
  Espresso::abstract_blob_container::shape((char *)&v51, *v6);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v40, (const Espresso::layer_shape *)&v51, 0);
  if (DWORD1(v41) > 3)
  {
    if (SDWORD1(v41) == 5)
    {
      uint64_t v33 = SDWORD1(v40) * (uint64_t)(int)v40;
      uint64_t v9 = SHIDWORD(v40) * (uint64_t)(int)v41 * SDWORD2(v40);
    }
    else if (SDWORD1(v41) == 4)
    {
      uint64_t v33 = (int)v40;
      uint64_t v9 = SDWORD2(v40) * (uint64_t)SHIDWORD(v40) * SDWORD1(v40);
    }
    else
    {
      uint64_t v33 = 0;
LABEL_27:
      uint64_t v9 = 0;
    }
  }
  else
  {
    switch(DWORD1(v41))
    {
      case 1:
        uint64_t v8 = 1;
        goto LABEL_24;
      case 2:
        uint64_t v8 = (int)v40;
        goto LABEL_24;
      case 3:
        uint64_t v8 = SDWORD1(v40) * (uint64_t)(int)v40;
        goto LABEL_24;
      case 4:
        uint64_t v8 = SDWORD1(v40) * (uint64_t)(int)v40 * SDWORD2(v40);
        goto LABEL_24;
      case 5:
        uint64_t v8 = SDWORD1(v40) * (uint64_t)(int)v40 * SDWORD2(v40) * SHIDWORD(v40);
LABEL_24:
        uint64_t v33 = v8;
        if (DWORD1(v41)) {
          goto LABEL_25;
        }
        goto LABEL_27;
      default:
        uint64_t v33 = 0;
        if (!DWORD1(v41)) {
          goto LABEL_27;
        }
LABEL_25:
        uint64_t v9 = *((int *)&v40 + SDWORD1(v41) - 1);
        break;
    }
  }
  if (*((void *)&v53 + 1))
  {
    *(void *)&long long v54 = *((void *)&v53 + 1);
    operator delete(*((void **)&v53 + 1));
  }
  int v32 = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))(*(void *)(*(void *)(a1 + 8) + 8));
  if (v33)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v10 = 0;
    uint64_t v30 = v62;
    uint64_t v31 = v64;
    uint64_t v27 = v68;
    uint64_t v28 = v66;
    uint64_t v36 = 8 * v9;
    uint64_t v29 = 12 * v9;
    uint64_t v35 = 4 * v9;
    do
    {
      uint64_t v11 = *(void *)(v31 + 24);
      uint64_t v12 = *(void *)(v30 + 24);
      uint64_t v34 = v10;
      if (v32 == 100)
      {
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v39 = 0u;
        *((void *)&v40 + 1) = *(int *)(v28 + 8);
        *(void *)&long long v41 = 1;
        *((void *)&v51 + 1) = *((void *)&v40 + 1);
        *(void *)&long long v52 = 1;
        LODWORD(v49) = 65568;
        LODWORD(v60) = 65568;
        *((void *)&v59 + 1) = *(void *)(v27 + 24);
        *((void *)&v48 + 1) = *(void *)(v28 + 24);
        if (BNNSFunctionGRUFusedGates() == -1) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("activation_kernel_cpu: BNNSFunctionGRUFusedGates call failed");
        }
      }
      else if (v9)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(v27 + 24) + v37;
        uint64_t v15 = *(void *)(v28 + 24) + v37;
        uint64_t v16 = v12 + v36;
        uint64_t v17 = v11 + v36;
        uint64_t v18 = v12 + v35;
        uint64_t v19 = v11 + v35;
        uint64_t v20 = v12 + v38;
        uint64_t v21 = v11 + v38;
        do
        {
          float v22 = *(float *)(v19 + 4 * v13) + *(float *)(v18 + 4 * v13);
          float v23 = expf(-(float)(*(float *)(v21 + 4 * v13) + *(float *)(v20 + 4 * v13))) + 1.0;
          float v24 = -v22;
          float v25 = 1.0 / v23;
          float v26 = expf(v24);
          *(float *)(v14 + 4 * v13) = (float)((float)(1.0 - v25)
                                            * tanhf(*(float *)(v16 + 4 * v13)+ (float)((float)(1.0 / (float)(v26 + 1.0)) * *(float *)(v17 + 4 * v13))))+ (float)(v25 * *(float *)(v15 + 4 * v13));
          ++v13;
        }
        while (v9 != v13);
      }
      uint64_t v10 = v34 + 1;
      v37 += 4 * v9;
      v36 += v29;
      v35 += v29;
      v38 += v29;
    }
    while (v34 + 1 != v33);
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
}

void sub_192B4F2BC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 144);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 - 128);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 - 112);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  _Unwind_Resume(a1);
}

void Espresso::activation_kernel_cpu::__launch_lstm_ifog_activation(void *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v6 = a3[1];
  if (v6 == *a3)
  {
    uint64_t v96 = 0;
    float v97 = 0;
    uint64_t v8 = v6;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v96, *a3);
    uint64_t v6 = *a3;
    uint64_t v8 = a3[1];
  }
  if ((unint64_t)((char *)v8 - (char *)v6) <= 0x10)
  {
    uint64_t v94 = 0;
    uint64_t v95 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v94, v6 + 2);
  }
  uint64_t v9 = a4[1];
  if (v9 == *a4)
  {
    uint64_t v92 = 0;
    float v93 = 0;
    uint64_t v10 = v9;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v92, *a4);
    uint64_t v9 = *a4;
    uint64_t v10 = a4[1];
  }
  if ((unint64_t)((char *)v10 - (char *)v9) <= 0x10)
  {
    uint64_t v90 = 0;
    float v91 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v90, v9 + 2);
    uint64_t v9 = *a4;
    if ((unint64_t)((char *)a4[1] - (char *)*a4) > 0x20)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v88, v9 + 4);
      uint64_t v9 = *a4;
      goto LABEL_15;
    }
  }
  uint64_t v88 = 0;
  uint64_t v89 = 0;
LABEL_15:
  Espresso::abstract_blob_container::shape((char *)v79, *v9);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v82, (const Espresso::layer_shape *)v79, 0);
  if (v87 <= 3)
  {
    switch(v87)
    {
      case 1u:
        uint64_t v11 = 1;
        goto LABEL_29;
      case 2u:
        uint64_t v11 = SLODWORD(v82);
        goto LABEL_29;
      case 3u:
        uint64_t v11 = v83 * (uint64_t)SLODWORD(v82);
        goto LABEL_29;
      case 4u:
        uint64_t v11 = v83 * (uint64_t)SLODWORD(v82) * v84;
        goto LABEL_29;
      case 5u:
        uint64_t v11 = v83 * (uint64_t)SLODWORD(v82) * v84 * v85;
LABEL_29:
        uint64_t v64 = v11;
        if (v87) {
          goto LABEL_30;
        }
        goto LABEL_26;
      default:
        uint64_t v64 = 0;
        if (!v87) {
          goto LABEL_26;
        }
LABEL_30:
        uint64_t v12 = *((int *)&v82 + (int)v87 - 1);
        break;
    }
    goto LABEL_31;
  }
  if (v87 == 5)
  {
    uint64_t v64 = v83 * (uint64_t)SLODWORD(v82);
    uint64_t v12 = v85 * (uint64_t)v86 * v84;
    goto LABEL_31;
  }
  if (v87 == 4)
  {
    uint64_t v64 = SLODWORD(v82);
    uint64_t v12 = v84 * (uint64_t)v85 * v83;
LABEL_31:
    unint64_t v65 = v12;
    goto LABEL_32;
  }
  uint64_t v64 = 0;
LABEL_26:
  unint64_t v65 = 0;
LABEL_32:
  if (__p)
  {
    vImagePixelCount v81 = __p;
    operator delete(__p);
  }
  long long v54 = a1 + 51;
  if (!a1[51])
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(v79, v65, 1, 1, 1);
    uint64_t v13 = (std::__shared_weak_count *)a1[52];
    *(_OWORD *)long long v54 = *(_OWORD *)v79;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  long long v55 = a1;
  int v63 = (***(uint64_t (****)(void))(a1[1] + 8))(*(void *)(a1[1] + 8));
  if (v64)
  {
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = v65 >> 2;
    float __B = (float *)a1 + 77;
    vDSP_Length v66 = (int)(v65 >> 2);
    if (v65 >> 2 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v65 >> 2;
    }
    vDSP_Length __N = v65 >> 2;
    uint64_t v74 = v16;
    uint64_t v61 = v90;
    uint64_t v62 = v92;
    uint64_t v59 = v96;
    uint64_t v60 = v88;
    uint64_t v58 = v94;
    uint64_t v69 = 12 * (v65 >> 2);
    uint64_t v56 = 4 * v65;
    uint64_t v68 = 8 * v15;
    uint64_t v57 = 4 * v15;
    uint64_t v67 = 4 * v15;
    do
    {
      uint64_t v17 = *(void *)(v62 + 24);
      uint64_t v18 = *(void *)(v61 + 24);
      uint64_t v19 = *(void *)(v60 + 24);
      uint64_t v20 = *(void *)(v59 + 24);
      uint64_t v21 = *(void *)(v58 + 24);
      uint64_t v72 = v14;
      if (v63 == 100)
      {
        float v22 = (const float *)(v17 + 4 * v14 * v65);
        float v23 = (const float *)(v18 + 4 * v14 * v65);
        float v24 = *(float **)(*v54 + 16);
        vDSP_vadd(v22, 1, v23, 1, v24, 1, __N);
        float v25 = &v24[__N];
        vDSP_vadd(&v22[__N], 1, &v23[__N], 1, v25, 1, __N);
        float v26 = &v24[2 * (v65 >> 2)];
        vDSP_vadd(&v22[2 * (v65 >> 2)], 1, &v23[2 * (v65 >> 2)], 1, v26, 1, __N);
        uint64_t v27 = &v22[3 * (v65 >> 2)];
        uint64_t v28 = &v24[3 * (v65 >> 2)];
        vDSP_vadd(v27, 1, &v23[3 * (v65 >> 2)], 1, v28, 1, __N);
        vDSP_vsadd(v25, 1, __B, v25, 1, __N);
        LODWORD(v79[0]) = v65 >> 2;
        float v82 = -2.0;
        HIDWORD(v99[0]) = 1065353216;
        vDSP_vsmul(v28, 1, &v82, v28, 1, v66);
        vvexpf(v28, v28, (const int *)v79);
        vDSP_vsadd(v28, 1, (const float *)v99 + 1, v28, 1, SLODWORD(v79[0]));
        vvrecf(v28, v28, (const int *)v79);
        float __C = -1.0;
        LODWORD(v99[0]) = 0x40000000;
        vDSP_vsmsa(v28, 1, (const float *)v99, &__C, v28, 1, SLODWORD(v79[0]));
        if (*((_DWORD *)v55 + 76) == 18)
        {
          v79[0] = 0.2;
          float v82 = 0.5;
          v99[0] = 1065353216;
          vDSP_Length v29 = v65 >> 2;
          vDSP_vsmsa(v24, 1, v79, &v82, v24, 1, __N);
          vDSP_vclip(v24, 1, (const float *)v99 + 1, (const float *)v99, v24, 1, __N);
          vDSP_vsmsa(v25, 1, v79, &v82, v25, 1, __N);
          vDSP_vclip(v25, 1, (const float *)v99 + 1, (const float *)v99, v25, 1, __N);
          vDSP_vsmsa(v26, 1, v79, &v82, v26, 1, __N);
          vDSP_vclip(v26, 1, (const float *)v99 + 1, (const float *)v99, v26, 1, __N);
          uint64_t v30 = v72;
        }
        else
        {
          LODWORD(v79[0]) = v65 >> 2;
          float v82 = 1.0;
          vDSP_vneg(v24, 1, v24, 1, v66);
          vvexpf(v24, v24, (const int *)v79);
          vDSP_vsadd(v24, 1, &v82, v24, 1, SLODWORD(v79[0]));
          vvrecf(v24, v24, (const int *)v79);
          LODWORD(v79[0]) = v65 >> 2;
          float v82 = 1.0;
          vDSP_vneg(v25, 1, v25, 1, v66);
          vvexpf(v25, v25, (const int *)v79);
          vDSP_vsadd(v25, 1, &v82, v25, 1, SLODWORD(v79[0]));
          vvrecf(v25, v25, (const int *)v79);
          LODWORD(v79[0]) = v65 >> 2;
          float v82 = 1.0;
          vDSP_vneg(v26, 1, v26, 1, v66);
          vvexpf(v26, v26, (const int *)v79);
          vDSP_vsadd(v26, 1, &v82, v26, 1, SLODWORD(v79[0]));
          vvrecf(v26, v26, (const int *)v79);
          uint64_t v30 = v72;
          vDSP_Length v29 = v65 >> 2;
        }
        vDSP_Length v53 = v30 * v29;
        vDSP_vmma(v25, 1, (const float *)(v19 + 4 * v30 * v29), 1, v24, 1, v28, 1, (float *)(v20 + 4 * v30 * v29), 1, v29);
        LODWORD(v79[0]) = v65 >> 2;
        float v82 = -2.0;
        HIDWORD(v99[0]) = 1065353216;
        vDSP_vsmul((const float *)(v20 + 4 * v53), 1, &v82, (float *)(v21 + 4 * v53), 1, v66);
        vvexpf((float *)(v21 + 4 * v53), (const float *)(v21 + 4 * v53), (const int *)v79);
        vDSP_vsadd((const float *)(v21 + 4 * v53), 1, (const float *)v99 + 1, (float *)(v21 + 4 * v53), 1, SLODWORD(v79[0]));
        vvrecf((float *)(v21 + 4 * v53), (const float *)(v21 + 4 * v53), (const int *)v79);
        float __C = -1.0;
        LODWORD(v99[0]) = 0x40000000;
        vDSP_vsmsa((const float *)(v21 + 4 * v53), 1, (const float *)v99, &__C, (float *)(v21 + 4 * v53), 1, SLODWORD(v79[0]));
        vDSP_vmul((const float *)(v21 + 4 * v53), 1, v26, 1, (float *)(v21 + 4 * v53), 1, __N);
      }
      else if (v65 >= 4)
      {
        uint64_t v31 = 0;
        uint64_t v77 = v21 + v70;
        int v76 = *((_DWORD *)v55 + 76);
        uint64_t v75 = v20 + v70;
        uint64_t v32 = v19 + v70;
        uint64_t v33 = v18 + v69;
        uint64_t v34 = v17 + v69;
        uint64_t v35 = v18 + v68;
        uint64_t v36 = v17 + v68;
        uint64_t v37 = v18 + v67;
        uint64_t v38 = v17 + v67;
        uint64_t v39 = v18 + v71;
        uint64_t v40 = v17 + v71;
        do
        {
          float v41 = *(float *)(v40 + 4 * v31) + *(float *)(v39 + 4 * v31);
          float v42 = (float)(*(float *)(v38 + 4 * v31) + *(float *)(v37 + 4 * v31)) + *__B;
          float v43 = *(float *)(v36 + 4 * v31) + *(float *)(v35 + 4 * v31);
          float v44 = *(float *)(v34 + 4 * v31);
          float v45 = *(float *)(v33 + 4 * v31);
          if (v76 == 18)
          {
            float v46 = (float)(v41 * 0.2) + 0.5;
            if (v46 < 0.0) {
              float v46 = 0.0;
            }
            if (v46 <= 1.0) {
              float v47 = v46;
            }
            else {
              float v47 = 1.0;
            }
            float v48 = (float)(v42 * 0.2) + 0.5;
            if (v48 < 0.0) {
              float v48 = 0.0;
            }
            if (v48 <= 1.0) {
              float v49 = v48;
            }
            else {
              float v49 = 1.0;
            }
            float v50 = (float)(v43 * 0.2) + 0.5;
            if (v50 < 0.0) {
              float v50 = 0.0;
            }
            if (v50 <= 1.0) {
              float v51 = v50;
            }
            else {
              float v51 = 1.0;
            }
          }
          else
          {
            float v47 = 1.0 / (float)(expf(-v41) + 1.0);
            float v49 = 1.0 / (float)(expf(-v42) + 1.0);
            float v51 = 1.0 / (float)(expf(-v43) + 1.0);
          }
          float v52 = (float)(v47 * tanhf(v44 + v45)) + (float)(v49 * *(float *)(v32 + 4 * v31));
          *(float *)(v75 + 4 * v31) = v52;
          *(float *)(v77 + 4 * v31++) = v51 * tanhf(v52);
        }
        while (v74 != v31);
      }
      uint64_t v14 = v72 + 1;
      v70 += v57;
      v69 += v56;
      v68 += v56;
      v67 += v56;
      v71 += v56;
    }
    while (v72 + 1 != v64);
  }
  if (v89) {
    nitro::nitro_function::nitro_function(v89);
  }
  if (v91) {
    nitro::nitro_function::nitro_function(v91);
  }
  if (v93) {
    nitro::nitro_function::nitro_function(v93);
  }
  if (v95) {
    nitro::nitro_function::nitro_function(v95);
  }
  if (v97) {
    nitro::nitro_function::nitro_function(v97);
  }
}

void sub_192B4FD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  float v47 = *(std::__shared_weak_count **)(v45 - 224);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  float v48 = *(std::__shared_weak_count **)(v45 - 208);
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  float v49 = *(std::__shared_weak_count **)(v45 - 192);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  float v50 = *(std::__shared_weak_count **)(v45 - 176);
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::axpby_kernel_cpu::set_alpha_beta(uint64_t this, float a2, float a3, int a4)
{
  *(float *)(this + 280) = a2;
  *(float *)(this + 284) = a3;
  *(_DWORD *)(this + 288) = a4;
  return this;
}

void Espresso::axpby_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a3 + 32))(**a3);
  if (v7 != (*(unsigned int (**)(uint64_t))(*(void *)**a4 + 32))(**a4)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Incompatible operands CP");
  }
  if (v7 != 4)
  {
    if (v7) {
      return;
    }
    if (a4[1] == *a4)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v31, *a4);
    }
    if (a3[1] == *a3)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29, *a3);
    }
    if (*(_DWORD *)(a1 + 288))
    {
      uint64_t v10 = 0;
      vDSP_Length v11 = *(int *)(v29 + 8);
      do
      {
        v11 *= *(int *)(v29 + 12 + v10);
        v10 += 4;
      }
      while (v10 != 12);
      vDSP_vsmul(*(const float **)(v31 + 24), 1, (const float *)(a1 + 280), *(float **)(v29 + 24), 1, v11);
      goto LABEL_31;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, *a4 + 2);
    uint64_t v18 = 0;
    vDSP_Length __N = *(int *)(v29 + 8);
    do
    {
      __N *= *(int *)(v29 + 12 + v18);
      v18 += 4;
    }
    while (v18 != 12);
    vDSP_vsmsma(*(const float **)(v31 + 24), 1, (const float *)(a1 + 280), *(const float **)(v27 + 24), 1, (const float *)(a1 + 284), *(float **)(v29 + 24), 1, __N);
LABEL_29:
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    goto LABEL_31;
  }
  if (a4[1] == *a4)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v31, *a4);
  }
  if (a3[1] == *a3)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v29, *a3);
  }
  if (!*(_DWORD *)(a1 + 288))
  {
    if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x10)
    {
      uint64_t v20 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v27, *a4 + 2);
      uint64_t v20 = v27;
    }
    unint64_t v21 = 0;
    uint64_t v22 = v29;
    uint64_t v23 = v31;
    uint64_t v24 = v29 + 12;
    while (1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = *(int *)(v22 + 8);
      do
      {
        v26 *= *(int *)(v24 + v25);
        v25 += 4;
      }
      while (v25 != 12);
      if (v21 >= v26) {
        break;
      }
      LOBYTE(v8) = *(unsigned char *)(*(void *)(v23 + 24) + v21);
      LOBYTE(v9) = *(unsigned char *)(*(void *)(v20 + 24) + v21);
      float v9 = *(float *)(a1 + 284) * (float)LODWORD(v9);
      float v8 = v9 + (float)((float)LODWORD(v8) * *(float *)(a1 + 280));
      *(unsigned char *)(*(void *)(v22 + 24) + v21++) = (int)v8;
    }
    goto LABEL_29;
  }
  unint64_t v12 = 0;
  uint64_t v13 = v29;
  uint64_t v14 = v31;
  uint64_t v15 = v29 + 12;
  while (1)
  {
    uint64_t v16 = 0;
    unint64_t v17 = *(int *)(v13 + 8);
    do
    {
      v17 *= *(int *)(v15 + v16);
      v16 += 4;
    }
    while (v16 != 12);
    if (v12 >= v17) {
      break;
    }
    LOBYTE(v8) = *(unsigned char *)(*(void *)(v14 + 24) + v12);
    float v8 = *(float *)(a1 + 280) * (float)LODWORD(v8);
    *(unsigned char *)(*(void *)(v13 + 24) + v12++) = (int)v8;
  }
LABEL_31:
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
}

void sub_192B501FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::axpby_kernel_cpu::~axpby_kernel_cpu(Espresso::axpby_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::context_transfer_kernel_cpu::~context_transfer_kernel_cpu(Espresso::context_transfer_kernel_cpu *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::reshape_kernel_cpu::get_runtime_type_config(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7 && *(_DWORD *)(v6 + 8) <= 4u && (0xCCCCCCCCCCCCCCCDLL * (v7 >> 3) < 2 || *(_DWORD *)(v6 + 48) <= 4u))
  {
    long long v12 = *(_OWORD *)v6;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    std::string __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
    float v8 = 0;
    uint64_t v9 = 0;
    v10[0] = 0;
    v10[1] = &v8;
    char v11 = 0;
    float v8 = (char *)operator new(0x28uLL);
    uint64_t v9 = (uint64_t)v8;
    v10[0] = v8 + 40;
    uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>((uint64_t)v10, (uint64_t)&v12, (uint64_t)&v16, (uint64_t)v8);
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(a4, a2, (uint64_t *)&v8);
    *(void *)&long long v12 = &v8;
    std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  else
  {
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
  }
}

void sub_192B5043C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

void Espresso::reshape_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  *((void *)&v273 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v266 = 0;
  long long __p = 0u;
  *(_OWORD *)&v264[8] = 0u;
  long long v263 = xmmword_192DC3600;
  *(void *)BOOL v264 = 0xFFFFFFFF00000001;
  Espresso::abstract_blob_container::shape((char *)v260, **a4);
  Espresso::generic_reshape_kernel::top_shape_using_auto_axis(a1, v260, (uint64_t)&v267);
  long long v263 = v267;
  *(_OWORD *)BOOL v264 = v268;
  *(void *)&v264[16] = v269;
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v270;
  uint64_t v266 = v271;
  uint64_t v271 = 0;
  long long v270 = 0uLL;
  if (v261)
  {
    uint64_t v262 = v261;
    operator delete(v261);
  }
  uint64_t v9 = *a4;
  float v8 = a4[1];
  if ((char *)v8 - (char *)*a4 == 32 && !*(unsigned char *)(a1 + 312))
  {
    Espresso::abstract_blob_container::shape((char *)&v267, *v9);
    Espresso::abstract_blob_container::shape(v272, (*a4)[2]);
    uint64_t v250 = 0;
    uint64_t v251 = 0;
    p_int shared_owners = 0;
    int v248 = &v250;
    LOBYTE(v249) = 0;
    uint64_t v250 = (std::__shared_weak_count *)operator new(0x80uLL);
    uint64_t v251 = v250;
    p_int shared_owners = &v250[5].__shared_owners_;
    uint64_t v251 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&p_shared_owners, &v267, &v273, (uint64_t)v250);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, std::__shared_weak_count **))(*(void *)a1 + 64))(&v253, a1, &v250);
    uint64_t v10 = *(void *)(v253 + 32);
    long long v11 = *(_OWORD *)(v253 + 16);
    long long v263 = *(_OWORD *)v253;
    *(_OWORD *)BOOL v264 = v11;
    *(void *)&v264[16] = v10;
    if (&v263 != (long long *)v253) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(v253 + 40), *(void *)(v253 + 48), (uint64_t)(*(void *)(v253 + 48) - *(void *)(v253 + 40)) >> 2);
    }
    int v248 = (std::__shared_weak_count **)&v253;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v248);
    int v248 = &v250;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v248);
    for (uint64_t i = 0; i != -128; i -= 64)
    {
      uint64_t v13 = *(void **)&v272[i + 40];
      if (v13)
      {
        *(void *)&v272[i + 48] = v13;
        operator delete(v13);
      }
    }
    uint64_t v9 = *a4;
    float v8 = a4[1];
  }
  if ((char *)v8 - (char *)v9 != 32 || !*(unsigned char *)(a1 + 312)) {
    goto LABEL_183;
  }
  if (!*(void *)(*(void *)a2 + 64)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: dynamic reshape requires interpreter");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v250, v9 + 2);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v248, *a4 + 2);
  Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v245, *a4 + 2);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v258, *a4 + 2);
  uint64_t v14 = v250;
  uint64_t v234 = a1;
  int v235 = a3;
  if (v250)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    long long v267 = 0uLL;
    *(void *)&long long v268 = 0;
    while (1)
    {
      uint64_t v19 = 0;
      unint64_t shared_owners_low = SLODWORD(v14->__shared_owners_);
      do
      {
        shared_owners_low *= *(int *)((char *)&v14->__shared_owners_ + v19 + 4);
        v19 += 4;
      }
      while (v19 != 12);
      if (shared_owners_low <= v18)
      {
        *(void *)&long long v267 = v16;
        goto LABEL_58;
      }
      float v21 = *((float *)&v14[1].~__shared_weak_count + v18);
      if (v21 <= 0.0)
      {
        if (fabsf(v21 + 1.0) >= 0.000001)
        {
          *(void *)&long long v268 = v17;
          *(void *)&long long v267 = v16;
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
        }
        if ((unint64_t)v15 < v17)
        {
          *uint64_t v15 = -1;
          uint64_t v23 = v15 + 1;
          goto LABEL_28;
        }
        uint64_t v29 = v15 - v16;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
        {
          *(void *)&long long v268 = v17;
          *(void *)&long long v267 = v16;
          *((void *)&v267 + 1) = v15;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v17 - (void)v16) >> 1 > v30) {
          unint64_t v30 = (uint64_t)(v17 - (void)v16) >> 1;
        }
        if (v17 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v30;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v31 = (int *)(v27 + 4 * v29);
        int *v31 = -1;
        uint64_t v24 = v31 + 1;
        while (v15 != v16)
        {
          int v33 = *--v15;
          *--uint64_t v31 = v33;
        }
      }
      else
      {
        int v22 = (int)(float)(v21 + 0.5);
        if ((unint64_t)v15 < v17)
        {
          *uint64_t v15 = v22;
          uint64_t v23 = v15 + 1;
LABEL_28:
          uint64_t v24 = v23;
          goto LABEL_56;
        }
        uint64_t v25 = v15 - v16;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
        {
          *(void *)&long long v268 = v17;
          *(void *)&long long v267 = v16;
          *((void *)&v267 + 1) = v15;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v17 - (void)v16) >> 1 > v26) {
          unint64_t v26 = (uint64_t)(v17 - (void)v16) >> 1;
        }
        if (v17 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v31 = (int *)(v27 + 4 * v25);
        int *v31 = v22;
        uint64_t v24 = v31 + 1;
        while (v15 != v16)
        {
          int v32 = *--v15;
          *--uint64_t v31 = v32;
        }
      }
      unint64_t v17 = v27 + 4 * v28;
      if (v16) {
        operator delete(v16);
      }
      uint64_t v16 = v31;
LABEL_56:
      ++v18;
      uint64_t v15 = v24;
    }
  }
  uint64_t v34 = (void **)v248;
  if (v248)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    unint64_t v38 = 0;
    long long v267 = 0uLL;
    *(void *)&long long v268 = 0;
    while (1)
    {
      uint64_t v39 = 0;
      unint64_t v40 = *((int *)v34 + 2);
      do
      {
        v40 *= *(int *)((char *)v34 + v39 + 12);
        v39 += 4;
      }
      while (v39 != 12);
      if (v40 <= v38) {
        break;
      }
      if (!*((_WORD *)v34[3] + v38))
      {
        *(void *)&long long v268 = v37;
        *(void *)&long long v267 = v36;
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
      }
      int v41 = (int)(float)((float)*((unsigned __int16 *)v34[3] + v38) + 0.5);
      if ((unint64_t)v35 >= v37)
      {
        uint64_t v43 = v35 - v36;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
        {
          *(void *)&long long v268 = v37;
          *(void *)&long long v267 = v36;
          *((void *)&v267 + 1) = v35;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v37 - (void)v36) >> 1 > v44) {
          unint64_t v44 = (uint64_t)(v37 - (void)v36) >> 1;
        }
        if (v37 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v45);
        }
        else {
          uint64_t v46 = 0;
        }
        float v47 = (int *)(v45 + 4 * v43);
        int *v47 = v41;
        float v42 = v47 + 1;
        while (v35 != v36)
        {
          int v48 = *--v35;
          *--float v47 = v48;
        }
        unint64_t v37 = v45 + 4 * v46;
        if (v36) {
          operator delete(v36);
        }
        uint64_t v36 = v47;
      }
      else
      {
        *uint64_t v35 = v41;
        float v42 = v35 + 1;
      }
      ++v38;
      uint64_t v35 = v42;
    }
    *(void *)&long long v267 = v36;
    *((void *)&v267 + 1) = v35;
    goto LABEL_84;
  }
  uint64_t v67 = v245;
  if (!v245)
  {
    if (v258)
    {
      Espresso::reshape_kernel_cpu::__compute_dynamic_shape<Espresso::blob<unsigned char,4>>((int **)&v267, (uint64_t)&v258);
      long long v49 = v267;
    }
    else
    {
      long long v49 = 0uLL;
    }
    goto LABEL_85;
  }
  uint64_t v15 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  unint64_t v70 = 0;
  long long v267 = 0uLL;
  *(void *)&long long v268 = 0;
  while (1)
  {
    uint64_t v71 = 0;
    unint64_t v72 = *(int *)(v67 + 8);
    do
    {
      v72 *= *(int *)(v67 + 12 + v71);
      v71 += 4;
    }
    while (v71 != 12);
    if (v72 <= v70) {
      break;
    }
    int v73 = *(_DWORD *)(*(void *)(v67 + 24) + 4 * v70);
    if (v73 < 1)
    {
      if (v73 >= -1) {
        int v76 = v73 + 1;
      }
      else {
        int v76 = ~v73;
      }
      if (v76 > 0)
      {
        *(void *)&long long v268 = v69;
        *(void *)&long long v267 = v68;
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
      }
      if ((unint64_t)v15 < v69)
      {
        *uint64_t v15 = -1;
        uint64_t v75 = v15 + 1;
        goto LABEL_136;
      }
      uint64_t v82 = v15 - v68;
      unint64_t v83 = v82 + 1;
      if ((unint64_t)(v82 + 1) >> 62)
      {
        *(void *)&long long v268 = v69;
        *(void *)&long long v267 = v68;
        *((void *)&v267 + 1) = v15;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v69 - (void)v68) >> 1 > v83) {
        unint64_t v83 = (uint64_t)(v69 - (void)v68) >> 1;
      }
      if (v69 - (unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v83;
      }
      if (v80) {
        unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v80);
      }
      else {
        uint64_t v81 = 0;
      }
      int v84 = (int *)(v80 + 4 * v82);
      int *v84 = -1;
      uint64_t v77 = v84 + 1;
      while (v15 != v68)
      {
        int v86 = *--v15;
        *--int v84 = v86;
      }
    }
    else
    {
      int v74 = (int)(float)((float)v73 + 0.5);
      if ((unint64_t)v15 < v69)
      {
        *uint64_t v15 = v74;
        uint64_t v75 = v15 + 1;
LABEL_136:
        uint64_t v77 = v75;
        goto LABEL_164;
      }
      uint64_t v78 = v15 - v68;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 62)
      {
        *(void *)&long long v268 = v69;
        *(void *)&long long v267 = v68;
        *((void *)&v267 + 1) = v15;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v69 - (void)v68) >> 1 > v79) {
        unint64_t v79 = (uint64_t)(v69 - (void)v68) >> 1;
      }
      if (v69 - (unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v79;
      }
      if (v80) {
        unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v80);
      }
      else {
        uint64_t v81 = 0;
      }
      int v84 = (int *)(v80 + 4 * v78);
      int *v84 = v74;
      uint64_t v77 = v84 + 1;
      while (v15 != v68)
      {
        int v85 = *--v15;
        *--int v84 = v85;
      }
    }
    unint64_t v69 = v80 + 4 * v81;
    if (v68) {
      operator delete(v68);
    }
    uint64_t v68 = v84;
LABEL_164:
    ++v70;
    uint64_t v15 = v77;
  }
  *(void *)&long long v267 = v68;
LABEL_58:
  *((void *)&v267 + 1) = v15;
LABEL_84:
  long long v49 = v267;
  a1 = v234;
  a3 = v235;
LABEL_85:
  int v236 = (int *)*((void *)&v49 + 1);
  float v50 = (int *)v49;
  Espresso::abstract_blob_container::shape((char *)&v267, **a4);
  int v51 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v267);
  if ((void)v270)
  {
    *((void *)&v270 + 1) = v270;
    operator delete((void *)v270);
  }
  if (v50 == v236)
  {
    int v53 = 1;
  }
  else
  {
    unsigned int v52 = 0;
    int v53 = 1;
    long long v54 = v50;
    do
    {
      int v56 = *v54++;
      int v55 = v56;
      BOOL v57 = v56 <= 1;
      if (v56 < 1) {
        ++v52;
      }
      if (v57) {
        int v55 = 1;
      }
      v53 *= v55;
    }
    while (v54 != v236);
    if (v52 > 1) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("reshape_kernel_cpu: Invalid dst shape");
    }
  }
  unint64_t v58 = v236 - v50;
  if ((unint64_t)((char *)v236 - (char *)v50) >= 4)
  {
    if (v58 <= 1) {
      uint64_t v59 = 1;
    }
    else {
      uint64_t v59 = v236 - v50;
    }
    uint64_t v60 = v50;
    int v61 = v51 / v53;
    do
    {
      if (*v60 == -1) {
        *uint64_t v60 = v61;
      }
      ++v60;
      --v59;
    }
    while (v59);
  }
  if (!*(_DWORD *)(a1 + 308))
  {
    if ((int)v58 <= 0)
    {
      LODWORD(v263) = 1;
    }
    else
    {
      LODWORD(v263) = *v50;
      if (v58 != 1)
      {
        DWORD1(v263) = v50[1];
        if (v58 > 2)
        {
          DWORD2(v263) = v50[2];
          if (v58 != 3)
          {
            HIDWORD(v263) = v50[3];
            if (v58 < 5) {
              int v66 = 1;
            }
            else {
              int v66 = v50[4];
            }
            goto LABEL_169;
          }
LABEL_168:
          int v66 = 1;
          HIDWORD(v263) = 1;
LABEL_169:
          *(_DWORD *)BOOL v264 = v66;
          goto LABEL_170;
        }
LABEL_167:
        DWORD2(v263) = 1;
        goto LABEL_168;
      }
    }
    DWORD1(v263) = 1;
    goto LABEL_167;
  }
  uint64_t v253 = 0;
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  if (v50 != v236)
  {
    if (v58 <= 1) {
      uint64_t v62 = 1;
    }
    else {
      uint64_t v62 = v236 - v50;
    }
    int v63 = &v253;
    uint64_t v64 = v50;
    do
    {
      int v65 = *v64++;
      *(_DWORD *)int v63 = v65;
      int v63 = (uint64_t *)((char *)v63 + 4);
      --v62;
    }
    while (v62);
  }
  HIDWORD(v255) = v236 - v50;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v253, 0, (uint64_t)&v267);
  long long v263 = v267;
  *(_OWORD *)BOOL v264 = v268;
  *(void *)&v264[16] = v269;
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v270;
  uint64_t v266 = v271;
LABEL_170:
  unsigned int v87 = (std::__shared_weak_count *)operator new(0x98uLL);
  v87->__shared_weak_owners_ = 0;
  v87->__shared_owners_ = 0;
  v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
  *(_OWORD *)&v87[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[3].__shared_owners_ = 0u;
  *(_OWORD *)&v87[1].__shared_owners_ = 0u;
  v87[2].std::__shared_count = 0u;
  v87[4].std::__shared_count = 0u;
  *(_OWORD *)&v87[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v87[5].__shared_owners_ = 0u;
  v87[5].__shared_weak_owners_ = 0;
  v87[6].__vftable = 0;
  LODWORD(v87[2].__vftable) = 1065353216;
  v87[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v87[4].__vftable = 0;
  v87[4].__shared_owners_ = 0;
  v87[2].__shared_weak_owners_ = 0;
  v87[3].__vftable = 0;
  LOBYTE(v87[3].__shared_weak_owners_) = 0;
  v87[3].__shared_owners_ = 0;
  v87[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
  v87[5].__vftable = 0;
  v87[5].__shared_owners_ = 0;
  LOBYTE(v87[6].__vftable) = 0;
  LOBYTE(v87[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
  uint64_t v88 = **a3;
  uint64_t v256 = v87 + 1;
  uint64_t v257 = v87;
  atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, long long *, std::__shared_weak_count **))(*(void *)v88 + 16))(v88, &v263, &v256);
  if (v257) {
    nitro::nitro_function::nitro_function(v257);
  }
  nitro::nitro_function::nitro_function(v87);
  if (v50) {
    operator delete(v50);
  }
  if (v259) {
    nitro::nitro_function::nitro_function(v259);
  }
  if (v246) {
    nitro::nitro_function::nitro_function(v246);
  }
  if (v249) {
    nitro::nitro_function::nitro_function(v249);
  }
  if (v251) {
    nitro::nitro_function::nitro_function(v251);
  }
  uint64_t v9 = *a4;
LABEL_183:
  uint64_t v89 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v263);
  Espresso::abstract_blob_container::shape((char *)&v267, *v9);
  uint64_t v90 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v267);
  if ((void)v270)
  {
    *((void *)&v270 + 1) = v270;
    operator delete((void *)v270);
  }
  if (v89 != v90)
  {
    Espresso::abstract_blob_container::shape((char *)&v267, **a4);
    Espresso::abstract_blob_container::shape((char *)&v253, **a4);
    Espresso::abstract_blob_container::shape((char *)&v250, **a4);
    Espresso::abstract_blob_container::shape((char *)&v248, **a4);
    Espresso::abstract_blob_container::shape((char *)&v245, **a4);
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int,int,int,int,int &,int &,int &,int &,int &>(v267, SHIDWORD(v253), (int)v251, SHIDWORD(v249), v247, v263, SDWORD1(v263), SDWORD2(v263), SHIDWORD(v263), *(int *)v264);
  }
  uint64_t v91 = *(unsigned int *)(a1 + 304);
  if (v91 != 1)
  {
    if (v91) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("reshape_kernel_cpu: invalid mode %d", v91);
    }
    uint64_t v92 = (*a3)[1];
    v244[0] = **a3;
    v244[1] = v92;
    if (v92) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
    }
    float v93 = (std::__shared_weak_count *)(*a4)[1];
    v243[0] = **a4;
    v243[1] = (uint64_t)v93;
    if (v93) {
      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::copy_kernel_cpu::__compute_blob(v244, v243);
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    if (v92)
    {
      uint64_t v94 = (std::__shared_weak_count *)v92;
      goto LABEL_394;
    }
    goto LABEL_395;
  }
  if (a4[1] == *a4)
  {
    uint64_t v253 = 0;
    uint64_t v254 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v253, *a4);
  }
  if (a3[1] == *a3)
  {
    uint64_t v250 = 0;
    uint64_t v251 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v250, *a3);
  }
  if (a4[1] == *a4)
  {
    int v248 = 0;
    uint64_t v249 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v248, *a4);
  }
  if (a3[1] == *a3)
  {
    uint64_t v245 = 0;
    unint64_t v246 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v245, *a3);
  }
  if (a4[1] == *a4)
  {
    std::string v258 = 0;
    int v259 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v258, *a4);
  }
  if (a3[1] == *a3)
  {
    uint64_t v241 = 0;
    v242 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v241, *a3);
  }
  if (a4[1] == *a4)
  {
    int v239 = 0;
    int v240 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v239, *a4);
  }
  if (a3[1] == *a3)
  {
    uint64_t v237 = 0;
    uint64_t v238 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v237, *a3);
  }
  uint64_t v95 = v253;
  if (v253 && v250)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v267, *(_DWORD *)(v253 + 16), *(_DWORD *)(v253 + 8), *(_DWORD *)(v253 + 12), *(_DWORD *)(v253 + 20));
    uint64_t v96 = v254;
    if (v254) {
      atomic_fetch_add_explicit(&v254->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v97 = (std::__shared_weak_count *)*((void *)&v267 + 1);
    uint64_t v98 = v267;
    if (*((void *)&v267 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v267 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v99 = *(_DWORD *)(v95 + 20);
    if (v99 >= 1)
    {
      int v100 = 0;
      int v101 = 0;
      int v102 = *(_DWORD *)(v95 + 8);
      int v103 = *(_DWORD *)(v95 + 12);
      uint64_t v104 = *(unsigned int *)(v95 + 16);
      int v105 = *(_DWORD **)(v98 + 24);
      do
      {
        if (v103 >= 1)
        {
          int v106 = 0;
          int v107 = v100;
          do
          {
            if (v102 >= 1)
            {
              int v108 = 0;
              int v109 = v107;
              int v110 = v105;
              do
              {
                if ((int)v104 >= 1)
                {
                  uint64_t v111 = *(void *)(v95 + 24);
                  int v112 = v109;
                  uint64_t v113 = v104;
                  do
                  {
                    *v110++ = *(_DWORD *)(v111 + 4 * v112);
                    v112 += v103 * v102;
                    --v113;
                  }
                  while (v113);
                }
                ++v108;
                ++v109;
              }
              while (v108 != v102);
            }
            v105 += (int)v104 * v102;
            ++v106;
            v107 += v102;
          }
          while (v106 != v103);
        }
        ++v101;
        v100 += v104 * v102 * v103;
      }
      while (v101 != v99);
    }
    if (v97) {
      nitro::nitro_function::nitro_function(v97);
    }
    if (v96) {
      nitro::nitro_function::nitro_function(v96);
    }
    *(_DWORD *)(v98 + 8) = DWORD2(v263);
    *(void *)(v98 + 12) = v263;
    *(_DWORD *)(v98 + 20) = *(_DWORD *)v264 * HIDWORD(v263);
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v115 = v250;
    uint64_t v114 = v251;
    if (v251) {
      atomic_fetch_add_explicit(&v251->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int shared_weak_owners_high = HIDWORD(v115->__shared_weak_owners_);
    if (shared_weak_owners_high >= 1)
    {
      int v117 = 0;
      int v118 = 0;
      int shared_owners = v115->__shared_owners_;
      int shared_owners_high = HIDWORD(v115->__shared_owners_);
      uint64_t shared_weak_owners_low = LODWORD(v115->__shared_weak_owners_);
      float v122 = *(int **)(v98 + 24);
      do
      {
        if (shared_owners_high >= 1)
        {
          int v123 = 0;
          int v124 = v117;
          do
          {
            if (shared_owners >= 1)
            {
              int v125 = 0;
              int v126 = v124;
              unsigned int v127 = v122;
              do
              {
                if ((int)shared_weak_owners_low >= 1)
                {
                  uint64_t v128 = v115[1].__vftable;
                  int v129 = v126;
                  uint64_t v130 = shared_weak_owners_low;
                  do
                  {
                    int v131 = *v127++;
                    *((_DWORD *)&v128->~__shared_weak_count + v129) = v131;
                    v129 += shared_owners_high * shared_owners;
                    --v130;
                  }
                  while (v130);
                }
                ++v125;
                ++v126;
              }
              while (v125 != shared_owners);
            }
            v122 += (int)shared_weak_owners_low * shared_owners;
            ++v123;
            v124 += shared_owners;
          }
          while (v123 != shared_owners_high);
        }
        ++v118;
        v117 += shared_weak_owners_low * shared_owners * shared_owners_high;
      }
      while (v118 != shared_weak_owners_high);
    }
    goto LABEL_375;
  }
  BOOL v132 = (void **)v248;
  if (v248 && v245)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v267, *((_DWORD *)v248 + 4), *((_DWORD *)v248 + 2), *((_DWORD *)v248 + 3), *((_DWORD *)v248 + 5));
    uint64_t v133 = v249;
    if (v249) {
      atomic_fetch_add_explicit(&v249->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v97 = (std::__shared_weak_count *)*((void *)&v267 + 1);
    uint64_t v134 = v267;
    if (*((void *)&v267 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v267 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v135 = *((_DWORD *)v132 + 5);
    if (v135 >= 1)
    {
      int v136 = 0;
      int v137 = 0;
      int v138 = *((_DWORD *)v132 + 2);
      int v139 = *((_DWORD *)v132 + 3);
      uint64_t v140 = *((unsigned int *)v132 + 4);
      uint64_t v141 = *(_WORD **)(v134 + 24);
      do
      {
        if (v139 >= 1)
        {
          int v142 = 0;
          int v143 = v136;
          do
          {
            if (v138 >= 1)
            {
              int v144 = 0;
              int v145 = v143;
              uint64_t v146 = v141;
              do
              {
                if ((int)v140 >= 1)
                {
                  uint64_t v147 = v132[3];
                  int v148 = v145;
                  uint64_t v149 = v140;
                  do
                  {
                    *v146++ = v147[v148];
                    v148 += v139 * v138;
                    --v149;
                  }
                  while (v149);
                }
                ++v144;
                ++v145;
              }
              while (v144 != v138);
            }
            v141 += (int)v140 * v138;
            ++v142;
            v143 += v138;
          }
          while (v142 != v139);
        }
        ++v137;
        v136 += v140 * v138 * v139;
      }
      while (v137 != v135);
    }
    if (v97) {
      nitro::nitro_function::nitro_function(v97);
    }
    if (v133) {
      nitro::nitro_function::nitro_function(v133);
    }
    *(_DWORD *)(v134 + 8) = DWORD2(v263);
    *(void *)(v134 + 12) = v263;
    *(_DWORD *)(v134 + 20) = *(_DWORD *)v264 * HIDWORD(v263);
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v150 = v245;
    uint64_t v114 = v246;
    if (v246) {
      atomic_fetch_add_explicit(&v246->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v151 = *(_DWORD *)(v150 + 20);
    if (v151 >= 1)
    {
      int v152 = 0;
      int v153 = 0;
      int v154 = *(_DWORD *)(v150 + 8);
      int v155 = *(_DWORD *)(v150 + 12);
      uint64_t v156 = *(unsigned int *)(v150 + 16);
      uint64_t v157 = *(__int16 **)(v134 + 24);
      do
      {
        if (v155 >= 1)
        {
          int v158 = 0;
          int v159 = v152;
          do
          {
            if (v154 >= 1)
            {
              int v160 = 0;
              int v161 = v159;
              uint64_t v162 = v157;
              do
              {
                if ((int)v156 >= 1)
                {
                  uint64_t v163 = *(void *)(v150 + 24);
                  int v164 = v161;
                  uint64_t v165 = v156;
                  do
                  {
                    __int16 v166 = *v162++;
                    *(_WORD *)(v163 + 2 * v164) = v166;
                    v164 += v155 * v154;
                    --v165;
                  }
                  while (v165);
                }
                ++v160;
                ++v161;
              }
              while (v160 != v154);
            }
            v157 += (int)v156 * v154;
            ++v158;
            v159 += v154;
          }
          while (v158 != v155);
        }
        ++v153;
        v152 += v156 * v154 * v155;
      }
      while (v153 != v151);
    }
    goto LABEL_375;
  }
  uint64_t v167 = v258;
  if (v258 && v241)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v267, v258[4], v258[2], v258[3], v258[5]);
    int v168 = v259;
    if (v259) {
      atomic_fetch_add_explicit(&v259->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v97 = (std::__shared_weak_count *)*((void *)&v267 + 1);
    uint64_t v169 = v267;
    if (*((void *)&v267 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v267 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v170 = v167[5];
    if (v170 >= 1)
    {
      int v171 = 0;
      int v172 = 0;
      int v173 = v167[2];
      int v174 = v167[3];
      uint64_t v175 = v167[4];
      uint64_t v176 = *(_DWORD **)(v169 + 24);
      do
      {
        if (v174 >= 1)
        {
          int v177 = 0;
          int v178 = v171;
          do
          {
            if (v173 >= 1)
            {
              int v179 = 0;
              int v180 = v178;
              uint64_t v181 = v176;
              do
              {
                if ((int)v175 >= 1)
                {
                  uint64_t v182 = *((void *)v167 + 3);
                  int v183 = v180;
                  uint64_t v184 = v175;
                  do
                  {
                    *v181++ = *(_DWORD *)(v182 + 4 * v183);
                    v183 += v174 * v173;
                    --v184;
                  }
                  while (v184);
                }
                ++v179;
                ++v180;
              }
              while (v179 != v173);
            }
            v176 += (int)v175 * v173;
            ++v177;
            v178 += v173;
          }
          while (v177 != v174);
          int v170 = v167[5];
        }
        ++v172;
        v171 += v175 * v173 * v174;
      }
      while (v172 < v170);
    }
    if (v97) {
      nitro::nitro_function::nitro_function(v97);
    }
    if (v168) {
      nitro::nitro_function::nitro_function(v168);
    }
    *(_DWORD *)(v169 + 8) = DWORD2(v263);
    *(void *)(v169 + 12) = v263;
    *(_DWORD *)(v169 + 20) = *(_DWORD *)v264 * HIDWORD(v263);
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v185 = v241;
    uint64_t v114 = v242;
    if (v242) {
      atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v186 = *(_DWORD *)(v185 + 20);
    if (v186 >= 1)
    {
      int v187 = 0;
      int v188 = 0;
      int v189 = *(_DWORD *)(v185 + 8);
      int v190 = *(_DWORD *)(v185 + 12);
      uint64_t v191 = *(unsigned int *)(v185 + 16);
      uint64_t v192 = *(int **)(v169 + 24);
      do
      {
        if (v190 >= 1)
        {
          int v193 = 0;
          int v194 = v187;
          do
          {
            if (v189 >= 1)
            {
              int v195 = 0;
              int v196 = v194;
              BOOL v197 = v192;
              do
              {
                if ((int)v191 >= 1)
                {
                  uint64_t v198 = *(void *)(v185 + 24);
                  int v199 = v196;
                  uint64_t v200 = v191;
                  do
                  {
                    int v201 = *v197++;
                    *(_DWORD *)(v198 + 4 * v199) = v201;
                    v199 += v190 * v189;
                    --v200;
                  }
                  while (v200);
                }
                ++v195;
                ++v196;
              }
              while (v195 != v189);
            }
            v192 += (int)v191 * v189;
            ++v193;
            v194 += v189;
          }
          while (v193 != v190);
          int v186 = *(_DWORD *)(v185 + 20);
        }
        ++v188;
        v187 += v191 * v189 * v190;
      }
      while (v188 < v186);
    }
    goto LABEL_375;
  }
  float v202 = v239;
  if (v239 && v237)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v267, v239[4], v239[2], v239[3], v239[5]);
    uint64_t v203 = v240;
    if (v240) {
      atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v204 = v267;
    if (*((void *)&v267 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v267 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (v202[5] >= 1)
    {
      int v205 = 0;
      int v206 = 0;
      int v207 = v202[2];
      int v208 = v202[3];
      uint64_t v209 = v202[4];
      int v210 = *(unsigned char **)(v204 + 24);
      do
      {
        if (v208 >= 1)
        {
          int v211 = 0;
          int v212 = v205;
          do
          {
            if (v207 >= 1)
            {
              int v213 = 0;
              int v214 = v212;
              unsigned int v215 = v210;
              do
              {
                int v216 = v214;
                uint64_t v217 = v209;
                if ((int)v209 >= 1)
                {
                  do
                  {
                    *v215++ = *(unsigned char *)(*((void *)v202 + 3) + v216);
                    v216 += v208 * v207;
                    --v217;
                  }
                  while (v217);
                }
                ++v213;
                ++v214;
              }
              while (v213 != v207);
            }
            v210 += (int)v209 * v207;
            ++v211;
            v212 += v207;
          }
          while (v211 != v208);
        }
        ++v206;
        v205 += v209 * v207 * v208;
      }
      while (v206 < v202[5]);
    }
    if (*((void *)&v204 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v204 + 1));
    }
    if (v203) {
      nitro::nitro_function::nitro_function(v203);
    }
    uint64_t v218 = v267;
    *(_DWORD *)(v267 + 8) = DWORD2(v263);
    *(void *)(v218 + 12) = v263;
    *(_DWORD *)(v218 + 20) = *(_DWORD *)v264 * HIDWORD(v263);
    float v97 = (std::__shared_weak_count *)*((void *)&v267 + 1);
    if (*((void *)&v267 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v267 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v219 = v237;
    uint64_t v114 = v238;
    if (v238) {
      atomic_fetch_add_explicit(&v238->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(int *)(v219 + 20) >= 1)
    {
      int v220 = 0;
      int v221 = 0;
      int v222 = *(_DWORD *)(v219 + 8);
      int v223 = *(_DWORD *)(v219 + 12);
      uint64_t v224 = *(unsigned int *)(v219 + 16);
      int v225 = *(char **)(v218 + 24);
      do
      {
        if (v223 >= 1)
        {
          int v226 = 0;
          int v227 = v220;
          do
          {
            if (v222 >= 1)
            {
              int v228 = 0;
              int v229 = v227;
              int v230 = v225;
              do
              {
                int v231 = v229;
                uint64_t v232 = v224;
                if ((int)v224 >= 1)
                {
                  do
                  {
                    char v233 = *v230++;
                    *(unsigned char *)(*(void *)(v219 + 24) + v231) = v233;
                    v231 += v223 * v222;
                    --v232;
                  }
                  while (v232);
                }
                ++v228;
                ++v229;
              }
              while (v228 != v222);
            }
            v225 += (int)v224 * v222;
            ++v226;
            v227 += v222;
          }
          while (v226 != v223);
        }
        ++v221;
        v220 += v224 * v222 * v223;
      }
      while (v221 < *(_DWORD *)(v219 + 20));
    }
LABEL_375:
    if (v114) {
      nitro::nitro_function::nitro_function(v114);
    }
    if (v97)
    {
      nitro::nitro_function::nitro_function(v97);
      nitro::nitro_function::nitro_function(v97);
    }
  }
  else if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v263) >= 1)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid blob configuration");
  }
  if (v238) {
    nitro::nitro_function::nitro_function(v238);
  }
  if (v240) {
    nitro::nitro_function::nitro_function(v240);
  }
  if (v242) {
    nitro::nitro_function::nitro_function(v242);
  }
  if (v259) {
    nitro::nitro_function::nitro_function(v259);
  }
  if (v246) {
    nitro::nitro_function::nitro_function(v246);
  }
  if (v249) {
    nitro::nitro_function::nitro_function(v249);
  }
  if (v251) {
    nitro::nitro_function::nitro_function(v251);
  }
  uint64_t v94 = v254;
  if (v254) {
LABEL_394:
  }
    nitro::nitro_function::nitro_function(v94);
LABEL_395:
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
}

void sub_192B51A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60)
{
  if (a60) {
    nitro::nitro_function::nitro_function(a60);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  if (a42) {
    nitro::nitro_function::nitro_function(a42);
  }
  int v61 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v61;
    operator delete(v61);
  }
  _Unwind_Resume(a1);
}

void Espresso::reshape_kernel_cpu::__compute_dynamic_shape<Espresso::blob<unsigned char,4>>(int **a1, uint64_t a2)
{
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  while (1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(int *)(*(void *)a2 + 8);
    do
    {
      v9 *= *(int *)(*(void *)a2 + 12 + v8);
      v8 += 4;
    }
    while (v8 != 12);
    if (v9 <= v7) {
      break;
    }
    if (!*(unsigned char *)(*(void *)(*(void *)a2 + 24) + v7)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel_cpu: invalid input blob");
    }
    int v10 = (int)(float)((float)*(unsigned __int8 *)(*(void *)(*(void *)a2 + 24) + v7) + 0.5);
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v12 = v6 - v4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v5 - (void)v4) >> 1 > v13) {
        unint64_t v13 = (uint64_t)(v5 - (void)v4) >> 1;
      }
      if (v5 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = (int *)(v14 + 4 * v12);
      *uint64_t v16 = v10;
      long long v11 = v16 + 1;
      while (v6 != v4)
      {
        int v17 = *--v6;
        *--uint64_t v16 = v17;
      }
      unint64_t v5 = v14 + 4 * v15;
      *a1 = v16;
      a1[1] = v11;
      a1[2] = (int *)v5;
      if (v4) {
        operator delete(v4);
      }
      uint64_t v4 = v16;
    }
    else
    {
      *uint64_t v6 = v10;
      long long v11 = v6 + 1;
    }
    a1[1] = v11;
    ++v7;
    uint64_t v6 = v11;
  }
}

void sub_192B51F14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int,int,int,int,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
}

void Espresso::reshape_kernel_cpu::~reshape_kernel_cpu(Espresso::reshape_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::reshape_like_kernel_cpu::get_runtime_type_config(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
LABEL_9:
    long long v14 = *(_OWORD *)v6;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    long long __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    uint64_t v12 = (void **)&v10;
    char v13 = 0;
    *(void *)&long long v10 = operator new(0x28uLL);
    *((void *)&v10 + 1) = v10;
    uint64_t v11 = v10 + 40;
    *((void *)&v10 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties const*,Espresso::blob_numerical_properties*>((uint64_t)&v11, (uint64_t)&v14, (uint64_t)&v18, v10);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>(a4, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
    *(_OWORD *)(a4 + 24) = v10;
    *(void *)(a4 + 40) = v11;
    uint64_t v11 = 0;
    long long v10 = 0uLL;
    uint64_t v12 = (void **)&v10;
    std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v12);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
  }
  else
  {
    while (1)
    {
      long long v14 = *(_OWORD *)v6;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
      if (DWORD2(v14) >= 5) {
        Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, (void *)a4);
      }
      if (__p)
      {
        uint64_t v16 = __p;
        operator delete(__p);
      }
      if (DWORD2(v14) >= 5) {
        break;
      }
      v6 += 40;
      if (v6 == v7)
      {
        uint64_t v6 = *a2;
        goto LABEL_9;
      }
    }
  }
}

void sub_192B52174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  a13 = &a9;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::reshape_like_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (std::__shared_weak_count *)(*a3)[1];
  uint64_t v17 = **a3;
  uint64_t v18 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v7 = (void **)&v10;
  LOBYTE(v8) = 0;
  long long v10 = operator new(0x10uLL);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 2;
  uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v12, &v17, &v19, v10);
  uint64_t v6 = (std::__shared_weak_count *)(*a4)[1];
  uint64_t v15 = **a4;
  uint64_t v16 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  char v13 = &v7;
  char v14 = 0;
  uint64_t v7 = (void **)operator new(0x10uLL);
  uint64_t v8 = v7;
  unint64_t v9 = v7 + 2;
  uint64_t v8 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v9, &v15, &v17, v7);
  Espresso::copy_kernel_cpu::__compute((uint64_t *)&v10, &v7);
  char v13 = &v7;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  uint64_t v7 = (void **)&v10;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
}

void sub_192B52328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void ***a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  a16 = &a10;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  a10 = (void **)&a13;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(void *)(v19 - 48)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v19 - 48));
  }
  _Unwind_Resume(a1);
}

void Espresso::reshape_like_kernel_cpu::~reshape_like_kernel_cpu(Espresso::reshape_like_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::tile_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  if (a3[1] == *a3) {
    long long v89 = 0uLL;
  }
  else {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v89, *a3);
  }
  uint64_t v8 = a4[1];
  if (v8 == *a4)
  {
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    unint64_t v9 = v8;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v87, *a4);
    uint64_t v8 = *a4;
    unint64_t v9 = a4[1];
  }
  if ((unint64_t)((char *)v9 - (char *)v8) <= 0x10)
  {
    uint64_t v85 = 0;
    int v86 = 0;
    goto LABEL_38;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v85, v8 + 2);
  if (v85)
  {
    if (!*(void *)(*(void *)a2 + 64)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("tile_kernel_cpu: dynamic parameters require interpreter");
    }
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(v85 + 8);
    do
    {
      v11 *= *(_DWORD *)(v85 + 12 + v10);
      v10 += 4;
    }
    while (v10 != 12);
    if (v11 <= 0)
    {
      *(_DWORD *)(a1 + 280) = 1;
    }
    else
    {
      uint64_t v12 = *(void *)(v85 + 24);
      *(_DWORD *)(a1 + 280) = (int)*(float *)(v12 + 4 * (v11 - 1));
      if (v11 != 1)
      {
        *(_DWORD *)(a1 + 284) = (int)*(float *)(v12 + 4 * (v11 - 2));
        if (v11 > 2)
        {
          *(_DWORD *)(a1 + 288) = (int)*(float *)(v12 + 4 * (v11 - 3));
          if (v11 != 3)
          {
            *(_DWORD *)(a1 + 292) = (int)*(float *)(v12 + 4 * (v11 - 4));
            float v13 = 1.0;
            if (v11 >= 5) {
              float v13 = *(float *)(v12 + 4 * (v11 - 5));
            }
            goto LABEL_23;
          }
LABEL_22:
          *(_DWORD *)(a1 + 292) = 1;
          float v13 = 1.0;
LABEL_23:
          *(_DWORD *)(a1 + 296) = (int)v13;
          Espresso::abstract_blob_container::shape((char *)&v77, **a4);
          Espresso::abstract_blob_container::shape((char *)v74, **a3);
          int v14 = *(_DWORD *)(a1 + 284) * v78;
          v74[0] = *(_DWORD *)(a1 + 280) * v77;
          v74[1] = v14;
          int v15 = *(_DWORD *)(a1 + 292) * v80;
          v74[2] = *(_DWORD *)(a1 + 288) * v79;
          v74[3] = v15;
          v74[4] = *(_DWORD *)(a1 + 296) * v81;
          v74[5] = v82;
          Espresso::abstract_blob_container::shape(v71, **a3);
          BOOL v16 = Espresso::layer_shape::operator==((uint64_t)v71, (uint64_t)v74);
          if (__p)
          {
            int v73 = __p;
            operator delete(__p);
          }
          if (!v16)
          {
            uint64_t v17 = (std::__shared_weak_count *)operator new(0x98uLL);
            v17->__shared_weak_owners_ = 0;
            v17->__shared_owners_ = 0;
            v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
            *(_OWORD *)&v17[2].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v17[3].__shared_owners_ = 0u;
            *(_OWORD *)&v17[1].__shared_owners_ = 0u;
            v17[2].std::__shared_count = 0u;
            v17[4].std::__shared_count = 0u;
            *(_OWORD *)&v17[4].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v17[5].__shared_owners_ = 0u;
            v17[5].__shared_weak_owners_ = 0;
            v17[6].__vftable = 0;
            LODWORD(v17[2].__vftable) = 1065353216;
            v17[2].__shared_owners_ = 0x1FFFFFFFFLL;
            v17[4].__vftable = 0;
            v17[4].__shared_owners_ = 0;
            v17[2].__shared_weak_owners_ = 0;
            v17[3].__vftable = 0;
            LOBYTE(v17[3].__shared_weak_owners_) = 0;
            v17[3].__shared_owners_ = 0;
            v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
            v17[5].__vftable = 0;
            v17[5].__shared_owners_ = 0;
            LOBYTE(v17[6].__vftable) = 0;
            LOBYTE(v17[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
            uint64_t v18 = **a3;
            unint64_t v69 = v17 + 1;
            unint64_t v70 = v17;
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            (*(void (**)(uint64_t, _DWORD *, std::__shared_weak_count **))(*(void *)v18 + 16))(v18, v74, &v69);
            if (v70) {
              nitro::nitro_function::nitro_function(v70);
            }
            if (a3[1] == *a3)
            {
              long long v19 = 0uLL;
            }
            else
            {
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v71, *a3);
              long long v19 = *(_OWORD *)v71;
            }
            uint64_t v20 = (std::__shared_weak_count *)*((void *)&v89 + 1);
            long long v89 = v19;
            if (v20) {
              nitro::nitro_function::nitro_function(v20);
            }
            nitro::nitro_function::nitro_function(v17);
          }
          if (v75)
          {
            int v76 = v75;
            operator delete(v75);
          }
          if (v83)
          {
            int v84 = v83;
            operator delete(v83);
          }
          goto LABEL_38;
        }
LABEL_21:
        *(_DWORD *)(a1 + 288) = 1;
        goto LABEL_22;
      }
    }
    *(_DWORD *)(a1 + 284) = 1;
    goto LABEL_21;
  }
LABEL_38:
  uint64_t v21 = v89;
  if ((void)v89)
  {
    uint64_t v22 = v87;
    if (v87)
    {
      uint64_t v23 = (int *)**a4;
      uint64_t v24 = v23[2];
      unint64_t v66 = v23[3];
      unint64_t v61 = v23[4];
      unint64_t v56 = v23[5];
      unint64_t v50 = v23[6];
      Espresso::abstract_blob_container::shape((char *)&v77, **a3);
      if (*(_DWORD *)(a1 + 296))
      {
        int v25 = v78 * v77 * v79;
        unint64_t v26 = (char *)(*(void *)(v21 + 24) + 4 * v25 * v80 * v81);
        unint64_t v27 = (char *)(*(void *)(v22 + 24) + 4 * (int)v66 * (uint64_t)(int)v24 * v61 * v56 * v50);
        uint64_t v28 = (int)v50 * (uint64_t)(v25 * v80);
        size_t v51 = 4 * v28;
        uint64_t v52 = -v28;
        uint64_t v29 = (int)v56 * (uint64_t)v25;
        size_t v57 = 4 * v29;
        uint64_t v58 = -v29;
        uint64_t v30 = (int)v61 * (uint64_t)(v78 * v77);
        size_t v62 = 4 * v30;
        uint64_t v63 = -v30;
        uint64_t v31 = v77 * (uint64_t)(int)v66;
        size_t v67 = 4 * v31;
        uint64_t v68 = -v31;
        uint64_t v32 = 0;
        uint64_t v33 = -v24;
        size_t v34 = 4 * v24;
        if (v66 <= 1) {
          uint64_t v35 = 1;
        }
        else {
          uint64_t v35 = v66;
        }
        if (v61 <= 1) {
          uint64_t v36 = 1;
        }
        else {
          uint64_t v36 = v61;
        }
        uint64_t v64 = v36;
        if (v56 <= 1) {
          uint64_t v37 = 1;
        }
        else {
          uint64_t v37 = v56;
        }
        uint64_t v59 = v37;
        if (v50 <= 1) {
          uint64_t v38 = 1;
        }
        else {
          uint64_t v38 = v50;
        }
        uint64_t v54 = v38;
        uint64_t v39 = -4 * v24;
        do
        {
          uint64_t v53 = v32;
          if (v32)
          {
            memcpy(&v26[4 * v52], v26, v51);
            v26 += 4 * v52;
          }
          else if (v50)
          {
            uint64_t v55 = 0;
            LODWORD(v40) = *(_DWORD *)(a1 + 292);
            do
            {
              if (v40)
              {
                for (unint64_t i = 0; i < v40; ++i)
                {
                  if (i)
                  {
                    memcpy(&v26[4 * v58], v26, v57);
                    v26 += 4 * v58;
                  }
                  else if (v56)
                  {
                    uint64_t v60 = 0;
                    LODWORD(v42) = *(_DWORD *)(a1 + 288);
                    do
                    {
                      if (v42)
                      {
                        for (unint64_t j = 0; j < v42; ++j)
                        {
                          if (j)
                          {
                            memcpy(&v26[4 * v63], v26, v62);
                            v26 += 4 * v63;
                          }
                          else if (v61)
                          {
                            uint64_t v65 = 0;
                            LODWORD(v44) = *(_DWORD *)(a1 + 284);
                            do
                            {
                              if (v44)
                              {
                                for (unint64_t k = 0; k < v44; ++k)
                                {
                                  if (k)
                                  {
                                    memcpy(&v26[4 * v68], v26, v67);
                                    v26 += 4 * v68;
                                  }
                                  else if (v66)
                                  {
                                    uint64_t v46 = 0;
                                    LODWORD(v47) = *(_DWORD *)(a1 + 280);
                                    do
                                    {
                                      if (v47)
                                      {
                                        for (unint64_t m = 0; m < v47; ++m)
                                        {
                                          if (m) {
                                            uint64_t v49 = 0;
                                          }
                                          else {
                                            uint64_t v49 = v33;
                                          }
                                          v27 += 4 * v49;
                                          v26 += v39;
                                          memcpy(v26, v27, v34);
                                          unint64_t v47 = *(int *)(a1 + 280);
                                        }
                                      }
                                      ++v46;
                                    }
                                    while (v46 != v35);
                                  }
                                  unint64_t v44 = *(int *)(a1 + 284);
                                }
                                unint64_t i = 0;
                                unint64_t j = 0;
                              }
                              ++v65;
                            }
                            while (v65 != v64);
                          }
                          unint64_t v42 = *(int *)(a1 + 288);
                        }
                      }
                      ++v60;
                    }
                    while (v60 != v59);
                  }
                  unint64_t v40 = *(int *)(a1 + 292);
                }
              }
              ++v55;
            }
            while (v55 != v54);
          }
          uint64_t v32 = v53 + 1;
        }
        while (v53 + 1 < (unint64_t)*(int *)(a1 + 296));
      }
      if (v83)
      {
        int v84 = v83;
        operator delete(v83);
      }
    }
  }
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
  if (v88) {
    nitro::nitro_function::nitro_function(v88);
  }
  if (*((void *)&v89 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v89 + 1));
  }
}

void sub_192B52A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  nitro::nitro_function::nitro_function(v47);
  if (__p) {
    operator delete(__p);
  }
  unint64_t v50 = *(void **)(v48 - 168);
  if (v50)
  {
    *(void *)(v48 - 160) = v50;
    operator delete(v50);
  }
  size_t v51 = *(std::__shared_weak_count **)(v48 - 136);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  uint64_t v52 = *(std::__shared_weak_count **)(v48 - 120);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  uint64_t v53 = *(std::__shared_weak_count **)(v48 - 104);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  _Unwind_Resume(a1);
}

void Espresso::tile_kernel_cpu::~tile_kernel_cpu(Espresso::tile_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::flatten_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v59, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v57, *(uint64_t **)a3);
  }
  uint64_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, *(void *)(a4 + 8), 0);
  if (v7)
  {
    uint64_t v9 = *((void *)v7 + 22);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 23);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
  if (v10)
  {
    uint64_t v11 = *((void *)v10 + 22);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 + 23);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 280);
  if (v13 == 2) {
    goto LABEL_18;
  }
  if (v13 != 1)
  {
    if (v13) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Flatten: invalid mode %d", v13);
    }
LABEL_18:
    if (v59 && v57)
    {
      uint64_t v14 = 0;
      int v15 = *(void **)(v57 + 24);
      BOOL v16 = *(const void **)(v59 + 24);
      uint64_t v17 = *(int *)(v59 + 8);
      do
      {
        v17 *= *(int *)(v59 + 12 + v14);
        v14 += 4;
      }
      while (v14 != 12);
      size_t v18 = 4 * v17;
LABEL_28:
      memcpy(v15, v16, v18);
      goto LABEL_74;
    }
    if (v9 && v11)
    {
      uint64_t v19 = 0;
      int v15 = *(void **)(v11 + 24);
      BOOL v16 = *(const void **)(v9 + 24);
      uint64_t v20 = *(int *)(v9 + 8);
      do
      {
        v20 *= *(int *)(v9 + 12 + v19);
        v19 += 4;
      }
      while (v19 != 12);
      size_t v18 = 2 * v20;
      goto LABEL_28;
    }
LABEL_85:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Flatten: invalid blob configuration");
  }
  uint64_t v21 = v59;
  if (v59 && (uint64_t v22 = v57) != 0)
  {
    uint64_t v23 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v25 = *(_DWORD *)(v21 + 20);
    if (v25 >= 1)
    {
      int v26 = 0;
      int v27 = 0;
      LODWORD(v28) = 0;
      int v30 = *(_DWORD *)(v21 + 12);
      int v29 = *(_DWORD *)(v21 + 16);
      int v31 = *(_DWORD *)(v21 + 8);
      do
      {
        if (v29 >= 1)
        {
          int v32 = 0;
          int v33 = v26;
          do
          {
            if (v30 >= 1)
            {
              int v34 = 0;
              int v35 = v33;
              do
              {
                if (v31 >= 1)
                {
                  uint64_t v36 = *(void *)(v21 + 24);
                  uint64_t v37 = *(void *)(v22 + 24);
                  uint64_t v28 = (int)v28;
                  int v38 = v31;
                  int v39 = v35;
                  do
                  {
                    *(_DWORD *)(v37 + 4 * v39) = *(_DWORD *)(v36 + 4 * v28++);
                    v39 += v29;
                    --v38;
                  }
                  while (v38);
                }
                ++v34;
                v35 += v29 * v31;
              }
              while (v34 != v30);
            }
            ++v32;
            ++v33;
          }
          while (v32 != v29);
        }
        ++v27;
        v26 += v29 * v31 * v30;
      }
      while (v27 != v25);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v23)
    {
      unint64_t v40 = v23;
LABEL_73:
      nitro::nitro_function::nitro_function(v40);
    }
  }
  else
  {
    if (!v9 || !v11) {
      goto LABEL_85;
    }
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v41 = *(_DWORD *)(v9 + 20);
    if (v41 >= 1)
    {
      int v42 = 0;
      int v43 = 0;
      LODWORD(v44) = 0;
      int v46 = *(_DWORD *)(v9 + 12);
      int v45 = *(_DWORD *)(v9 + 16);
      int v47 = *(_DWORD *)(v9 + 8);
      do
      {
        if (v45 >= 1)
        {
          int v48 = 0;
          int v49 = v42;
          do
          {
            if (v46 >= 1)
            {
              int v50 = 0;
              int v51 = v49;
              do
              {
                if (v47 >= 1)
                {
                  uint64_t v52 = *(void *)(v9 + 24);
                  uint64_t v53 = *(void *)(v11 + 24);
                  uint64_t v44 = (int)v44;
                  int v54 = v47;
                  int v55 = v51;
                  do
                  {
                    *(_WORD *)(v53 + 2 * v55) = *(_WORD *)(v52 + 2 * v44++);
                    v55 += v45;
                    --v54;
                  }
                  while (v54);
                }
                ++v50;
                v51 += v45 * v47;
              }
              while (v50 != v46);
            }
            ++v48;
            ++v49;
          }
          while (v48 != v45);
        }
        ++v43;
        v42 += v45 * v47 * v46;
      }
      while (v43 != v41);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v8)
    {
      unint64_t v40 = v8;
      goto LABEL_73;
    }
  }
LABEL_74:
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  unint64_t v56 = v60;
  if (v60)
  {
    nitro::nitro_function::nitro_function(v56);
  }
}

void sub_192B52EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::flatten_kernel_cpu::~flatten_kernel_cpu(Espresso::flatten_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::transpose_kernel_cpu::get_runtime_type_config(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*(_DWORD *)(*a2 + 8) > 4u) {
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
  }
  else {
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a2);
  }
}

void Espresso::transpose_kernel_cpu::__launch(int *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v349 = *MEMORY[0x1E4F143B8];
  if (a4[1] == *a4)
  {
    uint64_t v340 = 0;
    uint64_t v341 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v340, *a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v338 = 0;
    uint64_t v339 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v338, *(uint64_t **)a3);
  }
  if (a4[1] == *a4)
  {
    uint64_t v336 = 0;
    uint64_t v337 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v336, *a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v334 = 0;
    uint64_t v335 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v334, *(uint64_t **)a3);
  }
  if (a4[1] == *a4)
  {
    uint64_t v332 = 0;
    uint64_t v333 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v332, *a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v330 = 0;
    uint64_t v331 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v330, *(uint64_t **)a3);
  }
  if (a4[1] == *a4)
  {
    uint64_t v328 = 0;
    uint64_t v329 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v328, *a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v326 = 0;
    uint64_t v327 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v326, *(uint64_t **)a3);
  }
  uint64_t v7 = v340;
  if (v340)
  {
    uint64_t v8 = v338;
    if (v338)
    {
      uint64_t v9 = a1[70];
      uint64_t v10 = a1[71];
      uint64_t v11 = a1[72];
      uint64_t v12 = a1[73];
      uint64_t v13 = a1[74];
      uint64_t v14 = v341;
      if (v341) {
        atomic_fetch_add_explicit(&v341->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v15 = v339;
      if (v339) {
        atomic_fetch_add_explicit(&v339->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = **a4;
      unsigned int v17 = *(_DWORD *)(v16 + 20);
      uint64_t v314 = *(int *)(v16 + 24);
      uint64_t v18 = *(int *)(**(void **)a3 + 20);
      vDSP_Length v20 = *(int *)(v7 + 8);
      vDSP_Length v19 = *(int *)(v7 + 12);
      vDSP_Length __N = *(int *)(v7 + 16);
      uint64_t v21 = *(int *)(v8 + 8);
      int v22 = *(_DWORD *)(v8 + 12);
      uint64_t v23 = *(int *)(v8 + 16);
      uint64_t v24 = *(char **)(v8 + 24);
      int v25 = *(int **)(v7 + 24);
      uint64_t v26 = v22 * (uint64_t)(int)v21;
      uint64_t v27 = v26 * v23;
      uint64_t v299 = v15;
      uint64_t v302 = v14;
      if (v12 != 3 || v13 != 4) {
        goto LABEL_255;
      }
      if (v9)
      {
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            if (!v11 && v19 == 1)
            {
              if (v10 == 1)
              {
                if (v314)
                {
                  uint64_t v28 = 0;
                  if (v17 <= 1) {
                    int v29 = 1;
                  }
                  else {
                    int v29 = v17;
                  }
                  uint64_t v30 = v29;
                  uint64_t v31 = v22 * (uint64_t)(int)v21 * v23;
                  uint64_t v32 = 4 * v31 * v18;
                  uint64_t v33 = 4 * v31;
                  do
                  {
                    if (v17)
                    {
                      uint64_t v34 = 0;
                      uint64_t v35 = v30;
                      do
                      {
                        vDSP_mtrans((const float *)((char *)v25 + v34), 1, (float *)&v24[v34], 1, v20, __N);
                        v34 += v33;
                        --v35;
                      }
                      while (v35);
                    }
                    ++v28;
                    v24 += v32;
                    int v25 = (int *)((char *)v25 + v32);
                  }
                  while (v28 != v314);
                }
                goto LABEL_280;
              }
              goto LABEL_255;
            }
            if (!v10 && v11 == 1)
            {
              if (v314)
              {
                uint64_t v175 = 0;
                if (v20 <= 1) {
                  uint64_t v176 = 1;
                }
                else {
                  uint64_t v176 = v20;
                }
                if (v19 <= 1) {
                  uint64_t v177 = 1;
                }
                else {
                  uint64_t v177 = v19;
                }
                uint64_t v178 = __N;
                if (__N <= 1) {
                  uint64_t v178 = 1;
                }
                if (v17 <= 1) {
                  int v179 = 1;
                }
                else {
                  int v179 = v17;
                }
                uint64_t v180 = v22 * (uint64_t)(int)v21;
                uint64_t v181 = 4 * v180 * v23 * v18;
                uint64_t v182 = 4 * v180 * v23;
                uint64_t v183 = 4 * v180;
                uint64_t v184 = 4 * v21;
                do
                {
                  if (v17)
                  {
                    uint64_t v185 = 0;
                    int v186 = v24;
                    do
                    {
                      if (__N)
                      {
                        uint64_t v187 = 0;
                        int v188 = v186;
                        do
                        {
                          if (v19)
                          {
                            uint64_t v189 = 0;
                            int v190 = v188;
                            do
                            {
                              uint64_t v191 = v190;
                              uint64_t v192 = v176;
                              if (v20)
                              {
                                do
                                {
                                  int v193 = *v25++;
                                  *uint64_t v191 = v193;
                                  uint64_t v191 = (_DWORD *)((char *)v191 + v184);
                                  --v192;
                                }
                                while (v192);
                              }
                              ++v189;
                              int v190 = (_DWORD *)((char *)v190 + v183);
                            }
                            while (v189 != v177);
                          }
                          ++v187;
                          ++v188;
                        }
                        while (v187 != v178);
                      }
                      ++v185;
                      v186 += v182;
                    }
                    while (v185 != v179);
                  }
                  ++v175;
                  v24 += v181;
                }
                while (v175 != v314);
              }
              goto LABEL_280;
            }
          }
LABEL_255:
          if (v314)
          {
            uint64_t v194 = 0;
            uint64_t v195 = v27 * v18;
            if (v20 <= 1) {
              uint64_t v196 = 1;
            }
            else {
              uint64_t v196 = v20;
            }
            if (v19 <= 1) {
              uint64_t v197 = 1;
            }
            else {
              uint64_t v197 = v19;
            }
            uint64_t v198 = __N;
            if (__N <= 1) {
              uint64_t v198 = 1;
            }
            if (v17 <= 1) {
              int v199 = 1;
            }
            else {
              int v199 = v17;
            }
            do
            {
              if (v17)
              {
                for (uint64_t i = 0; i != v199; ++i)
                {
                  if (__N)
                  {
                    uint64_t v201 = 0;
                    do
                    {
                      if (v19)
                      {
                        for (uint64_t j = 0; j != v197; ++j)
                        {
                          if (v20)
                          {
                            for (uint64_t k = 0; k != v196; ++k)
                            {
                              uint64_t v342 = k;
                              uint64_t v343 = j;
                              uint64_t v344 = v201;
                              uint64_t v345 = i;
                              uint64_t v346 = v194;
                              int v204 = *v25++;
                              *(_DWORD *)&v24[4 * *(&v342 + v9)
                                            + 4 * *(&v342 + v10) * v21
                                            + 4 * *(&v342 + v11) * v26
                                            + 4 * *(&v342 + v12) * v27
                                            + 4 * *(&v342 + v13) * v195] = v204;
                            }
                          }
                        }
                      }
                      ++v201;
                    }
                    while (v201 != v198);
                  }
                }
              }
              ++v194;
            }
            while (v194 != v314);
          }
          goto LABEL_280;
        }
        if (v10 || v11 != 2) {
          goto LABEL_255;
        }
        uint64_t v134 = (int)__N * (uint64_t)(int)(v314 * v17);
        if (v134)
        {
          uint64_t v135 = 0;
          uint64_t v136 = 4 * v22 * (uint64_t)(int)v21;
          do
          {
            vDSP_mtrans((const float *)((char *)v25 + v135), 1, (float *)&v24[v135], 1, v20, v19);
            v135 += v136;
            --v134;
          }
          while (v134);
        }
      }
      else
      {
        if (v10 != 2 || v11 != 1) {
          goto LABEL_255;
        }
        if (v20 == 1)
        {
          if (v314)
          {
            uint64_t v137 = 0;
            if (v17 <= 1) {
              int v138 = 1;
            }
            else {
              int v138 = v17;
            }
            uint64_t v139 = v138;
            do
            {
              if (v17)
              {
                unint64_t v140 = 0;
                uint64_t v141 = v139;
                do
                {
                  vDSP_mtrans((const float *)&v25[v140 / 4], 1, (float *)&v24[v140], 1, v19, __N);
                  v140 += 4 * (int)__N * (uint64_t)(int)v19;
                  --v141;
                }
                while (v141);
                v24 += v140;
                int v25 = (int *)((char *)v25 + v140);
              }
              ++v137;
            }
            while (v137 != v314);
          }
        }
        else if (v314 * v17)
        {
          uint64_t v294 = (int)(v314 * v17);
          uint64_t v297 = 0;
          size_t v231 = 4 * v20;
          if (v19 <= 1) {
            uint64_t v232 = 1;
          }
          else {
            uint64_t v232 = v19;
          }
          uint64_t v233 = v22 * (uint64_t)(int)v21;
          uint64_t v290 = 4 * v233 * v23;
          uint64_t v234 = __N;
          if (__N <= 1) {
            uint64_t v234 = 1;
          }
          uint64_t v305 = v234;
          uint64_t v308 = v232;
          uint64_t v235 = 4 * v21;
          uint64_t v236 = 4 * v233;
          do
          {
            if (__N)
            {
              uint64_t v237 = 0;
              uint64_t v238 = (char *)&v25[v297 * v27];
              int v239 = v24;
              do
              {
                uint64_t v312 = v239;
                uint64_t v320 = v237;
                uint64_t v240 = v308;
                if (v19)
                {
                  do
                  {
                    memcpy(v239, v238, v231);
                    v239 += v236;
                    v238 += v235;
                    --v240;
                  }
                  while (v240);
                }
                uint64_t v237 = v320 + 1;
                int v239 = &v312[v235];
              }
              while (v320 + 1 != v305);
            }
            v24 += v290;
            ++v297;
          }
          while (v297 != v294);
        }
      }
LABEL_280:
      int v205 = v299;
      if (!v299) {
        goto LABEL_282;
      }
      goto LABEL_281;
    }
  }
  uint64_t v36 = v336;
  if (v336)
  {
    uint64_t v37 = v334;
    if (v334)
    {
      uint64_t v38 = a1[70];
      uint64_t v39 = a1[71];
      uint64_t v40 = a1[72];
      uint64_t v41 = a1[73];
      uint64_t v42 = a1[74];
      int v43 = v337;
      if (v337) {
        atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v302 = v43;
      uint64_t v44 = v335;
      if (v335) {
        atomic_fetch_add_explicit(&v335->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v296 = v44;
      uint64_t v45 = **a4;
      unsigned int v46 = *(_DWORD *)(v45 + 20);
      uint64_t v315 = *(int *)(v45 + 24);
      uint64_t v47 = *(int *)(**(void **)a3 + 20);
      unint64_t v48 = *(int *)(v36 + 8);
      unint64_t v49 = *(int *)(v36 + 12);
      vDSP_Length __Na = *(int *)(v36 + 16);
      uint64_t v51 = *(int *)(v37 + 8);
      int v50 = *(_DWORD *)(v37 + 12);
      uint64_t v52 = *(int *)(v37 + 16);
      uint64_t v53 = *(char **)(v37 + 24);
      int v54 = *(__int16 **)(v36 + 24);
      uint64_t v55 = v50 * (uint64_t)(int)v51;
      uint64_t v56 = v55 * v52;
      uint64_t v57 = v55 * v52 * v47;
      if (v41 != 3 || v42 != 4) {
        goto LABEL_200;
      }
      if (v38)
      {
        if (v38 != 1)
        {
          if (v38 == 2 && !v40 && v49 == 1 && v39 == 1)
          {
            if (v315)
            {
              uint64_t v58 = 0;
              if (v48 <= 1) {
                uint64_t v59 = 1;
              }
              else {
                uint64_t v59 = v48;
              }
              if (__Na <= 1) {
                uint64_t v60 = 1;
              }
              else {
                uint64_t v60 = __Na;
              }
              if (v46 <= 1) {
                int v61 = 1;
              }
              else {
                int v61 = v46;
              }
              uint64_t v62 = v50 * (uint64_t)(int)v51;
              uint64_t v63 = 2 * v62 * v52 * v47;
              uint64_t v64 = 2 * v62 * v52;
              uint64_t v65 = 2 * v62;
              do
              {
                if (v46)
                {
                  uint64_t v66 = 0;
                  size_t v67 = v53;
                  do
                  {
                    if (__Na)
                    {
                      uint64_t v68 = 0;
                      unint64_t v69 = &v54[v58 * v57 + v66 * v56];
                      unint64_t v70 = v67;
                      do
                      {
                        uint64_t v71 = v70;
                        uint64_t v72 = v59;
                        if (v48)
                        {
                          do
                          {
                            __int16 v73 = *v69++;
                            *uint64_t v71 = v73;
                            uint64_t v71 = (_WORD *)((char *)v71 + v65);
                            --v72;
                          }
                          while (v72);
                        }
                        ++v68;
                        ++v70;
                      }
                      while (v68 != v60);
                    }
                    ++v66;
                    size_t v67 = (_WORD *)((char *)v67 + v64);
                  }
                  while (v66 != v61);
                }
                ++v58;
                v53 += v63;
              }
              while (v58 != v315);
            }
            goto LABEL_362;
          }
          goto LABEL_200;
        }
        if (!v39 && v40 == 2)
        {
          uint64_t v142 = (int)__Na * (uint64_t)(int)(v315 * v46);
          if (v142)
          {
            uint64_t v143 = 0;
            if (v48 <= 1) {
              uint64_t v144 = 1;
            }
            else {
              uint64_t v144 = v48;
            }
            if (v49 <= 1) {
              uint64_t v145 = 1;
            }
            else {
              uint64_t v145 = v49;
            }
            uint64_t v146 = 2 * v50 * (uint64_t)(int)v51;
            uint64_t v147 = 2 * v51;
            do
            {
              if (v49)
              {
                uint64_t v148 = 0;
                uint64_t v149 = &v54[v143 * v55];
                uint64_t v150 = v53;
                do
                {
                  int v151 = v150;
                  uint64_t v152 = v144;
                  if (v48)
                  {
                    do
                    {
                      __int16 v153 = *v149++;
                      *int v151 = v153;
                      int v151 = (_WORD *)((char *)v151 + v147);
                      --v152;
                    }
                    while (v152);
                  }
                  ++v148;
                  ++v150;
                }
                while (v148 != v145);
              }
              ++v143;
              v53 += v146;
            }
            while (v143 != v142);
          }
          goto LABEL_362;
        }
LABEL_200:
        if (v315)
        {
          uint64_t v165 = 0;
          if (v48 <= 1) {
            uint64_t v166 = 1;
          }
          else {
            uint64_t v166 = v48;
          }
          if (v49 <= 1) {
            uint64_t v167 = 1;
          }
          else {
            uint64_t v167 = v49;
          }
          if (__Na <= 1) {
            uint64_t v168 = 1;
          }
          else {
            uint64_t v168 = __Na;
          }
          if (v46 <= 1) {
            int v169 = 1;
          }
          else {
            int v169 = v46;
          }
          do
          {
            if (v46)
            {
              for (uint64_t m = 0; m != v169; ++m)
              {
                if (__Na)
                {
                  for (uint64_t n = 0; n != v168; ++n)
                  {
                    if (v49)
                    {
                      for (iuint64_t i = 0; ii != v167; ++ii)
                      {
                        if (v48)
                        {
                          for (juint64_t j = 0; jj != v166; ++jj)
                          {
                            uint64_t v342 = jj;
                            uint64_t v343 = ii;
                            uint64_t v344 = n;
                            uint64_t v345 = m;
                            uint64_t v346 = v165;
                            __int16 v174 = *v54++;
                            *(_WORD *)&v53[2 * *(&v342 + v38)
                                         + 2 * *(&v342 + v39) * v51
                                         + 2 * *(&v342 + v40) * v55
                                         + 2 * *(&v342 + v41) * v56
                                         + 2 * *(&v342 + v42) * v57] = v174;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v165;
          }
          while (v165 != v315);
        }
        goto LABEL_362;
      }
      if (v39 != 2 || v40 != 1) {
        goto LABEL_200;
      }
      int v154 = v315 * v46;
      if (v154)
      {
        uint64_t v300 = 0;
        size_t v155 = 2 * v48;
        if (v49 <= 1) {
          uint64_t v156 = 1;
        }
        else {
          uint64_t v156 = v49;
        }
        uint64_t v157 = v50 * (uint64_t)(int)v51;
        uint64_t v289 = 2 * v157 * v52;
        uint64_t v292 = v154;
        uint64_t v158 = __Na;
        if (__Na <= 1) {
          uint64_t v158 = 1;
        }
        uint64_t v303 = v158;
        uint64_t v307 = v156;
        uint64_t v159 = 2 * v51;
        uint64_t v160 = 2 * v157;
        do
        {
          if (__Na)
          {
            uint64_t v161 = 0;
            uint64_t v162 = (char *)&v54[v300 * v56];
            uint64_t v163 = v53;
            do
            {
              uint64_t v310 = v163;
              uint64_t v318 = v161;
              uint64_t v164 = v307;
              if (v49)
              {
                do
                {
                  memcpy(v163, v162, v155);
                  v163 += v160;
                  v162 += v159;
                  --v164;
                }
                while (v164);
              }
              uint64_t v161 = v318 + 1;
              uint64_t v163 = &v310[v159];
            }
            while (v318 + 1 != v303);
          }
          v53 += v289;
          ++v300;
        }
        while (v300 != v292);
      }
LABEL_362:
      int v205 = v296;
      if (!v296)
      {
LABEL_282:
        if (v302) {
          nitro::nitro_function::nitro_function(v302);
        }
        goto LABEL_284;
      }
LABEL_281:
      nitro::nitro_function::nitro_function(v205);
      goto LABEL_282;
    }
  }
  uint64_t v74 = v332;
  if (v332)
  {
    uint64_t v75 = v330;
    if (v330)
    {
      uint64_t v76 = a1[70];
      uint64_t v77 = a1[71];
      uint64_t v78 = a1[72];
      uint64_t v79 = a1[73];
      uint64_t v80 = a1[74];
      int v81 = v333;
      if (v333) {
        atomic_fetch_add_explicit(&v333->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v302 = v81;
      int v82 = v331;
      if (v331) {
        atomic_fetch_add_explicit(&v331->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v296 = v82;
      uint64_t v83 = **a4;
      unsigned int v84 = *(_DWORD *)(v83 + 20);
      uint64_t v316 = *(int *)(v83 + 24);
      uint64_t v85 = *(int *)(**(void **)a3 + 20);
      size_t v87 = *(int *)(v74 + 8);
      unint64_t v86 = *(int *)(v74 + 12);
      vDSP_Length __Nb = *(int *)(v74 + 16);
      uint64_t v88 = *(int *)(v75 + 8);
      uint64_t v89 = *(void *)(v75 + 24);
      uint64_t v90 = *(void *)(v74 + 24);
      uint64_t v91 = *(int *)(v75 + 12) * (uint64_t)(int)v88;
      uint64_t v92 = v91 * *(int *)(v75 + 16);
      uint64_t v93 = v92 * v85;
      if (v79 == 3 && v80 == 4)
      {
        if (v76)
        {
          if (v76 == 1)
          {
            if (!v77 && v78 == 2)
            {
              uint64_t v206 = (int)__Nb * (uint64_t)(int)(v316 * v84);
              if (v206)
              {
                uint64_t v207 = 0;
                if (v87 <= 1) {
                  uint64_t v208 = 1;
                }
                else {
                  uint64_t v208 = v87;
                }
                if (v86 <= 1) {
                  uint64_t v209 = 1;
                }
                else {
                  uint64_t v209 = v86;
                }
                do
                {
                  if (v86)
                  {
                    uint64_t v210 = 0;
                    int v211 = (char *)(v90 + v207 * v91);
                    do
                    {
                      if (v87)
                      {
                        int v212 = (unsigned char *)(v89 + v207 * v91 + v210);
                        uint64_t v213 = v208;
                        do
                        {
                          char v214 = *v211++;
                          unsigned char *v212 = v214;
                          v212 += v88;
                          --v213;
                        }
                        while (v213);
                      }
                      ++v210;
                    }
                    while (v210 != v209);
                  }
                  ++v207;
                }
                while (v207 != v206);
              }
              goto LABEL_362;
            }
          }
          else if (v76 == 2 && !v78 && v86 == 1 && v77 == 1)
          {
            if (v316)
            {
              uint64_t v94 = 0;
              if (v87 <= 1) {
                uint64_t v95 = 1;
              }
              else {
                uint64_t v95 = v87;
              }
              if (__Nb <= 1) {
                uint64_t v96 = 1;
              }
              else {
                uint64_t v96 = __Nb;
              }
              if (v84 <= 1) {
                int v97 = 1;
              }
              else {
                int v97 = *(_DWORD *)(v83 + 20);
              }
              do
              {
                if (v84)
                {
                  uint64_t v98 = 0;
                  do
                  {
                    if (__Nb)
                    {
                      uint64_t v99 = 0;
                      int v100 = (char *)(v90 + v94 * v93 + v98 * v92);
                      do
                      {
                        if (v87)
                        {
                          int v101 = (unsigned char *)(v89 + v94 * v93 + v98 * v92 + v99);
                          uint64_t v102 = v95;
                          do
                          {
                            char v103 = *v100++;
                            unsigned char *v101 = v103;
                            v101 += v91;
                            --v102;
                          }
                          while (v102);
                        }
                        ++v99;
                      }
                      while (v99 != v96);
                    }
                    ++v98;
                  }
                  while (v98 != v97);
                }
                ++v94;
              }
              while (v94 != v316);
            }
            goto LABEL_362;
          }
        }
        else if (v77 == 2 && v78 == 1)
        {
          int v215 = v316 * v84;
          if (v215)
          {
            uint64_t v301 = 0;
            uint64_t v293 = v215;
            if (v86 <= 1) {
              uint64_t v216 = 1;
            }
            else {
              uint64_t v216 = v86;
            }
            uint64_t v304 = v216;
            uint64_t v217 = __Nb;
            if (__Nb <= 1) {
              uint64_t v217 = 1;
            }
            uint64_t v311 = v217;
            do
            {
              if (__Nb)
              {
                uint64_t v218 = 0;
                uint64_t v219 = (char *)(v90 + v301 * v92);
                do
                {
                  uint64_t v319 = v218;
                  if (v86)
                  {
                    uint64_t v220 = v304;
                    int v221 = (char *)(v89 + v301 * v92 + v218 * v88);
                    do
                    {
                      memcpy(v221, v219, v87);
                      v221 += v91;
                      v219 += v88;
                      --v220;
                    }
                    while (v220);
                  }
                  uint64_t v218 = v319 + 1;
                }
                while (v319 + 1 != v311);
              }
              ++v301;
            }
            while (v301 != v293);
          }
          goto LABEL_362;
        }
      }
      if (v316)
      {
        uint64_t v222 = 0;
        if (v87 <= 1) {
          uint64_t v223 = 1;
        }
        else {
          uint64_t v223 = v87;
        }
        if (v86 <= 1) {
          uint64_t v224 = 1;
        }
        else {
          uint64_t v224 = v86;
        }
        if (__Nb <= 1) {
          uint64_t v225 = 1;
        }
        else {
          uint64_t v225 = __Nb;
        }
        if (v84 <= 1) {
          int v226 = 1;
        }
        else {
          int v226 = *(_DWORD *)(v83 + 20);
        }
        do
        {
          if (v84)
          {
            uint64_t v227 = 0;
            do
            {
              if (__Nb)
              {
                for (kuint64_t k = 0; kk != v225; ++kk)
                {
                  if (v86)
                  {
                    for (muint64_t m = 0; mm != v224; ++mm)
                    {
                      if (v87)
                      {
                        for (nuint64_t n = 0; nn != v223; ++nn)
                        {
                          uint64_t v342 = nn;
                          uint64_t v343 = mm;
                          uint64_t v344 = kk;
                          uint64_t v345 = v227;
                          uint64_t v346 = v222;
                          *(unsigned char *)(v89
                                   + *(&v342 + v76)
                                   + *(&v342 + v77) * v88
                                   + *(&v342 + v78) * v91
                                   + *(&v342 + v79) * v92
                                   + *(&v342 + v80) * v93) = *(unsigned char *)(v90 + nn);
                        }
                        v90 += nn;
                      }
                    }
                  }
                }
              }
              ++v227;
            }
            while (v227 != v226);
          }
          ++v222;
        }
        while (v222 != v316);
      }
      goto LABEL_362;
    }
  }
  uint64_t v104 = v328;
  if (v328)
  {
    uint64_t v105 = v326;
    if (v326)
    {
      uint64_t v106 = a1[70];
      uint64_t v107 = a1[71];
      uint64_t v108 = a1[72];
      uint64_t v109 = a1[73];
      uint64_t v110 = a1[74];
      uint64_t v111 = v329;
      if (v329) {
        atomic_fetch_add_explicit(&v329->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v112 = v327;
      if (v327) {
        atomic_fetch_add_explicit(&v327->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v113 = **a4;
      unsigned int v114 = *(_DWORD *)(v113 + 20);
      uint64_t v317 = *(int *)(v113 + 24);
      uint64_t v115 = *(int *)(**(void **)a3 + 20);
      vDSP_Length v117 = *(int *)(v104 + 8);
      vDSP_Length v116 = *(int *)(v104 + 12);
      vDSP_Length __Nc = *(int *)(v104 + 16);
      uint64_t v118 = *(int *)(v105 + 8);
      int v119 = *(_DWORD *)(v105 + 12);
      uint64_t v120 = *(int *)(v105 + 16);
      uint64_t v121 = *(char **)(v105 + 24);
      float v122 = *(int **)(v104 + 24);
      uint64_t v123 = v119 * (uint64_t)(int)v118;
      uint64_t v124 = v123 * v120;
      uint64_t v299 = v112;
      uint64_t v302 = v111;
      if (v109 == 3 && v110 == 4)
      {
        if (v106)
        {
          if (v106 == 1)
          {
            if (!v107 && v108 == 2)
            {
              uint64_t v241 = (int)__Nc * (uint64_t)(int)(v317 * v114);
              if (v241)
              {
                uint64_t v242 = 0;
                uint64_t v243 = 4 * v119 * (uint64_t)(int)v118;
                do
                {
                  vDSP_mtrans((const float *)((char *)v122 + v242), 1, (float *)&v121[v242], 1, v117, v116);
                  v242 += v243;
                  --v241;
                }
                while (v241);
              }
              goto LABEL_280;
            }
          }
          else if (v106 == 2)
          {
            if (v108 || v116 != 1)
            {
              if (!v107 && v108 == 1)
              {
                if (v317)
                {
                  uint64_t v249 = 0;
                  if (v117 <= 1) {
                    uint64_t v250 = 1;
                  }
                  else {
                    uint64_t v250 = v117;
                  }
                  if (v116 <= 1) {
                    uint64_t v251 = 1;
                  }
                  else {
                    uint64_t v251 = v116;
                  }
                  uint64_t v252 = __Nc;
                  if (__Nc <= 1) {
                    uint64_t v252 = 1;
                  }
                  if (v114 <= 1) {
                    int v253 = 1;
                  }
                  else {
                    int v253 = v114;
                  }
                  uint64_t v254 = v119 * (uint64_t)(int)v118;
                  uint64_t v255 = 4 * v254 * v120 * v115;
                  uint64_t v256 = 4 * v254 * v120;
                  uint64_t v257 = 4 * v254;
                  uint64_t v258 = 4 * v118;
                  do
                  {
                    if (v114)
                    {
                      uint64_t v259 = 0;
                      int v260 = v121;
                      do
                      {
                        if (__Nc)
                        {
                          uint64_t v261 = 0;
                          uint64_t v262 = v260;
                          do
                          {
                            if (v116)
                            {
                              uint64_t v263 = 0;
                              BOOL v264 = v262;
                              do
                              {
                                int v265 = v264;
                                uint64_t v266 = v250;
                                if (v117)
                                {
                                  do
                                  {
                                    int v267 = *v122++;
                                    _DWORD *v265 = v267;
                                    int v265 = (_DWORD *)((char *)v265 + v258);
                                    --v266;
                                  }
                                  while (v266);
                                }
                                ++v263;
                                BOOL v264 = (_DWORD *)((char *)v264 + v257);
                              }
                              while (v263 != v251);
                            }
                            ++v261;
                            ++v262;
                          }
                          while (v261 != v252);
                        }
                        ++v259;
                        v260 += v256;
                      }
                      while (v259 != v253);
                    }
                    ++v249;
                    v121 += v255;
                  }
                  while (v249 != v317);
                }
                goto LABEL_280;
              }
            }
            else if (v107 == 1)
            {
              if (v317)
              {
                uint64_t v125 = 0;
                if (v114 <= 1) {
                  int v126 = 1;
                }
                else {
                  int v126 = v114;
                }
                uint64_t v127 = v126;
                uint64_t v128 = v119 * (uint64_t)(int)v118 * v120;
                uint64_t v129 = 4 * v128 * v115;
                uint64_t v130 = 4 * v128;
                do
                {
                  if (v114)
                  {
                    uint64_t v131 = 0;
                    uint64_t v132 = v127;
                    do
                    {
                      vDSP_mtrans((const float *)((char *)v122 + v131), 1, (float *)&v121[v131], 1, v117, __Nc);
                      v131 += v130;
                      --v132;
                    }
                    while (v132);
                  }
                  ++v125;
                  v121 += v129;
                  float v122 = (int *)((char *)v122 + v129);
                }
                while (v125 != v317);
              }
              goto LABEL_280;
            }
          }
        }
        else if (v107 == 2 && v108 == 1)
        {
          if (v117 == 1)
          {
            if (v317)
            {
              uint64_t v244 = 0;
              if (v114 <= 1) {
                int v245 = 1;
              }
              else {
                int v245 = v114;
              }
              uint64_t v246 = v245;
              do
              {
                if (v114)
                {
                  unint64_t v247 = 0;
                  uint64_t v248 = v246;
                  do
                  {
                    vDSP_mtrans((const float *)&v122[v247 / 4], 1, (float *)&v121[v247], 1, v116, __Nc);
                    v247 += 4 * (int)__Nc * (uint64_t)(int)v116;
                    --v248;
                  }
                  while (v248);
                  v121 += v247;
                  float v122 = (int *)((char *)v122 + v247);
                }
                ++v244;
              }
              while (v244 != v317);
            }
          }
          else if (v317 * v114)
          {
            uint64_t v295 = (int)(v317 * v114);
            uint64_t v298 = 0;
            size_t v279 = 4 * v117;
            if (v116 <= 1) {
              uint64_t v280 = 1;
            }
            else {
              uint64_t v280 = v116;
            }
            uint64_t v281 = v119 * (uint64_t)(int)v118;
            uint64_t v291 = 4 * v281 * v120;
            uint64_t v282 = __Nc;
            if (__Nc <= 1) {
              uint64_t v282 = 1;
            }
            uint64_t v306 = v282;
            uint64_t v309 = v280;
            uint64_t v283 = 4 * v118;
            uint64_t v284 = 4 * v281;
            do
            {
              if (__Nc)
              {
                uint64_t v285 = 0;
                uint64_t v286 = (char *)&v122[v298 * v124];
                uint64_t v287 = v121;
                do
                {
                  uint64_t v313 = v287;
                  uint64_t v321 = v285;
                  uint64_t v288 = v309;
                  if (v116)
                  {
                    do
                    {
                      memcpy(v287, v286, v279);
                      v287 += v284;
                      v286 += v283;
                      --v288;
                    }
                    while (v288);
                  }
                  uint64_t v285 = v321 + 1;
                  uint64_t v287 = &v313[v283];
                }
                while (v321 + 1 != v306);
              }
              v121 += v291;
              ++v298;
            }
            while (v298 != v295);
          }
          goto LABEL_280;
        }
      }
      if (v317)
      {
        uint64_t v268 = 0;
        uint64_t v269 = v124 * v115;
        if (v117 <= 1) {
          uint64_t v270 = 1;
        }
        else {
          uint64_t v270 = v117;
        }
        if (v116 <= 1) {
          uint64_t v271 = 1;
        }
        else {
          uint64_t v271 = v116;
        }
        uint64_t v272 = __Nc;
        if (__Nc <= 1) {
          uint64_t v272 = 1;
        }
        if (v114 <= 1) {
          int v273 = 1;
        }
        else {
          int v273 = v114;
        }
        do
        {
          if (v114)
          {
            for (uint64_t i1 = 0; i1 != v273; ++i1)
            {
              if (__Nc)
              {
                uint64_t v275 = 0;
                do
                {
                  if (v116)
                  {
                    for (uint64_t i2 = 0; i2 != v271; ++i2)
                    {
                      if (v117)
                      {
                        for (uint64_t i3 = 0; i3 != v270; ++i3)
                        {
                          uint64_t v342 = i3;
                          uint64_t v343 = i2;
                          uint64_t v344 = v275;
                          uint64_t v345 = i1;
                          uint64_t v346 = v268;
                          int v278 = *v122++;
                          *(_DWORD *)&v121[4 * *(&v342 + v106)
                                         + 4 * *(&v342 + v107) * v118
                                         + 4 * *(&v342 + v108) * v123
                                         + 4 * *(&v342 + v109) * v124
                                         + 4 * *(&v342 + v110) * v269] = v278;
                        }
                      }
                    }
                  }
                  ++v275;
                }
                while (v275 != v272);
              }
            }
          }
          ++v268;
        }
        while (v268 != v317);
      }
      goto LABEL_280;
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v342, **a4);
  uint64_t v133 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v342);
  if (v347)
  {
    uint64_t v348 = v347;
    operator delete(v347);
  }
  if (v133 >= 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("transpose_kernel: invalid blob configuration");
  }
LABEL_284:
  if (v327) {
    nitro::nitro_function::nitro_function(v327);
  }
  if (v329) {
    nitro::nitro_function::nitro_function(v329);
  }
  if (v331) {
    nitro::nitro_function::nitro_function(v331);
  }
  if (v333) {
    nitro::nitro_function::nitro_function(v333);
  }
  if (v335) {
    nitro::nitro_function::nitro_function(v335);
  }
  if (v337) {
    nitro::nitro_function::nitro_function(v337);
  }
  if (v339) {
    nitro::nitro_function::nitro_function(v339);
  }
  if (v341) {
    nitro::nitro_function::nitro_function(v341);
  }
}

void sub_192B542B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  if (a30) {
    nitro::nitro_function::nitro_function(a30);
  }
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 168);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::transpose_kernel_cpu::~transpose_kernel_cpu(Espresso::transpose_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::l2_normalize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v115 = 0;
    vDSP_Length v116 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v115, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v113 = 0;
    unsigned int v114 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v113, *(uint64_t **)a3);
  }
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, *(void *)(a4 + 8), 0);
  if (v6)
  {
    uint64_t v7 = (std::__shared_weak_count *)v6[23];
    uint64_t v100 = v6[22];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
  if (v8)
  {
    uint64_t v10 = v8[22];
    uint64_t v9 = (std::__shared_weak_count *)v8[23];
    uint64_t v11 = a1;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = a1;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 288);
  uint64_t v106 = v115;
  int v61 = v9;
  uint64_t v62 = v7;
  if ((int)v12 > 2)
  {
    int v13 = 1;
    int v14 = 1;
LABEL_19:
    int v70 = 1;
    goto LABEL_20;
  }
  int v14 = v115[5];
  if (v12 == 2)
  {
    int v13 = 1;
    goto LABEL_19;
  }
  int v70 = v115[4];
  if ((int)v12 <= 0)
  {
    int v13 = v115[3];
    if ((v12 & 0x80000000) != 0)
    {
      int v17 = v115[2];
      int v21 = v13 * v17;
      int v22 = v13 * v17 * v70;
      int v19 = 1;
      int v94 = v17;
      goto LABEL_23;
    }
  }
  else
  {
    int v13 = 1;
  }
LABEL_20:
  int v17 = v115[2];
  int v16 = v115[3];
  int v15 = v115 + 2;
  uint64_t v18 = v12 + 1;
  int v19 = 1;
  do
  {
    int v20 = *v15++;
    v19 *= v20;
    --v18;
  }
  while (v18);
  int v21 = v16 * v17;
  int v22 = v16 * v17 * v115[4];
  int v94 = 1;
LABEL_23:
  uint64_t v23 = v113;
  int v80 = v13;
  if (v113)
  {
    if (v14 >= 1)
    {
      uint64_t v81 = 0;
      uint64_t v83 = 0;
      vDSP_Length v24 = v19;
      float v25 = (float)(unint64_t)v19;
      float v26 = -1.0 / v25;
      uint64_t __n = 4 * v19;
      uint64_t v78 = v14;
      uint64_t v96 = v13;
      uint64_t v74 = v22;
      uint64_t v76 = 4 * v22;
      uint64_t v85 = v21;
      uint64_t v87 = 4 * v21;
      float v27 = 1.0 / v25;
      do
      {
        if (v70 >= 1)
        {
          uint64_t v90 = v83;
          for (uint64_t i = 0; i != v70; ++i)
          {
            if (v13 >= 1)
            {
              uint64_t v98 = v90;
              uint64_t v101 = 0;
              do
              {
                if (v94 >= 1)
                {
                  uint64_t v28 = 0;
                  uint64_t v29 = v94;
                  uint64_t v30 = v98;
                  do
                  {
                    uint64_t v31 = *(void *)(v23 + 24);
                    uint64_t v32 = (float *)(v31 + v30);
                    uint64_t v33 = (const float *)(*((void *)v106 + 3) + v30);
                    LODWORD(__C.data) = 0;
                    LODWORD(dest.data) = 0;
                    int v34 = *(_DWORD *)(a1 + 284);
                    uint64_t v35 = v33;
                    if ((v34 - 1) <= 1)
                    {
                      vDSP_sve(v33, 1, (float *)&__C, v24);
                      *(float *)&__C.int data = v26 * *(float *)&__C.data;
                      vDSP_vsadd(v33, 1, (const float *)&__C, (float *)(v31 + v30), 1, v24);
                      uint64_t v35 = (const float *)(v31 + 4 * v81 * v74 + 4 * i * v85 + 4 * v101 * v17 + 4 * v28);
                      int v34 = *(_DWORD *)(a1 + 284);
                    }
                    if ((v34 | 2) == 3)
                    {
                      vDSP_svesq(v35, 1, (float *)&dest, v24);
                      float v36 = *(float *)&dest.data;
                      if (*(_DWORD *)(a1 + 284) == 1)
                      {
                        float v36 = v27 * *(float *)&dest.data;
                        *(float *)&dest.int data = v27 * *(float *)&dest.data;
                      }
                      LODWORD(__B) = powf(v36 + *(float *)(a1 + 280), -0.5);
                      vDSP_vsmul(v35, 1, (const float *)&__B, v32, 1, v24);
                      int v34 = *(_DWORD *)(a1 + 284);
                    }
                    if (!v34) {
                      memcpy(v32, v33, __n);
                    }
                    ++v28;
                    v30 += 4;
                    --v29;
                  }
                  while (v29);
                }
                v98 += 4 * v17;
                ++v101;
              }
              while (v101 != v96);
            }
            v90 += v87;
            int v13 = v80;
          }
        }
        ++v81;
        v83 += v76;
      }
      while (v81 != v78);
    }
  }
  else
  {
    if (!v100 || !v10) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("l2_normalize: invalid blob configuration");
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&__B, *(_DWORD *)(v10 + 8), *(_DWORD *)(v10 + 12), *(_DWORD *)(v10 + 16), 1);
    uint64_t v37 = v106;
    int v99 = v19;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v109, *(_DWORD *)(v100 + 8), *(_DWORD *)(v100 + 12), *(_DWORD *)(v100 + 16), 1);
    if (v14 >= 1)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      float v38 = (float)(unint64_t)v19;
      float v39 = -1.0 / v38;
      uint64_t __na = 4 * v19;
      uint64_t v82 = v17;
      uint64_t v71 = v21;
      uint64_t v63 = v22;
      uint64_t v66 = v14;
      uint64_t v67 = 0;
      size_t v97 = 2 * v19;
      uint64_t v95 = __B;
      uint64_t v73 = 2 * v21;
      uint64_t v86 = 2 * v17;
      uint64_t v88 = v13;
      uint64_t v64 = 4 * v22;
      uint64_t v65 = 2 * v22;
      uint64_t v72 = 4 * v21;
      uint64_t v84 = 4 * v17;
      float v40 = 1.0 / v38;
      do
      {
        if (v70 >= 1)
        {
          uint64_t v104 = v67 * v63;
          uint64_t v77 = v69;
          uint64_t v79 = 0;
          uint64_t v75 = v68;
          do
          {
            if (v13 >= 1)
            {
              uint64_t v105 = v79 * v71;
              uint64_t v91 = v77;
              uint64_t v93 = 0;
              uint64_t v89 = v75;
              do
              {
                if (v94 >= 1)
                {
                  uint64_t v41 = 0;
                  uint64_t v42 = v91;
                  uint64_t v43 = v93 * v82;
                  uint64_t v44 = v89;
                  do
                  {
                    uint64_t v45 = MEMORY[0x18];
                    uint64_t v46 = *((void *)v37 + 3) + 4 * v104 + 4 * v105;
                    uint64_t v108 = 0;
                    __C.int data = (void *)(*(void *)(v100 + 24) + 2 * v104 + 2 * v105 + 2 * v43 + 2 * v41);
                    __C.vImagePixelCount height = 1;
                    __C.width = v99;
                    __C.rowBytes = v97;
                    uint64_t v47 = (void *)(v46 + 4 * v43 + 4 * v41);
                    dest.int data = v47;
                    dest.vImagePixelCount height = 1;
                    dest.width = v99;
                    dest.rowBytes = __na;
                    vImageConvert_Planar16FtoPlanarF(&__C, &dest, 0);
                    unint64_t v48 = (float *)(v45 + 4 * v104 + 4 * v105 + 4 * v43 + 4 * v41);
                    int v49 = *(_DWORD *)(a1 + 284);
                    int v50 = (const float *)v47;
                    if ((v49 - 1) <= 1)
                    {
                      vDSP_sve((const float *)v47, 1, (float *)&v108 + 1, v99);
                      *((float *)&v108 + 1) = v39 * *((float *)&v108 + 1);
                      vDSP_vsadd((const float *)v47, 1, (const float *)&v108 + 1, v48, 1, v99);
                      int v49 = *(_DWORD *)(a1 + 284);
                      int v50 = (const float *)(v45 + 4 * v104 + 4 * v105 + 4 * v43 + 4 * v41);
                    }
                    if ((v49 | 2) == 3)
                    {
                      vDSP_svesq(v50, 1, (float *)&v108, v99);
                      float v51 = *(float *)&v108;
                      if (*(_DWORD *)(a1 + 284) == 1)
                      {
                        float v51 = v40 * *(float *)&v108;
                        *(float *)&uint64_t v108 = v40 * *(float *)&v108;
                      }
                      LODWORD(__C.data) = powf(v51 + *(float *)(a1 + 280), -0.5);
                      vDSP_vsmul(v50, 1, (const float *)&__C, *(float **)(v95 + 24), 1, v99);
                      int v49 = *(_DWORD *)(a1 + 284);
                      uint64_t v37 = v106;
                    }
                    if (!v49) {
                      memcpy(v48, v47, __na);
                    }
                    if (v99)
                    {
                      uint64_t v52 = (_WORD *)(*(void *)(v10 + 24) + v44);
                      uint64_t v53 = (int *)(v45 + v42);
                      uint64_t v54 = v99;
                      do
                      {
                        int v55 = *v53++;
                        _S0 = v55;
                        __asm { FCVT            H0, S0 }
                        *v52++ = _S0;
                        --v54;
                      }
                      while (v54);
                    }
                    ++v41;
                    v44 += 2;
                    v42 += 4;
                  }
                  while (v41 != v94);
                }
                v89 += v86;
                v91 += v84;
                ++v93;
              }
              while (v93 != v88);
            }
            v75 += v73;
            v77 += v72;
            ++v79;
            int v13 = v80;
          }
          while (v79 != v70);
        }
        ++v67;
        v68 += v65;
        v69 += v64;
      }
      while (v67 != v66);
    }
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
    if (v112) {
      nitro::nitro_function::nitro_function(v112);
    }
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v114) {
    nitro::nitro_function::nitro_function(v114);
  }
  if (v116) {
    nitro::nitro_function::nitro_function(v116);
  }
}

void sub_192B54BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11)
{
  int v13 = *(std::__shared_weak_count **)(v11 - 208);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  int v14 = *(std::__shared_weak_count **)(v11 - 192);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  int v15 = *(std::__shared_weak_count **)(v11 - 176);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::l2_normalize_kernel_cpu::~l2_normalize_kernel_cpu(Espresso::l2_normalize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::deconvolution_kernel_cpu::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  if (Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }

  return Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
}

void Espresso::deconvolution_kernel_cpu::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (v2
    && *(void *)v2
    && (*(void *)(v2 + 32) || *(void *)(v2 + 48) || *(void *)(v2 + 64) || *(void *)(v2 + 80)))
  {
    if (*(_DWORD *)(*(void *)(a1 + 8) + 76))
    {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v2, (uint64_t *)&v4);
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 584);
      *(_OWORD *)(a1 + 576) = v4;
      if (v3) {
        nitro::nitro_function::nitro_function(v3);
      }
    }
    else if (*(int *)(v2 + 156) <= 7)
    {
      Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v2);
    }
  }
}

void Espresso::deconvolution_kernel_cpu::__set_weight_raw_blob(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  uint64_t v11 = (*(void *(**)(long long *__return_ptr, uint64_t *))(*a1 + 464))(v19, a1);
  int v15 = a1 + 59;
  uint64_t v16 = a1[1];
  int v17 = (std::__shared_weak_count *)a1[2];
  v18[0] = v16;
  v18[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::set_conv_quantized_weight_helper(v12, v13, v14, (uint64_t)v11, (unsigned __int8 **)a3, (char *)a4, a5, a6, v15, v19, v18, 1, 1);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (__p)
  {
    int v21 = __p;
    operator delete(__p);
  }
}

void sub_192B54E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::deconvolution_kernel_cpu::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (v4)
    {
      unint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = v4[76];
      uint64_t v7 = v4[77];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 608) = v6;
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 616);
      *(void *)(a1 + 616) = v7;
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v5)
      {
        nitro::nitro_function::nitro_function(v5);
      }
    }
  }
}

void Espresso::deconvolution_kernel_cpu::tmp_aux_buffer_create(Espresso::deconvolution_kernel_cpu *this, unint64_t a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v4, a2 >> 2, 1, 1, 1);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 77);
  *((_OWORD *)this + 38) = v4;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

uint64_t Espresso::deconvolution_kernel_cpu::tmp_aux_buffer_size(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return 4
       * (int)a1[105]
       * (uint64_t)(a1[88] * a1[86] * a1[89] / a1[105])
       * *(int *)(**(void **)a3 + 8)
       * *(int *)(**(void **)a3 + 12);
}

void Espresso::deconvolution_kernel_cpu::clear_weights(Espresso::deconvolution_kernel_cpu *this)
{
  Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::clear_weights((uint64_t)this);
  uint64_t v2 = (void *)*((void *)this + 59);
  if (v2 && *v2 && (v2[4] || v2[6] || v2[8] || v2[10]))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 60);
    *((void *)this + 59) = 0;
    *((void *)this + 60) = 0;
    if (v3)
    {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

void Espresso::deconvolution_kernel_cpu::__launch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *((_DWORD *)a1 + 82);
  int v8 = *((_DWORD *)a1 + 83);
  uint64_t v111 = *((unsigned int *)a1 + 86);
  int v98 = *((_DWORD *)a1 + 104);
  char v9 = *((unsigned char *)a1 + 468);
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v121 = 0;
    float v122 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v121, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    int v119 = 0;
    uint64_t v120 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v119, *(uint64_t **)a4);
  }
  uint64_t v108 = v121;
  if (v121 && v119)
  {
    uint64_t v97 = *((unsigned int *)a1 + 105);
    int v106 = *((_DWORD *)a1 + 87);
    int __K = *((_DWORD *)a1 + 86);
    int v10 = *((_DWORD *)a1 + 88);
    int v11 = *((_DWORD *)a1 + 89);
    int v13 = v119[2];
    int v12 = v119[3];
    uint64_t v105 = v119;
    int v14 = *((__int16 *)a1 + 200);
    if (v14 > 1) {
      int v15 = (v10 - 1) * v14 + 1;
    }
    else {
      int v15 = *((_DWORD *)a1 + 88);
    }
    int v110 = v15;
    int v16 = *((__int16 *)a1 + 201);
    if (v16 > 1) {
      int v17 = (v11 - 1) * v16 + 1;
    }
    else {
      int v17 = *((_DWORD *)a1 + 89);
    }
    int v101 = v17;
    int v103 = *((__int16 *)a1 + 198);
    int v93 = *(_DWORD *)(v121 + 12);
    int v95 = *((__int16 *)a1 + 199);
    int v99 = *(_DWORD *)(v121 + 8);
    (*(void (**)(long long *__return_ptr, void *))(*a1 + 456))(&v118, a1);
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 448))(&v116, a1);
    int v91 = v7;
    if (!a1[76])
    {
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 96))(a1, a3, a4);
      (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v18);
    }
    uint64_t v19 = v118;
    if (!(void)v118)
    {
      uint64_t v20 = *(void *)(a4 + 8);
      if ((unint64_t)(v20 - *(void *)a4) < 0x11)
      {
        uint64_t v21 = a1[74];
        if (v21)
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v21 + 8);
          int v22 = (std::__shared_weak_count *)*((void *)&v118 + 1);
          long long v118 = *(_OWORD *)&src.data;
          if (v22)
          {
            nitro::nitro_function::nitro_function(v22);
            int data = (int *)v118;
          }
          else
          {
            int data = (int *)src.data;
          }
          uint64_t v31 = 0;
          uint64_t v32 = (void *)*((void *)data + 3);
          vImagePixelCount v33 = data[2];
          int v34 = (char *)(data + 3);
          do
          {
            v33 *= *(int *)&v34[v31];
            v31 += 4;
          }
          while (v31 != 12);
          src.int data = *(void **)(a1[74] + 24);
          src.vImagePixelCount height = 1;
          src.width = v33;
          src.rowBytes = 2 * v33;
          dest.int data = v32;
          dest.vImagePixelCount height = 1;
          dest.width = v33;
          dest.rowBytes = 4 * v33;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        }
        else
        {
          if (*(_DWORD *)(a1[1] + 76)
            || (vDSP_Length v24 = (void *)a1[59]) == 0
            || !*v24
            || !v24[4] && !v24[6] && !v24[8] && !v24[10])
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "weights not set");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          (*(void (**)(vImage_Buffer *__return_ptr, void *))(*a1 + 472))(&src, a1);
          long long v27 = *(_OWORD *)&src.data;
          src.int data = 0;
          src.vImagePixelCount height = 0;
          uint64_t v28 = (std::__shared_weak_count *)*((void *)&v118 + 1);
          long long v118 = v27;
          if (v28)
          {
            nitro::nitro_function::nitro_function(v28);
            if (src.height) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
            }
          }
          uint64_t v29 = (uint64_t *)a1[59];
          uint64_t v30 = (std::__shared_weak_count *)*((void *)&v118 + 1);
          long long v115 = v118;
          if (*((void *)&v118 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::quantized_weights_helper::dequantize_to_float32_4d(v29, (uint64_t)&v115, *(double *)&v27, v25, v26);
          if (v30) {
            nitro::nitro_function::nitro_function(v30);
          }
        }
        uint64_t v19 = v118;
      }
      else
      {
        uint64_t v19 = *((void *)Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, v20, 1) + 20);
      }
    }
    unsigned int v114 = a1;
    int v90 = v8;
    uint64_t v35 = v105;
    uint64_t v36 = v97;
    if ((int)v105[5] >= 1)
    {
      int v109 = 0;
      uint64_t v37 = (v10 * __K * v11 / (int)v97);
      uint64_t v38 = (v12 * v13);
      unsigned int __Ka = v106 / (int)v97;
      unsigned int v96 = (((v12 - 1) * v95 - v93 + v101) & ~(((v12 - 1) * v95 - v93 + v101) >> 31)) >> 1;
      unsigned int v94 = ((v110 - v99 + (v13 - 1) * v103) & ~((v110 - v99 + (v13 - 1) * v103) >> 31)) >> 1;
      __A = *(float **)(v19 + 24);
      uint64_t v39 = 4 * (int)v38 * (v106 / (int)v97);
      uint64_t v40 = 4 * (int)v37 * (v106 / (int)v97);
      uint64_t v41 = (Espresso *)(v9 & 1);
      do
      {
        int v43 = v35[2];
        int v42 = v35[3];
        uint64_t v44 = *(void *)(v108 + 24);
        int v45 = *(_DWORD *)(v108 + 8);
        int v46 = *(_DWORD *)(v108 + 12);
        int v107 = *(_DWORD *)(v108 + 16);
        if ((int)v36 < 1)
        {
          int v51 = *(_DWORD *)(v108 + 8);
          int v50 = *(_DWORD *)(v108 + 12);
        }
        else
        {
          int v100 = *(_DWORD *)(v108 + 12);
          int v102 = *(_DWORD *)(v108 + 8);
          uint64_t v104 = *(void *)(v108 + 24);
          uint64_t v47 = 0;
          unint64_t v48 = (float *)(*((void *)v35 + 3) + 4 * v42 * v35[4] * v43 * v109);
          int v49 = __A;
          do
          {
            LODWORD(v89) = v38;
            LODWORD(__ldb) = v38;
            LODWORD(__B) = v37;
            Espresso::wrapper_for_cblas_sgemm(v41, 101, 112, 111, v37, v38, __Ka, v49, 1.0, 0.0, __B, v48, __ldb, (float *)(*(void *)(v114[76] + 24) + v47), v89, v90);
            v47 += 4 * (int)v38 * (int)v37;
            unint64_t v48 = (float *)((char *)v48 + v39);
            int v49 = (const float *)((char *)v49 + v40);
            --v36;
          }
          while (v36);
          int v51 = *(_DWORD *)(v108 + 8);
          int v50 = *(_DWORD *)(v108 + 12);
          uint64_t v44 = v104;
          int v43 = v105[2];
          int v42 = v105[3];
          int v46 = v100;
          int v45 = v102;
        }
        int v52 = *((__int16 *)v114 + 200);
        if (v52 <= 1) {
          int v52 = 1;
        }
        int v53 = *((__int16 *)v114 + 201);
        if (v53 <= 1) {
          int v53 = 1;
        }
        Espresso::colbuffer2image((Espresso *)(v44 + 4 * v45 * v109 * v46 * v107), *(float **)(v114[76] + 24), (const float *)*((unsigned int *)v114 + 86), v50, v51, v42, v43, *((_DWORD *)v114 + 89), *((_DWORD *)v114 + 88), v96, v94, *((__int16 *)v114 + 198), *((__int16 *)v114 + 199), v52, v53, __C_4, (int)v89, SHIDWORD(v89));
        if (v98)
        {
          if ((int)v111 >= 1)
          {
            uint64_t v54 = 0;
            int v55 = 0;
            int v56 = *(_DWORD *)(v108 + 12) * *(_DWORD *)(v108 + 8);
            uint64_t v57 = *(void *)(v116 + 16);
            do
            {
              if (v56 >= 1)
              {
                uint64_t v58 = (float *)(v44 + 4 * v46 * v107 * v45 * v109 + 4 * v55);
                uint64_t v59 = (float *)(v57 + 16 * v54);
                float v60 = *v59;
                float v61 = v59[1];
                float v62 = v59[2];
                float v63 = v59[3];
                int v64 = v56;
                float v65 = 1.0 / v63;
                do
                {
                  float *v58 = v61 + (float)((float)(v65 * (float)(*v58 - v62)) * v60);
                  ++v58;
                  --v64;
                }
                while (v64);
              }
              ++v54;
              v55 += v56;
            }
            while (v54 != v111);
          }
        }
        else if (v116 && (int)v111 >= 1)
        {
          int v66 = v45;
          uint64_t v67 = 0;
          int v68 = v46;
          vDSP_Length v69 = *(int *)(v108 + 12) * (uint64_t)*(int *)(v108 + 8);
          int v70 = (float *)(v44 + 4 * v68 * v107 * v66 * v109);
          do
          {
            LODWORD(src.data) = 0;
            LODWORD(src.data) = *(_DWORD *)(*(void *)(v116 + 16) + v67);
            vDSP_vsadd(v70, 1, (const float *)&src, v70, 1, v69);
            v67 += 4;
            v70 += v69;
          }
          while (4 * v111 != v67);
        }
        uint64_t v35 = v105;
        ++v109;
        uint64_t v36 = v97;
      }
      while (v109 < v105[5]);
    }
    if (v91 == 1)
    {
      uint64_t v78 = 0;
      LODWORD(src.data) = 0;
      vDSP_Length v79 = *(int *)(v108 + 8);
      int v71 = v90;
      do
      {
        v79 *= *(int *)(v108 + 12 + v78);
        v78 += 4;
      }
      while (v78 != 12);
      vDSP_vthr(*(const float **)(v108 + 24), 1, (const float *)&src, *(float **)(v108 + 24), 1, v79);
    }
    else
    {
      int v71 = v90;
      if (v91 == 2)
      {
        unint64_t v72 = 0;
        unint64_t v73 = *(int *)(v108 + 8);
        while (1)
        {
          uint64_t v74 = 0;
          unint64_t v75 = v73;
          do
          {
            v75 *= *(int *)(v108 + 12 + v74);
            v74 += 4;
          }
          while (v74 != 12);
          if (v75 <= v72) {
            break;
          }
          uint64_t v76 = *(void *)(v108 + 24);
          float v77 = *(float *)(v76 + 4 * v72);
          if (v77 < 0.0) {
            *(float *)(v76 + 4 * v72) = v77 * 0.25;
          }
          ++v72;
        }
      }
    }
    if (v71)
    {
      unint64_t v80 = 0;
      unint64_t v81 = *(int *)(v108 + 8);
      while (1)
      {
        uint64_t v82 = 0;
        unint64_t v83 = v81;
        do
        {
          v83 *= *(int *)(v108 + 12 + v82);
          v82 += 4;
        }
        while (v82 != 12);
        if (v83 <= v80) {
          break;
        }
        uint64_t v84 = *(void *)(v108 + 24);
        *(float *)(v84 + 4 * v80) = tanhf(*(float *)(v84 + 4 * v80));
        ++v80;
      }
    }
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
    if (*((void *)&v118 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v118 + 1));
    }
  }
  if (v120) {
    nitro::nitro_function::nitro_function(v120);
  }
  if (v122) {
    nitro::nitro_function::nitro_function(v122);
  }
}

void sub_192B558F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  if (a36) {
    nitro::nitro_function::nitro_function(a36);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 184);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::wrapper_for_cblas_sgemm(Espresso *this, uint64_t __Order, uint64_t __TransA, uint64_t __TransB, uint64_t __M, uint64_t __N, uint64_t __K, const float *__A, float a9, float a10, float *__B, float *a12, const float *__ldb, float *__C, float *__ldc, int a16)
{
  int v16 = a12;
  if (this)
  {
    LODWORD(a12) = __ldb;
    MEMORY[0x1F40D1630](__Order, __TransA, __TransB, __M, __N, __K, __A, __B, a9, a10, v16, a12, __C);
  }
  else
  {
    cblas_sgemm((const CBLAS_ORDER)__Order, (const CBLAS_TRANSPOSE)__TransA, (const CBLAS_TRANSPOSE)__TransB, __M, __N, __K, a9, __A, (const int)__B, a12, (const int)__ldb, a10, __C, (const int)__ldc);
  }
}

void Espresso::colbuffer2image(Espresso *this, float *a2, const float *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18)
{
  int v21 = (int)a3;
  if (a4 * (int)a3 * a5 >= 1) {
    bzero(this, 4 * (a4 * a3 * a5));
  }
  uint64_t v36 = this;
  uint64_t v24 = (a9 * a8 * v21);
  if ((int)v24 >= 1)
  {
    for (uint64_t i = 0; i != v24; ++i)
    {
      if (a6 >= 1)
      {
        uint64_t v26 = 0;
        int v27 = (int)i / a9 % a8 * a15;
        BOOL v29 = a7 > 0 && (int)i % a9 * a14 - a11 < 0;
        uint64_t v30 = v27;
        uint64_t v31 = (char *)v36 + 4 * a5 * (v27 - (uint64_t)a10 + (int)i / (a9 * a8) * a4);
        uint64_t v32 = a2;
        do
        {
          uint64_t v33 = v26 * a13 - a10 + v30;
          if (v33 >= 0 && v33 < a4)
          {
            LODWORD(v34) = 0;
            LODWORD(v35) = (int)i % a9 * a14 - a11;
            if (v29)
            {
              do
              {
                LODWORD(v34) = v34 + 1;
                LODWORD(v35) = v35 + a12;
              }
              while ((int)v34 < a7 && (v35 & 0x80000000) != 0);
            }
            if ((int)v35 < a5 && (int)v34 < a7)
            {
              uint64_t v35 = (int)v35;
              uint64_t v34 = v34;
              do
              {
                *(float *)&v31[4 * v35] = v32[v34] + *(float *)&v31[4 * v35];
                v35 += a12;
                if (v35 >= a5) {
                  break;
                }
                ++v34;
              }
              while (v34 < a7);
            }
          }
          ++v26;
          v31 += 4 * a13 * (uint64_t)a5;
          v32 += a7;
        }
        while (v26 != a6);
      }
      a2 += a7 * (uint64_t)a6;
    }
  }
}

void Espresso::prediction_smoothing_kernel_cpu::__reset_temporal_state(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 296);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::prediction_smoothing_kernel_cpu::__launch(std::chrono::steady_clock::time_point *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3) {
    long long v42 = 0uLL;
  }
  else {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v42, *(uint64_t **)a3);
  }
  uint64_t v7 = *(void *)(a4 + 8);
  if (v7 == *(void *)a4)
  {
    long long v41 = 0uLL;
    int v8 = (uint64_t *)v7;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v41, *(uint64_t **)a4);
    int v8 = *(uint64_t **)a4;
    uint64_t v7 = *(void *)(a4 + 8);
  }
  char v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v8, v7, 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 22);
    int v10 = (std::__shared_weak_count *)*((void *)v9 + 23);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    int v10 = 0;
  }
  int v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
  if (v12)
  {
    uint64_t v14 = *((void *)v12 + 22);
    int v13 = (std::__shared_weak_count *)*((void *)v12 + 23);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v14 = 0;
    int v13 = 0;
  }
  int data = (void *)v41;
  if (!(void)v41)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v11 + 8);
    int v16 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    long long v41 = *(_OWORD *)&src.data;
    int data = src.data;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    uint64_t v17 = 0;
    uint64_t v18 = (void *)data[3];
    vImagePixelCount v19 = *(int *)(v11 + 8);
    do
    {
      v19 *= *(int *)(v11 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    src.int data = *(void **)(v11 + 24);
    src.vImagePixelCount height = 1;
    src.width = v19;
    src.rowBytes = 2 * v19;
    dest.int data = v18;
    dest.vImagePixelCount height = 1;
    dest.width = v19;
    dest.rowBytes = 4 * v19;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  }
  uint64_t v20 = v42;
  int v21 = (void *)v42;
  if (!(void)v42)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v14 + 8);
    int v22 = src.data;
    uint64_t v23 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    long long v42 = *(_OWORD *)&src.data;
    if (v23)
    {
      uint64_t v38 = src.data;
      nitro::nitro_function::nitro_function(v23);
      int v22 = v38;
    }
    int v21 = v22;
  }
  uint64_t v24 = a1 + 36;
  unint64_t rep = a1[35].__d_.__rep_;
  uint64_t v26 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  v40[0] = (uint64_t)data;
  v40[1] = *((void *)&v41 + 1);
  if (*((void *)&v41 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v27 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  v39[0] = v21;
  v39[1] = *((void *)&v42 + 1);
  if (*((void *)&v42 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::prediction_smoothing_cpu_impl::apply(v24, rep, v40, (uint64_t)v39);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (!v20)
  {
    uint64_t v28 = 0;
    BOOL v29 = (int *)v21[3];
    uint64_t v30 = *(_WORD **)(v14 + 24);
    uint64_t v31 = *(int *)(v14 + 8);
    do
    {
      v31 *= *(int *)(v14 + 12 + v28);
      v28 += 4;
    }
    while (v28 != 12);
    for (; v31; --v31)
    {
      int v32 = *v29++;
      _S0 = v32;
      __asm { FCVT            H0, S0 }
      *v30++ = _S0;
    }
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192B55F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (v19)
  {
    nitro::nitro_function::nitro_function(v19);
    if (!v18)
    {
LABEL_4:
      if (a16) {
        nitro::nitro_function::nitro_function(a16);
      }
      if (a18) {
        nitro::nitro_function::nitro_function(a18);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v18)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v18);
  goto LABEL_4;
}

void *Espresso::prediction_smoothing_cpu_impl::apply(std::chrono::steady_clock::time_point *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v6 = a2;
  if (a2)
  {
    unint64_t v8 = HIDWORD(a2);
    v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    unint64_t rep = (_DWORD *)a1->__d_.__rep_;
    uint64_t v11 = *a3;
    if (!a1->__d_.__rep_
      || (LODWORD(v12) = rep[2], v12 != *(_DWORD *)(v11 + 8))
      || rep[3] != *(_DWORD *)(v11 + 12)
      || rep[4] != *(_DWORD *)(v11 + 16)
      || rep[5] != *(_DWORD *)(v11 + 20))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&__B, v11 + 8);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v13 = __B;
      uint64_t v14 = (std::__shared_weak_count *)a1[1].__d_.__rep_;
      *(_OWORD *)&a1->__d_.__rep_ = __B;
      if (v14)
      {
        nitro::nitro_function::nitro_function(v14);
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = a1->__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = v13;
      }
      uint64_t v22 = 0;
      uint64_t v23 = *(void **)(v15 + 24);
      uint64_t v24 = *(int *)(*a3 + 8);
      do
      {
        v24 *= *(int *)(*a3 + 12 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      memcpy(v23, *(const void **)(*a3 + 24), 4 * v24);
      a1[2].__d_.__rep_ = v9.__d_.__rep_;
      uint64_t v11 = *a3;
      LODWORD(v12) = *(_DWORD *)(*a3 + 8);
    }
    uint64_t v12 = (int)v12;
    uint64_t v25 = 12;
    vDSP_Length __N = (int)v12;
    do
    {
      __N *= *(int *)(v11 + v25);
      v25 += 4;
    }
    while (v25 != 24);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27 = a1[2].__d_.__rep_;
    a1[2].__d_.__rep_ = v9.__d_.__rep_;
    if (v6 == 1)
    {
      float v28 = (double)(v9.__d_.__rep_ - v27) * -0.000000001;
      *(float *)&long long __B = 1.0 - expf(v28 / *(float *)&v8);
      float __D = 1.0 - *(float *)&__B;
    }
    else
    {
      LODWORD(__B) = v8;
      float __D = 1.0 - *(float *)&v8;
      if (v6 > 2) {
        goto LABEL_25;
      }
    }
    vDSP_vsmsma(*(const float **)(v11 + 24), 1, (const float *)&__B, *(const float **)(a1->__d_.__rep_ + 24), 1, &__D, *(float **)(*(void *)a4 + 24), 1, __N);
    uint64_t v11 = *a3;
    uint64_t v12 = *(int *)(*a3 + 8);
LABEL_25:
    for (uint64_t i = 0; i != 12; i += 4)
      v12 *= *(int *)(v11 + 12 + i);
    return memcpy(*(void **)(a1->__d_.__rep_ + 24), *(const void **)(*(void *)a4 + 24), 4 * v12);
  }
  uint64_t v16 = *a3;
  uint64_t v17 = *(const void **)(*a3 + 24);
  double result = *(void **)(*(void *)a4 + 24);
  if (v17 != result)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(int *)(v16 + 8);
    uint64_t v21 = v16 + 12;
    do
    {
      v20 *= *(int *)(v21 + v19);
      v19 += 4;
    }
    while (v19 != 12);
    return memcpy(result, v17, 4 * v20);
  }
  return result;
}

void Espresso::prediction_smoothing_kernel_cpu::~prediction_smoothing_kernel_cpu(Espresso::prediction_smoothing_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3672C8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3672C8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::dropout_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v7 = *a3;
  if ((char *)a3[1] - (char *)*a3 == 32)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v34, (void *)(*a4)[2], (std::__shared_weak_count *)(*a4)[3]);
    BOOL v8 = fabsf(**(float **)(v34 + 24)) > 0.000001;
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    uint64_t v7 = *a3;
  }
  else
  {
    BOOL v8 = 1;
  }
  float v9 = 1.0 - *(float *)(a1 + 280);
  float __B = v9;
  if (*(_DWORD *)(a1 + 292)) {
    float v10 = 1.0 / v9;
  }
  else {
    float v10 = 1.0;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v34, v7);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v31, *a3 + 2);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29, *a4);
  if (v8)
  {
    if (*(_DWORD *)(a1 + 288))
    {
      int v11 = *(_DWORD *)(a1 + 284);
      uint64_t v12 = **(unsigned int ***)(a1 + 296);
      if (v11 < 1)
      {
        uint64_t v17 = *(void *)(a1 + 8);
        unsigned int v18 = *(_DWORD *)(v17 + 60);
        *(_DWORD *)(v17 + 60) = v18 + 1;
        int v11 = v18 + ((v18 / 0x7FFFFFFF) | ((v18 / 0x7FFFFFFF) << 31));
        if (v11 <= 1) {
          int v11 = 1;
        }
      }
      else if (v11 == 0x7FFFFFFF)
      {
        int v11 = 1;
      }
      *uint64_t v12 = v11;
    }
    else
    {
      uint64_t v12 = **(unsigned int ***)(a1 + 296);
    }
    vDSP_Length v19 = 0;
    double v20 = v9;
    uint64_t v21 = v34;
    uint64_t v22 = v31;
    uint64_t v23 = v34 + 12;
    while (1)
    {
      uint64_t v24 = 0;
      vDSP_Length v25 = *(int *)(v21 + 8);
      vDSP_Length v26 = v25;
      do
      {
        v26 *= *(int *)(v23 + v24);
        v24 += 4;
      }
      while (v24 != 12);
      if (v19 >= v26) {
        break;
      }
      if (std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v12)
         + 0.0 >= v20)
        float v27 = 0.0;
      else {
        float v27 = v10;
      }
      *(float *)(*(void *)(v22 + 24) + 4 * v19++) = v27;
    }
    for (uint64_t i = 0; i != 12; i += 4)
      v25 *= *(int *)(v21 + 12 + i);
    vDSP_vmul(*(const float **)(v29 + 24), 1, *(const float **)(v22 + 24), 1, *(float **)(v21 + 24), 1, v25);
  }
  else if (*(_DWORD *)(a1 + 292))
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(int *)(v34 + 8);
    do
    {
      v14 *= *(int *)(v34 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    memcpy(*(void **)(v34 + 24), *(const void **)(v29 + 24), 4 * v14);
  }
  else
  {
    uint64_t v15 = 0;
    vDSP_Length v16 = *(int *)(v34 + 8);
    do
    {
      v16 *= *(int *)(v34 + 12 + v15);
      v15 += 4;
    }
    while (v15 != 12);
    vDSP_vsmul(*(const float **)(v29 + 24), 1, &__B, *(float **)(v34 + 24), 1, v16);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
}

void sub_192B5658C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

double std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(unsigned int *a1)
{
  unsigned int v1 = 48271 * (*a1 % 0xADC8);
  unsigned int v2 = 3399 * (*a1 / 0xADC8);
  BOOL v3 = v1 >= v2;
  unsigned int v4 = v1 - v2;
  if (v3) {
    int v5 = 0;
  }
  else {
    int v5 = 0x7FFFFFFF;
  }
  unsigned int v6 = v5 + v4;
  unsigned int v7 = v6 - 1;
  unsigned int v8 = v6 / 0xADC8;
  unsigned int v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  BOOL v3 = v9 >= v8;
  unsigned int v10 = v9 - v8;
  if (v3) {
    int v11 = 0;
  }
  else {
    int v11 = 0x7FFFFFFF;
  }
  unsigned int v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

void Espresso::dropout_kernel_cpu::~dropout_kernel_cpu(Espresso::dropout_kernel_cpu *this)
{
  *(void *)this = &unk_1EE34DE40;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE34DE40;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::space_to_batch_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v66, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, *a4);
  Espresso::abstract_blob_container::shape((char *)&v58, **a3);
  Espresso::abstract_blob_container::shape((char *)&v50, **a4);
  if (v55 != -1)
  {
    if (v55 < 5) {
      goto LABEL_3;
    }
LABEL_19:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("space_to_batch: 5D inputs not supported");
  }
  if (v54 != 1) {
    goto LABEL_19;
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 288)) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("space_to_batch: 3d space to batch not supported");
  }
  int v7 = v50;
  int v8 = v50 * v51;
  int v9 = *(_DWORD *)(a1 + 284);
  int v10 = *(_DWORD *)(a1 + 280);
  int v11 = *(_DWORD *)(a1 + 292);
  int v12 = *(_DWORD *)(a1 + 296);
  int v13 = v61;
  if (*(unsigned char *)(a1 + 316))
  {
    if (v61 >= 1)
    {
      int v14 = 0;
      LODWORD(v15) = 0;
      int v16 = v8 * v52;
      int v17 = v59;
      int v18 = v60;
      uint64_t v19 = v64;
      uint64_t v20 = v66;
      do
      {
        if (v18 >= 1)
        {
          int v21 = 0;
          int v22 = v58;
          do
          {
            if (v17 >= 1)
            {
              for (int i = 0; i != v17; ++i)
              {
                if (v22 >= 1)
                {
                  uint64_t v24 = *(void *)(v19 + 24);
                  uint64_t v25 = *(void *)(v20 + 24);
                  uint64_t v15 = (int)v15;
                  int v26 = v12;
                  int v27 = v22;
                  do
                  {
                    *(_DWORD *)(v25 + 4 * v15++) = *(_DWORD *)(v24
                                                             + 4
                                                             * (v21 * v8
                                                              + (i + v11) / v10 * v7
                                                              + v26 / v9
                                                              + (v14 + (v26 % v9 + (i + v11) % v10 * v9) * v13) * v16));
                    ++v26;
                    --v27;
                  }
                  while (v27);
                }
              }
            }
            ++v21;
          }
          while (v21 != v18);
        }
        ++v14;
      }
      while (v14 != v13);
    }
  }
  else if (v61 >= 1)
  {
    int v28 = 0;
    LODWORD(v29) = 0;
    int v30 = v53;
    int v32 = v59;
    int v31 = v60;
    uint64_t v33 = v64;
    int v49 = v51 * v52;
    uint64_t v34 = v66;
    int v35 = v10 * v50;
    do
    {
      if (v31 >= 1)
      {
        int v36 = 0;
        int v37 = v28 / v30 % (v10 * v9);
        uint64_t v38 = v58;
        int v39 = v37 / v9 - v11;
        int v40 = v7 * (v39 + v49 * (v28 % v30));
        int v41 = v37 - (v12 + v37 / v9 * v9);
        do
        {
          if (v32 >= 1)
          {
            int v42 = 0;
            int v43 = v40;
            do
            {
              if ((int)v38 >= 1)
              {
                int v44 = v39 + v42 * v10;
                uint64_t v29 = (int)v29;
                int v45 = v41;
                uint64_t v46 = v38;
                do
                {
                  if (v45 < 0)
                  {
                    uint64_t v47 = *(void *)(v34 + 24);
                    int v48 = 0;
                  }
                  else
                  {
                    uint64_t v47 = *(void *)(v34 + 24);
                    int v48 = 0;
                    if (v45 < v7 && (v44 & 0x80000000) == 0 && v44 < v51) {
                      int v48 = *(_DWORD *)(*(void *)(v33 + 24) + 4 * (v43 + v45));
                    }
                  }
                  *(_DWORD *)(v47 + 4 * v29++) = v48;
                  v45 += v9;
                  --v46;
                }
                while (v46);
              }
              ++v42;
              v43 += v35;
            }
            while (v42 != v32);
          }
          ++v36;
          v40 += v8;
        }
        while (v36 != v31);
      }
      ++v28;
    }
    while (v28 != v13);
  }
  if (__p)
  {
    uint64_t v57 = __p;
    operator delete(__p);
  }
  if (v62)
  {
    float v63 = v62;
    operator delete(v62);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
}

void sub_192B56A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  int v26 = *(std::__shared_weak_count **)(v24 - 112);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  int v27 = *(std::__shared_weak_count **)(v24 - 96);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::space_to_batch_kernel_cpu::~space_to_batch_kernel_cpu(Espresso::space_to_batch_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::space_to_depth_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v62, *a4);
  int v6 = a1[71];
  uint64_t v7 = v64;
  if (v6)
  {
    int v8 = v65;
    float v65 = v63;
    float v63 = v8;
    uint64_t v9 = v62;
  }
  else
  {
    uint64_t v9 = v64;
    uint64_t v7 = v62;
  }
  int v10 = *(_DWORD *)(v7 + 8);
  int v11 = *(_DWORD *)(v7 + 12);
  int v12 = *(_DWORD *)(v7 + 16);
  uint64_t v13 = *(unsigned int *)(v9 + 8);
  int v14 = *(_DWORD *)(v9 + 12);
  int v15 = *(_DWORD *)(v9 + 16);
  if (a1[72])
  {
    int v16 = v14 * v13;
    int v17 = v16 * v15;
    int v18 = *(_DWORD *)(v7 + 20);
    if (v6)
    {
      if (v18 >= 1)
      {
        int v19 = 0;
        int v20 = 0;
        do
        {
          if (v12 >= 1)
          {
            for (int i = 0; i != v12; ++i)
            {
              if (v11 >= 1)
              {
                for (int j = 0; j != v11; ++j)
                {
                  if (v10 >= 1)
                  {
                    uint64_t v23 = 0;
                    int v24 = a1[70];
                    uint64_t v25 = *(void *)(v9 + 24);
                    int v26 = v20;
                    uint64_t v27 = *(void *)(v7 + 24) + 4 * v20;
                    do
                    {
                      *(_DWORD *)(v27 + 4 * v23) = *(_DWORD *)(v25
                                                             + 4
                                                             * ((int)v23 / v24
                                                              + v19 * v17
                                                              + j / v24 * (int)v13
                                                              + ((int)v23
                                                               + v24 * (j + v24 * (i - j / v24) - (int)v23 / v24))
                                                              * v16));
                      ++v23;
                    }
                    while (v10 != v23);
                    int v20 = v26 + v23;
                  }
                }
              }
            }
          }
          ++v19;
        }
        while (v19 != v18);
      }
    }
    else if (v18 >= 1)
    {
      int v41 = 0;
      for (int k = 0; k != v18; ++k)
      {
        if (v12 >= 1)
        {
          for (int m = 0; m != v12; ++m)
          {
            if (v11 >= 1)
            {
              for (int n = 0; n != v11; ++n)
              {
                if (v10 >= 1)
                {
                  uint64_t v45 = 0;
                  int v46 = a1[70];
                  uint64_t v47 = *(void *)(v9 + 24);
                  int v48 = v41;
                  uint64_t v49 = *(void *)(v7 + 24) + 4 * v41;
                  do
                  {
                    *(_DWORD *)(v47
                              + 4
                              * ((int)v45 / v46
                               + k * v17
                               + n / v46 * (int)v13
                               + ((int)v45 + v46 * (n + v46 * (m - n / v46) - (int)v45 / v46)) * v16)) = *(_DWORD *)(v49 + 4 * v45);
                    ++v45;
                  }
                  while (v10 != v45);
                  int v41 = v48 + v45;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int v28 = v11 * v10 * v12;
    uint64_t v29 = *(unsigned int *)(v9 + 20);
    if (v6)
    {
      if ((int)v29 >= 1)
      {
        uint64_t v30 = 0;
        LODWORD(v31) = 0;
        int v32 = v11 * v10;
        do
        {
          if (v15 >= 1)
          {
            int v33 = 0;
            uint64_t v34 = *(void *)(v7 + 24) + 4 * v30 * v28;
            int v35 = a1[70];
            do
            {
              if (v14 >= 1)
              {
                int v36 = 0;
                int v37 = v33 / v12 + v32 * (v33 % v12) + (v10 - v35) * (v33 / v12 / v35);
                do
                {
                  if ((int)v13 >= 1)
                  {
                    uint64_t v38 = *(void *)(v9 + 24);
                    uint64_t v31 = (int)v31;
                    int v39 = v37;
                    uint64_t v40 = v13;
                    do
                    {
                      *(_DWORD *)(v34 + 4 * v39) = *(_DWORD *)(v38 + 4 * v31++);
                      v39 += v35;
                      --v40;
                    }
                    while (v40);
                  }
                  ++v36;
                  v37 += v10 * v35;
                }
                while (v36 != v14);
              }
              ++v33;
            }
            while (v33 != v15);
          }
          ++v30;
        }
        while (v30 != v29);
      }
    }
    else if ((int)v29 >= 1)
    {
      uint64_t v50 = 0;
      LODWORD(v51) = 0;
      int v52 = v11 * v10;
      do
      {
        if (v15 >= 1)
        {
          int v53 = 0;
          uint64_t v54 = *(void *)(v7 + 24) + 4 * v50 * v28;
          int v55 = a1[70];
          do
          {
            if (v14 >= 1)
            {
              int v56 = 0;
              int v57 = v53 / v12 + v52 * (v53 % v12) + (v10 - v55) * (v53 / v12 / v55);
              do
              {
                if ((int)v13 >= 1)
                {
                  uint64_t v58 = *(void *)(v9 + 24);
                  uint64_t v51 = (int)v51;
                  int v59 = v57;
                  uint64_t v60 = v13;
                  do
                  {
                    *(_DWORD *)(v58 + 4 * v51++) = *(_DWORD *)(v54 + 4 * v59);
                    v59 += v55;
                    --v60;
                  }
                  while (v60);
                }
                ++v56;
                v57 += v10 * v55;
              }
              while (v56 != v14);
            }
            ++v53;
          }
          while (v53 != v15);
        }
        ++v50;
      }
      while (v50 != v29);
    }
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  int v61 = v65;
  if (v65)
  {
    nitro::nitro_function::nitro_function(v61);
  }
}

void sub_192B56E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::space_to_depth_kernel_cpu::~space_to_depth_kernel_cpu(Espresso::space_to_depth_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::slice_kernel_cpu::~slice_kernel_cpu(Espresso::slice_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::broadcast_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  if (!*(unsigned char *)(a1 + 304))
  {
    if ((char *)a4[1] - (char *)*a4 != 16) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("broadcast with more than 1 input is not supported when ndlayers_impl == false");
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v147, *a3);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v143, *a4);
    int v8 = *(char **)(v147 + 24);
    uint64_t v9 = *(char **)(v143.i64[0] + 24);
    int v10 = *(_DWORD *)(a1 + 280);
    int v11 = *(_DWORD *)(a1 + 284);
    int v12 = *(_DWORD *)(a1 + 288);
    int v13 = *(_DWORD *)(a1 + 292);
    int v14 = *(_DWORD *)(a1 + 296);
    int v15 = (int *)**a3;
    uint64_t v16 = v15[2];
    unint64_t v17 = v15[3];
    unint64_t v18 = v15[4];
    unint64_t v19 = v15[5];
    uint64_t v20 = v15[6];
    int v21 = (int *)**a4;
    uint64_t v22 = v21[2];
    uint64_t v23 = v21[3] * (uint64_t)(int)v22;
    uint64_t v24 = v23 * v21[4];
    uint64_t v25 = v24 * v21[5];
    if (v11 <= 0) {
      uint64_t v26 = v22;
    }
    else {
      uint64_t v26 = 0;
    }
    if (v12 <= 0) {
      uint64_t v27 = v23;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v13 <= 0) {
      uint64_t v28 = v24;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v14 <= 0) {
      uint64_t v29 = v25;
    }
    else {
      uint64_t v29 = 0;
    }
    if (v10 <= 0)
    {
      if (v20)
      {
        uint64_t v53 = 0;
        size_t v54 = 4 * v16;
        if (v17 <= 1) {
          uint64_t v55 = 1;
        }
        else {
          uint64_t v55 = v17;
        }
        uint64_t v131 = v55;
        if (v18 <= 1) {
          uint64_t v56 = 1;
        }
        else {
          uint64_t v56 = v18;
        }
        uint64_t v119 = 4 * v29;
        uint64_t v124 = 4 * v28;
        int v125 = v18;
        if (v19 <= 1) {
          uint64_t v57 = 1;
        }
        else {
          uint64_t v57 = v19;
        }
        uint64_t v123 = v57;
        uint64_t v58 = 4 * v27;
        uint64_t v59 = 4 * v26;
        int v120 = v19;
        do
        {
          uint64_t v121 = v53;
          float v122 = v9;
          if (v19)
          {
            uint64_t v60 = 0;
            int v61 = v9;
            do
            {
              uint64_t v127 = v61;
              uint64_t v129 = v60;
              if (v18)
              {
                uint64_t v62 = 0;
                float v63 = v61;
                do
                {
                  uint64_t v64 = v63;
                  uint64_t v65 = v131;
                  if (v17)
                  {
                    do
                    {
                      memcpy(v8, v64, v54);
                      v64 += v59;
                      v8 += v54;
                      --v65;
                    }
                    while (v65);
                  }
                  ++v62;
                  v63 += v58;
                }
                while (v62 != v56);
              }
              uint64_t v60 = v129 + 1;
              LODWORD(v18) = v125;
              int v61 = &v127[v124];
            }
            while (v129 + 1 != v123);
          }
          uint64_t v53 = v121 + 1;
          uint64_t v9 = &v122[v119];
          LODWORD(v19) = v120;
        }
        while (v121 + 1 != v20);
      }
    }
    else if (v20)
    {
      uint64_t v30 = 0;
      if (v17 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v17;
      }
      if (v18 <= 1) {
        uint64_t v32 = 1;
      }
      else {
        uint64_t v32 = v18;
      }
      if (v19 <= 1) {
        uint64_t v33 = 1;
      }
      else {
        uint64_t v33 = v19;
      }
      do
      {
        if (v19)
        {
          uint64_t v34 = 0;
          int v35 = v9;
          do
          {
            if (v18)
            {
              uint64_t v36 = 0;
              int v37 = v35;
              do
              {
                if (v17)
                {
                  uint64_t v38 = 0;
                  int v39 = v37;
                  do
                  {
                    if ((int)v16 >= 1)
                    {
                      unint64_t v40 = (v16 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                      int v41 = v8;
                      do
                      {
                        *v41++ = *(_DWORD *)v39;
                        --v40;
                      }
                      while (v40 > 1);
                    }
                    v8 += 4 * v16;
                    v39 += 4 * v26;
                    ++v38;
                  }
                  while (v38 != v31);
                }
                v37 += 4 * v27;
                ++v36;
              }
              while (v36 != v32);
            }
            v35 += 4 * v28;
            ++v34;
          }
          while (v34 != v33);
        }
        v9 += 4 * v29;
        ++v30;
      }
      while (v30 != v20);
    }
    if (v143.i64[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v143.i64[1]);
    }
    uint64_t v66 = v148;
    if (v148) {
      goto LABEL_192;
    }
    return;
  }
  if (a3[1] == *a3) {
    long long v154 = 0uLL;
  }
  else {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v154, *a3);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v152, *a4);
  Espresso::abstract_blob_container::shape((char *)&v147, **a4);
  uint64_t v146 = 0;
  long long __p = 0u;
  *(_OWORD *)&v144[8] = 0u;
  int32x4_t v143 = *(int32x4_t *)(a1 + 280);
  *(void *)uint64_t v144 = *(void *)(a1 + 296);
  int v42 = *a4;
  int v43 = (char *)a4[1];
  if (v43 - (char *)*a4 == 32 && !*(unsigned char *)(a1 + 312))
  {
    Espresso::abstract_blob_container::shape(v139, v42[2]);
    int32x4_t v143 = *(int32x4_t *)v139;
    *(_OWORD *)uint64_t v144 = *(_OWORD *)&v139[16];
    *(void *)&v144[16] = v140;
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    long long __p = v141;
    uint64_t v146 = v142;
    int v42 = *a4;
    int v43 = (char *)a4[1];
  }
  if (v43 - (char *)v42 == 32 && *(unsigned char *)(a1 + 312))
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v158, v42 + 2);
    if (*(void *)(*(void *)a2 + 64))
    {
      begiint n = v158.__begin_;
      std::vector<int>::size_type v45 = v158.__begin_[2];
      if (*(_DWORD *)(a1 + 308))
      {
        uint64_t v46 = 0;
        unint64_t v47 = v158.__begin_[2];
        do
        {
          v47 *= v158.__begin_[v46 + 3];
          ++v46;
        }
        while (v46 != 3);
        if (v47 <= 5)
        {
          for (uint64_t i = 0; i != 3; ++i)
            v45 *= v158.__begin_[i + 3];
          std::vector<int>::vector(&v161, v45);
          unint64_t v49 = 0;
          std::vector<int>::pointer v50 = v161.__begin_;
          while (1)
          {
            uint64_t v51 = 0;
            unint64_t v52 = begin[2];
            do
            {
              v52 *= begin[v51 + 3];
              ++v51;
            }
            while (v51 != 3);
            if (v52 <= v49) {
              break;
            }
            v50[v49] = (int)(float)(*(float *)(*((void *)begin + 3) + 4 * v49) + 0.5);
            ++v49;
          }
          memset(&v159, 0, sizeof(v159));
          std::vector<int>::pointer v67 = v161.__begin_;
          int64_t v68 = (char *)v161.__end_ - (char *)v161.__begin_;
          if (v161.__end_ != v161.__begin_)
          {
            uint64_t v69 = v68 >> 2;
            if ((unint64_t)(v68 >> 2) <= 1) {
              uint64_t v69 = 1;
            }
            int v70 = &v159;
            do
            {
              int v71 = *v67++;
              LODWORD(v70->__begin_) = v71;
              int v70 = (std::vector<int> *)((char *)v70 + 4);
              --v69;
            }
            while (v69);
          }
          HIDWORD(v159.__end_cap_.__value_) = (unint64_t)v68 >> 2;
          Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v159, 0, (uint64_t)v139);
          int32x4_t v143 = *(int32x4_t *)v139;
          *(_OWORD *)uint64_t v144 = *(_OWORD *)&v139[16];
          *(void *)&v144[16] = v140;
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          long long __p = v141;
          uint64_t v146 = v142;
          if (v161.__begin_)
          {
            v161.__end_ = v161.__begin_;
            operator delete(v161.__begin_);
          }
          goto LABEL_99;
        }
        long long v118 = "broadcast_kernel_cpu: invalid rank";
      }
      else
      {
        for (uint64_t j = 0; j != 3; ++j)
          v45 *= v158.__begin_[j + 3];
        if (v45 == 5)
        {
          unint64_t v73 = (float32x4_t *)*((void *)v158.__begin_ + 3);
          v74.i64[0] = 0x3F0000003F000000;
          v74.i64[1] = 0x3F0000003F000000;
          int32x4_t v143 = vcvtq_s32_f32(vaddq_f32(*v73, v74));
          *(_DWORD *)uint64_t v144 = (int)(float)(v73[1].f32[0] + 0.5);
LABEL_99:
          Espresso::abstract_blob_container::shape(v139, **a3);
          BOOL v75 = Espresso::layer_shape::operator==((uint64_t)v139, (uint64_t)&v143);
          if ((void)v141)
          {
            *((void *)&v141 + 1) = v141;
            operator delete((void *)v141);
          }
          if (!v75)
          {
            uint64_t v76 = (std::__shared_weak_count *)operator new(0x98uLL);
            v76->__shared_weak_owners_ = 0;
            v76->__shared_owners_ = 0;
            v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
            *(_OWORD *)&v76[2].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v76[3].__shared_owners_ = 0u;
            *(_OWORD *)&v76[1].__shared_owners_ = 0u;
            v76[2].std::__shared_count = 0u;
            v76[4].std::__shared_count = 0u;
            *(_OWORD *)&v76[4].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v76[5].__shared_owners_ = 0u;
            v76[5].__shared_weak_owners_ = 0;
            v76[6].__vftable = 0;
            LODWORD(v76[2].__vftable) = 1065353216;
            v76[2].__shared_owners_ = 0x1FFFFFFFFLL;
            v76[4].__vftable = 0;
            v76[4].__shared_owners_ = 0;
            v76[2].__shared_weak_owners_ = 0;
            v76[3].__vftable = 0;
            LOBYTE(v76[3].__shared_weak_owners_) = 0;
            v76[3].__shared_owners_ = 0;
            v76[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
            v76[5].__vftable = 0;
            v76[5].__shared_owners_ = 0;
            LOBYTE(v76[6].__vftable) = 0;
            LOBYTE(v76[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
            uint64_t v77 = **a3;
            uint64_t v137 = v76 + 1;
            int v138 = v76;
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
            (*(void (**)(uint64_t, int32x4_t *, std::__shared_weak_count **))(*(void *)v77 + 16))(v77, &v143, &v137);
            if (v138) {
              nitro::nitro_function::nitro_function(v138);
            }
            nitro::nitro_function::nitro_function(v76);
          }
          if (a3[1] == *a3)
          {
            long long v78 = 0uLL;
          }
          else
          {
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v139, *a3);
            long long v78 = *(_OWORD *)v139;
          }
          vDSP_Length v79 = (std::__shared_weak_count *)*((void *)&v154 + 1);
          long long v154 = v78;
          if (v79) {
            nitro::nitro_function::nitro_function(v79);
          }
          if (v158.__end_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v158.__end_);
          }
          goto LABEL_112;
        }
        long long v118 = "broadcast_kernel_cpu: Blob with full 5d shape is required as fill argument";
      }
    }
    else
    {
      long long v118 = "broadcast_kernel_cpu: dynamic parameters require interpreter";
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v118);
  }
LABEL_112:
  if (v143.i32[0] >= 1)
  {
    uint64_t v80 = v147;
    if (v147 != 1 && v143.i32[0] != v147)
    {
      vDSP_Length v117 = "Bcast shape error 1 != w: %d";
      goto LABEL_199;
    }
  }
  if (v143.i32[1] >= 1)
  {
    uint64_t v80 = HIDWORD(v147);
    if (HIDWORD(v147) != 1 && v143.i32[1] != HIDWORD(v147))
    {
      vDSP_Length v117 = "Bcast shape error 1 != h: %d";
      goto LABEL_199;
    }
  }
  if (v143.i32[2] >= 1)
  {
    uint64_t v80 = v148;
    if (v148 != 1 && v143.i32[2] != v148)
    {
      vDSP_Length v117 = "Bcast shape error 1 != k: %d";
      goto LABEL_199;
    }
  }
  if (v143.i32[3] >= 1)
  {
    uint64_t v80 = HIDWORD(v148);
    if (HIDWORD(v148) != 1 && v143.i32[3] != HIDWORD(v148))
    {
      vDSP_Length v117 = "Bcast shape error 1 != n: %d";
      goto LABEL_199;
    }
  }
  if (*(int *)v144 >= 1)
  {
    uint64_t v80 = v149;
    if (v149 != 1 && *(_DWORD *)v144 != v149)
    {
      vDSP_Length v117 = "Bcast shape error 1 != seq: %d";
LABEL_199:
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(v117, v80);
    }
  }
  Espresso::abstract_blob_container::shape(v139, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v136, (const Espresso::layer_shape *)v139, 0);
  if ((void)v141)
  {
    *((void *)&v141 + 1) = v141;
    operator delete((void *)v141);
  }
  Espresso::abstract_blob_container::shape(v139, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v135, (const Espresso::layer_shape *)v139, 0);
  if ((void)v141)
  {
    *((void *)&v141 + 1) = v141;
    operator delete((void *)v141);
  }
  uint64_t v81 = v152;
  if (v152)
  {
    uint64_t v82 = v154;
    if ((void)v154)
    {
      Espresso::layer_nd_shape::shape_vector(&v134, (uint64_t)v135);
      uint64_t v130 = *(_DWORD **)(v81 + 24);
      Espresso::layer_nd_shape::shape_vector(&v133, (uint64_t)v136);
      std::vector<int>::pointer v83 = v133.__begin_;
      int64_t v84 = (char *)v133.__end_ - (char *)v133.__begin_;
      int64_t v85 = v133.__end_ - v133.__begin_;
      std::vector<int>::pointer v86 = v134.__begin_;
      int64_t v87 = (char *)v134.__end_ - (char *)v134.__begin_;
      int64_t v88 = v134.__end_ - v134.__begin_;
      if ((int)v88 < (int)v85) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("BroadcastTo layer: Invalid target shape.");
      }
      uint64_t v89 = *(_DWORD **)(v82 + 24);
      if (v88 | v85)
      {
        std::vector<int>::size_type v90 = (int)(v87 >> 2);
        uint64_t v91 = (int)(v84 >> 2);
        if (v134.__begin_ == (std::vector<int>::pointer)((char *)v134.__begin_ + (v87 << 30 >> 30) - (v84 << 30 >> 30)))
        {
          int v93 = 1;
        }
        else
        {
          uint64_t v92 = 4 * v90 - 4 * v91;
          int v93 = 1;
          do
          {
            int v94 = *v86++;
            v93 *= v94;
            v92 -= 4;
          }
          while (v92);
        }
        int v95 = 1;
        while (v83 != v133.__end_)
        {
          int v96 = *v83++;
          v95 *= v96;
        }
        std::vector<int>::vector((std::vector<int> *)v139, (int)(v84 >> 2));
        std::vector<int>::vector(&v161, v90);
        NDShapeUtils::compute_strides((uint64_t)v134.__begin_, (uint64_t)v134.__end_, (uint64_t)v161.__begin_, (uint64_t)v161.__end_);
        NDShapeUtils::compute_strides((uint64_t)v133.__begin_, (uint64_t)v133.__end_, *(uint64_t *)v139, *(uint64_t *)&v139[8]);
        if ((int)v85 >= 1)
        {
          uint64_t v97 = (v85 + 1) - 1;
          std::vector<int>::size_type v98 = v90 - 1;
          int v99 = &v133.__begin_[v91 - 1];
          while (1)
          {
            int v101 = *v99--;
            int v100 = v101;
            int v102 = v134.__begin_[v98];
            if (v101 != v102) {
              break;
            }
            --v98;
            if (!--v97) {
              goto LABEL_155;
            }
          }
          if (v100 != 1 || v102 <= 1) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("BroadcastTo layer: Invalid shapes for broadcasting.");
          }
          int v95 = v161.__begin_[v98];
          int v93 = v134.__begin_[v98];
        }
LABEL_155:
        int v160 = 0;
        std::vector<int>::vector(&v159, v90);
        std::vector<int>::vector(&v158, (int)(v84 >> 2));
        std::vector<int>::pointer v104 = v134.__begin_;
        int v105 = 1;
        if (v134.__begin_ == v134.__end_) {
          goto LABEL_158;
        }
        do
        {
          int v106 = *v104++;
          v105 *= v106;
        }
        while (v104 != v134.__end_);
        if (v105 >= 1)
        {
LABEL_158:
          uint64_t v107 = 0;
          uint64_t v132 = (int)v88 - (int)v85;
          int v126 = v85;
          uint64_t v128 = ((unint64_t)v84 >> 2);
          do
          {
            if (v93 >= 1)
            {
              uint64_t v108 = (const float *)&v130[v160];
              int64_t v85 = (int)v107;
              int v109 = v89;
              int v110 = (float *)&v89[(int)v107];
              int v111 = v93;
              do
              {
                cblas_scopy(v95, v108, 1, v110, 1);
                v85 += v95;
                v110 += v95;
                --v111;
              }
              while (v111);
              uint64_t v107 = v85;
              LODWORD(v85) = v126;
              uint64_t v89 = v109;
            }
            NDShapeUtils::unravel_index(v107, (uint64_t)v134.__begin_, (uint64_t)v134.__end_, v159.__begin_, (uint64_t)v159.__end_);
            int v112 = &v159.__begin_[v132];
            if (v159.__end_ != v112) {
              memmove(v158.__begin_, v112, (char *)v159.__end_ - (char *)v112);
            }
            if ((int)v85 >= 1)
            {
              std::vector<int>::pointer v113 = v133.__begin_;
              std::vector<int>::pointer v114 = v158.__begin_;
              uint64_t v115 = v128;
              do
              {
                int v116 = *v113++;
                if (v116 == 1) {
                  *std::vector<int>::pointer v114 = 0;
                }
                ++v114;
                --v115;
              }
              while (v115);
            }
            size_t v155 = 0;
            uint64_t v156 = 0;
            uint64_t v157 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v155, *(const void **)v139, *(uint64_t *)&v139[8], (uint64_t)(*(void *)&v139[8] - *(void *)v139) >> 2);
            NDShapeUtils::ravel_multi_index(v158.__begin_, (uint64_t)v158.__end_, (uint64_t)v133.__begin_, (uint64_t)v133.__end_, v155, &v160);
            if (v155)
            {
              uint64_t v156 = v155;
              operator delete(v155);
            }
          }
          while ((int)v107 < v105);
        }
        if (v158.__begin_)
        {
          v158.__end_ = v158.__begin_;
          operator delete(v158.__begin_);
        }
        if (v159.__begin_)
        {
          v159.__end_ = v159.__begin_;
          operator delete(v159.__begin_);
        }
        if (v161.__begin_)
        {
          v161.__end_ = v161.__begin_;
          operator delete(v161.__begin_);
        }
        if (*(void *)v139)
        {
          *(void *)&v139[8] = *(void *)v139;
          operator delete(*(void **)v139);
        }
        std::vector<int>::pointer v83 = v133.__begin_;
        if (!v133.__begin_) {
          goto LABEL_183;
        }
      }
      else
      {
        *uint64_t v89 = *v130;
        if (!v83)
        {
LABEL_183:
          if (v134.__begin_)
          {
            v134.__end_ = v134.__begin_;
            operator delete(v134.__begin_);
          }
          goto LABEL_185;
        }
      }
      v133.__end_ = v83;
      operator delete(v83);
      goto LABEL_183;
    }
  }
LABEL_185:
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v150)
  {
    int v151 = v150;
    operator delete(v150);
  }
  if (v153) {
    nitro::nitro_function::nitro_function(v153);
  }
  uint64_t v66 = (std::__shared_weak_count *)*((void *)&v154 + 1);
  if (*((void *)&v154 + 1)) {
LABEL_192:
  }
    nitro::nitro_function::nitro_function(v66);
}

void sub_192B57AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  uint64_t v59 = *(void **)(v57 - 120);
  if (v59)
  {
    *(void *)(v57 - 112) = v59;
    operator delete(v59);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a48) {
    operator delete(a48);
  }
  if (a56) {
    operator delete(a56);
  }
  uint64_t v60 = *(std::__shared_weak_count **)(v57 - 232);
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  int v61 = *(std::__shared_weak_count **)(v57 - 216);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::broadcast_kernel_cpu::~broadcast_kernel_cpu(Espresso::broadcast_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::cast_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (v5 - *a4 != a3[1] - *a3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("cast_kernel_cpu: mismatching input blobs");
  }
  if (v5 != v4)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = (uint64_t *)(v4 + 16 * v8);
      uint64_t v10 = *a3;
      Espresso::abstract_blob_container::shape((char *)&src, *v9);
      int v11 = (uint64_t *)(v10 + 16 * v8);
      if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)&src))
      {
        Espresso::abstract_blob_container::shape((char *)&dest, *v11);
        BOOL v13 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&dest) == 0;
        if (__p)
        {
          uint64_t v163 = __p;
          operator delete(__p);
        }
      }
      else
      {
        BOOL v13 = 1;
      }
      int v14 = v165;
      if (v165)
      {
        uint64_t v166 = v165;
        operator delete(v165);
      }
      if (!v13) {
        break;
      }
      {
        if (v14)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
          }
          Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1E9306FC2;
        }
      }
      if (Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
      {
        int v15 = Espresso::espresso_os_log_subsystem(v14, v12);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(src.data) = 0;
          _os_log_debug_impl(&dword_1920CB000, v15, OS_LOG_TYPE_DEBUG, "cast_kernel_cpu: zero shaped input or output so skipping computation", (uint8_t *)&src, 2u);
        }
      }
LABEL_135:
      ++v8;
      uint64_t v4 = *a4;
      if (v8 >= (a4[1] - *a4) >> 4) {
        return;
      }
    }
    int v16 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))();
    unint64_t v17 = (Espresso *)(*(uint64_t (**)(void))(*(void *)*v11 + 32))();
    if (v16 == v17)
    {
      {
        if (v17)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
          }
          Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1E9306FC2;
        }
      }
      if (Espresso::cast_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
      {
        unint64_t v19 = Espresso::espresso_os_log_subsystem(v17, v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(src.data) = 134217984;
          *(void **)((char *)&src.data + 4) = (void *)v8;
          _os_log_error_impl(&dword_1920CB000, v19, OS_LOG_TYPE_ERROR, "cast_kernel_cpu: same compute path of bottom and top blob %zu", (uint8_t *)&src, 0xCu);
        }
      }
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v159, v11);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v157, v11);
    Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v155, v11);
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v153, v11);
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v151, v9);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v149, v9);
    Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v147, v9);
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v145, v9);
    if (!(*(unsigned int (**)(void))(*(void *)*v11 + 32))())
    {
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 3)
      {
        uint64_t v25 = 0;
        vDSP_Length v26 = *(int *)(v157 + 8);
        do
        {
          v26 *= *(int *)(v157 + 12 + v25);
          v25 += 4;
        }
        while (v25 != 12);
        vDSP_vflt32(*(const int **)(v147 + 24), 1, *(float **)(v157 + 24), 1, v26);
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 2)
      {
        uint64_t v34 = 0;
        vDSP_Length v35 = *(int *)(v157 + 8);
        do
        {
          v35 *= *(int *)(v157 + 12 + v34);
          v34 += 4;
        }
        while (v34 != 12);
        vDSP_vflt8(*(const char **)(v145 + 24), 1, *(float **)(v157 + 24), 1, v35);
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 4)
      {
        uint64_t v51 = 0;
        vDSP_Length v52 = *(int *)(v157 + 8);
        do
        {
          v52 *= *(int *)(v157 + 12 + v51);
          v51 += 4;
        }
        while (v51 != 12);
        vDSP_vfltu8(*(const unsigned __int8 **)(v145 + 24), 1, *(float **)(v157 + 24), 1, v52);
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 1)
      {
        uint64_t v69 = 0;
        int v70 = *(void **)(v157 + 24);
        vImagePixelCount v71 = *(int *)(v157 + 8);
        do
        {
          v71 *= *(int *)(v157 + 12 + v69);
          v69 += 4;
        }
        while (v69 != 12);
        src.int data = *(void **)(v151 + 24);
        src.vImagePixelCount height = 1;
        src.width = v71;
        src.rowBytes = 2 * v71;
        dest.int data = v70;
        dest.vImagePixelCount height = 1;
        dest.width = v71;
        dest.rowBytes = 4 * v71;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))())
      {
        int v135 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))();
        int v136 = (*(uint64_t (**)(void))(*(void *)*v11 + 32))();
        Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v135, v136);
      }
      uint64_t v109 = 0;
      int v21 = *(void **)(v157 + 24);
      uint64_t v22 = *(const void **)(v149 + 24);
      uint64_t v23 = *(int *)(v149 + 8);
      do
      {
        v23 *= *(int *)(v149 + 12 + v109);
        v109 += 4;
      }
      while (v109 != 12);
      goto LABEL_28;
    }
    if ((*(unsigned int (**)(void))(*(void *)*v11 + 32))() == 3)
    {
      if (!(*(unsigned int (**)(void))(*(void *)*v9 + 32))())
      {
        uint64_t v43 = 0;
        vDSP_Length v44 = *(int *)(v155 + 8);
        do
        {
          v44 *= *(int *)(v155 + 12 + v43);
          v43 += 4;
        }
        while (v43 != 12);
        vDSP_vfix32(*(const float **)(v149 + 24), 1, *(int **)(v155 + 24), 1, v44);
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 3)
      {
        uint64_t v20 = 0;
        int v21 = *(void **)(v155 + 24);
        uint64_t v22 = *(const void **)(v147 + 24);
        uint64_t v23 = *(int *)(v147 + 8);
        do
        {
          v23 *= *(int *)(v147 + 12 + v20);
          v20 += 4;
        }
        while (v20 != 12);
LABEL_28:
        size_t v24 = 4 * v23;
LABEL_29:
        memcpy(v21, v22, v24);
LABEL_119:
        if (v146) {
          nitro::nitro_function::nitro_function(v146);
        }
        if (v148) {
          nitro::nitro_function::nitro_function(v148);
        }
        if (v150) {
          nitro::nitro_function::nitro_function(v150);
        }
        if (v152) {
          nitro::nitro_function::nitro_function(v152);
        }
        if (v154) {
          nitro::nitro_function::nitro_function(v154);
        }
        if (v156) {
          nitro::nitro_function::nitro_function(v156);
        }
        if (v158) {
          nitro::nitro_function::nitro_function(v158);
        }
        if (v160) {
          nitro::nitro_function::nitro_function(v160);
        }
        goto LABEL_135;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 2)
      {
        unint64_t v45 = 0;
        uint64_t v46 = v145;
        uint64_t v47 = v155;
        uint64_t v48 = v145 + 12;
        while (1)
        {
          uint64_t v49 = 0;
          unint64_t v50 = *(int *)(v46 + 8);
          do
          {
            v50 *= *(int *)(v48 + v49);
            v49 += 4;
          }
          while (v49 != 12);
          if (v45 >= v50) {
            break;
          }
          *(_DWORD *)(*(void *)(v47 + 24) + 4 * v45) = *(char *)(*(void *)(v46 + 24) + v45);
          ++v45;
        }
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 4)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v145;
        uint64_t v65 = v155;
        uint64_t v66 = v145 + 12;
        while (1)
        {
          uint64_t v67 = 0;
          unint64_t v68 = *(int *)(v64 + 8);
          do
          {
            v68 *= *(int *)(v66 + v67);
            v67 += 4;
          }
          while (v67 != 12);
          if (v63 >= v68) {
            break;
          }
          *(_DWORD *)(*(void *)(v65 + 24) + 4 * v63) = *(unsigned __int8 *)(*(void *)(v64 + 24) + v63);
          ++v63;
        }
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 1)
      {
        int v133 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))();
        int v134 = (*(uint64_t (**)(void))(*(void *)*v11 + 32))();
        Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v133, v134);
      }
      uint64_t v91 = v155;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v143, v155 + 8);
      uint64_t v92 = 0;
      uint64_t v93 = v143;
      int v94 = *(void **)(v143 + 24);
      vImagePixelCount v95 = *(int *)(v143 + 8);
      do
      {
        v95 *= *(int *)(v143 + 12 + v92);
        v92 += 4;
      }
      while (v92 != 12);
      src.int data = *(void **)(v151 + 24);
      src.vImagePixelCount height = 1;
      src.width = v95;
      src.rowBytes = 2 * v95;
      dest.int data = v94;
      dest.vImagePixelCount height = 1;
      dest.width = v95;
      dest.rowBytes = 4 * v95;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      uint64_t v96 = 0;
      vDSP_Length v97 = *(int *)(v91 + 8);
      do
      {
        v97 *= *(int *)(v91 + 12 + v96);
        v96 += 4;
      }
      while (v96 != 12);
      vDSP_vfix32(*(const float **)(v93 + 24), 1, *(int **)(v91 + 24), 1, v97);
    }
    else if ((*(unsigned int (**)(void))(*(void *)*v11 + 32))() == 2)
    {
      if (!(*(unsigned int (**)(void))(*(void *)*v9 + 32))())
      {
        uint64_t v55 = 0;
        vDSP_Length v56 = *(int *)(v153 + 8);
        do
        {
          v56 *= *(int *)(v153 + 12 + v55);
          v55 += 4;
        }
        while (v55 != 12);
        vDSP_vfix8(*(const float **)(v149 + 24), 1, *(char **)(v153 + 24), 1, v56);
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 1)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 3)
        {
          unint64_t v57 = 0;
          uint64_t v58 = v147;
          uint64_t v59 = v153;
          uint64_t v60 = v147 + 12;
          while (1)
          {
            uint64_t v61 = 0;
            uint64_t v62 = *(int *)(v58 + 8);
            do
            {
              v62 *= *(int *)(v60 + v61);
              v61 += 4;
            }
            while (v61 != 12);
            if (v57 >= 4 * v62) {
              break;
            }
            *(unsigned char *)(*(void *)(v59 + 24) + v57) = *(_DWORD *)(*(void *)(v58 + 24) + 4 * v57);
            ++v57;
          }
          goto LABEL_119;
        }
        if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 2
          && (*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 4)
        {
          int v137 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))();
          int v138 = (*(uint64_t (**)(void))(*(void *)*v11 + 32))();
          Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v137, v138);
        }
        uint64_t v90 = 0;
        int v21 = *(void **)(v153 + 24);
        uint64_t v22 = *(const void **)(v145 + 24);
        size_t v24 = *(int *)(v145 + 8);
        do
        {
          v24 *= *(int *)(v145 + 12 + v90);
          v90 += 4;
        }
        while (v90 != 12);
        goto LABEL_29;
      }
      uint64_t v27 = v153;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v143, v153 + 8);
      uint64_t v28 = 0;
      uint64_t v29 = v143;
      uint64_t v30 = *(void **)(v143 + 24);
      vImagePixelCount v31 = *(int *)(v143 + 8);
      do
      {
        v31 *= *(int *)(v143 + 12 + v28);
        v28 += 4;
      }
      while (v28 != 12);
      src.int data = *(void **)(v151 + 24);
      src.vImagePixelCount height = 1;
      src.width = v31;
      src.rowBytes = 2 * v31;
      dest.int data = v30;
      dest.vImagePixelCount height = 1;
      dest.width = v31;
      dest.rowBytes = 4 * v31;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      uint64_t v32 = 0;
      vDSP_Length v33 = *(int *)(v27 + 8);
      do
      {
        v33 *= *(int *)(v27 + 12 + v32);
        v32 += 4;
      }
      while (v32 != 12);
      vDSP_vfix8(*(const float **)(v29 + 24), 1, *(char **)(v27 + 24), 1, v33);
    }
    else
    {
      if ((*(unsigned int (**)(void))(*(void *)*v11 + 32))() != 4)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v11 + 32))() != 1)
        {
          int v131 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))();
          int v132 = (*(uint64_t (**)(void))(*(void *)*v11 + 32))();
          Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v131, v132);
        }
        Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&src, v11);
        if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))())
        {
          if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 1)
          {
            uint64_t v53 = 0;
            uint64_t v54 = *(int *)(v151 + 8);
            do
            {
              v54 *= *(int *)(v151 + 12 + v53);
              v53 += 4;
            }
            while (v53 != 12);
            memcpy(*((void **)src.data + 3), *(const void **)(v151 + 24), 2 * v54);
          }
          else
          {
            if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 3)
            {
              int data = (int *)src.data;
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&dest, (uint64_t)src.data + 8);
              uint64_t v100 = 0;
              int v101 = dest.data;
              vDSP_Length v102 = *((int *)dest.data + 2);
              do
              {
                v102 *= *(int *)((char *)dest.data + v100 + 12);
                v100 += 4;
              }
              while (v100 != 12);
              vDSP_vflt32(*(const int **)(v147 + 24), 1, *((float **)dest.data + 3), 1, v102);
              uint64_t v103 = 0;
              std::vector<int>::pointer v104 = (int *)v101[3];
              int v105 = (_WORD *)*((void *)data + 3);
              uint64_t v106 = data[2];
              do
              {
                v106 *= data[v103 + 3];
                ++v103;
              }
              while (v103 != 3);
              for (; v106; --v106)
              {
                int v107 = *v104++;
                _S0 = v107;
                __asm { FCVT            H0, S0 }
                *v105++ = _S0;
              }
            }
            else if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 2)
            {
              int v111 = (int *)src.data;
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&dest, (uint64_t)src.data + 8);
              uint64_t v112 = 0;
              std::vector<int>::pointer v113 = dest.data;
              vDSP_Length v114 = *((int *)dest.data + 2);
              do
              {
                v114 *= *(int *)((char *)dest.data + v112 + 12);
                v112 += 4;
              }
              while (v112 != 12);
              vDSP_vflt8(*(const char **)(v145 + 24), 1, *((float **)dest.data + 3), 1, v114);
              uint64_t v115 = 0;
              int v116 = (int *)v113[3];
              vDSP_Length v117 = (_WORD *)*((void *)v111 + 3);
              uint64_t v118 = v111[2];
              do
              {
                v118 *= v111[v115 + 3];
                ++v115;
              }
              while (v115 != 3);
              for (; v118; --v118)
              {
                int v119 = *v116++;
                _S0 = v119;
                __asm { FCVT            H0, S0 }
                *v117++ = _S0;
              }
            }
            else
            {
              if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 4)
              {
                int v139 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))();
                int v140 = (*(uint64_t (**)(void))(*(void *)*v11 + 32))();
                Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v139, v140);
              }
              uint64_t v121 = (int *)src.data;
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&dest, (uint64_t)src.data + 8);
              uint64_t v122 = 0;
              uint64_t v123 = dest.data;
              vDSP_Length v124 = *((int *)dest.data + 2);
              do
              {
                v124 *= *(int *)((char *)dest.data + v122 + 12);
                v122 += 4;
              }
              while (v122 != 12);
              vDSP_vfltu8(*(const unsigned __int8 **)(v145 + 24), 1, *((float **)dest.data + 3), 1, v124);
              uint64_t v125 = 0;
              int v126 = (int *)v123[3];
              uint64_t v127 = (_WORD *)*((void *)v121 + 3);
              uint64_t v128 = v121[2];
              do
              {
                v128 *= v121[v125 + 3];
                ++v125;
              }
              while (v125 != 3);
              for (; v128; --v128)
              {
                int v129 = *v126++;
                _S0 = v129;
                __asm { FCVT            H0, S0 }
                *v127++ = _S0;
              }
            }
            if (dest.height) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
            }
          }
        }
        else
        {
          uint64_t v74 = 0;
          BOOL v75 = *(int **)(v149 + 24);
          uint64_t v76 = (_WORD *)*((void *)src.data + 3);
          uint64_t v77 = *((int *)src.data + 2);
          do
          {
            v77 *= *(int *)((char *)src.data + v74 + 12);
            v74 += 4;
          }
          while (v74 != 12);
          for (; v77; --v77)
          {
            int v78 = *v75++;
            _S0 = v78;
            __asm { FCVT            H0, S0 }
            *v76++ = _S0;
          }
        }
        vImagePixelCount height = (std::__shared_weak_count *)src.height;
        if (!src.height) {
          goto LABEL_119;
        }
        goto LABEL_118;
      }
      if (!(*(unsigned int (**)(void))(*(void *)*v9 + 32))())
      {
        uint64_t v72 = 0;
        vDSP_Length v73 = *(int *)(v153 + 8);
        do
        {
          v73 *= *(int *)(v153 + 12 + v72);
          v72 += 4;
        }
        while (v72 != 12);
        vDSP_vfixu8(*(const float **)(v149 + 24), 1, *(unsigned __int8 **)(v153 + 24), 1, v73);
        goto LABEL_119;
      }
      if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 1)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() == 3)
        {
          unint64_t v84 = 0;
          uint64_t v85 = v147;
          uint64_t v86 = v153;
          uint64_t v87 = v147 + 12;
          while (1)
          {
            uint64_t v88 = 0;
            uint64_t v89 = *(int *)(v85 + 8);
            do
            {
              v89 *= *(int *)(v87 + v88);
              v88 += 4;
            }
            while (v88 != 12);
            if (v84 >= 4 * v89) {
              break;
            }
            *(unsigned char *)(*(void *)(v86 + 24) + v84) = *(_DWORD *)(*(void *)(v85 + 24) + 4 * v84);
            ++v84;
          }
          goto LABEL_119;
        }
        if ((*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 4
          && (*(unsigned int (**)(void))(*(void *)*v9 + 32))() != 2)
        {
          int v141 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))();
          int v142 = (*(uint64_t (**)(void))(*(void *)*v11 + 32))();
          Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(v141, v142);
        }
        uint64_t v110 = 0;
        int v21 = *(void **)(v153 + 24);
        uint64_t v22 = *(const void **)(v145 + 24);
        size_t v24 = *(int *)(v145 + 8);
        do
        {
          v24 *= *(int *)(v145 + 12 + v110);
          v110 += 4;
        }
        while (v110 != 12);
        goto LABEL_29;
      }
      uint64_t v36 = v153;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v143, v153 + 8);
      uint64_t v37 = 0;
      uint64_t v38 = v143;
      int v39 = *(void **)(v143 + 24);
      vImagePixelCount v40 = *(int *)(v143 + 8);
      do
      {
        v40 *= *(int *)(v143 + 12 + v37);
        v37 += 4;
      }
      while (v37 != 12);
      src.int data = *(void **)(v151 + 24);
      src.vImagePixelCount height = 1;
      src.width = v40;
      src.rowBytes = 2 * v40;
      dest.int data = v39;
      dest.vImagePixelCount height = 1;
      dest.width = v40;
      dest.rowBytes = 4 * v40;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      uint64_t v41 = 0;
      vDSP_Length v42 = *(int *)(v36 + 8);
      do
      {
        v42 *= *(int *)(v36 + 12 + v41);
        v41 += 4;
      }
      while (v41 != 12);
      vDSP_vfixu8(*(const float **)(v38 + 24), 1, *(unsigned __int8 **)(v36 + 24), 1, v42);
    }
    vImagePixelCount height = v144;
    if (!v144) {
      goto LABEL_119;
    }
LABEL_118:
    nitro::nitro_function::nitro_function(height);
    goto LABEL_119;
  }
}

void sub_192B59064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path,Espresso::compute_path>(int a1, int a2)
{
}

void Espresso::cast_kernel_cpu::~cast_kernel_cpu(Espresso::cast_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::compute_stats_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v19, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v17, *a4);
  uint64_t v5 = v17;
  vDSP_Length v6 = (v17[5] * v17[4]);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = v19;
    uint64_t v11 = 4 * v17[3] * v17[2];
    unsigned int v12 = 4;
    do
    {
      uint64_t v13 = *(void *)(v10 + 24);
      int v14 = (const float *)(*((void *)v5 + 3) + v8);
      vDSP_minv(v14, 1, (float *)(v13 + v7), v6);
      vDSP_maxv(v14, 1, (float *)(v13 + 4 * (v12 - 3)), v6);
      vDSP_normalize(v14, 1, 0, 1, (float *)(v13 + 4 * (v12 - 2)), (float *)(v13 + 4 * (v12 - 1)), v6);
      int v15 = (float *)(v13 + 4 * v12);
      vDSP_svesq(v14, 1, v15, v6);
      *int v15 = *v15 / (float)(int)v6;
      ++v9;
      v8 += v11;
      v12 += 5;
      v7 += 20;
    }
    while (v9 < (int)v5[5] * (uint64_t)(int)v5[4]);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  int v16 = v20;
  if (v20)
  {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192B593A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::compute_stats_kernel_cpu::~compute_stats_kernel_cpu(Espresso::compute_stats_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::lambda_kernel_cpu::~lambda_kernel_cpu(Espresso::lambda_kernel_cpu *this)
{
  Espresso::generic_lambda_kernel::~generic_lambda_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::patch_extractor_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v10 = *(uint64_t **)a4;
  unint64_t v11 = *(void *)(a4 + 8) - *(void *)a4;
  if (!v11)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: requires at least one input");
    goto LABEL_159;
  }
  if (*(_DWORD *)(a1 + 280))
  {
    if (v11 > 0x1F)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v211, v10 + 2);
      CGFloat a = v211.a;
      CGFloat b = v211.b;
      goto LABEL_7;
    }
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: sparse mode requires two inputs");
LABEL_159:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  Espresso::abstract_blob_container::shape((char *)&v211, *v10);
  (*(void (**)(vImage_Buffer *__return_ptr))(*(void *)a1 + 328))(&src);
  CGFloat a = *(double *)&src.data;
  CGFloat b = *(double *)&src.height;
  src.vImagePixelCount height = 0;
  src.int data = 0;
  if (*(void *)&v211.ty)
  {
    CGFloat ty = v211.ty;
    operator delete(*(void **)&v211.ty);
  }
LABEL_7:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v209, *(uint64_t **)a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v207, *a3);
  double v161 = b;
  uint64_t v16 = a1;
  uint64_t v175 = v209;
  if (!v209 || (uint64_t v174 = v207) == 0)
  {
    uint64_t v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v145, "Inconsistent state");
    __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a == 0.0)
  {
    uint64_t v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v146, "Inconsistent state");
    __cxa_throw(v146, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v17 = *(_DWORD *)(*(void *)&a + 16);
  int v18 = v17 & 1;
  uint64_t v160 = v17;
  if (v17 < 0) {
    int v18 = -v18;
  }
  if (*(_DWORD *)(a1 + 280) == 4) {
    int v18 = v18 == 0;
  }
  int v159 = v18;
  int v151 = v209[2].i32[1];
  if (v18) {
    int v19 = v209[2].i32[1];
  }
  else {
    int v19 = 1;
  }
  int v148 = *(_DWORD *)(*(void *)&a + 20);
  uint64_t v158 = (v19 * v148);
  if ((int)v158 >= 1)
  {
    uint64_t v167 = 0;
    uint64_t v20 = 0;
    vImagePixelCount v22 = *(int *)(v207 + 8);
    int v21 = *(_DWORD *)(v207 + 12);
    int32x2_t v23 = v209[1];
    unsigned __int32 v24 = v209[2].u32[0];
    __asm { FMOV            V2.2S, #1.0 }
    float32x2_t v29 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned char *)(a1 + 320) == 0), 0x1FuLL)), (int8x8_t)vcvt_f32_s32(vadd_s32(v23, (int32x2_t)-1)), _D2);
    int v30 = v21 * v22;
    int v31 = v24 * v21 * v22;
    int v33 = v23.i32[1];
    int v32 = v23.i32[0];
    __int32 v34 = v23.i32[1] * v23.i32[0];
    uint64_t v181 = v24;
    __int32 v150 = v23.i32[1] * v23.i32[0] * v24;
    uint64_t v35 = v23.i32[0];
    size_t v36 = 4 * v23.i32[0];
    float v191 = (float)(int)v22;
    if (v23.i32[0] <= 1) {
      int v32 = 1;
    }
    float v190 = (float)v21;
    float v183 = 1.0 / (float)v21;
    float v37 = 2.0 / (float)v32;
    if (v23.i32[1] <= 1) {
      int v38 = 1;
    }
    else {
      int v38 = HIDWORD(*(void *)&v209[1]);
    }
    double v153 = (float)(2.0 / (float)v38);
    double v154 = v37;
    uint64_t v173 = v30;
    uint64_t v172 = v34;
    uint64_t v149 = v31;
    vImagePixelCount v182 = *(int *)(v207 + 12);
    uint64_t v39 = *(unsigned int *)(v207 + 12);
    uint64_t v40 = *(unsigned int *)(v207 + 8);
    v41.i32[1] = v23.i32[1];
    v41.i32[0] = 0;
    int32x2_t v152 = v41;
    uint64_t v155 = 4 * v31;
    uint64_t v170 = 4 * v30;
    uint64_t v171 = 4 * v34;
    unsigned __int32 v147 = vdup_lane_s32(v23, 1).u32[0];
    double v157 = a;
    int32x2_t v193 = v23;
    float32x2_t v156 = v29;
    while (1)
    {
      vDSP_Length v42 = (float32x2_t *)(*(void *)(*(void *)&a + 24) + 4 * v20 * v160);
      if (v159)
      {
        int v43 = (int)v42->f32[v20];
        vDSP_Length v42 = (float32x2_t *)((char *)v42 + 4);
        if (v151 < v43) {
          int v43 = v151;
        }
      }
      else
      {
        int v43 = (int)v20 / v148;
      }
      unsigned int v44 = *(_DWORD *)(v16 + 280);
      uint64_t v168 = (float *)v42;
      uint64_t v166 = v20;
      if (v44 == 3) {
        break;
      }
      if (v44 != 4)
      {
        if (v44 == 5) {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_homography_from_4_source_points not implemented");
        }
        float32x2_t v45 = vmul_f32(v29, *v42);
        int32x2_t v46 = vcvt_s32_f32(vrnda_f32(v45));
        if (v44 > 1)
        {
          int32x2_t v47 = vcvt_s32_f32(vrnda_f32(vmul_f32(v29, v42[1])));
          int32x2_t v48 = vsub_s32(v47, v46);
          if (v44 != 2)
          {
            int v169 = 0;
            int32x2_t v48 = vmax_s32(v48, (int32x2_t)0x100000001);
            goto LABEL_42;
          }
        }
        else
        {
          int32x2_t v47 = vcvt_s32_f32(vrnda_f32(vadd_f32(v45, vcvt_f32_s32(*(int32x2_t *)(a1 + 284)))));
          int32x2_t v48 = vsub_s32(v47, v46);
        }
        *(int32x2_t *)v51.i8 = vzip1_s32(v23, v47);
        v51.i64[1] = __PAIR64__(v46.u32[0], v23.u32[0]);
        v52.i64[0] = __PAIR64__(v46.u32[1], v147);
        v52.u64[1] = (unint64_t)vzip2_s32(v23, v47);
        v53.i64[0] = v46.u32[1];
        v53.i64[1] = v47.u32[1];
        v54.i64[0] = v47.u32[0];
        v54.i64[1] = v46.u32[0];
        if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v54, v51), (int16x8_t)vcgtq_s32(v53, v52)))) & 1) == 0)
        {
          int v169 = 0;
LABEL_42:
          signed int v49 = v46.i32[0];
          int32x2_t v50 = vzip2_s32(v46, v47);
          goto LABEL_43;
        }
        signed int v49 = 0;
        transform.CGFloat a = v191 / (float)v48.i32[0];
        float32x2_t v55 = vcvt_f32_s32((int32x2_t)vext_s8((int8x8_t)v48, (int8x8_t)v46, 4uLL));
        v56.f32[0] = v190;
        v56.f32[1] = -transform.a;
        *(float *)&uint64_t v57 = vdiv_f32(v56, v55).f32[0];
        HIDWORD(v57) = vmul_f32(v56, v55).i32[1];
        *(void *)&transform.d = v57;
        transform.CGFloat ty = (float)-(float)vsub_s32(v23, v47).i32[1] * *(float *)&v57;
        transform.c = 0.0;
        transform.CGFloat b = 0.0;
        int v169 = 1;
        goto LABEL_39;
      }
      signed int v49 = 0;
      int v169 = 0;
      float v5 = v42->f32[0];
      float v186 = v42->f32[1];
      float v8 = v42[1].f32[0];
      float v9 = v42[1].f32[1];
      float v7 = v42[2].f32[1];
      float v185 = v42[2].f32[0];
      float v6 = v42[3].f32[0];
      float v184 = v42[3].f32[1];
      int32x2_t v48 = v23;
      int32x2_t v50 = v152;
      float v4 = v42[4].f32[0];
LABEL_43:
      if ((int)v181 >= 1)
      {
        uint64_t v58 = 0;
        uint64_t v180 = v20 * v149;
        uint64_t v179 = vmul_s32(v50, v193).i32[0];
        uint64_t v177 = v49;
        uint64_t v178 = v150 * v43;
        v59.i64[0] = v48.i32[0];
        v59.i64[1] = v48.i32[1];
        float v192 = (float)v48.i32[0] / v191;
        int8x16_t v176 = vextq_s8(v59, v59, 8uLL);
        int32x2_t v188 = vdup_n_s32(v49);
        uint64_t v60 = 4 * v178;
        uint64_t v61 = v167;
        float v187 = (float)v48.i32[1] / v190;
        do
        {
          uint64_t v62 = *(void *)(v174 + 24);
          int32x2_t v63 = v175[3];
          uint64_t v64 = (void *)(*(void *)&v63 + 4 * v178 + 4 * v58 * v172 + 4 * v179 + 4 * v177);
          *(int8x16_t *)&src.vImagePixelCount height = v176;
          src.int data = v64;
          src.rowBytes = v36;
          dest.int data = (void *)(v62 + 4 * v180 + 4 * v58 * v173);
          dest.vImagePixelCount height = v182;
          dest.width = v22;
          dest.rowBytes = 4 * v22;
          int v65 = *(_DWORD *)(a1 + 280);
          switch(v65)
          {
            case 0:
            case 1:
            case 2:
              if (v169) {
                vImageAffineWarp_PlanarF(&src, &dest, 0, &transform, 0.0, 4u);
              }
              else {
                vImageScale_PlanarF(&src, &dest, 0, 0);
              }
              break;
            case 3:
              CGFloat v128 = v168[3];
              CGFloat v129 = v168[1];
              CGFloat v130 = v168[4];
              CGFloat v131 = v168[2];
              CGFloat v132 = v168[5];
              v202.CGFloat a = *v168;
              v202.CGFloat b = v128;
              v202.c = v129;
              v202.d = v130;
              v202.double tx = v131;
              v202.CGFloat ty = v132;
              CGAffineTransformInvert(&v211, &v202);
              float64x2_t v133 = *(float64x2_t *)&v211.a;
              float64x2_t v134 = *(float64x2_t *)&v211.c;
              double tx = v211.tx;
              double v135 = v211.ty;
              if (!*(unsigned char *)(a1 + 320))
              {
                long long v164 = *(_OWORD *)&v211.c;
                long long v165 = *(_OWORD *)&v211.a;
                long long v137 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
                *(_OWORD *)&v201.CGFloat a = *MEMORY[0x1E4F1DAB8];
                *(_OWORD *)&v201.c = v137;
                *(_OWORD *)&v201.double tx = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
                int v138 = *(_DWORD *)(a1 + 284);
                if (v138 <= 1) {
                  int v138 = 1;
                }
                CGFloat v162 = v211.tx;
                CGFloat v163 = v211.ty;
                double v139 = (float)((float)v138 * 0.5);
                if (*(int *)(a1 + 288) <= 1) {
                  int v140 = 1;
                }
                else {
                  int v140 = *(_DWORD *)(a1 + 288);
                }
                CGAffineTransformScale(&v211, &v201, v139, (float)((float)v140 * 0.5));
                CGAffineTransform v200 = v211;
                CGAffineTransformTranslate(&v211, &v200, 1.0, 1.0);
                CGAffineTransform v199 = v211;
                CGAffineTransformScale(&v211, &v199, 1.0, -1.0);
                *(_OWORD *)&t1.CGFloat a = v165;
                *(_OWORD *)&t1.c = v164;
                t1.double tx = v162;
                t1.CGFloat ty = v163;
                CGAffineTransform t2 = v211;
                CGAffineTransformConcat(&v211, &t1, &t2);
                CGAffineTransform v196 = v211;
                CGAffineTransformScale(&v211, &v196, 1.0, -1.0);
                CGAffineTransform v195 = v211;
                CGAffineTransformTranslate(&v211, &v195, -1.0, -1.0);
                CGAffineTransform v194 = v211;
                CGAffineTransformScale(&v211, &v194, v154, v153);
                float64x2_t v133 = *(float64x2_t *)&v211.a;
                float64x2_t v134 = *(float64x2_t *)&v211.c;
                double tx = v211.tx;
                double v135 = v211.ty;
              }
              float32x4_t v141 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v133), v134);
              float v142 = tx;
              *(float32x4_t *)&v203.CGFloat a = v141;
              v141.f32[0] = v135;
              v203.double tx = v142;
              LODWORD(v203.ty) = v141.i32[0];
              vImageAffineWarp_PlanarF(&src, &dest, 0, &v203, 0.0, 4u);
              break;
            case 4:
            case 5:
              if ((int)v182 >= 1)
              {
                uint64_t v66 = 0;
                uint64_t v67 = v62 + v61;
                do
                {
                  if ((int)v22 >= 1)
                  {
                    uint64_t v68 = 0;
                    int v69 = *(unsigned __int8 *)(a1 + 320);
                    if (*(unsigned char *)(a1 + 320)) {
                      float v70 = (float)(int)v66;
                    }
                    else {
                      float v70 = (float)((float)((float)(int)v66 * v183) + -1.0)
                    }
                          + (float)((float)((float)(int)v66 * v183) + -1.0);
                    float v71 = v186 * v70;
                    float v72 = v185 * v70;
                    float v73 = v184 * v70;
                    do
                    {
                      float v74 = (float)(int)v68;
                      if (!v69) {
                        float v74 = (float)((float)((float)(int)v68 * (float)(1.0 / (float)(int)v22)) + -1.0)
                      }
                            + (float)((float)((float)(int)v68 * (float)(1.0 / (float)(int)v22)) + -1.0);
                      float v75 = v8 + (float)(v71 + (float)(v5 * v74));
                      float v76 = v7 + (float)(v72 + (float)(v9 * v74));
                      float v77 = v4 + (float)(v73 + (float)(v6 * v74));
                      float v78 = v75 / v77;
                      float v79 = v76 / v77;
                      if (!v69)
                      {
                        float v78 = (float)((float)(v78 + 1.0) * 0.5) * v191;
                        float v79 = (float)((float)(v79 + 1.0) * 0.5) * v190;
                      }
                      int v80 = vcvtms_s32_f32(v78);
                      int v81 = v80 + 1;
                      int v82 = vcvtms_s32_f32(v79);
                      int v83 = v82 + 1;
                      BOOL v85 = v80 < 0 || (int)v35 <= v80;
                      BOOL v87 = v80 < -1 || v81 >= (int)v35;
                      BOOL v89 = v82 < 0 || v33 <= v82;
                      BOOL v91 = v82 < -1 || v83 >= v33;
                      float v92 = 0.0;
                      float v93 = 0.0;
                      if (!v85 && !v89) {
                        float v93 = *((float *)v64 + v80 + (int)v35 * v82);
                      }
                      if (!v85 && !v91) {
                        float v92 = *((float *)v64 + v80 + v83 * (int)v35);
                      }
                      float v94 = 0.0;
                      float v95 = 0.0;
                      if (!v87 && !v89) {
                        float v95 = *((float *)v64 + v81 + (int)v35 * v82);
                      }
                      if (!v87 && !v91) {
                        float v94 = *((float *)v64 + v81 + v83 * (int)v35);
                      }
                      float v96 = v78 - (float)v80;
                      *(float *)(v67 + 4 * v68++) = (float)((float)((float)((float)(v79 - (float)v82)
                                                                          * (float)((float)(1.0 - v96) * v92))
                                                                  + (float)((float)((float)(1.0 - v96) * v93)
                                                                          * (float)(1.0 - (float)(v79 - (float)v82))))
                                                          + (float)((float)(v96 * v95)
                                                                  * (float)(1.0 - (float)(v79 - (float)v82))))
                                                  + (float)((float)(v96 * v94) * (float)(v79 - (float)v82));
                    }
                    while (v40 != v68);
                  }
                  ++v66;
                  v67 += 4 * v22;
                }
                while (v66 != v39);
              }
              break;
            case 6:
            case 7:
              if ((int)v182 >= 1)
              {
                uint64_t v97 = 0;
                do
                {
                  if ((int)v22 >= 1)
                  {
                    uint64_t v98 = 0;
                    v99.f32[0] = (float)(int)v97;
                    v99.f32[1] = (float)(int)v97 + 1.0;
                    int32x2_t v100 = vmax_s32(vadd_s32(v188, vcvt_s32_f32(vrndm_f32(vmul_n_f32(v99, v187)))), 0);
                    int32x2_t v101 = vmin_s32(v193, v100);
                    __int32 v102 = v101.i32[1];
                    __int32 v103 = v101.i32[0];
                    uint64_t v104 = v100.u32[0];
                    if (v35 < v100.u32[0]) {
                      uint64_t v104 = v35;
                    }
                    do
                    {
                      v105.f32[0] = (float)(int)v98;
                      v105.f32[1] = (float)(int)v98 + 1.0;
                      int32x2_t v106 = vmax_s32(vadd_s32(v50, vcvt_s32_f32(vrndm_f32(vmul_n_f32(v105, v192)))), 0);
                      int32x2_t v107 = vmin_s32(v193, v106);
                      int v108 = v107.i32[0];
                      BOOL v110 = v107.i32[1] > v107.i32[0] && v102 > v103;
                      float v111 = 0.0;
                      if (v65 == 6)
                      {
                        if (v107.i32[1] > v108)
                        {
                          uint64_t v119 = v106.u32[0];
                          if (v35 < v106.u32[0]) {
                            uint64_t v119 = v35;
                          }
                          int v120 = v107.i32[1] + v119 - v108;
                          int v121 = v104 + v35 * v119;
                          uint64_t v122 = *(void *)&v63 + 4 * (v104 + v35 * v119);
                          int v123 = -1;
                          do
                          {
                            uint64_t v124 = v122;
                            int v125 = v121;
                            __int32 v126 = v102 - v103;
                            if (v102 > v103)
                            {
                              do
                              {
                                if (*(float *)(v124 + v60) > v111 || v123 == -1)
                                {
                                  float v111 = *(float *)(v124 + v60);
                                  int v123 = v125;
                                }
                                ++v125;
                                v124 += 4;
                                --v126;
                              }
                              while (v126);
                            }
                            ++v119;
                            v121 += v35;
                            v122 += v36;
                          }
                          while (v120 != v119);
                        }
                      }
                      else if (v65 == 7)
                      {
                        if (v107.i32[1] <= v108)
                        {
                          float v111 = NAN;
                        }
                        else
                        {
                          uint64_t v112 = v106.u32[0];
                          if (v35 < v106.u32[0]) {
                            uint64_t v112 = v35;
                          }
                          int v113 = v107.i32[1] + v112 - v108;
                          uint64_t v114 = *(void *)&v63 + v60 + 4 * (v104 + v35 * v112);
                          float v115 = 0.0;
                          do
                          {
                            int v116 = (float *)v114;
                            __int32 v117 = v102 - v103;
                            if (v102 > v103)
                            {
                              do
                              {
                                float v118 = *v116++;
                                float v115 = v115 + v118;
                                float v111 = v111 + 1.0;
                                --v117;
                              }
                              while (v117);
                            }
                            ++v112;
                            v114 += v36;
                          }
                          while (v113 != v112);
                          float v111 = v115 / v111;
                        }
                        if (!v110) {
                          float v111 = 0.0;
                        }
                      }
                      *(float *)(v62 + 4 * v180 + 4 * v58 * v173 + 4 * (v98 + v97 * v22)) = v111;
                      ++v98;
                    }
                    while (v98 != v40);
                  }
                  ++v97;
                }
                while (v97 != v39);
              }
              break;
            default:
              uint64_t v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v143, "Invalid mode");
              __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          ++v58;
          v60 += v171;
          v61 += v170;
        }
        while (v58 != v181);
      }
      uint64_t v20 = v166 + 1;
      v167 += v155;
      CGFloat a = v157;
      CGFloat b = v161;
      uint64_t v16 = a1;
      int32x2_t v23 = v193;
      float32x2_t v29 = v156;
      if (v166 + 1 == v158) {
        goto LABEL_146;
      }
    }
    signed int v49 = 0;
    int v169 = 0;
LABEL_39:
    int32x2_t v48 = v23;
    int32x2_t v50 = v152;
    goto LABEL_43;
  }
LABEL_146:
  if (v208) {
    nitro::nitro_function::nitro_function(v208);
  }
  if (v210) {
    nitro::nitro_function::nitro_function(v210);
  }
  if (b != 0.0) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&b);
  }
}

void sub_192B5A16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void Espresso::patch_extractor_kernel_cpu::~patch_extractor_kernel_cpu(Espresso::patch_extractor_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::crop_and_resize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  float v6 = *(uint64_t **)a4;
  uint64_t v7 = *(void *)(a4 + 8) - *(void *)a4;
  if ((unint64_t)((v7 >> 4) - 1) >= 3) {
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_crop_and_resize_kernel: requires one, two, or three inputs");
  }
  int v12 = *(_DWORD *)(a1 + 280);
  if (v7 == 16 && v12 == 0)
  {
    int v14 = 0;
    int v15 = 0;
    char v16 = 0;
    int v18 = 1;
    *(_DWORD *)(a1 + 280) = 1;
LABEL_12:
    int v17 = 4;
LABEL_13:
    char v211 = 1;
    goto LABEL_14;
  }
  if (v12)
  {
    if (v12 != 3)
    {
      if (v12 == 2 && *(_DWORD *)(a1 + 292) != 2) {
        Espresso::throw_exception_selector<Espresso::generic_error>("resize currently only supports resized_dims = 2");
      }
      int v14 = 0;
      int v15 = 0;
      char v16 = 0;
      int v17 = 4;
      int v18 = 1;
      goto LABEL_13;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v256, v6 + 2);
    char v16 = 0;
    int v15 = v256;
    int v14 = v257;
    int v18 = v256[3];
    goto LABEL_12;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v256, v6 + 2);
  int v15 = v256;
  int v14 = v257;
  if (!v256) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_crop_and_resize_kernel: Inconsistent state");
  }
  int v17 = v256[4];
  int v18 = v256[5];
  if (v17 == 4)
  {
    char v16 = 0;
    goto LABEL_13;
  }
  if (v17 != 5) {
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("generic_crop_and_resize_kernel: crop indices must be of size 4 or 5");
  }
  char v211 = 0;
  char v16 = 1;
LABEL_14:
  uint64_t v209 = v14;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v262, *(uint64_t **)a4);
  char v232 = v16;
  uint64_t v234 = (uint64_t **)a4;
  int v210 = v17;
  uint64_t v19 = v262;
  if (!v262) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_crop_and_resize_kernel: Inconsistent state");
  }
  int v20 = *(_DWORD *)(v262 + 8);
  int v21 = *(_DWORD *)(v262 + 12);
  char v214 = v15;
  if (*(_DWORD *)(a1 + 280) == 2)
  {
    if (!*(void *)(*(void *)a2 + 64) && (!*(_DWORD *)(a1 + 288) || !*(_DWORD *)(a1 + 284))) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic resize requires interpreter");
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v260, *v234 + 2);
    uint64_t v22 = *(void *)(v260 + 24);
    int v23 = *(_DWORD *)(v260 + 8);
    float v24 = *(float *)(v22 + 4 * (v23 - 2));
    float v25 = *(float *)(v22 + 4 * (v23 - 1));
    Espresso::abstract_blob_container::shape((char *)&v256, **v234);
    unint64_t v26 = (unint64_t)v24;
    unint64_t v27 = (unint64_t)v25;
    if ((unint64_t)v25) {
      int v28 = (unint64_t)v25;
    }
    else {
      int v28 = v20;
    }
    if (v26) {
      int v29 = (unint64_t)v24;
    }
    else {
      int v29 = v21;
    }
    uint64_t v256 = (_DWORD *)__PAIR64__(v29, v28);
    int v30 = (std::__shared_weak_count *)operator new(0x98uLL);
    v30->__shared_weak_owners_ = 0;
    v30->__shared_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
    *(_OWORD *)&v30[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[3].__shared_owners_ = 0u;
    *(_OWORD *)&v30[1].__shared_owners_ = 0u;
    v30[2].std::__shared_count = 0u;
    v30[4].std::__shared_count = 0u;
    *(_OWORD *)&v30[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[5].__shared_owners_ = 0u;
    v30[5].__shared_weak_owners_ = 0;
    v30[6].__vftable = 0;
    LODWORD(v30[2].__vftable) = 1065353216;
    v30[2].__shared_owners_ = 0x1FFFFFFFFLL;
    v30[4].__vftable = 0;
    v30[4].__shared_owners_ = 0;
    v30[2].__shared_weak_owners_ = 0;
    v30[3].__vftable = 0;
    LOBYTE(v30[3].__shared_weak_owners_) = 0;
    v30[3].__shared_owners_ = 0;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
    v30[5].__vftable = 0;
    v30[5].__shared_owners_ = 0;
    LOBYTE(v30[6].__vftable) = 0;
    LOBYTE(v30[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
    uint64_t v31 = **a3;
    uint64_t v254 = v30 + 1;
    uint64_t v255 = v30;
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, _DWORD **, std::__shared_weak_count **))(*(void *)v31 + 16))(v31, &v256, &v254);
    if (v255) {
      nitro::nitro_function::nitro_function(v255);
    }
    nitro::nitro_function::nitro_function(v30);
    if (v258)
    {
      uint64_t v259 = v258;
      operator delete(v258);
    }
    if (v261) {
      nitro::nitro_function::nitro_function(v261);
    }
  }
  else
  {
    LODWORD(v26) = 0;
    LODWORD(v27) = 0;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v256, *a3);
  if (!v256) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_crop_and_resize_kernel: Inconsistent state");
  }
  if (*(_DWORD *)(a1 + 280) != 2)
  {
    LODWORD(v27) = v256[2];
    if (v27 == *(_DWORD *)(a1 + 284))
    {
      LODWORD(v26) = v256[3];
      if (v26 == *(_DWORD *)(a1 + 288)) {
        goto LABEL_36;
      }
      uint64_t v207 = "generic_crop_and_resize_kernel: output height does not match the kernel target height parameter";
    }
    else
    {
      uint64_t v207 = "generic_crop_and_resize_kernel: output width does not match the kernel target width parameter";
    }
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v207);
  }
LABEL_36:
  int v32 = *(_DWORD *)(v19 + 16);
  if (*(unsigned char *)(a1 + 312)) {
    v32 /= (int)v27 * (int)v26 / *(_DWORD *)(a1 + 316) / *(_DWORD *)(a1 + 316);
  }
  if (v27) {
    uint64_t v33 = v27;
  }
  else {
    uint64_t v33 = v20;
  }
  if (v26) {
    uint64_t v34 = v26;
  }
  else {
    uint64_t v34 = v21;
  }
  if (!v33)
  {
    uint64_t v206 = "generic_crop_and_resize_kernel: zero output width";
    goto LABEL_281;
  }
  if (!v34)
  {
    uint64_t v206 = "generic_crop_and_resize_kernel: zero output height";
    goto LABEL_281;
  }
  if (!v20)
  {
    uint64_t v206 = "generic_crop_and_resize_kernel: zero input width";
    goto LABEL_281;
  }
  int v223 = v32;
  int v221 = v256;
  if (!v21)
  {
    uint64_t v206 = "generic_crop_and_resize_kernel: zero input height";
LABEL_281:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v206);
  }
  uint64_t v35 = *(unsigned int *)(v19 + 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v260, v33, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v252, v34, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v250, v33, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v248, v33, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v246, v34, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v244, v34, 1, 1, 1);
  int v36 = v33 * v34;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v242, v33 * v34, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v240, v33 * v34, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v238, v33 * v34, 1, 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(&v236, v33 * v34, 1, 1, 1);
  int32x2_t v41 = 0;
  if (v7 == 48)
  {
    uint64_t v212 = 0;
    if (*(_DWORD *)(a1 + 280) == 3)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v235, *v234 + 4);
      int32x2_t v41 = (std::__shared_weak_count *)v235[1];
      uint64_t v212 = v235[0];
    }
  }
  else
  {
    uint64_t v212 = 0;
  }
  uint64_t v208 = v41;
  if (v18 >= 1)
  {
    uint64_t v42 = 0;
    unsigned int v43 = v18;
    int v44 = 0;
    int v45 = v20 - 1;
    float v46 = (float)(v20 - 1);
    int v47 = v21 - 1;
    if (*(unsigned char *)(a1 + 296)) {
      float v48 = (float)v45;
    }
    else {
      float v48 = 1.0;
    }
    int v213 = v21 - 1;
    float v49 = (float)v47;
    if (*(unsigned char *)(a1 + 296)) {
      float v50 = (float)v47;
    }
    else {
      float v50 = 1.0;
    }
    float v51 = (float)(v33 - 1);
    float v52 = (float)(v34 - 1);
    float v53 = (float)(int)v34;
    uint64_t v231 = v260;
    uint64_t v54 = v252;
    float v55 = (float)(v34 - v21);
    uint64_t v56 = v250;
    uint64_t v57 = v248;
    uint64_t v58 = v246;
    uint64_t v59 = v244;
    char v60 = v232;
    if (v7 != 32) {
      char v60 = 0;
    }
    char v216 = v60;
    int v61 = v21 * v20;
    uint64_t v228 = v36;
    int v217 = v223 * v36;
    uint64_t v220 = v223 * v36;
    uint64_t v215 = v43;
    int v219 = v21 * v20 * v223;
    uint64_t v62 = (v33 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v63 = (uint64x2_t)vdupq_n_s64(v33 - 1);
    *(float *)v37.i32 = (float)v20 / (float)(int)v33;
    float32x2_t v64 = (float32x2_t)vdup_lane_s32(v37, 0);
    uint64x2_t v65 = (uint64x2_t)vdupq_n_s64(v34 - 1);
    uint64_t v66 = (v34 + 1) & 0x1FFFFFFFELL;
    *(float *)v38.i32 = (float)v21 / (float)(int)v34;
    float32x2_t v67 = (float32x2_t)vdup_lane_s32(v38, 0);
    uint64_t v68 = v242;
    uint64_t v69 = v238;
    uint64_t v70 = v236;
    uint64_t v71 = v240;
    uint64_t v233 = 4 * (int)v33;
    float v72 = v55 / v53;
    uint64_t v224 = v35;
    while (1)
    {
      int v73 = *(_DWORD *)(a1 + 280);
      if (v73 == 3) {
        break;
      }
      double v39 = 0.0;
      float v74 = v49;
      v4.i64[0] = 0;
      float v75 = (float)(v20 - 1);
      if (!v73)
      {
        if (v211)
        {
          int v76 = 4 * v42;
          double v39 = 0.0;
        }
        else
        {
          int v76 = 5 * v42 + 1;
          LODWORD(v39) = *(_DWORD *)(*((void *)v214 + 3) + 4 * (5 * v42));
        }
LABEL_71:
        int v44 = (int)*(float *)&v39;
        if ((int)v35 <= (int)*(float *)&v39) {
          Espresso::throw_exception_selector<Espresso::generic_error>("generic_crop_and_resize_kernel: RoI batch id greater than input batch size");
        }
        switch(*(_DWORD *)(a1 + 304))
        {
          case 0:
            uint64_t v77 = *((void *)v214 + 3) + 4 * v76;
            LODWORD(v39) = *(_DWORD *)v77;
            v40.i32[0] = *(_DWORD *)(v77 + 4);
            float v78 = *(float *)(v77 + 8);
            v5.i32[0] = *(_DWORD *)(v77 + 12);
            break;
          case 1:
            uint64_t v88 = *((void *)v214 + 3) + 4 * v76;
            v40.i32[0] = *(_DWORD *)v88;
            LODWORD(v39) = *(_DWORD *)(v88 + 4);
            v5.i32[0] = *(_DWORD *)(v88 + 8);
            float v78 = *(float *)(v88 + 12);
            break;
          case 2:
            float v79 = (float *)(*((void *)v214 + 3) + 4 * v76);
            double v80 = *v79;
            *(double *)v5.i64 = v79[2];
            double v39 = v80 + *(double *)v5.i64 * -0.5;
            *(float *)&double v39 = v39;
            double v81 = v79[1];
            double v82 = v79[3];
            *(double *)v40.i64 = v81 + v82 * -0.5;
            *(float *)v40.i32 = *(double *)v40.i64;
            float v78 = v80 + *(double *)v5.i64 * 0.5;
            *(double *)v4.i64 = v81 + v82 * 0.5;
            *(float *)v5.i32 = *(double *)v4.i64;
            break;
          case 3:
            int v83 = (float *)(*((void *)v214 + 3) + 4 * v76);
            double v84 = *v83;
            double v85 = v83[2];
            *(float *)v40.i32 = v84 + v85 * -0.5;
            double v86 = v83[1];
            double v87 = v83[3];
            double v39 = v86 + v87 * -0.5;
            *(float *)&double v39 = v39;
            *(double *)v4.i64 = v84 + v85 * 0.5;
            *(float *)v5.i32 = *(double *)v4.i64;
            float v78 = v86 + v87 * 0.5;
            break;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_crop_and_resize_kernel: Invalid crop index mode");
        }
        float v89 = *(float *)(a1 + 308);
        *(float *)&double v39 = *(float *)&v39 * (float)(v50 * v89);
        float v74 = v78 * (float)(v50 * v89);
        float v90 = v48 * v89;
        *(float *)v4.i32 = *(float *)v40.i32 * (float)(v48 * v89);
        float v75 = *(float *)v5.i32 * v90;
      }
      v40.i32[0] = 1.0;
      v5.i32[0] = 1.0;
      if (v33 != 1) {
        *(float *)v5.i32 = (float)(v75 - *(float *)v4.i32) / v51;
      }
      if (v34 != 1) {
        *(float *)v40.i32 = (float)(v74 - *(float *)&v39) / v52;
      }
      switch(*(_DWORD *)(a1 + 300))
      {
        case 0:
          float v91 = (float)(*(float *)&v39 + v74) * 0.5;
          if (v34 == 1) {
            *(float *)&double v39 = v91;
          }
          if ((int)v33 >= 1)
          {
            uint64_t v92 = 0;
            if (v33 == 1) {
              *(float *)v4.i32 = (float)(*(float *)v4.i32 + v75) * 0.5;
            }
            uint64_t v93 = *(void *)(v231 + 16);
            float32x2_t v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
            int64x2_t v5 = (int64x2_t)xmmword_192DBFE30;
            do
            {
              int32x2_t v95 = vmovn_s64((int64x2_t)vcgeq_u64(v63, (uint64x2_t)v5));
              v96.i32[0] = v92;
              v96.i32[1] = v92 + 1;
              float32x2_t v97 = vmla_f32(*(float32x2_t *)v4.i8, v94, vcvt_f32_s32(v96));
              if (v95.i8[0]) {
                *(_DWORD *)(v93 + 4 * v92) = v97.i32[0];
              }
              if (v95.i8[4]) {
                *(_DWORD *)(v93 + 4 * v92 + 4) = v97.i32[1];
              }
              v92 += 2;
              int64x2_t v5 = vaddq_s64(v5, vdupq_n_s64(2uLL));
            }
            while (v62 != v92);
          }
          if ((int)v34 >= 1)
          {
            uint64_t v98 = 0;
            uint64_t v99 = *(void *)(v54 + 16);
            *(int32x2_t *)v40.i8 = vdup_lane_s32(*(int32x2_t *)v40.i8, 0);
            double v39 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v39, 0));
            int64x2_t v100 = (int64x2_t)xmmword_192DBFE30;
            do
            {
              int32x2_t v101 = vmovn_s64((int64x2_t)vcgeq_u64(v65, (uint64x2_t)v100));
              v102.i32[0] = v98;
              v102.i32[1] = v98 + 1;
              *(float32x2_t *)v5.i8 = vmla_f32(*(float32x2_t *)&v39, *(float32x2_t *)v40.i8, vcvt_f32_s32(v102));
              if (v101.i8[0]) {
                *(_DWORD *)(v99 + 4 * v98) = v5.i32[0];
              }
              if (v101.i8[4]) {
                *(_DWORD *)(v99 + 4 * v98 + 4) = v5.i32[1];
              }
              v98 += 2;
              int64x2_t v4 = vdupq_n_s64(2uLL);
              int64x2_t v100 = vaddq_s64(v100, v4);
            }
            while (v66 != v98);
          }
          break;
        case 1:
          if ((int)v33 >= 1)
          {
            uint64_t v138 = 0;
            uint64_t v139 = *(void *)(v231 + 16);
            float32x2_t v140 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
            int64x2_t v5 = (int64x2_t)xmmword_192DBFE30;
            do
            {
              int32x2_t v141 = vmovn_s64((int64x2_t)vcgeq_u64(v63, (uint64x2_t)v5));
              v142.i32[0] = v138;
              v142.i32[1] = v138 + 1;
              float32x2_t v143 = vmla_f32(*(float32x2_t *)v4.i8, v140, vcvt_f32_s32(v142));
              if (v141.i8[0]) {
                *(_DWORD *)(v139 + 4 * v138) = v143.i32[0];
              }
              if (v141.i8[4]) {
                *(_DWORD *)(v139 + 4 * v138 + 4) = v143.i32[1];
              }
              v138 += 2;
              int64x2_t v5 = vaddq_s64(v5, vdupq_n_s64(2uLL));
            }
            while (v62 != v138);
          }
          if ((int)v34 >= 1)
          {
            uint64_t v144 = 0;
            uint64_t v145 = *(void *)(v54 + 16);
            *(int32x2_t *)v40.i8 = vdup_lane_s32(*(int32x2_t *)v40.i8, 0);
            double v39 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v39, 0));
            int64x2_t v146 = (int64x2_t)xmmword_192DBFE30;
            do
            {
              int32x2_t v147 = vmovn_s64((int64x2_t)vcgeq_u64(v65, (uint64x2_t)v146));
              v148.i32[0] = v144;
              v148.i32[1] = v144 + 1;
              *(float32x2_t *)v5.i8 = vmla_f32(*(float32x2_t *)&v39, *(float32x2_t *)v40.i8, vcvt_f32_s32(v148));
              if (v147.i8[0]) {
                *(_DWORD *)(v145 + 4 * v144) = v5.i32[0];
              }
              if (v147.i8[4]) {
                *(_DWORD *)(v145 + 4 * v144 + 4) = v5.i32[1];
              }
              v144 += 2;
              int64x2_t v4 = vdupq_n_s64(2uLL);
              int64x2_t v146 = vaddq_s64(v146, v4);
            }
            while (v66 != v144);
          }
          break;
        case 2:
          if (v33 != 1) {
            *(float *)v5.i32 = (float)((float)((float)((float)(v33 - v20) / (float)(int)v33) + v75) - *(float *)v4.i32)
          }
                             / v51;
          if (v34 != 1) {
            *(float *)v40.i32 = (float)((float)(v72 + v74) - *(float *)&v39) / v52;
          }
          if ((int)v33 >= 1)
          {
            float32x2_t v113 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)v4.i8, 0);
            v5.i64[0] = 0x100000000;
            int64x2_t v114 = (int64x2_t)xmmword_192DBFE30;
            float v115 = (float *)(*(void *)(v231 + 16) + 4);
            uint64_t v116 = v62;
            do
            {
              int32x2_t v117 = vmovn_s64((int64x2_t)vcgeq_u64(v63, (uint64x2_t)v114));
              float32x2_t v118 = vmla_f32(*(float32x2_t *)v4.i8, v113, vcvt_f32_s32(*(int32x2_t *)v5.i8));
              if (v117.i8[0])
              {
                if (v118.f32[0] <= v46) {
                  float v119 = v118.f32[0];
                }
                else {
                  float v119 = (float)(v20 - 1);
                }
                *(v115 - 1) = v119;
              }
              if (v117.i8[4])
              {
                v118.i32[0] = v118.i32[1];
                if (v118.f32[1] > v46) {
                  v118.f32[0] = (float)(v20 - 1);
                }
                *float v115 = v118.f32[0];
              }
              int64x2_t v114 = vaddq_s64(v114, vdupq_n_s64(2uLL));
              *(int32x2_t *)v5.i8 = vadd_s32(*(int32x2_t *)v5.i8, (int32x2_t)0x200000002);
              v115 += 2;
              v116 -= 2;
            }
            while (v116);
          }
          if ((int)v34 >= 1)
          {
            *(int32x2_t *)v40.i8 = vdup_lane_s32(*(int32x2_t *)v40.i8, 0);
            double v39 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v39, 0));
            int32x2_t v120 = (int32x2_t)0x100000000;
            int64x2_t v4 = (int64x2_t)xmmword_192DBFE30;
            int v121 = (float *)(*(void *)(v54 + 16) + 4);
            uint64_t v122 = v66;
            do
            {
              int32x2_t v123 = vmovn_s64((int64x2_t)vcgeq_u64(v65, (uint64x2_t)v4));
              float32x2_t v124 = vmla_f32(*(float32x2_t *)&v39, *(float32x2_t *)v40.i8, vcvt_f32_s32(v120));
              if (v123.i8[0])
              {
                if (v124.f32[0] <= v49) {
                  float v125 = v124.f32[0];
                }
                else {
                  float v125 = v49;
                }
                *(v121 - 1) = v125;
              }
              if (v123.i8[4])
              {
                v124.i32[0] = v124.i32[1];
                if (v124.f32[1] > v49) {
                  v124.f32[0] = v49;
                }
                *int v121 = v124.f32[0];
              }
              int64x2_t v5 = vdupq_n_s64(2uLL);
              int64x2_t v4 = vaddq_s64(v4, v5);
              int32x2_t v120 = vadd_s32(v120, (int32x2_t)0x200000002);
              v121 += 2;
              v122 -= 2;
            }
            while (v122);
          }
          break;
        case 3:
          if ((int)v33 >= 1)
          {
            uint64_t v126 = 0;
            *(float *)v40.i32 = fmaxf(v75 - *(float *)v4.i32, 1.0) / (float)(int)v33;
            double v127 = *(float *)v4.i32 + *(float *)v40.i32 * 0.5;
            *(float *)&double v127 = v127;
            uint64_t v128 = *(void *)(v231 + 16);
            *(int32x2_t *)v40.i8 = vdup_lane_s32(*(int32x2_t *)v40.i8, 0);
            *(int32x2_t *)v4.i8 = vdup_lane_s32(*(int32x2_t *)&v127, 0);
            int64x2_t v5 = (int64x2_t)xmmword_192DBFE30;
            do
            {
              int32x2_t v129 = vmovn_s64((int64x2_t)vcgeq_u64(v63, (uint64x2_t)v5));
              v130.i32[0] = v126;
              v130.i32[1] = v126 + 1;
              float32x2_t v131 = vmla_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v40.i8, vcvt_f32_s32(v130));
              if (v129.i8[0]) {
                *(_DWORD *)(v128 + 4 * v126) = v131.i32[0];
              }
              if (v129.i8[4]) {
                *(_DWORD *)(v128 + 4 * v126 + 4) = v131.i32[1];
              }
              v126 += 2;
              int64x2_t v5 = vaddq_s64(v5, vdupq_n_s64(2uLL));
            }
            while (v62 != v126);
          }
          if ((int)v34 >= 1)
          {
            uint64_t v132 = 0;
            *(float *)v40.i32 = fmaxf(v74 - *(float *)&v39, 1.0) / v53;
            double v133 = *(float *)v40.i32;
            *(float *)&double v133 = *(float *)&v39 + *(float *)v40.i32 * 0.5;
            uint64_t v134 = *(void *)(v54 + 16);
            double v39 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)v40.i8, 0));
            *(int32x2_t *)v40.i8 = vdup_lane_s32(*(int32x2_t *)&v133, 0);
            int64x2_t v135 = (int64x2_t)xmmword_192DBFE30;
            do
            {
              int32x2_t v136 = vmovn_s64((int64x2_t)vcgeq_u64(v65, (uint64x2_t)v135));
              v137.i32[0] = v132;
              v137.i32[1] = v132 + 1;
              *(float32x2_t *)v5.i8 = vmla_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)&v39, vcvt_f32_s32(v137));
              if (v136.i8[0]) {
                *(_DWORD *)(v134 + 4 * v132) = v5.i32[0];
              }
              if (v136.i8[4]) {
                *(_DWORD *)(v134 + 4 * v132 + 4) = v5.i32[1];
              }
              v132 += 2;
              int64x2_t v4 = vdupq_n_s64(2uLL);
              int64x2_t v135 = vaddq_s64(v135, v4);
            }
            while (v66 != v132);
          }
          break;
        case 4:
          if ((int)v33 >= 1)
          {
            *(void *)&double v39 = 0x100000000;
            int64x2_t v40 = (int64x2_t)xmmword_192DBFE30;
            __int32 v103 = (float *)(*(void *)(v231 + 16) + 4);
            uint64_t v104 = v62;
            do
            {
              int32x2_t v105 = vmovn_s64((int64x2_t)vcgeq_u64(v63, (uint64x2_t)v40));
              *(float32x2_t *)v5.i8 = vmla_f32((float32x2_t)0xBF000000BF000000, v64, vadd_f32(vcvt_f32_s32(*(int32x2_t *)&v39), (float32x2_t)0x3F0000003F000000));
              *(float32x2_t *)v4.i8 = vmaxnm_f32(*(float32x2_t *)v5.i8, 0);
              if (v105.i8[0])
              {
                if (*(float *)v4.i32 <= v46) {
                  float v106 = *(float *)v4.i32;
                }
                else {
                  float v106 = (float)(v20 - 1);
                }
                *(v103 - 1) = v106;
              }
              if (v105.i8[4])
              {
                float v107 = *(float *)&v4.i32[1];
                if (*(float *)&v4.i32[1] > v46) {
                  float v107 = (float)(v20 - 1);
                }
                float *v103 = v107;
              }
              int64x2_t v40 = vaddq_s64(v40, vdupq_n_s64(2uLL));
              double v39 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)&v39, (int32x2_t)0x200000002));
              v103 += 2;
              v104 -= 2;
            }
            while (v104);
          }
          if ((int)v34 >= 1)
          {
            *(void *)&double v39 = 0x100000000;
            int64x2_t v40 = (int64x2_t)xmmword_192DBFE30;
            int v108 = (float *)(*(void *)(v54 + 16) + 4);
            uint64_t v109 = v66;
            do
            {
              int32x2_t v110 = vmovn_s64((int64x2_t)vcgeq_u64(v65, (uint64x2_t)v40));
              *(float32x2_t *)v5.i8 = vmla_f32((float32x2_t)0xBF000000BF000000, v67, vadd_f32(vcvt_f32_s32(*(int32x2_t *)&v39), (float32x2_t)0x3F0000003F000000));
              *(float32x2_t *)v4.i8 = vmaxnm_f32(*(float32x2_t *)v5.i8, 0);
              if (v110.i8[0])
              {
                if (*(float *)v4.i32 <= v49) {
                  float v111 = *(float *)v4.i32;
                }
                else {
                  float v111 = v49;
                }
                *(v108 - 1) = v111;
              }
              if (v110.i8[4])
              {
                float v112 = *(float *)&v4.i32[1];
                if (*(float *)&v4.i32[1] > v49) {
                  float v112 = v49;
                }
                *int v108 = v112;
              }
              int64x2_t v40 = vaddq_s64(v40, vdupq_n_s64(2uLL));
              double v39 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)&v39, (int32x2_t)0x200000002));
              v108 += 2;
              v109 -= 2;
            }
            while (v109);
          }
          break;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("generic_crop_and_resize_kernel: Invalid grid sampling mode. Got %d", *(unsigned int *)(a1 + 300));
      }
      int v229 = v44;
      if ((int)v33 >= 1)
      {
        uint64_t v149 = *(float **)(v231 + 16);
        __int32 v150 = *(unsigned int **)(v56 + 16);
        uint64_t v151 = v33;
        int32x2_t v152 = *(int **)(v57 + 16);
        do
        {
          float v153 = *v149++;
          unsigned int v154 = vcvtms_s32_f32(v153);
          *v150++ = v154;
          if (v45 >= (int)(v154 + 1)) {
            int v155 = v154 + 1;
          }
          else {
            int v155 = v45;
          }
          *v152++ = v155;
          --v151;
        }
        while (v151);
      }
      if ((int)v34 >= 1)
      {
        float32x2_t v156 = *(float **)(v54 + 16);
        double v157 = *(unsigned int **)(v58 + 16);
        uint64_t v158 = *(unsigned int **)(v59 + 16);
        int v159 = v156;
        uint64_t v160 = v157;
        uint64_t v161 = v34;
        do
        {
          float v162 = *v159++;
          unsigned int v163 = vcvtms_s32_f32(v162);
          *v160++ = v163;
          if (v213 >= (int)(v163 + 1)) {
            unsigned int v164 = v163 + 1;
          }
          else {
            unsigned int v164 = v213;
          }
          *v158++ = v164;
          --v161;
        }
        while (v161);
        uint64_t v165 = 0;
        for (uint64_t i = 0; i != v34; ++i)
        {
          if ((int)v33 >= 1)
          {
            uint64_t v167 = *(float **)(v231 + 16);
            uint64_t v168 = *(int **)(v56 + 16);
            float v169 = (float)(int)v157[i];
            uint64_t v170 = (float *)(*(void *)(v71 + 16) + v165);
            uint64_t v171 = (float *)(*(void *)(v70 + 16) + v165);
            uint64_t v172 = (float *)(*(void *)(v69 + 16) + v165);
            uint64_t v173 = (float *)(*(void *)(v68 + 16) + v165);
            uint64_t v174 = v33;
            do
            {
              float v175 = *v167++;
              float v176 = v175;
              int v177 = *v168++;
              float v178 = v176 - (float)v177;
              float v179 = v156[i] - v169;
              *v173++ = (float)(1.0 - v178) * (float)(1.0 - v179);
              *v172++ = v178 * v179;
              *v171++ = v178 * (float)(1.0 - v179);
              *v170++ = (float)(1.0 - v178) * v179;
              --v174;
            }
            while (v174);
          }
          v165 += v233;
        }
      }
      if (v216)
      {
        BOOL v225 = 1;
        int v180 = v217;
        LODWORD(v35) = v224;
      }
      else
      {
        BOOL v225 = *(_DWORD *)(a1 + 280) == 3;
        LODWORD(v35) = v224;
        if (*(_DWORD *)(a1 + 280) == 3) {
          int v181 = 1;
        }
        else {
          int v181 = v224;
        }
        int v180 = v181 * v217;
      }
      int v182 = v229;
      uint64_t v218 = v42;
      if ((int)v35 < 1)
      {
        int v44 = v229;
      }
      else
      {
        uint64_t v183 = 0;
        uint64_t v222 = v180 * (int)v42;
        do
        {
          int v44 = v183;
          if (v225)
          {
            int v44 = v182;
            if (v183) {
              break;
            }
          }
          int v226 = v44;
          uint64_t v227 = v183;
          if (v223 >= 1)
          {
            uint64_t v184 = 0;
            uint64_t v230 = *((void *)v221 + 3) + 4 * v222 + 4 * v183 * v220;
            uint64_t v185 = v219 * v44;
            do
            {
              if ((int)v34 >= 1)
              {
                uint64_t v186 = 0;
                uint64_t v187 = 0;
                for (uint64_t j = 0; j != v34; ++j)
                {
                  if ((int)v33 >= 1)
                  {
                    uint64_t v189 = 0;
                    int v190 = *(unsigned __int8 *)(a1 + 312);
                    uint64_t v191 = *(void *)(v231 + 16);
                    do
                    {
                      int v192 = v184;
                      if (v190) {
                        int v192 = (int)v189 / *(_DWORD *)(a1 + 316)
                      }
                             + ((int)j / *(_DWORD *)(a1 + 316) + (int)v34 / *(_DWORD *)(a1 + 316) * v184)
                             * ((int)v33
                              / *(_DWORD *)(a1 + 316));
                      float v193 = *(float *)(v191 + 4 * v189);
                      if (v193 <= v46
                        && (float v196 = *(float *)(*(void *)(v54 + 16) + 4 * j), v196 >= 0.0)
                        && (v193 >= 0.0 ? (BOOL v197 = v196 <= v49) : (BOOL v197 = 0), v197))
                      {
                        uint64_t v198 = *(void *)(v19 + 24) + 4 * v185 + 4 * v192 * v61;
                        int v199 = *(_DWORD *)(*(void *)(v58 + 16) + 4 * j) * v20;
                        int v200 = *(_DWORD *)(*(void *)(v56 + 16) + 4 * v189);
                        float v201 = *(float *)(v198 + 4 * (v200 + v199));
                        int v202 = *(_DWORD *)(*(void *)(v57 + 16) + 4 * v189);
                        float v203 = *(float *)(v198 + 4 * (v202 + v199));
                        int v204 = *(_DWORD *)(*(void *)(v59 + 16) + 4 * j) * v20;
                        float v205 = *(float *)(v198 + 4 * (v204 + v202));
                        uint64_t v195 = v187 + v189;
                        float v194 = (float)((float)((float)(v203 * *(float *)(*(void *)(v70 + 16) + v186 + 4 * v189))
                                             + (float)(v201 * *(float *)(*(void *)(v68 + 16) + v186 + 4 * v189)))
                                     + (float)(*(float *)(v198 + 4 * (v204 + v200))
                                             * *(float *)(*(void *)(v71 + 16) + v186 + 4 * v189)))
                             + (float)(v205 * *(float *)(*(void *)(v69 + 16) + v186 + 4 * v189));
                      }
                      else
                      {
                        float v194 = *(float *)(a1 + 320);
                        uint64_t v195 = v189 + j * (int)v33;
                      }
                      *(float *)(v230 + 4 * v184 * v228 + 4 * v195) = v194;
                      ++v189;
                    }
                    while (v33 != v189);
                  }
                  v187 += (int)v33;
                  v186 += v233;
                }
              }
              ++v184;
            }
            while (v184 != v223);
          }
          uint64_t v183 = v227 + 1;
          int v44 = v226;
          int v182 = v226;
          LODWORD(v35) = v224;
        }
        while (v227 + 1 != v224);
      }
      uint64_t v42 = v218 + 1;
      uint64_t v62 = (v33 + 1) & 0x1FFFFFFFELL;
      int v45 = v20 - 1;
      uint64_t v66 = (v34 + 1) & 0x1FFFFFFFELL;
      if (v218 + 1 == v215) {
        goto LABEL_236;
      }
    }
    if (v212) {
      LODWORD(v39) = *(_DWORD *)(*(void *)(v212 + 24) + 4 * v42);
    }
    else {
      *(float *)&double v39 = (float)(int)v42;
    }
    int v76 = v42 * v210;
    goto LABEL_71;
  }
LABEL_236:
  if (v208) {
    nitro::nitro_function::nitro_function(v208);
  }
  if (v237) {
    nitro::nitro_function::nitro_function(v237);
  }
  if (v239) {
    nitro::nitro_function::nitro_function(v239);
  }
  if (v241) {
    nitro::nitro_function::nitro_function(v241);
  }
  if (v243) {
    nitro::nitro_function::nitro_function(v243);
  }
  if (v245) {
    nitro::nitro_function::nitro_function(v245);
  }
  if (v247) {
    nitro::nitro_function::nitro_function(v247);
  }
  if (v249) {
    nitro::nitro_function::nitro_function(v249);
  }
  if (v251) {
    nitro::nitro_function::nitro_function(v251);
  }
  if (v253) {
    nitro::nitro_function::nitro_function(v253);
  }
  if (v261) {
    nitro::nitro_function::nitro_function(v261);
  }
  if (v257) {
    nitro::nitro_function::nitro_function(v257);
  }
  if (v263) {
    nitro::nitro_function::nitro_function(v263);
  }
  if (v209) {
    nitro::nitro_function::nitro_function(v209);
  }
}

void sub_192B5B50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::crop_and_resize_kernel_cpu::~crop_and_resize_kernel_cpu(Espresso::crop_and_resize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::topk_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  *(void *)&long long v491 = *MEMORY[0x1E4F143B8];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v483, *a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v482, *a3);
  if (*(unsigned char *)(a1 + 294))
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v487, *a3 + 2);
    float v8 = (std::__shared_weak_count *)*((void *)&v487[0] + 1);
    uint64_t v9 = *(void *)&v487[0];
  }
  else
  {
    float v8 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = *a4;
  int v460 = *(_DWORD *)(a1 + 280);
  if (v460 != -1) {
    goto LABEL_11;
  }
  if ((char *)a4[1] - (char *)v10 != 16)
  {
    uint64_t v412 = "topk_kernel_cpu with k == -1 (sort) does not support support dynamic k.";
    goto LABEL_651;
  }
  if (!*(unsigned char *)(a1 + 293))
  {
    uint64_t v412 = "topk_kernel_cpu with k == -1 (sort) requires sort == true.";
    goto LABEL_651;
  }
  if (!*(unsigned char *)(a1 + 285))
  {
    uint64_t v412 = "topk_kernel_cpu with k == -1 (sort) requires single_axis_topk == true.";
LABEL_651:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v412);
  }
  Espresso::abstract_blob_container::shape((char *)v487, *v10);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v474, (const Espresso::layer_shape *)v487, 0);
  if (v488)
  {
    v489 = v488;
    operator delete(v488);
  }
  int v460 = *((_DWORD *)&v474 + *(_DWORD *)(a1 + 288) + (DWORD1(v475) & (*(int *)(a1 + 288) >> 31)));
  uint64_t v10 = *a4;
LABEL_11:
  if ((char *)a4[1] - (char *)v10 != 32) {
    goto LABEL_42;
  }
  if (!*(void *)(*(void *)a2 + 64))
  {
    uint64_t v412 = "dynamic topk requires interpreter";
    goto LABEL_651;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v480, v10 + 2);
  int v11 = (int)(float)(**(float **)(v480 + 24) + 0.5);
  int v12 = *(_DWORD *)(a1 + 280);
  if (v11 < 1) {
    int v11 = *(_DWORD *)(a1 + 280);
  }
  int v460 = v11;
  *(_DWORD *)(a1 + 280) = v11;
  Espresso::abstract_blob_container::shape((char *)v487, **a4);
  Espresso::abstract_blob_container::shape(v490, (*a4)[2]);
  vDSP_Length __I = 0;
  vDSP_Length v467 = 0;
  vDSP_Length v468 = 0;
  p_I = &__I;
  char v486 = 0;
  vDSP_Length __I = (vDSP_Length)operator new(0x80uLL);
  vDSP_Length v467 = __I;
  vDSP_Length v468 = __I + 128;
  vDSP_Length v467 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v468, v487, &v491, __I);
  (*(void (**)(long long **__return_ptr, uint64_t, vDSP_Length *))(*(void *)a1 + 64))(&v469, a1, &__I);
  uint64_t v13 = *((void *)v469 + 4);
  long long v14 = v469[1];
  long long v474 = *v469;
  long long v475 = v14;
  uint64_t v476 = v13;
  long long __p = 0;
  v478 = 0;
  uint64_t v479 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v469 + 5), *((void *)v469 + 6), (uint64_t)(*((void *)v469 + 6) - *((void *)v469 + 5)) >> 2);
  p_I = (vDSP_Length *)&v469;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_I);
  p_I = &__I;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_I);
  for (uint64_t i = 0; i != -128; i -= 64)
  {
    char v16 = *(void **)&v490[i + 40];
    if (v16)
    {
      *(void *)&v490[i + 48] = v16;
      operator delete(v16);
    }
  }
  *(_DWORD *)(a1 + 280) = v12;
  int v17 = (std::__shared_weak_count *)operator new(0x98uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
  *(_OWORD *)&v17[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v17[3].__shared_owners_ = 0u;
  *(_OWORD *)&v17[1].__shared_owners_ = 0u;
  v17[2].std::__shared_count = 0u;
  v17[4].std::__shared_count = 0u;
  *(_OWORD *)&v17[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v17[5].__shared_owners_ = 0u;
  v17[5].__shared_weak_owners_ = 0;
  v17[6].__vftable = 0;
  LODWORD(v17[2].__vftable) = 1065353216;
  v17[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v17[4].__vftable = 0;
  v17[4].__shared_owners_ = 0;
  v17[2].__shared_weak_owners_ = 0;
  v17[3].__vftable = 0;
  LOBYTE(v17[3].__shared_weak_owners_) = 0;
  v17[3].__shared_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
  v17[5].__vftable = 0;
  v17[5].__shared_owners_ = 0;
  LOBYTE(v17[6].__vftable) = 0;
  LOBYTE(v17[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
  uint64_t v18 = **a3;
  if (v18)
  {
    Espresso::abstract_blob_container::shape((char *)v487, v18);
    BOOL v19 = Espresso::layer_shape::operator==((uint64_t)&v474, (uint64_t)v487);
    if (v488)
    {
      v489 = v488;
      operator delete(v488);
    }
    if (!v19)
    {
      uint64_t v20 = **a3;
      v464 = v17 + 1;
      v465 = v17;
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      (*(void (**)(uint64_t, long long *, std::__shared_weak_count **))(*(void *)v20 + 16))(v20, &v474, &v464);
      if (v465) {
        nitro::nitro_function::nitro_function(v465);
      }
    }
  }
  uint64_t v21 = (*a3)[2];
  if (v21)
  {
    Espresso::abstract_blob_container::shape((char *)v487, v21);
    BOOL v22 = Espresso::layer_shape::operator==((uint64_t)&v474, (uint64_t)v487);
    if (v488)
    {
      v489 = v488;
      operator delete(v488);
    }
    if (!v22)
    {
      uint64_t v23 = (*a3)[2];
      v462 = v17 + 1;
      v463 = v17;
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      (*(void (**)(uint64_t, long long *, std::__shared_weak_count **))(*(void *)v23 + 16))(v23, &v474, &v462);
      if (v463) {
        nitro::nitro_function::nitro_function(v463);
      }
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v487, *a3);
  float v24 = (std::__shared_weak_count *)*((void *)&v482 + 1);
  long long v482 = v487[0];
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (*(unsigned char *)(a1 + 294))
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v487, *a3 + 2);
    float v25 = (std::__shared_weak_count *)*((void *)&v487[0] + 1);
    uint64_t v9 = *(void *)&v487[0];
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    float v8 = v25;
  }
  nitro::nitro_function::nitro_function(v17);
  if (__p)
  {
    v478 = __p;
    operator delete(__p);
  }
  if (v481) {
    nitro::nitro_function::nitro_function(v481);
  }
  uint64_t v10 = *a4;
LABEL_42:
  Espresso::abstract_blob_container::shape((char *)v487, *v10);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v474, (const Espresso::layer_shape *)v487, 0);
  if (v488)
  {
    v489 = v488;
    operator delete(v488);
  }
  Espresso::abstract_blob_container::shape((char *)v487, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v469, (const Espresso::layer_shape *)v487, 0);
  if (v488)
  {
    v489 = v488;
    operator delete(v488);
  }
  uint64_t v453 = a1;
  uint64_t v459 = v9;
  uint64_t v415 = v8;
  if (!*(unsigned char *)(a1 + 285))
  {
    if (DWORD1(v475) < 4)
    {
      BOOL v214 = *(unsigned char *)(a1 + 284) != 0;
      signed int v212 = v473;
      uint64_t v213 = v473;
      if (!*(unsigned char *)(a1 + 284) && v473 > 3)
      {
        if (v473 == 5)
        {
          int v215 = v472;
          int v216 = v471;
          uint64_t v217 = v470;
        }
        else
        {
          if (v473 != 4)
          {
            uint64_t v457 = 0;
            goto LABEL_524;
          }
          int v215 = v471;
          uint64_t v217 = SHIDWORD(v469);
          int v216 = v470;
        }
        uint64_t v457 = v216 * (uint64_t)v215 * v217;
        goto LABEL_524;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 284))
      {
        v458 = a3;
        std::vector<std::pair<float,int>>::vector(v487, *(int *)(**a4 + 16));
        uint64_t v220 = (_DWORD *)**a4;
        if ((int)v220[6] < 1) {
          goto LABEL_636;
        }
        uint64_t v221 = 0;
        uint64_t v222 = 0;
        int v223 = 0;
        int v430 = v220[2];
        int v224 = v220[3] * v430;
        BOOL v225 = (_DWORD *)**a3;
        int v428 = v225[2];
        int v226 = v225[3] * v428;
        uint64_t v227 = v460;
        unint64_t v228 = (unint64_t)(v460 - 2) >> 1;
        int v420 = v224 * v220[4];
        uint64_t v229 = 4 * v224;
        uint64_t v439 = 2 * v228;
        unint64_t v442 = v228 + 1;
        int v419 = v226 * v225[4];
        int v413 = v419 * v225[5];
        int v414 = v420 * v220[5];
        uint64_t v230 = 4 * v226;
        v456 = a4;
        uint64_t v446 = v230;
        do
        {
          int v416 = v223;
          int v417 = v222;
          int v418 = v221;
          if ((int)v220[5] >= 1)
          {
            int v231 = 0;
            do
            {
              int v426 = v231;
              int v424 = v221;
              int v422 = v222;
              if ((int)v220[3] >= 1)
              {
                int v232 = 0;
                uint64_t v450 = v483;
                do
                {
                  int v436 = v232;
                  int v434 = v221;
                  int v432 = v222;
                  if ((int)v220[2] >= 1)
                  {
                    uint64_t v233 = 0;
                    uint64_t v452 = v482;
                    uint64_t v234 = v221;
                    uint64_t v235 = v222;
                    do
                    {
                      uint64_t v236 = v220[4];
                      uint64_t v237 = *(float **)&v487[0];
                      if ((int)v236 >= 1)
                      {
                        uint64_t v238 = 0;
                        int v239 = (_DWORD *)(*(void *)&v487[0] + 4);
                        uint64_t v240 = (_DWORD *)(*(void *)(v450 + 24) + 4 * (int)v235);
                        do
                        {
                          *(v239 - 1) = *v240;
                          *int v239 = v238;
                          v239 += 2;
                          ++v238;
                          uint64_t v240 = (_DWORD *)((char *)v240 + v229);
                        }
                        while (v236 != v238);
                      }
                      if (*(unsigned char *)(a1 + 293))
                      {
                        if (v460)
                        {
                          uint64_t v241 = (float *)*((void *)&v487[0] + 1);
                          if (v460 >= 2)
                          {
                            unint64_t v242 = v442;
                            uint64_t v243 = &v237[v439];
                            do
                            {
                              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v237, v227, v243);
                              v243 -= 2;
                              --v242;
                            }
                            while (v242);
                          }
                          uint64_t v244 = &v237[2 * v227];
                          if (v244 != v241)
                          {
                            int v245 = &v237[2 * v227];
                            do
                            {
                              uint64_t v246 = *(void *)v245;
                              uint64_t v247 = *(void *)v237;
                              if (COERCE_FLOAT(*(void *)v245) > COERCE_FLOAT(*(void *)v237))
                              {
                                *(_DWORD *)int v245 = v247;
                                *(_DWORD *)uint64_t v237 = v246;
                                v245[1] = *((float *)&v247 + 1);
                                v237[1] = *((float *)&v246 + 1);
                                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v237, v227, v237);
                              }
                              v245 += 2;
                            }
                            while (v245 != v241);
                          }
                          a1 = v453;
                          if (v460 > 1)
                          {
                            uint64_t v248 = v460 & 0x1FFFFFFFFFFFFFFFLL;
                            do
                            {
                              uint64_t v249 = 0;
                              float v250 = *v237;
                              int v251 = *((_DWORD *)v237 + 1);
                              uint64_t v252 = v237;
                              do
                              {
                                int v253 = v252;
                                v252 += 2 * v249 + 2;
                                uint64_t v254 = 2 * v249;
                                uint64_t v249 = (2 * v249) | 1;
                                uint64_t v255 = v254 + 2;
                                if (v255 < v248 && *v252 > v252[2])
                                {
                                  v252 += 2;
                                  uint64_t v249 = v255;
                                }
                                *int v253 = *v252;
                                v253[1] = v252[1];
                              }
                              while (v249 <= (uint64_t)((unint64_t)(v248 - 2) >> 1));
                              if (v252 == v244 - 2)
                              {
                                *uint64_t v252 = v250;
                                *((_DWORD *)v252 + 1) = v251;
                              }
                              else
                              {
                                *uint64_t v252 = *(v244 - 2);
                                v252[1] = *(v244 - 1);
                                *(v244 - 2) = v250;
                                *((_DWORD *)v244 - 1) = v251;
                                uint64_t v256 = (char *)v252 - (char *)v237 + 8;
                                if (v256 >= 9)
                                {
                                  unint64_t v257 = (((unint64_t)v256 >> 3) - 2) >> 1;
                                  uint64_t v258 = &v237[2 * v257];
                                  float v259 = *v252;
                                  float v260 = COERCE_FLOAT(*(void *)v258);
                                  float v261 = *v252;
                                  if (v260 > *v252)
                                  {
                                    int v262 = *((_DWORD *)v252 + 1);
                                    do
                                    {
                                      uint64_t v263 = v252;
                                      uint64_t v252 = v258;
                                      float *v263 = v260;
                                      v263[1] = v258[1];
                                      if (!v257) {
                                        break;
                                      }
                                      unint64_t v257 = (v257 - 1) >> 1;
                                      uint64_t v258 = &v237[2 * v257];
                                      float v260 = COERCE_FLOAT(*(void *)v258);
                                    }
                                    while (v260 > v261);
                                    *uint64_t v252 = v259;
                                    *((_DWORD *)v252 + 1) = v262;
                                  }
                                }
                              }
                              v244 -= 2;
                              BOOL v53 = v248-- <= 2;
                            }
                            while (!v53);
                          }
                        }
                      }
                      else
                      {
                        BOOL v264 = &v237[2 * v227];
                        int v265 = (float *)*((void *)&v487[0] + 1);
                        while (v265 != v264)
                        {
                          unint64_t v266 = ((char *)v265 - (char *)v237) >> 3;
                          if (v266 < 2) {
                            break;
                          }
                          if (v266 == 3)
                          {
                            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v237, (uint64_t)(v237 + 2), (uint64_t)(v265 - 2));
                            break;
                          }
                          if (v266 == 2)
                          {
                            float v308 = *(v265 - 2);
                            float v309 = *v237;
                            if (v308 > *v237)
                            {
                              *uint64_t v237 = v308;
                              *(v265 - 2) = v309;
                              int v310 = *((_DWORD *)v237 + 1);
                              v237[1] = *(v265 - 1);
                              *((_DWORD *)v265 - 1) = v310;
                            }
                            break;
                          }
                          if ((char *)v265 - (char *)v237 <= 63)
                          {
                            while (v237 != v265 - 2)
                            {
                              uint64_t v311 = v237;
                              v237 += 2;
                              if (v311 != v265 && v237 != v265)
                              {
                                float v312 = *v311;
                                float v313 = *v311;
                                uint64_t v314 = v237;
                                uint64_t v315 = v311;
                                uint64_t v316 = v237;
                                do
                                {
                                  float v317 = *v316;
                                  v316 += 2;
                                  float v318 = v317;
                                  if (v317 > v313)
                                  {
                                    float v313 = v318;
                                    uint64_t v315 = v314;
                                  }
                                  uint64_t v314 = v316;
                                }
                                while (v316 != v265);
                                if (v315 != v311)
                                {
                                  *uint64_t v311 = *v315;
                                  *uint64_t v315 = v312;
                                  int v319 = *((_DWORD *)v311 + 1);
                                  v311[1] = v315[1];
                                  *((_DWORD *)v315 + 1) = v319;
                                }
                              }
                            }
                            break;
                          }
                          uint64_t v267 = v229;
                          uint64_t v268 = v227;
                          uint64_t v269 = v233;
                          uint64_t v270 = v235;
                          uint64_t v271 = v234;
                          uint64_t v272 = v264;
                          uint64_t v273 = (uint64_t)&v237[2 * (v266 >> 1)];
                          v274 = v265 - 2;
                          int v275 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v237, v273, (uint64_t)(v265 - 2));
                          float v276 = *v237;
                          if (*v237 <= *(float *)v273)
                          {
                            uint64_t v277 = v265 - 4;
                            BOOL v264 = v272;
                            uint64_t v234 = v271;
                            uint64_t v235 = v270;
                            uint64_t v233 = v269;
                            uint64_t v227 = v268;
                            uint64_t v229 = v267;
                            uint64_t v230 = v446;
                            while (v277 != v237)
                            {
                              int v278 = v277;
                              float v279 = *v277;
                              v277 -= 2;
                              float v280 = v279;
                              if (v279 > *(float *)v273)
                              {
                                *uint64_t v237 = v280;
                                v277[2] = v276;
                                int v281 = *((_DWORD *)v237 + 1);
                                v237[1] = v277[3];
                                *((_DWORD *)v277 + 3) = v281;
                                ++v275;
                                v274 = v278;
                                goto LABEL_453;
                              }
                            }
                            uint64_t v296 = v237 + 2;
                            if (v276 <= *v274)
                            {
                              a1 = v453;
                              if (v296 == v274) {
                                break;
                              }
                              while (1)
                              {
                                float v300 = *v296;
                                if (v276 > *v296) {
                                  break;
                                }
                                v296 += 2;
                                if (v296 == v274) {
                                  goto LABEL_509;
                                }
                              }
                              *uint64_t v296 = *v274;
                              *(v265 - 2) = v300;
                              int v301 = *((_DWORD *)v296 + 1);
                              v296[1] = *(v265 - 1);
                              *((_DWORD *)v265 - 1) = v301;
                              v296 += 2;
                            }
                            else
                            {
                              a1 = v453;
                            }
                            if (v296 == v274) {
                              break;
                            }
                            while (1)
                            {
                              float v303 = *v237;
                              do
                              {
                                uint64_t v293 = v296;
                                float v304 = *v296;
                                v296 += 2;
                                float v305 = v304;
                              }
                              while (v303 <= v304);
                              do
                              {
                                float v306 = *(v274 - 2);
                                v274 -= 2;
                                float v307 = v306;
                              }
                              while (v303 > v306);
                              if (v293 >= v274) {
                                break;
                              }
                              *uint64_t v293 = v307;
                              float *v274 = v305;
                              int v302 = *((_DWORD *)v293 + 1);
                              v293[1] = v274[1];
                              *((_DWORD *)v274 + 1) = v302;
                            }
                            if (v293 > v264) {
                              break;
                            }
                          }
                          else
                          {
                            BOOL v264 = v272;
                            uint64_t v234 = v271;
                            uint64_t v235 = v270;
                            uint64_t v233 = v269;
                            uint64_t v227 = v268;
                            uint64_t v229 = v267;
                            uint64_t v230 = v446;
LABEL_453:
                            uint64_t v282 = v237 + 2;
                            if (v237 + 2 >= v274)
                            {
                              uint64_t v285 = v237 + 2;
                            }
                            else
                            {
                              uint64_t v283 = v237 + 2;
                              while (1)
                              {
                                float v284 = *(float *)v273;
                                do
                                {
                                  uint64_t v285 = v283;
                                  float v286 = *v283;
                                  v283 += 2;
                                  float v287 = v286;
                                }
                                while (v286 > v284);
                                do
                                {
                                  float v288 = *(v274 - 2);
                                  v274 -= 2;
                                  float v289 = v288;
                                }
                                while (v288 <= v284);
                                if (v285 >= v274) {
                                  break;
                                }
                                *uint64_t v285 = v289;
                                float *v274 = v287;
                                int v290 = *((_DWORD *)v285 + 1);
                                v285[1] = v274[1];
                                *((_DWORD *)v274 + 1) = v290;
                                ++v275;
                                if ((float *)v273 == v285) {
                                  uint64_t v273 = (uint64_t)v274;
                                }
                              }
                            }
                            if (v285 != (float *)v273)
                            {
                              float v291 = *v285;
                              if (*(float *)v273 > *v285)
                              {
                                *uint64_t v285 = *(float *)v273;
                                *(float *)uint64_t v273 = v291;
                                int v292 = *((_DWORD *)v285 + 1);
                                v285[1] = *(float *)(v273 + 4);
                                *(_DWORD *)(v273 + 4) = v292;
                                ++v275;
                              }
                            }
                            a1 = v453;
                            if (v285 == v264) {
                              break;
                            }
                            if (!v275)
                            {
                              if (v285 <= v264)
                              {
                                uint64_t v297 = v285 + 2;
                                while (v297 != v265)
                                {
                                  float v298 = *v297;
                                  float v299 = *(v297 - 2);
                                  v297 += 2;
                                  if (v298 > v299) {
                                    goto LABEL_468;
                                  }
                                }
                              }
                              else
                              {
                                while (v282 != v285)
                                {
                                  float v294 = *v282;
                                  float v295 = *(v282 - 2);
                                  v282 += 2;
                                  if (v294 > v295) {
                                    goto LABEL_468;
                                  }
                                }
                              }
                              break;
                            }
LABEL_468:
                            if (v285 <= v264)
                            {
                              uint64_t v293 = v285 + 2;
                            }
                            else
                            {
                              int v265 = v285;
                              uint64_t v293 = v237;
                            }
                          }
                          uint64_t v237 = v293;
                        }
                      }
LABEL_509:
                      uint64_t v320 = *(unsigned int *)(**v458 + 16);
                      if ((int)v320 >= 1)
                      {
                        uint64_t v321 = 4 * (int)v234;
                        uint64_t v322 = *(void *)(v452 + 24);
                        int v323 = *(unsigned __int8 *)(a1 + 294);
                        uint64_t v324 = (int *)(*(void *)&v487[0] + 4);
                        do
                        {
                          *(_DWORD *)(v322 + v321) = *(v324 - 1);
                          if (v323) {
                            *(float *)(*(void *)(v459 + 24) + v321) = (float)*v324;
                          }
                          v324 += 2;
                          v321 += v230;
                          --v320;
                        }
                        while (v320);
                      }
                      ++v233;
                      uint64_t v220 = (_DWORD *)**v456;
                      uint64_t v235 = (v235 + 1);
                      uint64_t v234 = (v234 + 1);
                    }
                    while (v233 < (int)v220[2]);
                  }
                  int v232 = v436 + 1;
                  uint64_t v222 = (v432 + v430);
                  uint64_t v221 = (v434 + v428);
                }
                while (v436 + 1 < v220[3]);
              }
              int v231 = v426 + 1;
              uint64_t v222 = (v422 + v420);
              uint64_t v221 = (v424 + v419);
            }
            while (v426 + 1 < v220[5]);
          }
          int v223 = v416 + 1;
          uint64_t v222 = (v417 + v414);
          uint64_t v221 = (v418 + v413);
        }
        while (v416 + 1 < v220[6]);
        goto LABEL_636;
      }
      signed int v212 = v473;
      uint64_t v213 = v473;
      BOOL v214 = 1;
    }
    if (v212) {
      uint64_t v457 = *((int *)&v469 + v213 - 1);
    }
    else {
      uint64_t v457 = 0;
    }
    BOOL v218 = !v214;
    if (DWORD1(v475) <= 3) {
      BOOL v218 = 0;
    }
    if (v218)
    {
      if (SDWORD1(v475) == 5)
      {
        uint64_t v455 = SDWORD1(v474) * (uint64_t)(int)v474;
        unint64_t v219 = SHIDWORD(v474) * (uint64_t)(int)v475 * SDWORD2(v474);
      }
      else if (SDWORD1(v475) == 4)
      {
        uint64_t v455 = (int)v474;
        unint64_t v219 = SDWORD2(v474) * (uint64_t)SHIDWORD(v474) * SDWORD1(v474);
      }
      else
      {
        uint64_t v455 = 0;
LABEL_533:
        unint64_t v219 = 0;
      }
      goto LABEL_534;
    }
LABEL_524:
    switch(DWORD1(v475))
    {
      case 1:
        uint64_t v325 = 1;
        goto LABEL_530;
      case 2:
        uint64_t v325 = (int)v474;
        goto LABEL_530;
      case 3:
        uint64_t v325 = SDWORD1(v474) * (uint64_t)(int)v474;
        goto LABEL_530;
      case 4:
        uint64_t v325 = SDWORD1(v474) * (uint64_t)(int)v474 * SDWORD2(v474);
        goto LABEL_530;
      case 5:
        uint64_t v325 = SDWORD1(v474) * (uint64_t)(int)v474 * SDWORD2(v474) * SHIDWORD(v474);
LABEL_530:
        uint64_t v455 = v325;
        if (DWORD1(v475)) {
          goto LABEL_531;
        }
        goto LABEL_533;
      default:
        uint64_t v455 = 0;
        if (!DWORD1(v475)) {
          goto LABEL_533;
        }
LABEL_531:
        unint64_t v219 = *((int *)&v474 + SDWORD1(v475) - 1);
        break;
    }
LABEL_534:
    std::vector<std::pair<float,int>>::vector(v487, v219);
    if (!v455) {
      goto LABEL_636;
    }
    uint64_t v326 = 0;
    uint64_t v327 = 0;
    uint64_t v328 = 0;
    unint64_t v329 = (unint64_t)(v460 - 2) >> 1;
    uint64_t v444 = v482;
    uint64_t v437 = 2 * v329;
    unint64_t v440 = v329 + 1;
    uint64_t v447 = v483;
    do
    {
      uint64_t v330 = *(float **)&v487[0];
      if (v219)
      {
        uint64_t v331 = 0;
        uint64_t v332 = (_DWORD *)(*(void *)&v487[0] + 4);
        uint64_t v333 = *(void *)(v447 + 24) + v327;
        do
        {
          *(v332 - 1) = *(_DWORD *)(v333 + 4 * v331);
          *uint64_t v332 = v331;
          v332 += 2;
          ++v331;
        }
        while (v219 != v331);
      }
      if (*(unsigned char *)(v453 + 293))
      {
        if (v460)
        {
          uint64_t v334 = (float *)*((void *)&v487[0] + 1);
          if (v460 >= 2)
          {
            unint64_t v335 = v440;
            uint64_t v336 = &v330[v437];
            do
            {
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v330, v460, v336);
              v336 -= 2;
              --v335;
            }
            while (v335);
          }
          uint64_t v337 = &v330[2 * v460];
          if (v337 != v334)
          {
            uint64_t v338 = &v330[2 * v460];
            do
            {
              uint64_t v339 = *(void *)v338;
              uint64_t v340 = *(void *)v330;
              if (COERCE_FLOAT(*(void *)v338) > COERCE_FLOAT(*(void *)v330))
              {
                *(_DWORD *)uint64_t v338 = v340;
                *(_DWORD *)uint64_t v330 = v339;
                v338[1] = *((float *)&v340 + 1);
                v330[1] = *((float *)&v339 + 1);
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v330, v460, v330);
              }
              v338 += 2;
            }
            while (v338 != v334);
          }
          if (v460 >= 2)
          {
            uint64_t v341 = v460 & 0x1FFFFFFFFFFFFFFFLL;
            do
            {
              uint64_t v342 = 0;
              float v343 = *v330;
              int v344 = *((_DWORD *)v330 + 1);
              uint64_t v345 = v330;
              do
              {
                uint64_t v346 = v345;
                v345 += 2 * v342 + 2;
                uint64_t v347 = 2 * v342;
                uint64_t v342 = (2 * v342) | 1;
                uint64_t v348 = v347 + 2;
                if (v348 < v341 && *v345 > v345[2])
                {
                  v345 += 2;
                  uint64_t v342 = v348;
                }
                *uint64_t v346 = *v345;
                v346[1] = v345[1];
              }
              while (v342 <= (uint64_t)((unint64_t)(v341 - 2) >> 1));
              if (v345 == v337 - 2)
              {
                *uint64_t v345 = v343;
                *((_DWORD *)v345 + 1) = v344;
              }
              else
              {
                *uint64_t v345 = *(v337 - 2);
                v345[1] = *(v337 - 1);
                *(v337 - 2) = v343;
                *((_DWORD *)v337 - 1) = v344;
                uint64_t v349 = (char *)v345 - (char *)v330 + 8;
                if (v349 >= 9)
                {
                  unint64_t v350 = (((unint64_t)v349 >> 3) - 2) >> 1;
                  uint64_t v351 = &v330[2 * v350];
                  float v352 = *v345;
                  float v353 = COERCE_FLOAT(*(void *)v351);
                  float v354 = *v345;
                  if (v353 > *v345)
                  {
                    int v355 = *((_DWORD *)v345 + 1);
                    do
                    {
                      uint64_t v356 = v345;
                      uint64_t v345 = v351;
                      *uint64_t v356 = v353;
                      v356[1] = v351[1];
                      if (!v350) {
                        break;
                      }
                      unint64_t v350 = (v350 - 1) >> 1;
                      uint64_t v351 = &v330[2 * v350];
                      float v353 = COERCE_FLOAT(*(void *)v351);
                    }
                    while (v353 > v354);
                    *uint64_t v345 = v352;
                    *((_DWORD *)v345 + 1) = v355;
                  }
                }
              }
              v337 -= 2;
              BOOL v53 = v341-- <= 2;
            }
            while (!v53);
          }
        }
      }
      else
      {
        uint64_t v357 = &v330[2 * v460];
        uint64_t v358 = (float *)*((void *)&v487[0] + 1);
        while (v358 != v357)
        {
          unint64_t v359 = ((char *)v358 - (char *)v330) >> 3;
          if (v359 < 2) {
            break;
          }
          if (v359 == 3)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v330, (uint64_t)(v330 + 2), (uint64_t)(v358 - 2));
            break;
          }
          if (v359 == 2)
          {
            float v395 = *(v358 - 2);
            float v396 = *v330;
            if (v395 > *v330)
            {
              *uint64_t v330 = v395;
              *(v358 - 2) = v396;
              int v397 = *((_DWORD *)v330 + 1);
              v330[1] = *(v358 - 1);
              *((_DWORD *)v358 - 1) = v397;
            }
            break;
          }
          if ((char *)v358 - (char *)v330 <= 63)
          {
            while (v330 != v358 - 2)
            {
              uint64_t v398 = v330;
              v330 += 2;
              if (v398 != v358 && v330 != v358)
              {
                float v399 = *v398;
                float v400 = *v398;
                uint64_t v401 = v330;
                size_t v402 = v398;
                uint64_t v403 = v330;
                do
                {
                  float v404 = *v403;
                  v403 += 2;
                  float v405 = v404;
                  if (v404 > v400)
                  {
                    float v400 = v405;
                    size_t v402 = v401;
                  }
                  uint64_t v401 = v403;
                }
                while (v403 != v358);
                if (v402 != v398)
                {
                  *uint64_t v398 = *v402;
                  *size_t v402 = v399;
                  int v406 = *((_DWORD *)v398 + 1);
                  v398[1] = v402[1];
                  *((_DWORD *)v402 + 1) = v406;
                }
              }
            }
            break;
          }
          uint64_t v360 = (uint64_t)&v330[2 * (v359 >> 1)];
          uint64_t v361 = v358 - 2;
          int v362 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v330, v360, (uint64_t)(v358 - 2));
          float v363 = *v330;
          if (*v330 > *(float *)v360)
          {
LABEL_577:
            uint64_t v369 = v330 + 2;
            if (v330 + 2 >= v361)
            {
              uint64_t v372 = v330 + 2;
            }
            else
            {
              uint64_t v370 = v330 + 2;
              while (1)
              {
                float v371 = *(float *)v360;
                do
                {
                  uint64_t v372 = v370;
                  float v373 = *v370;
                  v370 += 2;
                  float v374 = v373;
                }
                while (v373 > v371);
                do
                {
                  float v375 = *(v361 - 2);
                  v361 -= 2;
                  float v376 = v375;
                }
                while (v375 <= v371);
                if (v372 >= v361) {
                  break;
                }
                *uint64_t v372 = v376;
                *uint64_t v361 = v374;
                int v377 = *((_DWORD *)v372 + 1);
                v372[1] = v361[1];
                *((_DWORD *)v361 + 1) = v377;
                ++v362;
                if ((float *)v360 == v372) {
                  uint64_t v360 = (uint64_t)v361;
                }
              }
            }
            if (v372 != (float *)v360)
            {
              float v378 = *v372;
              if (*(float *)v360 > *v372)
              {
                *uint64_t v372 = *(float *)v360;
                *(float *)uint64_t v360 = v378;
                int v379 = *((_DWORD *)v372 + 1);
                v372[1] = *(float *)(v360 + 4);
                *(_DWORD *)(v360 + 4) = v379;
                ++v362;
              }
            }
            if (v372 == v357) {
              break;
            }
            if (!v362)
            {
              if (v372 <= v357)
              {
                int v385 = v372 + 2;
                while (v385 != v358)
                {
                  float v386 = *v385;
                  float v387 = *(v385 - 2);
                  v385 += 2;
                  if (v386 > v387) {
                    goto LABEL_592;
                  }
                }
              }
              else
              {
                while (v369 != v372)
                {
                  float v381 = *v369;
                  float v382 = *(v369 - 2);
                  v369 += 2;
                  if (v381 > v382) {
                    goto LABEL_592;
                  }
                }
              }
              break;
            }
LABEL_592:
            if (v372 <= v357)
            {
              uint64_t v380 = v372 + 2;
            }
            else
            {
              uint64_t v358 = v372;
              uint64_t v380 = v330;
            }
          }
          else
          {
            uint64_t v364 = v358 - 4;
            while (v364 != v330)
            {
              uint64_t v365 = v364;
              float v366 = *v364;
              v364 -= 2;
              float v367 = v366;
              if (v366 > *(float *)v360)
              {
                *uint64_t v330 = v367;
                v364[2] = v363;
                int v368 = *((_DWORD *)v330 + 1);
                v330[1] = v364[3];
                *((_DWORD *)v364 + 3) = v368;
                ++v362;
                uint64_t v361 = v365;
                goto LABEL_577;
              }
            }
            uint64_t v383 = v330 + 2;
            if (v363 <= *v361)
            {
              while (v383 != v361)
              {
                float v384 = *v383;
                if (v363 > *v383)
                {
                  *uint64_t v383 = *v361;
                  *(v358 - 2) = v384;
                  int v388 = *((_DWORD *)v383 + 1);
                  v383[1] = *(v358 - 1);
                  *((_DWORD *)v358 - 1) = v388;
                  v383 += 2;
                  goto LABEL_608;
                }
                v383 += 2;
              }
              break;
            }
LABEL_608:
            if (v383 == v361) {
              break;
            }
            while (1)
            {
              float v389 = *v330;
              do
              {
                uint64_t v380 = v383;
                float v390 = *v383;
                v383 += 2;
                float v391 = v390;
              }
              while (v389 <= v390);
              do
              {
                float v392 = *(v361 - 2);
                v361 -= 2;
                float v393 = v392;
              }
              while (v389 > v392);
              if (v380 >= v361) {
                break;
              }
              *uint64_t v380 = v393;
              *uint64_t v361 = v391;
              int v394 = *((_DWORD *)v380 + 1);
              v380[1] = v361[1];
              *((_DWORD *)v361 + 1) = v394;
            }
            if (v380 > v357) {
              break;
            }
          }
          uint64_t v330 = v380;
        }
      }
      if (v457)
      {
        uint64_t v407 = *(void *)(v444 + 24);
        int v408 = *(unsigned __int8 *)(v453 + 294);
        size_t v409 = (int *)(*(void *)&v487[0] + 4);
        uint64_t v410 = v326;
        uint64_t v411 = v457;
        do
        {
          *(_DWORD *)(v407 + v410) = *(v409 - 1);
          if (v408) {
            *(float *)(*(void *)(v459 + 24) + v410) = (float)*v409;
          }
          v409 += 2;
          v410 += 4;
          --v411;
        }
        while (v411);
      }
      ++v328;
      v327 += 4 * v219;
      v326 += 4 * v457;
    }
    while (v328 != v455);
    goto LABEL_636;
  }
  unsigned int v26 = *(_DWORD *)(a1 + 288);
  if ((v26 & 0x80000000) != 0 && (v26 += DWORD1(v475), (v26 & 0x80000000) != 0) || (int)v26 >= SDWORD1(v475)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis argument in topk_kernel_cpu.");
  }
  unint64_t v27 = 0;
  unint64_t v28 = 1;
  unint64_t v29 = 1;
  uint64_t v30 = 1;
  do
  {
    if (v27 >= v26)
    {
      if (v26 == v27) {
        v29 *= *((int *)&v474 + v26);
      }
      else {
        v28 *= *((int *)&v474 + v27);
      }
    }
    else
    {
      v30 *= *((int *)&v474 + v27);
    }
    ++v27;
  }
  while (DWORD1(v475) != v27);
  if (*((_DWORD *)&v474 + v26) >= v460) {
    int v31 = v460;
  }
  else {
    int v31 = *((_DWORD *)&v474 + v26);
  }
  if (*((_DWORD *)&v469 + v26) != v460) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("topk kernel: computed output shape along specified axis is not equal to num_k");
  }
  std::vector<std::pair<float,int>>::vector(v487, v29);
  vDSP_Length __I = 0;
  if (v30)
  {
    uint64_t v441 = 0;
    uint64_t v443 = 0;
    uint64_t v32 = v31;
    unint64_t v421 = v28 * v31;
    unint64_t v423 = v28 * v29;
    uint64_t v435 = v31 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v438 = 0;
    unint64_t v33 = (unint64_t)(v31 - 2) >> 1;
    if ((unint64_t)v31 <= 1) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = v31;
    }
    uint64_t v445 = v34;
    uint64_t v35 = 4 * v28;
    uint64_t v431 = 8 * v33;
    unint64_t v433 = v33 + 1;
    uint64_t v425 = 4 * v32 * v28;
    uint64_t v427 = 4 * v28 * v29;
    unint64_t v451 = v28;
    uint64_t v429 = v30;
    do
    {
      if (!v28) {
        goto LABEL_384;
      }
      uint64_t v36 = 0;
      uint64_t v37 = v441;
      uint64_t v461 = v443;
      unint64_t v454 = v421 * v438;
      do
      {
        uint64_t v38 = *(void *)(v483 + 24);
        if (v32 == 1)
        {
          double v39 = (const float *)(v38 + 4 * (v36 + v423 * v438));
          int64x2_t v40 = (float *)(*(void *)(v482 + 24) + 4 * (v36 + v454));
          if (*(unsigned char *)(a1 + 292)) {
            vDSP_minvi(v39, v28, v40, &__I, v29);
          }
          else {
            vDSP_maxvi(v39, v28, v40, &__I, v29);
          }
          if (*(unsigned char *)(a1 + 294)) {
            *(float *)(*(void *)(v9 + 24) + 4 * (v36 + v454)) = (float)(int)(__I / v28);
          }
          goto LABEL_383;
        }
        uint64_t v41 = *(void *)&v487[0];
        if (v29)
        {
          uint64_t v42 = 0;
          unsigned int v43 = (_DWORD *)(*(void *)&v487[0] + 4);
          int v44 = (_DWORD *)(v38 + v37);
          do
          {
            *(v43 - 1) = *v44;
            *unsigned int v43 = v42;
            v43 += 2;
            ++v42;
            int v44 = (_DWORD *)((char *)v44 + v35);
          }
          while (v29 != v42);
        }
        if (*(unsigned char *)(a1 + 292))
        {
          if (*(unsigned char *)(a1 + 293))
          {
            if (!v32) {
              goto LABEL_383;
            }
            int v45 = (float *)*((void *)&v487[0] + 1);
            if ((int)v32 >= 2)
            {
              unint64_t v46 = v433;
              int v47 = (float *)(v431 + v41);
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_4 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v32, v47);
                v47 -= 2;
                --v46;
              }
              while (v46);
            }
            uint64_t v48 = v41 + 8 * v32;
            if ((float *)v48 != v45)
            {
              float v49 = (float *)(v41 + 8 * v32);
              do
              {
                float v51 = *v49;
                int v50 = *((_DWORD *)v49 + 1);
                int v52 = *(_DWORD *)(v41 + 4);
                if (*v49 < *(float *)v41 || (*v49 == *(float *)v41 ? (BOOL v53 = v50 < v52) : (BOOL v53 = 0), v53))
                {
                  *float v49 = *(float *)v41;
                  *(float *)uint64_t v41 = v51;
                  *((_DWORD *)v49 + 1) = v52;
                  *(_DWORD *)(v41 + 4) = v50;
                  std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_4 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v32, (float *)v41);
                }
                v49 += 2;
              }
              while (v49 != v45);
            }
            unint64_t v28 = v451;
            if ((int)v32 < 2) {
              goto LABEL_378;
            }
            uint64_t v54 = v435;
            while (2)
            {
              uint64_t v55 = 0;
              float v56 = *(float *)v41;
              int v57 = *(_DWORD *)(v41 + 4);
              uint64_t v58 = (void *)v41;
              do
              {
                uint64_t v59 = v58;
                v58 += v55 + 1;
                uint64_t v60 = 2 * v55;
                uint64_t v55 = (2 * v55) | 1;
                uint64_t v61 = v60 + 2;
                if (v61 < v54)
                {
                  float v62 = COERCE_FLOAT(*v58);
                  float v63 = COERCE_FLOAT(v58[1]);
                  if (v62 < v63 || (v62 == v63 ? (BOOL v64 = (int)HIDWORD(*v58) < (int)HIDWORD(v58[1])) : (BOOL v64 = 0), v64))
                  {
                    ++v58;
                    uint64_t v55 = v61;
                  }
                }
                *uint64_t v59 = *(_DWORD *)v58;
                v59[1] = *((_DWORD *)v58 + 1);
              }
              while (v55 <= (uint64_t)((unint64_t)(v54 - 2) >> 1));
              if (v58 == (void *)(v48 - 8))
              {
                *(float *)uint64_t v58 = v56;
              }
              else
              {
                *(_DWORD *)uint64_t v58 = *(_DWORD *)(v48 - 8);
                *((_DWORD *)v58 + 1) = *(_DWORD *)(v48 - 4);
                *(float *)(v48 - 8) = v56;
                *(_DWORD *)(v48 - 4) = v57;
                uint64_t v65 = (uint64_t)v58 - v41 + 8;
                if (v65 < 9) {
                  goto LABEL_121;
                }
                unint64_t v66 = ((unint64_t)v65 >> 3) - 2;
                unint64_t v67 = v66 >> 1;
                uint64_t v68 = v41 + 8 * (v66 >> 1);
                int v69 = *(_DWORD *)(v68 + 4);
                int v70 = *(_DWORD *)v58;
                int v57 = *((_DWORD *)v58 + 1);
                float v71 = *(float *)v58;
                if (*(float *)v68 >= *(float *)v58 && (*(float *)v68 != *(float *)v58 || v69 >= v57))
                {
LABEL_121:
                  v48 -= 8;
                  BOOL v53 = v54-- <= 2;
                  if (v53) {
                    goto LABEL_378;
                  }
                  continue;
                }
                *(_DWORD *)uint64_t v58 = *(_DWORD *)v68;
                *((_DWORD *)v58 + 1) = v69;
                if (v66 >= 2)
                {
                  while (1)
                  {
                    unint64_t v73 = v67 - 1;
                    unint64_t v67 = (v67 - 1) >> 1;
                    uint64_t v58 = (void *)(v41 + 8 * v67);
                    int v74 = *((_DWORD *)v58 + 1);
                    if (*(float *)v58 >= v71 && (*(float *)v58 != v71 || v57 <= v74)) {
                      break;
                    }
                    *(_DWORD *)uint64_t v68 = *(_DWORD *)v58;
                    *(_DWORD *)(v68 + 4) = v74;
                    uint64_t v68 = v41 + 8 * v67;
                    if (v73 <= 1) {
                      goto LABEL_118;
                    }
                  }
                }
                uint64_t v58 = (void *)v68;
LABEL_118:
                *(_DWORD *)uint64_t v58 = v70;
              }
              break;
            }
            *((_DWORD *)v58 + 1) = v57;
            goto LABEL_121;
          }
          float v107 = (float *)(v41 + 8 * v32);
          int v108 = (float *)*((void *)&v487[0] + 1);
          if (v107 == *((float **)&v487[0] + 1)) {
            goto LABEL_378;
          }
          while (2)
          {
            unint64_t v109 = ((uint64_t)v108 - v41) >> 3;
            if (v109 < 2) {
              goto LABEL_378;
            }
            if (v109 == 3)
            {
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_5 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v41 + 8, (_DWORD *)v108 - 2);
              goto LABEL_378;
            }
            if (v109 == 2)
            {
              float v192 = *(v108 - 2);
              float v193 = *(float *)v41;
              BOOL v194 = v192 == *(float *)v41;
              if (v192 >= *(float *)v41) {
                goto LABEL_362;
              }
              goto LABEL_346;
            }
            if ((uint64_t)v108 - v41 <= 63)
            {
              while ((float *)v41 != v108 - 2)
              {
                BOOL v197 = (float *)v41;
                v41 += 8;
                if (v197 != v108 && (float *)v41 != v108)
                {
                  uint64_t v198 = v41;
                  int v199 = v197;
                  do
                  {
                    if (*(float *)v198 < *v199
                      || *(float *)v198 == *v199 && *(_DWORD *)(v198 + 4) < *((_DWORD *)v199 + 1))
                    {
                      int v199 = (float *)v198;
                    }
                    v198 += 8;
                  }
                  while ((float *)v198 != v108);
                  if (v199 != v197)
                  {
                    int v200 = *(_DWORD *)v197;
                    float *v197 = *v199;
                    *(_DWORD *)int v199 = v200;
                    int v201 = *((_DWORD *)v197 + 1);
                    v197[1] = v199[1];
                    *((_DWORD *)v199 + 1) = v201;
                  }
                }
              }
              goto LABEL_378;
            }
            uint64_t v110 = v32;
            uint64_t v111 = v36;
            uint64_t v112 = v37;
            float32x2_t v113 = v107;
            unint64_t v114 = v109 >> 1;
            uint64_t v115 = v41 + 8 * (v109 >> 1);
            uint64_t v448 = v108;
            uint64_t v116 = v108 - 2;
            int v117 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_5 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v115, (_DWORD *)v108 - 2);
            float v118 = *(float *)v41;
            float v119 = *(float *)v115;
            if (*(float *)v41 < *(float *)v115
              || *(float *)v41 == *(float *)v115 && *(_DWORD *)(v41 + 4) < *(_DWORD *)(v41 + 8 * v114 + 4))
            {
              unint64_t v120 = (unint64_t)v116;
              float v107 = v113;
              uint64_t v37 = v112;
              uint64_t v36 = v111;
              uint64_t v32 = v110;
              goto LABEL_185;
            }
            int v108 = v448;
            unint64_t v120 = (unint64_t)(v448 - 4);
            float v107 = v113;
            uint64_t v37 = v112;
            uint64_t v36 = v111;
            uint64_t v32 = v110;
            if ((float *)v41 == v448 - 4)
            {
LABEL_210:
              int64x2_t v135 = (float *)(v41 + 8);
              if (v118 >= *v116)
              {
                uint64_t v9 = v459;
                unint64_t v28 = v451;
                if (v118 != *v116 || *(_DWORD *)(v41 + 4) >= *((_DWORD *)v448 - 1))
                {
                  while (v135 != v116)
                  {
                    float v143 = *v135;
                    if (v118 < *v135)
                    {
                      int v144 = *((_DWORD *)v135 + 1);
LABEL_244:
                      *int64x2_t v135 = *v116;
                      *(v448 - 2) = v143;
                      v135[1] = *(v448 - 1);
                      *((_DWORD *)v448 - 1) = v144;
                      v135 += 2;
                      goto LABEL_245;
                    }
                    if (v118 == *v135)
                    {
                      int v144 = *((_DWORD *)v135 + 1);
                      if (*(_DWORD *)(v41 + 4) < v144) {
                        goto LABEL_244;
                      }
                    }
                    v135 += 2;
                  }
                  goto LABEL_378;
                }
              }
              else
              {
                uint64_t v9 = v459;
                unint64_t v28 = v451;
              }
LABEL_245:
              if (v135 == v116) {
                goto LABEL_378;
              }
              while (1)
              {
                float v145 = *(float *)v41;
                for (float j = *v135; v145 >= j && (v145 != j || *(_DWORD *)(v41 + 4) >= *((_DWORD *)v135 + 1)); float j = v147)
                {
                  float v147 = v135[2];
                  v135 += 2;
                }
                do
                {
                  do
                  {
                    float v148 = *(v116 - 2);
                    v116 -= 2;
                    float v149 = v148;
                    BOOL v150 = v145 == v148;
                  }
                  while (v145 < v148);
                }
                while (v150 && *(_DWORD *)(v41 + 4) < *((_DWORD *)v116 + 1));
                if (v135 >= v116) {
                  break;
                }
                *int64x2_t v135 = v149;
                *uint64_t v116 = j;
                int v151 = *((_DWORD *)v135 + 1);
                v135[1] = v116[1];
                *((_DWORD *)v116 + 1) = v151;
                v135 += 2;
              }
              if (v135 > v107) {
                goto LABEL_378;
              }
            }
            else
            {
              while (*(float *)v120 >= v119
                   && (*(float *)v120 != v119 || *(_DWORD *)(v120 + 4) >= *(_DWORD *)(v41 + 8 * v114 + 4)))
              {
                v120 -= 8;
                if (v120 == v41) {
                  goto LABEL_210;
                }
              }
              *(_DWORD *)uint64_t v41 = *(_DWORD *)v120;
              *(float *)unint64_t v120 = v118;
              int v142 = *(_DWORD *)(v41 + 4);
              *(_DWORD *)(v41 + 4) = *(_DWORD *)(v120 + 4);
              *(_DWORD *)(v120 + 4) = v142;
              ++v117;
LABEL_185:
              int v121 = (float *)(v41 + 8);
              uint64_t v9 = v459;
              if (v41 + 8 >= v120)
              {
                uint64_t v122 = 1;
                int v108 = v448;
              }
              else
              {
                uint64_t v122 = 1;
                int v108 = v448;
                while (1)
                {
                  float v123 = *(float *)v115;
                  for (int k = (float *)(v41 + 4 + 8 * v122); ; k += 2)
                  {
                    float v125 = *(k - 1);
                    if (v125 >= v123 && (v125 != v123 || *(_DWORD *)k >= *(_DWORD *)(v115 + 4))) {
                      break;
                    }
                    ++v122;
                  }
                  uint64_t v126 = (float *)(v120 - 8);
                  float v127 = *(float *)(v120 - 8);
                  if (v127 >= v123)
                  {
                    do
                    {
                      if (v127 == v123 && *(_DWORD *)(v120 - 4) < *(_DWORD *)(v115 + 4)) {
                        break;
                      }
                      float v127 = *(float *)(v120 - 16);
                      v120 -= 8;
                    }
                    while (v127 >= v123);
                    uint64_t v126 = (float *)(v120 - 8);
                  }
                  uint64_t v128 = (float *)(v41 + 8 * v122);
                  if (v128 >= v126) {
                    break;
                  }
                  float *v128 = v127;
                  *uint64_t v126 = v125;
                  uint64_t v129 = v41 + 8 * v122;
                  int v130 = *(_DWORD *)(v129 + 4);
                  *(_DWORD *)(v129 + 4) = *(_DWORD *)(v120 - 4);
                  *(_DWORD *)(v120 - 4) = v130;
                  ++v117;
                  if ((float *)v115 == v128) {
                    uint64_t v115 = (uint64_t)v126;
                  }
                  ++v122;
                  unint64_t v120 = (unint64_t)v126;
                }
              }
              float32x2_t v131 = (float *)(v41 + 8 * v122);
              if (v131 != (float *)v115)
              {
                float v132 = *v131;
                if (*(float *)v115 < *v131)
                {
                  int v133 = *(_DWORD *)(v41 + 8 * v122 + 4);
                  int v134 = *(_DWORD *)(v115 + 4);
                  goto LABEL_214;
                }
                if (*(float *)v115 == *v131)
                {
                  int v134 = *(_DWORD *)(v115 + 4);
                  int v133 = *(_DWORD *)(v41 + 8 * v122 + 4);
                  if (v134 < v133)
                  {
LABEL_214:
                    *float32x2_t v131 = *(float *)v115;
                    *(float *)uint64_t v115 = v132;
                    *(_DWORD *)(v41 + 8 * v122 + 4) = v134;
                    *(_DWORD *)(v115 + 4) = v133;
                    ++v117;
                  }
                }
              }
              unint64_t v28 = v451;
              if (v131 == v107) {
                goto LABEL_378;
              }
              if (!v117)
              {
                if (v131 <= v107)
                {
                  uint64_t v139 = v131 + 2;
                  if (v131 + 2 == v108) {
                    goto LABEL_378;
                  }
                  float v140 = *v131;
                  while (1)
                  {
                    float v141 = v140;
                    float v140 = *v139;
                    if (*v139 < v141 || *v139 == v141 && *((_DWORD *)v139 + 1) < *((_DWORD *)v139 - 1)) {
                      break;
                    }
                    v139 += 2;
                    if (v139 == v108) {
                      goto LABEL_378;
                    }
                  }
                }
                else
                {
                  if (v122 == 1) {
                    goto LABEL_378;
                  }
                  float v136 = *(float *)v41;
                  uint64_t v137 = 8 * v122 - 8;
                  while (1)
                  {
                    float v138 = v136;
                    float v136 = *v121;
                    if (*v121 < v138 || *v121 == v138 && *((_DWORD *)v121 + 1) < *((_DWORD *)v121 - 1)) {
                      break;
                    }
                    v121 += 2;
                    v137 -= 8;
                    if (!v137) {
                      goto LABEL_378;
                    }
                  }
                }
              }
              int64x2_t v135 = v131 + 2;
              if (v131 > v107)
              {
                int v108 = v131;
                int64x2_t v135 = (float *)v41;
              }
            }
            uint64_t v41 = (uint64_t)v135;
            if (v108 == v107) {
              goto LABEL_378;
            }
            continue;
          }
        }
        if (*(unsigned char *)(a1 + 293))
        {
          if (!v32) {
            goto LABEL_383;
          }
          int v76 = (float *)*((void *)&v487[0] + 1);
          if ((int)v32 >= 2)
          {
            unint64_t v77 = v433;
            float v78 = (float *)(v431 + v41);
            do
            {
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_6 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v32, v78);
              v78 -= 2;
              --v77;
            }
            while (v77);
          }
          uint64_t v79 = v41 + 8 * v32;
          if ((float *)v79 != v76)
          {
            double v80 = (float *)(v41 + 8 * v32);
            do
            {
              float v82 = *v80;
              int v81 = *((_DWORD *)v80 + 1);
              int v83 = *(_DWORD *)(v41 + 4);
              if (*v80 > *(float *)v41 || (*v80 == *(float *)v41 ? (BOOL v84 = v81 < v83) : (BOOL v84 = 0), v84))
              {
                *double v80 = *(float *)v41;
                *(float *)uint64_t v41 = v82;
                *((_DWORD *)v80 + 1) = v83;
                *(_DWORD *)(v41 + 4) = v81;
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_6 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v32, (float *)v41);
              }
              v80 += 2;
            }
            while (v80 != v76);
          }
          unint64_t v28 = v451;
          if ((int)v32 < 2) {
            goto LABEL_378;
          }
          uint64_t v85 = v435;
          while (2)
          {
            uint64_t v86 = 0;
            float v87 = *(float *)v41;
            int v88 = *(_DWORD *)(v41 + 4);
            float v89 = (void *)v41;
            do
            {
              float v90 = v89;
              v89 += v86 + 1;
              uint64_t v91 = 2 * v86;
              uint64_t v86 = (2 * v86) | 1;
              uint64_t v92 = v91 + 2;
              if (v92 < v85)
              {
                float v93 = COERCE_FLOAT(*v89);
                float v94 = COERCE_FLOAT(v89[1]);
                if (v93 > v94 || (v93 == v94 ? (BOOL v95 = (int)HIDWORD(*v89) < (int)HIDWORD(v89[1])) : (BOOL v95 = 0), v95))
                {
                  ++v89;
                  uint64_t v86 = v92;
                }
              }
              _DWORD *v90 = *(_DWORD *)v89;
              v90[1] = *((_DWORD *)v89 + 1);
            }
            while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
            if (v89 == (void *)(v79 - 8))
            {
              *(float *)float v89 = v87;
            }
            else
            {
              *(_DWORD *)float v89 = *(_DWORD *)(v79 - 8);
              *((_DWORD *)v89 + 1) = *(_DWORD *)(v79 - 4);
              *(float *)(v79 - 8) = v87;
              *(_DWORD *)(v79 - 4) = v88;
              uint64_t v96 = (uint64_t)v89 - v41 + 8;
              if (v96 < 9) {
                goto LABEL_173;
              }
              unint64_t v97 = ((unint64_t)v96 >> 3) - 2;
              unint64_t v98 = v97 >> 1;
              uint64_t v99 = v41 + 8 * (v97 >> 1);
              int v100 = *(_DWORD *)(v99 + 4);
              int v101 = *(_DWORD *)v89;
              int v88 = *((_DWORD *)v89 + 1);
              float v102 = *(float *)v89;
              if (*(float *)v99 <= *(float *)v89 && (*(float *)v99 != *(float *)v89 || v100 >= v88))
              {
LABEL_173:
                v79 -= 8;
                BOOL v53 = v85-- <= 2;
                if (v53) {
                  goto LABEL_378;
                }
                continue;
              }
              *(_DWORD *)float v89 = *(_DWORD *)v99;
              *((_DWORD *)v89 + 1) = v100;
              if (v97 >= 2)
              {
                while (1)
                {
                  unint64_t v104 = v98 - 1;
                  unint64_t v98 = (v98 - 1) >> 1;
                  float v89 = (void *)(v41 + 8 * v98);
                  int v105 = *((_DWORD *)v89 + 1);
                  if (*(float *)v89 <= v102 && (*(float *)v89 != v102 || v88 <= v105)) {
                    break;
                  }
                  *(_DWORD *)uint64_t v99 = *(_DWORD *)v89;
                  *(_DWORD *)(v99 + 4) = v105;
                  uint64_t v99 = v41 + 8 * v98;
                  if (v104 <= 1) {
                    goto LABEL_170;
                  }
                }
              }
              float v89 = (void *)v99;
LABEL_170:
              *(_DWORD *)float v89 = v101;
            }
            break;
          }
          *((_DWORD *)v89 + 1) = v88;
          goto LABEL_173;
        }
        int32x2_t v152 = (float *)(v41 + 8 * v32);
        int v108 = (float *)*((void *)&v487[0] + 1);
        if (v152 == *((float **)&v487[0] + 1)) {
          goto LABEL_378;
        }
        while (1)
        {
          unint64_t v153 = ((uint64_t)v108 - v41) >> 3;
          if (v153 < 2) {
            goto LABEL_378;
          }
          if (v153 == 3)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_7 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v41 + 8, (_DWORD *)v108 - 2);
            goto LABEL_378;
          }
          if (v153 == 2)
          {
            float v192 = *(v108 - 2);
            float v193 = *(float *)v41;
            BOOL v194 = v192 == *(float *)v41;
            if (v192 > *(float *)v41)
            {
LABEL_346:
              int v195 = *(_DWORD *)(v41 + 4);
              int v196 = *((_DWORD *)v108 - 1);
            }
            else
            {
LABEL_362:
              if (!v194) {
                goto LABEL_378;
              }
              int v196 = *((_DWORD *)v108 - 1);
              int v195 = *(_DWORD *)(v41 + 4);
              if (v196 >= v195) {
                goto LABEL_378;
              }
            }
            *(float *)uint64_t v41 = v192;
            *(v108 - 2) = v193;
            *(_DWORD *)(v41 + 4) = v196;
            *((_DWORD *)v108 - 1) = v195;
            goto LABEL_378;
          }
          if ((uint64_t)v108 - v41 <= 63)
          {
            while ((float *)v41 != v108 - 2)
            {
              int v202 = (float *)v41;
              v41 += 8;
              if (v202 != v108 && (float *)v41 != v108)
              {
                uint64_t v203 = v41;
                int v204 = v202;
                do
                {
                  if (*(float *)v203 > *v204
                    || *(float *)v203 == *v204 && *(_DWORD *)(v203 + 4) < *((_DWORD *)v204 + 1))
                  {
                    int v204 = (float *)v203;
                  }
                  v203 += 8;
                }
                while ((float *)v203 != v108);
                if (v204 != v202)
                {
                  int v205 = *(_DWORD *)v202;
                  *int v202 = *v204;
                  *(_DWORD *)int v204 = v205;
                  int v206 = *((_DWORD *)v202 + 1);
                  v202[1] = v204[1];
                  *((_DWORD *)v204 + 1) = v206;
                }
              }
            }
            goto LABEL_378;
          }
          unint64_t v154 = v153 >> 1;
          uint64_t v155 = v41 + 8 * (v153 >> 1);
          uint64_t v449 = v108;
          unint64_t v156 = (unint64_t)(v108 - 2);
          int v157 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_7 &,std::__wrap_iter<std::pair<float,int> *>>(v41, v155, (_DWORD *)v108 - 2);
          float v158 = *(float *)v41;
          float v159 = *(float *)v155;
          if (*(float *)v41 > *(float *)v155
            || *(float *)v41 == *(float *)v155 && *(_DWORD *)(v41 + 4) < *(_DWORD *)(v41 + 8 * v154 + 4))
          {
            unint64_t v160 = v156;
            goto LABEL_269;
          }
          int v108 = v449;
          unint64_t v160 = (unint64_t)(v449 - 4);
          if ((float *)v41 != v449 - 4)
          {
            while (*(float *)v160 <= v159
                 && (*(float *)v160 != v159 || *(_DWORD *)(v160 + 4) >= *(_DWORD *)(v41 + 8 * v154 + 4)))
            {
              v160 -= 8;
              if (v160 == v41) {
                goto LABEL_294;
              }
            }
            *(_DWORD *)uint64_t v41 = *(_DWORD *)v160;
            *(float *)unint64_t v160 = v158;
            int v182 = *(_DWORD *)(v41 + 4);
            *(_DWORD *)(v41 + 4) = *(_DWORD *)(v160 + 4);
            *(_DWORD *)(v160 + 4) = v182;
            ++v157;
LABEL_269:
            uint64_t v161 = (float *)(v41 + 8);
            uint64_t v9 = v459;
            if (v41 + 8 >= v160)
            {
              uint64_t v162 = 1;
              int v108 = v449;
            }
            else
            {
              uint64_t v162 = 1;
              int v108 = v449;
              while (1)
              {
                float v163 = *(float *)v155;
                for (int m = (float *)(v41 + 4 + 8 * v162); ; m += 2)
                {
                  float v165 = *(m - 1);
                  if (v165 <= v163 && (v165 != v163 || *(_DWORD *)m >= *(_DWORD *)(v155 + 4))) {
                    break;
                  }
                  ++v162;
                }
                uint64_t v166 = (float *)(v160 - 8);
                float v167 = *(float *)(v160 - 8);
                if (v167 <= v163)
                {
                  do
                  {
                    if (v167 == v163 && *(_DWORD *)(v160 - 4) < *(_DWORD *)(v155 + 4)) {
                      break;
                    }
                    float v167 = *(float *)(v160 - 16);
                    v160 -= 8;
                  }
                  while (v167 <= v163);
                  uint64_t v166 = (float *)(v160 - 8);
                }
                uint64_t v168 = (float *)(v41 + 8 * v162);
                if (v168 >= v166) {
                  break;
                }
                *uint64_t v168 = v167;
                *uint64_t v166 = v165;
                uint64_t v169 = v41 + 8 * v162;
                int v170 = *(_DWORD *)(v169 + 4);
                *(_DWORD *)(v169 + 4) = *(_DWORD *)(v160 - 4);
                *(_DWORD *)(v160 - 4) = v170;
                ++v157;
                if ((float *)v155 == v168) {
                  uint64_t v155 = (uint64_t)v166;
                }
                ++v162;
                unint64_t v160 = (unint64_t)v166;
              }
            }
            uint64_t v171 = (float *)(v41 + 8 * v162);
            if (v171 != (float *)v155)
            {
              float v172 = *v171;
              if (*(float *)v155 > *v171)
              {
                int v173 = *(_DWORD *)(v41 + 8 * v162 + 4);
                int v174 = *(_DWORD *)(v155 + 4);
                goto LABEL_298;
              }
              if (*(float *)v155 == *v171)
              {
                int v174 = *(_DWORD *)(v155 + 4);
                int v173 = *(_DWORD *)(v41 + 8 * v162 + 4);
                if (v174 < v173)
                {
LABEL_298:
                  float *v171 = *(float *)v155;
                  *(float *)uint64_t v155 = v172;
                  *(_DWORD *)(v41 + 8 * v162 + 4) = v174;
                  *(_DWORD *)(v155 + 4) = v173;
                  ++v157;
                }
              }
            }
            unint64_t v28 = v451;
            if (v171 == v152) {
              goto LABEL_378;
            }
            if (!v157)
            {
              if (v171 <= v152)
              {
                float v179 = v171 + 2;
                if (v171 + 2 == v108) {
                  goto LABEL_378;
                }
                float v180 = *v171;
                while (1)
                {
                  float v181 = v180;
                  float v180 = *v179;
                  if (*v179 > v181 || *v179 == v181 && *((_DWORD *)v179 + 1) < *((_DWORD *)v179 - 1)) {
                    break;
                  }
                  v179 += 2;
                  if (v179 == v108) {
                    goto LABEL_378;
                  }
                }
              }
              else
              {
                if (v162 == 1) {
                  goto LABEL_378;
                }
                float v176 = *(float *)v41;
                uint64_t v177 = 8 * v162 - 8;
                while (1)
                {
                  float v178 = v176;
                  float v176 = *v161;
                  if (*v161 > v178 || *v161 == v178 && *((_DWORD *)v161 + 1) < *((_DWORD *)v161 - 1)) {
                    break;
                  }
                  v161 += 2;
                  v177 -= 8;
                  if (!v177) {
                    goto LABEL_378;
                  }
                }
              }
            }
            float v175 = v171 + 2;
            if (v171 > v152)
            {
              int v108 = v171;
              float v175 = (float *)v41;
            }
            goto LABEL_342;
          }
LABEL_294:
          float v175 = (float *)(v41 + 8);
          if (v158 <= *(float *)v156) {
            break;
          }
          uint64_t v9 = v459;
          unint64_t v28 = v451;
LABEL_329:
          if (v175 == (float *)v156) {
            goto LABEL_378;
          }
          while (1)
          {
            float v185 = *(float *)v41;
            for (float n = *v175; v185 <= n && (v185 != n || *(_DWORD *)(v41 + 4) >= *((_DWORD *)v175 + 1)); float n = v187)
            {
              float v187 = v175[2];
              v175 += 2;
            }
            do
            {
              do
              {
                float v188 = *(float *)(v156 - 8);
                v156 -= 8;
                float v189 = v188;
                BOOL v190 = v185 == v188;
              }
              while (v185 > v188);
            }
            while (v190 && *(_DWORD *)(v41 + 4) < *(_DWORD *)(v156 + 4));
            if ((unint64_t)v175 >= v156) {
              break;
            }
            *float v175 = v189;
            *(float *)unint64_t v156 = n;
            int v191 = *((_DWORD *)v175 + 1);
            v175[1] = *(float *)(v156 + 4);
            *(_DWORD *)(v156 + 4) = v191;
            v175 += 2;
          }
          if (v175 > v152) {
            goto LABEL_378;
          }
LABEL_342:
          uint64_t v41 = (uint64_t)v175;
          if (v108 == v152) {
            goto LABEL_378;
          }
        }
        uint64_t v9 = v459;
        unint64_t v28 = v451;
        if (v158 == *(float *)v156 && *(_DWORD *)(v41 + 4) < *((_DWORD *)v449 - 1)) {
          goto LABEL_329;
        }
        while (v175 != (float *)v156)
        {
          float v183 = *v175;
          if (v158 > *v175)
          {
            int v184 = *((_DWORD *)v175 + 1);
LABEL_328:
            *float v175 = *(float *)v156;
            *(v449 - 2) = v183;
            v175[1] = *(v449 - 1);
            *((_DWORD *)v449 - 1) = v184;
            v175 += 2;
            goto LABEL_329;
          }
          if (v158 == *v175)
          {
            int v184 = *((_DWORD *)v175 + 1);
            if (*(_DWORD *)(v41 + 4) < v184) {
              goto LABEL_328;
            }
          }
          v175 += 2;
        }
LABEL_378:
        a1 = v453;
        if (v32)
        {
          uint64_t v207 = *(void *)(v482 + 24);
          int v208 = *(unsigned __int8 *)(v453 + 294);
          uint64_t v209 = (int *)(*(void *)&v487[0] + 4);
          uint64_t v210 = v461;
          uint64_t v211 = v445;
          do
          {
            *(_DWORD *)(v207 + v210) = *(v209 - 1);
            if (v208) {
              *(float *)(*(void *)(v9 + 24) + v210) = (float)*v209;
            }
            v209 += 2;
            v210 += v35;
            --v211;
          }
          while (v211);
        }
LABEL_383:
        ++v36;
        v37 += 4;
        v461 += 4;
      }
      while (v36 != v28);
LABEL_384:
      ++v438;
      v441 += v427;
      v443 += v425;
    }
    while (v438 != v429);
  }
LABEL_636:
  if (*(void *)&v487[0])
  {
    *((void *)&v487[0] + 1) = *(void *)&v487[0];
    operator delete(*(void **)&v487[0]);
  }
  if (v415) {
    nitro::nitro_function::nitro_function(v415);
  }
  if (*((void *)&v482 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v482 + 1));
  }
  if (v484) {
    nitro::nitro_function::nitro_function(v484);
  }
}

void sub_192B5DC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a54) {
    nitro::nitro_function::nitro_function(a54);
  }
  float v56 = *(std::__shared_weak_count **)(v54 - 248);
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) | 1;
      uint64_t v7 = (float *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2 && *v7 > v7[2])
      {
        v7 += 2;
        uint64_t v6 = v8;
      }
      float v9 = *a3;
      float v10 = *v7;
      float v11 = *a3;
      if (*v7 <= *a3)
      {
        int v12 = *((_DWORD *)a3 + 1);
        do
        {
          uint64_t v13 = a3;
          a3 = v7;
          *uint64_t v13 = v10;
          v13[1] = v7[1];
          if (v4 < v6) {
            break;
          }
          uint64_t v14 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (float *)(result + 8 * v6);
          uint64_t v15 = v14 + 2;
          if (v15 < a2 && *v7 > v7[2])
          {
            v7 += 2;
            uint64_t v6 = v15;
          }
          float v10 = *v7;
        }
        while (*v7 <= v11);
        *a3 = v9;
        *((_DWORD *)a3 + 1) = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a1;
  float v5 = *(float *)a3;
  if (*(float *)a2 > *(float *)a1)
  {
    if (v5 > v3)
    {
      *(float *)a1 = v5;
      *(float *)a3 = v4;
      int v6 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v6;
      return 1;
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    int v10 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v10;
    if (*(float *)a3 <= v4) {
      return 1;
    }
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v10;
    return 2;
  }
  if (v5 > v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    int v7 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v7;
    float v8 = *(float *)a1;
    if (*(float *)a2 <= *(float *)a1) {
      return 1;
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(float *)a2 = v8;
    int v9 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_4 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) | 1;
      int v7 = (float *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2)
      {
        float v9 = COERCE_FLOAT(*(void *)v7);
        float v10 = COERCE_FLOAT(*((void *)v7 + 1));
        if (v9 < v10
          || (v9 == v10 ? (BOOL v11 = (int)HIDWORD(*(void *)v7) < (int)HIDWORD(*((void *)v7 + 1))) : (BOOL v11 = 0), v11))
        {
          v7 += 2;
          uint64_t v6 = v8;
        }
      }
      float v12 = *a3;
      float v13 = COERCE_FLOAT(*(void *)v7);
      float v14 = *a3;
      if (v13 >= *a3)
      {
        int v15 = *((_DWORD *)a3 + 1);
        if (v13 != *a3 || (int)HIDWORD(*(void *)v7) >= v15)
        {
          do
          {
            int v17 = a3;
            a3 = v7;
            *int v17 = v13;
            v17[1] = v7[1];
            if (v4 < v6) {
              break;
            }
            uint64_t v18 = 2 * v6;
            uint64_t v6 = (2 * v6) | 1;
            int v7 = (float *)(result + 8 * v6);
            uint64_t v19 = v18 + 2;
            if (v19 < a2)
            {
              float v20 = COERCE_FLOAT(*(void *)v7);
              float v21 = COERCE_FLOAT(*((void *)v7 + 1));
              if (v20 < v21
                || (v20 == v21 ? (BOOL v22 = (int)HIDWORD(*(void *)v7) < (int)HIDWORD(*((void *)v7 + 1))) : (BOOL v22 = 0), v22))
              {
                v7 += 2;
                uint64_t v6 = v19;
              }
            }
            float v13 = COERCE_FLOAT(*(void *)v7);
            if (v13 < v14) {
              break;
            }
          }
          while (v13 != v14 || v15 <= (int)HIDWORD(*(void *)v7));
          *a3 = v12;
          *((_DWORD *)a3 + 1) = v15;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_5 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1 || *(float *)a2 == *(float *)a1 && *(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
  {
    if (*(float *)a3 < v3)
    {
      int v5 = a3[1];
LABEL_11:
      *(_DWORD *)a1 = *a3;
      *(float *)a3 = v4;
      int v8 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v5;
      a3[1] = v8;
      return 1;
    }
    if (*(float *)a3 == v3)
    {
      int v5 = a3[1];
      int v13 = *(_DWORD *)(a2 + 4);
      if (v5 < v13) {
        goto LABEL_11;
      }
    }
    else
    {
      int v13 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    int v14 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v13;
    *(_DWORD *)(a2 + 4) = v14;
    if (*(float *)a3 >= v4)
    {
      if (*(float *)a3 != v4) {
        return 1;
      }
      int v15 = a3[1];
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      int v15 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v15;
    uint64_t result = 2;
    a3[1] = v14;
  }
  else
  {
    if (*(float *)a3 >= v3)
    {
      if (*(float *)a3 != v3) {
        return 0;
      }
      int v7 = a3[1];
      int v6 = *(_DWORD *)(a2 + 4);
      if (v7 >= v6) {
        return 0;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(a2 + 4);
      int v7 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v7;
    a3[1] = v6;
    float v10 = *(float *)a1;
    if (*(float *)a2 >= *(float *)a1)
    {
      if (*(float *)a2 != *(float *)a1) {
        return 1;
      }
      int v12 = *(_DWORD *)(a2 + 4);
      int v11 = *(_DWORD *)(a1 + 4);
      if (v12 >= v11) {
        return 1;
      }
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 4);
      int v12 = *(_DWORD *)(a2 + 4);
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(float *)a2 = v10;
    *(_DWORD *)(a1 + 4) = v12;
    uint64_t result = 2;
    *(_DWORD *)(a2 + 4) = v11;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_6 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) | 1;
      int v7 = (float *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2)
      {
        float v9 = COERCE_FLOAT(*(void *)v7);
        float v10 = COERCE_FLOAT(*((void *)v7 + 1));
        if (v9 > v10
          || (v9 == v10 ? (BOOL v11 = (int)HIDWORD(*(void *)v7) < (int)HIDWORD(*((void *)v7 + 1))) : (BOOL v11 = 0), v11))
        {
          v7 += 2;
          uint64_t v6 = v8;
        }
      }
      float v12 = *a3;
      float v13 = COERCE_FLOAT(*(void *)v7);
      float v14 = *a3;
      if (v13 <= *a3)
      {
        int v15 = *((_DWORD *)a3 + 1);
        if (v13 != *a3 || (int)HIDWORD(*(void *)v7) >= v15)
        {
          do
          {
            int v17 = a3;
            a3 = v7;
            *int v17 = v13;
            v17[1] = v7[1];
            if (v4 < v6) {
              break;
            }
            uint64_t v18 = 2 * v6;
            uint64_t v6 = (2 * v6) | 1;
            int v7 = (float *)(result + 8 * v6);
            uint64_t v19 = v18 + 2;
            if (v19 < a2)
            {
              float v20 = COERCE_FLOAT(*(void *)v7);
              float v21 = COERCE_FLOAT(*((void *)v7 + 1));
              if (v20 > v21
                || (v20 == v21 ? (BOOL v22 = (int)HIDWORD(*(void *)v7) < (int)HIDWORD(*((void *)v7 + 1))) : (BOOL v22 = 0), v22))
              {
                v7 += 2;
                uint64_t v6 = v19;
              }
            }
            float v13 = COERCE_FLOAT(*(void *)v7);
            if (v13 > v14) {
              break;
            }
          }
          while (v13 != v14 || v15 <= (int)HIDWORD(*(void *)v7));
          *a3 = v12;
          *((_DWORD *)a3 + 1) = v15;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::topk_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_7 &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a1;
  if (*(float *)a2 > *(float *)a1 || *(float *)a2 == *(float *)a1 && *(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
  {
    if (*(float *)a3 > v3)
    {
      int v5 = a3[1];
LABEL_11:
      *(_DWORD *)a1 = *a3;
      *(float *)a3 = v4;
      int v8 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v5;
      a3[1] = v8;
      return 1;
    }
    if (*(float *)a3 == v3)
    {
      int v5 = a3[1];
      int v13 = *(_DWORD *)(a2 + 4);
      if (v5 < v13) {
        goto LABEL_11;
      }
    }
    else
    {
      int v13 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    int v14 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v13;
    *(_DWORD *)(a2 + 4) = v14;
    if (*(float *)a3 <= v4)
    {
      if (*(float *)a3 != v4) {
        return 1;
      }
      int v15 = a3[1];
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      int v15 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v15;
    uint64_t result = 2;
    a3[1] = v14;
  }
  else
  {
    if (*(float *)a3 <= v3)
    {
      if (*(float *)a3 != v3) {
        return 0;
      }
      int v7 = a3[1];
      int v6 = *(_DWORD *)(a2 + 4);
      if (v7 >= v6) {
        return 0;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(a2 + 4);
      int v7 = a3[1];
    }
    *(_DWORD *)a2 = *a3;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v7;
    a3[1] = v6;
    float v10 = *(float *)a1;
    if (*(float *)a2 <= *(float *)a1)
    {
      if (*(float *)a2 != *(float *)a1) {
        return 1;
      }
      int v12 = *(_DWORD *)(a2 + 4);
      int v11 = *(_DWORD *)(a1 + 4);
      if (v12 >= v11) {
        return 1;
      }
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 4);
      int v12 = *(_DWORD *)(a2 + 4);
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(float *)a2 = v10;
    *(_DWORD *)(a1 + 4) = v12;
    uint64_t result = 2;
    *(_DWORD *)(a2 + 4) = v11;
  }
  return result;
}

void Espresso::topk_kernel_cpu::~topk_kernel_cpu(Espresso::topk_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::gather_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  if (a1[70] == -2 && a1[71] == -2 && a1[72] == -2 && a1[73] == -2 && a1[74] == -2)
  {
    int v7 = *a4;
  }
  else
  {
    int v7 = *a4;
    if ((char *)a4[1] - (char *)*a4 != 32) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid number of bottom blobs");
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v66, v7);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, *a4 + 2);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v62, *a3);
  int v8 = (_DWORD *)**a4;
  int v9 = a1[70];
  if (v9 == -2) {
    float v10 = **(float **)(v64 + 24);
  }
  else {
    float v10 = (float)v9;
  }
  int v11 = v8[2];
  int v12 = a1[71];
  if (v12 == -2) {
    float v13 = *(float *)(*(void *)(v64 + 24) + 4);
  }
  else {
    float v13 = (float)v12;
  }
  int v14 = v8[3] * v11;
  int v15 = a1[72];
  if (v15 == -2) {
    float v16 = *(float *)(*(void *)(v64 + 24) + 8);
  }
  else {
    float v16 = (float)v15;
  }
  int v17 = v14 * v8[4];
  int v18 = v8[5];
  int v19 = a1[73];
  if (v19 == -2)
  {
    uint64_t v20 = v64;
    float v21 = *(float *)(*(void *)(v64 + 24) + 12);
  }
  else
  {
    float v21 = (float)v19;
    uint64_t v20 = v64;
  }
  uint64_t v22 = 0;
  int v58 = v17 * v18;
  int v23 = (int)v10;
  int v24 = (int)v13;
  int v25 = (int)v16;
  unint64_t v26 = *(int *)(v20 + 8);
  do
  {
    v26 *= *(int *)(v20 + 12 + v22);
    v22 += 4;
  }
  while (v22 != 12);
  float v27 = 0.0;
  if (v26 >= 5)
  {
    int v28 = a1[74];
    if (v28 == -2) {
      float v27 = *(float *)(*(void *)(v20 + 24) + 16);
    }
    else {
      float v27 = (float)v28;
    }
  }
  int v29 = (int)v21;
  int v57 = (int)v27;
  if (v9 == -1 || v12 == -1 || v15 == -1 || v19 == -1 || a1[74] == -1)
  {
    uint64_t v30 = (unsigned int *)**a3;
    int v59 = v30[6];
    if (v59 >= 1)
    {
      int v61 = 0;
      int v60 = 0;
      uint64_t v31 = v30[2];
      int v32 = v30[3];
      int v33 = v30[4];
      int v34 = v30[5];
      uint64_t v35 = v66;
      uint64_t v36 = v62;
      int v37 = v32 * v31;
      do
      {
        if (v34 >= 1)
        {
          int v38 = 0;
          int v39 = (int)v27;
          if (v57 < 0) {
            int v39 = v60;
          }
          int v40 = v39 * v58;
          int v41 = v61;
          do
          {
            if (v33 >= 1)
            {
              int v42 = 0;
              if (v29 >= 0) {
                int v43 = (int)v21;
              }
              else {
                int v43 = v38;
              }
              int v44 = v40 + v43 * v17;
              int v45 = v41;
              do
              {
                if (v32 >= 1)
                {
                  int v46 = 0;
                  if (v25 >= 0) {
                    int v47 = (int)v16;
                  }
                  else {
                    int v47 = v42;
                  }
                  int v48 = v44 + v47 * v14;
                  int v49 = v45;
                  do
                  {
                    if ((int)v31 >= 1)
                    {
                      uint64_t v50 = 0;
                      if (v24 >= 0) {
                        int v51 = (int)v13;
                      }
                      else {
                        int v51 = v46;
                      }
                      uint64_t v52 = *(void *)(v35 + 24);
                      int v53 = v48 + v51 * v11;
                      uint64_t v54 = *(void *)(v36 + 24);
                      do
                      {
                        if (v23 >= 0) {
                          int v55 = v23;
                        }
                        else {
                          int v55 = v50;
                        }
                        *(_DWORD *)(v54 + 4 * (v49 + (int)v50++)) = *(_DWORD *)(v52 + 4 * (v53 + v55));
                      }
                      while (v31 != v50);
                    }
                    ++v46;
                    v49 += v31;
                  }
                  while (v46 != v32);
                }
                ++v42;
                v45 += v37;
              }
              while (v42 != v33);
            }
            ++v38;
            v41 += v37 * v33;
          }
          while (v38 != v34);
        }
        v61 += v37 * v34 * v33;
        ++v60;
      }
      while (v60 != v59);
    }
  }
  else
  {
    **(_DWORD **)(v62 + 24) = *(_DWORD *)(*(void *)(v66 + 24)
                                        + 4 * (v23 + v11 * v24 + v14 * v25 + v17 * v29 + v58 * v57));
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  float v56 = v67;
  if (v67)
  {
    nitro::nitro_function::nitro_function(v56);
  }
}

void sub_192B5E888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::gather_kernel_cpu::~gather_kernel_cpu(Espresso::gather_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::dynamic_quantize_kernel_cpu::__launch_simple_mode(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v6 = a3 + 1;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v34, (uint64_t *)(a3[1] - 16));
  **(_DWORD **)(v34 + 24) = 1065353216;
  uint64_t v7 = a4[1];
  if (((v7 - *a4) >> 4) + 1 != (uint64_t)(*v6 - *a3) >> 4) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic_quantize_kernel_cpu: top blob count should be equal to bottom blob count");
  }
  if (v7 != *a4)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      Espresso::get_cpu_blob_8(*a3 + v8, &v32);
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v30, (uint64_t *)(*a4 + v8));
      Espresso::abstract_blob_container::shape((char *)buf, *(void *)(*a4 + v8));
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v24, (const Espresso::layer_shape *)buf, 0);
      if (__p)
      {
        int v41 = __p;
        operator delete(__p);
      }
      if (v29 > 3)
      {
        if (v29 == 5)
        {
          uint64_t v10 = v25 * (uint64_t)v24;
          uint64_t v11 = v27 * (uint64_t)v28 * v26;
        }
        else if (v29 == 4)
        {
          uint64_t v10 = v24;
          uint64_t v11 = v26 * (uint64_t)v27 * v25;
        }
        else
        {
          uint64_t v10 = 0;
LABEL_15:
          uint64_t v11 = 0;
        }
      }
      else
      {
        switch(v29)
        {
          case 1u:
            uint64_t v10 = 1;
            if (!v29) {
              goto LABEL_15;
            }
            break;
          case 2u:
            uint64_t v10 = v24;
            if (!v29) {
              goto LABEL_15;
            }
            break;
          case 3u:
            uint64_t v10 = v25 * (uint64_t)v24;
            if (!v29) {
              goto LABEL_15;
            }
            break;
          case 4u:
            uint64_t v10 = v25 * (uint64_t)v24 * v26;
            if (!v29) {
              goto LABEL_15;
            }
            break;
          case 5u:
            uint64_t v10 = v25 * (uint64_t)v24 * v26 * v27;
            if (!v29) {
              goto LABEL_15;
            }
            break;
          default:
            uint64_t v10 = 0;
            if (!v29) {
              goto LABEL_15;
            }
            break;
        }
        uint64_t v11 = *(&v24 + (int)v29 - 1);
      }
      float __C = 0.0;
      uint64_t v12 = v30;
      vDSP_Length v13 = v11 * v10;
      vDSP_maxmgv(*(const float **)(v30 + 24), 1, &__C, v11 * v10);
      float v14 = __C;
      if (fabsf(__C) <= 1.0e-10)
      {
        float __C = 1.0;
        float v14 = 1.0;
      }
      float v15 = 127.0 / v14;
      if (v15 >= (float)(2147500000.0 / (float)((float)(unint64_t)v11 * 127.0))) {
        float v15 = 2147500000.0 / (float)((float)(unint64_t)v11 * 127.0);
      }
      float __B = v15;
      float v21 = 1.0 / v15;
      vDSP_vsmul(*(const float **)(v12 + 24), 1, &__B, *(float **)(v12 + 24), 1, v13);
      vDSP_vfixr8(*(const float **)(v12 + 24), 1, *(char **)(v32 + 24), 1, v13);
      vDSP_vsmul(*(const float **)(v12 + 24), 1, &v21, *(float **)(v12 + 24), 1, v13);
      **(float **)(v34 + 24) = __B * **(float **)(v34 + 24);
      {
        if (v16)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
          }
          Espresso::dynamic_quantize_kernel_cpu::__launch_simple_mode(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1E9306FC1;
        }
      }
      if (Espresso::dynamic_quantize_kernel_cpu::__launch_simple_mode(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
      {
        int v18 = Espresso::espresso_os_log_subsystem(v16, v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v19 = a1 + 176;
          if (*(char *)(a1 + 199) < 0) {
            uint64_t v19 = *(void *)(a1 + 176);
          }
          *(_DWORD *)buf = 136315394;
          uint64_t v37 = v19;
          __int16 v38 = 2048;
          double v39 = __B;
          _os_log_debug_impl(&dword_1920CB000, v18, OS_LOG_TYPE_DEBUG, "dynamic_quantize_kernel_cpu: %s activation scale: %f", buf, 0x16u);
        }
      }
      if (v31) {
        nitro::nitro_function::nitro_function(v31);
      }
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      ++v9;
      v8 += 16;
    }
    while (v9 < (uint64_t)(a4[1] - *a4) >> 4);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
}

void sub_192B5ED4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p)
{
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dynamic_quantize_kernel_cpu::blob_options(int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  if (a2 || !a1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    int v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    void *v5 = &unk_1EE388F48;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v5[3] = &unk_1EE3661F8;
    *((_DWORD *)v5 + 12) = 1065353216;
    v5[7] = 0x1FFFFFFFFLL;
    v5[12] = 0;
    v5[13] = 0;
    v5[8] = 0;
    v5[9] = 0;
    *((unsigned char *)v5 + 88) = 0;
    v5[10] = 0;
    *a3 = v5 + 3;
    a3[1] = v5;
    *((unsigned char *)v5 + 32) = 1;
    *((_DWORD *)v5 + 9) = 2;
  }
}

void Espresso::dynamic_quantize_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::abstract_blob_container::shape((char *)&v36, **a3);
  char v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, v37)));
  if (v38 == -1) {
    BOOL v9 = v37.i32[3] != 1;
  }
  else {
    BOOL v9 = v38 == 5;
  }
  if (v37.i32[3]) {
    BOOL v9 = 0;
  }
  if ((v8 & 1) == 0 && v36 >= 1 && !v9)
  {
    if (a1[71])
    {
      (*(void (**)(_DWORD *, uint64_t, uint64_t **, uint64_t **))(*(void *)a1 + 328))(a1, a2, a3, a4);
      goto LABEL_44;
    }
    Espresso::get_cpu_blob_8((uint64_t)*a3, &v34);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v32, *a4);
    Espresso::abstract_blob_container::shape((char *)&v22, **a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v26, (const Espresso::layer_shape *)&v22, 0);
    if (__p)
    {
      int v25 = __p;
      operator delete(__p);
    }
    if (v31 <= 3)
    {
      switch(v31)
      {
        case 1u:
          uint64_t v10 = 1;
          break;
        case 2u:
          uint64_t v10 = v26;
          break;
        case 3u:
          uint64_t v10 = v27 * (uint64_t)v26;
          break;
        case 4u:
          uint64_t v10 = v27 * (uint64_t)v26 * v28;
          break;
        case 5u:
          uint64_t v10 = v27 * (uint64_t)v26 * v28 * v29;
          break;
        default:
          uint64_t v10 = 0;
          break;
      }
      if (v31)
      {
        uint64_t v11 = *(&v26 + (int)v31 - 1);
        goto LABEL_29;
      }
LABEL_28:
      uint64_t v11 = 0;
      goto LABEL_29;
    }
    if (v31 == 5)
    {
      uint64_t v10 = v27 * (uint64_t)v26;
      uint64_t v11 = v29 * (uint64_t)v30 * v28;
    }
    else
    {
      if (v31 != 4)
      {
        uint64_t v10 = 0;
        goto LABEL_28;
      }
      uint64_t v10 = v26;
      uint64_t v11 = v28 * (uint64_t)v29 * v27;
    }
LABEL_29:
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v22, *a3 + 2);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v20, *a3 + 6);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v18, *a3 + 4);
    uint64_t v12 = v32;
    if (v10)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = v20;
      do
      {
        vDSP_sve((const float *)(*(void *)(v12 + 24) + v13), 1, (float *)(*(void *)(v15 + 24) + v14), v11);
        v14 += 4;
        v13 += 4 * v11;
        --v10;
      }
      while (v10);
    }
    uint64_t v16 = 0;
    int v17 = *(_DWORD *)(v12 + 8);
    do
    {
      v17 *= *(_DWORD *)(v12 + 12 + v16);
      v16 += 4;
    }
    while (v16 != 12);
    Espresso::range_quantizer<signed char>::quantize_chunks(*(void *)(v12 + 24), v17, v11, *(void *)(v18 + 24), *(void *)(v22 + 24), *(void *)(v34 + 24));
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
  }
LABEL_44:
  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }
}

void sub_192B5F1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  int v30 = *(void **)(v28 - 88);
  if (v30)
  {
    *(void *)(v28 - 80) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dynamic_quantize_kernel_cpu::~dynamic_quantize_kernel_cpu(Espresso::dynamic_quantize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::dynamic_dequantize_kernel_cpu::__launch_legacy_mode(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, (uint64_t *)(*(void *)a6 + 16));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v25, (uint64_t *)(*(void *)a6 + 32));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v23, (uint64_t *)(*(void *)a6 + 48));
  if (*a4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v23;
    uint64_t v18 = v27;
    uint64_t v19 = v25;
    uint64_t v12 = 4 * a4[1];
    do
    {
      __E = (float *)(a3 + v8);
      uint64_t v14 = *(const float **)(a1[39] + 16);
      uint64_t v15 = *(const float **)(a1[41] + 16);
      vDSP_vmma((const float *)(*(void *)(v19 + 24) + v9), 0, (const float *)(a5 + v8), 1, (const float *)(*(void *)(v18 + 24) + v9), 0, *(const float **)(a1[43] + 16), 1, (float *)(a3 + v8), 1, *(int *)(a1[43] + 8));
      vDSP_vmma(__E, 1, v14, 1, v15, 1, (const float *)(*(void *)(v11 + 24) + v9), 0, __E, 1, *(int *)(a1[43] + 8));
      uint64_t v16 = a1[45];
      if (v16) {
        vDSP_vadd(__E, 1, *(const float **)(v16 + 16), 1, __E, 1, *(int *)(a1[43] + 8));
      }
      ++v10;
      v9 += 4;
      v8 += v12;
    }
    while (v10 < *a4);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  int v17 = v28;
  if (v28)
  {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_192B5F490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dynamic_dequantize_kernel_cpu::__launch_simple_mode(uint64_t a1, uint64_t a2, float *a3, unint64_t *a4, const float *a5, uint64_t a6)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v17, (uint64_t *)(*(void *)a6 + 16));
  float __B = 1.0 / (float)(*(float *)(a1 + 308) * **(float **)(v17 + 24));
  vDSP_vsmul(a5, 1, &__B, a3, 1, a4[1] * *a4);
  uint64_t v10 = *(void *)(a1 + 312);
  unint64_t v11 = *a4;
  if (*(void *)(a1 + 360))
  {
    if (v10)
    {
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = &a3[a4[1] * v12];
          vDSP_vma(v13, 1, *(const float **)(*(void *)(a1 + 312) + 16), 1, *(const float **)(*(void *)(a1 + 360) + 16), 1, v13, 1, a4[1]);
          ++v12;
        }
        while (v12 < *a4);
      }
    }
    else if (v11)
    {
      unint64_t v15 = 0;
      do
      {
        vDSP_vadd(&a3[a4[1] * v15], 1, *(const float **)(*(void *)(a1 + 360) + 16), 1, &a3[a4[1] * v15], 1, a4[1]);
        ++v15;
      }
      while (v15 < *a4);
    }
  }
  else if (v10 && v11)
  {
    unint64_t v14 = 0;
    do
    {
      vDSP_vmul(&a3[a4[1] * v14], 1, *(const float **)(*(void *)(a1 + 312) + 16), 1, &a3[a4[1] * v14], 1, a4[1]);
      ++v14;
    }
    while (v14 < *a4);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
}

void sub_192B5F658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *Espresso::dynamic_dequantize_kernel_cpu::blob_options@<X0>(char a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  uint64_t result = getenv("ESPRESSO_USE_I32_OUTPUT");
  if (a2 || (a1 & 1) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v8 = result;
    uint64_t result = operator new(0x70uLL);
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    *(void *)uint64_t result = &unk_1EE388F48;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((void *)result + 3) = &unk_1EE3661F8;
    *((_DWORD *)result + 12) = 1065353216;
    *((void *)result + 7) = 0x1FFFFFFFFLL;
    *((void *)result + 12) = 0;
    *((void *)result + 13) = 0;
    *((void *)result + 8) = 0;
    *((void *)result + 9) = 0;
    result[88] = 0;
    *((void *)result + 10) = 0;
    *a3 = result + 24;
    a3[1] = result;
    result[32] = 1;
    if (v8)
    {
      if (*v8 == 49) {
        *((_DWORD *)result + 9) = 3;
      }
    }
  }
  return result;
}

void Espresso::dynamic_dequantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Espresso::abstract_blob_container::shape((char *)&v61, **(void **)a3);
  char v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, v62)));
  if (v63 == -1) {
    BOOL v9 = v62.i32[3] != 1;
  }
  else {
    BOOL v9 = v63 == 5;
  }
  if (v62.i32[3]) {
    BOOL v9 = 0;
  }
  if ((v8 & 1) == 0 && v61 >= 1 && !v9)
  {
    if (*(void *)(a3 + 8) == *(void *)a3)
    {
      uint64_t v59 = 0;
      uint64_t v60 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v59, *(uint64_t **)a3);
    }
    if (*(void *)(a4 + 8) == *(void *)a4)
    {
      uint64_t v57 = 0;
      int v58 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v57, *(uint64_t **)a4);
      if (*(void *)(a4 + 8) != *(void *)a4)
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v55, *(uint64_t **)a4);
        goto LABEL_17;
      }
    }
    uint64_t v55 = 0;
    float v56 = 0;
LABEL_17:
    uint64_t v10 = v59;
    if (v59)
    {
      if (v57)
      {
        uint64_t v11 = 0;
        vDSP_Length v12 = *(int *)(v59 + 8);
        do
        {
          v12 *= *(int *)(v59 + 12 + v11);
          v11 += 4;
        }
        while (v11 != 12);
        vDSP_vflt32(*(const int **)(v57 + 24), 1, *(float **)(v59 + 24), 1, v12);
LABEL_23:
        Espresso::abstract_blob_container::shape((char *)v46, **(void **)a3);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v49, (const Espresso::layer_shape *)v46, 0);
        if (__p)
        {
          int v48 = __p;
          operator delete(__p);
        }
        if (v54 > 3)
        {
          if (v54 == 5)
          {
            uint64_t v13 = v50 * (uint64_t)v49;
            uint64_t v14 = v52 * (uint64_t)v53 * v51;
          }
          else if (v54 == 4)
          {
            uint64_t v13 = v49;
            uint64_t v14 = v51 * (uint64_t)v52 * v50;
          }
          else
          {
            uint64_t v13 = 0;
LABEL_34:
            uint64_t v14 = 0;
          }
        }
        else
        {
          switch(v54)
          {
            case 1u:
              uint64_t v13 = 1;
              if (!v54) {
                goto LABEL_34;
              }
              break;
            case 2u:
              uint64_t v13 = v49;
              if (!v54) {
                goto LABEL_34;
              }
              break;
            case 3u:
              uint64_t v13 = v50 * (uint64_t)v49;
              if (!v54) {
                goto LABEL_34;
              }
              break;
            case 4u:
              uint64_t v13 = v50 * (uint64_t)v49 * v51;
              if (!v54) {
                goto LABEL_34;
              }
              break;
            case 5u:
              uint64_t v13 = v50 * (uint64_t)v49 * v51 * v52;
              if (!v54) {
                goto LABEL_34;
              }
              break;
            default:
              uint64_t v13 = 0;
              if (!v54) {
                goto LABEL_34;
              }
              break;
          }
          uint64_t v14 = *(&v49 + (int)v54 - 1);
        }
        uint64_t v44 = v13;
        uint64_t v45 = v14;
        if (*(_DWORD *)(a1 + 304))
        {
          if (v55)
          {
            uint64_t v15 = *(void *)(v55 + 24);
            uint64_t v16 = (void (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 328);
LABEL_53:
            (*v16)(a1, a2, *(void *)(v10 + 24), &v44, v15, a4);
            memset(&v46[1], 0, 24);
            int v17 = *(_DWORD *)(a1 + 300);
            uint64_t v30 = 0x100000001;
            int v31 = 1;
            uint64_t v18 = *(void *)(a1 + 292);
            uint64_t v32 = *(void *)(a1 + 284);
            uint64_t v33 = v18;
            int v34 = v17;
            uint64_t v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            int v38 = -1;
            __asm { FMOV            V1.2S, #1.0 }
            uint64_t v39 = _D1;
            uint64_t v40 = 0;
            long long v42 = 0u;
            long long v41 = v46[0];
            uint64_t v43 = 0;
            int v24 = (std::__shared_weak_count *)v60;
            v29[0] = v10;
            v29[1] = v60;
            if (v60) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v25 = 0;
            int v26 = *(_DWORD *)(v10 + 8);
            do
            {
              v26 *= *(_DWORD *)(v10 + 12 + v25);
              v25 += 4;
            }
            while (v25 != 12);
            uint64_t v27 = *(std::__shared_weak_count **)(a1 + 368);
            v28[0] = *(void *)(a1 + 360);
            v28[1] = v27;
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)&v30, v29, v26, (uint64_t)v28, v45, v44);
            if (v27) {
              nitro::nitro_function::nitro_function(v27);
            }
            if (v24) {
              nitro::nitro_function::nitro_function(v24);
            }
            if (v56) {
              nitro::nitro_function::nitro_function(v56);
            }
            if (v58) {
              nitro::nitro_function::nitro_function(v58);
            }
            if (v24) {
              nitro::nitro_function::nitro_function(v24);
            }
            goto LABEL_69;
          }
          uint64_t v16 = (void (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 328);
        }
        else
        {
          if (v55)
          {
            uint64_t v15 = *(void *)(v55 + 24);
            uint64_t v16 = (void (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 336);
            goto LABEL_53;
          }
          uint64_t v16 = (void (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 336);
        }
        uint64_t v15 = *(void *)(v10 + 24);
        goto LABEL_53;
      }
      if (v55) {
        goto LABEL_23;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic_dequantize_kernel_cpu: Atleast one bottom and one top required");
  }
LABEL_69:
  if (v64)
  {
    uint64_t v65 = v64;
    operator delete(v64);
  }
}

void sub_192B5FC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 136);
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  long long v41 = *(std::__shared_weak_count **)(v38 - 120);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  long long v42 = *(void **)(v38 - 72);
  if (v42)
  {
    *(void *)(v38 - 64) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dynamic_dequantize_kernel_cpu::~dynamic_dequantize_kernel_cpu(Espresso::dynamic_dequantize_kernel_cpu *this)
{
  Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::quantized_gather_kernel_cpu::supports_weight_key()
{
  return 1;
}

void Espresso::quantized_gather_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = *a6;
  if (!*a6)
  {
LABEL_6:
    char v8 = 0;
    goto LABEL_7;
  }
  char v8 = (std::__shared_weak_count *)a6[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  int v9 = *((char *)a3 + 23);
  if (v9 < 0)
  {
    if (a3[1] != 6) {
      goto LABEL_16;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v9 != 6)
  {
    goto LABEL_16;
  }
  if (*(_DWORD *)a3 == 1701666641 && *((_WORD *)a3 + 2) == 24948)
  {
    uint64_t v12 = 308;
    if (!*(_DWORD *)(a1 + 312)) {
      uint64_t v12 = 304;
    }
    int v13 = *(_DWORD *)(a1 + v12);
    v15[0] = v7;
    v15[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v16, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v15, 4 * v13, 1, 1, 1, (a4 & 0x3F) == 0);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 360);
    *(_OWORD *)(a1 + 352) = v16;
    if (v11) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
LABEL_16:
  v14[0] = v7;
  v14[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v16, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v14, ((*(_DWORD *)(a1 + 316) * *(_DWORD *)(a1 + 304) - 1) >> 3) + 1, *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 344);
  *(_OWORD *)(a1 + 336) = v16;
  if (v11) {
LABEL_19:
  }
    nitro::nitro_function::nitro_function(v11);
LABEL_20:
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192B5FE98(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_gather_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v106, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v104, *(uint64_t **)a4);
  if (*(void *)(a4 + 8) - *(void *)a4 < 0x11uLL)
  {
    uint64_t v7 = *(void *)(a1 + 352);
    char v8 = *(std::__shared_weak_count **)(a1 + 360);
    uint64_t v102 = v7;
    __int32 v103 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v102, (uint64_t *)(*(void *)a4 + 16));
    uint64_t v7 = v102;
  }
  int v9 = *(_DWORD **)(v106 + 24);
  uint64_t v10 = *(float **)(v104 + 24);
  uint64_t v11 = *(void *)(v7 + 24);
  Espresso::abstract_blob_container::shape((char *)v97, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v100, (const Espresso::layer_shape *)v97, 0);
  if (v98)
  {
    uint64_t v99 = v98;
    operator delete(v98);
  }
  uint64_t v13 = v101;
  unsigned int v14 = 1;
  if (v101 >= 1)
  {
    uint64_t v15 = (int *)v100;
    do
    {
      int v16 = *v15++;
      v14 *= v16;
      --v13;
    }
    while (v13);
  }
  uint64_t v17 = *(unsigned int *)(a1 + 304);
  uint64_t v85 = *(void *)(*(void *)(a1 + 336) + 16);
  signed int v18 = v14 / v17;
  if (!*(_DWORD *)(a1 + 312))
  {
    if (v18 < 1) {
      goto LABEL_72;
    }
    int v63 = 0;
    while (1)
    {
      uint64_t v64 = 0;
      uint64_t v65 = (unsigned __int8 *)(v85 + (v17 * (int)(*v10 + 0.5)));
      do
      {
        uint64_t v66 = (float *)(v11 + 4 * ((v64 * 4) & 0xFFFFFFFC));
        unsigned int v67 = *v65;
        int v68 = v67 - 64;
        if (v67 > 0x40)
        {
          BOOL v72 = v67 >= 0xC0;
          int v73 = v67 - 192;
          if (v73 == 0 || !v72)
          {
            double v69 = (double)v68;
            float v70 = v66[1];
            float v71 = v66[2];
            double v74 = v70;
            double v75 = 0.0078125;
            goto LABEL_70;
          }
          double v69 = (double)v73;
          float v70 = v66[2];
          float v71 = v66[3];
        }
        else
        {
          double v69 = (double)v67;
          float v70 = *v66;
          float v71 = v66[1];
        }
        double v74 = v70;
        double v75 = 0.015625;
LABEL_70:
        float v76 = v74 + v69 * v75 * (float)(v71 - v70);
        *(float *)&v9[v64] = v76;
        ++v65;
        ++v64;
      }
      while (v17 != v64);
      int v9 = (_DWORD *)((char *)v9 + v64 * 4);
      ++v63;
      ++v10;
      if (v63 == v18) {
        goto LABEL_72;
      }
    }
  }
  v77[1] = v77;
  v97[0] = 1 << *(_DWORD *)(a1 + 316);
  int v19 = MEMORY[0x1F4188790](v12);
  float v21 = (float *)((char *)v77 - v20);
  int v22 = *(_DWORD *)(a1 + 304);
  int v23 = *(_DWORD *)(a1 + 316);
  float v96 = 3.1416;
  float v95 = -1.5708;
  float __A = 1.0;
  float v93 = -1.0;
  if (v19 >= 1)
  {
    int v24 = 0;
    unsigned int v84 = ((v23 * v22 - 1) >> 3) + 1;
    float v82 = 0.012258;
    int v81 = 1048037716;
    float v80 = -1.6;
    float v79 = 0.12021;
    int v78 = 1060940836;
    int v88 = (_DWORD *)a1;
    int v83 = v19;
    do
    {
      int v86 = v24;
      int v87 = (int)(*v10 + 0.5);
      uint64_t v25 = (float *)(v11 + 16 * v87);
      float __C = *v25;
      float v26 = v25[1];
      float v91 = v25[2];
      float v90 = v25[3];
      uint64_t v27 = v97[0];
      float __B = (float)(v26 - __C) / (float)(v97[0] - 1);
      if (v97[0] >= 1)
      {
        uint64_t v28 = 0;
        do
        {
          v21[v28] = (float)(int)v28;
          ++v28;
        }
        while (v27 != v28);
      }
      vDSP_vsmsa(v21, 1, &__B, &__C, v21, 1, (int)v27);
      uint64_t v29 = v88[78];
      switch(v29)
      {
        case 3:
          vDSP_vsmsa(v21, 1, &v93, &__A, v21, 1, v97[0]);
          vDSP_svdiv(&__A, v21, 1, v21, 1, v97[0]);
          vDSP_vsadd(v21, 1, &v93, v21, 1, v97[0]);
          vvlogf(v21, v21, v97);
          break;
        case 2:
          vDSP_vsmsa(v21, 1, &v96, &v95, v21, 1, v97[0]);
          vvtanf(v21, v21, v97);
          break;
        case 1:
          uint64_t v30 = v97[0];
          if (v97[0] >= 1)
          {
            uint64_t v31 = 0;
            do
            {
              float v32 = v21[v31];
              float v33 = -1.0e30;
              if (v32 > 0.0)
              {
                float v33 = 1.0e30;
                if (v32 < 1.0)
                {
                  float v34 = v32 + -0.5;
                  if (fabsf(v32 + -0.5) <= 0.425)
                  {
                    float v43 = 0.18063 - (float)(v34 * v34);
                    float v44 = 0.0;
                    uint64_t v45 = 3;
                    do
                    {
                      float v44 = Espresso::normal_inverse_cdf_4(float)::a[v45] + (float)(v44 * v43);
                      unint64_t v46 = v45-- + 1;
                    }
                    while (v46 > 1);
                    float v47 = 0.0;
                    uint64_t v48 = 3;
                    do
                    {
                      float v47 = Espresso::normal_inverse_cdf_4(float)::b[v48] + (float)(v47 * v43);
                      unint64_t v49 = v48-- + 1;
                    }
                    while (v49 > 1);
                    float v33 = (float)(v34 * v44) / v47;
                  }
                  else
                  {
                    float v35 = 1.0 - v32;
                    if (v34 < 0.0) {
                      float v35 = v21[v31];
                    }
                    if (v35 <= 0.0) {
                      float v35 = 0.000001;
                    }
                    float v36 = sqrtf(-logf(v35));
                    if (v36 <= 5.0)
                    {
                      float v37 = v36 + v80;
                      float v38 = 0.0;
                      uint64_t v50 = 3;
                      do
                      {
                        float v38 = Espresso::normal_inverse_cdf_4(float)::c[v50] + (float)(v38 * v37);
                        unint64_t v51 = v50-- + 1;
                      }
                      while (v51 > 1);
                      float v41 = v79 + (float)(v37 * 0.0);
                      long long v42 = (float *)&v109 + 1;
                    }
                    else
                    {
                      float v37 = v36 + -5.0;
                      float v38 = 0.0;
                      uint64_t v39 = 3;
                      do
                      {
                        float v38 = Espresso::normal_inverse_cdf_4(float)::e[v39] + (float)(v38 * v37);
                        unint64_t v40 = v39-- + 1;
                      }
                      while (v40 > 1);
                      float v41 = v82 + (float)(v37 * 0.0);
                      long long v42 = (float *)&v110;
                    }
                    float v33 = v38 / (float)((float)((float)(*(v42 - 64) + (float)(v41 * v37)) * v37) + 1.0);
                    if (v34 < 0.0) {
                      float v33 = -v33;
                    }
                  }
                }
              }
              v21[v31++] = v33;
            }
            while (v31 != v30);
          }
          break;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Unsupported Quantized Gather type %d", v29);
      }
      vDSP_vsmsa(v21, 1, &v90, &v91, v21, 1, v97[0]);
      int v52 = (unsigned __int8 *)(v85 + v84 * v87);
      uint64_t v53 = v88[79];
      if (v53 == 8)
      {
        int v61 = v88[76];
        if (v61)
        {
          int v56 = v83;
          int v57 = v86;
          do
          {
            int v62 = *v52++;
            *v9++ = LODWORD(v21[v62]);
            --v61;
          }
          while (v61);
          goto LABEL_59;
        }
      }
      else
      {
        if (v53 != 4) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Unsupported Quantized Gather bit length %d", v53);
        }
        int v54 = v88[76];
        if (v54)
        {
          int v55 = 0;
          int v56 = v83;
          int v57 = v86;
          do
          {
            unsigned int v58 = *v52;
            unsigned int v59 = v58 >> 4;
            unsigned int v60 = v58 & 0xF;
            v52 += v55 & 1;
            if ((v55 & 1) == 0) {
              unsigned int v60 = v59;
            }
            *v9++ = LODWORD(v21[v60]);
            ++v55;
          }
          while (v54 != v55);
          goto LABEL_59;
        }
      }
      int v56 = v83;
      int v57 = v86;
LABEL_59:
      int v24 = v57 + 1;
      ++v10;
    }
    while (v24 != v56);
  }
LABEL_72:
  if (v103) {
    nitro::nitro_function::nitro_function(v103);
  }
  if (v105) {
    nitro::nitro_function::nitro_function(v105);
  }
  if (v107) {
    nitro::nitro_function::nitro_function(v107);
  }
}

void sub_192B60698(_Unwind_Exception *exception_object)
{
  float v3 = *(std::__shared_weak_count **)(v1 - 184);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  float v4 = *(std::__shared_weak_count **)(v1 - 168);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_gather_kernel_cpu::~quantized_gather_kernel_cpu(Espresso::quantized_gather_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3613B8;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3613B8;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(this);
}

void Espresso::general_concat_kernel_cpu::~general_concat_kernel_cpu(Espresso::general_concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::spatial_transformer_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("spatial_transformer_kernel_cpu: requires two inputs");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v82, (*a4)[2], (std::__shared_weak_count *)(*a4)[3]);
  uint64_t v7 = v82;
  double v69 = v83;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v82, **a4, (std::__shared_weak_count *)(*a4)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v80, **a3, (std::__shared_weak_count *)(*a3)[1]);
  int v73 = v82;
  if (!v82)
  {
    int v68 = "Invalid state: blob_f4::ptr image in spatial_transformer_kernel_cpu is null";
    goto LABEL_97;
  }
  if (!v80)
  {
    int v68 = "Invalid state: blob_f4::ptr ocrop in spatial_transformer_kernel_cpu is null";
LABEL_97:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v68);
  }
  uint64_t v17 = *(unsigned int *)(v80 + 12);
  uint64_t v18 = *(int *)(v80 + 8);
  int v19 = *(_DWORD *)(a1 + 280);
  if ((v19 - 1) <= 2 && ((int)v18 < 2 || (int)v17 <= 1)) {
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("output dimensions ocrop_w, ocrop_h must both be greater than 1 for spatial_transformer_kernel_cpu.");
  }
  uint64_t v72 = v80;
  if (!v7) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid state: blob_f4::ptr coordinates in spatial_transformer_kernel_cpu is null");
  }
  int v21 = v82[5];
  BOOL v23 = v19 == 1 && v21 == 1;
  BOOL v70 = v23;
  int v24 = v7[4];
  int v25 = v24 & 1;
  uint64_t v77 = v24;
  if (v24 < 0) {
    int v25 = -v25;
  }
  if (v19 == 2) {
    int v25 = v25 == 0;
  }
  int v76 = v25;
  if (v25) {
    int v26 = v82[5];
  }
  else {
    int v26 = 1;
  }
  uint64_t v75 = (v26 * v7[5]);
  if ((int)v75 >= 1)
  {
    uint64_t v79 = 0;
    uint64_t v27 = 0;
    int v28 = v82[2];
    int v29 = v82[3];
    uint64_t v30 = v82[4];
    int v71 = v21 - 1;
    uint64_t v74 = *((void *)v7 + 3);
    do
    {
      uint64_t v31 = (float *)(v74 + 4 * v27 * v77);
      if (v76)
      {
        int v32 = (int)v31[v27];
        ++v31;
        int v33 = v71;
        if (v71 >= v32) {
          int v33 = v32;
        }
      }
      else if (v70)
      {
        int v33 = 0;
      }
      else
      {
        int v33 = v27;
      }
      if (v19 != 1)
      {
        if (v19 != 2)
        {
          if (v19 == 3) {
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_homography_from_4_source_points not implemented");
          }
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid mode argument in spatial_transformer_kernel_cpu.");
        }
        float v8 = *v31;
        float v9 = v31[1];
        float v10 = v31[2];
        float v11 = v31[3];
        float v12 = v31[4];
        float v13 = v31[5];
        float v14 = v31[6];
        float v15 = v31[7];
        float v16 = v31[8];
      }
      uint64_t v78 = v27;
      if ((int)v30 >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = *((void *)v73 + 3) + 4 * v29 * v28 * (int)v30 * v33;
        uint64_t v36 = *(void *)(v72 + 24) + v79;
        do
        {
          if ((int)v17 >= 1)
          {
            uint64_t v37 = 0;
            uint64_t v38 = v35 + 4 * v34 * v29 * v28;
            uint64_t v39 = v36;
            do
            {
              if ((int)v18 >= 1)
              {
                uint64_t v40 = 0;
                float v41 = (float)((float)((float)(int)v37 + (float)(int)v37) * (float)(1.0 / (float)((float)(int)v17 + -1.0)))
                    + -1.0;
                int v42 = *(_DWORD *)(a1 + 300);
                do
                {
                  float v43 = (float)((float)((float)(int)v40 + (float)(int)v40)
                              * (float)(1.0 / (float)((float)(int)v18 + -1.0)))
                      + -1.0;
                  if (v19 == 1)
                  {
                    float v44 = v31[2] + (float)((float)(v41 * v31[1]) + (float)(*v31 * v43));
                    float v45 = v31[5] + (float)((float)(v41 * v31[4]) + (float)(v31[3] * v43));
                  }
                  else
                  {
                    float v46 = v10 + (float)((float)(v9 * v41) + (float)(v8 * v43));
                    float v47 = v13 + (float)((float)(v12 * v41) + (float)(v11 * v43));
                    float v48 = v16 + (float)((float)(v15 * v41) + (float)(v14 * v43));
                    float v44 = v46 / v48;
                    float v45 = v47 / v48;
                  }
                  float v49 = (float)((float)v28 + -1.0) * (float)((float)(v44 + 1.0) * 0.5);
                  float v50 = (float)((float)v29 + -1.0) * (float)((float)(v45 + 1.0) * 0.5);
                  if (v42 == 1)
                  {
                    float v49 = fmin(fmax(v49, 0.0), (double)(v28 - 1));
                    float v50 = fmin(fmax(v50, 0.0), (double)(v29 - 1));
                  }
                  int v51 = vcvtms_s32_f32(v49);
                  int v52 = v51 + 1;
                  int v53 = vcvtms_s32_f32(v50);
                  int v54 = v53 + 1;
                  BOOL v56 = v51 < 0 || v28 <= v51;
                  BOOL v58 = v51 < -1 || v52 >= v28;
                  BOOL v60 = v53 < 0 || v29 <= v53;
                  BOOL v62 = v53 < -1 || v54 >= v29;
                  float v63 = 0.0;
                  float v64 = 0.0;
                  if (!v56 && !v60) {
                    float v64 = *(float *)(v38 + 4 * (v51 + v28 * v53));
                  }
                  if (!v56 && !v62) {
                    float v63 = *(float *)(v38 + 4 * (v51 + v54 * v28));
                  }
                  float v65 = 0.0;
                  float v66 = 0.0;
                  if (!v58 && !v60) {
                    float v66 = *(float *)(v38 + 4 * (v52 + v28 * v53));
                  }
                  if (!v58 && !v62) {
                    float v65 = *(float *)(v38 + 4 * (v52 + v54 * v28));
                  }
                  float v67 = v49 - (float)v51;
                  *(float *)(v39 + 4 * v40++) = (float)((float)((float)((float)(v50 - (float)v53)
                                                                      * (float)((float)(1.0 - v67) * v63))
                                                              + (float)((float)((float)(1.0 - v67) * v64)
                                                                      * (float)(1.0 - (float)(v50 - (float)v53))))
                                                      + (float)((float)(v67 * v66)
                                                              * (float)(1.0 - (float)(v50 - (float)v53))))
                                              + (float)((float)(v67 * v65) * (float)(v50 - (float)v53));
                }
                while (v18 != v40);
              }
              ++v37;
              v39 += 4 * v18;
            }
            while (v37 != v17);
          }
          ++v34;
          v36 += 4 * (int)v17 * (int)v18;
        }
        while (v34 != v30);
      }
      uint64_t v27 = v78 + 1;
      v79 += 4 * (int)v30 * (int)v17 * (int)v18;
    }
    while (v78 + 1 != v75);
  }
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
  if (v69)
  {
    nitro::nitro_function::nitro_function(v69);
  }
}

void sub_192B60D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::spatial_transformer_kernel_cpu::~spatial_transformer_kernel_cpu(Espresso::spatial_transformer_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::copy_kernel_cpu::~copy_kernel_cpu(Espresso::copy_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::scatter_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t **)a4;
  if (*a3 == a3[1]) {
    float v8 = *(uint64_t **)a4;
  }
  else {
    float v8 = *a3;
  }
  if (!*(unsigned char *)(a1 + 301))
  {
    if (*(_DWORD *)(a1 + 280) == -2
      && *(_DWORD *)(a1 + 284) == -2
      && *(_DWORD *)(a1 + 288) == -2
      && *(_DWORD *)(a1 + 292) == -2
      && *(_DWORD *)(a1 + 296) == -2
      && *(void *)(a4 + 8) - (void)v7 != 48)
    {
      goto LABEL_281;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v196, *(uint64_t **)a4);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v179, (uint64_t *)(*(void *)a4 + 16));
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v172, (uint64_t *)(*(void *)a4 + 32));
    Espresso::abstract_blob_container::shape((char *)&v189, **(void **)a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v194, (const Espresso::layer_shape *)&v189, 0);
    if (v192)
    {
      float v193 = v192;
      operator delete(v192);
    }
    Espresso::abstract_blob_container::shape((char *)&v189, *(void *)(*(void *)a4 + 16));
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v183, (const Espresso::layer_shape *)&v189, 0);
    if (v192)
    {
      float v193 = v192;
      operator delete(v192);
    }
    Espresso::abstract_blob_container::shape((char *)&v189, *(void *)(*(void *)a4 + 32));
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v181, (const Espresso::layer_shape *)&v189, 0);
    if (v192)
    {
      float v193 = v192;
      operator delete(v192);
    }
    Espresso::abstract_blob_container::shape((char *)&v189, *v8);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v176, (const Espresso::layer_shape *)&v189, 0);
    if (v192)
    {
      float v193 = v192;
      operator delete(v192);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v189, *a3);
    uint64_t v14 = 0;
    float v15 = (_DWORD *)**a3;
    int v17 = v15[2];
    int v16 = v15[3];
    int v18 = v15[4];
    int v19 = v15[5];
    uint64_t v20 = *(_DWORD **)(*(void *)a4 + 32);
    int v22 = v20[2];
    int v21 = v20[3];
    int v23 = v20[4];
    int v24 = v20[5];
    uint64_t v25 = v172;
    unint64_t v26 = *(int *)(v172 + 8);
    do
    {
      v26 *= *(int *)(v172 + 12 + v14);
      v14 += 4;
    }
    while (v14 != 12);
    uint64_t v27 = v181[0];
    int v165 = v21;
    if (v182 == v195)
    {
      if (v181[0] != 1)
      {
        unint64_t v28 = (int)v188;
        if (v188 > 3)
        {
          if (v188 == 5)
          {
LABEL_114:
            unint64_t v28 = v184 * (uint64_t)v183;
LABEL_115:
            if (v28 > v181[0])
            {
              unint64_t v139 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)&v183);
              Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long>(v27, v139);
            }
            goto LABEL_116;
          }
          if (v188 == 4)
          {
LABEL_113:
            unint64_t v28 = v183;
            goto LABEL_115;
          }
        }
        else if (v188)
        {
          if (v188 == 1) {
            goto LABEL_115;
          }
          if (v188 != 2) {
            goto LABEL_114;
          }
          goto LABEL_113;
        }
LABEL_116:
        unint64_t v155 = v26 / v181[0];
        goto LABEL_117;
      }
    }
    else if (v195 - 1 != v182 && v181[0] != 1)
    {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: Invalid shape of input blob");
    }
    unint64_t v155 = 0;
LABEL_117:
    uint64_t v65 = 0;
    int v66 = v16 * v17;
    int v162 = v16 * v17 * v18;
    int v157 = v162 * v19;
    uint64_t v67 = v189;
    uint64_t v68 = *(int *)(v189 + 8);
    do
    {
      v68 *= *(int *)(v189 + 12 + v65);
      v65 += 4;
    }
    while (v65 != 12);
    memcpy(*(void **)(v189 + 24), *(const void **)(v196 + 24), 4 * v68);
    if (*(unsigned char *)(a1 + 302)) {
      BOOL v69 = 0;
    }
    else {
      BOOL v69 = v188 > 3;
    }
    if (v69)
    {
      if (v188 == 5)
      {
        uint64_t v70 = v184 * (uint64_t)v183;
        int v71 = v186 * v187 * v185;
      }
      else
      {
        if (v188 != 4)
        {
LABEL_144:
          uint64_t v154 = 1;
          goto LABEL_145;
        }
        uint64_t v70 = v183;
        int v71 = v185 * v186 * v184;
      }
    }
    else
    {
      switch(v188)
      {
        case 1u:
          uint64_t v70 = 1;
          if (!v188) {
            goto LABEL_144;
          }
          break;
        case 2u:
          uint64_t v70 = v183;
          if (!v188) {
            goto LABEL_144;
          }
          break;
        case 3u:
          uint64_t v70 = v184 * (uint64_t)v183;
          if (!v188) {
            goto LABEL_144;
          }
          break;
        case 4u:
          uint64_t v70 = v184 * (uint64_t)v183 * v185;
          if (!v188) {
            goto LABEL_144;
          }
          break;
        case 5u:
          uint64_t v70 = v184 * (uint64_t)v183 * v185 * v186;
          if (!v188) {
            goto LABEL_144;
          }
          break;
        default:
          uint64_t v70 = 0;
          if (!v188) {
            goto LABEL_144;
          }
          break;
      }
      int v71 = *(&v183 + (int)v188 - 1);
    }
    if (v71) {
      BOOL v72 = v70 == 0;
    }
    else {
      BOOL v72 = 1;
    }
    char v73 = v72;
    if (v73) {
      uint64_t v70 = 1;
    }
    uint64_t v154 = v70;
    if (!v70)
    {
LABEL_264:
      if (v190) {
        nitro::nitro_function::nitro_function(v190);
      }
      if (v173) {
        nitro::nitro_function::nitro_function(v173);
      }
      if (v180) {
        nitro::nitro_function::nitro_function(v180);
      }
      float v64 = v197;
      if (v197) {
        goto LABEL_271;
      }
      return;
    }
    if ((v73 & 1) == 0)
    {
LABEL_146:
      uint64_t v74 = 0;
      uint64_t v152 = v71;
      uint64_t v153 = *(void *)(v179 + 24);
      LODWORD(v75) = v71 - 2;
      LODWORD(v76) = v71 - 3;
      LODWORD(v77) = v71 - 4;
      if (*(unsigned char *)(a1 + 302)) {
        uint64_t v78 = (v71 - 1);
      }
      else {
        uint64_t v78 = 0;
      }
      if (*(unsigned char *)(a1 + 302)) {
        uint64_t v75 = v75;
      }
      else {
        uint64_t v75 = 1;
      }
      if (*(unsigned char *)(a1 + 302)) {
        uint64_t v76 = v76;
      }
      else {
        uint64_t v76 = 2;
      }
      if (*(unsigned char *)(a1 + 302)) {
        uint64_t v77 = v77;
      }
      else {
        uint64_t v77 = 3;
      }
      if (*(unsigned char *)(a1 + 302)) {
        uint64_t v79 = (v71 - 5);
      }
      else {
        uint64_t v79 = 4;
      }
      uint64_t v143 = v75;
      uint64_t v144 = v78;
      BOOL v81 = (int)v78 < 0 || v71 < (int)v78;
      BOOL v83 = (int)v75 < 0 || v71 < (int)v75;
      BOOL v150 = v83;
      BOOL v151 = v81;
      uint64_t v141 = v77;
      uint64_t v142 = v76;
      BOOL v85 = (int)v76 < 0 || v71 < (int)v76;
      BOOL v149 = v85;
      BOOL v87 = (int)v77 < 0 || v71 < (int)v77;
      uint64_t v140 = v79;
      BOOL v89 = (int)v79 < 0 || v71 < (int)v79;
      BOOL v147 = v89;
      BOOL v148 = v87;
      float v145 = *(uint64_t **)a4;
      uint64_t v146 = *(void *)(v25 + 24);
      int v90 = v165 * v22;
      int v158 = v165 * v22 * v24 * v23;
      int v164 = v165 * v22 * v23;
      do
      {
        uint64_t v91 = v153 + 4 * v74 * v152;
        float v92 = -1.0;
        float v93 = -1.0;
        if (!v151)
        {
          int v94 = *(_DWORD *)(a1 + 280);
          if (v94 == -2) {
            float v93 = *(float *)(v91 + 4 * v144);
          }
          else {
            float v93 = (float)v94;
          }
        }
        if (!v150)
        {
          int v95 = *(_DWORD *)(a1 + 284);
          if (v95 == -2) {
            float v92 = *(float *)(v91 + 4 * v143);
          }
          else {
            float v92 = (float)v95;
          }
        }
        float v96 = -1.0;
        float v97 = -1.0;
        if (!v149)
        {
          int v98 = *(_DWORD *)(a1 + 288);
          if (v98 == -2) {
            float v97 = *(float *)(v91 + 4 * v142);
          }
          else {
            float v97 = (float)v98;
          }
        }
        if (!v148)
        {
          int v99 = *(_DWORD *)(a1 + 292);
          if (v99 == -2) {
            float v96 = *(float *)(v91 + 4 * v141);
          }
          else {
            float v96 = (float)v99;
          }
        }
        float v100 = -1.0;
        if (!v147)
        {
          int v101 = *(_DWORD *)(a1 + 296);
          if (v101 == -2) {
            float v100 = *(float *)(v91 + 4 * v140);
          }
          else {
            float v100 = (float)v101;
          }
        }
        int v102 = (int)v93;
        int v103 = (int)v92;
        int v104 = (int)v97;
        int v105 = (int)v96;
        int v106 = (int)v100;
        float v107 = (float *)(v146 + 4 * v74 * v155);
        BOOL v111 = (int)v93 == -1 || v103 == -1 || v104 == -1 || v105 == -1 || v106 == -1;
        uint64_t v156 = v74;
        if (v111)
        {
          uint64_t v112 = (unsigned int *)v145[4];
          int v159 = v112[6];
          if (v159 >= 1)
          {
            int v161 = 0;
            int v160 = 0;
            int v167 = v112[5];
            do
            {
              if (v167 >= 1)
              {
                int v113 = 0;
                int v114 = v112[4];
                int v115 = (int)v100;
                if ((int)v100 < 0) {
                  int v115 = v160;
                }
                int v163 = v115 * v157;
                int v116 = v161;
                do
                {
                  if (v114 >= 1)
                  {
                    int v117 = 0;
                    int v118 = v112[3];
                    if (v105 >= 0) {
                      int v119 = (int)v96;
                    }
                    else {
                      int v119 = v113;
                    }
                    int v120 = v163 + v119 * v162;
                    int v121 = v116;
                    do
                    {
                      if (v118 >= 1)
                      {
                        int v122 = 0;
                        uint64_t v123 = v112[2];
                        if (v104 >= 0) {
                          int v124 = (int)v97;
                        }
                        else {
                          int v124 = v117;
                        }
                        int v125 = v120 + v124 * v66;
                        int v126 = v121;
                        do
                        {
                          if ((int)v123 >= 1)
                          {
                            uint64_t v127 = 0;
                            if (v103 >= 0) {
                              int v128 = v103;
                            }
                            else {
                              int v128 = v122;
                            }
                            int v129 = v125 + v128 * v17;
                            int v130 = *(unsigned __int8 *)(a1 + 300);
                            uint64_t v131 = *(void *)(v67 + 24);
                            do
                            {
                              if (v102 >= 0) {
                                int v132 = (int)v93;
                              }
                              else {
                                int v132 = v127;
                              }
                              uint64_t v133 = v129 + v132;
                              uint64_t v134 = v126 + (int)v127;
                              if (v130) {
                                float v135 = *(float *)(v131 + 4 * v133) + v107[v134];
                              }
                              else {
                                float v135 = v107[v134];
                              }
                              *(float *)(v131 + 4 * v133) = v135;
                              ++v127;
                            }
                            while (v123 != v127);
                          }
                          ++v122;
                          v126 += v22;
                        }
                        while (v122 != v118);
                      }
                      ++v117;
                      v121 += v90;
                    }
                    while (v117 != v114);
                  }
                  ++v113;
                  v116 += v164;
                }
                while (v113 != v167);
              }
              v161 += v158;
              ++v160;
            }
            while (v160 != v159);
          }
        }
        else
        {
          uint64_t v136 = v102 + v17 * v103 + v66 * v104 + v162 * v105 + v157 * v106;
          if (*(unsigned char *)(a1 + 300))
          {
            uint64_t v137 = *(void *)(v67 + 24);
            float v138 = *(float *)(v137 + 4 * v136) + *v107;
          }
          else
          {
            float v138 = *v107;
            uint64_t v137 = *(void *)(v67 + 24);
          }
          *(float *)(v137 + 4 * v136) = v138;
        }
        uint64_t v74 = v156 + 1;
      }
      while (v156 + 1 != v154);
      goto LABEL_264;
    }
LABEL_145:
    int v71 = 1;
    goto LABEL_146;
  }
  if (*(_DWORD *)(a1 + 296) != -2)
  {
    float v11 = 0;
    float v10 = 0;
    uint64_t v13 = 1;
    float v12 = *(uint64_t **)a4;
    goto LABEL_34;
  }
  if (*(void *)(a4 + 8) - (void)v7 != 48) {
LABEL_281:
  }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid number of bottom blobs");
  float v11 = (void *)v7[2];
  float v10 = (std::__shared_weak_count *)v7[3];
  float v12 = *(uint64_t **)a4;
  if (!v10
    || (uint64_t v13 = 1,
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
        float v12 = *(uint64_t **)a4,
        *(_DWORD *)(a1 + 296) == -2))
  {
    uint64_t v13 = 2;
  }
LABEL_34:
  int v29 = &v12[2 * v13];
  uint64_t v166 = v10;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v196, v29);
  Espresso::abstract_blob_container::shape((char *)&v189, *v7);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v194, (const Espresso::layer_shape *)&v189, 0);
  if (v192)
  {
    float v193 = v192;
    operator delete(v192);
  }
  Espresso::abstract_blob_container::shape((char *)&v189, *v29);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v183, (const Espresso::layer_shape *)&v189, 0);
  if (v192)
  {
    float v193 = v192;
    operator delete(v192);
  }
  Espresso::abstract_blob_container::shape((char *)&v189, *v8);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v181, (const Espresso::layer_shape *)&v189, 0);
  if (v192)
  {
    float v193 = v192;
    operator delete(v192);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v179, v11, v10);
  float v30 = (float)*(int *)(a1 + 296);
  float __C = v30;
  uint64_t v31 = v179;
  if (v179)
  {
    Espresso::abstract_blob_container::shape((char *)&v189, (uint64_t)v11);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v176, (const Espresso::layer_shape *)&v189, 0);
    if (v192)
    {
      float v193 = v192;
      operator delete(v192);
    }
    uint64_t v32 = v177;
    if (v177)
    {
      int v33 = v176;
      unint64_t v34 = 1;
      do
      {
        uint64_t v35 = *v33++;
        v34 *= v35;
        --v32;
      }
      while (v32);
    }
    else
    {
      unint64_t v34 = 1;
    }
    vDSP_maxv(*(const float **)(v31 + 24), 1, &__C, v34);
    float v30 = __C;
  }
  else
  {
    unint64_t v34 = 1;
  }
  int v37 = (int)v30;
  int v38 = v181[0];
  if (v181[0] <= (int)v30)
  {
    if (!*(void *)(*(void *)a2 + 64))
    {
      Espresso::abstract_blob_container::shape((char *)&v189, *v7);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,float &,int &,int &,int &,int &,int &>(v189, SHIDWORD(v189), (int)v190, SHIDWORD(v190), v191, __C);
    }
    v181[0] = (int)(float)(v30 + 1.0);
    *(int32x2_t *)&double v39 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v181, 0, (uint64_t)&v189);
    uint64_t v40 = *v8;
    uint64_t v174 = 0;
    float v175 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, double))(*(void *)v40 + 16))(v40, &v189, &v174, v39);
    if (v175) {
      nitro::nitro_function::nitro_function(v175);
    }
    if (v192)
    {
      float v193 = v192;
      operator delete(v192);
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v172, v8);
  if (v38 <= v37)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v189, v7);
    uint64_t v44 = 0;
    uint64_t v45 = *(int *)(v189 + 8);
    do
    {
      v45 *= *(int *)(v189 + 12 + v44);
      v44 += 4;
    }
    while (v44 != 12);
    memcpy(*(void **)(v172 + 24), *(const void **)(v189 + 24), 4 * v45);
    float v43 = v190;
    if (!v190) {
      goto LABEL_74;
    }
LABEL_73:
    nitro::nitro_function::nitro_function(v43);
    goto LABEL_74;
  }
  if (*a3 != a3[1])
  {
    uint64_t v41 = *v8;
    uint64_t v42 = v7[1];
    uint64_t v170 = *v7;
    uint64_t v171 = (std::__shared_weak_count *)v42;
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v41 + 144))(v41, a2, &v170, &v168);
    if (v169) {
      nitro::nitro_function::nitro_function(v169);
    }
    float v43 = v171;
    if (v171) {
      goto LABEL_73;
    }
  }
LABEL_74:
  uint64_t v46 = 0;
  uint64_t v47 = v172;
  unint64_t v48 = *(int *)(v172 + 8);
  do
  {
    v48 *= *(int *)(v172 + 12 + v46);
    v46 += 4;
  }
  while (v46 != 12);
  uint64_t v49 = 0;
  unint64_t v50 = v181[0];
  uint64_t v51 = v196;
  unint64_t v52 = *(int *)(v196 + 8);
  do
  {
    v52 *= *(int *)(v196 + 12 + v49);
    v49 += 4;
  }
  while (v49 != 12);
  if (v188 == v195)
  {
    if (v34 > v183) {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long &>(v183, v34);
    }
    v52 /= (unint64_t)v183;
  }
  else
  {
    if (v195 - 1 == v188)
    {
      unint64_t v53 = 0;
      goto LABEL_93;
    }
    Espresso::abstract_blob_container::shape((char *)&v189, (uint64_t)v11);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v176, (const Espresso::layer_shape *)&v189, 0);
    if (v192)
    {
      float v193 = v192;
      operator delete(v192);
    }
    if (v177)
    {
      uint64_t v54 = 0;
      unint64_t v55 = 1;
      do
      {
        uint64_t v56 = *(&v183 + v54);
        int v57 = v176[v54];
        if (v56 != v57) {
          Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int &,unsigned long &,int &>(v54, v57, v54, v56);
        }
        v55 *= v56;
        ++v54;
      }
      while (v177 != v54);
    }
    else
    {
      unint64_t v55 = 1;
    }
    v52 /= v55;
  }
  unint64_t v53 = v52;
LABEL_93:
  vDSP_Length v58 = v48 / v50;
  if (v58 != v52) {
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: Invalid shape of value blob");
  }
  if (v34)
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 4 * v53;
    do
    {
      if (v31) {
        int v62 = (int)*(float *)(*(void *)(v31 + 24) + 4 * v60);
      }
      else {
        int v62 = *(_DWORD *)(a1 + 296);
      }
      float v63 = (float *)(*(void *)(v47 + 24) + 4 * v58 * v62);
      if (*(unsigned char *)(a1 + 300)) {
        vDSP_vadd(v63, 1, (const float *)(*(void *)(v51 + 24) + v59), 1, v63, 1, v58);
      }
      else {
        memcpy(v63, (const void *)(*(void *)(v51 + 24) + v59), 4 * v58);
      }
      ++v60;
      v59 += v61;
    }
    while (v34 != v60);
  }
  if (v173) {
    nitro::nitro_function::nitro_function(v173);
  }
  if (v180) {
    nitro::nitro_function::nitro_function(v180);
  }
  if (v197) {
    nitro::nitro_function::nitro_function(v197);
  }
  if (v166)
  {
    float v64 = v166;
LABEL_271:
    nitro::nitro_function::nitro_function(v64);
  }
}

void sub_192B61B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38)
{
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 184);
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (a36) {
    nitro::nitro_function::nitro_function(a36);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(v38 - 248);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v38 - 96);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,float &,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, float a6)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long &>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: Invalid number of value blobs %ld != %ld", a1, a2);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int &,unsigned long &,int &>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("scatter_kernel_cpu: coords.shape[%d] = %d != slice.shape[%d] = %d", a1, a2, a3, a4);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,unsigned long>(uint64_t a1, uint64_t a2)
{
}

void Espresso::scatter_kernel_cpu::~scatter_kernel_cpu(Espresso::scatter_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::load_random_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(v6 + 88);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 96);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v70 = v7;
  if (*(unsigned char *)(a1 + 324))
  {
    if (!*(void *)(*(void *)a2 + 64)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("load_random_kernel_cpu: dynamic shape mode not supported without interpreter");
    }
    uint64_t v9 = *a4;
    if (a4[1] != *a4)
    {
      unint64_t v10 = 0;
      do
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v83, (uint64_t *)(v9 + 16 * v10));
        uint64_t v11 = 0;
        uint64_t v12 = v83;
        unint64_t v13 = *(int *)(v83 + 8);
        do
        {
          v13 *= *(int *)(v83 + 12 + v11);
          v11 += 4;
        }
        while (v11 != 12);
        if (v13 >= 0xA) {
          std::vector<int>::size_type v14 = 10;
        }
        else {
          std::vector<int>::size_type v14 = v13;
        }
        std::vector<int>::vector(&v85, v14);
        begifloat n = v85.__begin_;
        if (v14)
        {
          int v16 = *(float **)(v12 + 24);
          std::vector<int>::pointer v17 = v85.__begin_;
          do
          {
            float v18 = *v16++;
            *v17++ = (int)v18;
            --v14;
          }
          while (v14);
        }
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        float v92 = 0;
        uint64_t v19 = (char *)v85.__end_ - (char *)begin;
        if (v85.__end_ != begin)
        {
          uint64_t v20 = v19 >> 2;
          if ((unint64_t)(v19 >> 2) <= 1) {
            uint64_t v20 = 1;
          }
          int v21 = &v90;
          int v22 = begin;
          do
          {
            int v23 = *v22++;
            *(_DWORD *)int v21 = v23;
            int v21 = (uint64_t *)((char *)v21 + 4);
            --v20;
          }
          while (v20);
        }
        HIDWORD(v92) = (unint64_t)v19 >> 2;
        int v24 = (std::__shared_weak_count *)operator new(0x98uLL);
        v24->__shared_owners_ = 0;
        v24->__shared_weak_owners_ = 0;
        v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
        *(_OWORD *)&v24[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v24[3].__shared_owners_ = 0u;
        *(_OWORD *)&v24[1].__shared_owners_ = 0u;
        v24[2].std::__shared_count = 0u;
        v24[4].std::__shared_count = 0u;
        *(_OWORD *)&v24[4].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v24[5].__shared_owners_ = 0u;
        v24[5].__shared_weak_owners_ = 0;
        v24[6].__vftable = 0;
        LODWORD(v24[2].__vftable) = 1065353216;
        v24[2].__shared_owners_ = 0x1FFFFFFFFLL;
        v24[4].__vftable = 0;
        v24[4].__shared_owners_ = 0;
        v24[2].__shared_weak_owners_ = 0;
        v24[3].__vftable = 0;
        LOBYTE(v24[3].__shared_weak_owners_) = 0;
        v24[3].__shared_owners_ = 0;
        v24[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
        v24[5].__vftable = 0;
        v24[5].__shared_owners_ = 0;
        LOBYTE(v24[6].__vftable) = 0;
        LOBYTE(v24[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
        uint64_t v25 = (*a3)[2 * v10];
        *(int32x2_t *)&double v26 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v90, 0, (uint64_t)buf);
        BOOL v81 = v24 + 1;
        float v82 = v24;
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, unsigned char *, std::__shared_weak_count **, double))(*(void *)v25 + 16))(v25, buf, &v81, v26);
        if (v82) {
          nitro::nitro_function::nitro_function(v82);
        }
        if ((void)v98)
        {
          *((void *)&v98 + 1) = v98;
          operator delete((void *)v98);
        }
        nitro::nitro_function::nitro_function(v24);
        if (v85.__begin_)
        {
          v85.__end_ = v85.__begin_;
          operator delete(v85.__begin_);
        }
        if (v84) {
          nitro::nitro_function::nitro_function(v84);
        }
        ++v10;
        uint64_t v9 = *a4;
      }
      while (v10 < (a4[1] - *a4) >> 4);
    }
  }
  Espresso::abstract_blob_container::shape(buf, **a3);
  unint64_t v27 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  unint64_t v28 = v70;
  if ((void)v98)
  {
    *((void *)&v98 + 1) = v98;
    operator delete((void *)v98);
  }
  int v71 = (_OWORD *)(a1 + 328);
  if (!*(void *)(a1 + 328) && v27 >> 3 >= 0x271 && v27 <= 0x1312D0)
  {
    uint64_t v29 = *(void *)(a1 + 8);
    float v30 = (char *)operator new(0x38uLL);
    *((void *)v30 + 1) = 0;
    *((void *)v30 + 2) = 0;
    *(void *)float v30 = &unk_1EE386DD0;
    id v31 = *(id *)(v29 + 104);
    *(_OWORD *)(v30 + 40) = 0u;
    *(_OWORD *)(v30 + 24) = 0u;
    *((void *)v30 + 5) = v31;
    *(void *)&long long v32 = v30 + 24;
    *((void *)&v32 + 1) = v30;
    int v33 = *(std::__shared_weak_count **)(a1 + 336);
    *int v71 = v32;
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
  }
  long long v34 = *(_OWORD *)(a1 + 296);
  long long v78 = *(_OWORD *)(a1 + 280);
  long long v79 = v34;
  long long v80 = *(_OWORD *)(a1 + 312);
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 3321888768;
  v76[2] = ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke;
  v76[3] = &__block_descriptor_96_ea8_32c86_ZTSNSt3__110shared_ptrINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEE_e9_v16__0_v8l;
  v76[4] = v8;
  uint64_t v77 = v70;
  if (v70) {
    atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = (void *)MEMORY[0x192FF2250](v76);
  uint64_t v36 = *a3;
  int v37 = a3[1];
  if (*a3 != v37)
  {
    do
    {
      uint64_t v38 = *(uint64_t **)v71;
      if (*(void *)v71)
      {
        uint64_t v40 = (const void *)*v36;
        double v39 = (std::__shared_weak_count *)v36[1];
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v41 = v35;
        if (!v38[2]) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("async_cache: Failed to create a dispatch queue");
        }
        if (!v40
        {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("async_cache: no blob provided");
        }
        uint64_t v44 = v42;
        uint64_t v45 = 0;
        uint64_t v46 = *((void *)v42 + 20);
        unint64_t v47 = *(int *)(v46 + 8);
        uint64_t v48 = v46 + 12;
        do
        {
          v47 *= *(int *)(v48 + v45);
          v45 += 4;
        }
        while (v45 != 12);
        uint64_t v49 = *v38;
        if (!*v38) {
          goto LABEL_60;
        }
        uint64_t v50 = 0;
        unint64_t v51 = *(int *)(v49 + 8);
        uint64_t v52 = v49 + 12;
        do
        {
          v51 *= *(int *)(v52 + v50);
          v50 += 4;
        }
        while (v50 != 12);
        if (v51 >= v47) {
          goto LABEL_57;
        }
        unint64_t v53 = Espresso::espresso_os_log_subsystem(v42, v43);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          uint64_t v54 = 0;
          uint64_t v55 = *(int *)(*v38 + 8);
          do
          {
            v55 *= *(int *)(*v38 + 12 + v54);
            v54 += 4;
          }
          while (v54 != 12);
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v55;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_1920CB000, v53, OS_LOG_TYPE_INFO, "async_cache: Invalidating cache, cached blob size (%zu) < requested blob size (%zu)", buf, 0x16u);
        }

        uint64_t v56 = (std::__shared_weak_count *)v38[1];
        uint64_t *v38 = 0;
        v38[1] = 0;
        if (v56 && (nitro::nitro_function::nitro_function(v56), *v38))
        {
LABEL_57:
          buf[0] = 1;
          *(_OWORD *)&uint8_t buf[8] = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          *(_DWORD *)&uint8_t buf[4] = 723714184;
          kdebug_trace();
          if (dispatch_block_wait((dispatch_block_t)v38[3], 0xFFFFFFFFFFFFFFFFLL)) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("async block timed out");
          }
          uint64_t v57 = *((void *)v44 + 20);
          *((void *)v44 + 20) = *v38;
          uint64_t *v38 = v57;
          uint64_t v58 = *((void *)v44 + 21);
          *((void *)v44 + 21) = v38[1];
          v38[1] = v58;
          Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)buf);
          unint64_t v28 = v70;
        }
        else
        {
LABEL_60:
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(buf, *(_DWORD *)(*((void *)v44 + 20) + 8), *(_DWORD *)(*((void *)v44 + 20) + 12), *(_DWORD *)(*((void *)v44 + 20) + 16), *(_DWORD *)(*((void *)v44 + 20) + 20));
          uint64_t v60 = *(int **)buf;
          uint64_t v61 = (std::__shared_weak_count *)*((void *)v44 + 21);
          *((_OWORD *)v44 + 10) = *(_OWORD *)buf;
          if (v61)
          {
            nitro::nitro_function::nitro_function(v61);
            int v62 = (int *)*((void *)v44 + 20);
          }
          else
          {
            int v62 = v60;
          }
          unint64_t v28 = v70;
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(buf, v62[2], v62[3], v62[4], v62[5]);
          float v63 = (std::__shared_weak_count *)v38[1];
          *(_OWORD *)uint64_t v38 = *(_OWORD *)buf;
          if (v63) {
            nitro::nitro_function::nitro_function(v63);
          }
          float v64 = v38[2];
          uint64_t v90 = MEMORY[0x1E4F143A8];
          uint64_t v91 = 3221225472;
          float v92 = ___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke;
          float v93 = &unk_1E5747B28;
          id v94 = v41;
          int v95 = v44;
          dispatch_sync(v64, &v90);
        }
        uint64_t v65 = *v38;
        int v66 = (std::__shared_weak_count *)v38[1];
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v85.__begin_ = (std::vector<int>::pointer)MEMORY[0x1E4F143A8];
        v85.__end_ = (std::vector<int>::pointer)3321888768;
        v85.__end_cap_.__value_ = (int *)___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke_2;
        int v86 = &unk_1EE38EC10;
        id v67 = v41;
        id v87 = v67;
        uint64_t v88 = v65;
        BOOL v89 = v66;
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        dispatch_block_t v68 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v85);
        BOOL v69 = (void *)v38[3];
        uint64_t v38[3] = (uint64_t)v68;

        dispatch_async((dispatch_queue_t)v38[2], (dispatch_block_t)v38[3]);
        if (v89) {
          nitro::nitro_function::nitro_function(v89);
        }

        if (v66) {
          nitro::nitro_function::nitro_function(v66);
        }

        if (v39) {
          nitro::nitro_function::nitro_function(v39);
        }
      }
      else
      {
        uint64_t v59 = *(NSObject **)(*(void *)(a1 + 8) + 104);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke_167;
        block[3] = &unk_1E5747B28;
        uint64_t v75 = v36;
        id v74 = v35;
        dispatch_sync(v59, block);
      }
      v36 += 2;
    }
    while (v36 != v37);
  }

  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_192B6264C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = 0;
  int v5 = *(float **)(a2 + 24);
  vDSP_Length v6 = *(int *)(a2 + 8);
  do
  {
    v6 *= *(int *)(a2 + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);
  vDSP_Length __N = v6;
  if (*(unsigned char *)(a1 + 93))
  {
    unsigned int v7 = *(_DWORD *)(a1 + 60);
    if ((v7 & 0x80000000) == 0)
    {
      if (v7 <= 1) {
        int v8 = 1;
      }
      else {
        int v8 = *(_DWORD *)(a1 + 60);
      }
      if (v7 == 0x7FFFFFFF) {
        int v9 = 1;
      }
      else {
        int v9 = v8;
      }
      **(_DWORD **)(a1 + 32) = v9;
    }
  }
  switch(*(_DWORD *)(a1 + 48))
  {
    case 0:
      if (v6)
      {
        float v10 = *(float *)(a1 + 52);
        uint64_t v11 = *(unsigned int **)(a1 + 32);
        float v12 = *(float *)(a1 + 56) - v10;
        unsigned int v13 = *v11;
        do
        {
          unsigned int v14 = v13 / 0xADC8;
          unsigned int v15 = 48271 * (v13 % 0xADC8);
          v14 *= 3399;
          BOOL v16 = v15 >= v14;
          unsigned int v17 = v15 - v14;
          if (v16) {
            int v18 = 0;
          }
          else {
            int v18 = 0x7FFFFFFF;
          }
          unsigned int v13 = v18 + v17;
          *v5++ = v10 + (float)(v12 * (float)((float)(v13 - 1) * 4.6566e-10));
          --v6;
        }
        while (v6);
        *uint64_t v11 = v13;
      }
      break;
    case 1:
      if (v6)
      {
        int v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 52);
        int v24 = *(unsigned int **)(a1 + 32);
        float v25 = *((float *)&v23 + 1);
        int v51 = v23;
        do
        {
          if (v21)
          {
            int v21 = 0;
            float v26 = a3;
          }
          else
          {
            unsigned int v27 = *v24;
            do
            {
              unsigned int v28 = v27 / 0xADC8;
              unsigned int v29 = 48271 * (v27 % 0xADC8);
              v28 *= 3399;
              BOOL v16 = v29 >= v28;
              unsigned int v30 = v29 - v28;
              if (v16) {
                int v31 = 0;
              }
              else {
                int v31 = 0x7FFFFFFF;
              }
              unsigned int v32 = v31 + v30;
              float v33 = (float)(v32 - 1) * 4.6566e-10;
              unsigned int v34 = v32 / 0xADC8;
              unsigned int v35 = 48271 * (v32 % 0xADC8);
              v34 *= 3399;
              BOOL v16 = v35 >= v34;
              unsigned int v36 = v35 - v34;
              if (v16) {
                int v37 = 0;
              }
              else {
                int v37 = 0x7FFFFFFF;
              }
              unsigned int v27 = v37 + v36;
              float v38 = (float)(v33 * 2.0) + -1.0;
              float v39 = (float)((float)((float)(v27 - 1) * 4.6566e-10) * 2.0) + -1.0;
              float v40 = (float)(v39 * v39) + (float)(v38 * v38);
            }
            while (v40 > 1.0 || v40 == 0.0);
            *int v24 = v27;
            float v41 = sqrtf((float)(logf((float)(v39 * v39) + (float)(v38 * v38)) * -2.0) / v40);
            a3 = v39 * v41;
            float v26 = v38 * v41;
            int v21 = 1;
            LODWORD(v23) = v51;
          }
          v5[v22++] = *(float *)&v23 + (float)(v26 * v25);
        }
        while (v22 != v6);
      }
      break;
    case 2:
      if (v6)
      {
        double v19 = *(float *)(a1 + 52);
        do
        {
          if (std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(*(unsigned int **)(a1 + 32))
             + 0.0 >= v19)
            float v20 = 0.0;
          else {
            float v20 = 1.0;
          }
          *v5++ = v20;
          --v6;
        }
        while (v6);
      }
      break;
    case 3:
      if (v6)
      {
        uint64_t v42 = *(unsigned int **)(a1 + 32);
        unsigned int v43 = *v42;
        uint64_t v44 = v5;
        vDSP_Length v45 = v6;
        do
        {
          unsigned int v46 = v43 / 0xADC8;
          unsigned int v47 = 48271 * (v43 % 0xADC8);
          v46 *= 3399;
          BOOL v16 = v47 >= v46;
          unsigned int v48 = v47 - v46;
          if (v16) {
            int v49 = 0;
          }
          else {
            int v49 = 0x7FFFFFFF;
          }
          unsigned int v43 = v49 + v48;
          *v44++ = (float)((float)(v43 - 1) * 4.6566e-10) + 0.0;
          --v45;
        }
        while (v45);
        *uint64_t v42 = v43;
      }
      if (*(float *)(a1 + 52) != 1.0) {
        vDSP_vsmul(v5, 1, (const float *)(a1 + 52), v5, 1, v6);
      }
      uint64_t v50 = (const float *)(a1 + 56);
      vDSP_vsadd(v5, 1, v50, v5, 1, v6);
      vvlogf(v5, v5, (const int *)&__N);
      vDSP_vneg(v5, 1, v5, 1, __N);
      vDSP_vsadd(v5, 1, v50, v5, 1, __N);
      vvlogf(v5, v5, (const int *)&__N);
      vDSP_vneg(v5, 1, v5, 1, __N);
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid random distribution: %D");
  }
}

void ___ZN8Espresso22load_random_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke_167(uint64_t a1)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v3, **(void ***)(a1 + 40), *(std::__shared_weak_count **)(*(void *)(a1 + 40) + 8));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  unsigned int v2 = v4;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void sub_192B62BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c86_ZTSNSt3__110shared_ptrINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c86_ZTSNSt3__110shared_ptrINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::espresso_async_cache>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::espresso_async_cache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::espresso_async_cache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::load_random_kernel_cpu::~load_random_kernel_cpu(Espresso::load_random_kernel_cpu *this)
{
  *(void *)this = &unk_1EE359970;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE359970;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::range_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4) {
    goto LABEL_31;
  }
  if (!*(void *)(*(void *)a2 + 64)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic range requires interpreter");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29, *(uint64_t **)a4);
  if (*(void *)(a4 + 8) - *(void *)a4 <= 0x10uLL)
  {
    uint64_t v27 = 0;
    unsigned int v28 = 0;
    goto LABEL_7;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, (uint64_t *)(*(void *)a4 + 16));
  if (*(void *)(a4 + 8) - *(void *)a4 <= 0x20uLL)
  {
LABEL_7:
    uint64_t v25 = 0;
    float v26 = 0;
    goto LABEL_8;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v25, (uint64_t *)(*(void *)a4 + 32));
LABEL_8:
  if (v29)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(int *)(v29 + 8);
    do
    {
      v8 *= *(int *)(v29 + 12 + v7);
      v7 += 4;
    }
    while (v7 != 12);
    if (v8 != 1)
    {
      Espresso::abstract_blob_container::shape((char *)&v22, **(void **)a4);
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("range_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v22, HIDWORD(v22), v23, HIDWORD(v23), v24);
    }
    *(_DWORD *)(a1 + 280) = **(_DWORD **)(v29 + 24);
  }
  if (v27)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(int *)(v27 + 8);
    do
    {
      v10 *= *(int *)(v27 + 12 + v9);
      v9 += 4;
    }
    while (v9 != 12);
    if (v10 != 1)
    {
      Espresso::abstract_blob_container::shape((char *)&v22, *(void *)(*(void *)a4 + 16));
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("range_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v22, HIDWORD(v22), v23, HIDWORD(v23), v24);
    }
    *(_DWORD *)(a1 + 284) = **(_DWORD **)(v27 + 24);
  }
  if (v25)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(int *)(v25 + 8);
    do
    {
      v12 *= *(int *)(v25 + 12 + v11);
      v11 += 4;
    }
    while (v11 != 12);
    if (v12 != 1)
    {
      Espresso::abstract_blob_container::shape((char *)&v22, *(void *)(*(void *)a4 + 32));
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("range_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v22, HIDWORD(v22), v23, HIDWORD(v23), v24);
    }
    *(_DWORD *)(a1 + 288) = **(_DWORD **)(v25 + 24);
  }
  unsigned int v13 = (std::__shared_weak_count *)operator new(0x98uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
  *(_OWORD *)&v13[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v13[3].__shared_owners_ = 0u;
  *(_OWORD *)&v13[1].__shared_owners_ = 0u;
  v13[2].std::__shared_count = 0u;
  v13[4].std::__shared_count = 0u;
  *(_OWORD *)&v13[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v13[5].__shared_owners_ = 0u;
  v13[5].__shared_weak_owners_ = 0;
  v13[6].__vftable = 0;
  LODWORD(v13[2].__vftable) = 1065353216;
  v13[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v13[4].__vftable = 0;
  v13[4].__shared_owners_ = 0;
  v13[2].__shared_weak_owners_ = 0;
  v13[3].__vftable = 0;
  LOBYTE(v13[3].__shared_weak_owners_) = 0;
  v13[3].__shared_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
  v13[5].__vftable = 0;
  v13[5].__shared_owners_ = 0;
  LOBYTE(v13[6].__vftable) = 0;
  LOBYTE(v13[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
  uint64_t v14 = **a3;
  memset(v21, 0, sizeof(v21));
  Espresso::generic_range_kernel::top_shapes_for_bottom_shapes((float *)a1, v21, &v22);
  uint64_t v15 = v22;
  double v19 = v13 + 1;
  float v20 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, uint64_t, std::__shared_weak_count **))(*(void *)v14 + 16))(v14, v15, &v19);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  int v31 = (void **)&v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
  int v31 = (void **)v21;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
  nitro::nitro_function::nitro_function(v13);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
LABEL_31:
  if (a3[1] == *a3)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v22, *a3);
    if (v22)
    {
      uint64_t v16 = *(unsigned int *)(v22 + 8);
      if ((int)v16 >= 1)
      {
        float v17 = *(float *)(a1 + 284);
        int v18 = *(float **)(v22 + 24);
        do
        {
          *v18++ = v17;
          float v17 = v17 + *(float *)(a1 + 288);
          --v16;
        }
        while (v16);
      }
    }
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
}

void sub_192B63154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 80);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  float v26 = *(std::__shared_weak_count **)(v23 - 64);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::range_kernel_cpu::~range_kernel_cpu(Espresso::range_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::matrix_band_part_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v45 = 0;
    unsigned int v46 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v45, *(uint64_t **)a3);
  }
  vDSP_Length v6 = a4[1];
  if (v6 == *a4)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v43, *a4);
    vDSP_Length v6 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)&v34, *v6);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v37, (const Espresso::layer_shape *)&v34, 0);
  if (__p)
  {
    unsigned int v36 = __p;
    operator delete(__p);
  }
  int v7 = *(_DWORD *)(a1 + 288);
  uint64_t v8 = (int)v42;
  if (!v7 && v42 > 3)
  {
    if (v42 == 5)
    {
      unint64_t v9 = v38 * (uint64_t)v37;
      unint64_t v10 = v40 * (uint64_t)v41 * v39;
    }
    else if (v42 == 4)
    {
      unint64_t v9 = v37;
      unint64_t v10 = v39 * (uint64_t)v40 * v38;
    }
    else
    {
      unint64_t v10 = 0;
      unint64_t v9 = 0;
    }
LABEL_27:
    uint64_t v17 = v45;
    if (*(_DWORD *)(v45 + 8) == 1 && *(_DWORD *)(v45 + 12) == 1) {
      goto LABEL_29;
    }
    uint64_t v12 = "Only 2d matrices are supported by matrix_band_part_kernel_cpu";
LABEL_72:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v12);
  }
  uint64_t v11 = (int)v42 - 1;
  uint64_t v12 = "Rank of the input must be atleast 2 for matrix_band_part_kernel_cpu";
  switch(v42)
  {
    case 1u:
      goto LABEL_72;
    case 2u:
      unint64_t v9 = v37;
      goto LABEL_22;
    case 3u:
      unint64_t v9 = v38 * (uint64_t)v37;
      goto LABEL_22;
    case 4u:
      unint64_t v9 = v38 * (uint64_t)v37 * v39;
      goto LABEL_22;
    case 5u:
      unint64_t v9 = v38 * (uint64_t)v37 * v39 * v40;
      goto LABEL_22;
    default:
      unint64_t v9 = 0;
LABEL_22:
      if (v42 < 2)
      {
        uint64_t v12 = "Rank of the input must be atleast 2 for matrix_band_part_kernel_cpu";
        goto LABEL_72;
      }
      if (!v7)
      {
        unint64_t v10 = *(&v37 + v11);
        if (v42 <= 3)
        {
          uint64_t v17 = v45;
LABEL_29:
          unsigned int v13 = *(_DWORD **)(v17 + 24);
          uint64_t v14 = *(int **)(v43 + 24);
          uint64_t v16 = 1;
          unint64_t v15 = v9;
          goto LABEL_30;
        }
        goto LABEL_27;
      }
      unsigned int v13 = *(_DWORD **)(v45 + 24);
      uint64_t v14 = *(int **)(v43 + 24);
      Espresso::layer_nd_shape::shape_vector(&v34, (uint64_t)&v37);
      unint64_t v10 = v34.__begin_[v11];
      v34.__end_ = v34.__begin_;
      operator delete(v34.__begin_);
      Espresso::layer_nd_shape::shape_vector(&v34, (uint64_t)&v37);
      unint64_t v15 = v34.__begin_[v8 - 2];
      v34.__end_ = v34.__begin_;
      operator delete(v34.__begin_);
      if (v8 < 3) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v9 / v15;
      }
LABEL_30:
      int v18 = *(_DWORD *)(a1 + 296);
      if (!v18)
      {
LABEL_44:
        int v19 = 0;
        goto LABEL_45;
      }
      if (v15 >= v10)
      {
        if (v15 > v10)
        {
          if (v18 < 0) {
            int v20 = v18 + v15 - v10 + 1;
          }
          else {
            int v20 = v18 - 1;
          }
          v10 += v20;
          if (v10 > v15) {
LABEL_73:
          }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,unsigned long &,unsigned long &>(v18, v15, v10);
          int v19 = 0;
          if (v16) {
            goto LABEL_46;
          }
          goto LABEL_63;
        }
        goto LABEL_44;
      }
      if (v18 < 0) {
        int v19 = v18 + v10 - v15 + 1;
      }
      else {
        int v19 = v18 - 1;
      }
      v15 += v19;
      if (v15 > v10) {
        goto LABEL_73;
      }
LABEL_45:
      int v20 = 0;
      if (v16)
      {
LABEL_46:
        uint64_t v21 = 0;
        unint64_t v22 = v19;
        unint64_t v23 = v20;
        uint64_t v24 = -(uint64_t)v20;
        unint64_t v25 = v23 - v19;
        while (1)
        {
          unint64_t v26 = v25;
          unint64_t v27 = v22;
          if (v15 > v22) {
            break;
          }
LABEL_62:
          if (++v21 == v16) {
            goto LABEL_63;
          }
        }
        while (v10 <= v23)
        {
LABEL_61:
          ++v27;
          --v26;
          if (v27 == v15) {
            goto LABEL_62;
          }
        }
        uint64_t v28 = *(int *)(a1 + 280);
        int v29 = *(unsigned __int8 *)(a1 + 292);
        uint64_t v30 = v26;
        uint64_t v31 = v24;
        while (1)
        {
          if ((v28 & 0x80000000) != 0 || (uint64_t)(v27 + v31) <= v28)
          {
            uint64_t v33 = *(unsigned int *)(a1 + 284);
            if ((v33 & 0x80000000) != 0)
            {
              int v32 = 0;
              if (v29) {
                goto LABEL_57;
              }
LABEL_56:
              int v32 = *v14;
              goto LABEL_57;
            }
            int v32 = 0;
            if (v30 <= v33 != (v29 != 0)) {
              goto LABEL_56;
            }
          }
          else
          {
            if (v29) {
              goto LABEL_56;
            }
            int v32 = 0;
          }
LABEL_57:
          *v13++ = v32;
          ++v14;
          --v31;
          ++v30;
          if (-(uint64_t)v10 == v31) {
            goto LABEL_61;
          }
        }
      }
LABEL_63:
      if (v44) {
        nitro::nitro_function::nitro_function(v44);
      }
      if (v46) {
        nitro::nitro_function::nitro_function(v46);
      }
      return;
  }
}

void sub_192B63604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 72);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,unsigned long &,unsigned long &>(int a1, int a2, int a3)
{
}

void Espresso::matrix_band_part_kernel_cpu::~matrix_band_part_kernel_cpu(Espresso::matrix_band_part_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::fill_kernel_cpu::~fill_kernel_cpu(Espresso::fill_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::batch_matmul_kernel_cpu::__launch(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = *a4;
  int v5 = a4[1];
  if ((unint64_t)((char *)v5 - (char *)*a4) <= 0x1F) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid number of bottom blobs");
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    int v185 = 0;
    uint64_t v184 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v184, *(uint64_t **)a3);
    uint64_t v4 = *a4;
    int v5 = a4[1];
  }
  if (v5 == v4)
  {
    int v183 = 0;
    uint64_t v182 = 0;
    unint64_t v9 = v4;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v182, v4);
    uint64_t v4 = *a4;
    unint64_t v9 = a4[1];
  }
  if ((unint64_t)((char *)v9 - (char *)v4) <= 0x10)
  {
    uint64_t v10 = 0;
    float v181 = 0;
    uint64_t v180 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v180, v4 + 2);
    uint64_t v10 = v180;
  }
  uint64_t v11 = v182;
  if (v182)
  {
    if (v10)
    {
      uint64_t v12 = v184;
      if (v184)
      {
        Espresso::abstract_blob_container::shape((char *)buf, **a4);
        Espresso::abstract_blob_container::shape((char *)&v164, (*a4)[2]);
        Espresso::abstract_blob_container::shape((char *)&v156, **(void **)a3);
        BOOL v13 = 1;
        if ((v176 & 0x80000000) == 0 && v175 >= 1 && __lda >= 1 && v173 >= 1) {
          BOOL v13 = *(_DWORD *)buf < 1;
        }
        if (v177 == -1) {
          BOOL v14 = v176 != 1;
        }
        else {
          BOOL v14 = v177 == 5;
        }
        if (v176) {
          BOOL v14 = 0;
        }
        if (v13 || v14) {
          goto LABEL_198;
        }
        BOOL v15 = 1;
        if ((v168 & 0x80000000) == 0 && v167 >= 1 && __ldb >= 1 && v165 >= 1) {
          BOOL v15 = v164 < 1;
        }
        if (v169 == -1) {
          BOOL v16 = v168 != 1;
        }
        else {
          BOOL v16 = v169 == 5;
        }
        if (v168) {
          BOOL v16 = 0;
        }
        if (v15 || v16) {
          goto LABEL_198;
        }
        int v17 = v160;
        int v18 = v159;
        BOOL v19 = 1;
        int v20 = __ldc;
        if ((v160 & 0x80000000) == 0 && v159 >= 1 && __ldc >= 1 && v157 >= 1) {
          BOOL v19 = v156 < 1;
        }
        if (v161 == -1) {
          BOOL v21 = v160 != 1;
        }
        else {
          BOOL v21 = v161 == 5;
        }
        if (v160) {
          BOOL v21 = 0;
        }
        if (v19 || v21) {
          goto LABEL_198;
        }
        if (a1[280])
        {
          if (*(int *)buf > 1 || v164 > 1 || v173 > 1 || v165 >= 2) {
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("batch_matmul_kernel_cpu: Channel mode not available for 4D+ tensors");
          }
          if (v168 != 1 && v176 != 1 && v176 != v168)
          {
            unsigned int v47 = "batch_matmul_kernel_cpu: Sequence dimensions do not match";
LABEL_274:
            Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v47);
          }
          if (a1[281])
          {
            if (a1[282])
            {
              if (v175 == __ldb) {
                goto LABEL_61;
              }
              goto LABEL_118;
            }
            if (v175 != v167)
            {
LABEL_118:
              unsigned int v47 = "Not compatible for multiplication";
              goto LABEL_274;
            }
          }
          else if (a1[282])
          {
            if (__lda != __ldb) {
              goto LABEL_118;
            }
          }
          else if (__lda != v167)
          {
            goto LABEL_118;
          }
LABEL_61:
          if (v160 >= 1)
          {
            uint64_t v22 = 0;
            uint64_t v23 = 0;
            int v24 = v173 * *(_DWORD *)buf * v175 * __lda;
            int v25 = v165 * v164 * v167 * __ldb;
            uint64_t v26 = 4 * __ldc * v159 * v157 * v156;
            do
            {
              if (v176 == 1) {
                int v27 = 0;
              }
              else {
                int v27 = v23;
              }
              uint64_t v28 = (const float *)(*(void *)(v11 + 24) + 4 * v24 * v27);
              if (v168 == 1) {
                int v29 = 0;
              }
              else {
                int v29 = v23;
              }
              if (a1[282]) {
                CBLAS_TRANSPOSE v30 = CblasTrans;
              }
              else {
                CBLAS_TRANSPOSE v30 = CblasNoTrans;
              }
              if (a1[282]) {
                int v31 = v167;
              }
              else {
                int v31 = __ldb;
              }
              if (a1[281]) {
                CBLAS_TRANSPOSE v32 = CblasTrans;
              }
              else {
                CBLAS_TRANSPOSE v32 = CblasNoTrans;
              }
              if (a1[281]) {
                int v33 = __lda;
              }
              else {
                int v33 = v175;
              }
              if (a1[281]) {
                int v34 = v175;
              }
              else {
                int v34 = __lda;
              }
              cblas_sgemm(CblasRowMajor, v32, v30, v33, v31, v34, 1.0, v28, __lda, (const float *)(*(void *)(v10 + 24) + 4 * v25 * v29), __ldb, 0.0, (float *)(*(void *)(v12 + 24) + v22), __ldc);
              ++v23;
              v22 += v26;
            }
            while (v23 < v160);
          }
LABEL_198:
          if (v162)
          {
            int v163 = v162;
            operator delete(v162);
          }
          if (v170)
          {
            uint64_t v171 = v170;
            operator delete(v170);
          }
          if (__p)
          {
            uint64_t v179 = __p;
            operator delete(__p);
          }
          goto LABEL_204;
        }
        if (__ldb != 1 && __lda != 1 && __lda != __ldb
          || v167 != 1 && v175 != 1 && v175 != v167
          || v168 != 1 && v176 != 1 && v176 != v168)
        {
LABEL_109:
          Espresso::abstract_blob_container::shape(v152, **(void **)a3);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v145, (const Espresso::layer_shape *)v152, 0);
          Espresso::layer_nd_shape::shape_vector(&v155, (uint64_t)v145);
          if (v153)
          {
            uint64_t v154 = v153;
            operator delete(v153);
          }
          uint64_t v131 = *(void *)(v11 + 24);
          Espresso::abstract_blob_container::shape(v152, **a4);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v150, (const Espresso::layer_shape *)v152, 0);
          Espresso::layer_nd_shape::shape_vector(&v151, (uint64_t)v150);
          int v41 = a1[281];
          uint64_t v129 = *(void *)(v10 + 24);
          Espresso::abstract_blob_container::shape(v145, (*a4)[2]);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v148, (const Espresso::layer_shape *)v145, 0);
          Espresso::layer_nd_shape::shape_vector(&v149, (uint64_t)v148);
          int v42 = a1[282];
          uint64_t v127 = *(void *)(v12 + 24);
          v43.__i_ = v151.__begin_;
          if ((std::vector<int>::pointer)((char *)v151.__end_ - (char *)v151.__begin_) == (std::vector<int>::pointer)4)
          {
            LODWORD(__x.__begin_) = 1;
            std::vector<int>::insert(&v151, v43, (std::vector<int>::value_type *)&__x);
          }
          begifloat n = v149.__begin_;
          end = v149.__end_;
          std::vector<int>::size_type v46 = v149.__end_ - v149.__begin_;
          if ((std::vector<int>::pointer)((char *)v149.__end_ - (char *)v149.__begin_) == (std::vector<int>::pointer)4)
          {
            if (v149.__end_ >= v149.__end_cap_.__value_)
            {
              int64_t v48 = (char *)v149.__end_cap_.__value_ - (char *)v149.__begin_;
              if (((char *)v149.__end_cap_.__value_ - (char *)v149.__begin_) >> 1 <= v46 + 1) {
                uint64_t v49 = v46 + 1;
              }
              else {
                uint64_t v49 = v48 >> 1;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v49;
              }
              int v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v50);
              std::vector<int>::pointer v52 = v149.__begin_;
              std::vector<int>::pointer v53 = v149.__end_;
              uint64_t v54 = (int *)&v51[4 * v46];
              uint64_t v56 = (int *)&v51[4 * v55];
              *uint64_t v54 = 1;
              end = v54 + 1;
              while (v53 != v52)
              {
                int v57 = *--v53;
                *--uint64_t v54 = v57;
              }
              v149.__begin_ = v54;
              v149.__end_ = end;
              v149.__end_cap_.__value_ = v56;
              if (v52) {
                operator delete(v52);
              }
            }
            else
            {
              *v149.__end_ = 1;
              ++end;
            }
            v149.__end_ = end;
            begifloat n = v149.__begin_;
            std::vector<int>::size_type v46 = end - v149.__begin_;
          }
          std::vector<int>::pointer v137 = v151.__begin_;
          std::vector<int>::pointer v139 = v151.__end_;
          int64_t v58 = (char *)v151.__end_ - (char *)v151.__begin_;
          std::vector<int>::pointer v60 = v155.__begin_;
          std::vector<int>::pointer v59 = v155.__end_;
          uint64_t v61 = -2;
          if (v41) {
            uint64_t v62 = -1;
          }
          else {
            uint64_t v62 = -2;
          }
          uint64_t v63 = v62 + (v58 >> 2);
          if (v41) {
            uint64_t v64 = -2;
          }
          else {
            uint64_t v64 = -1;
          }
          int __M = v151.__begin_[v63];
          int __K = v151.__begin_[v64 + (v58 >> 2)];
          if (!v42) {
            uint64_t v61 = -1;
          }
          int __N = begin[v46 + v61];
          std::vector<int>::size_type v65 = v58 >> 2;
          *(void *)BOOL v197 = 0;
          std::vector<int>::vector(&__x, v58 >> 2);
          std::vector<int>::vector(&v195, v46);
          std::vector<int>::vector(&v194, v65);
          std::vector<int>::vector(&v193, v46);
          std::vector<int>::size_type v66 = v59 - v60;
          std::vector<int>::vector(&v192, v66);
          id v67 = v155.__begin_;
          float v135 = end;
          for (unint64_t i = 1; v67 != v155.__end_; i *= v69)
            uint64_t v69 = *v67++;
          std::vector<int>::pointer v133 = begin;
          if (v41) {
            int v70 = 112;
          }
          else {
            int v70 = 111;
          }
          CBLAS_TRANSPOSE __TransA = v70;
          if (v42) {
            CBLAS_TRANSPOSE v71 = CblasTrans;
          }
          else {
            CBLAS_TRANSPOSE v71 = CblasNoTrans;
          }
          NDShapeUtils::compute_strides((uint64_t)v151.__begin_, (uint64_t)v151.__end_, (uint64_t)__x.__begin_, (uint64_t)__x.__end_);
          NDShapeUtils::compute_strides((uint64_t)v149.__begin_, (uint64_t)v149.__end_, (uint64_t)v195.__begin_, (uint64_t)v195.__end_);
          if (i)
          {
            uint64_t v72 = 0;
            uint64_t v73 = 0;
            std::vector<int>::size_type v74 = v66;
            std::vector<int>::size_type v75 = v66 - v65;
            std::vector<int>::size_type v76 = v74 - v46;
            std::vector<int>::size_type v77 = v74 - 1;
            if (v65 <= 1) {
              uint64_t v78 = 1;
            }
            else {
              uint64_t v78 = v65;
            }
            std::vector<int>::size_type v79 = v46;
            BOOL v80 = v46 > 1;
            std::vector<int>::size_type v81 = v46 - 1;
            if (v80) {
              uint64_t v82 = v79;
            }
            else {
              uint64_t v82 = 1;
            }
            uint64_t v119 = v82;
            uint64_t v121 = v78;
            do
            {
              NDShapeUtils::unravel_index(v72, (uint64_t)v155.__begin_, (uint64_t)v155.__end_, v192.__begin_, (uint64_t)v192.__end_);
              std::vector<int>::pointer v83 = v192.__begin_;
              std::vector<int>::pointer v84 = &v192.__begin_[v75];
              if (v192.__end_ != v84)
              {
                memmove(v194.__begin_, v84, (char *)v192.__end_ - (char *)v84);
                std::vector<int>::pointer v83 = v192.__begin_;
                std::vector<int>::pointer v84 = v192.__end_;
              }
              std::vector<int>::pointer v85 = &v83[v76];
              if (v84 != v85) {
                memmove(v193.__begin_, v85, (char *)v84 - (char *)v85);
              }
              if (v139 != v137)
              {
                std::vector<int>::pointer v86 = v151.__begin_;
                std::vector<int>::pointer v87 = v194.__begin_;
                uint64_t v88 = v121;
                do
                {
                  int v89 = *v86++;
                  if (v89 == 1) {
                    *std::vector<int>::pointer v87 = 0;
                  }
                  ++v87;
                  --v88;
                }
                while (v88);
              }
              if (v135 != v133)
              {
                std::vector<int>::pointer v90 = v149.__begin_;
                std::vector<int>::pointer v91 = v193.__begin_;
                uint64_t v92 = v119;
                do
                {
                  int v93 = *v90++;
                  if (v93 == 1) {
                    *std::vector<int>::pointer v91 = 0;
                  }
                  ++v91;
                  --v92;
                }
                while (v92);
              }
              uint64_t v189 = 0;
              BOOL v190 = 0;
              uint64_t v191 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v189, __x.__begin_, (uint64_t)__x.__end_, __x.__end_ - __x.__begin_);
              NDShapeUtils::ravel_multi_index(v194.__begin_, (uint64_t)v194.__end_, (uint64_t)v151.__begin_, (uint64_t)v151.__end_, v189, &v197[1]);
              if (v189)
              {
                BOOL v190 = v189;
                operator delete(v189);
              }
              int v187 = 0;
              int v186 = 0;
              uint64_t v188 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v186, v195.__begin_, (uint64_t)v195.__end_, v195.__end_ - v195.__begin_);
              NDShapeUtils::ravel_multi_index(v193.__begin_, (uint64_t)v193.__end_, (uint64_t)v149.__begin_, (uint64_t)v149.__end_, (int *)v186, v197);
              if (v186)
              {
                int v187 = v186;
                operator delete(v186);
              }
              cblas_sgemm(CblasRowMajor, __TransA, v71, __M, __N, __K, 1.0, (const float *)(v131 + 4 * v197[1]), v151.__begin_[v65 - 1], (const float *)(v129 + 4 * v197[0]), v149.__begin_[v81], 0.0, (float *)(v127 + 4 * v73), v155.__begin_[v77]);
              uint64_t v72 = (v72 + __N * __M);
              uint64_t v73 = (int)v72;
            }
            while (i > (int)v72);
          }
          if (v192.__begin_)
          {
            v192.__end_ = v192.__begin_;
            operator delete(v192.__begin_);
          }
          if (v193.__begin_)
          {
            v193.__end_ = v193.__begin_;
            operator delete(v193.__begin_);
          }
          if (v194.__begin_)
          {
            v194.__end_ = v194.__begin_;
            operator delete(v194.__begin_);
          }
          if (v195.__begin_)
          {
            v195.__end_ = v195.__begin_;
            operator delete(v195.__begin_);
          }
          if (__x.__begin_)
          {
            __x.__end_ = __x.__begin_;
            operator delete(__x.__begin_);
          }
          if (v149.__begin_)
          {
            v149.__end_ = v149.__begin_;
            operator delete(v149.__begin_);
          }
          if (v146)
          {
            BOOL v147 = v146;
            operator delete(v146);
          }
          if (v151.__begin_)
          {
            v151.__end_ = v151.__begin_;
            operator delete(v151.__begin_);
          }
          if (v153)
          {
            uint64_t v154 = v153;
            operator delete(v153);
          }
          if (v155.__begin_)
          {
            v155.__end_ = v155.__begin_;
            operator delete(v155.__begin_);
          }
          goto LABEL_198;
        }
        if (a1[281])
        {
          if (a1[282])
          {
            int v94 = v173;
            if (v173 != v164) {
              goto LABEL_109;
            }
LABEL_222:
            if (v160 >= 1)
            {
              uint64_t v95 = 0;
              uint64_t v96 = 0;
              int v97 = *(_DWORD *)buf * v173;
              int v98 = v94 * v165;
              int v136 = *(_DWORD *)buf * v173 * __lda;
              int v120 = v136 * v175;
              uint64_t v122 = 4 * v159 * __ldc * v156 * v157;
              int v134 = v94 * v165 * __ldb;
              int v118 = v134 * v167;
              *(void *)vDSP_Length __Na = 4 * __ldc * v156 * v157;
              uint64_t v99 = 4 * v156 * v157;
              uint64_t v128 = v12;
              uint64_t v130 = v10;
              uint64_t v132 = v11;
              do
              {
                if (v176 == 1) {
                  int v100 = 0;
                }
                else {
                  int v100 = v96;
                }
                if (v168 == 1) {
                  int v101 = 0;
                }
                else {
                  int v101 = v96;
                }
                if (v18 >= 1)
                {
                  *(void *)__TransACGFloat a = v96;
                  *(void *)unsigned int __Ka = v95;
                  uint64_t v102 = 0;
                  uint64_t v140 = *(void *)(v11 + 24) + 4 * v120 * v100;
                  uint64_t v138 = *(void *)(v10 + 24) + 4 * v118 * v101;
                  float __C = (float *)(*(void *)(v12 + 24) + v95);
                  do
                  {
                    if (v175 == 1) {
                      int v104 = 0;
                    }
                    else {
                      int v104 = v102;
                    }
                    if (v167 == 1) {
                      int v105 = 0;
                    }
                    else {
                      int v105 = v102;
                    }
                    if (v20 >= 1)
                    {
                      uint64_t v106 = 0;
                      uint64_t v107 = v140 + 4 * v104 * v136;
                      uint64_t v108 = v138 + 4 * v105 * v134;
                      *(void *)__MCGFloat a = __C;
                      do
                      {
                        if (__lda == 1) {
                          int v109 = 0;
                        }
                        else {
                          int v109 = v106;
                        }
                        uint64_t v110 = (const float *)(v107 + 4 * v109 * v97);
                        if (__ldb == 1) {
                          int v111 = 0;
                        }
                        else {
                          int v111 = v106;
                        }
                        float __B = (const float *)(v108 + 4 * v111 * v98);
                        if (a1[282]) {
                          CBLAS_TRANSPOSE v113 = CblasTrans;
                        }
                        else {
                          CBLAS_TRANSPOSE v113 = CblasNoTrans;
                        }
                        if (a1[282]) {
                          int v114 = v165;
                        }
                        else {
                          int v114 = v164;
                        }
                        if (a1[281]) {
                          CBLAS_TRANSPOSE v115 = CblasTrans;
                        }
                        else {
                          CBLAS_TRANSPOSE v115 = CblasNoTrans;
                        }
                        if (a1[281]) {
                          int v116 = *(_DWORD *)buf;
                        }
                        else {
                          int v116 = v173;
                        }
                        if (a1[281]) {
                          int v117 = v173;
                        }
                        else {
                          int v117 = *(_DWORD *)buf;
                        }
                        cblas_sgemm(CblasRowMajor, v115, v113, v116, v114, v117, 1.0, v110, *(const int *)buf, __B, v164, 0.0, __C, v156);
                        ++v106;
                        int v20 = __ldc;
                        float __C = (float *)((char *)__C + v99);
                      }
                      while (v106 < __ldc);
                      int v18 = v159;
                      uint64_t v12 = v128;
                      uint64_t v10 = v130;
                      uint64_t v11 = v132;
                      float __C = *(float **)__Ma;
                    }
                    ++v102;
                    float __C = (float *)((char *)__C + *(void *)__Na);
                  }
                  while (v102 < v18);
                  int v17 = v160;
                  uint64_t v96 = *(void *)__TransAa;
                  uint64_t v95 = *(void *)__Ka;
                }
                ++v96;
                v95 += v122;
              }
              while (v96 < v17);
            }
            goto LABEL_198;
          }
          if (v173 != v165) {
            goto LABEL_109;
          }
        }
        else
        {
          if (a1[282])
          {
            int v94 = v164;
            if (*(_DWORD *)buf != v164) {
              goto LABEL_109;
            }
            goto LABEL_222;
          }
          if (*(_DWORD *)buf != v165) {
            goto LABEL_109;
          }
        }
        int v94 = v164;
        goto LABEL_222;
      }
    }
  }
  Espresso::abstract_blob_container::shape((char *)buf, **a4);
  uint64_t v35 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  if (__p)
  {
    uint64_t v179 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)buf, (*a4)[2]);
  uint64_t v36 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  if (__p)
  {
    uint64_t v179 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)buf, **(void **)a3);
  uint64_t v38 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
  int v39 = (Espresso *)__p;
  if (__p)
  {
    uint64_t v179 = __p;
    operator delete(__p);
  }
  if (v35 && v36 && v38) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("batch_matmul_kernel_cpu: Need atleast one ");
  }
  {
    if (v39)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
      }
      Espresso::batch_matmul_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1E9306FC4;
    }
  }
  if (Espresso::batch_matmul_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
  {
    int v40 = Espresso::espresso_os_log_subsystem(v39, v37);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v40, OS_LOG_TYPE_DEBUG, "batch_matmul_kernel_cpu: Zero shaped input or output so skipping computation", buf, 2u);
    }
  }
LABEL_204:
  if (v181) {
    nitro::nitro_function::nitro_function(v181);
  }
  if (v183) {
    nitro::nitro_function::nitro_function(v183);
  }
  if (v185) {
    nitro::nitro_function::nitro_function(v185);
  }
}

void sub_192B64428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v72 = *(void **)(v70 - 192);
  if (v72)
  {
    *(void *)(v70 - 184) = v72;
    operator delete(v72);
  }
  uint64_t v73 = *(void **)(v70 - 168);
  if (v73)
  {
    *(void *)(v70 - 160) = v73;
    operator delete(v73);
  }
  std::vector<int>::size_type v74 = *(void **)(v70 - 144);
  if (v74)
  {
    *(void *)(v70 - 136) = v74;
    operator delete(v74);
  }
  std::vector<int>::size_type v75 = *(void **)(v70 - 120);
  if (v75)
  {
    *(void *)(v70 - 112) = v75;
    operator delete(v75);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a62) {
    operator delete(a62);
  }
  if (a70) {
    operator delete(a70);
  }
  std::vector<int>::size_type v76 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v76;
    operator delete(v76);
  }
  if (STACK[0x250]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x250]);
  }
  if (STACK[0x260]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x260]);
  }
  if (STACK[0x270]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x270]);
  }
  _Unwind_Resume(a1);
}

void Espresso::batch_matmul_kernel_cpu::~batch_matmul_kernel_cpu(Espresso::batch_matmul_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::tensor_zero_pad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (a3[1] == *a3) {
    long long v188 = 0uLL;
  }
  else {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v188, *a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v186 = 0;
    int v187 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v186, *(uint64_t **)a4);
  }
  if (*(unsigned char *)(a1 + 280))
  {
    Espresso::abstract_blob_container::shape(v182, **(void **)a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v167, (const Espresso::layer_shape *)v182, 0);
    if (v184)
    {
      int v185 = v184;
      operator delete(v184);
    }
    Espresso::layer_nd_shape::shape_vector(&v181, (uint64_t)v167);
    begifloat n = v181.__begin_;
    std::vector<int>::pointer end = v181.__end_;
    int64_t v9 = (char *)v181.__end_ - (char *)v181.__begin_;
    std::vector<int>::size_type v10 = ((char *)v181.__end_ - (char *)v181.__begin_) >> 1;
    std::vector<int>::vector(&v180, v10);
    unint64_t v11 = v9 >> 2;
    std::vector<int>::vector(&v179, v9 >> 2);
    if (*(void *)(a4 + 8) - *(void *)a4 <= 0x10uLL)
    {
      if (end != begin)
      {
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        int v55 = *(unsigned __int8 *)(a1 + 544);
        std::vector<int>::pointer v56 = v181.__begin_;
        std::vector<int>::pointer v57 = v180.__begin_;
        if (v11 <= 1) {
          uint64_t v58 = 1;
        }
        else {
          uint64_t v58 = v9 >> 2;
        }
        do
        {
          uint64_t v59 = a1 + 4 * v53;
          int v60 = *(_DWORD *)(v59 + 288);
          if (v55)
          {
            v57[v53] = (v60 - *v56) & ~((v60 - *v56) >> 31);
            uint64_t v61 = (2 * v54) | 1;
            int v62 = *(_DWORD *)(v59 + 292) - *v56;
          }
          else
          {
            v57[v53] = v60 & ~(v60 >> 31);
            uint64_t v61 = v53 + 1;
            int v62 = *(_DWORD *)(v59 + 292);
          }
          v57[v61] = v62 & ~(v62 >> 31);
          ++v54;
          ++v56;
          v53 += 2;
          --v58;
        }
        while (v58);
      }
      Espresso::abstract_blob_container::shape(v182, **a3);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v170, (const Espresso::layer_shape *)v182, 0);
      Espresso::layer_nd_shape::shape_vector((std::vector<int> *)__x, (uint64_t)&v170);
      if (v179.__begin_)
      {
        v179.__end_ = v179.__begin_;
        operator delete(v179.__begin_);
      }
      std::vector<int>::pointer v63 = *(std::vector<int>::pointer *)__x;
      std::vector<int> v179 = *(std::vector<int> *)__x;
      uint64_t v64 = *(int **)&__x[8];
      memset(__x, 0, 24);
      if (v184)
      {
        int v185 = v184;
        operator delete(v184);
        std::vector<int>::pointer v63 = v179.__begin_;
        std::vector<int>::pointer v65 = v179.__end_;
      }
      else
      {
        std::vector<int>::pointer v65 = v64;
      }
      size_t v69 = (char *)v65 - (char *)v63;
      uint64_t v70 = v65 - v63;
      if (v70 != v11) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Output tensor rank: %zu is not equal to input rank: %zu", v70, v181.__end_ - v181.__begin_);
      }
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v170, (uint64_t *)(*(void *)a4 + 16));
      uint64_t v12 = 0;
      uint64_t v13 = *(int *)(v170 + 8);
      uint64_t v14 = v13;
      do
      {
        v14 *= *(int *)(v170 + 12 + v12);
        v12 += 4;
      }
      while (v12 != 12);
      if (v14 != v10)
      {
        for (uint64_t i = 0; i != 12; i += 4)
          v13 *= *(int *)(v170 + 12 + i);
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid pad tensor dimensions: %zu for input of rank:%zu", v13, v181.__end_ - v181.__begin_);
      }
      if (end != begin)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        int v17 = *(unsigned __int8 *)(a1 + 544);
        std::vector<int>::pointer v18 = v181.__begin_;
        std::vector<int>::pointer v19 = v180.__begin_;
        std::vector<int>::pointer v20 = v179.__begin_;
        if (v11 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v9 >> 2;
        }
        uint64_t v22 = *(void *)(v170 + 24);
        do
        {
          int v23 = (int)(float)(*(float *)(v22 + 4 * v15) + 0.5);
          if (v17)
          {
            int v24 = (int)(float)(*(float *)(v22 + 4 * v15 + 4) + 0.5);
            if (v23 >= 1 && v24 >= 1) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("constant_pad_kernel: values in pads cannot be both positive when 'pad_to_given_size_mode' flag is set.");
            }
            uint64_t v26 = (2 * v16) | 1;
            int v27 = (v23 - *v18) & ~((v23 - *v18) >> 31);
            v19[v15] = v27;
            int v28 = v24 - *v18;
          }
          else
          {
            int v27 = v23 & ~(v23 >> 31);
            v19[v15] = v27;
            uint64_t v26 = v15 + 1;
            int v28 = (int)(float)(*(float *)(v22 + 4 * v15 + 4) + 0.5);
          }
          int v29 = v28 & ~(v28 >> 31);
          v19[v26] = v29;
          int v30 = *v18++;
          *v20++ = v27 + v30 + v29;
          ++v16;
          v15 += 2;
          --v21;
        }
        while (v21);
      }
      memset(__x, 0, 24);
      std::vector<int>::pointer v31 = v179.__begin_;
      int64_t v32 = (char *)v179.__end_ - (char *)v179.__begin_;
      if (v179.__end_ != v179.__begin_)
      {
        uint64_t v33 = v32 >> 2;
        if ((unint64_t)(v32 >> 2) <= 1) {
          uint64_t v33 = 1;
        }
        int v34 = __x;
        do
        {
          int v35 = *v31++;
          *v34++ = v35;
          --v33;
        }
        while (v33);
      }
      *(_DWORD *)&__x[20] = (unint64_t)v32 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)__x, 0, (uint64_t)v182);
      Espresso::abstract_blob_container::shape(__x, **a3);
      BOOL v36 = Espresso::layer_shape::operator==((uint64_t)__x, (uint64_t)v182);
      if (__p)
      {
        int v177 = __p;
        operator delete(__p);
      }
      if (!v36)
      {
        int v37 = (std::__shared_weak_count *)operator new(0x98uLL);
        v37->__shared_weak_owners_ = 0;
        v37->__shared_owners_ = 0;
        v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
        *(_OWORD *)&v37[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v37[3].__shared_owners_ = 0u;
        *(_OWORD *)&v37[1].__shared_owners_ = 0u;
        v37[2].std::__shared_count = 0u;
        v37[4].std::__shared_count = 0u;
        *(_OWORD *)&v37[4].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v37[5].__shared_owners_ = 0u;
        v37[5].__shared_weak_owners_ = 0;
        v37[6].__vftable = 0;
        LODWORD(v37[2].__vftable) = 1065353216;
        v37[2].__shared_owners_ = 0x1FFFFFFFFLL;
        v37[4].__vftable = 0;
        v37[4].__shared_owners_ = 0;
        v37[2].__shared_weak_owners_ = 0;
        v37[3].__vftable = 0;
        LOBYTE(v37[3].__shared_weak_owners_) = 0;
        v37[3].__shared_owners_ = 0;
        v37[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
        v37[5].__vftable = 0;
        v37[5].__shared_owners_ = 0;
        LOBYTE(v37[6].__vftable) = 0;
        LOBYTE(v37[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
        uint64_t v38 = **a3;
        uint64_t v172 = v37 + 1;
        int v173 = v37;
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, unsigned char *, std::__shared_weak_count **))(*(void *)v38 + 16))(v38, v182, &v172);
        if (v173) {
          nitro::nitro_function::nitro_function(v173);
        }
        if (a3[1] == *a3)
        {
          long long v39 = 0uLL;
        }
        else
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(__x, *a3);
          long long v39 = *(_OWORD *)__x;
        }
        uint64_t v106 = (std::__shared_weak_count *)*((void *)&v188 + 1);
        long long v188 = v39;
        if (v106) {
          nitro::nitro_function::nitro_function(v106);
        }
        nitro::nitro_function::nitro_function(v37);
      }
      if (v184)
      {
        int v185 = v184;
        operator delete(v184);
      }
      if (v171) {
        nitro::nitro_function::nitro_function(v171);
      }
      std::vector<int>::pointer v63 = v179.__begin_;
      size_t v69 = (char *)v179.__end_ - (char *)v179.__begin_;
    }
    if (v69 == (char *)v181.__end_ - (char *)v181.__begin_ && !memcmp(v63, v181.__begin_, v69))
    {
      uint64_t v156 = 0;
      uint64_t v157 = *(int *)(v188 + 8);
      do
      {
        v157 *= *(int *)(v188 + 12 + v156);
        v156 += 4;
      }
      while (v156 != 12);
      memcpy(*(void **)(v188 + 24), *(const void **)(v186 + 24), 4 * v157);
    }
    else
    {
      *(_DWORD *)std::vector<int> __x = 1;
      std::vector<int>::vector((std::vector<int> *)v182, v9 >> 2, (const std::vector<int>::value_type *)__x);
      if ((int)((unint64_t)v9 >> 2) >= 2)
      {
        uint64_t v107 = *(void *)v182;
        std::vector<int>::pointer v108 = v179.__begin_;
        std::vector<int>::pointer v109 = v180.__begin_;
        uint64_t v110 = 4 * (v11 - 2) + 4;
        int v111 = 2 * ((unint64_t)v9 >> 2);
        int v112 = v111 - 4;
        do
        {
          int v113 = *(std::vector<int>::pointer)((char *)v108 + v110) * *(_DWORD *)(v107 + v110);
          *(_DWORD *)(v107 + v110 - 4) = v113;
          v109[v112] *= v113;
          v109[v112 + 1] *= *(_DWORD *)(v107 + v110 - 4);
          v112 -= 2;
          v110 -= 4;
        }
        while (v110);
        uint64_t v114 = ((unint64_t)v9 >> 2);
        int v115 = v111 - 1;
        do
        {
          uint64_t v116 = (v115 - 1);
          std::vector<int>::pointer v117 = v180.__begin_;
          int v118 = &v180.__begin_[v116];
          if (*v118 || v180.__begin_[v115]) {
            break;
          }
          uint64_t v119 = v118 + 1;
          int v120 = (char *)((char *)v180.__end_ - (char *)(v118 + 2));
          if (v180.__end_ != v118 + 2)
          {
            memmove(v119, v118 + 2, (char *)v180.__end_ - (char *)(v118 + 2));
            std::vector<int>::pointer v117 = v180.__begin_;
          }
          uint64_t v121 = &v120[(void)v119];
          v180.__end_ = (std::vector<int>::pointer)&v120[(void)v119];
          uint64_t v122 = &v117[v116];
          int64_t v123 = v121 - (char *)(v122 + 1);
          if (v121 != (char *)(v122 + 1)) {
            memmove(&v117[v116], v122 + 1, v121 - (char *)(v122 + 1));
          }
          uint64_t v124 = v114 - 1;
          v180.__end_ = (int *)((char *)v122 + v123);
          int v125 = &v179.__begin_[(v114 - 1)];
          uint64_t v126 = (v114 - 2);
          v179.__begin_[v126] *= *v125;
          uint64_t v127 = (char *)((char *)v179.__end_ - (char *)(v125 + 1));
          if (v179.__end_ != v125 + 1) {
            memmove(v125, v125 + 1, (char *)v179.__end_ - (char *)(v125 + 1));
          }
          v179.__end_ = (std::vector<int>::pointer)&v127[(void)v125];
          std::vector<int>::pointer v128 = v181.__begin_;
          uint64_t v129 = &v181.__begin_[v124];
          v181.__begin_[v126] *= *v129;
          uint64_t v130 = (char *)((char *)v181.__end_ - (char *)(v129 + 1));
          if (v181.__end_ != v129 + 1) {
            memmove(&v128[v124], v129 + 1, (char *)v181.__end_ - (char *)(v129 + 1));
          }
          v181.__end_ = (std::vector<int>::pointer)&v130[(void)v129];
          v115 -= 2;
          uint64_t v114 = v124;
        }
        while ((unint64_t)(v124 + 1) > 2);
      }
      std::vector<int>::pointer v132 = v179.__begin_;
      std::vector<int>::pointer v131 = v179.__end_;
      unint64_t v133 = (char *)v179.__end_ - (char *)v179.__begin_;
      unint64_t v134 = v179.__end_ - v179.__begin_;
      std::vector<unsigned long>::vector(__x, v134);
      std::vector<int>::pointer v135 = v181.__begin_;
      uint64_t v136 = *(void *)__x;
      *(void *)(*(void *)__x + 8 * (v134 - 1)) = v181.__begin_[v134 - 1];
      if ((int)(v133 >> 2) >= 2)
      {
        uint64_t v137 = (v134 - 2);
        uint64_t v138 = *(void *)(v136 + 8 * v137 + 8);
        do
        {
          v138 *= v135[v137];
          *(void *)(v136 + 8 * v137--) = v138;
        }
        while (v137 != -1);
      }
      uint64_t v139 = 0;
      uint64_t v140 = v186;
      uint64_t v141 = *(char **)(v186 + 24);
      uint64_t v142 = *(char **)(v188 + 24);
      vDSP_Length v143 = *(int *)(v188 + 8);
      do
      {
        v143 *= *(int *)(v188 + 12 + v139);
        v139 += 4;
      }
      while (v139 != 12);
      vDSP_vfill((const float *)(a1 + 284), *(float **)(v188 + 24), 1, v143);
      uint64_t v144 = 0;
      uint64_t v145 = v181.__begin_[v134 - 1];
      unint64_t v146 = *(int *)(v140 + 8);
      do
      {
        v146 *= *(int *)(v140 + 12 + v144);
        v144 += 4;
      }
      while (v144 != 12);
      if (v146)
      {
        unint64_t v147 = 0;
        if (v134 <= 1) {
          unint64_t v134 = 1;
        }
        do
        {
          if (v131 == v132)
          {
            memcpy(v142, v141, 4 * v145);
            v142 += 4 * v145;
            v147 += v145;
          }
          else
          {
            BOOL v148 = *(unint64_t **)__x;
            std::vector<int>::pointer v149 = v180.__begin_;
            unint64_t v150 = v134;
            do
            {
              unint64_t v151 = *v148++;
              if (!(v147 % v151)) {
                v142 += 4 * *v149;
              }
              v149 += 2;
              --v150;
            }
            while (v150);
            memcpy(v142, v141, 4 * v145);
            v142 += 4 * v145;
            v147 += v145;
            uint64_t v152 = *(unint64_t **)__x;
            std::vector<int>::pointer v153 = v180.__begin_ + 1;
            unint64_t v154 = v134;
            do
            {
              unint64_t v155 = *v152++;
              if (!(v147 % v155)) {
                v142 += 4 * *v153;
              }
              v153 += 2;
              --v154;
            }
            while (v154);
          }
          v141 += 4 * v145;
        }
        while (v147 < v146);
      }
      if (*(void *)__x)
      {
        *(void *)&__x[8] = *(void *)__x;
        operator delete(*(void **)__x);
      }
      if (*(void *)v182)
      {
        *(void *)&v182[8] = *(void *)v182;
        operator delete(*(void **)v182);
      }
    }
    if (v179.__begin_)
    {
      v179.__end_ = v179.__begin_;
      operator delete(v179.__begin_);
    }
    if (v180.__begin_)
    {
      v180.__end_ = v180.__begin_;
      operator delete(v180.__begin_);
    }
    if (v181.__begin_)
    {
      v181.__end_ = v181.__begin_;
      operator delete(v181.__begin_);
    }
  }
  else
  {
    if (*(void *)(a4 + 8) - *(void *)a4 <= 0x1FuLL) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("tensor_pad kernel must have atleast two inputs");
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v181, (uint64_t *)(*(void *)a4 + 16));
    Espresso::abstract_blob_container::shape(v182, **(void **)a4);
    *(_OWORD *)std::vector<int> __x = *(_OWORD *)v182;
    *(_OWORD *)&__x[16] = *(_OWORD *)&v182[16];
    uint64_t v175 = v183;
    long long __p = 0;
    int v177 = 0;
    uint64_t v178 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v184, (uint64_t)v185, (v185 - v184) >> 2);
    uint64_t v40 = 0;
    uint64_t v41 = v181.__begin_[2];
    uint64_t v42 = v41;
    do
    {
      v42 *= v181.__begin_[v40 + 3];
      ++v40;
    }
    while (v40 != 3);
    if (v42 != 10)
    {
      for (uint64_t j = 0; j != 3; ++j)
        v41 *= v181.__begin_[j + 3];
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Invalid pad tensor dimensions: %zu", v41);
    }
    std::vector<int>::const_iterator v43 = (float32x4_t *)*((void *)v181.__begin_ + 3);
    int v44 = (int)(float)(v43[2].f32[0] + 0.5);
    int v45 = (int)(float)(v43[2].f32[1] + 0.5);
    int v46 = (int)(float)(v43[1].f32[0] + 0.5);
    int v47 = (int)(float)(v43[1].f32[1] + 0.5);
    v48.i64[0] = 0x3F0000003F000000;
    v48.i64[1] = 0x3F0000003F000000;
    int8x16_t v49 = (int8x16_t)vcvtq_s32_f32(vaddq_f32(*v43, v48));
    int32x2_t v50 = (int32x2_t)vextq_s8(v49, v49, 4uLL).u64[0];
    v48.i64[0] = __PAIR64__(v50.u32[1], *(unsigned int *)__x);
    int32x4_t v163 = (int32x4_t)v49;
    v49.i32[1] = vextq_s8(v49, v49, 8uLL).i32[1];
    v50.i32[1] = *(_DWORD *)&__x[4];
    int v161 = (int)(float)(v43[1].f32[3] + 0.5);
    int v162 = (int)(float)(v43[1].f32[2] + 0.5);
    *(int32x2_t *)std::vector<int> __x = vadd_s32(vadd_s32(*(int32x2_t *)v48.f32, *(int32x2_t *)v49.i8), v50);
    *(_DWORD *)&__x[8] += v47 + v46;
    *(_DWORD *)&__x[12] += v161 + v162;
    *(_DWORD *)&__x[16] += v45 + v44;
    Espresso::abstract_blob_container::shape(v167, **a3);
    BOOL v51 = Espresso::layer_shape::operator==((uint64_t)v167, (uint64_t)__x);
    if (v168)
    {
      int v169 = v168;
      operator delete(v168);
    }
    if (v51)
    {
      uint64_t v52 = v188;
    }
    else
    {
      std::vector<int>::size_type v66 = (std::__shared_weak_count *)operator new(0x98uLL);
      v66->__shared_weak_owners_ = 0;
      v66->__shared_owners_ = 0;
      v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
      *(_OWORD *)&v66[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v66[3].__shared_owners_ = 0u;
      *(_OWORD *)&v66[1].__shared_owners_ = 0u;
      v66[2].std::__shared_count = 0u;
      v66[4].std::__shared_count = 0u;
      *(_OWORD *)&v66[4].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v66[5].__shared_owners_ = 0u;
      v66[5].__shared_weak_owners_ = 0;
      v66[6].__vftable = 0;
      LODWORD(v66[2].__vftable) = 1065353216;
      v66[2].__shared_owners_ = 0x1FFFFFFFFLL;
      v66[4].__vftable = 0;
      v66[4].__shared_owners_ = 0;
      v66[2].__shared_weak_owners_ = 0;
      v66[3].__vftable = 0;
      LOBYTE(v66[3].__shared_weak_owners_) = 0;
      v66[3].__shared_owners_ = 0;
      v66[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
      v66[5].__vftable = 0;
      v66[5].__shared_owners_ = 0;
      LOBYTE(v66[6].__vftable) = 0;
      LOBYTE(v66[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
      uint64_t v67 = **a3;
      int v165 = v66 + 1;
      uint64_t v166 = v66;
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      (*(void (**)(uint64_t, unsigned char *, std::__shared_weak_count **))(*(void *)v67 + 16))(v67, __x, &v165);
      if (v166) {
        nitro::nitro_function::nitro_function(v166);
      }
      if (a3[1] == *a3)
      {
        long long v68 = 0uLL;
      }
      else
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v167, *a3);
        long long v68 = *(_OWORD *)v167;
      }
      CBLAS_TRANSPOSE v71 = (std::__shared_weak_count *)*((void *)&v188 + 1);
      long long v188 = v68;
      if (v71)
      {
        uint64_t v160 = v68;
        nitro::nitro_function::nitro_function(v71);
        *(void *)&long long v68 = v160;
      }
      uint64_t v52 = v68;
      nitro::nitro_function::nitro_function(v66);
    }
    uint64_t v72 = *(int **)(v186 + 24);
    uint64_t v73 = *(char **)(v52 + 24);
    int v74 = *(_DWORD *)&__x[4] * *(_DWORD *)__x;
    uint64_t v75 = *(_DWORD *)&__x[4] * *(_DWORD *)__x * v44 * *(_DWORD *)&__x[8] * *(_DWORD *)&__x[12];
    bzero(v73, 4 * v75);
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v163, v163))))
    {
      if (*(_DWORD *)&v182[16])
      {
        uint64_t v76 = 0;
        uint64_t v77 = v163.i32[0];
        uint64_t v78 = &v73[4 * v75];
        do
        {
          uint64_t v164 = v76;
          int v79 = *(_DWORD *)__x * v162 * *(_DWORD *)&__x[4] * *(_DWORD *)&__x[8];
          bzero(v78, 4 * v79);
          BOOL v80 = &v78[4 * v79];
          if (*(_DWORD *)&v182[12])
          {
            unint64_t v81 = 0;
            do
            {
              int v82 = *(_DWORD *)__x * v46 * *(_DWORD *)&__x[4];
              bzero(v80, 4 * v82);
              std::vector<int>::pointer v83 = &v80[4 * v82];
              if (*(_DWORD *)&v182[8])
              {
                unint64_t v84 = 0;
                do
                {
                  int v85 = *(_DWORD *)__x * v163.i32[2];
                  bzero(v83, 4 * *(_DWORD *)__x * v163.i32[2]);
                  std::vector<int>::pointer v86 = &v83[4 * v85];
                  if (*(_DWORD *)&v182[4])
                  {
                    unint64_t v87 = 0;
                    int v88 = *(_DWORD *)v182;
                    do
                    {
                      memcpy(&v86[4 * v77], v72, 4 * v88);
                      int v89 = *(_DWORD *)__x;
                      v86 += 4 * *(int *)__x;
                      int v88 = *(_DWORD *)v182;
                      v72 += *(int *)v182;
                      ++v87;
                    }
                    while (v87 < *(int *)&v182[4]);
                  }
                  else
                  {
                    int v89 = *(_DWORD *)__x;
                  }
                  int v90 = v89 * v163.i32[3];
                  bzero(v86, 4 * v89 * v163.i32[3]);
                  std::vector<int>::pointer v83 = &v86[4 * v90];
                  ++v84;
                }
                while (v84 < *(int *)&v182[8]);
              }
              int v91 = *(_DWORD *)__x * v47 * *(_DWORD *)&__x[4];
              bzero(v83, 4 * v91);
              BOOL v80 = &v83[4 * v91];
              ++v81;
            }
            while (v81 < *(int *)&v182[12]);
          }
          int v92 = *(_DWORD *)__x * v161 * *(_DWORD *)&__x[4] * *(_DWORD *)&__x[8];
          bzero(v80, 4 * v92);
          uint64_t v78 = &v80[4 * v92];
          uint64_t v76 = v164 + 1;
        }
        while (v164 + 1 < (unint64_t)*(int *)&v182[16]);
      }
    }
    else if (*(_DWORD *)&v182[16])
    {
      unint64_t v93 = 0;
      uint64_t v94 = v74;
      uint64_t v95 = &v73[4 * v75];
      do
      {
        int v96 = *(_DWORD *)v182 * v162 * *(_DWORD *)&__x[4] * *(_DWORD *)&__x[8];
        bzero(v95, 4 * v96);
        int v97 = &v95[4 * v96];
        if (*(_DWORD *)&v182[12])
        {
          unint64_t v98 = 0;
          do
          {
            int v99 = *(_DWORD *)v182 * v46 * *(_DWORD *)&__x[4];
            bzero(v97, 4 * v99);
            int v100 = &v97[4 * v99];
            int v101 = *(_DWORD *)&v182[8];
            if (*(_DWORD *)&v182[8])
            {
              unint64_t v102 = 0;
              do
              {
                if (v94 == 1)
                {
                  int v103 = *v72++;
                  *(_DWORD *)int v100 = v103;
                  v100 += 4;
                }
                else
                {
                  memcpy(v100, v72, 4 * *(_DWORD *)v182 * *(_DWORD *)&v182[4]);
                  v100 += 4 * v94;
                  int v101 = *(_DWORD *)&v182[8];
                  v72 += v94;
                }
                ++v102;
              }
              while (v102 < v101);
            }
            int v104 = *(_DWORD *)__x * v47 * *(_DWORD *)&__x[4];
            bzero(v100, 4 * v104);
            int v97 = &v100[4 * v104];
            ++v98;
          }
          while (v98 < *(int *)&v182[12]);
        }
        int v105 = *(_DWORD *)__x * v161 * *(_DWORD *)&__x[4] * *(_DWORD *)&__x[8];
        bzero(v97, 4 * v105);
        uint64_t v95 = &v97[4 * v105];
        ++v93;
      }
      while (v93 < *(int *)&v182[16]);
    }
    if (__p)
    {
      int v177 = __p;
      operator delete(__p);
    }
    if (v184)
    {
      int v185 = v184;
      operator delete(v184);
    }
    if (v181.__end_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v181.__end_);
    }
  }
  if (v187) {
    nitro::nitro_function::nitro_function(v187);
  }
  if (*((void *)&v188 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v188 + 1));
  }
}

void sub_192B65530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  nitro::nitro_function::nitro_function(v41);
  int v44 = *(void **)(v42 - 152);
  if (v44)
  {
    *(void *)(v42 - 144) = v44;
    operator delete(v44);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (__p) {
    operator delete(__p);
  }
  int v45 = *(void **)(v42 - 240);
  if (v45)
  {
    *(void *)(v42 - 232) = v45;
    operator delete(v45);
  }
  int v46 = *(void **)(v42 - 216);
  if (v46)
  {
    *(void *)(v42 - 208) = v46;
    operator delete(v46);
  }
  int v47 = *(std::__shared_weak_count **)(v42 - 120);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  float32x4_t v48 = *(std::__shared_weak_count **)(v42 - 104);
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  _Unwind_Resume(a1);
}

void Espresso::tensor_zero_pad_kernel_cpu::~tensor_zero_pad_kernel_cpu(Espresso::tensor_zero_pad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::squeeze_kernel_cpu::~squeeze_kernel_cpu(Espresso::squeeze_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::expand_dims_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
}

void Espresso::expand_dims_kernel_cpu::~expand_dims_kernel_cpu(Espresso::expand_dims_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::array_gather_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v121, *a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v119, *a4 + 2);
  Espresso::abstract_blob_container::shape((char *)&v113, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v117, (const Espresso::layer_shape *)&v113, 0);
  if (__p)
  {
    uint64_t v116 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v113, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v107, (const Espresso::layer_shape *)&v113, 0);
  if (__p)
  {
    uint64_t v116 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 304))
  {
    if (*(void *)(a3 + 8) == *(void *)a3)
    {
      uint64_t v113 = 0;
      uint64_t v114 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v113, *(uint64_t **)a3);
    }
    int v8 = *(_DWORD *)(a1 + 300);
    uint64_t v9 = v112;
    if (v112)
    {
      std::vector<int>::size_type v10 = &v107;
      uint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v10++;
        v11 *= v12;
        --v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v11 = 1;
    }
    if (v8 < 1)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v13 = v117;
      uint64_t v14 = 1;
      uint64_t v15 = *(unsigned int *)(a1 + 300);
      do
      {
        uint64_t v16 = *v13++;
        v14 *= v16;
        --v15;
      }
      while (v15);
    }
    unsigned int v17 = v8 + 1;
    if (v118 <= v17)
    {
      uint64_t v19 = 1;
      if (!v14) {
        goto LABEL_42;
      }
    }
    else
    {
      std::vector<int>::pointer v18 = &v117[v17];
      uint64_t v19 = 1;
      do
      {
        uint64_t v20 = *v18++;
        v19 *= v20;
        ++v17;
      }
      while (v118 > v17);
      if (!v14) {
        goto LABEL_42;
      }
    }
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = (int)v117[*(int *)(a1 + 300)];
    uint64_t v96 = v121;
    uint64_t v98 = v113;
    uint64_t v24 = v119;
    uint64_t v101 = v14;
    do
    {
      if (v11 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = *(void *)(v96 + 24) + 4 * v22 * v19 * v23;
        int v27 = (char *)(*(void *)(v98 + 24) + v21);
        do
        {
          float v28 = *(float *)(*(void *)(v24 + 24) + 4 * v25);
          if (v28 >= 0.0) {
            float v29 = -0.0;
          }
          else {
            float v29 = (float)(int)v23;
          }
          uint64_t v30 = (int)(float)((float)(v28 + v29) + 0.5);
          if ((int)v23 <= (int)v30 || (v30 & 0x80000000) != 0) {
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Invalid index %d into axis of size %d\n", v30, v23);
          }
          std::vector<int>::pointer v31 = (char *)(v26 + 4 * v19 * v30);
          if (v27 != v31) {
            memcpy(v27, v31, 4 * v19);
          }
          ++v25;
          v27 += 4 * v19;
        }
        while (v11 != v25);
      }
      ++v22;
      v21 += 4 * v19 * v11;
    }
    while (v22 != v101);
LABEL_42:
    int64_t v32 = v114;
    if (!v114) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v112 > 3)
  {
    if (v112 == 5)
    {
      signed int v34 = v110;
      int v33 = v111;
      signed int v35 = v109;
    }
    else
    {
      if (v112 != 4) {
        goto LABEL_57;
      }
      signed int v34 = v109;
      int v33 = v110;
      signed int v35 = v108;
    }
    unsigned int v7 = v34 * v33 * v35;
    goto LABEL_56;
  }
  if (v112)
  {
    if (v112 == 2)
    {
      unsigned int v7 = v108;
    }
    else if (v112 == 1)
    {
      unsigned int v7 = v107;
    }
    else
    {
      unsigned int v7 = v109;
    }
LABEL_56:
    if (v7 >= 5) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("array_gather does not support indexing into 5D blobs");
    }
  }
LABEL_57:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v105, *(uint64_t **)a3);
  Espresso::abstract_blob_container::shape((char *)&v113, **(void **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v103, (const Espresso::layer_shape *)&v113, 0);
  if (__p)
  {
    uint64_t v116 = __p;
    operator delete(__p);
  }
  unint64_t v36 = 0;
  int v37 = (_DWORD *)**a4;
  int v38 = v37[2];
  int v39 = v37[3] * v38;
  int v40 = v39 * v37[4];
  unint64_t v90 = v108 * v107;
  unsigned int v86 = v108;
  unsigned int v87 = v107;
  unint64_t v95 = v107;
  uint64_t v93 = v119;
  unint64_t v41 = v112;
  int v83 = v110 * v111 * v109;
  unsigned int v84 = v109;
  int v88 = v109 * v110 * v108;
  unint64_t v85 = v108;
  unint64_t v82 = v109;
  uint64_t v102 = v121;
  uint64_t v42 = v105;
  int v91 = *(uint64_t **)a3;
  unint64_t v92 = v112;
  uint64_t v43 = v104;
  BOOL v89 = v104 != 5;
  uint64_t v94 = a1;
  while (v41 > 3)
  {
    unint64_t v44 = v95;
    if (v41 != 4)
    {
      if (v41 != 5) {
        goto LABEL_172;
      }
      unint64_t v44 = v90;
    }
LABEL_68:
    if (v44 <= v36) {
      goto LABEL_172;
    }
    if (v41 > 3)
    {
      if (v41 == 5) {
        unint64_t v45 = v83;
      }
      else {
        unint64_t v45 = v88;
      }
    }
    else
    {
      unint64_t v45 = v95;
      if (v41 != 1)
      {
        unint64_t v45 = v85;
        if (v41 != 2) {
          unint64_t v45 = v82;
        }
      }
    }
    int v46 = (float *)(*(void *)(v93 + 24) + 4 * v45 * v36);
    int v47 = *(_DWORD *)(a1 + 280);
    if (v47 == -2) {
      float v48 = *v46;
    }
    else {
      float v48 = (float)v47;
    }
    int v49 = *(_DWORD *)(a1 + 284);
    if (v49 == -2)
    {
      if (v41 > 3)
      {
        unsigned int v50 = v88;
        if (v41 != 4) {
          unsigned int v50 = v83;
        }
      }
      else
      {
        unsigned int v50 = v87;
        if (v41 != 1)
        {
          unsigned int v50 = v86;
          if (v41 != 2) {
            unsigned int v50 = v84;
          }
        }
      }
      float v51 = 0.0;
      if (v50 >= 2) {
        float v51 = v46[1];
      }
    }
    else
    {
      float v51 = (float)v49;
    }
    int v52 = (int)v51;
    int v53 = *(_DWORD *)(a1 + 288);
    if (v53 == -2)
    {
      if (v41 > 3)
      {
        if (v41 == 4) {
          unsigned int v54 = v88;
        }
        else {
          unsigned int v54 = v83;
        }
      }
      else
      {
        if (v41 == 2) {
          unsigned int v54 = v86;
        }
        else {
          unsigned int v54 = v84;
        }
        if (v41 == 1) {
          unsigned int v54 = v87;
        }
      }
      if (v54 < 3) {
        float v55 = 0.0;
      }
      else {
        float v55 = v46[2];
      }
      int v53 = -2;
    }
    else
    {
      float v55 = (float)v53;
    }
    int v56 = (int)v55;
    int v57 = *(_DWORD *)(a1 + 292);
    if (v57 == -2)
    {
      if (v41 > 3)
      {
        if (v41 == 4) {
          unsigned int v58 = v88;
        }
        else {
          unsigned int v58 = v83;
        }
      }
      else if (v41 == 1)
      {
        unsigned int v58 = v87;
      }
      else if (v41 == 2)
      {
        unsigned int v58 = v86;
      }
      else
      {
        unsigned int v58 = v84;
      }
      if (v58 < 4) {
        float v59 = 0.0;
      }
      else {
        float v59 = v46[3];
      }
      int v57 = -2;
    }
    else
    {
      float v59 = (float)v57;
    }
    int v60 = (int)v48;
    int v61 = (int)v59;
    if (v57 != -1 && v47 != -1 && v49 != -1 && v53 != -1 && *(_DWORD *)(a1 + 296) != -1)
    {
      *(_DWORD *)(*(void *)(v42 + 24) + 4 * v36) = *(_DWORD *)(*(void *)(v102 + 24)
                                                               + 4 * (v60 + v56 * v39 + v52 * v38 + v40 * v61));
      goto LABEL_169;
    }
    uint64_t v62 = *v91;
    int v64 = *(_DWORD *)(*v91 + 12);
    int v63 = *(_DWORD *)(*v91 + 16);
    int v65 = *(_DWORD *)(*v91 + 20);
    if (v43 == 5)
    {
      int v97 = 1;
      int v67 = *(_DWORD *)(*v91 + 20);
LABEL_132:
      int v68 = 0;
      int v99 = v67;
      int v67 = *(_DWORD *)(*v91 + 16);
      BOOL v66 = v89;
LABEL_133:
      int v100 = v67;
      int v69 = *(_DWORD *)(*v91 + 12);
      int v67 = 0;
      goto LABEL_134;
    }
    BOOL v66 = 0;
    int v97 = *(_DWORD *)(v62 + 24);
    int v67 = 1;
    if (v43 != 2)
    {
      if (v43 == 3)
      {
        int v99 = *(_DWORD *)(*v91 + 20);
        int v68 = 1;
      }
      else
      {
        if (v43 == 4) {
          goto LABEL_132;
        }
        BOOL v66 = 0;
        int v68 = 0;
        int v67 = *(_DWORD *)(*v91 + 16);
        int v99 = *(_DWORD *)(*v91 + 20);
      }
      goto LABEL_133;
    }
    int v100 = *(_DWORD *)(*v91 + 16);
    int v99 = *(_DWORD *)(*v91 + 20);
    int v68 = 0;
    int v69 = 1;
LABEL_134:
    if (v97 >= 1)
    {
      int v70 = 0;
      int v71 = *(_DWORD *)(v62 + 8);
      do
      {
        if (v99 >= 1)
        {
          for (int i = 0; i < v99; ++i)
          {
            if (v100 >= 1)
            {
              for (int j = 0; j < v100; ++j)
              {
                if (v69 >= 1)
                {
                  for (int k = 0; k < v69; ++k)
                  {
                    if (v71 >= 1)
                    {
                      int v75 = 0;
                      uint64_t v76 = *(void *)(v102 + 24);
                      uint64_t v77 = *(void *)(v42 + 24);
                      do
                      {
                        if (v60 >= 0) {
                          int v78 = (int)v48;
                        }
                        else {
                          int v78 = v75;
                        }
                        if (v52 >= 0) {
                          int v79 = v52;
                        }
                        else {
                          int v79 = k;
                        }
                        if (v56 >= 0) {
                          int v80 = v56;
                        }
                        else {
                          int v80 = j;
                        }
                        if (v61 >= 0) {
                          int v81 = (int)v59;
                        }
                        else {
                          int v81 = i;
                        }
                        if (v67) {
                          int k = v36;
                        }
                        if (v68) {
                          int j = v36;
                        }
                        if (v66) {
                          int i = v36;
                        }
                        if (v43 == 5) {
                          int v70 = v36;
                        }
                        *(_DWORD *)(v77 + 4 * (v75 + v71 * (k + v64 * (j + (i + v70 * v65) * v63)))) = *(_DWORD *)(v76 + 4 * (v81 * v40 + v80 * v39 + v79 * v38 + v78));
                        ++v75;
                      }
                      while (v71 != v75);
                    }
                  }
                }
              }
            }
          }
        }
        ++v70;
      }
      while (v70 < v97);
    }
LABEL_169:
    ++v36;
    a1 = v94;
    unint64_t v41 = v92;
  }
  unint64_t v44 = v41;
  if (v41 == 1) {
    goto LABEL_68;
  }
  unint64_t v44 = v95;
  if (v41 == 2) {
    goto LABEL_68;
  }
  unint64_t v44 = v90;
  if (v41) {
    goto LABEL_68;
  }
LABEL_172:
  int64_t v32 = v106;
  if (v106) {
LABEL_43:
  }
    nitro::nitro_function::nitro_function(v32);
LABEL_44:
  if (v120) {
    nitro::nitro_function::nitro_function(v120);
  }
  if (v122) {
    nitro::nitro_function::nitro_function(v122);
  }
}

void sub_192B66010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  unint64_t v45 = *(std::__shared_weak_count **)(v43 - 144);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  int v46 = *(std::__shared_weak_count **)(v43 - 128);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::array_gather_kernel_cpu::~array_gather_kernel_cpu(Espresso::array_gather_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::multinomial_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (*(void *)a4 == *(void *)(a4 + 8)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("multinomial requires one input blob");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v58, *(uint64_t **)a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v56, *a3);
  Espresso::abstract_blob_container::shape((char *)&v46, **(void **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v50, (const Espresso::layer_shape *)&v46, 0);
  if (__p)
  {
    int v49 = __p;
    operator delete(__p);
  }
  uint64_t v6 = v55;
  if (v55 > 3)
  {
    if (v55 == 5)
    {
      uint64_t v6 = v51 * (uint64_t)v50;
      uint64_t v7 = v53 * (uint64_t)v54 * v52;
    }
    else if (v55 == 4)
    {
      uint64_t v6 = v50;
      uint64_t v7 = v52 * (uint64_t)v53 * v51;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = v55;
    if (v55)
    {
      if (v55 == 1)
      {
        uint64_t v7 = v50;
      }
      else if (v55 == 2)
      {
        uint64_t v6 = v50;
        uint64_t v7 = v51;
      }
      else
      {
        uint64_t v6 = v51 * (uint64_t)v50;
        uint64_t v7 = v52;
      }
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v46, v7, 1, 1, 1);
  int v8 = *(float **)(v46 + 24);
  uint64_t v9 = *(void *)(a1 + 8);
  std::vector<int>::size_type v10 = *(std::__shared_weak_count **)(v9 + 96);
  int v40 = *(unsigned int **)(v9 + 88);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  signed int v35 = v10;
  if (v6)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v36 = v6;
    int v13 = *(_DWORD *)(a1 + 280);
    uint64_t v37 = v58;
    uint64_t v38 = v56;
    do
    {
      uint64_t v41 = *(void *)(v38 + 24);
      int v42 = v13;
      uint64_t v14 = *(void *)(v37 + 24);
      uint64_t v44 = v12;
      uint64_t v15 = (const float *)(v14 + 4 * v12 * v7);
      float __C = 0.0;
      float __C = *v15;
      vDSP_maxv(v15, 1, &__C, v7);
      uint64_t v43 = v11;
      if (v7)
      {
        uint64_t v16 = (float *)(v14 + v11);
        float v17 = 0.0;
        std::vector<int>::pointer v18 = v8;
        uint64_t v19 = v7;
        do
        {
          float v20 = *v16++;
          float v17 = v17 + expf(v20 - __C);
          *v18++ = v17;
          --v19;
        }
        while (v19);
      }
      else
      {
        float v17 = 0.0;
      }
      int v21 = *(_DWORD *)(a1 + 280);
      if (v21)
      {
        uint64_t v22 = 0;
        unsigned int v23 = *v40;
        do
        {
          unsigned int v24 = v23 / 0xADC8;
          unsigned int v25 = 48271 * (v23 % 0xADC8);
          v24 *= 3399;
          BOOL v26 = v25 >= v24;
          unsigned int v27 = v25 - v24;
          if (v26) {
            int v28 = 0;
          }
          else {
            int v28 = 0x7FFFFFFF;
          }
          unsigned int v23 = v28 + v27;
          float v29 = &v8[v7];
          if (v7)
          {
            unint64_t v30 = v7;
            float v29 = v8;
            do
            {
              unint64_t v31 = v30 >> 1;
              int64_t v32 = &v29[v30 >> 1];
              float v34 = *v32;
              int v33 = v32 + 1;
              v30 += ~(v30 >> 1);
              if ((float)(v17 * (float)((float)((float)(v23 - 1) * 4.6566e-10) + 0.0)) < v34) {
                unint64_t v30 = v31;
              }
              else {
                float v29 = v33;
              }
            }
            while (v30);
          }
          *(float *)(v41 + 4 * v44 * v42 + 4 * v22++) = (float)(v29 - v8);
        }
        while (v22 != v21);
        *int v40 = v23;
      }
      uint64_t v12 = v44 + 1;
      uint64_t v11 = v43 + 4 * v7;
      int v13 = v21;
    }
    while (v44 + 1 != v36);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
}

void sub_192B66440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  float v29 = *(std::__shared_weak_count **)(v27 - 144);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  unint64_t v30 = *(std::__shared_weak_count **)(v27 - 128);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::multinomial_kernel_cpu::~multinomial_kernel_cpu(Espresso::multinomial_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::instancenorm_1d_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v275, *(uint64_t **)a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v273, *(uint64_t **)a4);
  uint64_t v12 = *(void *)(a1 + 304);
  if (!v12)
  {
    int v232 = "instancenorm_1d_kernel_cpu: missing param wGamma";
    goto LABEL_146;
  }
  uint64_t v13 = *(void *)(a1 + 320);
  if (!v13)
  {
    int v232 = "instancenorm_1d_kernel_cpu: missing param wBeta";
LABEL_146:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v232);
  }
  int v14 = *(_DWORD *)(a1 + 296);
  if (!v14)
  {
    Espresso::abstract_blob_container::shape((char *)&src, **(void **)a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&dest, (const Espresso::layer_shape *)&src, 0);
    if (src.size[4])
    {
      src.size[5] = src.size[4];
      operator delete((void *)src.size[4]);
    }
    switch(HIDWORD(dest.size[1]))
    {
      case 1:
        uint64_t flags = 1;
        if (HIDWORD(dest.size[1])) {
          goto LABEL_108;
        }
        goto LABEL_110;
      case 2:
        uint64_t flags = (int)dest.flags;
        if (!HIDWORD(dest.size[1])) {
          goto LABEL_110;
        }
        goto LABEL_108;
      case 3:
        uint64_t flags = (int)dest.layout * (uint64_t)(int)dest.flags;
        if (!HIDWORD(dest.size[1])) {
          goto LABEL_110;
        }
        goto LABEL_108;
      case 4:
        uint64_t flags = (int)dest.layout * (uint64_t)(int)dest.flags * SLODWORD(dest.size[0]);
        if (!HIDWORD(dest.size[1])) {
          goto LABEL_110;
        }
        goto LABEL_108;
      case 5:
        uint64_t flags = (int)dest.layout * (uint64_t)(int)dest.flags * SLODWORD(dest.size[0]) * SHIDWORD(dest.size[0]);
        if (HIDWORD(dest.size[1])) {
          goto LABEL_108;
        }
        goto LABEL_110;
      default:
        uint64_t flags = 0;
        if (HIDWORD(dest.size[1])) {
LABEL_108:
        }
          vDSP_Length __N = *((int *)&dest + SHIDWORD(dest.size[1]) - 1);
        else {
LABEL_110:
        }
          vDSP_Length __N = 0;
        uint64_t v215 = *(int *)(*(void *)(a1 + 304) + 8);
        if (__N == v215)
        {
          uint64_t v215 = *(int *)(*(void *)(a1 + 320) + 8);
          if (__N == v215)
          {
            int v216 = *(_DWORD *)(a1 + 280);
            if (__N > 1)
            {
              src.uint64_t flags = BNNSNDArrayFlagBackpropSet;
              filter_params.uint64_t flags = 0;
              if (!v216)
              {
                if (flags)
                {
                  uint64_t v228 = 0;
                  uint64_t v229 = v273;
                  uint64_t v230 = v275;
                  do
                  {
                    int v231 = (float *)(*(void *)(v230 + 24) + v228);
                    vDSP_normalize((const float *)(*(void *)(v229 + 24) + v228), 1, v231, 1, (float *)&src, (float *)&filter_params.flags, __N);
                    vDSP_vma(v231, 1, *(const float **)(*(void *)(a1 + 304) + 16), 1, *(const float **)(*(void *)(a1 + 320) + 16), 1, v231, 1, __N);
                    v228 += 4 * __N;
                    --flags;
                  }
                  while (flags);
                }
                goto LABEL_129;
              }
            }
            else
            {
              if (!v216 || *(_DWORD *)(a1 + 288)) {
                Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("instancenorm_1d_kernel_cpu: inner dimension must have size > 1");
              }
              src.uint64_t flags = BNNSNDArrayFlagBackpropSet;
              filter_params.uint64_t flags = 0;
            }
            int v217 = *(_DWORD *)(a1 + 292);
            if (v217) {
              float v218 = 0.0;
            }
            else {
              float v218 = *(float *)(a1 + 284);
            }
            if (v217) {
              float v219 = *(float *)(a1 + 284);
            }
            else {
              float v219 = 0.0;
            }
            if (flags)
            {
              uint64_t v220 = 0;
              float v221 = (float)__N + -1.0;
              if (!*(_DWORD *)(a1 + 288)) {
                float v221 = (float)__N;
              }
              float v222 = 1.0 / v221;
              uint64_t v223 = v273;
              uint64_t v224 = v275;
              do
              {
                BOOL v225 = (const float *)(*(void *)(v223 + 24) + v220);
                uint64_t v226 = *(void *)(v224 + 24);
                LODWORD(__C) = 0;
                LODWORD(v269) = 0;
                vDSP_sve(v225, 1, (float *)&__C, __N);
                uint64_t v227 = (float *)(v226 + v220);
                *(float *)&uint64_t __C = (float)(-1.0 / (float)__N) * *(float *)&__C;
                vDSP_vsadd(v225, 1, (const float *)&__C, v227, 1, __N);
                vDSP_svesq(v227, 1, (float *)&v269, __N);
                *(float *)&uint64_t v269 = v222 * *(float *)&v269;
                float __B = 1.0 / (float)(v218 + sqrtf(v219 + *(float *)&v269));
                vDSP_vsmul(v227, 1, &__B, v227, 1, __N);
                vDSP_vma(v227, 1, *(const float **)(*(void *)(a1 + 304) + 16), 1, *(const float **)(*(void *)(a1 + 320) + 16), 1, v227, 1, __N);
                v220 += 4 * __N;
                --flags;
              }
              while (flags);
            }
            goto LABEL_129;
          }
          uint64_t v233 = "instancenorm_1d_kernel_cpu: wBeta (%d) size is less than input blob (%d, %d, %d, %d) size";
        }
        else
        {
          uint64_t v233 = "instancenorm_1d_kernel_cpu: wGamma (%d) size is less than input blob (%d, %d, %d, %d) size";
        }
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>(v233, v215, *(unsigned int *)(v273 + 8), *(unsigned int *)(v273 + 12), *(unsigned int *)(v273 + 16), *(unsigned int *)(v273 + 20));
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = v273;
  unint64_t v17 = *(int *)(v273 + 8);
  unint64_t v18 = *(int *)(v273 + 12);
  unint64_t v260 = v17;
  do
  {
    v17 *= *(int *)(v273 + 12 + v15);
    v15 += 4;
  }
  while (v15 != 12);
  unint64_t v19 = (int)v18 * (uint64_t)(int)v260;
  float v20 = *(uint64_t **)a4;
  uint64_t v21 = *(void *)(a4 + 8) - *(void *)a4;
  if (v21 == 16)
  {
    LODWORD(v7) = *(_DWORD *)(a1 + 284);
    channelnorm1d_training_slice(0, v260, 0, v17 / v19, *(float **)(v275 + 24), *(int *)(v275 + 8), *(const float **)(v273 + 24), v18, v7, v8, v9, v10, v11, v260, *(float **)(v12 + 16), *(float **)(v13 + 16), *(_DWORD *)(a1 + 288) != 0, *(_DWORD *)(a1 + 292) != 0);
    if (*(void *)(a3 + 8) - *(void *)a3 == 32) {
      goto LABEL_151;
    }
    goto LABEL_129;
  }
  if (v14 != 2)
  {
    if (v21 != 32) {
      goto LABEL_151;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__C, v20 + 2);
    if (*(void *)(a3 + 8) - *(void *)a3 == 32)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v269, (uint64_t *)(*(void *)a3 + 16));
      unint64_t v196 = *(int *)(v269 + 8);
      if (v260 >= v196) {
        unint64_t v197 = v260 - v196;
      }
      else {
        unint64_t v197 = 0;
      }
      if (*(void *)(a4 + 8) - *(void *)a4 == 16)
      {
        exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_state_error::invalid_state_error(exception);
      }
      uint64_t v198 = *(float **)(v269 + 24);
      if (v260 < v196)
      {
        memset(&src.data_type, 0, 32);
        memset(&src.stride[1], 0, 64);
        memset(&src.size[1], 0, 64);
        *(void *)&src.uint64_t flags = 0;
        src.size[0] = v196 - v260;
        src.size[1] = *(int *)(__C + 12);
        uint64_t v199 = *(void *)(__C + 16);
        *(void *)&long long v200 = (int)v199;
        *((void *)&v200 + 1) = SHIDWORD(v199);
        *(_OWORD *)&src.size[2] = v200;
        src.stride[0] = 1;
        int v201 = *(_DWORD *)(__C + 8);
        src.stride[1] = v201;
        src.stride[2] = v201 * (uint64_t)SLODWORD(src.size[1]);
        src.stride[3] = LODWORD(src.stride[2]) * (int)v199;
        src.int data = (void *)(*(void *)(__C + 24) + 4 * v260);
        src.layout = BNNSDataLayoutImageCHW;
        src.data_type = BNNSDataTypeFloat32;
        src.data_scale = 1.0;
        memset(&dest.data_type, 0, 32);
        memset(&dest.size[3], 0, 112);
        dest.uint64_t flags = BNNSNDArrayFlagBackpropSet;
        *(_OWORD *)&dest.size[1] = 0u;
        dest.layout = BNNSDataLayoutImageCHW;
        dest.size[0] = v196 - v260;
        uint64_t v202 = *(void *)(__C + 12);
        *(void *)&long long v200 = (int)v202;
        *((void *)&v200 + 1) = SHIDWORD(v202);
        *(_OWORD *)&dest.size[1] = v200;
        dest.size[3] = *(int *)(__C + 20);
        dest.stride[0] = 1;
        dest.stride[1] = *(int *)(v269 + 8);
        dest.stride[2] = *(int *)(v269 + 12) * (uint64_t)SLODWORD(dest.stride[1]);
        dest.stride[3] = *(int *)(v269 + 16) * (uint64_t)SLODWORD(dest.stride[2]);
        dest.int data = *(void **)(v269 + 24);
        dest.data_type = BNNSDataTypeFloat32;
        dest.data_scale = 1.0;
        memset(&filter_params, 0, sizeof(filter_params));
        uint64_t v203 = *(const void **)(a1 + 8);
        if (v203)
        {
          if (v204) {
            filter_params.n_threads = v204[21];
          }
        }
        if (BNNSCopy(&dest, &src, &filter_params)) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
        }
        v198 += v196 - v260;
      }
      if (v270) {
        nitro::nitro_function::nitro_function(v270);
      }
      unint64_t v260 = v197;
    }
    else
    {
      unint64_t v196 = 0;
      uint64_t v198 = 0;
    }
    memset(&src.data_type, 0, 32);
    memset(&src.stride[1], 0, 64);
    memset(&src.size[1], 0, 64);
    *(_OWORD *)&src.uint64_t flags = 0u;
    uint64_t v205 = __C;
    src.size[0] = *(int *)(__C + 8);
    src.size[1] = *(int *)(__C + 12);
    src.size[2] = *(int *)(__C + 16);
    src.size[3] = *(int *)(__C + 20);
    src.stride[0] = 1;
    src.stride[1] = src.size[0];
    src.stride[2] = SLODWORD(src.size[1]) * (uint64_t)SLODWORD(src.size[0]);
    src.stride[3] = SLODWORD(src.size[2]) * (uint64_t)(LODWORD(src.size[1]) * LODWORD(src.size[0]));
    src.int data = *(void **)(__C + 24);
    src.layout = BNNSDataLayoutImageCHW;
    src.data_type = BNNSDataTypeFloat32;
    src.data_scale = 1.0;
    dest.uint64_t flags = BNNSNDArrayFlagBackpropSet;
    memset(&dest.data_type, 0, 32);
    memset(&dest.stride[1], 0, 64);
    memset(&dest.size[4], 0, 32);
    dest.layout = BNNSDataLayoutImageCHW;
    dest.size[0] = src.size[0];
    dest.size[1] = src.size[1];
    dest.size[2] = src.size[2];
    dest.size[3] = src.size[3];
    dest.stride[0] = 1;
    uint64_t v206 = v275;
    dest.stride[1] = *(int *)(v275 + 8);
    dest.stride[2] = *(int *)(v275 + 12) * (uint64_t)SLODWORD(dest.stride[1]);
    dest.stride[3] = *(int *)(v275 + 16) * (uint64_t)SLODWORD(dest.stride[2]);
    dest.int data = *(void **)(v275 + 24);
    dest.data_type = BNNSDataTypeFloat32;
    dest.data_scale = 1.0;
    memset(&filter_params, 0, sizeof(filter_params));
    uint64_t v207 = *(const void **)(a1 + 8);
    if (v207)
    {
      if (v208) {
        filter_params.n_threads = v208[21];
      }
    }
    if (BNNSCopy(&dest, &src, &filter_params)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
    }
    LODWORD(v209) = *(_DWORD *)(a1 + 284);
    channelnorm1d_training_slice(v198, v260, v196, v17 / v19, (float *)(*(void *)(v206 + 24) + 4 * *(int *)(v205 + 8)), *(int *)(v206 + 8), *(const float **)(v16 + 24), *(int *)(v16 + 12), v209, v210, v211, v212, v213, *(int *)(v16 + 8), *(float **)(*(void *)(a1 + 304) + 16), *(float **)(*(void *)(a1 + 320) + 16), *(_DWORD *)(a1 + 288) != 0, *(_DWORD *)(a1 + 292) != 0);
    std::vector<int> v195 = v272;
    if (!v272) {
      goto LABEL_129;
    }
LABEL_106:
    nitro::nitro_function::nitro_function(v195);
    goto LABEL_129;
  }
  if (v21 != 32 || (unint64_t v241 = v17 / v19, *(void *)(a3 + 8) - *(void *)a3 != 16))
  {
LABEL_151:
    uint64_t v234 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(v234);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, v20 + 2);
  if (v17 >= v19)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(v275 + 24);
    uint64_t v29 = *(int *)(v275 + 8);
    uint64_t v30 = *(void *)(v16 + 24);
    uint64_t v31 = *(void *)(*(void *)&src.flags + 24);
    uint64_t v32 = *(int *)(v16 + 8);
    unint64_t v33 = *(int *)(v16 + 12);
    uint64_t v263 = *(const float **)(*(void *)(a1 + 320) + 16);
    BOOL v264 = *(float **)(*(void *)(a1 + 304) + 16);
    int v34 = *(_DWORD *)(a1 + 288);
    int v35 = *(_DWORD *)(a1 + 292);
    v24.i32[0] = *(_DWORD *)(a1 + 284);
    uint64_t v36 = v29;
    float v37 = 1.0 / (float)v33;
    float v38 = 1.0 / (float)((float)v33 + -1.0);
    if (v35) {
      *(float *)v23.i32 = 0.0;
    }
    else {
      v23.i32[0] = v24.i32[0];
    }
    if (!v35) {
      *(float *)v24.i32 = 0.0;
    }
    float32x4_t v39 = (float32x4_t)vdupq_lane_s32(v24, 0);
    uint64_t v262 = *(int *)(v16 + 8);
    uint64_t v40 = v30 + 12 * (int)v32;
    uint64_t v240 = 4 * (int)v33 * (uint64_t)(int)v32;
    uint64_t v41 = 16 * v32;
    uint64_t v42 = v30 + 8 * v32;
    uint64_t v43 = 4 * v32;
    uint64_t v44 = v30 + 4 * v32;
    uint64_t v238 = v30;
    uint64_t v239 = 4 * (int)v33 * (uint64_t)(int)v29;
    uint64_t v45 = 16 * v29;
    uint64_t v46 = v28 + 12 * (int)v29;
    uint64_t v47 = v28 + 8 * v29;
    uint64_t v48 = 4 * v29;
    float32x4_t v49 = (float32x4_t)vdupq_lane_s32(v23, 0);
    uint64_t v50 = v28 + 4 * v29;
    uint64_t v248 = v46;
    uint64_t v249 = v47;
    if (!v34) {
      float v38 = 1.0 / (float)v33;
    }
    uint64_t v51 = *(void *)(v275 + 24);
    uint64_t v236 = v30 + 8 * v32;
    uint64_t v237 = v30 + 12 * (int)v32;
    uint64_t v250 = *(int *)(v275 + 8);
    uint64_t v251 = v51;
    do
    {
      uint64_t v246 = v42;
      uint64_t v247 = v25;
      uint64_t v243 = v27;
      uint64_t v244 = v26;
      __asm { FMOV            V7.4S, #1.0 }
      unint64_t v57 = v260;
      uint64_t v242 = v44;
      uint64_t v245 = v40;
      if (v260 >= 8)
      {
        uint64_t v59 = 0;
        uint64_t v60 = v51;
        uint64_t v61 = v31;
        uint64_t v62 = v26;
        uint64_t v63 = v30;
        uint64_t v64 = v44;
        unint64_t v65 = 8;
        do
        {
          if (v33 >= 4)
          {
            uint64_t v69 = 0;
            float32x4_t v70 = 0uLL;
            float32x4_t v71 = 0uLL;
            unint64_t v72 = 4;
            float32x4_t v73 = 0uLL;
            float32x4_t v74 = 0uLL;
            float32x4_t v75 = 0uLL;
            float32x4_t v76 = 0uLL;
            float32x4_t v77 = 0uLL;
            float32x4_t v78 = 0uLL;
            do
            {
              float32x4_t v71 = vaddq_f32(v71, *(float32x4_t *)(v63 + v69 + 16));
              float32x4_t v70 = vaddq_f32(v70, *(float32x4_t *)(v63 + v69));
              float32x4_t v74 = vaddq_f32(v74, *(float32x4_t *)(v64 + v69 + 16));
              float32x4_t v73 = vaddq_f32(v73, *(float32x4_t *)(v64 + v69));
              float32x4_t v76 = vaddq_f32(v76, *(float32x4_t *)(v42 + v69 + 16));
              float32x4_t v75 = vaddq_f32(v75, *(float32x4_t *)(v42 + v69));
              float32x4_t v78 = vaddq_f32(v78, *(float32x4_t *)(v40 + v69 + 16));
              float32x4_t v77 = vaddq_f32(v77, *(float32x4_t *)(v40 + v69));
              v72 += 4;
              v69 += v41;
            }
            while (v72 <= v33);
            float32x4_t v67 = vaddq_f32(vaddq_f32(v77, v75), vaddq_f32(v73, v70));
            float32x4_t v68 = vaddq_f32(vaddq_f32(v78, v76), vaddq_f32(v74, v71));
            unint64_t v66 = v33 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            unint64_t v66 = 0;
            float32x4_t v67 = 0uLL;
            float32x4_t v68 = 0uLL;
          }
          unint64_t v79 = v33 - v66;
          if (v33 > v66)
          {
            unint64_t v80 = v43 * v66;
            do
            {
              float32x4_t v68 = vaddq_f32(v68, *(float32x4_t *)(v63 + v80 + 16));
              float32x4_t v67 = vaddq_f32(v67, *(float32x4_t *)(v63 + v80));
              v80 += v43;
              --v79;
            }
            while (v79);
          }
          float32x4_t v81 = vmulq_n_f32(v67, v37);
          float32x4_t v82 = vmulq_n_f32(v68, v37);
          if (v33 >= 4)
          {
            uint64_t v86 = 0;
            unint64_t v83 = 0;
            float32x4_t v87 = 0uLL;
            float32x4_t v88 = 0uLL;
            uint64_t v89 = v62;
            float32x4_t v90 = 0uLL;
            float32x4_t v91 = 0uLL;
            float32x4_t v92 = 0uLL;
            float32x4_t v93 = 0uLL;
            float32x4_t v94 = 0uLL;
            float32x4_t v95 = 0uLL;
            do
            {
              float32x4_t v96 = vsubq_f32(*(float32x4_t *)(v63 + v86), v81);
              float32x4_t v97 = vsubq_f32(*(float32x4_t *)(v63 + v86 + 16), v82);
              float32x4_t v98 = vsubq_f32(*(float32x4_t *)(v64 + v86), v81);
              float32x4_t v99 = vsubq_f32(*(float32x4_t *)(v64 + v86 + 16), v82);
              float32x4_t v100 = vsubq_f32(*(float32x4_t *)(v42 + v86), v81);
              float32x4_t v101 = vsubq_f32(*(float32x4_t *)(v42 + v86 + 16), v82);
              float32x4_t v102 = vsubq_f32(*(float32x4_t *)(v40 + v86), v81);
              float32x4_t v103 = vsubq_f32(*(float32x4_t *)(v40 + v86 + 16), v82);
              int v104 = (float32x4_t *)(v28 + v89);
              float32x4_t *v104 = v96;
              v104[1] = v97;
              uint64_t v105 = (float32x4_t *)(v50 + v89);
              *uint64_t v105 = v98;
              v105[1] = v99;
              uint64_t v106 = (float32x4_t *)(v47 + v89);
              *uint64_t v106 = v100;
              v106[1] = v101;
              signed int v107 = (float32x4_t *)(v46 + v89);
              *signed int v107 = v102;
              v107[1] = v103;
              float32x4_t v88 = vmlaq_f32(v88, v97, v97);
              float32x4_t v87 = vmlaq_f32(v87, v96, v96);
              float32x4_t v91 = vmlaq_f32(v91, v99, v99);
              float32x4_t v90 = vmlaq_f32(v90, v98, v98);
              float32x4_t v93 = vmlaq_f32(v93, v101, v101);
              float32x4_t v92 = vmlaq_f32(v92, v100, v100);
              float32x4_t v95 = vmlaq_f32(v95, v103, v103);
              unint64_t v108 = v83 + 8;
              float32x4_t v94 = vmlaq_f32(v94, v102, v102);
              v83 += 4;
              v89 += v45;
              v86 += v41;
            }
            while (v108 <= v33);
            float32x4_t v84 = vaddq_f32(vaddq_f32(v94, v92), vaddq_f32(v90, v87));
            float32x4_t v85 = vaddq_f32(vaddq_f32(v95, v93), vaddq_f32(v91, v88));
          }
          else
          {
            unint64_t v83 = 0;
            float32x4_t v84 = 0uLL;
            float32x4_t v85 = 0uLL;
          }
          uint64_t v109 = v33 - v83;
          if (v33 > v83)
          {
            signed int v110 = (float32x4_t *)(v51 + 4 * (v59 + v36 * v83));
            uint64_t v111 = v43 * v83;
            do
            {
              float32x4_t v112 = vsubq_f32(*(float32x4_t *)(v63 + v111), v81);
              float32x4_t v113 = vsubq_f32(*(float32x4_t *)(v63 + v111 + 16), v82);
              *signed int v110 = v112;
              v110[1] = v113;
              float32x4_t v85 = vmlaq_f32(v85, v113, v113);
              float32x4_t v84 = vmlaq_f32(v84, v112, v112);
              signed int v110 = (float32x4_t *)((char *)v110 + v48);
              v111 += v43;
              --v109;
            }
            while (v109);
          }
          if (v33)
          {
            uint64_t v114 = 0;
            float32x4_t v115 = vdivq_f32(_Q7, vaddq_f32(v49, vsqrtq_f32(vaddq_f32(v39, vmulq_n_f32(v84, v38)))));
            float32x4_t v116 = vdivq_f32(_Q7, vaddq_f32(v49, vsqrtq_f32(vaddq_f32(v39, vmulq_n_f32(v85, v38)))));
            std::vector<int>::pointer v117 = v263;
            unsigned int v118 = v264;
            unint64_t v119 = v33;
            do
            {
              int v120 = (float32x4_t *)(v60 + v114);
              float32x4_t v121 = vld1q_dup_f32(v117++);
              float32x4_t v122 = vaddq_f32(*(float32x4_t *)(v61 + v114), v121);
              float32x4_t v123 = vaddq_f32(*(float32x4_t *)(v61 + v114 + 16), v121);
              float32x4_t v124 = vld1q_dup_f32(v118++);
              float32x4_t v125 = vmlaq_f32(v123, v124, vmulq_f32(v116, *(float32x4_t *)(v60 + v114 + 16)));
              *int v120 = vmlaq_f32(v122, v124, vmulq_f32(v115, *(float32x4_t *)(v60 + v114)));
              v120[1] = v125;
              v114 += v48;
              --v119;
            }
            while (v119);
          }
          unint64_t v58 = v65;
          v65 += 8;
          v40 += 32;
          v42 += 32;
          v64 += 32;
          v63 += 32;
          v62 += 32;
          v59 += 8;
          v61 += 32;
          v60 += 32;
        }
        while (v65 <= v260);
      }
      else
      {
        unint64_t v58 = 0;
      }
      uint64_t v126 = v58 | 4;
      if ((v58 | 4) <= v260)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 4 * v58;
        uint64_t v130 = v237 + 4 * v58;
        uint64_t v131 = v236 + 4 * v58;
        uint64_t v132 = v238 + 4 * (v262 + v58);
        uint64_t v133 = v238 + 4 * v58;
        uint64_t v259 = v51 + 4 * v58;
        uint64_t v134 = v247;
        uint64_t v258 = v248 + 4 * v58;
        uint64_t v257 = v245 + 4 * v58;
        uint64_t v256 = v249 + 4 * v58;
        uint64_t v255 = v246 + 4 * v58;
        uint64_t v253 = v30 + 4 * (v262 + v58);
        uint64_t v254 = v51 + 4 * (v36 + v58);
        uint64_t v252 = v30 + 4 * v58;
        do
        {
          unint64_t v127 = v126;
          if (v33 >= 4)
          {
            float32x4_t v137 = 0uLL;
            uint64_t v138 = v134;
            unint64_t v139 = 4;
            float32x4_t v140 = 0uLL;
            float32x4_t v141 = 0uLL;
            float32x4_t v142 = 0uLL;
            do
            {
              float32x4_t v142 = vaddq_f32(v142, *(float32x4_t *)(v133 + v138));
              float32x4_t v141 = vaddq_f32(v141, *(float32x4_t *)(v132 + v138));
              float32x4_t v140 = vaddq_f32(v140, *(float32x4_t *)(v131 + v138));
              float32x4_t v137 = vaddq_f32(v137, *(float32x4_t *)(v130 + v138));
              v139 += 4;
              v138 += v41;
            }
            while (v139 <= v33);
            float32x4_t v136 = vaddq_f32(vaddq_f32(v142, v141), vaddq_f32(v140, v137));
            unint64_t v135 = v33 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            unint64_t v135 = 0;
            float32x4_t v136 = 0uLL;
          }
          unint64_t v143 = v33 - v135;
          if (v33 > v135)
          {
            uint64_t v144 = 4 * (v58 + (int)v262 * (uint64_t)(int)v135);
            do
            {
              float32x4_t v136 = vaddq_f32(v136, *(float32x4_t *)(v30 + v144));
              v144 += v43;
              --v143;
            }
            while (v143);
          }
          float32x4_t v145 = vmulq_n_f32(v136, v37);
          if (v33 >= 4)
          {
            unint64_t v261 = v58;
            unint64_t v146 = 0;
            float32x4_t v148 = 0uLL;
            uint64_t v150 = v252;
            uint64_t v149 = v253;
            uint64_t v152 = v254;
            uint64_t v151 = v255;
            uint64_t v154 = v256;
            uint64_t v153 = v257;
            float32x4_t v155 = 0uLL;
            float32x4_t v156 = 0uLL;
            uint64_t v157 = v258;
            uint64_t v158 = v259;
            float32x4_t v159 = 0uLL;
            do
            {
              float32x4_t v160 = *(float32x4_t *)(v153 + v128);
              float32x4_t v161 = vsubq_f32(*(float32x4_t *)(v150 + v128), v145);
              float32x4_t v162 = vsubq_f32(*(float32x4_t *)(v149 + v128), v145);
              float32x4_t v163 = vsubq_f32(*(float32x4_t *)(v151 + v128), v145);
              *(float32x4_t *)(v158 + v128) = v161;
              *(float32x4_t *)(v152 + v128) = v162;
              *(float32x4_t *)(v154 + v128) = v163;
              float32x4_t v164 = vsubq_f32(v160, v145);
              *(float32x4_t *)(v157 + v128) = v164;
              float32x4_t v159 = vmlaq_f32(v159, v161, v161);
              float32x4_t v156 = vmlaq_f32(v156, v162, v162);
              float32x4_t v155 = vmlaq_f32(v155, v163, v163);
              unint64_t v165 = v146 + 8;
              v146 += 4;
              v158 += v45;
              v157 += v45;
              v153 += v41;
              v154 += v45;
              v151 += v41;
              float32x4_t v148 = vmlaq_f32(v148, v164, v164);
              v152 += v45;
              v149 += v41;
              v150 += v41;
            }
            while (v165 <= v33);
            float32x4_t v147 = vaddq_f32(vaddq_f32(v159, v156), vaddq_f32(v155, v148));
            unint64_t v57 = v260;
            unint64_t v58 = v261;
            uint64_t v36 = v250;
            uint64_t v28 = v251;
          }
          else
          {
            unint64_t v146 = 0;
            float32x4_t v147 = 0uLL;
          }
          uint64_t v166 = v33 - v146;
          if (v33 > v146)
          {
            uint64_t v167 = 4 * (v58 + v36 * v146);
            uint64_t v168 = 4 * (v58 + v262 * v146);
            do
            {
              float32x4_t v169 = vsubq_f32(*(float32x4_t *)(v30 + v168), v145);
              *(float32x4_t *)(v51 + v167) = v169;
              float32x4_t v147 = vmlaq_f32(v147, v169, v169);
              v167 += v48;
              v168 += v43;
              --v166;
            }
            while (v166);
          }
          if (v33)
          {
            float32x4_t v170 = vdivq_f32(_Q7, vaddq_f32(v49, vsqrtq_f32(vaddq_f32(v39, vmulq_n_f32(v147, v38)))));
            uint64_t v171 = v129;
            uint64_t v172 = v263;
            int v173 = v264;
            unint64_t v174 = v33;
            do
            {
              float32x4_t v175 = vld1q_dup_f32(v172++);
              float v176 = *v173++;
              *(float32x4_t *)(v51 + v171) = vmlaq_n_f32(vaddq_f32(*(float32x4_t *)(v31 + v171), v175), vmulq_f32(v170, *(float32x4_t *)(v51 + v171)), v176);
              v171 += v48;
              --v174;
            }
            while (v174);
          }
          uint64_t v126 = v127 + 4;
          v134 += 16;
          v58 += 4;
          v128 += 16;
          v129 += 16;
        }
        while (v127 + 4 <= v57);
      }
      else
      {
        unint64_t v127 = v58;
      }
      if (v127 < v57)
      {
        uint64_t v177 = 4 * v127;
        do
        {
          if (v33)
          {
            float v178 = 0.0;
            uint64_t v179 = v177;
            unint64_t v180 = v33;
            do
            {
              float v178 = v178 + *(float *)(v30 + v179);
              v179 += v43;
              --v180;
            }
            while (v180);
            float v181 = v37 * v178;
            float v182 = 0.0;
            uint64_t v183 = v30;
            uint64_t v184 = v51;
            unint64_t v185 = v33;
            do
            {
              float v186 = *(float *)(v183 + v177) - v181;
              *(float *)(v184 + v177) = v186;
              float v182 = v182 + (float)(v186 * v186);
              v184 += v48;
              v183 += v43;
              --v185;
            }
            while (v185);
            float v187 = 1.0 / (float)(*(float *)v23.i32 + sqrtf(*(float *)v24.i32 + (float)(v38 * v182)));
            uint64_t v188 = v177;
            uint64_t v189 = (float *)v263;
            BOOL v190 = v264;
            unint64_t v191 = v33;
            do
            {
              float v192 = *v189++;
              float v193 = v192;
              float v194 = *v190++;
              *(float *)(v51 + v188) = (float)(*(float *)(v31 + v188) + v193)
                                     + (float)((float)(v187 * *(float *)(v51 + v188)) * v194);
              v188 += v48;
              --v191;
            }
            while (v191);
          }
          ++v127;
          v177 += 4;
        }
        while (v127 != v57);
      }
      uint64_t v27 = v243 + 1;
      uint64_t v40 = v245 + v240;
      uint64_t v42 = v246 + v240;
      uint64_t v44 = v242 + v240;
      v30 += v240;
      uint64_t v26 = v244 + v239;
      v51 += v239;
      v31 += v240;
      uint64_t v25 = v247 + v240;
      v248 += v239;
      v249 += v239;
    }
    while (v243 + 1 != v241);
  }
  std::vector<int> v195 = (std::__shared_weak_count *)src.size[0];
  if (src.size[0]) {
    goto LABEL_106;
  }
LABEL_129:
  if (v274) {
    nitro::nitro_function::nitro_function(v274);
  }
  if (v276) {
    nitro::nitro_function::nitro_function(v276);
  }
}

void sub_192B675EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v51 = (std::__shared_weak_count *)v49[45];
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  int v52 = (std::__shared_weak_count *)v49[47];
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  int v53 = (std::__shared_weak_count *)v49[49];
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  int v54 = (std::__shared_weak_count *)v49[51];
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::instancenorm_1d_kernel_cpu::~instancenorm_1d_kernel_cpu(Espresso::instancenorm_1d_kernel_cpu *this)
{
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::gumbel_max_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a4 == *(void *)(a4 + 8)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gumbel-max requires atleast one input blob");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v79, *(uint64_t **)a4);
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v77 = 0;
    float32x4_t v78 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v77, *(uint64_t **)a3);
  }
  Espresso::abstract_blob_container::shape((char *)__N, **(void **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v71, (const Espresso::layer_shape *)__N, 0);
  if (*((void *)&v44 + 1))
  {
    *(void *)&long long v45 = *((void *)&v44 + 1);
    operator delete(*((void **)&v44 + 1));
  }
  if (*(unsigned char *)(a1 + 289) || v76 <= 3)
  {
    switch(v76)
    {
      case 1u:
        uint64_t v7 = 1;
        if (!v76) {
          goto LABEL_17;
        }
        break;
      case 2u:
        uint64_t v7 = v71;
        if (!v76) {
          goto LABEL_17;
        }
        break;
      case 3u:
        uint64_t v7 = v72 * (uint64_t)v71;
        if (!v76) {
          goto LABEL_17;
        }
        break;
      case 4u:
        uint64_t v7 = v72 * (uint64_t)v71 * v73;
        if (!v76) {
          goto LABEL_17;
        }
        break;
      case 5u:
        uint64_t v7 = v72 * (uint64_t)v71 * v73 * v74;
        if (!v76) {
          goto LABEL_17;
        }
        break;
      default:
        uint64_t v7 = 0;
        if (!v76) {
          goto LABEL_17;
        }
        break;
    }
    uint64_t v8 = *(&v71 + (int)v76 - 1);
  }
  else if (v76 == 5)
  {
    uint64_t v7 = v72 * (uint64_t)v71;
    uint64_t v8 = v74 * (uint64_t)v75 * v73;
  }
  else if (v76 == 4)
  {
    uint64_t v7 = v71;
    uint64_t v8 = v73 * (uint64_t)v74 * v72;
  }
  else
  {
    uint64_t v7 = 0;
LABEL_17:
    uint64_t v8 = 0;
  }
  if (*(void *)(a4 + 8) - *(void *)a4 <= 0x10uLL)
  {
    uint64_t v69 = 0;
    float32x4_t v70 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v69, (uint64_t *)(*(void *)a4 + 16));
  }
  if (*(unsigned char *)(a1 + 308))
  {
    uint64_t v9 = *(void *)(v79 + 24);
    uint64_t v10 = *(void *)(v77 + 24);
    if (*(int *)(a1 + 312) < 1)
    {
      uint64_t v68 = 0;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      uint64_t v50 = 0;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      __N[0] = 0x1000000000000;
      long long v43 = 0u;
      __N[1] = v8;
      uint64_t v51 = v9;
      LODWORD(v52) = 65568;
      DWORD1(v54) = 0x10000;
      *((void *)&v54 + 1) = *(int *)(a1 + 280);
      *((void *)&v62 + 1) = v10;
      LODWORD(v63) = 65568;
      DWORD1(v65) = *(_DWORD *)(a1 + 304);
      DWORD2(v65) = *(_DWORD *)(a1 + 300);
      LODWORD(v65) = 14;
      MEMORY[0x192FEE6A0](__N, 0, v7, v8);
    }
    else if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        MEMORY[0x192FEE940](v10 + 4 * i * *(int *)(a1 + 280), *(float *)(a1 + 304), *(float *)(a1 + 300));
        v9 += 4 * v8;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 288))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(__N, v8, *(_DWORD *)(a1 + 280), 1, v7);
      vDSP_Length v12 = __N[0];
      uint64_t v40 = (std::__shared_weak_count *)__N[1];
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(__N, v8, *(_DWORD *)(a1 + 280), 1, v7);
      vDSP_Length v12 = __N[0];
      uint64_t v40 = (std::__shared_weak_count *)__N[1];
      if (!v69)
      {
        uint64_t v13 = *(void *)(a1 + 8);
        uint64_t v15 = *(unsigned int **)(v13 + 88);
        int v14 = *(std::__shared_weak_count **)(v13 + 96);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v16 = 0;
        float v17 = *(float *)(a1 + 292);
        for (float j = *(float *)(a1 + 296) - v17;
              ;
              *(float *)(*(void *)(v12 + 24) + 4 * v16++) = v17 + (float)(j * (float)((float)(v26 - 1) * 4.6566e-10)))
        {
          unint64_t v19 = *(int *)(v12 + 8);
          for (uint64_t k = 12; k != 24; k += 4)
            v19 *= *(int *)(v12 + k);
          if (v16 >= v19) {
            break;
          }
          unsigned int v21 = 48271 * (*v15 % 0xADC8);
          unsigned int v22 = 3399 * (*v15 / 0xADC8);
          BOOL v23 = v21 >= v22;
          unsigned int v24 = v21 - v22;
          if (v23) {
            int v25 = 0;
          }
          else {
            int v25 = 0x7FFFFFFF;
          }
          unsigned int v26 = v25 + v24;
          *uint64_t v15 = v26;
        }
        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
      }
    }
    uint64_t v27 = *(const float **)(v79 + 24);
    uint64_t v28 = *(float **)(v12 + 24);
    if (*(float *)(a1 + 304) != 1.0)
    {
      uint64_t v29 = 0;
      vDSP_Length v30 = *(int *)(v79 + 8);
      do
      {
        v30 *= *(int *)(v79 + 12 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(*(const float **)(v79 + 24), 1, (const float *)(a1 + 304), *(float **)(v79 + 24), 1, v30);
    }
    if (!*(unsigned char *)(a1 + 288))
    {
      if (v69)
      {
        uint64_t v31 = 0;
        uint64_t v32 = *(float **)(v69 + 24);
        int v33 = *(_DWORD *)(v69 + 8);
        do
        {
          v33 *= *(_DWORD *)(v69 + 12 + v31);
          v31 += 4;
        }
        while (v31 != 12);
      }
      else
      {
        uint64_t v34 = 0;
        int v33 = *(_DWORD *)(v12 + 8);
        do
        {
          v33 *= *(_DWORD *)(v12 + 12 + v34);
          v34 += 4;
        }
        while (v34 != 12);
        uint64_t v32 = v28;
      }
      LODWORD(__N[0]) = v33;
      vDSP_vsadd(v32, 1, (const float *)(a1 + 300), v32, 1, v33);
      vvlogf(v28, v32, (const int *)__N);
      vDSP_vneg(v28, 1, v28, 1, SLODWORD(__N[0]));
      vDSP_vsadd(v28, 1, (const float *)(a1 + 300), v28, 1, SLODWORD(__N[0]));
      vvlogf(v28, v28, (const int *)__N);
      vDSP_vneg(v28, 1, v28, 1, SLODWORD(__N[0]));
    }
    if (v7)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      LODWORD(v37) = *(_DWORD *)(a1 + 280);
      do
      {
        if (v37)
        {
          unint64_t v38 = 0;
          uint64_t v39 = *(void *)(v77 + 24) + v35 * (int)v37;
          do
          {
            vDSP_vadd(v28, 1, v27, 1, v28, 1, v8);
            float __C = 0.0;
            __N[0] = 0;
            vDSP_maxvi(v28, 1, &__C, __N, v8);
            *(float *)(v39 + 4 * v38++) = (float)__N[0];
            unint64_t v37 = *(int *)(a1 + 280);
            v28 += v8;
          }
          while (v38 < v37);
        }
        v27 += v8;
        ++v36;
        v35 += 4;
      }
      while (v36 != v7);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  if (v78) {
    nitro::nitro_function::nitro_function(v78);
  }
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
}

void sub_192B67D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  if (a63) {
    nitro::nitro_function::nitro_function(a63);
  }
  if (a68) {
    nitro::nitro_function::nitro_function(a68);
  }
  if (a70) {
    nitro::nitro_function::nitro_function(a70);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::gumbel_max_kernel_cpu::~gumbel_max_kernel_cpu(Espresso::gumbel_max_kernel_cpu *this)
{
  *(void *)this = &unk_1EE354FF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE354FF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::transplant_kernel_cpu::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 352);
  *(void *)(a1 + 344) = v3;
  *(void *)(a1 + 352) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::transplant_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if ((char *)a4[1] - (char *)*a4 != 32) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("transplant kernel needs two src blobs");
  }
  if (*(void *)(a3 + 8) - *(void *)a3 != 32) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("transplant kernel produces two dst blobs.");
  }
  if (!*(void *)(a1 + 360)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("transplant kernel requires batchnorm coefs");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v96, *a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v94, *a4 + 2);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v92, *(uint64_t **)a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v90, (uint64_t *)(*(void *)a3 + 16));
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v88, (void *)**a4, (std::__shared_weak_count *)(*a4)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v86, (void *)(*a4)[2], (std::__shared_weak_count *)(*a4)[3]);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v84, **(void ***)a3, *(std::__shared_weak_count **)(*(void *)a3 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v82, *(void **)(*(void *)a3 + 16), *(std::__shared_weak_count **)(*(void *)a3 + 24));
  uint64_t v7 = v82;
  uint64_t v8 = v90;
  if (!(v82 | v90)
    || (uint64_t v9 = v84, v10 = v92, !(v84 | v92))
    || (uint64_t v11 = v88, v12 = v96, !(v88 | v96))
    || (uint64_t v13 = v94, v14 = v86, !(v94 | v86)))
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type");
  }
  uint64_t v15 = *(void *)(a1 + 344);
  if (!v15) {
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant_kernel_cpu: weights (shift data) not found.");
  }
  unint64_t v16 = (_DWORD *)**a4;
  int v17 = v16[6];
  if (v17 <= 1) {
    int v17 = 1;
  }
  if ((int)v16[5] > 1 || v17 >= 2) {
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant does not support n > 1 or seq > 1");
  }
  uint64_t v18 = v16[4];
  uint64_t v73 = *(void *)(v15 + 16);
  if (v92)
  {
    uint64_t v80 = v92;
    float32x4_t v81 = v93;
    if (v93) {
      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v80, v84 + 8);
  }
  if (v8)
  {
    uint64_t v78 = v8;
    uint64_t v79 = v91;
    if (v91) {
      atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v78, v7 + 8);
  }
  if (v12)
  {
    uint64_t v76 = v12;
    uint64_t v77 = v97;
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v76, v11 + 8);
  }
  if (v13)
  {
    uint64_t v74 = v13;
    int v75 = v95;
    if (v95) {
      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v74, v14 + 8);
  }
  if (!v12)
  {
    uint64_t v19 = 0;
    float v20 = *(void **)(v76 + 24);
    vImagePixelCount v21 = *(int *)(v11 + 8);
    do
    {
      v21 *= *(int *)(v11 + 12 + v19);
      v19 += 4;
    }
    while (v19 != 12);
    src.int data = *(void **)(v11 + 24);
    src.vImagePixelCount height = 1;
    src.width = v21;
    src.rowBytes = 2 * v21;
    dest.int data = v20;
    dest.vImagePixelCount height = 1;
    dest.width = v21;
    dest.rowBytes = 4 * v21;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  }
  if (!v13)
  {
    uint64_t v22 = 0;
    BOOL v23 = *(void **)(v74 + 24);
    vImagePixelCount v24 = *(int *)(v14 + 8);
    do
    {
      v24 *= *(int *)(v14 + 12 + v22);
      v22 += 4;
    }
    while (v22 != 12);
    src.int data = *(void **)(v14 + 24);
    src.vImagePixelCount height = 1;
    src.width = v24;
    src.rowBytes = 2 * v24;
    dest.int data = v23;
    dest.vImagePixelCount height = 1;
    dest.width = v24;
    dest.rowBytes = 4 * v24;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  }
  int v25 = *(_DWORD *)(a1 + 308);
  if (v25 == 1)
  {
    if ((int)v18 >= 1)
    {
      uint64_t v41 = *(float **)(v76 + 24);
      uint64_t v42 = *(float **)(v74 + 24);
      long long v43 = *(float **)(v80 + 24);
      long long v44 = *(float **)(v78 + 24);
      long long v45 = (float *)(*(void *)(*(void *)(a1 + 360) + 16) + 4);
      long long v46 = (float *)(v73 + 8);
      do
      {
        float v47 = *(v46 - 2);
        float v48 = *(v46 - 1);
        float v49 = *v46;
        float v50 = v46[1];
        v46 += 4;
        float v51 = *v41++;
        float v52 = v51;
        float v53 = *v42++;
        float v54 = *(v45 - 1);
        float v55 = v48 + (float)(v47 * v52);
        float v56 = 1.0 / (float)(v50 + (float)(v49 * (float)(1.0 / v53)));
        *v43++ = *v45 + (float)((float)-(float)(v55 * v56) * v54);
        *v44++ = v56 * v54;
        v45 += 4;
        --v18;
      }
      while (v18);
    }
  }
  else
  {
    if (v25) {
      Espresso::throw_exception_selector<Espresso::generic_error>("invalid mode selected for transplant");
    }
    if ((int)v18 >= 1)
    {
      unsigned int v26 = *(float **)(v76 + 24);
      uint64_t v27 = *(float **)(v74 + 24);
      uint64_t v28 = *(float **)(v80 + 24);
      uint64_t v29 = *(float **)(v78 + 24);
      vDSP_Length v30 = (float *)(*(void *)(*(void *)(a1 + 360) + 16) + 4);
      uint64_t v31 = (float *)(v73 + 8);
      do
      {
        float v32 = *(v31 - 2);
        float v33 = *(v31 - 1);
        float v34 = *v26++;
        float v35 = v34;
        float v36 = *v27++;
        float v37 = *v31;
        float v38 = v31[1];
        v31 += 4;
        float v39 = *(v30 - 1);
        float v40 = v38 + (float)(v37 * (float)(1.0 / v36));
        *v28++ = (float)((float)(v40 * *v30) / v39) - (float)(v33 + (float)(v32 * v35));
        *v29++ = (float)(1.0 / v40) * v39;
        v30 += 4;
        --v18;
      }
      while (v18);
    }
  }
  if (!v10)
  {
    uint64_t v57 = 0;
    long long v58 = *(int **)(v80 + 24);
    long long v59 = *(_WORD **)(v9 + 24);
    uint64_t v60 = *(int *)(v9 + 8);
    do
    {
      v60 *= *(int *)(v9 + 12 + v57);
      v57 += 4;
    }
    while (v57 != 12);
    for (; v60; --v60)
    {
      int v61 = *v58++;
      _S0 = v61;
      __asm { FCVT            H0, S0 }
      *v59++ = _S0;
    }
  }
  if (!v8)
  {
    uint64_t v67 = 0;
    uint64_t v68 = *(int **)(v78 + 24);
    uint64_t v69 = *(_WORD **)(v7 + 24);
    uint64_t v70 = *(int *)(v7 + 8);
    do
    {
      v70 *= *(int *)(v7 + 12 + v67);
      v67 += 4;
    }
    while (v67 != 12);
    for (; v70; --v70)
    {
      int v71 = *v68++;
      _S0 = v71;
      __asm { FCVT            H0, S0 }
      *v69++ = _S0;
    }
  }
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  if (v89) {
    nitro::nitro_function::nitro_function(v89);
  }
  if (v91) {
    nitro::nitro_function::nitro_function(v91);
  }
  if (v93) {
    nitro::nitro_function::nitro_function(v93);
  }
  if (v95) {
    nitro::nitro_function::nitro_function(v95);
  }
  if (v97) {
    nitro::nitro_function::nitro_function(v97);
  }
}

void sub_192B68448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  float v33 = *(std::__shared_weak_count **)(v31 - 160);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::transplant_kernel_cpu::~transplant_kernel_cpu(Espresso::transplant_kernel_cpu *this)
{
  Espresso::generic_transplant_kernel::~generic_transplant_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::general_slice_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a4[1] == *a4) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: at least one bottom blob required");
  }
  Espresso::abstract_blob_container::shape((char *)&v34, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, (const Espresso::layer_shape *)&v34, 0);
  if (v36)
  {
    float v37 = v36;
    operator delete(v36);
  }
  Espresso::abstract_blob_container::shape((char *)&v34, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v30, (const Espresso::layer_shape *)&v34, 0);
  if (v36)
  {
    float v37 = v36;
    operator delete(v36);
  }
  unint64_t v8 = v33;
  if (v33 != (uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 2) {
    (*(void (**)(uint64_t, uint64_t **, uint64_t **))(*(void *)a1 + 80))(a1, a3, a4);
  }
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  if ((unint64_t)((char *)v10 - (char *)*a4) >= 0x11)
  {
    if (!*(void *)(*(void *)a2 + 64)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("general_slice_kernel_cpu: dynamic parameters require interpreter");
    }
    memset(&v29, 0, sizeof(v29));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, (const void *)(a1 + 356), a1 + 356 + 4 * v8, v8);
    Espresso::general_slice_get_params_from_inputs((uint64_t *)a4, 1u, v8, (uint64_t *)(a1 + 384), (uint64_t *)(a1 + 408), (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504));
    Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v32);
    Espresso::layer_nd_shape::shape_vector(&v34, (uint64_t)v32);
    NDLayers::slice_nd_shape_computation(*(const void **)(a1 + 384), *(void *)(a1 + 392), a1 + 408, (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), (uint64_t *)&v34, &__p, *(unsigned char *)(a1 + 355), &v29.__begin_);
    if (v34.__begin_)
    {
      v34.__end_ = v34.__begin_;
      operator delete(v34.__begin_);
    }
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    begifloat n = __p.__begin_;
    int64_t v12 = (char *)__p.__end_ - (char *)__p.__begin_;
    if (__p.__end_ != __p.__begin_)
    {
      uint64_t v13 = v12 >> 2;
      if ((unint64_t)(v12 >> 2) <= 1) {
        uint64_t v13 = 1;
      }
      uint64_t v14 = &v26;
      do
      {
        int v15 = *begin++;
        *(_DWORD *)uint64_t v14 = v15;
        uint64_t v14 = (long long *)((char *)v14 + 4);
        --v13;
      }
      while (v13);
    }
    HIDWORD(v27) = (unint64_t)v12 >> 2;
    unint64_t v16 = (std::__shared_weak_count *)operator new(0x98uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
    *(_OWORD *)&v16[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v16[3].__shared_owners_ = 0u;
    *(_OWORD *)&v16[1].__shared_owners_ = 0u;
    v16[2].std::__shared_count = 0u;
    v16[4].std::__shared_count = 0u;
    *(_OWORD *)&v16[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v16[5].__shared_owners_ = 0u;
    v16[5].__shared_weak_owners_ = 0;
    v16[6].__vftable = 0;
    LODWORD(v16[2].__vftable) = 1065353216;
    v16[2].__shared_owners_ = 0x1FFFFFFFFLL;
    v16[4].__vftable = 0;
    v16[4].__shared_owners_ = 0;
    v16[2].__shared_weak_owners_ = 0;
    v16[3].__vftable = 0;
    LOBYTE(v16[3].__shared_weak_owners_) = 0;
    v16[3].__shared_owners_ = 0;
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
    v16[5].__vftable = 0;
    v16[5].__shared_owners_ = 0;
    LOBYTE(v16[6].__vftable) = 0;
    LOBYTE(v16[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
    uint64_t v17 = **a3;
    *(int32x2_t *)&double v18 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v26, 0, (uint64_t)&v34);
    vImagePixelCount v24 = v16 + 1;
    int v25 = v16;
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, std::vector<int> *, std::__shared_weak_count **, double))(*(void *)v17 + 16))(v17, &v34, &v24, v18);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    if (v36)
    {
      float v37 = v36;
      operator delete(v36);
    }
    long long v30 = v26;
    uint64_t v31 = v27;
    nitro::nitro_function::nitro_function(v16);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v29.__begin_)
    {
      v29.__end_ = v29.__begin_;
      operator delete(v29.__begin_);
    }
    uint64_t v9 = *a4;
    uint64_t v10 = a4[1];
  }
  if (v10 == v9) {
    long long v26 = 0uLL;
  }
  else {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v26, v9);
  }
  if (a3[1] == *a3)
  {
    uint64_t v22 = 0;
    BOOL v23 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v22, *a3);
    uint64_t v19 = v22;
    if (v22)
    {
      uint64_t v20 = *(void *)(v26 + 24);
      Espresso::layer_nd_shape::shape_vector(&v29, (uint64_t)v32);
      uint64_t v21 = *(void *)(v19 + 24);
      Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)&v30);
      v34.__begin_ = (std::vector<int>::pointer)&unk_1EE37E320;
      float v35 = &v34;
      apply_func_on_nd_slice(*(const void **)(a1 + 384), *(void *)(a1 + 392), a1 + 408, (int **)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), v21, (uint64_t *)&__p, v20, 0, (uint64_t *)&v29, (uint64_t)&v34);
      std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::~__value_func[abi:ne180100](&v34);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v29.__begin_)
      {
        v29.__end_ = v29.__begin_;
        operator delete(v29.__begin_);
      }
    }
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*((void *)&v26 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v26 + 1));
  }
}

void sub_192B68A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::~__value_func[abi:ne180100]((void *)(v25 - 152));
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(a1);
}

void Espresso::general_slice_get_params_from_inputs(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v17 = *a1;
  unint64_t v18 = (a1[1] - *a1) >> 4;
  if (v18 <= a2)
  {
    uint64_t v77 = 0;
    uint64_t v78 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v77, (uint64_t *)(v17 + 16 * a2));
    uint64_t v17 = *a1;
    unint64_t v18 = (a1[1] - *a1) >> 4;
  }
  unint64_t v19 = a2 + 1;
  if (v18 <= v19)
  {
    uint64_t v75 = 0;
    uint64_t v76 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v75, (uint64_t *)(v17 + 16 * v19));
    uint64_t v17 = *a1;
    unint64_t v18 = (a1[1] - *a1) >> 4;
  }
  unint64_t v20 = a2 + 2;
  if (v18 <= v20)
  {
    uint64_t v73 = 0;
    uint64_t v74 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v73, (uint64_t *)(v17 + 16 * v20));
    uint64_t v17 = *a1;
    unint64_t v18 = (a1[1] - *a1) >> 4;
  }
  unint64_t v21 = a2 + 3;
  if (v18 <= v21)
  {
    uint64_t v71 = 0;
    int v72 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v71, (uint64_t *)(v17 + 16 * v21));
    uint64_t v17 = *a1;
    unint64_t v18 = (a1[1] - *a1) >> 4;
  }
  unint64_t v22 = a2 + 4;
  if (v18 <= v22)
  {
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    if (!a3) {
      goto LABEL_50;
    }
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v69, (uint64_t *)(v17 + 16 * v22));
    if (!a3) {
      goto LABEL_50;
    }
  }
  unint64_t v23 = 0;
  uint64_t v24 = v77;
  uint64_t v25 = *a4;
  uint64_t v26 = v75;
  uint64_t v27 = *a5;
  uint64_t v28 = v73;
  uint64_t v29 = *a6;
  uint64_t v30 = v71;
  uint64_t v31 = *a7;
  uint64_t v32 = v69;
  uint64_t v33 = v77 + 12;
  uint64_t v34 = v75 + 12;
  uint64_t v35 = *a8;
  uint64_t v36 = v73 + 12;
  uint64_t v37 = v71 + 12;
  uint64_t v38 = v69 + 12;
  do
  {
    if (v24)
    {
      uint64_t v39 = 0;
      unint64_t v40 = *(int *)(v24 + 8);
      do
      {
        v40 *= *(int *)(v33 + v39);
        v39 += 4;
      }
      while (v39 != 12);
      if (v40 > v23) {
        *(_DWORD *)(v25 + 4 * v23) = llroundf(*(float *)(*(void *)(v24 + 24) + 4 * v23));
      }
    }
    if (v26)
    {
      uint64_t v41 = 0;
      unint64_t v42 = *(int *)(v26 + 8);
      do
      {
        v42 *= *(int *)(v34 + v41);
        v41 += 4;
      }
      while (v41 != 12);
      if (v42 > v23) {
        *(_DWORD *)(v27 + 4 * v23) = llroundf(*(float *)(*(void *)(v26 + 24) + 4 * v23));
      }
    }
    if (v28)
    {
      uint64_t v43 = 0;
      unint64_t v44 = *(int *)(v28 + 8);
      do
      {
        v44 *= *(int *)(v36 + v43);
        v43 += 4;
      }
      while (v43 != 12);
      if (v44 > v23) {
        *(_DWORD *)(v29 + 4 * v23) = llroundf(*(float *)(*(void *)(v28 + 24) + 4 * v23));
      }
    }
    if (v30)
    {
      uint64_t v45 = 0;
      unint64_t v46 = *(int *)(v30 + 8);
      do
      {
        v46 *= *(int *)(v37 + v45);
        v45 += 4;
      }
      while (v45 != 12);
      if (v46 > v23)
      {
        unint64_t v47 = v23 >> 6;
        uint64_t v48 = 1 << v23;
        if (roundf(*(float *)(*(void *)(v30 + 24) + 4 * v23)) == 0.0) {
          uint64_t v49 = *(void *)(v31 + 8 * v47) & ~v48;
        }
        else {
          uint64_t v49 = *(void *)(v31 + 8 * v47) | v48;
        }
        *(void *)(v31 + 8 * v47) = v49;
      }
    }
    if (v32)
    {
      uint64_t v50 = 0;
      unint64_t v51 = *(int *)(v32 + 8);
      do
      {
        v51 *= *(int *)(v38 + v50);
        v50 += 4;
      }
      while (v50 != 12);
      if (v51 > v23)
      {
        unint64_t v52 = v23 >> 6;
        uint64_t v53 = 1 << v23;
        if (roundf(*(float *)(*(void *)(v32 + 24) + 4 * v23)) == 0.0) {
          uint64_t v54 = *(void *)(v35 + 8 * v52) & ~v53;
        }
        else {
          uint64_t v54 = *(void *)(v35 + 8 * v52) | v53;
        }
        *(void *)(v35 + 8 * v52) = v54;
      }
    }
    ++v23;
  }
  while (v23 != a3);
LABEL_50:
  uint64_t v55 = a1[1] - *a1;
  if ((unint64_t)v55 <= 0x60) {
    goto LABEL_67;
  }
  unint64_t v56 = a2 + 5;
  if (v56 >= v55 >> 4)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    if (!a3) {
      goto LABEL_65;
    }
LABEL_55:
    unint64_t v57 = 0;
    uint64_t v58 = v67;
    uint64_t v59 = *a9;
    uint64_t v60 = v67 + 12;
    do
    {
      if (v58)
      {
        uint64_t v61 = 0;
        unint64_t v62 = *(int *)(v58 + 8);
        do
        {
          v62 *= *(int *)(v60 + v61);
          v61 += 4;
        }
        while (v61 != 12);
        if (v62 > v57)
        {
          unint64_t v63 = v57 >> 6;
          uint64_t v64 = 1 << v57;
          if (roundf(*(float *)(*(void *)(v58 + 24) + 4 * v57)) == 0.0) {
            uint64_t v65 = *(void *)(v59 + 8 * v63) & ~v64;
          }
          else {
            uint64_t v65 = *(void *)(v59 + 8 * v63) | v64;
          }
          *(void *)(v59 + 8 * v63) = v65;
        }
      }
      ++v57;
    }
    while (v57 != a3);
    goto LABEL_65;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v67, (uint64_t *)(*a1 + 16 * v56));
  if (a3) {
    goto LABEL_55;
  }
LABEL_65:
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
LABEL_67:
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  long long v66 = v78;
  if (v78)
  {
    nitro::nitro_function::nitro_function(v66);
  }
}

void sub_192B68F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::stack_nd_kernel_cpu::on_resized(std::vector<int> *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v5 = *((void *)a3 + 1) - *(void *)a3;
  unint64_t v6 = v5 >> 4;
  begifloat n = this[13].__begin_;
  std::vector<int>::pointer end = this[13].__end_;
  unint64_t v9 = ((char *)end - (char *)begin) >> 3;
  if (v5 >> 4 <= v9)
  {
    if (v6 >= v9) {
      goto LABEL_18;
    }
    unint64_t v22 = &begin[2 * v6];
    goto LABEL_17;
  }
  unint64_t v10 = v6 - v9;
  value = this[13].__end_cap_.__value_;
  if (v6 - v9 <= ((char *)value - (char *)end) >> 3)
  {
    bzero(this[13].__end_, 8 * v10);
    unint64_t v22 = &end[2 * v10];
LABEL_17:
    this[13].__end_ = v22;
    goto LABEL_18;
  }
  if (v5 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = (char *)value - (char *)begin;
  if (v12 >> 2 > v6) {
    unint64_t v6 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v6;
  }
  uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
  int v15 = &v14[8 * v9];
  uint64_t v17 = (int *)&v14[8 * v16];
  bzero(v15, 8 * v10);
  unint64_t v18 = (int *)&v15[8 * v10];
  std::vector<int>::pointer v20 = this[13].__begin_;
  unint64_t v19 = (char *)this[13].__end_;
  if (v19 != (char *)v20)
  {
    do
    {
      uint64_t v21 = *((void *)v19 - 1);
      v19 -= 8;
      *((void *)v15 - 1) = v21;
      v15 -= 8;
    }
    while (v19 != (char *)v20);
    unint64_t v19 = (char *)this[13].__begin_;
  }
  this[13].__begin_ = (std::vector<int>::pointer)v15;
  this[13].__end_ = v18;
  this[13].__end_cap_.__value_ = v17;
  if (v19) {
    operator delete(v19);
  }
LABEL_18:
  unint64_t v23 = this + 12;
  std::vector<std::vector<int>>::resize((uint64_t *)&this[12], (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
  uint64_t v24 = *(void *)a3;
  if (*((void *)a3 + 1) != *(void *)a3)
  {
    unint64_t v25 = 0;
    unsigned int v26 = 1;
    do
    {
      Espresso::abstract_blob_container::shape(v32, *(void *)(v24 + 16 * v25));
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v30, (const Espresso::layer_shape *)v32, 0);
      Espresso::layer_nd_shape::shape_vector(&v31, (uint64_t)v30);
      std::vector<int>::pointer v27 = v23->__begin_;
      uint64_t v28 = (uint64_t)&v23->__begin_[6 * v25];
      uint64_t v29 = *(void **)v28;
      if (*(void *)v28)
      {
        *(void *)&v27[6 * v25 + 2] = v29;
        operator delete(v29);
        *(void *)uint64_t v28 = 0;
        *(void *)(v28 + 8) = 0;
        *(void *)(v28 + 16) = 0;
      }
      *(_OWORD *)uint64_t v28 = *(_OWORD *)&v31.__begin_;
      *(void *)&v27[6 * v25 + 4] = v31.__end_cap_.__value_;
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }
      unint64_t v25 = v26;
      uint64_t v24 = *(void *)a3;
      ++v26;
    }
    while (v25 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
  }
  std::vector<int>::resize(this + 14, (((*((void *)this[12].__end_ - 2) - *((void *)this[12].__end_ - 3)) << 30) + 0x100000000) >> 32);
}

void sub_192B691DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::stack_nd_kernel_cpu::~stack_nd_kernel_cpu(Espresso::stack_nd_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3503F0;
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 39);
  if (v3)
  {
    *((void *)this + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE3503F0;
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 39);
  if (v3)
  {
    *((void *)this + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::split_nd_kernel_cpu::on_resized(Espresso::split_nd_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  int v5 = *((_DWORD *)this + 70);
  Espresso::abstract_blob_container::shape(v30, **a3);
  if (v31 == 1) {
    int v6 = 4;
  }
  else {
    int v6 = 5;
  }
  if (v32 == -1) {
    int v7 = v6;
  }
  else {
    int v7 = v32;
  }
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  std::vector<int>::resize((std::vector<int> *)((char *)this + 800), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4);
  uint64_t v8 = *(void *)a2;
  if (*((void *)a2 + 1) == *(void *)a2)
  {
    unint64_t v12 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = (v7 & (v5 >> 31)) + v5;
    do
    {
      Espresso::abstract_blob_container::shape(v30, *(void *)(v8 + v9));
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v29, (const Espresso::layer_shape *)v30, 0);
      *(_DWORD *)(*((void *)this + 100) + 4 * v10) = v29[v11];
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }
      ++v10;
      uint64_t v8 = *(void *)a2;
      unint64_t v12 = (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4;
      v9 += 16;
    }
    while (v12 > v10);
  }
  uint64_t v13 = *((void *)this + 104);
  uint64_t v14 = *((void *)this + 103);
  unint64_t v15 = (v13 - v14) >> 3;
  if (v12 <= v15)
  {
    if (v12 >= v15) {
      return;
    }
    uint64_t v28 = v14 + 8 * v12;
    goto LABEL_32;
  }
  unint64_t v16 = v12 - v15;
  uint64_t v17 = *((void *)this + 105);
  if (v12 - v15 <= (v17 - v13) >> 3)
  {
    bzero(*((void **)this + 104), 8 * v16);
    uint64_t v28 = v13 + 8 * v16;
LABEL_32:
    *((void *)this + 104) = v28;
    return;
  }
  if (v12 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = v17 - v14;
  if (v18 >> 2 > v12) {
    unint64_t v12 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v12;
  }
  std::vector<int>::pointer v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
  uint64_t v21 = &v20[8 * v15];
  unint64_t v23 = &v20[8 * v22];
  bzero(v21, 8 * v16);
  uint64_t v24 = &v21[8 * v16];
  unint64_t v25 = (char *)*((void *)this + 104);
  unsigned int v26 = (char *)*((void *)this + 103);
  if (v25 != v26)
  {
    do
    {
      uint64_t v27 = *((void *)v25 - 1);
      v25 -= 8;
      *((void *)v21 - 1) = v27;
      v21 -= 8;
    }
    while (v25 != v26);
    unint64_t v25 = (char *)*((void *)this + 103);
  }
  *((void *)this + 103) = v21;
  *((void *)this + 104) = v24;
  *((void *)this + 105) = v23;
  if (v25) {
    operator delete(v25);
  }
}

void sub_192B6950C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::split_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  Espresso::abstract_blob_container::shape((char *)&v45, **(void **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)&v45, 0);
  if (__p)
  {
    unint64_t v47 = __p;
    operator delete(__p);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v43, *(uint64_t **)a4);
    uint64_t v7 = v43;
    if (v43)
    {
      uint64_t v8 = *a3;
      if (a3[1] != *a3)
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        do
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v45, (uint64_t *)(v8 + v9));
          *(void *)(*(void *)(a1 + 824) + 8 * v10) = *((void *)v45.__begin_ + 3);
          if (v45.__end_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v45.__end_);
          }
          ++v10;
          uint64_t v8 = *a3;
          v9 += 16;
        }
        while (v10 < (a3[1] - *a3) >> 4);
      }
      int v11 = *(_DWORD *)(a1 + 280);
      uint64_t v12 = *(void *)(v7 + 24);
      Espresso::layer_nd_shape::shape_vector(&v42, (uint64_t)v48);
      uint64_t v13 = *(unsigned char **)(a1 + 824);
      uint64_t v14 = *(unsigned char **)(a1 + 832);
      int64_t v15 = v14 - v13;
      if (v14 == v13)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      else
      {
        if (v15 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v15 >> 3);
        memmove(v16, v13, v15);
        uint64_t v17 = &v16[8 * (v15 >> 3)];
      }
      unint64_t v18 = v17 - v16;
      begifloat n = v42.__begin_;
      std::vector<int>::pointer end = v42.__end_;
      std::vector<int>::size_type v21 = (int)((v17 - v16) >> 3);
      LODWORD(__x.__begin_) = 0;
      std::vector<int>::vector(&v45, v21, (const std::vector<int>::value_type *)&__x);
      std::vector<int>::value_type v49 = 0;
      std::vector<int>::vector(&__x, v21, &v49);
      unint64_t v22 = (unint64_t)((char *)end - (char *)begin) >> 2;
      int v23 = (v22 & (v11 >> 31)) + v11;
      if (v23 < 0 || v23 >= (int)v22) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
      }
      unint64_t v24 = v18 >> 3;
      std::vector<int>::pointer v25 = v42.__end_;
      int v26 = 1;
      if (v42.__begin_ != v42.__end_)
      {
        std::vector<int>::pointer v27 = v42.__begin_;
        do
        {
          int v28 = *v27++;
          v26 *= v28;
        }
        while (v27 != v42.__end_);
      }
      uint64_t v29 = (v18 >> 3);
      if ((int)v24 > 0)
      {
        uint64_t v30 = 0;
        int v31 = &v42.__begin_[v23 + 1];
        uint64_t v32 = *(void *)(a1 + 800);
        std::vector<int>::pointer v33 = __x.__begin_;
        do
        {
          int v34 = *(_DWORD *)(v32 + 4 * v30);
          if (v31 != v25)
          {
            uint64_t v35 = v31;
            do
            {
              int v36 = *v35++;
              v34 *= v36;
            }
            while (v35 != v25);
          }
          v33[v30++] = v34;
        }
        while (v30 != v29);
      }
      int v37 = 0;
      do
      {
        if (v37 >= v26) {
          break;
        }
        if ((int)v24 >= 1)
        {
          uint64_t v38 = 0;
          std::vector<int>::pointer v39 = __x.__begin_;
          std::vector<int>::pointer v40 = v45.__begin_;
          do
          {
            cblas_scopy(v39[v38], (const float *)(v12 + 4 * v37), 1, (float *)(*(void *)&v16[8 * v38] + 4 * v40[v38]), 1);
            std::vector<int>::pointer v39 = __x.__begin_;
            int v41 = __x.__begin_[v38];
            std::vector<int>::pointer v40 = v45.__begin_;
            v37 += v41;
            v45.__begin_[v38++] += v41;
          }
          while (v29 != v38);
        }
      }
      while (v37);
      if (__x.__begin_)
      {
        __x.__end_ = __x.__begin_;
        operator delete(__x.__begin_);
      }
      if (v45.__begin_)
      {
        v45.__end_ = v45.__begin_;
        operator delete(v45.__begin_);
      }
      if (v16) {
        operator delete(v16);
      }
      if (v42.__begin_)
      {
        v42.__end_ = v42.__begin_;
        operator delete(v42.__begin_);
      }
    }
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
}

void sub_192B69800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  int v23 = *(void **)(v21 - 88);
  if (v23)
  {
    *(void *)(v21 - 80) = v23;
    operator delete(v23);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v20) {
    operator delete(v20);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::split_nd_kernel_cpu::~split_nd_kernel_cpu(Espresso::split_nd_kernel_cpu *this)
{
  *(void *)this = &unk_1EE350298;
  uint64_t v2 = (void *)*((void *)this + 103);
  if (v2)
  {
    *((void *)this + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 100);
  if (v3)
  {
    *((void *)this + 101) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE350298;
  uint64_t v2 = (void *)*((void *)this + 103);
  if (v2)
  {
    *((void *)this + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 100);
  if (v3)
  {
    *((void *)this + 101) = v3;
    operator delete(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::softmax_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v6 = *(_DWORD *)(a1 + 280);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v30, *a4);
  uint64_t v7 = *(void *)(v30 + 24);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v28, *a3);
  unint64_t v8 = *(void *)(a1 + 296) - *(void *)(a1 + 288);
  int v9 = (v8 >> 2) & (v6 >> 31);
  uint64_t v10 = (v9 + v6);
  if (v9 + v6 < 0 || (int)v10 >= (int)(v8 >> 2)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  }
  int v11 = *(float **)(v28 + 24);
  std::vector<int>::size_type v12 = (v8 >> 2);
  std::vector<int>::vector(&v38, v12);
  std::vector<int>::vector(&v37, v12);
  uint64_t v13 = *(int **)(a1 + 288);
  int v14 = 1;
  while (v13 != *(int **)(a1 + 296))
  {
    int v15 = *v13++;
    v14 *= v15;
  }
  std::vector<float>::vector(v36, v14);
  std::vector<float>::vector(v35, v14);
  NDShapeUtils::compute_strides(*(void *)(a1 + 288), *(void *)(a1 + 296), (uint64_t)v38.__begin_, (uint64_t)v38.__end_);
  float __A = 0.0;
  int v34 = v14;
  float __C = 0.0;
  if (v14 >= 1)
  {
    int v16 = 0;
    begifloat n = v38.__begin_;
    do
    {
      LODWORD(v18) = begin[v10];
      if ((int)v18 >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v16;
        do
        {
          vDSP_maxv((const float *)(v7 + v20 * 4), (int)v18, &__C, *(int *)(*(void *)(a1 + 288) + 4 * v10));
          float __C = -__C;
          vDSP_vsadd((const float *)(v7 + v20 * 4), v38.__begin_[v10], &__C, &v35[0][v20], v38.__begin_[v10], *(int *)(*(void *)(a1 + 288) + 4 * v10));
          ++v19;
          begifloat n = v38.__begin_;
          ++v20;
          uint64_t v18 = v38.__begin_[v10];
        }
        while (v19 < v18);
      }
      int v21 = v14;
      if ((int)v10 > 0) {
        int v21 = begin[(v10 - 1)];
      }
      v16 += v21;
    }
    while (v16 < v14);
  }
  vvexpf(v36[0], v35[0], &v34);
  if (v14 >= 1)
  {
    int v22 = 0;
    std::vector<int>::pointer v23 = v38.__begin_;
    do
    {
      LODWORD(v24) = v23[v10];
      if ((int)v24 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = v22;
        do
        {
          vDSP_sve(&v36[0][v26], (int)v24, &__A, *(int *)(*(void *)(a1 + 288) + 4 * v10));
          vDSP_vfill(&__A, &v35[0][v26], v38.__begin_[v10], *(int *)(*(void *)(a1 + 288) + 4 * v10));
          ++v25;
          std::vector<int>::pointer v23 = v38.__begin_;
          ++v26;
          uint64_t v24 = v38.__begin_[v10];
        }
        while (v25 < v24);
      }
      int v27 = v14;
      if ((int)v10 > 0) {
        int v27 = v23[(v10 - 1)];
      }
      v22 += v27;
    }
    while (v22 < v14);
  }
  vvdivf(v11, v36[0], v35[0], &v34);
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
}

void sub_192B69C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  uint64_t v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::softmax_nd_kernel_cpu::~softmax_nd_kernel_cpu(Espresso::softmax_nd_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3570C8;
  uint64_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3570C8;
  uint64_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::sliding_windows_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Espresso::abstract_blob_container::shape((char *)&v45, **(void **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)&v45, 0);
  if (__p)
  {
    unint64_t v47 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v45, **(void **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v44, (const Espresso::layer_shape *)&v45, 0);
  if (__p)
  {
    unint64_t v47 = __p;
    operator delete(__p);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v42, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v40 = 0;
    int v41 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v40, *(uint64_t **)a3);
  }
  int v7 = a1[70];
  int v8 = a1[71];
  int v9 = a1[72];
  uint64_t v32 = *(void *)(v42 + 24);
  Espresso::layer_nd_shape::shape_vector(&v39, (uint64_t)v48);
  uint64_t v31 = *(void *)(v40 + 24);
  Espresso::layer_nd_shape::shape_vector(&v38, (uint64_t)v44);
  int64_t v10 = (char *)v39.__end_ - (char *)v39.__begin_;
  unint64_t v35 = (unint64_t)((char *)v39.__end_ - (char *)v39.__begin_) >> 2;
  int v11 = (v35 & (v7 >> 31)) + v7;
  int v12 = v39.__begin_[v11];
  v54[0] = 0;
  std::vector<int>::vector(&v45, (int)(v39.__end_ - v39.__begin_));
  std::vector<int>::vector(&v53, (int)(v10 >> 2));
  std::vector<int>::vector(&v52, ((v10 << 30) + 0x100000000) >> 32);
  begifloat n = v38.__begin_;
  int v14 = 1;
  while (begin != v38.__end_)
  {
    int v15 = *begin++;
    v14 *= v15;
  }
  NDShapeUtils::compute_strides((uint64_t)v39.__begin_, (uint64_t)v39.__end_, (uint64_t)v45.__begin_, (uint64_t)v45.__end_);
  if (v14 >= 1)
  {
    uint64_t v16 = 0;
    int v17 = v12 - v8;
    uint64_t v37 = v11;
    int v18 = v45.__begin_[v11];
    uint64_t v36 = v18 * v9;
    uint64_t v19 = v18 * v8;
    uint64_t v20 = ((unint64_t)v10 >> 2);
    int v21 = v18 * v8;
    int v33 = v14;
    int v34 = v17 / v9;
    int v30 = v17 / v9 + 1;
    do
    {
      NDShapeUtils::unravel_index(v16, (uint64_t)v38.__begin_, (uint64_t)v38.__end_, v52.__begin_, (uint64_t)v52.__end_);
      if ((int)v35 >= 1)
      {
        uint64_t v22 = 0;
        std::vector<int>::pointer v23 = v52.__begin_;
        std::vector<int>::pointer v24 = v53.__begin_;
        do
        {
          if (v22 >= v37) {
            int v25 = 0;
          }
          else {
            int v25 = v23[v22];
          }
          v24[v22++] = v25;
        }
        while (v20 != v22);
      }
      std::vector<int>::value_type v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49, v45.__begin_, (uint64_t)v45.__end_, v45.__end_ - v45.__begin_);
      NDShapeUtils::ravel_multi_index(v53.__begin_, (uint64_t)v53.__end_, (uint64_t)v39.__begin_, (uint64_t)v39.__end_, v49, v54);
      if (v49)
      {
        uint64_t v50 = v49;
        operator delete(v49);
      }
      int v26 = v54[0];
      if ((v34 & 0x80000000) == 0)
      {
        int v26 = v54[0];
        int v27 = (float *)(v31 + 4 * (int)v16);
        uint64_t v16 = (int)v16;
        uint64_t v28 = (const float *)(v32 + 4 * v54[0]);
        int v29 = v30;
        do
        {
          cblas_scopy(v21, v28, 1, v27, 1);
          v26 += v36;
          v16 += v19;
          v27 += v19;
          v28 += v36;
          --v29;
        }
        while (v29);
      }
      v54[0] = v26;
    }
    while ((int)v16 < v33);
  }
  if (v52.__begin_)
  {
    v52.__end_ = v52.__begin_;
    operator delete(v52.__begin_);
  }
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
  if (v39.__begin_)
  {
    v39.__end_ = v39.__begin_;
    operator delete(v39.__begin_);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
}

void sub_192B6A12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sliding_windows_kernel_cpu::~sliding_windows_kernel_cpu(Espresso::sliding_windows_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::reverse_seq_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  Espresso::abstract_blob_container::shape((char *)&v46, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v49, (const Espresso::layer_shape *)&v46, 0);
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v46, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v45, (const Espresso::layer_shape *)&v46, 0);
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v43, *a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v41, *a4 + 2);
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v39, *(uint64_t **)a3);
  }
  int v7 = *(_DWORD *)(a1 + 280);
  int v8 = *(_DWORD *)(a1 + 284);
  uint64_t v36 = *(void *)(v43 + 24);
  Espresso::layer_nd_shape::shape_vector(&v38, (uint64_t)v49);
  int v9 = *(float **)(v41 + 24);
  Espresso::layer_nd_shape::shape_vector(&v37, (uint64_t)v45);
  unint64_t v10 = (unint64_t)((char *)v38.__end_ - (char *)v38.__begin_) >> 2;
  int v11 = v10 & (v7 >> 31);
  int v12 = "Reverse_seq Layer: Invalid value of the argument 'batch_axis'.";
  uint64_t v13 = (v7 + v11);
  if (v7 + v11 < 0) {
    goto LABEL_52;
  }
  if ((int)v13 >= (int)v10) {
    goto LABEL_52;
  }
  int v12 = "Reverse_seq Layer: Invalid value of the argument 'seq_axis'.";
  uint64_t v14 = v8 + (v10 & (v8 >> 31));
  if ((int)v14 < 0 || (int)v14 >= (int)v10) {
    goto LABEL_52;
  }
  if (v13 >= v14) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Reverse_seq Layer: batch_axis: %d should be strictly less than seq_axis: %d", v13, v14);
  }
  if ((std::vector<int>::pointer)((char *)v37.__end_ - (char *)v37.__begin_) != (std::vector<int>::pointer)4
    || (uint64_t v15 = *v37.__begin_, v38.__begin_[v13] != (int)(float)((float)(int)v15 + 0.5)))
  {
    int v12 = "Reverse_seq Layer: seq_lengths should be a vector of length equal to batch dimension of input.";
    goto LABEL_52;
  }
  uint64_t v35 = *(void *)(v39 + 24);
  if (v15)
  {
    int v12 = "Reverse_seq Layer: each seq_lengths element should be <= sequence dimension of input.";
    uint64_t v16 = v9;
    while (1)
    {
      int v17 = (int)(float)(*v16 + 0.5);
      if (v17 < 0 || v38.__begin_[v14] < v17) {
        break;
      }
      ++v16;
      if (!--v15) {
        goto LABEL_20;
      }
    }
LABEL_52:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v12);
  }
LABEL_20:
  std::vector<int>::size_type v18 = ((unint64_t)((char *)v38.__end_ - (char *)v38.__begin_) >> 2);
  std::vector<int>::vector(&v46, v18);
  std::vector<int>::vector(&v51, v18);
  std::vector<int>::vector(&v50, v18);
  int v19 = 1;
  if (v38.__begin_ != v38.__end_)
  {
    begifloat n = v38.__begin_;
    do
    {
      int v21 = *begin++;
      v19 *= v21;
    }
    while (begin != v38.__end_);
  }
  NDShapeUtils::compute_strides((uint64_t)v38.__begin_, (uint64_t)v38.__end_, (uint64_t)v46.__begin_, (uint64_t)v46.__end_);
  if (v19 >= 1)
  {
    uint64_t v22 = 0;
    std::vector<int>::pointer v23 = v38.__begin_;
    do
    {
      NDShapeUtils::unravel_index(v22, (uint64_t)v23, (uint64_t)v38.__end_, v50.__begin_, (uint64_t)v50.__end_);
      std::vector<int>::pointer v24 = v46.__begin_;
      LODWORD(v25) = v46.__begin_[v14];
      if ((int)v25 >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v50.__begin_[v13];
        uint64_t v29 = v35;
        uint64_t v28 = v36;
        do
        {
          int v30 = (int)(float)(v9[v27] + 0.5);
          if (v30 < 1)
          {
            int v31 = v22;
          }
          else
          {
            cblas_scopy(v30, (const float *)(v28 + 4 * (int)v22), -(int)v25, (float *)(v29 + 4 * (int)v22), v25);
            int v30 = (int)(float)(v9[v27] + 0.5);
            std::vector<int>::pointer v24 = v46.__begin_;
            int v31 = v22 + v46.__begin_[v14] * v30;
          }
          int v32 = v38.__begin_[v14];
          BOOL v33 = __OFSUB__(v32, v30);
          int v34 = v32 - v30;
          if (!((v34 < 0) ^ v33 | (v34 == 0)))
          {
            cblas_scopy(v34, (const float *)(v28 + 4 * v31), v24[v14], (float *)(v29 + 4 * v31), v24[v14]);
            std::vector<int>::pointer v24 = v46.__begin_;
          }
          ++v26;
          uint64_t v25 = v24[v14];
          v29 += 4;
          v28 += 4;
        }
        while (v26 < v25);
      }
      std::vector<int>::pointer v23 = v38.__begin_;
      uint64_t v22 = (v22 + v38.__begin_[v14] * v25);
    }
    while ((int)v22 < v19);
  }
  if (v50.__begin_)
  {
    v50.__end_ = v50.__begin_;
    operator delete(v50.__begin_);
  }
  if (v51.__begin_)
  {
    v51.__end_ = v51.__begin_;
    operator delete(v51.__begin_);
  }
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
}

void sub_192B6A600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::reverse_seq_kernel_cpu::~reverse_seq_kernel_cpu(Espresso::reverse_seq_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::cross_entropy_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v11, *a3);
  uint64_t v7 = 0;
  uint64_t v8 = *(int *)(v11 + 8);
  do
  {
    v8 *= *(int *)(v11 + 12 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v8 != 1)
  {
    unint64_t v10 = "cross_entropy: output should be reduced to a scalar";
    goto LABEL_12;
  }
  if (*(void *)(a4 + 8) - *(void *)a4 != 32)
  {
    unint64_t v10 = "cross_entropy needs 2 inputs: probability and label as class indices";
LABEL_12:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v10);
  }
  Espresso::compute_cross_entropy_cpu(*(uint64_t **)a4, (uint64_t *)(*(void *)a4 + 16), *a3, (unsigned char *)(a1 + 280));
  int v9 = v12;
  if (v12)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192B6A7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::cross_entropy_kernel_cpu::~cross_entropy_kernel_cpu(Espresso::cross_entropy_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::sgd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  float __D = 0.0;
  float v29 = 1.0;
  float __B = 0.0;
  uint64_t v7 = *(int *)(a1 + 288);
  if (!*(unsigned char *)(a1 + 280))
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, (uint64_t *)(*a4 + 32 * v7));
    unint64_t v10 = v28;
    float v31 = -**(float **)(v27 + 24);
    if (!v28) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v8 = 3 * v7;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, (uint64_t *)(*a4 + 48 * v7));
  float v9 = **(float **)(v27 + 24);
  float __D = v9;
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  float v31 = -v9;
  if (3 * *(int *)(a1 + 288) + 1 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 4))
  {
    float __B = *(float *)(a1 + 284);
    goto LABEL_10;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, (uint64_t *)(*a4 + 16 * v8 + 16));
  unint64_t v10 = v28;
  float __B = **(float **)(v27 + 24);
  if (v28) {
LABEL_8:
  }
    nitro::nitro_function::nitro_function(v10);
LABEL_10:
  if (*(_DWORD *)(a1 + 288))
  {
    unint64_t v11 = 0;
    do
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v27, (uint64_t *)(*a4 + 16 * v11));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v25, (uint64_t *)(*a4 + 16 * (v11 + *(int *)(a1 + 288))));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v23, (uint64_t *)(*a3 + 16 * v11));
      if (*(unsigned char *)(a1 + 280))
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v21, (uint64_t *)(*a4 + 16 * (v11 + 2 * *(int *)(a1 + 288))));
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v19, (uint64_t *)(*a3 + 16 * (v11 + *(int *)(a1 + 288))));
        uint64_t v12 = 0;
        uint64_t v13 = v19;
        vDSP_Length __N = *(int *)(v21 + 8);
        do
        {
          __N *= *(int *)(v21 + 12 + v12);
          v12 += 4;
        }
        while (v12 != 12);
        vDSP_vsmsma(*(const float **)(v21 + 24), 1, &__B, *(const float **)(v25 + 24), 1, &__D, *(float **)(v19 + 24), 1, __N);
        uint64_t v15 = 0;
        vDSP_Length v16 = *(int *)(v27 + 8);
        do
        {
          v16 *= *(int *)(v27 + 12 + v15);
          v15 += 4;
        }
        while (v15 != 12);
        vDSP_vsub(*(const float **)(v13 + 24), 1, *(const float **)(v27 + 24), 1, *(float **)(v23 + 24), 1, v16);
        if (v20) {
          nitro::nitro_function::nitro_function(v20);
        }
        if (v22) {
          nitro::nitro_function::nitro_function(v22);
        }
      }
      else
      {
        uint64_t v17 = 0;
        vDSP_Length v18 = *(int *)(v27 + 8);
        do
        {
          v18 *= *(int *)(v27 + 12 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        vDSP_vsmsma(*(const float **)(v27 + 24), 1, &v29, *(const float **)(v25 + 24), 1, &v31, *(float **)(v23 + 24), 1, v18);
      }
      if (v24) {
        nitro::nitro_function::nitro_function(v24);
      }
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      ++v11;
    }
    while (v11 < *(int *)(a1 + 288));
  }
}

void sub_192B6AB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sgd_kernel_cpu::~sgd_kernel_cpu(Espresso::sgd_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::adam_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = *(int *)(a1 + 292);
  uint64_t v8 = 4 * v7;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v48, (uint64_t *)(*a4 + (v7 << 6)));
  float v9 = **(float **)(v48 + 24);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v48, (uint64_t *)(*a4 + ((16 * v8) | 0x10)));
  float v10 = **(float **)(v48 + 24);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  float v11 = *(float *)(a1 + 280);
  float v12 = *(float *)(a1 + 284);
  float v46 = v12;
  float __B = v11;
  unint64_t v13 = (uint64_t)(a4[1] - *a4) >> 4;
  if (v13 >= (v8 | 3uLL))
  {
    if (v13 != v8 + 4) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid number of inputs to adam kernel");
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v48, (uint64_t *)(*a4 + ((16 * v8) | 0x20)));
    float __B = **(float **)(v48 + 24);
    if (v49) {
      nitro::nitro_function::nitro_function(v49);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v48, (uint64_t *)(*a4 + 16 * (v8 | 3)));
    float v12 = **(float **)(v48 + 24);
    float v46 = v12;
    if (v49) {
      nitro::nitro_function::nitro_function(v49);
    }
  }
  if (v9 < 0.0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float const&>(v9);
  }
  float v14 = *(float *)(a1 + 288);
  if (v14 < 0.0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>("eps = %f < 0", *(float *)(a1 + 288));
  }
  if (__B < 0.0 || __B >= 1.0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>("beta1 = %f not in [0, 1)", __B);
  }
  if (v12 < 0.0 || v12 >= 1.0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>("beta2 = %f not in [0, 1)", v12);
  }
  int v15 = (int)v10;
  float v16 = -v9;
  float v44 = 1.0 - v12;
  float __D = 1.0 - __B;
  float v43 = 1.0;
  long double v17 = (double)(v15 + 1);
  float v18 = 1.0 - pow(__B, v17);
  float v19 = 1.0 - pow(v12, v17);
  float v20 = sqrtf(v19);
  float v41 = v14 * v20;
  float v42 = (float)(v20 * v16) / v18;
  if (*(_DWORD *)(a1 + 292))
  {
    unint64_t v21 = 0;
    do
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v48, (uint64_t *)(*a4 + 16 * v21));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v39, (uint64_t *)(*a4 + 16 * (v21 + *(int *)(a1 + 292))));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v37, (uint64_t *)(*a4 + 16 * (v21 + 2 * *(int *)(a1 + 292))));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v35, (uint64_t *)(*a4 + 16 * (v21 + 3 * *(int *)(a1 + 292))));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v33, (uint64_t *)(*a3 + 16 * v21));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v31, (uint64_t *)(*a3 + 16 * (v21 + *(int *)(a1 + 292))));
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29[1], (uint64_t *)(*a3 + 16 * (v21 + 2 * *(int *)(a1 + 292))));
      uint64_t v22 = 0;
      v29[0] = 0;
      uint64_t v23 = *(void *)&v29[1];
      int v24 = *(_DWORD *)(*(void *)&v29[1] + 8);
      do
      {
        v24 *= *(_DWORD *)(*(void *)&v29[1] + 12 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      v29[0] = v24;
      uint64_t v25 = v39;
      uint64_t v26 = v31;
      vDSP_vsmsma(*(const float **)(v37 + 24), 1, &__B, *(const float **)(v39 + 24), 1, &__D, *(float **)(v31 + 24), 1, v24);
      uint64_t v27 = *(const float **)(v25 + 24);
      uint64_t v28 = v33;
      vDSP_vmul(v27, 1, v27, 1, *(float **)(v33 + 24), 1, v29[0]);
      vDSP_vsmsma(*(const float **)(v35 + 24), 1, &v46, *(const float **)(v28 + 24), 1, &v44, *(float **)(v23 + 24), 1, v29[0]);
      vvsqrtf(*(float **)(v28 + 24), *(const float **)(v23 + 24), v29);
      vDSP_vsadd(*(const float **)(v28 + 24), 1, &v41, *(float **)(v28 + 24), 1, v29[0]);
      vDSP_vdiv(*(const float **)(v28 + 24), 1, *(const float **)(v26 + 24), 1, *(float **)(v28 + 24), 1, v29[0]);
      vDSP_vsmsma(*(const float **)(v48 + 24), 1, &v43, *(const float **)(v28 + 24), 1, &v42, *(float **)(v28 + 24), 1, v29[0]);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v40) {
        nitro::nitro_function::nitro_function(v40);
      }
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      ++v21;
    }
    while (v21 < *(int *)(a1 + 292));
  }
}

void sub_192B6B020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  int v24 = *(std::__shared_weak_count **)(v22 + 8);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,float const&>(float a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("lr = %f < 0", a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,float &>(char *a1, float a2)
{
}

void Espresso::adam_kernel_cpu::~adam_kernel_cpu(Espresso::adam_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::gather_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  if ((char *)a4[1] - (char *)*a4 != 32) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: two inputs required");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v24, *a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v22, *a4 + 2);
  if (a3[1] == *a3)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v20, *a3);
  }
  if (!v24 || !v22 || !v20)
  {
    uint64_t v11 = **a4;
    if (!v11
      || (*(unsigned int (**)(uint64_t))(*(void *)v11 + 32))(v11)
      || (uint64_t v12 = (*a4)[2]) == 0
      || (*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12)
      || (uint64_t v13 = **a3) == 0
      || (*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13))
    {
      float v14 = "gather_nd_kernel_cpu: Only supports FP32 bottoms and tops";
    }
    else
    {
      if (!(v22 | v20)) {
        goto LABEL_20;
      }
      float v14 = "gather_nd_kernel_cpu: Invalid input/output blobs";
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v14);
  }
  uint64_t v7 = *(void *)(v24 + 24);
  uint64_t v8 = *(float **)(v22 + 24);
  uint64_t v9 = *(void *)(v20 + 24);
  Espresso::abstract_blob_container::shape(v16, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v19, (const Espresso::layer_shape *)v16, 0);
  if (__p)
  {
    float v18 = __p;
    operator delete(__p);
  }
  int v10 = v19[5];
  Espresso::abstract_blob_container::shape(v16, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v15, (const Espresso::layer_shape *)v16, 0);
  if (__p)
  {
    float v18 = __p;
    operator delete(__p);
  }
LABEL_20:
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_192B6B378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 104);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v22 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v22 - 72);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::anonymous namespace'::execute_gather_nd(uint64_t a1, int *a2, int a3, float *a4, int *a5, uint64_t a6, int a7, int a8, int a9, int **a10, unsigned __int8 a11, unsigned __int8 a12)
{
  std::vector<int>::size_type v13 = a5[5];
  uint64_t v14 = a5[5];
  int v15 = 1;
  if ((int)v13 >= 1)
  {
    float v16 = a5;
    uint64_t v17 = a5[5];
    do
    {
      int v18 = *v16++;
      v15 *= v18;
      --v17;
    }
    while (v17);
  }
  if (a9 < 0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("batch_dims cannot be negative.");
  }
  if (a8)
  {
    if (a8 != 2)
    {
      if (a8 != 1) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: Invalid MODE");
      }
      uint64_t v19 = a5[v13 - 1];
      int v20 = v19 + a9;
      if ((int)v19 + a9 > a3) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: TF_GATHER_ND mode indexes plus batch dims exceed data tensor rank.");
      }
      if (v13 - 1 < a9) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: More batch_dims than TF_GATHER_ND indices support.");
      }
      if (v20 >= a3 || (unsigned int v21 = v20 & ~(v20 >> 31), v22 = a2[5], (int)v21 >= (int)v22))
      {
        uint64_t v24 = 1;
      }
      else
      {
        uint64_t v23 = v22 - v21;
        LODWORD(v24) = 1;
        uint64_t v25 = &a2[v21];
        do
        {
          int v26 = *v25++;
          uint64_t v24 = v26 * (uint64_t)(int)v24;
          --v23;
        }
        while (v23);
      }
      unsigned int v55 = a9 & ~(a9 >> 31);
      uint64_t v56 = v14 - ((int)v14 > 0);
      unint64_t v57 = &a5[v55];
      if ((int)v55 >= (int)v56)
      {
        int v59 = 1;
      }
      else
      {
        uint64_t v58 = v56 - v55;
        int v59 = 1;
        uint64_t v60 = &a5[v55];
        do
        {
          int v61 = *v60++;
          v59 *= v61;
          --v58;
        }
        while (v58);
      }
      int v91 = 1;
      if (a9 >= 1)
      {
        uint64_t v92 = a2;
        uint64_t v93 = a9;
        do
        {
          int v94 = *v92++;
          v91 *= v94;
          --v93;
        }
        while (v93);
      }
      uint64_t v95 = a2[5];
      if ((int)v55 >= (int)v95)
      {
        int v97 = 1;
      }
      else
      {
        uint64_t v96 = v95 - v55;
        int v97 = 1;
        float32x4_t v98 = &a2[v55];
        do
        {
          int v99 = *v98++;
          v97 *= v99;
          --v96;
        }
        while (v96);
      }
      if ((int)v55 >= (int)v14)
      {
        uint64_t v101 = 1;
      }
      else
      {
        uint64_t v100 = v14 - v55;
        LODWORD(v101) = 1;
        do
        {
          int v102 = *v57++;
          uint64_t v101 = v102 * (uint64_t)(int)v101;
          --v100;
        }
        while (v100);
      }
      if (v91 >= 1)
      {
        int v103 = 0;
        int v104 = 0;
        LODWORD(v105) = 0;
        uint64_t v131 = 4 * v101;
        uint64_t v106 = 4 * v19;
        uint64_t v137 = a5[v13 - 1];
        int v107 = a5[v13 - 1];
        uint64_t v108 = v59;
        unint64_t v135 = &a2[a9];
        int v127 = v91;
        int v129 = v59;
        int v126 = v97;
        do
        {
          if (v59 >= 1)
          {
            int v133 = v103;
            uint64_t v109 = 0;
            uint64_t v105 = (int)v105;
            signed int v110 = a4;
            do
            {
              if (v107 < 1)
              {
                int v115 = v104;
              }
              else
              {
                uint64_t v111 = v137;
                float32x4_t v112 = &(*a10)[a9];
                float32x4_t v113 = v110;
                uint64_t v114 = v135;
                int v115 = v104;
                do
                {
                  int v116 = llroundf(*v113);
                  int v118 = *v114++;
                  int v117 = v118;
                  if (((v116 < 0) & a12) != 0) {
                    int v119 = v117;
                  }
                  else {
                    int v119 = 0;
                  }
                  int v120 = v119 + v116;
                  BOOL v121 = v119 + v116 >= 0 && v120 < v117;
                  int v122 = v121;
                  if (v121) {
                    char v123 = 1;
                  }
                  else {
                    char v123 = a11 ^ 1;
                  }
                  if ((v123 & 1) == 0) {
                    Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int>(v120, v117);
                  }
                  if (v122) {
                    int v124 = v120;
                  }
                  else {
                    int v124 = 0;
                  }
                  int v125 = *v112++;
                  v115 += v124 * v125;
                  ++v113;
                  --v111;
                }
                while (v111);
              }
              memcpy((void *)(a6 + 4 * v105), (const void *)(a1 + 4 * v115), 4 * v24);
              v105 += v24;
              ++v109;
              signed int v110 = (float *)((char *)v110 + v106);
            }
            while (v109 != v108);
            int v91 = v127;
            int v59 = v129;
            int v97 = v126;
            int v103 = v133;
          }
          v104 += v97;
          ++v103;
          a4 = (float *)((char *)a4 + v131);
        }
        while (v103 != v91);
      }
      return;
    }
    if (a9) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: TORCH_GATHER mode doesn't support batch_dims.");
    }
    int v27 = (a3 & (a7 >> 31)) + a7;
    uint64_t v28 = a2[v27];
    LODWORD(__x.__begin_) = 0;
    std::vector<int>::vector(&v145, v13, (const std::vector<int>::value_type *)&__x);
    std::vector<int>::value_type v143 = 0;
    std::vector<int>::vector(&__x, v13, &v143);
    if (v15 < 1)
    {
      begifloat n = __x.__begin_;
      if (!__x.__begin_) {
        goto LABEL_134;
      }
    }
    else
    {
      for (uint64_t i = 0; i != v15; *(_DWORD *)(a6 + 4 * i++) = *(_DWORD *)(a1 + 4 * v38))
      {
        int v30 = (char *)v145.__begin_;
        int v31 = i;
        uint64_t v32 = v14 + 1;
        if ((int)v14 >= 2)
        {
          do
          {
            *(_DWORD *)&v30[4 * (v32 - 2)] = v31 % a5[(v32 - 2)];
            v31 /= a5[(v32-- - 2)];
          }
          while (v32 > 2);
        }
        *(_DWORD *)int v30 = v31;
        int v33 = llroundf(a4[i]);
        if (((v33 < 0) & a12) != 0) {
          int v34 = v28;
        }
        else {
          int v34 = 0;
        }
        uint64_t v35 = (v34 + v33);
        if ((int)v35 >= 0 && (int)v35 < (int)v28) {
          int v36 = v35;
        }
        else {
          int v36 = 0;
        }
        if (!(((int)v35 >= 0 && (int)v35 < (int)v28) | (a11 ^ 1) & 1)) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("gather_nd_kernel: In TORCH_GATHER mode, Invalid index %d into axis of size %d\n", v35, v28);
        }
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__x, v30, (uint64_t)v145.__end_, ((char *)v145.__end_ - v30) >> 2);
        begifloat n = __x.__begin_;
        __x.__begin_[v27] = v36;
        int v38 = 0;
        if (v14)
        {
          uint64_t v39 = *a10;
          uint64_t v40 = begin;
          uint64_t v41 = v14;
          do
          {
            int v43 = *v40++;
            int v42 = v43;
            int v44 = *v39++;
            v38 += v44 * v42;
            --v41;
          }
          while (v41);
        }
      }
    }
    __x.__end_ = begin;
    operator delete(begin);
LABEL_134:
    if (v145.__begin_)
    {
      v145.__end_ = v145.__begin_;
      operator delete(v145.__begin_);
    }
    return;
  }
  int v45 = a3 & (a7 >> 31);
  BOOL v46 = __OFADD__(v45, a7);
  uint64_t v47 = (v45 + a7);
  if ((int)v47 < 0 != v46) {
    int v48 = -1;
  }
  else {
    int v48 = v47;
  }
  unsigned int v49 = v48 + 1;
  uint64_t v50 = a2[5];
  if ((int)v49 >= (int)v50)
  {
    int v52 = 1;
  }
  else
  {
    uint64_t v51 = v50 - v49;
    int v52 = 1;
    std::vector<int> v53 = &a2[v49];
    do
    {
      int v54 = *v53++;
      v52 *= v54;
      --v51;
    }
    while (v51);
  }
  if (v13 < a9) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: More batch_dims than TF_GATHER indices support.");
  }
  if ((int)v47 < a9) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("gather_nd_kernel_cpu: TF_GATHER batch_dims must be less than or equal to axis.");
  }
  if (v13 <= a9 || (unsigned int v62 = a9 & ~(a9 >> 31), (int)v62 >= (int)v13))
  {
    int v65 = 1;
  }
  else
  {
    unint64_t v63 = a5[5] - (unint64_t)v62;
    uint64_t v64 = &a5[v62];
    int v65 = 1;
    do
    {
      int v66 = *v64++;
      v65 *= v66;
      --v63;
    }
    while (v63);
  }
  int v67 = 1;
  if (a9 >= 1)
  {
    uint64_t v68 = a2;
    uint64_t v69 = a9;
    do
    {
      int v70 = *v68++;
      v67 *= v70;
      --v69;
    }
    while (v69);
  }
  if ((int)v47 <= a9 || (unsigned int v71 = a9 & ~(a9 >> 31), (int)v71 >= (int)v47))
  {
    int v73 = 1;
  }
  else
  {
    uint64_t v72 = v47 - v71;
    int v73 = 1;
    uint64_t v74 = &a2[v71];
    do
    {
      int v75 = *v74++;
      v73 *= v75;
      --v72;
    }
    while (v72);
  }
  int v130 = v67;
  if (v67 >= 1)
  {
    int v132 = 0;
    int v134 = v73;
    int v76 = 0;
    int v77 = 0;
    uint64_t v78 = a2[(int)v47];
    int v136 = v65;
    uint64_t v138 = v65;
    uint64_t v128 = 4 * v65;
    do
    {
      if (v73 >= 1)
      {
        for (int j = 0; j != v73; ++j)
        {
          if (v65 >= 1)
          {
            int v140 = j;
            int v80 = v77;
            uint64_t v82 = v138;
            float32x4_t v81 = a4;
            unint64_t v83 = (char *)(a6 + 4 * v77);
            do
            {
              int v84 = llroundf(*v81);
              if (((v84 < 0) & a12) != 0) {
                int v85 = v78;
              }
              else {
                int v85 = 0;
              }
              uint64_t v86 = (v85 + v84);
              BOOL v87 = (int)v86 >= (int)v78 || (int)v86 < 0;
              int v88 = !v87;
              if (v87) {
                char v89 = a11 ^ 1;
              }
              else {
                char v89 = 1;
              }
              if ((v89 & 1) == 0) {
                Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("gather_nd_kernel: In TF_GATHER mode, Invalid index %d into axis of size %d\n", v86, v78);
              }
              if (v88) {
                int v90 = v86;
              }
              else {
                int v90 = 0;
              }
              memcpy(v83, (const void *)(a1 + 4 * (v76 + v90 * v52)), 4 * v52);
              v80 += v52;
              v83 += 4 * v52;
              ++v81;
              --v82;
            }
            while (v82);
            int v77 = v80;
            int v65 = v136;
            int v73 = v134;
            int j = v140;
          }
          v76 += v52 * v78;
        }
      }
      a4 = (float *)((char *)a4 + v128);
      ++v132;
    }
    while (v132 != v130);
  }
}

void sub_192B6BB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int>(int a1, int a2)
{
}

void Espresso::non_maximum_suppression_kernel_cpu::on_resized(Espresso::non_maximum_suppression_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v7, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v10, (const Espresso::layer_shape *)v7, 0);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (*((unsigned char *)this + 307)) {
    uint64_t v4 = &v12;
  }
  else {
    uint64_t v4 = &v11;
  }
  LODWORD(v5) = *v4;
  int v6 = (void *)((char *)this + 336);
  if (*((unsigned char *)this + 292))
  {
    unint64_t v5 = (int)v5;
    std::vector<unsigned long>::resize(v6, (int)v5);
  }
  else
  {
    std::vector<unsigned long>::resize(v6, 0);
    unint64_t v5 = (int)v5;
  }
  std::vector<float>::resize((void *)this + 45, v5);
  std::vector<unsigned long>::resize((void *)this + 48, v5);
  std::vector<float>::resize((void *)this + 51, v5);
  std::vector<unsigned long>::resize((void *)this + 54, v5);
  std::vector<int>::resize((std::vector<int> *)this + 19, v5);
}

void sub_192B6BCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::non_maximum_suppression_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  uint64_t v182 = 0;
  int v5 = *(_DWORD *)(a1 + 300);
  if (v5 == 1)
  {
    int v6 = &unk_1EE37CB68;
  }
  else
  {
    if (v5 != 3) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("mode must be either CENTER_SIZE_WIDTH_FIRST or CORNERS_WIDTH_FIRST.");
    }
    int v6 = &unk_1EE37CB10;
  }
  *(void *)&__vImage_Buffer src = v6;
  v178[1] = (float32x2_t)&__src;
  std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::swap(&__src, v181);
  std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~function(&__src);
  uint64_t v7 = a4[1];
  if (v7 == *a4)
  {
    float32x4_t v170 = 0;
    uint64_t v169 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v169, *a4);
    uint64_t v7 = *a4;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v167, v7 + 2);
  uint64_t v8 = *a4;
  uint64_t v134 = *(void *)(v169 + 24);
  uint64_t v9 = *(void *)(v167 + 24);
  float v10 = *(float *)(a1 + 284);
  float v11 = *(float *)(a1 + 288);
  unsigned int v12 = *(_DWORD *)(a1 + 280);
  uint64_t v13 = (*(void *)(a1 + 320) - *(void *)(a1 + 312)) << 30;
  unint64_t v14 = (v13 + 0x200000000) >> 32;
  if (v14 < ((char *)a4[1] - (char *)*a4) >> 4)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__src, &v8[2 * v14]);
    if ((void)__src) {
      float v10 = **(float **)(__src + 24);
    }
    unint64_t v15 = (v13 + 0x300000000) >> 32;
    if (v15 < ((char *)a4[1] - (char *)*a4) >> 4)
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v171, &(*a4)[2 * v15]);
      if (v171) {
        float v11 = *v171[3];
      }
      unint64_t v16 = (v13 + 0x400000000) >> 32;
      if (v16 < ((char *)a4[1] - (char *)*a4) >> 4)
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v153, &(*a4)[2 * v16]);
        if (v153) {
          unsigned int v12 = (int)**((float **)v153 + 3);
        }
        if (v154) {
          nitro::nitro_function::nitro_function(v154);
        }
      }
      if (v172) {
        nitro::nitro_function::nitro_function(v172);
      }
    }
    if (*((void *)&__src + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__src + 1));
    }
    uint64_t v8 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)&__src, *v8);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v164, (const Espresso::layer_shape *)&__src, 0);
  if (v179)
  {
    unint64_t v180 = v179;
    operator delete(v179);
  }
  Espresso::abstract_blob_container::shape((char *)&__src, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v161, (const Espresso::layer_shape *)&__src, 0);
  if (v179)
  {
    unint64_t v180 = v179;
    operator delete(v179);
  }
  uint64_t v17 = &v165;
  if (*(unsigned char *)(a1 + 307))
  {
    uint64_t v17 = &v166;
    int v18 = (unsigned int *)&v162;
  }
  else
  {
    int v18 = (unsigned int *)&v163;
  }
  if (v12 <= 1) {
    int v19 = 1;
  }
  else {
    int v19 = v12;
  }
  if (*(unsigned char *)(a1 + 305)) {
    int v20 = 3;
  }
  else {
    int v20 = 4;
  }
  int v21 = v20 - *(char *)(a1 + 304) - *(char *)(a1 + 306) + ((*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 2);
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  uint64_t v24 = ((char *)v23 - (char *)*a3) >> 4;
  if (v24 != v21) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: the number of outputs is 4 minus 1 for each of no_count and no_scores that is true. Check parameters.");
  }
  int v25 = v164;
  int v121 = *v17;
  uint64_t v131 = *v18;
  int v120 = v19;
  if (((char *)a4[1] - (char *)*a4) >> 4 > (unint64_t)((v13 + 0x400000000) >> 32))
  {
    std::vector<std::vector<int>>::vector(&v158, 4uLL);
    if (*(unsigned char *)(a1 + 307))
    {
      LODWORD(__src) = v25;
      *(void *)((char *)&__src + 4) = 0x100000004;
      HIDWORD(__src) = v19;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v158, (char *)&__src, (uint64_t)v178, 4uLL);
      *(void *)&__vImage_Buffer src = __PAIR64__(v131, v25);
      DWORD2(__src) = 1;
      HIDWORD(__src) = v19;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v158 + 24, (char *)&__src, (uint64_t)v178, 4uLL);
      *(void *)&__vImage_Buffer src = v25 | 0x100000000;
      DWORD2(__src) = v19;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v158 + 48, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    }
    else
    {
      *(void *)&__vImage_Buffer src = __PAIR64__(v19, v25);
      DWORD2(__src) = 4;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v158, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(void *)&__vImage_Buffer src = __PAIR64__(v19, v25);
      DWORD2(__src) = v131;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v158 + 24, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(void *)&__vImage_Buffer src = __PAIR64__(v19, v25);
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v158 + 48, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
    }
    LODWORD(__src) = v25;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v158 + 72, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
    if (v24 != (uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 2)
    {
      unint64_t v26 = 0;
      do
      {
        int v27 = (int **)((char *)v158 + 24 * v26);
        uint64_t v173 = 0;
        uint64_t v171 = 0;
        uint64_t v172 = 0;
        uint64_t v28 = *v27;
        uint64_t v29 = (char *)v27[1] - (char *)*v27;
        if (v29)
        {
          uint64_t v30 = v29 >> 2;
          if ((unint64_t)(v29 >> 2) <= 1) {
            uint64_t v30 = 1;
          }
          int v31 = (void **)&v171;
          do
          {
            int v32 = *v28++;
            *(_DWORD *)int v31 = v32;
            int v31 = (void **)((char *)v31 + 4);
            --v30;
          }
          while (v30);
        }
        HIDWORD(v173) = (unint64_t)v29 >> 2;
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v171, 0, (uint64_t)&__src);
        Espresso::abstract_blob_container::shape((char *)&v171, (*a3)[2 * v26]);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v150, (const Espresso::layer_shape *)&__src, 0);
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v150, 0, (uint64_t)&v153);
        BOOL v33 = Espresso::layer_shape::operator==((uint64_t)&v171, (uint64_t)&v153);
        if (__p)
        {
          uint64_t v157 = __p;
          operator delete(__p);
        }
        if (v175)
        {
          float v176 = v175;
          operator delete(v175);
        }
        if (!v33)
        {
          int v34 = (std::__shared_weak_count *)operator new(0x98uLL);
          v34->__shared_weak_owners_ = 0;
          v34->__shared_owners_ = 0;
          v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
          *(_OWORD *)&v34[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v34[3].__shared_owners_ = 0u;
          *(_OWORD *)&v34[1].__shared_owners_ = 0u;
          v34[2].std::__shared_count = 0u;
          v34[4].std::__shared_count = 0u;
          *(_OWORD *)&v34[4].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v34[5].__shared_owners_ = 0u;
          v34[5].__shared_weak_owners_ = 0;
          v34[6].__vftable = 0;
          LODWORD(v34[2].__vftable) = 1065353216;
          v34[2].__shared_owners_ = 0x1FFFFFFFFLL;
          v34[4].__vftable = 0;
          v34[4].__shared_owners_ = 0;
          v34[2].__shared_weak_owners_ = 0;
          v34[3].__vftable = 0;
          LOBYTE(v34[3].__shared_weak_owners_) = 0;
          v34[3].__shared_owners_ = 0;
          v34[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
          v34[5].__vftable = 0;
          v34[5].__shared_owners_ = 0;
          LOBYTE(v34[6].__vftable) = 0;
          LOBYTE(v34[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
          uint64_t v35 = (*a3)[2 * v26];
          float32x4_t v148 = v34 + 1;
          uint64_t v149 = v34;
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, long long *, std::__shared_weak_count **))(*(void *)v35 + 16))(v35, &__src, &v148);
          if (v149) {
            nitro::nitro_function::nitro_function(v149);
          }
          nitro::nitro_function::nitro_function(v34);
        }
        if (v179)
        {
          unint64_t v180 = v179;
          operator delete(v179);
        }
        ++v26;
      }
      while (v24 - ((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 2) > v26);
    }
    *(void *)&__vImage_Buffer src = &v158;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
    uint64_t v22 = *a3;
    uint64_t v23 = a3[1];
    int v19 = v120;
  }
  if (v23 == v22)
  {
    uint64_t v36 = 0;
    uint64_t v146 = 0;
    float32x4_t v147 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v146, v22);
    uint64_t v36 = v146;
  }
  int v133 = *(_OWORD **)(v36 + 24);
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  if (*(unsigned char *)(a1 + 304))
  {
    std::vector<float>::resize(&v153, v25 * v19 * (int)v131);
    unsigned int v37 = 1;
    int v130 = (char *)v153;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__src, *a3 + 2);
    int v130 = *(char **)(__src + 24);
    if (*((void *)&__src + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__src + 1));
    }
    unsigned int v37 = 2;
  }
  uint64_t v158 = 0;
  float32x4_t v159 = 0;
  uint64_t v160 = 0;
  if (*(unsigned char *)(a1 + 306))
  {
    std::vector<float>::resize(&v158, v25 * v19);
    float __C = (float *)v158;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__src, &(*a3)[2 * v37++]);
    float __C = *(float **)(__src + 24);
    if (*((void *)&__src + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__src + 1));
    }
  }
  uint64_t v38 = v25;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  if (*(unsigned char *)(a1 + 305))
  {
    std::vector<float>::resize(&v150, v25);
    uint64_t v39 = (float *)v150;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__src, &(*a3)[2 * v37++]);
    uint64_t v39 = *(float **)(__src + 24);
    if (*((void *)&__src + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__src + 1));
    }
  }
  uint64_t v40 = 0;
  float __A = -1.0;
  uint64_t v41 = *(int *)(v36 + 8);
  do
  {
    v41 *= *(int *)(v36 + 12 + v40);
    v40 += 4;
  }
  while (v40 != 12);
  bzero(v133, 4 * v41);
  bzero(v130, 4 * (int)v131 * v25 * v19);
  vDSP_vfill(&__A, __C, 1, v25 * v19);
  unsigned int v116 = v37;
  BOOL v42 = *(unsigned char *)(a1 + 307) == 0;
  if (*(unsigned char *)(a1 + 307)) {
    uint64_t v43 = v121;
  }
  else {
    uint64_t v43 = 1;
  }
  uint64_t v144 = v43;
  if (v42) {
    uint64_t v44 = 1;
  }
  else {
    uint64_t v44 = v19;
  }
  uint64_t v127 = v44;
  unint64_t v128 = v19;
  uint64_t v171 = (float **)&unk_1EE37CBC0;
  uint64_t v172 = (std::__shared_weak_count *)&v144;
  unint64_t v174 = (void **)&v171;
  vDSP_Length v117 = *(unsigned int *)(a1 + 296);
  if ((int)v117 >= 1 && (int)v117 < v19) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("num_boxes_pre_nms should be 0 or greater than max_boxes");
  }
  int v45 = v39;
  if (v121 != (uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 2) {
    (*(void (**)(uint64_t, uint64_t **, uint64_t **))(*(void *)a1 + 80))(a1, a3, a4);
  }
  int v119 = v25;
  if (!v25) {
    goto LABEL_177;
  }
  uint64_t v46 = 0;
  if ((unint64_t)v121 <= 1) {
    uint64_t v47 = 1;
  }
  else {
    uint64_t v47 = v121;
  }
  uint64_t v48 = 4 * v127;
  int v132 = __C;
  uint64_t v118 = v38;
  do
  {
    uint64_t v50 = v132;
    unsigned int v49 = v133;
    uint64_t v51 = v130;
    if (v46)
    {
      ++v45;
      uint64_t v50 = &v132[v128];
      uint64_t v51 = &v130[4 * (int)v131 * v120];
    }
    int v130 = v51;
    if (v46) {
      unsigned int v49 = &v133[v120];
    }
    int v132 = v50;
    int v133 = v49;
    if (v46) {
      v9 += 4 * (int)v131 * v121;
    }
    uint64_t v52 = v134;
    if (v46) {
      uint64_t v52 = v134 + 16 * v121;
    }
    uint64_t v134 = v52;
    if (!v121)
    {
      unint64_t v63 = 0;
LABEL_163:
      int v97 = (_OWORD *)(v134 + 16 * v63);
      uint64_t v98 = v144;
      if (v127 == 1 && v144 == 1)
      {
        *int v133 = *v97;
      }
      else
      {
        uint64_t v99 = 4 * v144;
        uint64_t v100 = v133;
        uint64_t v101 = 4;
        do
        {
          *uint64_t v100 = *(_DWORD *)v97;
          int v97 = (_OWORD *)((char *)v97 + v99);
          uint64_t v100 = (_DWORD *)((char *)v100 + v48);
          --v101;
        }
        while (v101);
        uint64_t v98 = v144;
      }
      uint64_t v102 = v118;
      if ((int)v131 >= 1)
      {
        int v103 = (_DWORD *)(v9 + 4 * v63 * (int)v131);
        uint64_t v104 = 4 * v98;
        uint64_t v105 = v130;
        uint64_t v106 = v131;
        do
        {
          *uint64_t v105 = *v103;
          int v103 = (_DWORD *)((char *)v103 + v104);
          uint64_t v105 = (_DWORD *)((char *)v105 + v48);
          --v106;
        }
        while (v106);
      }
      *int v132 = (float)v63;
      float *v45 = 1.0;
      goto LABEL_176;
    }
    uint64_t v123 = v46;
    int v124 = v45;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    float v56 = **(float **)(a1 + 360);
    do
    {
      if (*(unsigned char *)(a1 + 307)) {
        vDSP_Stride v57 = v121;
      }
      else {
        vDSP_Stride v57 = 1;
      }
      if (*(unsigned char *)(a1 + 307)) {
        uint64_t v58 = 1;
      }
      else {
        uint64_t v58 = (int)v131;
      }
      int v59 = (const float *)(v9 + 4 * v58 * v55);
      uint64_t v60 = (float *)(*(void *)(a1 + 360) + v53);
      if (*(unsigned char *)(a1 + 292)) {
        vDSP_maxvi(v59, v57, v60, (vDSP_Length *)(*(void *)(a1 + 336) + v54), (int)v131);
      }
      else {
        vDSP_maxv(v59, v57, v60, (int)v131);
      }
      ++v55;
      v54 += 8;
      v53 += 4;
    }
    while (v47 != v55);
    unint64_t v61 = 0;
    vDSP_Length v62 = 0;
    unint64_t v63 = 0;
    uint64_t v64 = *(void *)(a1 + 360);
    uint64_t v46 = v123;
    int v45 = v124;
    do
    {
      float v65 = *(float *)(v64 + 4 * v61);
      if (v65 > v56)
      {
        float v56 = *(float *)(v64 + 4 * v61);
        unint64_t v63 = v61;
      }
      if (v65 > v11)
      {
        *(float *)(*(void *)(a1 + 408) + 4 * v62) = v65;
        *(void *)(*(void *)(a1 + 384) + 8 * v62) = v61;
        *(void *)(*(void *)(a1 + 432) + 8 * v62) = v62;
        ++v62;
      }
      ++v61;
    }
    while (v47 != v61);
    if (!v62) {
      goto LABEL_163;
    }
    vDSP_vsorti(*(const float **)(a1 + 408), *(vDSP_Length **)(a1 + 432), 0, v62, -1);
    uint64_t v126 = v9;
    if (v62 >= v117) {
      vDSP_Length v66 = v117;
    }
    else {
      vDSP_Length v66 = v62;
    }
    if ((int)v117 > 0) {
      vDSP_Length v62 = v66;
    }
    if (!v62)
    {
      unint64_t v68 = 0;
      goto LABEL_175;
    }
    vDSP_Length v67 = 0;
    unint64_t v68 = 0;
    while (*(_DWORD *)(*(void *)(a1 + 456) + 4 * v67))
    {
      ++v67;
LABEL_160:
      if (v67 == v62) {
        goto LABEL_175;
      }
    }
    unint64_t v69 = *(void *)(*(void *)(a1 + 384) + 8 * *(void *)(*(void *)(a1 + 432) + 8 * v67));
    uint64_t v70 = 4 * v69;
    if (*(unsigned char *)(a1 + 307))
    {
      uint64_t v70 = *(void *)(*(void *)(a1 + 384) + 8 * *(void *)(*(void *)(a1 + 432) + 8 * v67));
      uint64_t v71 = v68;
    }
    else
    {
      uint64_t v71 = 4 * v68;
    }
    if (*(unsigned char *)(a1 + 307)) {
      uint64_t v72 = 1;
    }
    else {
      uint64_t v72 = (int)v131;
    }
    int v73 = (_OWORD *)(v134 + 4 * v70);
    uint64_t v74 = v144;
    int v75 = (_OWORD *)((char *)v133 + 4 * v71);
    if (v127 == 1 && v144 == 1)
    {
      *int v75 = *v73;
    }
    else
    {
      uint64_t v76 = 4 * v144;
      int v77 = v73;
      uint64_t v78 = 4;
      do
      {
        *(_DWORD *)int v75 = *v77;
        int v77 = (_DWORD *)((char *)v77 + v76);
        int v75 = (_OWORD *)((char *)v75 + v48);
        --v78;
      }
      while (v78);
      uint64_t v74 = v144;
    }
    if ((int)v131 >= 1)
    {
      unint64_t v79 = v72 * v68;
      int v80 = (_DWORD *)(v126 + 4 * v72 * v69);
      float32x4_t v81 = &v130[4 * v79];
      uint64_t v82 = 4 * v74;
      uint64_t v83 = v131;
      do
      {
        *(_DWORD *)float32x4_t v81 = *v80;
        int v80 = (_DWORD *)((char *)v80 + v82);
        v81 += v48;
        --v83;
      }
      while (v83);
    }
    v132[v68++] = (float)v69;
    if (v68 != v128)
    {
      if (*(unsigned char *)(a1 + 292)) {
        uint64_t v84 = *(void *)(*(void *)(a1 + 336) + 8 * v69);
      }
      else {
        uint64_t v84 = 0;
      }
      __vImage_Buffer src = 0uLL;
      v178[0] = 0;
      std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::operator()((uint64_t)v174, (uint64_t)v73);
      std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()(v85, v86, v87, v88, (uint64_t)&__src, v182);
      vDSP_Length v89 = ++v67;
      if (v67 < v62)
      {
        do
        {
          if (!*(_DWORD *)(*(void *)(a1 + 456) + 4 * v89))
          {
            uint64_t v90 = *(void *)(*(void *)(a1 + 384) + 8 * *(void *)(*(void *)(a1 + 432) + 8 * v89));
            uint64_t v91 = *(unsigned char *)(a1 + 292) ? *(void *)(*(void *)(a1 + 336) + 8 * v90) : 0;
            if (v84 == v91)
            {
              if (!*(unsigned char *)(a1 + 307)) {
                v90 *= 4;
              }
              uint64_t v141 = 0;
              float32x2_t v142 = 0;
              float32x2_t v143 = 0;
              std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::operator()((uint64_t)v174, v134 + 4 * v90);
              std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()(v92, v93, v94, v95, (uint64_t)&v141, v182);
              float64x2_t v96 = vmaxnmq_f64(vcvtq_f64_f32(vsub_f32(vminnm_f32(v178[0], v143), vmaxnm_f32(*(float32x2_t *)((char *)&__src + 8), v142))), (float64x2_t)0);
              *(float *)v96.f64 = vmulq_laneq_f64(v96, v96, 1).f64[0];
              *(float *)v96.f64 = *(float *)v96.f64
                                / ((float)((float)((float)(*(float *)&v141 * *((float *)&v141 + 1))
                                                 + (float)(*(float *)&__src * *((float *)&__src + 1)))
                                         - *(float *)v96.f64)
                                 + 0.0000001);
              if (v10 < *(float *)v96.f64) {
                *(_DWORD *)(*(void *)(a1 + 456) + 4 * v89) = 1;
              }
            }
          }
          ++v89;
        }
        while (v62 != v89);
      }
      goto LABEL_160;
    }
    unint64_t v68 = v128;
LABEL_175:
    int v45 = v124;
    *int v124 = (float)v68;
    bzero(*(void **)(a1 + 456), 4 * v121);
    uint64_t v9 = v126;
    uint64_t v102 = v118;
    uint64_t v46 = v123;
LABEL_176:
    ++v46;
  }
  while (v46 != v102);
LABEL_177:
  uint64_t v107 = *(void *)(a1 + 312);
  if (*(void *)(a1 + 320) != v107)
  {
    unint64_t v108 = 0;
    uint64_t v109 = 4;
    do
    {
      int v110 = *(_DWORD *)(v107 + 4 * v108);
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__src, &(*a4)[v109]);
      uint64_t v111 = *(void *)(__src + 24);
      if (*((void *)&__src + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__src + 1));
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__src, &(*a3)[2 * v116 - 4 + v109]);
      uint64_t v112 = *(void *)(__src + 24);
      if (*((void *)&__src + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__src + 1));
      }
      if (v111) {
        BOOL v113 = v112 == 0;
      }
      else {
        BOOL v113 = 1;
      }
      if (v113) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: inline_gather_axes requires one additional input and output for each axis specified.");
      }
      Espresso::abstract_blob_container::shape((char *)&__src, (*a4)[v109]);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v141, (const Espresso::layer_shape *)&__src, 0);
      if (v179)
      {
        unint64_t v180 = v179;
        operator delete(v179);
      }
      int v114 = v143.i32[1];
      v137[0] = v119;
      v137[1] = v120;
      uint64_t v138 = 0;
      int v139 = 0;
      int v140 = 2;
      Espresso::abstract_blob_container::shape((char *)&__src, (*a4)[v109]);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v135, (const Espresso::layer_shape *)&__src, 0);
      Espresso::layer_nd_shape::strides_vector(&v136, (uint64_t)v135);
      if (v179)
      {
        unint64_t v180 = v179;
        operator delete(v179);
      }
      if (v136.__begin_)
      {
        v136.__end_ = v136.__begin_;
        operator delete(v136.__begin_);
      }
      ++v108;
      uint64_t v107 = *(void *)(a1 + 312);
      v109 += 2;
    }
    while (v108 < (*(void *)(a1 + 320) - v107) >> 2);
  }
  std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::~function(&v171);
  if (v150)
  {
    uint64_t v151 = v150;
    operator delete(v150);
  }
  if (v158)
  {
    float32x4_t v159 = v158;
    operator delete(v158);
  }
  if (v153)
  {
    uint64_t v154 = (std::__shared_weak_count *)v153;
    operator delete(v153);
  }
  if (v147) {
    nitro::nitro_function::nitro_function(v147);
  }
  if (v168) {
    nitro::nitro_function::nitro_function(v168);
  }
  if (v170) {
    nitro::nitro_function::nitro_function(v170);
  }
  return std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~function(v181);
}

void sub_192B6CCEC(_Unwind_Exception *a1)
{
  if (STACK[0x238]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x238]);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 216);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (STACK[0x218]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x218]);
  }
  if (STACK[0x228]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x228]);
  }
  std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~function((void *)(v1 - 160));
  _Unwind_Resume(a1);
}

void *std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::swap(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_192B6D12C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()(float a1, float a2, float a3, float a4, uint64_t a5, uint64_t a6)
{
  *(float *)uint64_t v7 = a1;
  *(float *)&v7[1] = a2;
  *(float *)&v7[2] = a3;
  *(float *)&v7[3] = a4;
  if (!a6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a6 + 48))(a6, v7);
}

void *std::function<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso34non_maximum_suppression_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8_E3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(float **)a2;
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37CBC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE37CBC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box ()(float const*)>::~__func()
{
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso34non_maximum_suppression_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8_E3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()@<S0>(float *a1@<X1>, float *a2@<X8>)
{
  float v2 = *a1;
  float v3 = a1[1];
  float v4 = a1[2];
  float v5 = a1[3];
  *a2 = vabds_f32(v4, *a1);
  a2[1] = vabds_f32(v5, v3);
  a2[2] = fminf(v2, v4);
  a2[3] = fminf(v3, v5);
  float result = fmaxf(v2, v4);
  a2[4] = result;
  a2[5] = fmaxf(v3, v5);
  return result;
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CB68;
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EE37CB68;
  return result;
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~__func()
{
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso34non_maximum_suppression_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float32x4_t std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::operator()@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v2.i64[0] = *(void *)a1;
  v2.i64[1] = *(void *)a1;
  float32x2_t v3 = vcvt_f32_f64(vmaxnmq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 8)), (float64x2_t)0));
  *(float32x2_t *)v4.f32 = vmul_f32(v3, (float32x2_t)0x3F0000003F000000);
  v4.i64[1] = v4.i64[0];
  *(float32x2_t *)a2 = v3;
  *(void *)&long long v5 = vsubq_f32(v2, v4).u64[0];
  float32x4_t result = vaddq_f32(v2, v4);
  *((void *)&v5 + 1) = result.i64[1];
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CB10;
}

void *std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::__clone()
{
  float32x4_t result = operator new(0x10uLL);
  *float32x4_t result = &unk_1EE37CB10;
  return result;
}

void std::__function::__func<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0,std::allocator<Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0>,Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::nms_box_coordinates ()(Espresso::non_maximum_suppression_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::implementation_agnostic_box)>::~__func()
{
}

void Espresso::scatter_nd_kernel_cpu::on_resized(Espresso::scatter_nd_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v6, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v9, (const Espresso::layer_shape *)v6, 0);
  Espresso::layer_nd_shape::strides_vector(&v10, (uint64_t)v9);
  float32x4_t v4 = (void *)((char *)this + 296);
  long long v5 = (void *)*((void *)this + 37);
  if (v5)
  {
    *((void *)this + 38) = v5;
    operator delete(v5);
    void *v4 = 0;
    *((void *)this + 38) = 0;
    *((void *)this + 39) = 0;
  }
  *(_OWORD *)float32x4_t v4 = *(_OWORD *)&v10.__begin_;
  *((void *)this + 39) = v10.__end_cap_.__value_;
  memset(&v10, 0, sizeof(v10));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_192B6D6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::scatter_nd_kernel_cpu::__launch(uint64_t a1, int a2, uint64_t a3, Espresso::layer_data *a4)
{
  if (*((void *)a4 + 1) - *(void *)a4 != 48) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel_cpu: three inputs required.");
  }
  Espresso::scatter_nd_kernel_cpu::check_input_shapes((Espresso::scatter_nd_kernel_cpu *)a1, (uint64_t **)a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v117, *(uint64_t **)a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v115, (uint64_t *)(*(void *)a4 + 16));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v113, (uint64_t *)(*(void *)a4 + 32));
  Espresso::abstract_blob_container::shape((char *)&__n_4, **(void **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v111, (const Espresso::layer_shape *)&__n_4, 0);
  if (__p)
  {
    int v110 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&__n_4, *(void *)(*(void *)a4 + 16));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v106, (const Espresso::layer_shape *)&__n_4, 0);
  if (__p)
  {
    int v110 = __p;
    operator delete(__p);
  }
  unsigned int v6 = v112;
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v7 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v104, *(uint64_t **)a3);
    uint64_t v7 = v104;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void **)(v7 + 24);
  uint64_t v10 = *(int *)(v7 + 8);
  uint64_t v100 = v7;
  uint64_t v11 = v7 + 12;
  do
  {
    v10 *= *(int *)(v11 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  memcpy(v9, *(const void **)(v117 + 24), 4 * v10);
  std::vector<int>::size_type v13 = __n;
  uint64_t v14 = __n;
  int v15 = 1;
  if (__n < 1)
  {
    uint64_t v18 = a1;
  }
  else
  {
    unint64_t v16 = v106;
    uint64_t v17 = __n;
    uint64_t v18 = a1;
    do
    {
      int v19 = *v16++;
      v15 *= v19;
      --v17;
    }
    while (v17);
  }
  int v20 = *(_DWORD *)(v18 + 280);
  if (!v20)
  {
    int v45 = *(_DWORD *)(v18 + 284);
    int v46 = v6 & (v45 >> 31);
    BOOL v47 = __OFADD__(v46, v45);
    int v48 = v46 + v45;
    if (v48 < 0 != v47) {
      uint64_t v49 = v112;
    }
    else {
      uint64_t v49 = v48;
    }
    int v50 = 1;
    if ((int)v49 >= 1)
    {
      uint64_t v51 = v111;
      do
      {
        int v52 = *v51++;
        v50 *= v52;
        --v49;
      }
      while (v49);
    }
    if (v48 < 0) {
      int v53 = -1;
    }
    else {
      int v53 = v48;
    }
    int v54 = v53 + 1;
    if (v54 >= (int)v112)
    {
      int v57 = 1;
    }
    else
    {
      unint64_t v55 = v112 - (unint64_t)v54;
      float v56 = &v111[v54];
      int v57 = 1;
      do
      {
        int v58 = *v56++;
        v57 *= v58;
        --v55;
      }
      while (v55);
    }
    if (v50 >= 1)
    {
      int v59 = 0;
      int v60 = 0;
      int v98 = v111[v48];
      uint64_t v61 = v115;
      uint64_t v62 = v113;
      uint64_t v63 = 4 * v15;
      int v93 = v15;
      int v94 = v50;
      do
      {
        if (v15 >= 1)
        {
          uint64_t v64 = 0;
          int v65 = v60;
          int v96 = v59;
          int v66 = v98 * v59;
          uint64_t v67 = 4 * v60;
          do
          {
            LODWORD(v12) = llroundf(*(float *)(*(void *)(v61 + 24) + v64));
            if ((v12 & 0x80000000) != 0
              && (!*(unsigned char *)(v18 + 293) || (uint64_t v12 = (v98 + v12), (v12 & 0x80000000) != 0))
              || (int)v12 >= v98)
            {
              if (*(unsigned char *)(v18 + 292)) {
                Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("scatter_nd_kernel: In TF_SCATTER mode, Invalid index %d into axis of size %d\n", v12, v98);
              }
              LODWORD(v12) = 0;
            }
            int v68 = (v12 + v66) * v57;
            switch(*(_DWORD *)(v18 + 288))
            {
              case 0:
                memcpy((void *)(*(void *)(v100 + 24) + 4 * v68), (const void *)(*(void *)(v62 + 24) + v67), 4 * v57);
                break;
              case 1:
                uint64_t v72 = (float *)(*(void *)(v100 + 24) + 4 * v68);
                vDSP_vadd(v72, 1, (const float *)(*(void *)(v62 + 24) + v67), 1, v72, 1, v57);
                break;
              case 2:
                uint64_t v70 = (float *)(*(void *)(v100 + 24) + 4 * v68);
                vDSP_vsub((const float *)(*(void *)(v62 + 24) + v67), 1, v70, 1, v70, 1, v57);
                break;
              case 3:
                uint64_t v71 = (float *)(*(void *)(v100 + 24) + 4 * v68);
                vDSP_vmul(v71, 1, (const float *)(*(void *)(v62 + 24) + v67), 1, v71, 1, v57);
                break;
              case 4:
                unint64_t v69 = (float *)(*(void *)(v100 + 24) + 4 * v68);
                vDSP_vdiv((const float *)(*(void *)(v62 + 24) + v67), 1, v69, 1, v69, 1, v57);
                break;
              case 5:
                int v73 = (float *)(*(void *)(v100 + 24) + 4 * v68);
                vDSP_vmax(v73, 1, (const float *)(*(void *)(v62 + 24) + v67), 1, v73, 1, v57);
                break;
              case 6:
                uint64_t v74 = (float *)(*(void *)(v100 + 24) + 4 * v68);
                vDSP_vmin(v74, 1, (const float *)(*(void *)(v62 + 24) + v67), 1, v74, 1, v57);
                break;
              default:
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel: Invalid accumulation mode.");
            }
            v65 += v57;
            v67 += 4 * v57;
            v64 += 4;
            uint64_t v18 = a1;
          }
          while (v63 != v64);
          int v60 = v65;
          int v15 = v93;
          int v50 = v94;
          int v59 = v96;
        }
        ++v59;
      }
      while (v59 != v50);
    }
    goto LABEL_114;
  }
  if (v20 == 2)
  {
    int v27 = (v6 & (*(int *)(v18 + 284) >> 31)) + *(_DWORD *)(v18 + 284);
    int v97 = v111[v27];
    LODWORD(__x.__begin_) = 0;
    std::vector<int>::vector(&__n_4, __n, (const std::vector<int>::value_type *)&__x);
    std::vector<int>::value_type v102 = 0;
    std::vector<int>::vector(&__x, v13, &v102);
    uint64_t v28 = a1;
    if (v15 < 1)
    {
      begifloat n = __x.__begin_;
      if (!__x.__begin_) {
        goto LABEL_112;
      }
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = v115;
      uint64_t v31 = v113;
      do
      {
        int v32 = (char *)__n_4.__begin_;
        int v33 = v29;
        uint64_t v34 = v14 + 1;
        if ((int)v14 >= 2)
        {
          do
          {
            *(_DWORD *)&v32[4 * (v34 - 2)] = v33 % v106[(v34 - 2)];
            v33 /= (int)v106[(v34-- - 2)];
          }
          while (v34 > 2);
        }
        *(_DWORD *)int v32 = v33;
        LODWORD(v13) = llroundf(*(float *)(*(void *)(v30 + 24) + 4 * v29));
        if ((v13 & 0x80000000) != 0
          && (!*(unsigned char *)(v28 + 293) || (std::vector<int>::size_type v13 = (v97 + v13), (v13 & 0x80000000) != 0))
          || (int)v13 >= v97)
        {
          if (*(unsigned char *)(v28 + 292)) {
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid index %d into axis of size %d\n", v13, v97);
          }
          std::vector<int>::size_type v13 = 0;
        }
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__x, v32, (uint64_t)__n_4.__end_, ((char *)__n_4.__end_ - v32) >> 2);
        begifloat n = __x.__begin_;
        __x.__begin_[v27] = v13;
        uint64_t v28 = a1;
        int v36 = 0;
        if (v14)
        {
          unsigned int v37 = *(int **)(a1 + 296);
          uint64_t v38 = begin;
          uint64_t v39 = v14;
          do
          {
            int v41 = *v38++;
            int v40 = v41;
            int v42 = *v37++;
            v36 += v42 * v40;
            --v39;
          }
          while (v39);
        }
        switch(*(_DWORD *)(a1 + 288))
        {
          case 0:
            float v43 = *(float *)(*(void *)(v31 + 24) + 4 * v29);
            uint64_t v44 = *(void *)(v100 + 24);
            break;
          case 1:
            uint64_t v44 = *(void *)(v100 + 24);
            float v43 = *(float *)(*(void *)(v31 + 24) + 4 * v29) + *(float *)(v44 + 4 * v36);
            break;
          case 2:
            uint64_t v44 = *(void *)(v100 + 24);
            float v43 = *(float *)(v44 + 4 * v36) - *(float *)(*(void *)(v31 + 24) + 4 * v29);
            break;
          case 3:
            uint64_t v44 = *(void *)(v100 + 24);
            float v43 = *(float *)(*(void *)(v31 + 24) + 4 * v29) * *(float *)(v44 + 4 * v36);
            break;
          case 4:
            uint64_t v44 = *(void *)(v100 + 24);
            float v43 = *(float *)(v44 + 4 * v36) / *(float *)(*(void *)(v31 + 24) + 4 * v29);
            break;
          case 5:
            uint64_t v44 = *(void *)(v100 + 24);
            float v43 = fmaxf(*(float *)(v44 + 4 * v36), *(float *)(*(void *)(v31 + 24) + 4 * v29));
            break;
          case 6:
            uint64_t v44 = *(void *)(v100 + 24);
            float v43 = fminf(*(float *)(v44 + 4 * v36), *(float *)(*(void *)(v31 + 24) + 4 * v29));
            break;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel: Invalid accumulation mode.");
        }
        *(float *)(v44 + 4 * v36) = v43;
        ++v29;
      }
      while (v29 != v15);
    }
    __x.__end_ = begin;
    operator delete(begin);
LABEL_112:
    if (__n_4.__begin_)
    {
      __n_4.__end_ = __n_4.__begin_;
      operator delete(__n_4.__begin_);
    }
    goto LABEL_114;
  }
  if (v20 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: Invalid MODE");
  }
  uint64_t v21 = (int)v106[__n - 1];
  int v22 = v21 & ~((int)v21 >> 31);
  if (v22 >= (int)v112)
  {
    int v25 = 1;
  }
  else
  {
    unint64_t v23 = v112 - (unint64_t)v22;
    uint64_t v24 = &v111[v22];
    int v25 = 1;
    do
    {
      int v26 = *v24++;
      v25 *= v26;
      --v23;
    }
    while (v23);
  }
  if (v15 >= 1)
  {
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    unsigned int v78 = v15;
    vDSP_Length v79 = v25;
    size_t v80 = 4 * v25;
    uint64_t v99 = v113;
    uint64_t v95 = v115;
    uint64_t v81 = v78;
    while ((int)v21 < 1)
    {
      int v84 = 0;
LABEL_100:
      switch(*(_DWORD *)(v18 + 288))
      {
        case 0:
          memcpy((void *)(*(void *)(v100 + 24) + 4 * v84), (const void *)(*(void *)(v99 + 24) + 4 * v76), v80);
          break;
        case 1:
          uint64_t v90 = (float *)(*(void *)(v100 + 24) + 4 * v84);
          vDSP_vadd(v90, 1, (const float *)(*(void *)(v99 + 24) + 4 * v76), 1, v90, 1, v79);
          break;
        case 2:
          float v88 = (float *)(*(void *)(v100 + 24) + 4 * v84);
          vDSP_vsub((const float *)(*(void *)(v99 + 24) + 4 * v76), 1, v88, 1, v88, 1, v79);
          break;
        case 3:
          vDSP_Length v89 = (float *)(*(void *)(v100 + 24) + 4 * v84);
          vDSP_vmul(v89, 1, (const float *)(*(void *)(v99 + 24) + 4 * v76), 1, v89, 1, v79);
          break;
        case 4:
          float v87 = (float *)(*(void *)(v100 + 24) + 4 * v84);
          vDSP_vdiv((const float *)(*(void *)(v99 + 24) + 4 * v76), 1, v87, 1, v87, 1, v79);
          break;
        case 5:
          uint64_t v91 = (float *)(*(void *)(v100 + 24) + 4 * v84);
          vDSP_vmax(v91, 1, (const float *)(*(void *)(v99 + 24) + 4 * v76), 1, v91, 1, v79);
          break;
        case 6:
          float v92 = (float *)(*(void *)(v100 + 24) + 4 * v84);
          vDSP_vmin(v92, 1, (const float *)(*(void *)(v99 + 24) + 4 * v76), 1, v92, 1, v79);
          break;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("scatter_nd_kernel: Invalid accumulation mode.");
      }
      v76 += v79;
      v77 += v21;
      v75 += 4 * v21;
      uint64_t v18 = a1;
      if (v77 >= v81) {
        goto LABEL_114;
      }
    }
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    int v84 = 0;
    while (1)
    {
      LODWORD(v12) = llroundf(*(float *)(*(void *)(v95 + 24) + v75 + v82 * 4));
      if ((v12 & 0x80000000) != 0)
      {
        if (!*(unsigned char *)(v18 + 293))
        {
          float v86 = &v111[v83];
LABEL_95:
          if (*(unsigned char *)(v18 + 292)) {
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("scatter_nd_kernel: In TF_SCATTER_ND mode, Invalid index %d into axis of size %d\n", v12, *(unsigned int *)v86);
          }
          uint64_t v12 = 0;
          goto LABEL_97;
        }
        int v85 = v111[v82];
        uint64_t v12 = (v85 + v12);
      }
      else
      {
        int v85 = v111[v82];
      }
      float v86 = &v111[v82];
      if ((v12 & 0x80000000) != 0 || (int)v12 >= v85) {
        goto LABEL_95;
      }
LABEL_97:
      v84 += v12 * *(_DWORD *)(*(void *)(v18 + 296) + v82 * 4);
      ++v83;
      if (v21 == ++v82) {
        goto LABEL_100;
      }
    }
  }
LABEL_114:
  if (v105) {
    nitro::nitro_function::nitro_function(v105);
  }
  if (v114) {
    nitro::nitro_function::nitro_function(v114);
  }
  if (v116) {
    nitro::nitro_function::nitro_function(v116);
  }
  if (v118) {
    nitro::nitro_function::nitro_function(v118);
  }
}

void sub_192B6E0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  int v33 = *(std::__shared_weak_count **)(v31 - 128);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v31 - 112);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v31 - 96);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::scatter_nd_kernel_cpu::check_input_shapes(Espresso::scatter_nd_kernel_cpu *this, uint64_t **a2)
{
  Espresso::abstract_blob_container::shape(v50, **a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v53, (const Espresso::layer_shape *)v50, 0);
  if (__p)
  {
    int v52 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape(v50, (*a2)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)v50, 0);
  if (__p)
  {
    int v52 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape(v50, (*a2)[4]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v46, (const Espresso::layer_shape *)v50, 0);
  if (__p)
  {
    int v52 = __p;
    operator delete(__p);
  }
  int v4 = *((_DWORD *)this + 70);
  switch(v4)
  {
    case 0:
      unsigned int v20 = *((_DWORD *)this + 71);
      if ((v20 & 0x80000000) != 0 && (v20 += v54, (v20 & 0x80000000) != 0) || v54 <= (unint64_t)v20) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER mode, Invalid value of the argument 'axis'.");
      }
      uint64_t v21 = v49;
      unint64_t v22 = v54 + (uint64_t)v49 - 1;
      if (v22 == v47)
      {
        if (v20)
        {
          unint64_t v23 = v53;
          uint64_t v24 = v46;
          uint64_t v25 = v20;
          while (1)
          {
            int v27 = *v24++;
            int v26 = v27;
            int v28 = *v23++;
            if (v26 != v28) {
              break;
            }
            if (!--v25) {
              goto LABEL_32;
            }
          }
        }
        else
        {
LABEL_32:
          unint64_t v29 = v49 + (unint64_t)v20;
          if (v29 <= v20)
          {
LABEL_36:
            if (v29 >= v22) {
              return;
            }
            uint64_t v35 = &v53[v20 + 1];
            unint64_t v36 = ~(unint64_t)v20 + v54;
            unsigned int v37 = &v46[v29];
            while (1)
            {
              int v39 = *v37++;
              int v38 = v39;
              int v40 = *v35++;
              if (v38 != v40) {
                break;
              }
              if (!--v36) {
                return;
              }
            }
          }
          else
          {
            uint64_t v30 = &v46[v20];
            uint64_t v31 = v48;
            while (1)
            {
              int v33 = *v30++;
              int v32 = v33;
              int v34 = *v31++;
              if (v32 != v34) {
                break;
              }
              if (!--v21) {
                goto LABEL_36;
              }
            }
          }
        }
      }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER mode, invalid shape of UPDATES tensor.");
    case 2:
      int v41 = *((_DWORD *)this + 71);
      if (v41 < 0 && (v41 += v54, v41 < 0) || v54 <= (unint64_t)v41) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid value of the argument 'axis'.");
      }
      if (v54 != v47 || v49 != v54) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, inputs should have the same rank.");
      }
      if (v54)
      {
        for (uint64_t i = 0; i != v54; ++i)
        {
          if (v41 != i && v53[i] != v48[i]) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid input shapes. For REF and INDICES tensor, shapes can only differ in axis dimension.");
          }
        }
        if (v48[0] != v46[0]) {
          goto LABEL_65;
        }
        unint64_t v43 = 0;
        do
        {
          if (v54 - 1 == v43) {
            return;
          }
          int v44 = v48[v43 + 1];
          int v45 = v46[++v43];
        }
        while (v44 == v45);
        if (v43 < v54) {
LABEL_65:
        }
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TORCH_SCATTER mode, Invalid input shapes. INDICES and UPDATES tensor should have the same shape.");
      }
      break;
    case 1:
      unint64_t v5 = v49;
      unint64_t v6 = v49 - 1;
      uint64_t v7 = (int)v48[v6];
      if (v54 < v7) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER_ND mode, invalid indices. indices.shape[-1] <= params.rank");
      }
      if (v49 <= 1) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER_ND mode, rank of indices tensor needs to be >= 2.");
      }
      unint64_t v8 = v6 - v7 + v54;
      if (v8 != v47) {
        goto LABEL_23;
      }
      if (v49 != 1)
      {
        uint64_t v9 = v48;
        uint64_t v10 = v46;
        uint64_t v11 = v49 - 1;
        while (1)
        {
          int v13 = *v10++;
          int v12 = v13;
          int v14 = *v9++;
          if (v12 != v14) {
            break;
          }
          if (!--v11) {
            goto LABEL_17;
          }
        }
LABEL_23:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: In TF_SCATTER_ND mode, invalid shape of UPDATES tensor.");
      }
LABEL_17:
      if (v6 < v8)
      {
        if (v46[v6] != v53[v7]) {
          goto LABEL_23;
        }
        uint64_t v15 = ~v7 + v54;
        unint64_t v16 = &v53[v7 + 1];
        do
        {
          if (!v15) {
            return;
          }
          unint64_t v17 = v5;
          int v18 = v46[v5];
          int v19 = *v16++;
          ++v5;
          --v15;
        }
        while (v18 == v19);
        if (v17 < v8) {
          goto LABEL_23;
        }
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: Invalid MODE");
  }
}

void sub_192B6E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::scatter_nd_kernel_cpu::~scatter_nd_kernel_cpu(Espresso::scatter_nd_kernel_cpu *this)
{
  *(void *)this = &unk_1EE356F30;
  float32x4_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE356F30;
  float32x4_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::nonzero_kernel_cpu::on_resized(Espresso::nonzero_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v5, **a3);
  int v4 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v5);
  *((_DWORD *)this + 71) = v4;
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
    int v4 = *((_DWORD *)this + 71);
  }
  *(_DWORD *)unint64_t v5 = -1082130432;
  std::vector<float>::resize((char **)this + 36, v4, v5);
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    uint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      unint64_t v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)unint64_t v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      uint64_t v15 = &v13[4 * v7];
      unint64_t v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      int v18 = v15;
      do
      {
        *(_DWORD *)int v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      int v19 = &v13[4 * v14];
      unsigned int v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void Espresso::nonzero_kernel_cpu::__launch(void *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v41, *a4);
  uint64_t v7 = 0;
  unint64_t v8 = a1 + 36;
  uint64_t v9 = v41;
  unint64_t v10 = *(int *)(v41 + 8);
  unint64_t v11 = v10;
  do
  {
    v11 *= *(int *)(v41 + 12 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v11 != (uint64_t)(a1[37] - a1[36]) >> 2)
  {
    for (uint64_t i = 0; i != 12; i += 4)
      v10 *= *(int *)(v41 + 12 + i);
    LODWORD(v38[0]) = -1082130432;
    std::vector<float>::resize((char **)a1 + 36, v10, v38);
    unint64_t v10 = *(int *)(v9 + 8);
  }
  unint64_t v13 = 0;
  int v14 = 0;
  int v15 = 0;
  while (1)
  {
    uint64_t v16 = 0;
    unint64_t v17 = v10;
    do
    {
      v17 *= *(int *)(v9 + 12 + v16);
      v16 += 4;
    }
    while (v16 != 12);
    if (v17 <= v13) {
      break;
    }
    if (*(float *)(*(void *)(v9 + 24) + 4 * v13) != 0.0)
    {
      ++v14;
      *(float *)(*v8 + 4 * v15++) = (float)(int)v13;
    }
    ++v13;
  }
  uint64_t v40 = 0;
  long long v39 = 0u;
  *(_OWORD *)&uint64_t v38[3] = 0u;
  *(_OWORD *)int v38 = xmmword_192DC3600;
  Espresso::abstract_blob_container::shape((char *)&v31, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v36, (const Espresso::layer_shape *)&v31, 0);
  int v18 = v37;
  if (__p)
  {
    int v34 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v31, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v36, (const Espresso::layer_shape *)&v31, 0);
  if (__p)
  {
    int v34 = __p;
    operator delete(__p);
  }
  v38[0] = __PAIR64__(v14, v18);
  *(_OWORD *)&v38[1] = xmmword_192DCA710;
  int v19 = (std::__shared_weak_count *)operator new(0x98uLL);
  v19->__shared_weak_owners_ = 0;
  v19->__shared_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
  *(_OWORD *)&v19[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v19[3].__shared_owners_ = 0u;
  *(_OWORD *)&v19[1].__shared_owners_ = 0u;
  v19[2].std::__shared_count = 0u;
  v19[4].std::__shared_count = 0u;
  *(_OWORD *)&v19[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v19[5].__shared_owners_ = 0u;
  v19[5].__shared_weak_owners_ = 0;
  v19[6].__vftable = 0;
  LODWORD(v19[2].__vftable) = 1065353216;
  v19[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v19[4].__vftable = 0;
  v19[4].__shared_owners_ = 0;
  v19[2].__shared_weak_owners_ = 0;
  v19[3].__vftable = 0;
  LOBYTE(v19[3].__shared_weak_owners_) = 0;
  v19[3].__shared_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
  v19[5].__vftable = 0;
  v19[5].__shared_owners_ = 0;
  LOBYTE(v19[6].__vftable) = 0;
  LOBYTE(v19[6].__vftable) = *(unsigned char *)(a1[1] + 126);
  uint64_t v20 = **a3;
  unint64_t v29 = v19 + 1;
  uint64_t v30 = v19;
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, void *, std::__shared_weak_count **))(*(void *)v20 + 16))(v20, v38, &v29);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a3[1] == *a3)
  {
    uint64_t v31 = 0;
    int v32 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v31, *a3);
  }
  if (v14 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *v8;
    uint64_t v23 = *(void *)(v31 + 24);
    uint64_t v24 = v23 - 4;
    do
    {
      int v25 = (int)*(float *)(v22 + 4 * v21);
      uint64_t v26 = v18;
      if (v18 >= 2)
      {
        do
        {
          int v27 = *(_DWORD *)&v35[4 * v26];
          *(float *)(v24 + 4 * v26) = (float)(v25 % v27);
          v25 /= v27;
        }
        while (v26-- > 2);
      }
      *(float *)(v23 + 4 * v21 * v18) = (float)v25;
      ++v21;
      v24 += 4 * v18;
    }
    while (v21 != v14);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  nitro::nitro_function::nitro_function(v19);
  if ((void)v39)
  {
    *((void *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
}

void sub_192B6EB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v31 = *(std::__shared_weak_count **)(v29 - 72);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::nonzero_kernel_cpu::~nonzero_kernel_cpu(Espresso::nonzero_kernel_cpu *this)
{
  *(void *)this = &unk_1EE34E6C0;
  float32x4_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE34E6C0;
  float32x4_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::precompiled_segment_kernel_cpu::~precompiled_segment_kernel_cpu(Espresso::precompiled_segment_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::one_hot_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  *(void *)&long long v54 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a4;
  unint64_t v8 = a4[1];
  if ((char *)v8 - (char *)*a4 == 32)
  {
    if (!*(void *)(*(void *)a2 + 64)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic one_hot requires interpreter");
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v45, v7 + 2);
    if (v45)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(int *)(v45 + 8);
      do
      {
        v11 *= *(int *)(v45 + 12 + v10);
        v10 += 4;
      }
      while (v10 != 12);
      if (v11 != 1)
      {
        Espresso::abstract_blob_container::shape((char *)&v49, (*a4)[2]);
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("one_hot_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v49, DWORD1(v49), DWORD2(v49), HIDWORD(v49), v50);
      }
      *(_DWORD *)(a1 + 280) = (int)**(float **)(v45 + 24);
    }
    unint64_t v12 = (std::__shared_weak_count *)operator new(0x98uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
    *(_OWORD *)&v12[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v12[3].__shared_owners_ = 0u;
    *(_OWORD *)&v12[1].__shared_owners_ = 0u;
    v12[2].std::__shared_count = 0u;
    v12[4].std::__shared_count = 0u;
    *(_OWORD *)&v12[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v12[5].__shared_owners_ = 0u;
    v12[5].__shared_weak_owners_ = 0;
    v12[6].__vftable = 0;
    LODWORD(v12[2].__vftable) = 1065353216;
    v12[2].__shared_owners_ = 0x1FFFFFFFFLL;
    v12[4].__vftable = 0;
    v12[4].__shared_owners_ = 0;
    v12[2].__shared_weak_owners_ = 0;
    v12[3].__vftable = 0;
    LOBYTE(v12[3].__shared_weak_owners_) = 0;
    v12[3].__shared_owners_ = 0;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
    v12[5].__vftable = 0;
    v12[5].__shared_owners_ = 0;
    LOBYTE(v12[6].__vftable) = 0;
    LOBYTE(v12[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
    uint64_t v13 = **a3;
    Espresso::abstract_blob_container::shape((char *)&v49, **a4);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    p_shared_weak_owners = 0;
    int v47 = (void **)&v40;
    LOBYTE(v48) = 0;
    uint64_t v40 = (std::__shared_weak_count *)operator new(0x40uLL);
    uint64_t v41 = v40;
    p_shared_weak_owners = &v40[2].__shared_weak_owners_;
    uint64_t v41 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&p_shared_weak_owners, &v49, &v54, (uint64_t)v40);
    Espresso::generic_one_hot_kernel::top_shapes_for_bottom_shapes(a1, (uint64_t *)&v40, v43);
    uint64_t v14 = v43[0];
    int v38 = v12 + 1;
    long long v39 = v12;
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, uint64_t, std::__shared_weak_count **))(*(void *)v13 + 16))(v13, v14, &v38);
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    int v47 = (void **)v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v47);
    int v47 = (void **)&v40;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v47);
    if (__p)
    {
      int v53 = __p;
      operator delete(__p);
    }
    nitro::nitro_function::nitro_function(v12);
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    uint64_t v7 = *a4;
    unint64_t v8 = a4[1];
  }
  if (v8 == v7)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v40, v7);
  }
  if (a3[1] == *a3)
  {
    int v15 = 0;
    int v47 = 0;
    int v48 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v47, *a3);
    int v15 = v47;
  }
  uint64_t v16 = 0;
  unint64_t v17 = v15[3];
  uint64_t v18 = *((int *)v15 + 2);
  do
  {
    v18 *= *(int *)((char *)v15 + v16 + 12);
    v16 += 4;
  }
  while (v16 != 12);
  for (; v18; --v18)
    *v17++ = *(_DWORD *)(a1 + 288);
  int v19 = *(_DWORD *)(a1 + 292);
  Espresso::abstract_blob_container::shape((char *)&v49, **a3);
  if (v50 == 1) {
    int v20 = 4;
  }
  else {
    int v20 = 5;
  }
  if (v51 == -1) {
    int v21 = v20;
  }
  else {
    int v21 = v51;
  }
  if (__p)
  {
    int v53 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v49, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v43, (const Espresso::layer_shape *)&v49, 0);
  if (__p)
  {
    int v53 = __p;
    operator delete(__p);
  }
  if ((v21 & (v19 >> 31)) + v19 < 0) {
    int v22 = -1;
  }
  else {
    int v22 = (v21 & (v19 >> 31)) + v19;
  }
  unsigned int v23 = v22 + 1;
  if ((int)v23 >= v44)
  {
    int v26 = 1;
  }
  else
  {
    unint64_t v24 = v44 - (unint64_t)v23;
    int v25 = (int *)v43 + v23;
    int v26 = 1;
    do
    {
      int v27 = *v25++;
      v26 *= v27;
      --v24;
    }
    while (v24);
  }
  unint64_t v28 = 0;
  int v29 = *(_DWORD *)(a1 + 280);
  uint64_t v30 = &v40->__vftable;
  unint64_t shared_owners_low = SLODWORD(v40->__shared_owners_);
  int v32 = (char *)&v40->__shared_owners_ + 4;
  while (1)
  {
    uint64_t v33 = 0;
    unint64_t v34 = shared_owners_low;
    do
    {
      v34 *= *(int *)&v32[v33];
      v33 += 4;
    }
    while (v33 != 12);
    if (v34 <= v28) {
      break;
    }
    float v35 = *(float *)(v30[3] + 4 * v28);
    int v36 = (int)(v35 + 0.5);
    if (v35 >= 0.0 && v29 > v36) {
      *((_DWORD *)v15[3] + (int)v28 % v26 + (v36 + (int)v28 / v26 * v29) * v26) = *(_DWORD *)(a1 + 284);
    }
    ++v28;
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
}

void sub_192B6F1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::one_hot_kernel_cpu::~one_hot_kernel_cpu(Espresso::one_hot_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::cumsum_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a4[1];
  if (v7 == *a4)
  {
    uint64_t v48 = 0;
    long long v49 = 0;
    unint64_t v8 = v7;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v48, *a4);
    uint64_t v7 = *a4;
    unint64_t v8 = a4[1];
  }
  if ((unint64_t)((char *)v8 - (char *)v7) <= 0x10)
  {
    uint64_t v46 = 0;
    int v47 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v46, v7 + 2);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v44, *(uint64_t **)a3);
  }
  if (!v46) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("cumsum_kernel requires 2 input blobs.");
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(int *)(v46 + 8);
  do
  {
    v10 *= *(int *)(v46 + 12 + v9);
    v9 += 4;
  }
  while (v9 != 12);
  if (v10 != 1)
  {
    Espresso::abstract_blob_container::shape((char *)v39, (*a4)[2]);
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("cumsum_kernel_cpu: [%d, %d, %d, %d, %d] != [1, 1, 1, 1, 1]", v39[0], v39[1], v39[2], v39[3], v40);
  }
  int v11 = (int)**(float **)(v46 + 24);
  if (v11 < 0)
  {
    Espresso::abstract_blob_container::shape((char *)v39, **(void **)a3);
    int v12 = v41;
    if (v40 == 1) {
      int v13 = 4;
    }
    else {
      int v13 = 5;
    }
    if (v41 == -1) {
      int v12 = v13;
    }
    v11 += v12;
    if (__p)
    {
      unint64_t v43 = __p;
      operator delete(__p);
    }
  }
  Espresso::abstract_blob_container::shape((char *)v39, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v37, (const Espresso::layer_shape *)v39, 0);
  if (__p)
  {
    unint64_t v43 = __p;
    operator delete(__p);
  }
  uint64_t v14 = 0;
  uint64_t v15 = v48;
  unint64_t v16 = *(int *)(v48 + 8);
  do
  {
    v16 *= *(int *)(v48 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  unint64_t v17 = (int)v37[v11];
  if (v11 < 0) {
    int v18 = -1;
  }
  else {
    int v18 = v11;
  }
  unsigned int v19 = v18 + 1;
  if (v18 + 1 >= v38)
  {
    int v21 = 1;
  }
  else
  {
    unint64_t v20 = v38 - (unint64_t)v19;
    int v21 = 1;
    int v22 = &v37[v19];
    do
    {
      int v23 = *v22++;
      v21 *= v23;
      --v20;
    }
    while (v20);
  }
  int v24 = *(unsigned __int8 *)(a1 + 281);
  if (*(unsigned char *)(a1 + 281)) {
    int v25 = -v21;
  }
  else {
    int v25 = v21;
  }
  if (v16 >= v17)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v16 / v17;
    if (v16 / v17 <= 1) {
      uint64_t v27 = 1;
    }
    uint64_t v28 = v44;
    while ((int)v17 < 1)
    {
LABEL_53:
      if (++v26 == v27) {
        goto LABEL_54;
      }
    }
    int v29 = 0;
    int v30 = 0;
    int v31 = -1;
    int v32 = -1;
    while (1)
    {
      if (v30)
      {
        v31 += v25;
        *(float *)(*(void *)(v28 + 24) + 4 * v29) = *(float *)(*(void *)(v28 + 24) + 4 * v32)
                                                      + *(float *)(*(void *)(v15 + 24) + 4 * v31);
        int v32 = v29;
      }
      else
      {
        int v33 = (int)v26 / v25;
        int v34 = (int)v26 % v25;
        if (v24)
        {
          int v33 = (int)v26 / v21;
          v34 += v21 * (v17 - 1);
        }
        int v35 = v34 + v33 * v21 * v17;
        int v30 = *(unsigned __int8 *)(a1 + 280);
        if (!*(unsigned char *)(a1 + 280))
        {
          *(_DWORD *)(*(void *)(v28 + 24) + 4 * v35) = *(_DWORD *)(*(void *)(v15 + 24) + 4 * v35);
          int v32 = v35;
          goto LABEL_51;
        }
        int v30 = 0;
        uint64_t v36 = *(void *)(v28 + 24);
        *(_DWORD *)(v36 + 4 * v35) = 0;
        if ((int)v17 >= 2)
        {
          int v32 = v35 + v25;
          *(_DWORD *)(v36 + 4 * (v35 + v25)) = *(_DWORD *)(*(void *)(v15 + 24) + 4 * v35);
          int v30 = 1;
LABEL_51:
          int v31 = v35;
        }
      }
      ++v30;
      int v29 = v32 + v25;
      if (v30 >= (int)v17) {
        goto LABEL_53;
      }
    }
  }
LABEL_54:
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
}

void sub_192B6F5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  int v21 = *(std::__shared_weak_count **)(v19 - 72);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  int v22 = *(std::__shared_weak_count **)(v19 - 56);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  int v23 = *(std::__shared_weak_count **)(v19 - 40);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::cumsum_kernel_cpu::~cumsum_kernel_cpu(Espresso::cumsum_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void *Espresso::sparse_inner_product_kernel_cpu::get_coo_weights@<X0>(Espresso::sparse_inner_product_kernel_cpu *this@<X0>, uint64_t *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, 3 * *((_DWORD *)this + 78), 1, 1, 1);
  uint64_t v4 = *((void *)this + 42);
  uint64_t v5 = *a2;
  uint64_t v6 = *(int *)(v4 + 8) - 1;
  if (*(_DWORD *)(v4 + 8) != 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(_DWORD **)(v4 + 16);
    LODWORD(v10) = *v9;
    do
    {
      int v11 = (float *)(v8 + 4 * (int)v10);
      unint64_t v12 = v7 + 1;
      uint64_t v10 = (int)v9[v7 + 1];
      uint64_t v13 = v8 + 4 * v10 - (void)v11;
      if (v13 >= 1)
      {
        float v14 = (float)v7;
        unint64_t v15 = ((unint64_t)v13 >> 2) + 1;
        do
        {
          *v11++ = v14;
          --v15;
        }
        while (v15 > 1);
      }
      unint64_t v7 = v12;
    }
    while (v12 != v6);
  }
  uint64_t v16 = *((void *)this + 44);
  uint64_t v17 = *(int *)(v16 + 8);
  if (v17)
  {
    int v18 = *(int **)(v16 + 16);
    uint64_t v19 = *(void *)(v5 + 16);
    uint64_t v20 = *((unsigned int *)this + 78);
    uint64_t v21 = 4 * v20;
    do
    {
      int v22 = *v18++;
      *(float *)(v19 + v21) = (float)v22;
      v21 += 4;
      --v17;
    }
    while (v17);
  }
  else
  {
    uint64_t v19 = *(void *)(v5 + 16);
    uint64_t v20 = *((unsigned int *)this + 78);
  }
  int v23 = (void *)(v19 + 4 * v20 + 4 * v20);
  uint64_t v24 = *((void *)this + 46);
  int v25 = *(const void **)(v24 + 16);
  size_t v26 = 4 * *(int *)(v24 + 8);

  return memcpy(v23, v25, v26);
}

void Espresso::sparse_inner_product_kernel_cpu::set_coo_weights(uint64_t a1, uint64_t a2)
{
  float32x2_t v3 = *(float **)(*(void *)a2 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 312);
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v27, *(_DWORD *)(a1 + 304) + 1, 1, 1, 1);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 344);
  *(_OWORD *)(a1 + 336) = v27;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v27, *(_DWORD *)(a1 + 312), 1, 1, 1);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 360);
  *(_OWORD *)(a1 + 352) = v27;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v27, *(_DWORD *)(a1 + 312), 1, 1, 1);
  uint64_t v7 = v27;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 376);
  *(_OWORD *)(a1 + 368) = v27;
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    uint64_t v9 = *(void *)(a1 + 368);
  }
  else
  {
    uint64_t v9 = v7;
  }
  uint64_t v10 = *(int **)(*(void *)(a1 + 336) + 16);
  uint64_t v11 = *(void *)(*(void *)(a1 + 352) + 16);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(unsigned int *)(a1 + 304);
  uint64_t v14 = *(unsigned int *)(a1 + 312);
  bzero(v10, v13 + 1);
  if (v14)
  {
    unint64_t v15 = v3;
    uint64_t v16 = v14;
    do
    {
      float v17 = *v15++;
      ++v10[v17];
      --v16;
    }
    while (v16);
  }
  if (v13)
  {
    int v18 = 0;
    uint64_t v19 = v10;
    uint64_t v20 = v13;
    do
    {
      int v21 = *v19;
      *v19++ = v18;
      v18 += v21;
      --v20;
    }
    while (v20);
  }
  v10[v13] = v14;
  if (v14)
  {
    do
    {
      unint64_t v22 = (unint64_t)*v3;
      uint64_t v23 = v10[v22];
      *(_DWORD *)(v11 + 4 * v23) = (int)v3[v4];
      *(float *)(v12 + 4 * v23) = v3[2 * v4];
      ++v10[v22];
      ++v3;
      --v14;
    }
    while (v14);
  }
  int v24 = 0;
  uint64_t v25 = v13 + 1;
  do
  {
    int v26 = *v10;
    *v10++ = v24;
    int v24 = v26;
    --v25;
  }
  while (v25);
  *(unsigned char *)(a1 + 384) = 1;
}

BOOL Espresso::sparse_inner_product_kernel_cpu::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 3) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 3)
  {
    return 0;
  }
  if (*(_WORD *)a2 == 29539 && *((unsigned char *)a2 + 2) == 114) {
    return 1;
  }
  if (*(_WORD *)a2 == 29539 && *((unsigned char *)a2 + 2) == 99) {
    return 1;
  }
  return *(_WORD *)a2 == 28515 && *((unsigned char *)a2 + 2) == 111;
}

void Espresso::sparse_inner_product_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int v8 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    if (*((void *)a3 + 1) != 3)
    {
LABEL_76:
      uint64_t v6 = *(const char **)a3;
      goto LABEL_77;
    }
    uint64_t v9 = *(const char **)a3;
  }
  else
  {
    uint64_t v9 = a3;
    if (v8 != 3)
    {
      int v10 = 0;
      goto LABEL_11;
    }
  }
  int v11 = *(unsigned __int16 *)v9;
  int v12 = *((unsigned __int8 *)v9 + 2);
  if (v11 != 29539 || v12 != 114)
  {
    int v10 = 0;
    if ((v8 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    if (*((void *)a3 + 1) != 3)
    {
LABEL_34:
      if (v10) {
        goto LABEL_47;
      }
      goto LABEL_76;
    }
    uint64_t v14 = *(const char **)a3;
LABEL_16:
    int v15 = *(unsigned __int16 *)v14;
    int v16 = *((unsigned __int8 *)v14 + 2);
    BOOL v18 = v15 == 29539 && v16 == 99 && a5 == 4 * (*(_DWORD *)(a1 + 308) + 2 * *(_DWORD *)(a1 + 312) + 1);
    v10 |= v18;
    if ((v8 & 0x80) == 0) {
      goto LABEL_23;
    }
    if (*((void *)a3 + 1) == 3)
    {
      uint64_t v19 = *(const char **)a3;
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  int v10 = a5 == 4 * (*(_DWORD *)(a1 + 304) + 2 * *(_DWORD *)(a1 + 312) + 1);
  if ((v8 & 0x80) != 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v14 = a3;
  if (v8 == 3) {
    goto LABEL_16;
  }
LABEL_23:
  if (v8 != 3)
  {
    if (v10) {
      goto LABEL_39;
    }
LABEL_77:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*,unsigned int &,unsigned int &,unsigned int &,unsigned long &,unsigned long>(v6, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 312), a5, 4);
  }
  uint64_t v19 = a3;
LABEL_29:
  int v20 = *(unsigned __int16 *)v19;
  int v21 = *((unsigned __int8 *)v19 + 2);
  BOOL v23 = v20 == 28515 && v21 == 111 && a5 == 4 * (3 * *(_DWORD *)(a1 + 312));
  if (!(v23 | v10))
  {
    if ((v8 & 0x80) == 0) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if ((v8 & 0x80) != 0)
  {
    if (*((void *)a3 + 1) != 3) {
      goto LABEL_47;
    }
    int v24 = *(const char **)a3;
    goto LABEL_43;
  }
LABEL_39:
  int v24 = a3;
  if (v8 != 3) {
    goto LABEL_47;
  }
LABEL_43:
  int v25 = *(unsigned __int16 *)v24;
  int v26 = *((unsigned __int8 *)v24 + 2);
  if (v25 != 28515 || v26 != 111)
  {
LABEL_47:
    uint64_t v28 = *(unsigned int *)(a1 + 304);
    uint64_t v29 = *(unsigned int *)(a1 + 312);
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v46, v28 + 1, 1, 1, 1);
    int v30 = *(std::__shared_weak_count **)(a1 + 344);
    *(_OWORD *)(a1 + 336) = v46;
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    uint64_t v31 = a4 + 4 * v28;
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v46, *(_DWORD *)(a1 + 312), 1, 1, 1);
    int v32 = *(std::__shared_weak_count **)(a1 + 360);
    *(_OWORD *)(a1 + 352) = v46;
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    uint64_t v33 = v31 + 4;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v46, *(_DWORD *)(a1 + 312), 1, 1, 1);
    int v34 = *(std::__shared_weak_count **)(a1 + 376);
    *(_OWORD *)(a1 + 368) = v46;
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    uint64_t v35 = *(void *)(a1 + 336);
    uint64_t v36 = *(void *)(a1 + 352);
    uint64_t v37 = *(void *)(v36 + 16);
    if (*(_DWORD *)(v35 + 8))
    {
      unint64_t v38 = 0;
      uint64_t v39 = *(void *)(v35 + 16);
      do
      {
        *(_DWORD *)(v39 + 4 * v38) = (int)*(float *)(a4 + 4 * v38);
        ++v38;
      }
      while (v38 < *(int *)(v35 + 8));
    }
    if (*(_DWORD *)(v36 + 8))
    {
      unint64_t v40 = 0;
      do
      {
        *(_DWORD *)(v37 + 4 * v40) = (int)*(float *)(v33 + 4 * v40);
        ++v40;
      }
      while (v40 < *(int *)(v36 + 8));
    }
    memcpy(*(void **)(*(void *)(a1 + 368) + 16), (const void *)(v33 + 4 * v29), 4 * *(int *)(*(void *)(a1 + 368) + 8));
    int v41 = v6[23];
    if (v41 < 0)
    {
      if (*((void *)v6 + 1) != 3)
      {
LABEL_70:
        BOOL v43 = 0;
LABEL_71:
        *(unsigned char *)(a1 + 384) = v43;
        return;
      }
      uint64_t v6 = *(const char **)v6;
    }
    else if (v41 != 3)
    {
      goto LABEL_70;
    }
    BOOL v43 = *(_WORD *)v6 == 29539 && v6[2] == 114;
    goto LABEL_71;
  }
  int v44 = 3 * *(_DWORD *)(a1 + 312);
  uint64_t v45 = (char *)operator new(0x58uLL);
  *((void *)v45 + 1) = 0;
  *((void *)v45 + 2) = 0;
  *(void *)uint64_t v45 = &unk_1EE389920;
  *((void *)v45 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v45 + 56) = 0u;
  *(_OWORD *)(v45 + 72) = 0u;
  *((_DWORD *)v45 + 8) = v44;
  *((void *)v45 + 5) = a4;
  v45[48] = 0;
  int v47 = v45 + 24;
  uint64_t v48 = (std::__shared_weak_count *)v45;
  (*(void (**)(uint64_t, char **))(*(void *)a1 + 392))(a1, &v47);
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
}

void sub_192B6FDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*,unsigned int &,unsigned int &,unsigned int &,unsigned long &,unsigned long>(const char *a1, int a2, int a3, int a4, int a5, int a6)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("Incorrect format size combination: format=%s, nB=%d, nC=%d, nnz=%d\n%d %d\n", a1, a2, a3, a4, a5, a6);
}

void Espresso::sparse_inner_product_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v44, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v42 = 0;
    BOOL v43 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v42, *(uint64_t **)a4);
  }
  Espresso::abstract_blob_container::shape((char *)&v38, **(void **)a3);
  Espresso::abstract_blob_container::shape((char *)&v34, **(void **)a4);
  uint64_t v7 = v44;
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 112))
  {
    uint64_t v8 = 0;
    size_t v9 = *(int *)(v44 + 8);
    do
    {
      v9 *= *(int *)(v44 + 12 + v8);
      v8 += 4;
    }
    while (v8 != 12);
    bzero(*(void **)(v44 + 24), v9);
  }
  uint64_t v10 = v34;
  uint64_t v11 = *(unsigned int *)(a1 + 308);
  uint64_t v12 = *(unsigned int *)(a1 + 304);
  uint64_t v13 = v38;
  uint64_t v14 = v39;
  uint64_t v15 = *(void *)(v42 + 24);
  uint64_t v16 = *(void *)(v7 + 24);
  float v17 = *(_DWORD **)(*(void *)(a1 + 336) + 16);
  uint64_t v18 = *(void *)(*(void *)(a1 + 352) + 16);
  uint64_t v19 = *(void *)(*(void *)(a1 + 368) + 16);
  if (*(unsigned char *)(a1 + 384))
  {
    if (v35 == v11)
    {
      if (v38)
      {
        uint64_t v20 = 0;
        do
        {
          if (v14)
          {
            uint64_t v21 = 0;
            LODWORD(v22) = *v17;
            do
            {
              uint64_t v23 = v21 + 1;
              unsigned int v24 = v17[v21 + 1];
              if (v24 != v22)
              {
                float v25 = 0.0;
                if (v22 < v24)
                {
                  unint64_t v22 = (int)v22;
                  do
                  {
                    float v25 = v25
                        + (float)(*(float *)(v15 + 4 * (v20 + *(int *)(v18 + 4 * v22) * (uint64_t)(int)v10))
                                * *(float *)(v19 + 4 * v22));
                    ++v22;
                  }
                  while (v22 < (int)v24);
                }
                *(float *)(v16 + 4 * (v20 + v21 * v13)) = v25;
              }
              LODWORD(v22) = v24;
              ++v21;
            }
            while (v23 != v14);
          }
          ++v20;
        }
        while (v20 != v13);
      }
      goto LABEL_37;
    }
    int v26 = *(_DWORD *)(a1 + 304);
    int v27 = *(_DWORD *)(a1 + 308);
    LODWORD(v12) = v35;
    LODWORD(v11) = v34;
LABEL_47:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &>(v26, v27, v12, v11);
  }
  int v26 = v35;
  int v27 = v34;
  if (v34 != v12) {
    goto LABEL_47;
  }
  if (v39)
  {
    uint64_t v28 = 0;
    do
    {
      if (v13)
      {
        uint64_t v29 = 0;
        LODWORD(v30) = *v17;
        do
        {
          uint64_t v31 = v29 + 1;
          unsigned int v32 = v17[v29 + 1];
          if (v32 != v30)
          {
            float v33 = 0.0;
            if (v30 < v32)
            {
              unint64_t v30 = (int)v30;
              do
              {
                float v33 = v33
                    + (float)(*(float *)(v15 + 4 * v28 * v10 + 4 * *(int *)(v18 + 4 * v30)) * *(float *)(v19 + 4 * v30));
                ++v30;
              }
              while (v30 < (int)v32);
            }
            *(float *)(v16 + 4 * (v29 + v28 * v13)) = v33;
          }
          LODWORD(v30) = v32;
          ++v29;
        }
        while (v31 != v13);
      }
      ++v28;
    }
    while (v28 != v14);
  }
LABEL_37:
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
}

void sub_192B70068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  float v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &>(int a1, int a2, int a3, int a4)
{
}

void Espresso::sparse_inner_product_kernel_cpu::~sparse_inner_product_kernel_cpu(Espresso::sparse_inner_product_kernel_cpu *this)
{
  *(void *)this = &unk_1EE367420;
  int v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  float32x2_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE367420;
  int v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  float32x2_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(this);
}

void Espresso::dev_op_kernel_cpu::__launch(Espresso::dev_op_kernel_cpu *this, uint64_t a2, void *a3, void *a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 72)) {
    return;
  }
  int v5 = *((_DWORD *)this + 70);
  BOOL v6 = v5 == 100 || v5 == 0;
  if (!v6) {
    return;
  }
  if (!*((void *)this + 57))
  {
    Espresso::dev_op_kernel_cpu::load_mil_program_for_dev_op(this);
    if (!*((void *)this + 57)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to load MIL program.");
    }
  }
  uint64_t v8 = *((void *)this + 58);
  if (!v8) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to get MIL function.");
  }
  uint64_t v63 = this;
  std::vector<int> __p = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v64 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 128))(v8);
  size_t v9 = v64 + 1;
  uint64_t v10 = (void *)*v64;
  if ((void *)*v64 != v64 + 1)
  {
    uint64_t v11 = 0;
    do
    {
      if (v11 >= v76)
      {
        uint64_t v12 = (char *)__p;
        uint64_t v13 = (v11 - (unsigned char *)__p) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v76 - (unsigned char *)__p;
        if ((v76 - (unsigned char *)__p) >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float v17 = (char *)operator new(8 * v16);
        }
        else
        {
          float v17 = 0;
        }
        uint64_t v18 = &v17[8 * v13];
        *(void *)uint64_t v18 = v10[7];
        uint64_t v19 = v18 + 8;
        if (v11 != v12)
        {
          do
          {
            uint64_t v20 = *((void *)v11 - 1);
            v11 -= 8;
            *((void *)v18 - 1) = v20;
            v18 -= 8;
          }
          while (v11 != v12);
          uint64_t v11 = (char *)__p;
        }
        std::vector<int> __p = v18;
        uint64_t v76 = &v17[8 * v16];
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = v19;
      }
      else
      {
        *(void *)uint64_t v11 = v10[7];
        v11 += 8;
      }
      uint64_t v75 = v11;
      uint64_t v21 = (void *)v10[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unint64_t v22 = (void *)v10[2];
          BOOL v6 = *v22 == (void)v10;
          uint64_t v10 = v22;
        }
        while (!v6);
      }
      uint64_t v10 = v22;
    }
    while (v22 != v9);
  }
  uint64_t v23 = (*(uint64_t (**)(void))(**((void **)this + 58) + 48))(*((void *)this + 58));
  unsigned int v24 = (char ***)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23);
  float v25 = **v24;
  if ((*v24)[1] - v25 != 16) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference: expected exactly one op for value inference.");
  }
  int v26 = *(MIL::IRObject **)v25;
  (*(void (**)(uint64_t *__return_ptr, void))(**(void **)v25 + 80))(&v72, *(void *)v25);
  if (!v72)
  {
    uint64_t v62 = "dev_op value inference: failed to get op ptr";
    goto LABEL_118;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v72 + 224))(v72))
  {
    uint64_t v62 = "dev_op value inference: operator has no value inference function";
    goto LABEL_118;
  }
  if (v64[2] != (uint64_t)(a4[1] - *a4) >> 4)
  {
    uint64_t v62 = "dev_op value inference: unexpected number of input tensors";
    goto LABEL_118;
  }
  (*(void (**)(_OWORD *__return_ptr))(**((void **)this + 58) + 160))(v70);
  uint64_t v27 = (uint64_t)(*((void *)&v70[0] + 1) - *(void *)&v70[0]) >> 3;
  uint64_t v28 = (uint64_t)(a3[1] - *a3) >> 4;
  if (*(void *)&v70[0])
  {
    *((void *)&v70[0] + 1) = *(void *)&v70[0];
    operator delete(*(void **)&v70[0]);
  }
  if (v27 != v28)
  {
    uint64_t v62 = "dev_op value inference: unexpected number of output tensors";
LABEL_118:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v62);
  }
  memset(v70, 0, sizeof(v70));
  int v71 = 1065353216;
  uint64_t v29 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v26 + 160))(v26);
  unint64_t v30 = v29 + 1;
  uint64_t v31 = (void *)*v29;
  if ((void *)*v29 == v29 + 1) {
    goto LABEL_76;
  }
  unint64_t v32 = 0;
  do
  {
    MIL::IROperation::TryGetParameterValueSharedPtr();
    if (v68)
    {
      size_t v80 = (void **)&v68->__vftable;
      uint64_t v81 = v69;
      if (v69) {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v78 = (long long *)(v31 + 4);
      float v33 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v70, (unsigned __int8 *)v31 + 32, &v78);
      std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*>((uint64_t *)v33 + 5, &v80, &v82);
      if (v81) {
        nitro::nitro_function::nitro_function(v81);
      }
      goto LABEL_68;
    }
    int v34 = (void *)(*(uint64_t (**)(MIL::IRObject *, void *, void))(*(void *)v26 + 120))(v26, v31 + 4, 0);
    int v35 = (void *)*v9;
    if (v34) {
      BOOL v36 = v35 == 0;
    }
    else {
      BOOL v36 = 1;
    }
    if (v36) {
LABEL_106:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference: unknown input param");
    while (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, v35 + 4))
    {
LABEL_57:
      int v35 = (void *)*v35;
      if (!v35) {
        goto LABEL_106;
      }
    }
    if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35 + 4, v34))
    {
      ++v35;
      goto LABEL_57;
    }
    uint64_t v37 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)v64, &v80, v34);
    if (!v37) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    Espresso::dev_op_kernel_cpu::milTensorFromEspressoBlob(*(MIL::IRValueType **)(v37 + 56), a4, v32, (uint64_t)&v80);
    if (!v80) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference: failed to get IRValue for input variable.");
    }
    unsigned int v78 = (long long *)v80;
    vDSP_Length v79 = v81;
    if (v81) {
      atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v77 = (long long *)(v31 + 4);
    int v38 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v70, (unsigned __int8 *)v31 + 32, &v77);
    std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*>((uint64_t *)v38 + 5, &v78, &v80);
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    ++v32;
LABEL_68:
    if (v69) {
      nitro::nitro_function::nitro_function(v69);
    }
    int v39 = (void *)v31[1];
    if (v39)
    {
      do
      {
        unint64_t v40 = v39;
        int v39 = (void *)*v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        unint64_t v40 = (void *)v31[2];
        BOOL v6 = *v40 == (void)v31;
        uint64_t v31 = v40;
      }
      while (!v6);
    }
    uint64_t v31 = v40;
  }
  while (v40 != v30);
LABEL_76:
  uint64_t v41 = v72;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v26);
  BOOL v43 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v66 = *LocationPtr;
  uint64_t v67 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t Attributes = MIL::IRObject::GetAttributes(v26);
  uint64_t v45 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v26 + 216))(v26);
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, uint64_t *, _OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v41 + 208))(&v68, v41, (uint64_t)v63 + 440, &v66, v70, Attributes, v45, 0xFFFFFFFFLL);
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  long long v46 = v68;
  if (v69 != v68)
  {
    unint64_t v47 = 0;
    do
    {
      uint64_t v48 = MIL::IRValue::AsTensor(*((MIL::IRValue **)&v46->__vftable + 2 * v47));
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 32))(v48);
      int v50 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 88))(v49);
      if (v50 == 4)
      {
        if (v47 >= (uint64_t)(a3[1] - *a3) >> 4)
        {
          size_t v80 = 0;
          uint64_t v81 = 0;
        }
        else
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v80, (uint64_t *)(*a3 + 16 * v47));
          int v52 = v80;
          if (v80)
          {
            int v53 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            for (unint64_t i = 0; ; ++i)
            {
              uint64_t v55 = 0;
              unint64_t v56 = *((int *)v52 + 2);
              do
              {
                v56 *= *(int *)((char *)v52 + v55 + 12);
                v55 += 4;
              }
              while (v55 != 12);
              if (i >= v56) {
                break;
              }
              MIL::Fp16::GetFloat(v53);
              int v53 = (MIL::Fp16 *)((char *)v53 + 2);
              *((_DWORD *)v52[3] + i) = v57;
            }
          }
        }
      }
      else
      {
        if (v50 != 5) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("dev_op value inference: float32 / float16 supported for value inference");
        }
        if (v47 >= (uint64_t)(a3[1] - *a3) >> 4)
        {
          int v51 = 0;
          size_t v80 = 0;
          uint64_t v81 = 0;
        }
        else
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v80, (uint64_t *)(*a3 + 16 * v47));
          int v51 = v80;
        }
        int v58 = v51[3];
        DatCGFloat a = (const void *)MIL::IRTensorValue::GetDataView<float>();
        uint64_t v60 = 0;
        uint64_t v61 = *((int *)v51 + 2);
        do
        {
          v61 *= *(int *)((char *)v51 + v60 + 12);
          v60 += 4;
        }
        while (v60 != 12);
        memcpy(v58, Data, 4 * v61);
      }
      if (v81) {
        nitro::nitro_function::nitro_function(v81);
      }
      ++v47;
      long long v46 = v68;
    }
    while (v47 < ((char *)v69 - (char *)v68) >> 4);
  }
  size_t v80 = (void **)&v68;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v80);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::~__hash_table((uint64_t)v70);
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_192B70A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28)
{
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::dev_op_kernel_cpu::load_mil_program_for_dev_op(Espresso::dev_op_kernel_cpu *this)
{
  if (*((char *)this + 439) >= 0) {
    size_t v2 = *((unsigned __int8 *)this + 439);
  }
  else {
    size_t v2 = *((void *)this + 53);
  }
  float32x2_t v3 = &v22;
  std::string::basic_string[abi:ne180100]((uint64_t)&v22, v2 + 1);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    float32x2_t v3 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if (v2)
  {
    if (*((char *)this + 439) >= 0) {
      uint64_t v4 = (char *)this + 416;
    }
    else {
      uint64_t v4 = (char *)*((void *)this + 52);
    }
    memmove(v3, v4, v2);
  }
  *(_WORD *)((char *)&v3->__r_.__value_.__l.__data_ + v2) = 47;
  int v5 = *((char *)this + 367);
  if (v5 >= 0) {
    BOOL v6 = (char *)this + 344;
  }
  else {
    BOOL v6 = (const std::string::value_type *)*((void *)this + 43);
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *((unsigned __int8 *)this + 367);
  }
  else {
    std::string::size_type v7 = *((void *)this + 44);
  }
  uint64_t v8 = std::string::append(&v22, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v22, &v27);
  std::__fs::filesystem::file_status v10 = std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v22, 0);
  unsigned __int8 v11 = v28;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v11 == 255 || !v11) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("mil program file not found at expected location");
  }
  if (!*((void *)this + 55))
  {
    Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v22);
    std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>((uint64_t)this + 440, &v22);
    std::__fs::filesystem::file_status v10 = (std::__fs::filesystem::file_status)v22.__r_.__value_.__r.__words[0];
    v22.__r_.__value_.__r.__words[0] = 0;
    if (v10) {
      std::__fs::filesystem::file_status v10 = (std::__fs::filesystem::file_status)(*(uint64_t (**)(std::__fs::filesystem::file_status))(**(void **)&v10 + 8))(v10);
    }
  }
  MIL::ParserOptions::Make(&v28, *(MIL::ParserOptions **)&v10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 64))(v28, 1);
  uint64_t v12 = v28;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = v27;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v12 + 32))(v12, &v26, 1);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 56);
  uint64_t v24 = *((void *)this + 55);
  float v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Text::ParseProgramFromFile();
  std::string::size_type v14 = v22.__r_.__value_.__r.__words[0];
  v22.__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = *((void *)this + 57);
  *((void *)this + 57) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    std::string::size_type v16 = v22.__r_.__value_.__r.__words[0];
    v22.__r_.__value_.__r.__words[0] = 0;
    if (v16) {
      (*(void (**)(std::string::size_type))(*(void *)v16 + 8))(v16);
    }
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  uint64_t v17 = (*(uint64_t (**)(void))(**((void **)this + 57) + 72))(*((void *)this + 57));
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)&v22, v17);
  if (v23 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dev_op value inference requires exactly one function in the mil program");
  }
  uint64_t v19 = *(void *)(v22.__r_.__value_.__r.__words[2] + 40);
  uint64_t v18 = *(void *)(v22.__r_.__value_.__r.__words[2] + 48);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = v19;
  *((void *)this + 59) = v18;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)&v22);
  uint64_t v21 = v28;
  uint64_t v28 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_192B70E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a10) {
    (*(void (**)(void *))(*(void *)a10 + 8))(a10);
  }
  if (*(char *)(v25 - 41) < 0) {
    operator delete(*(void **)(v25 - 64));
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  std::string::size_type v16 = operator new(0x40uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *std::string::size_type v16 = 0;
  v16[1] = v8;
  uint64_t v17 = (std::string *)(v16 + 2);
  uint64_t v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    v16[4] = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  v16[5] = 0;
  v16[6] = 0;
  v16[7] = 0;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string v26 = operator new(8 * *(void *)&prime);
          std::string v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            int v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *uint64_t v29 = *v35;
                  *int v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  int v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                uint64_t v29 = v35;
                int v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  unint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *uint64_t v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    uint64_t v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_192B713E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*>(uint64_t *a1, void *a2, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2;
  unint64_t v7 = a1 + 2;
  uint64_t v6 = a1[2];
  unint64_t v8 = (void *)*a1;
  if (v6 == *a1)
  {
    if (v6)
    {
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    unint64_t v14 = operator new(0x10uLL);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)(v14 + 2);
    uint64_t v15 = (uint64_t)v7;
    a2 = v4;
    a3 = v3;
    goto LABEL_19;
  }
  unint64_t v9 = (void *)a1[1];
  if (v9 == v8)
  {
    uint64_t v15 = (uint64_t)(a1 + 2);
    unint64_t v14 = v8;
LABEL_19:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<unsigned char>>,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(v15, a2, a3, v14);
    return;
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v11 = *v4;
      uint64_t v10 = v4[1];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = (std::__shared_weak_count *)v8[1];
      *unint64_t v8 = v11;
      v8[1] = v10;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      v8 += 2;
      v4 += 2;
    }
    while (v4 != v3);
    unint64_t v9 = (void *)a1[1];
  }
  while (v9 != v8)
  {
    uint64_t v13 = (std::__shared_weak_count *)*(v9 - 1);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    v9 -= 2;
  }
  a1[1] = (uint64_t)v8;
}

void Espresso::dev_op_kernel_cpu::milTensorFromEspressoBlob(MIL::IRValueType *this@<X3>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = MIL::IRValueType::AsTensorType(this);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  if (a3 >= (uint64_t)(a2[1] - *a2) >> 4)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v23, (uint64_t *)(*a2 + 16 * a3));
  }
  if (v8 != 4)
  {
    if (v8 == 5)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(int *)(v23 + 8);
      do
      {
        v10 *= *(int *)(v23 + 12 + v9);
        v9 += 4;
      }
      while (v9 != 12);
      MIL::IRTensorValueType::MakeFloat32ValueWithUnownedMemory();
      uint64_t v11 = __p[0];
      *(void **)a4 = __p[0];
      if (v11) {
        operator new();
      }
      *(void *)(a4 + 8) = 0;
      goto LABEL_32;
    }
LABEL_24:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    goto LABEL_32;
  }
  if (a3 >= (uint64_t)(a2[1] - *a2) >> 4)
  {
    uint64_t v12 = 0;
    uint64_t v21 = 0;
    BOOL v22 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v21, (uint64_t *)(*a2 + 16 * a3));
    uint64_t v12 = v21;
  }
  uint64_t v13 = v23;
  if (!v23 || v12)
  {
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    goto LABEL_24;
  }
  uint64_t v14 = *(int *)(v23 + 8);
  do
  {
    v14 *= *(int *)(v23 + 12 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  uint64_t v15 = (MIL::Fp16 *)std::vector<MIL::Fp16>::vector(__p, v14);
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v17 = 0;
    unint64_t v18 = *(int *)(v13 + 8);
    do
    {
      v18 *= *(int *)(v13 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    if (i >= v18) {
      break;
    }
    uint64_t v15 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v15, *(float *)(*(void *)(v13 + 24) + 4 * i));
    *((_WORD *)__p[0] + i) = (_WORD)v15;
  }
  MIL::IRTensorValueType::MakeFloat16Value();
  *(void *)a4 = v19;
  if (v19) {
    operator new();
  }
  *(void *)(a4 + 8) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
LABEL_32:
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
}

void sub_192B71794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::grid_sampling_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v74 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v74, *(uint64_t **)a3);
  }
  int v5 = a4[1];
  if (v5 == *a4)
  {
    uint64_t v72 = 0;
    int v73 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v72, *a4);
    int v5 = *a4;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v70, v5 + 2);
  uint64_t v66 = v74;
  uint64_t v57 = *(int *)(v74 + 20);
  if (v57)
  {
    uint64_t v58 = 0;
    uint64_t v6 = 0;
    uint64_t v8 = *(int *)(v74 + 8);
    uint64_t v7 = *(int *)(v74 + 12);
    uint64_t v60 = (int)v8 * (uint64_t)(int)v7;
    float v9 = (float)(unint64_t)(v8 - 1);
    float v10 = (float)(unint64_t)(v7 - 1);
    uint64_t v11 = *(unsigned int *)(v74 + 16);
    int v56 = *(_DWORD *)(v74 + 12);
    uint64_t v63 = v8;
    uint64_t v67 = *(unsigned int *)(v74 + 8);
    uint64_t v59 = v70;
    uint64_t v12 = v72;
    uint64_t v55 = 4 * (int)v8 * (int)v7 * (int)v11;
    uint64_t v62 = 4 * v8;
    uint64_t v13 = 4 * (int)v8 * (int)v7;
    while (!v56)
    {
LABEL_65:
      ++v6;
      v58 += v55;
      if (v6 == v57) {
        goto LABEL_66;
      }
    }
    uint64_t v61 = v6 * 2 * v60;
    uint64_t v64 = v58;
    uint64_t v65 = 0;
    while (!v63)
    {
LABEL_64:
      v64 += v62;
      if (++v65 == v56) {
        goto LABEL_65;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v59 + 24);
    uint64_t v16 = v64;
    int v68 = *(unsigned __int8 *)(a1 + 284);
    while (1)
    {
      float v17 = *(float *)(v15 + 4 * (v61 + v65 * v63 + v14));
      float v18 = *(float *)(v15 + 4 * (v61 + v65 * v63 + v60 + v14));
      if (!v68)
      {
        float v17 = v17 + (float)(int)v14;
        float v18 = v18 + (float)(int)v65;
        if (v11) {
          break;
        }
        goto LABEL_63;
      }
      if (*(unsigned char *)(a1 + 285))
      {
        float v17 = (float)((float)(v17 + 1.0) * 0.5) * v9;
        float v18 = (float)((float)(v18 + 1.0) * 0.5) * v10;
      }
      if (v11) {
        break;
      }
LABEL_63:
      ++v14;
      v16 += 4;
      if (v14 == v67) {
        goto LABEL_64;
      }
    }
    uint64_t v19 = 0;
    int v20 = vcvtms_s32_f32(v17);
    int v21 = vcvtms_s32_f32(v18);
    float v22 = v17 - (float)(int)floorf(v17);
    float v23 = v18 - (float)(int)floorf(v18);
    int v24 = *(_DWORD *)(a1 + 280);
    int v25 = v20 + 1;
    int v26 = v21 & ~(v21 >> 31);
    int v27 = v20 & ~(v20 >> 31);
    int v28 = v21 + 1;
    int v29 = v25 & ~(v25 >> 31);
    int v30 = v28 & ~(v28 >> 31);
    uint8x8_t v31 = (float *)(*(void *)(v66 + 24) + v16);
    while (1)
    {
      if (v24 == 1)
      {
        int v32 = *(_DWORD *)(v12 + 8);
        int v33 = *(_DWORD *)(v12 + 12);
        int v34 = v33 - 1;
        if (v26 < v33) {
          int v34 = v21 & ~(v21 >> 31);
        }
        if (v27 >= v32) {
          int v35 = v32 - 1;
        }
        else {
          int v35 = v20 & ~(v20 >> 31);
        }
      }
      else
      {
        float v40 = 0.0;
        if ((v21 | v20) < 0) {
          goto LABEL_36;
        }
        int v33 = *(_DWORD *)(v12 + 12);
        if (v33 <= v21) {
          goto LABEL_36;
        }
        int v32 = *(_DWORD *)(v12 + 8);
        if (v32 <= v20) {
          goto LABEL_36;
        }
        int v35 = v20;
        int v34 = v21;
      }
      uint64_t v36 = v33 * v32;
      uint64_t v37 = *(void *)(v12 + 24);
      uint64_t v38 = v6 * *(int *)(v12 + 16) * v36;
      uint64_t v39 = v19 * v36;
      float v40 = *(float *)(v37 + 4 * (v39 + v35 + v34 * v32 + v38));
      if (v24 == 1)
      {
        int v41 = v33 - 1;
        if (v26 < v33) {
          int v41 = v21 & ~(v21 >> 31);
        }
        int v42 = v32 - 1;
        if (v29 < v32) {
          int v42 = v25 & ~(v25 >> 31);
        }
        goto LABEL_40;
      }
LABEL_36:
      float v43 = 0.0;
      if (((v20 + 1) | v21) < 0) {
        goto LABEL_46;
      }
      int v33 = *(_DWORD *)(v12 + 12);
      if (v33 <= v21) {
        goto LABEL_46;
      }
      int v32 = *(_DWORD *)(v12 + 8);
      if (v32 <= v25) {
        goto LABEL_46;
      }
      uint64_t v37 = *(void *)(v12 + 24);
      uint64_t v44 = v33 * v32;
      uint64_t v38 = v6 * *(int *)(v12 + 16) * v44;
      uint64_t v39 = v19 * v44;
      int v42 = v20 + 1;
      int v41 = v21;
LABEL_40:
      float v43 = *(float *)(v37 + 4 * (v39 + v42 + v41 * v32 + v38));
      if (v24 == 1)
      {
        int v45 = v33 - 1;
        if (v30 < v33) {
          int v45 = v28 & ~(v28 >> 31);
        }
        int v46 = v32 - 1;
        if (v27 < v32) {
          int v46 = v20 & ~(v20 >> 31);
        }
        goto LABEL_50;
      }
LABEL_46:
      float v47 = 0.0;
      if (((v21 + 1) | v20) < 0) {
        goto LABEL_57;
      }
      int v33 = *(_DWORD *)(v12 + 12);
      if (v33 <= v28) {
        goto LABEL_57;
      }
      int v32 = *(_DWORD *)(v12 + 8);
      if (v32 <= v20) {
        goto LABEL_57;
      }
      uint64_t v37 = *(void *)(v12 + 24);
      uint64_t v48 = v33 * v32;
      uint64_t v38 = v6 * *(int *)(v12 + 16) * v48;
      uint64_t v39 = v19 * v48;
      int v46 = v20;
      int v45 = v21 + 1;
LABEL_50:
      float v47 = *(float *)(v37 + 4 * (v39 + v46 + v45 * v32 + v38));
      if (v24 == 1)
      {
        if (v30 >= v33) {
          int v49 = v33 - 1;
        }
        else {
          int v49 = v28 & ~(v28 >> 31);
        }
        int v50 = v32 - 1;
        if (v29 < v32) {
          int v50 = v25 & ~(v25 >> 31);
        }
        goto LABEL_61;
      }
LABEL_57:
      float v51 = 0.0;
      if (((v21 + 1) | (v20 + 1)) < 0) {
        goto LABEL_62;
      }
      int v52 = *(_DWORD *)(v12 + 12);
      if (v52 <= v28) {
        goto LABEL_62;
      }
      int v32 = *(_DWORD *)(v12 + 8);
      if (v32 <= v25) {
        goto LABEL_62;
      }
      uint64_t v37 = *(void *)(v12 + 24);
      uint64_t v53 = v52 * v32;
      uint64_t v38 = v6 * *(int *)(v12 + 16) * v53;
      uint64_t v39 = v19 * v53;
      int v50 = v20 + 1;
      int v49 = v21 + 1;
LABEL_61:
      float v51 = *(float *)(v37 + 4 * (v39 + v50 + v49 * v32 + v38));
LABEL_62:
      float *v31 = (float)(v23 * (float)((float)(v22 * v51) + (float)(v47 * (float)(1.0 - v22))))
           + (float)((float)(1.0 - v23) * (float)((float)(v22 * v43) + (float)(v40 * (float)(1.0 - v22))));
      ++v19;
      uint8x8_t v31 = (float *)((char *)v31 + v13);
      if (v11 == v19) {
        goto LABEL_63;
      }
    }
  }
LABEL_66:
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  long long v54 = v75;
  if (v75)
  {
    nitro::nitro_function::nitro_function(v54);
  }
}

void sub_192B71D94(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 - 96);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::grid_sampling_kernel_cpu::~grid_sampling_kernel_cpu(Espresso::grid_sampling_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::resample_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  int v5 = *(_DWORD *)(a1 + 296);
  if (*(_DWORD *)(a1 + 292) && (v5 == 1 || *(_DWORD *)(a1 + 300) == 1)) {
    goto LABEL_252;
  }
  if (v5 != 1)
  {
    if (v5 || *(_DWORD *)(a1 + 300) != 1) {
      goto LABEL_7;
    }
LABEL_252:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported coordinates configurations.");
  }
  if (!*(_DWORD *)(a1 + 300)) {
    goto LABEL_252;
  }
LABEL_7:
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v154 = 0;
    uint64_t v155 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v154, *(uint64_t **)a3);
  }
  uint64_t v6 = a4[1];
  if (v6 == *a4)
  {
    uint64_t v152 = 0;
    uint64_t v153 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v152, *a4);
    uint64_t v6 = *a4;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v150, v6 + 2);
  uint64_t v141 = v154;
  uint64_t v122 = v154[5];
  if (v122)
  {
    uint64_t v142 = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    int v7 = v154[3];
    uint64_t v8 = v154[4];
    uint64_t v9 = v152;
    unint64_t v11 = *(int *)(v152 + 8);
    unint64_t v10 = *(int *)(v152 + 12);
    uint64_t v12 = v154[2];
    uint64_t v118 = 2 * (int)v12 * (uint64_t)v7;
    uint64_t v13 = (int)v11 * (uint64_t)(int)v10;
    uint64_t v117 = v13 * v8;
    float v14 = (float)v10;
    float v15 = (float)v10 + -1.0;
    int v139 = v10 - 1;
    int v127 = 2 * v10 - 2;
    int v128 = 2 * v10;
    int v126 = 2 * v10 - 1;
    uint64_t v131 = v7;
    uint64_t v132 = v12;
    uint64_t v143 = v154[2];
    uint64_t v140 = v154[4];
    uint64_t v125 = v150;
    int v121 = v7;
    uint64_t v16 = (int)v12 * (uint64_t)v7;
    uint64_t v120 = 4 * v16 * v8;
    uint64_t v130 = 4 * v12;
    uint64_t v17 = 4 * v16;
    int v149 = *(_DWORD *)(v152 + 12);
    int v144 = v154[4];
    uint64_t v119 = 4 * v13 * v8;
    while (!v121)
    {
LABEL_241:
      ++v123;
      v124 += v120;
      v142 += v119;
      if (v123 == v122) {
        goto LABEL_242;
      }
    }
    uint64_t v134 = 0;
    uint64_t v133 = v124;
    while (!v132)
    {
LABEL_240:
      v133 += v130;
      if (++v134 == v131) {
        goto LABEL_241;
      }
    }
    uint64_t v18 = 0;
    uint64_t v148 = *(void *)(v125 + 24);
    float v19 = (float)(int)v134;
    int v146 = *(_DWORD *)(a1 + 300);
    int v147 = *(_DWORD *)(a1 + 296);
    if (v146 != 1) {
      float v19 = -0.0;
    }
    if (*(unsigned char *)(a1 + 304)) {
      float v20 = v15;
    }
    else {
      float v20 = v14;
    }
    if (*(unsigned char *)(a1 + 304)) {
      float v21 = (float)v11 + -1.0;
    }
    else {
      float v21 = (float)v11;
    }
    if (*(unsigned char *)(a1 + 304)) {
      float v22 = 0.0;
    }
    else {
      float v22 = -0.5;
    }
    int v23 = *(_DWORD *)(a1 + 292);
    double v24 = v22;
    int v25 = *(_DWORD *)(a1 + 284);
    if (v25 == 3) {
      int v26 = 2 * v11;
    }
    else {
      int v26 = 2 * v11 - 2;
    }
    int v27 = *(_DWORD *)(a1 + 280);
    int v28 = v128;
    if (v25 != 3) {
      int v28 = v127;
    }
    int v137 = v28;
    int v138 = v26;
    if (v25 == 3) {
      int v29 = v126;
    }
    else {
      int v29 = v127;
    }
    int v30 = 2 * v11 - 1;
    if (v25 != 3) {
      int v30 = 2 * v11 - 2;
    }
    int v135 = v30;
    int v136 = v29;
    uint64_t v31 = v133;
    int v145 = *(_DWORD *)(a1 + 292);
    while (1)
    {
      uint64_t v32 = v118 * v123 + 2 * (v134 * v132 + v18);
      uint64_t v33 = (4 * v32) | 4;
      float v34 = *(float *)(v148 + v33);
      if (v147 == 1) {
        float v35 = *(float *)(v148 + 4 * v32);
      }
      else {
        float v35 = *(float *)(v148 + v33);
      }
      if (v147 != 1) {
        float v34 = *(float *)(v148 + 4 * v32);
      }
      float v36 = v35 + v19;
      float v37 = v146 == 1 ? (float)(int)v18 : -0.0;
      float v38 = v34 + v37;
      if (v23 == 2)
      {
        float v36 = v22 + (float)(v36 * v20);
        float v38 = v22 + (float)(v38 * v21);
      }
      else if (v23 == 1)
      {
        float v36 = v24 + (float)(v36 + 1.0) * (v20 * 0.5);
        float v38 = v24 + (float)(v38 + 1.0) * (v21 * 0.5);
      }
      int v39 = vcvtms_s32_f32(v36);
      int v40 = vcvtms_s32_f32(v38);
      int v41 = v40 + 1;
      int v42 = v39 + 1;
      int v43 = llroundf(v36);
      int v44 = llroundf(v38);
      if (!v27) {
        break;
      }
      if (!v25) {
        goto LABEL_176;
      }
      if (v25 == 1)
      {
        v39 &= ~(v39 >> 31);
        if (v39 >= v149) {
          int v39 = v139;
        }
        v40 &= ~(v40 >> 31);
        if (v40 >= (int)v11) {
          int v40 = v11 - 1;
        }
        if ((v41 & ~(v41 >> 31)) >= (int)v11) {
          int v41 = v11 - 1;
        }
        else {
          v41 &= ~(v41 >> 31);
        }
        if ((v42 & ~(v42 >> 31)) >= v149) {
          int v42 = v139;
        }
        else {
          v42 &= ~(v42 >> 31);
        }
        goto LABEL_71;
      }
      if (v40 < 0 && v25 == 3) {
        int v47 = v40 + 1;
      }
      else {
        int v47 = v40;
      }
      if (v47 < 0) {
        int v47 = -v47;
      }
      int v48 = v47 % v138;
      BOOL v50 = v39 < 0 || v149 <= v39;
      if (v39 < 0 && v25 == 3) {
        int v52 = v39 + 1;
      }
      else {
        int v52 = v39;
      }
      if (v52 < 0) {
        int v52 = -v52;
      }
      int v53 = v52 % v137;
      if (v136 - v53 < v53) {
        int v53 = v136 - v53;
      }
      if (v50) {
        int v54 = v53;
      }
      else {
        int v54 = v39;
      }
      if (v135 - v48 < v48) {
        int v48 = v135 - v48;
      }
      if ((int)v11 > v40 && v40 >= 0) {
        int v48 = v40;
      }
      if (v40 < -1 && v25 == 3) {
        int v57 = v40 + 2;
      }
      else {
        int v57 = v40 + 1;
      }
      if (v57 < 0) {
        int v57 = -v57;
      }
      int v58 = v57 % v138;
      if (v39 < 0 && v25 == 3) {
        int v60 = v39 + 1;
      }
      else {
        int v60 = v39;
      }
      if (v60 < 0) {
        int v60 = -v60;
      }
      int v61 = v60 % v137;
      if (v136 - v61 < v61) {
        int v61 = v136 - v61;
      }
      if (!v50) {
        int v61 = v39;
      }
      BOOL v63 = v40 < -1 || v41 >= (int)v11;
      int v64 = v135 - v58;
      if (v135 - v58 >= v58) {
        int v64 = v58;
      }
      if (v39 < -1 && v25 == 3) {
        int v66 = v39 + 2;
      }
      else {
        int v66 = v39 + 1;
      }
      if (v66 < 0) {
        int v66 = -v66;
      }
      int v67 = v66 % v137;
      if (v136 - v67 < v67) {
        int v67 = v136 - v67;
      }
      if (v39 >= -1 && v42 < v149) {
        int v42 = v39 + 1;
      }
      else {
        int v42 = v67;
      }
      if (v63) {
        int v41 = v64;
      }
      int v45 = v25;
      int v40 = v48;
      int v39 = v54;
LABEL_178:
      if (v144)
      {
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        float v75 = floorf(v38);
        float v76 = v36 - (float)(int)floorf(v36);
        BOOL v78 = (v39 | v40) >= 0 && v149 > v39;
        BOOL v80 = (v61 | v41) >= 0 && v149 > v61;
        BOOL v81 = (v42 | v40) >= 0;
        BOOL v82 = (v42 | v41) >= 0;
        float v83 = v38 - (float)(int)v75;
        if (v149 <= v42)
        {
          BOOL v81 = 0;
          BOOL v82 = 0;
        }
        char v84 = (int)v11 > v40 && v78;
        int v85 = v39 * v11;
        BOOL v86 = (int)v11 > v40 && v81;
        BOOL v87 = (int)v11 > v41 && v80;
        int v88 = v61 * v11;
        int v89 = v42 * v11;
        BOOL v90 = (int)v11 > v41 && v82;
        uint64_t v91 = v123 * v117 + v41 + v89;
        BOOL v93 = (v43 | v44) < 0 || v149 <= v43 || (int)v11 <= v44;
        uint64_t v94 = 4 * v40;
        int v95 = v43 * v11;
        uint64_t v96 = 4 * v41 + 4 * v88;
        int v98 = !v93 || v45 != 0;
        uint64_t v99 = (float *)(*((void *)v141 + 3) + v31);
        uint64_t v100 = v94 + 4 * v89;
        uint64_t v101 = v94 + 4 * v85;
        uint64_t v102 = 4 * v44 + 4 * v95;
        uint64_t v103 = v142;
        for (uint64_t i = v140; i; --i)
        {
          if (!v27)
          {
            uint64_t v111 = (float *)(a1 + 288);
            if (v98) {
              uint64_t v111 = (float *)(*(void *)(v9 + 24) + v102 + v103);
            }
            float v112 = *v111;
            goto LABEL_238;
          }
          if (v45) {
            char v105 = 1;
          }
          else {
            char v105 = v84;
          }
          if (v105)
          {
            uint64_t v106 = *(void *)(v9 + 24);
            float v107 = *(float *)(v106 + v101 + v103);
            if (v45)
            {
              uint64_t v108 = v74 * v13;
              float v109 = *(float *)(v106 + v96 + v103);
              float v110 = *(float *)(v106 + v100 + v103);
              goto LABEL_235;
            }
          }
          else
          {
            float v107 = *(float *)(a1 + 288);
          }
          uint64_t v113 = (float *)(a1 + 288);
          if (v87) {
            uint64_t v113 = (float *)(*(void *)(v9 + 24) + v96 + v103);
          }
          int v114 = (float *)(a1 + 288);
          if (v86) {
            int v114 = (float *)(*(void *)(v9 + 24) + v100 + v103);
          }
          float v109 = *v113;
          float v110 = *v114;
          if (!v90)
          {
            uint64_t v115 = (float *)(a1 + 288);
            goto LABEL_237;
          }
          uint64_t v106 = *(void *)(v9 + 24);
          uint64_t v108 = v73;
LABEL_235:
          uint64_t v115 = (float *)(v106 + 4 * (v91 + v108));
LABEL_237:
          float v112 = (float)(v76 * (float)((float)(v83 * *v115) + (float)(v110 * (float)(1.0 - v83))))
               + (float)((float)(1.0 - v76) * (float)((float)(v83 * v109) + (float)(v107 * (float)(1.0 - v83))));
LABEL_238:
          ++v74;
          *uint64_t v99 = v112;
          uint64_t v99 = (float *)((char *)v99 + v17);
          v73 += v13;
          v103 += 4 * v13;
        }
      }
      ++v18;
      v31 += 4;
      int v23 = v145;
      if (v18 == v143) {
        goto LABEL_240;
      }
    }
    if (v25)
    {
      if (v25 == 1)
      {
        v43 &= ~(v43 >> 31);
        if (v43 >= v149) {
          int v43 = v139;
        }
        v44 &= ~(v44 >> 31);
        if (v44 >= (int)v11) {
          int v44 = v11 - 1;
        }
LABEL_71:
        int v45 = 1;
LABEL_177:
        int v61 = v39;
        goto LABEL_178;
      }
      if (v44 < 0 && v25 == 3) {
        int v70 = v44 + 1;
      }
      else {
        int v70 = v44;
      }
      if (v70 < 0) {
        int v70 = -v70;
      }
      if (v43 < 0 || v149 <= v43)
      {
        if (v43 < 0 && v25 == 3) {
          ++v43;
        }
        if (v43 < 0) {
          int v43 = -v43;
        }
        v43 %= v137;
        if (v136 - v43 < v43) {
          int v43 = v136 - v43;
        }
      }
      if (v44 < 0 || (int)v11 <= v44)
      {
        int v44 = v70 % v138;
        int v72 = v135 - v70 % v138;
        if (v72 < v44) {
          int v44 = v72;
        }
      }
    }
LABEL_176:
    int v45 = v25;
    goto LABEL_177;
  }
LABEL_242:
  if (v151) {
    nitro::nitro_function::nitro_function(v151);
  }
  if (v153) {
    nitro::nitro_function::nitro_function(v153);
  }
  unsigned int v116 = v155;
  if (v155)
  {
    nitro::nitro_function::nitro_function(v116);
  }
}

void sub_192B7262C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 - 96);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::resample_kernel_cpu::~resample_kernel_cpu(Espresso::resample_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::argsort_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Espresso::abstract_blob_container::shape((char *)&v26, **(void **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v30, (const Espresso::layer_shape *)&v26, 0);
  Espresso::argsort_kernel_cpu::setup((Espresso::argsort_kernel_cpu *)a1, (const Espresso::layer_nd_shape *)&v30);
  if (__p)
  {
    int v29 = __p;
    operator delete(__p);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v26 = 0;
    int v27 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v26, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v30, *(uint64_t **)a3);
  }
  if (*(unsigned char *)(a1 + 284)) {
    int v7 = 1;
  }
  else {
    int v7 = -1;
  }
  unint64_t v8 = *(void *)(a1 + 352);
  if (v8)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(a1 + 336);
    uint64_t v11 = v26;
    uint64_t v12 = v30;
    unint64_t v13 = v10;
    do
    {
      if (v13)
      {
        unint64_t v14 = 0;
        uint64_t v15 = *(void *)(a1 + 288);
        do
        {
          uint64_t v16 = *(void *)(a1 + 296);
          uint64_t v17 = v16 - v15;
          if (v16 != v15)
          {
            uint64_t v18 = 0;
            unint64_t v19 = v17 >> 3;
            if (v19 <= 1) {
              unint64_t v19 = 1;
            }
            do
            {
              *(void *)(v15 + 8 * v18) = v18;
              ++v18;
            }
            while (v19 != v18);
            unint64_t v10 = *(void *)(a1 + 336);
          }
          uint64_t v20 = *(void *)(a1 + 344);
          cblas_scopy((*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 2, (const float *)(*(void *)(v11 + 24) + 4 * (v14 + v20 * v9)), v10, *(float **)(a1 + 312), 1);
          vDSP_vsorti(*(const float **)(a1 + 312), *(vDSP_Length **)(a1 + 288), 0, (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3, v7);
          uint64_t v15 = *(void *)(a1 + 288);
          unint64_t v10 = *(void *)(a1 + 336);
          uint64_t v21 = *(void *)(a1 + 320) - *(void *)(a1 + 312);
          if (v21)
          {
            uint64_t v22 = v21 >> 2;
            int v23 = (float *)(*(void *)(v12 + 24) + 4 * (v14 + v9 * v20));
            double v24 = *(unint64_t **)(a1 + 288);
            do
            {
              unint64_t v25 = *v24++;
              *int v23 = (float)v25;
              v23 += v10;
              --v22;
            }
            while (v22);
          }
          ++v14;
        }
        while (v14 < v10);
        unint64_t v8 = *(void *)(a1 + 352);
        unint64_t v13 = v10;
      }
      ++v9;
    }
    while (v9 < v8);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192B72874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::argsort_kernel_cpu::setup(Espresso::argsort_kernel_cpu *this, const Espresso::layer_nd_shape *a2)
{
  uint64_t v4 = (_OWORD *)((char *)this + 360);
  unint64_t v5 = *((int *)this + 95);
  if (*((_DWORD *)a2 + 5) != v5) {
    goto LABEL_8;
  }
  if (!v5) {
    return;
  }
  if (*(_DWORD *)v4 == *(_DWORD *)a2)
  {
    unint64_t v6 = 0;
    while (v5 - 1 != v6)
    {
      int v7 = *((_DWORD *)this + v6 + 91);
      int v8 = *((_DWORD *)a2 + ++v6);
      if (v7 != v8)
      {
        if (v6 >= v5) {
          return;
        }
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    long long v9 = *(_OWORD *)a2;
    *((void *)this + 47) = *((void *)a2 + 2);
    _OWORD *v4 = v9;
    unint64_t v10 = *((unsigned int *)this + 70);
    if ((v10 & 0x80000000) != 0 || (unint64_t v11 = *((int *)a2 + 5), v11 <= v10)) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("axis should be non-negative and smaller than rank of input");
    }
    *((void *)this + 42) = 1;
    *((void *)this + 44) = 1;
    if (v10)
    {
      uint64_t v12 = 1;
      unint64_t v13 = a2;
      unint64_t v14 = v10;
      do
      {
        uint64_t v15 = *(int *)v13;
        unint64_t v13 = (const Espresso::layer_nd_shape *)((char *)v13 + 4);
        v12 *= v15;
        --v14;
      }
      while (v14);
      *((void *)this + 44) = v12;
    }
    unsigned int v16 = v10 + 1;
    if (v11 <= (int)v10 + 1)
    {
      uint64_t v18 = 1;
    }
    else
    {
      uint64_t v17 = (int *)((char *)a2 + 4 * (int)v16);
      uint64_t v18 = 1;
      do
      {
        uint64_t v19 = *v17++;
        v18 *= v19;
        ++v16;
      }
      while (v11 > v16);
      *((void *)this + 42) = v18;
    }
    unint64_t v20 = *((int *)a2 + v10);
    *((void *)this + 43) = v18 * v20;
    std::vector<unsigned long>::resize((void *)this + 36, v20);
    unint64_t v21 = *((int *)a2 + *((int *)this + 70));
    std::vector<float>::resize((void *)this + 39, v21);
  }
}

void Espresso::argsort_kernel_cpu::~argsort_kernel_cpu(Espresso::argsort_kernel_cpu *this)
{
  *(void *)this = &unk_1EE34D448;
  size_t v2 = (void *)*((void *)this + 39);
  if (v2)
  {
    *((void *)this + 40) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE34D448;
  size_t v2 = (void *)*((void *)this + 39);
  if (v2)
  {
    *((void *)this + 40) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::local_correlation_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v56 = 0;
    int v57 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v56, *(uint64_t **)a3);
  }
  unint64_t v6 = a4[1];
  if (v6 == *a4)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v54, *a4);
    unint64_t v6 = *a4;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v52, v6 + 2);
  uint64_t v46 = *(int *)(v56 + 20);
  if (v46)
  {
    unsigned int v8 = *(_DWORD *)(v56 + 8);
    int v7 = *(_DWORD *)(v56 + 12);
    uint64_t v9 = (int)(v8 * v7);
    uint64_t v41 = *(int *)(v56 + 16);
    uint64_t v42 = *(void *)(v56 + 24);
    uint64_t v40 = (int)v8 * (uint64_t)v7;
    int v47 = *(float **)(v54 + 24);
    uint64_t v48 = 0;
    uint64_t v10 = *(int *)(v54 + 8);
    int v11 = *(_DWORD *)(v54 + 12);
    uint64_t v12 = *(int *)(v54 + 16);
    uint64_t v13 = *(void *)(v52 + 24);
    int v14 = *(_DWORD *)(v52 + 8);
    int v15 = *(_DWORD *)(v52 + 12);
    uint64_t v44 = 4 * v14 * (uint64_t)v15 * *(int *)(v52 + 16);
    int v45 = v7;
    uint64_t v43 = 4 * (int)v10 * (uint64_t)v11 * v12;
    uint64_t v49 = v7;
    uint64_t v50 = (int)v8;
    uint64_t v16 = v8;
    uint64_t v17 = 4 * v11 * (int)v10;
    do
    {
      if (v45 >= 1)
      {
        uint64_t v18 = 0;
        float v51 = v47;
        do
        {
          if ((int)v50 >= 1)
          {
            uint64_t v19 = 0;
            unint64_t v20 = v51;
            int v21 = a1[71];
            if (v21 >= 0) {
              int v22 = a1[71];
            }
            else {
              int v22 = -v21;
            }
            do
            {
              if ((v21 & 0x80000000) == 0)
              {
                int v23 = (float *)(v42 + 4 * v40 * v48 * v41 + 4 * v18 * v50 + 4 * v19);
                int v24 = a1[70];
                if (v24 >= 0) {
                  int v25 = a1[70];
                }
                else {
                  int v25 = -v24;
                }
                int v26 = -v21;
                do
                {
                  if ((v24 & 0x80000000) == 0)
                  {
                    int v27 = a1[72];
                    int v28 = a1[73] * v26 + v18;
                    unsigned int v29 = v19 - v24 * v27;
                    int v30 = -v24;
                    do
                    {
                      int v31 = v19 + v27 * v30;
                      *int v23 = 0.0;
                      if ((v31 & 0x80000000) == 0 && (v28 & 0x80000000) == 0)
                      {
                        BOOL v32 = v31 < v14 && v28 < v15;
                        if (v32 && (int)v12 >= 1)
                        {
                          float v34 = (float *)(v13 + 4 * v14 * v28 + 4 * v29);
                          float v35 = 0.0;
                          float v36 = v20;
                          int v37 = v12;
                          do
                          {
                            float v35 = v35 + (float)(*v36 * *v34);
                            *int v23 = v35;
                            v34 += v15 * v14;
                            float v36 = (float *)((char *)v36 + v17);
                            --v37;
                          }
                          while (v37);
                        }
                      }
                      v23 += v9;
                      v29 += v27;
                      BOOL v38 = v30++ == v25;
                    }
                    while (!v38);
                  }
                  BOOL v38 = v26++ == v22;
                }
                while (!v38);
              }
              ++v19;
              ++v20;
            }
            while (v19 != v16);
          }
          ++v18;
          v51 += v10;
        }
        while (v18 != v49);
      }
      v13 += v44;
      int v47 = (float *)((char *)v47 + v43);
      ++v48;
    }
    while (v48 != v46);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  int v39 = v57;
  if (v57)
  {
    nitro::nitro_function::nitro_function(v39);
  }
}

void sub_192B72DF4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 - 96);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::local_correlation_kernel_cpu::~local_correlation_kernel_cpu(Espresso::local_correlation_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::conv3d_kernel_cpu::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      int v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((void *)a2 + 1) != 1) {
    return 0;
  }
  int v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

void Espresso::conv3d_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string::value_type **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (a6)
  {
    uint64_t v8 = *a6;
    if (*a6)
    {
      uint64_t v9 = (std::__shared_weak_count *)a6[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  if (*(int *)(a1 + 384) <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 384);
  }
  int v11 = *(_DWORD *)(a1 + 316) / v10;
  if (*((char *)a3 + 23) < 0)
  {
    int v15 = (unsigned __int8 *)a3[1];
    if (v15 != (unsigned __int8 *)1)
    {
      if (v15 != (unsigned __int8 *)5) {
        goto LABEL_78;
      }
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        int v14 = *a3;
LABEL_26:
        int v17 = *(_DWORD *)v14;
        int v18 = *((unsigned __int8 *)v14 + 4);
        if (v17 == 828792674 && v18 == 54)
        {
          v30[0] = v8;
          v30[1] = (uint64_t)v9;
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v38, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v30, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
          if (v9) {
            nitro::nitro_function::nitro_function(v9);
          }
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v28 = *(void *)(a1 + 8);
          uint64_t v29 = v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          if (*((char *)a3 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v27, *a3, (std::string::size_type)a3[1]);
          }
          else {
            std::string v27 = *(std::string *)a3;
          }
          if (v39) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::set_parameter_blob<unsigned short,1>();
        }
        goto LABEL_78;
      }
LABEL_52:
      v37[0] = v8;
      v37[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v38, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v37, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v11, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      uint64_t v24 = *(void *)(a1 + 16);
      uint64_t v35 = *(void *)(a1 + 8);
      uint64_t v36 = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      if (*((char *)a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v34, *a3, (std::string::size_type)a3[1]);
      }
      else {
        std::string v34 = *(std::string *)a3;
      }
      void v33[2] = v38;
      v33[3] = v39;
      if (v39) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::set_parameter_blob<unsigned short,5>();
    }
    int v22 = *(unsigned __int8 *)*a3;
    if (v22 == 87)
    {
LABEL_60:
      v40[0] = v8;
      v40[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v40, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v11, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
      int v25 = *(std::__shared_weak_count **)(a1 + 448);
      *(_OWORD *)(a1 + 440) = *(_OWORD *)&src.data;
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }
      if (v9)
      {
        int v26 = v9;
LABEL_77:
        nitro::nitro_function::nitro_function(v26);
        goto LABEL_78;
      }
      goto LABEL_78;
    }
    if (v22 != 98) {
      goto LABEL_78;
    }
  }
  else
  {
    int v12 = *((unsigned __int8 *)a3 + 23);
    if (v12 != 1)
    {
      if (v12 != 5) {
        goto LABEL_78;
      }
      BOOL v13 = *(_DWORD *)a3 == 828792663 && *((unsigned char *)a3 + 4) == 54;
      int v14 = (const std::string::value_type *)a3;
      if (!v13) {
        goto LABEL_26;
      }
      goto LABEL_52;
    }
    int v21 = *(unsigned __int8 *)a3;
    if (v21 != 98)
    {
      if (v21 != 87) {
        goto LABEL_78;
      }
      goto LABEL_60;
    }
  }
  v33[0] = v8;
  v33[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v33, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  vImagePixelCount height = src.height;
  int data = src.data;
  BOOL v32 = (std::__shared_weak_count *)src.height;
  if (src.height) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 392))(a1, &data);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (height)
  {
    int v26 = (std::__shared_weak_count *)height;
    goto LABEL_77;
  }
LABEL_78:
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192B73408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 136);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::conv3d_kernel_cpu::__launch(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v140 = 0;
    uint64_t v141 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v140, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v138 = 0;
    int v139 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v138, *(uint64_t **)a4);
  }
  uint64_t v6 = *((void *)a1 + 55);
  (*(void (**)(uint64_t *__return_ptr, int *))(*(void *)a1 + 416))(&v136, a1);
  uint64_t v94 = v6;
  (*(void (**)(uint64_t *__return_ptr, int *))(*(void *)a1 + 408))(&v134, a1);
  int v7 = a1[96];
  if (v7 <= 1) {
    int v7 = 1;
  }
  int v106 = v7;
  int v8 = *((__int16 *)a1 + 187);
  if (v8 <= 1) {
    int v8 = 1;
  }
  int v127 = v8;
  if (*((__int16 *)a1 + 188) <= 1) {
    int v9 = 1;
  }
  else {
    int v9 = *((__int16 *)a1 + 188);
  }
  int v10 = *((__int16 *)a1 + 189);
  if (v10 <= 1) {
    int v10 = 1;
  }
  int v113 = v10;
  int v114 = v9;
  uint64_t v99 = v138;
  int v11 = *(_DWORD *)(v138 + 20);
  int v12 = a1[79];
  if (v11 == v11 / v12 * v12) {
    int v13 = v11 / v12;
  }
  else {
    int v13 = v11 / v12 + 1;
  }
  int v98 = v13;
  if (v13 >= 1)
  {
    int v14 = 0;
    uint64_t v97 = v140;
    int v15 = (uint64_t *)(v140 + 8);
    uint64_t v16 = (uint64_t *)(v138 + 8);
    int v95 = (uint64_t *)(v140 + 8);
    uint64_t v96 = (uint64_t *)(v138 + 8);
    uint64_t v103 = a1;
    while (1)
    {
      uint64_t v17 = 0;
      int v18 = a1[78];
      uint64_t v142 = *v15;
      LODWORD(v143) = *((_DWORD *)v15 + 2);
      int v19 = 1;
      do
      {
        v19 *= *(_DWORD *)((char *)v15 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      uint64_t v20 = *(void *)(v97 + 24);
      int v21 = (std::__shared_weak_count *)operator new(0x60uLL);
      uint64_t v22 = 0;
      v21->__shared_owners_ = 0;
      v21->__shared_weak_owners_ = 0;
      v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
      *(_OWORD *)&v21[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v21[3].__shared_owners_ = 0u;
      uint64_t v23 = v142;
      v21[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BEF0;
      v21[1].__shared_owners_ = v23;
      LODWORD(v21[1].__shared_weak_owners_) = v143;
      v21[2].__vftable = (std::__shared_weak_count_vtbl *)(v20 + 4 * v18 * v14 * v19);
      LOBYTE(v21[2].__shared_owners_) = 0;
      int v24 = a1[79];
      uint64_t v142 = *v16;
      LODWORD(v143) = *((_DWORD *)v16 + 2);
      int v25 = 1;
      do
      {
        v25 *= *(_DWORD *)((char *)v16 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      uint64_t v26 = *(void *)(v99 + 24);
      std::string v27 = operator new(0x60uLL);
      v27[1] = 0;
      void v27[2] = 0;
      *std::string v27 = &unk_1EE389990;
      *((_OWORD *)v27 + 4) = 0u;
      *((_OWORD *)v27 + 5) = 0u;
      uint64_t v28 = v142;
      v27[3] = &unk_1EE36BEF0;
      v27[4] = v28;
      LODWORD(v28) = v143;
      *((_DWORD *)v27 + 10) = v143;
      v27[6] = v26 + 4 * v24 * v14 * v25;
      *((unsigned char *)v27 + 56) = 0;
      uint64_t v102 = v27;
      int v29 = v28;
      uint64_t shared_owners_low = LODWORD(v21[1].__shared_owners_);
      uint64_t shared_owners_high = HIDWORD(v21[1].__shared_owners_);
      int shared_weak_owners = v21[1].__shared_weak_owners_;
      int v31 = a1[82];
      int v32 = a1[81];
      int v33 = a1[80];
      int v34 = *((__int16 *)a1 + 184);
      int v35 = *((__int16 *)a1 + 174);
      int v120 = *((_DWORD *)v27 + 9);
      int v121 = *((_DWORD *)v27 + 8);
      int v115 = v29;
      int v118 = *((__int16 *)a1 + 186);
      int v119 = *((__int16 *)a1 + 185);
      int v100 = v14;
      if (v35 == 4) {
        break;
      }
      if (v35 == 2)
      {
        unsigned int v52 = 0;
        unsigned int v116 = 0;
        unsigned int v117 = 0;
      }
      else
      {
        if (v35 == 1) {
          break;
        }
        unsigned int v52 = *((__int16 *)a1 + 178);
        unsigned int v116 = *((__int16 *)a1 + 182);
        unsigned int v117 = *((__int16 *)a1 + 180);
      }
      int v37 = HIDWORD(v21[1].__shared_owners_);
      int v40 = v21[1].__shared_weak_owners_;
LABEL_41:
      int v112 = (v24 - 1) / v106 + 1;
      int v55 = v31 * v112;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v142, shared_owners_low, v37, v40, v31 * v112 * v33 * v32);
      uint64_t v101 = v143;
      if (v136)
      {
        int v56 = 0;
        int v133 = shared_owners_high * shared_owners_low;
        int __ldb = shared_owners_high * shared_owners_low * shared_weak_owners;
        __ldCGFloat a = v55 * v32 * v33;
        uint64_t v104 = v142;
        int v128 = -v52;
        float v110 = v21;
        do
        {
          int v111 = v56;
          unsigned int v108 = HIDWORD(v21[1].__shared_owners_);
          unsigned int shared_owners = v21[1].__shared_owners_;
          unsigned int v107 = v21[1].__shared_weak_owners_;
          float __B = *(const float **)(v104 + 24);
          int v125 = a1[81];
          int v126 = a1[80];
          int v124 = a1[82];
          int v122 = v125 * v126 * v112 * v124;
          int v58 = shared_owners_high;
          int v59 = shared_weak_owners;
          if (v122 >= 1)
          {
            uint64_t v129 = 0;
            int v130 = 0;
            uint64_t v60 = v102[6] + 4 * v56 * v112 * *((_DWORD *)v102 + 8) * *((_DWORD *)v102 + 9) * *((_DWORD *)v102 + 10);
            do
            {
              if (v59 >= 1)
              {
                int v61 = 0;
                int v62 = HIDWORD(v129);
                do
                {
                  if (v58 >= 1)
                  {
                    uint64_t v63 = shared_owners_high;
                    int v64 = v62;
                    do
                    {
                      if ((int)shared_owners_low >= 1) {
                        bzero((void *)&__B[v64], 4 * shared_owners_low);
                      }
                      v64 += shared_owners_low;
                      --v63;
                    }
                    while (v63);
                  }
                  ++v61;
                  v62 += v133;
                  int v59 = shared_weak_owners;
                  int v58 = shared_owners_high;
                }
                while (v61 != shared_weak_owners);
              }
              int v65 = 0;
              int v66 = 0;
              int v67 = v130 / v126 % v125 * v114;
              int v68 = v67 - v117;
              int v69 = v130 / (v125 * v126) % v124 * v113;
              int v70 = v69 - v116;
              while ((shared_weak_owners & ~(shared_weak_owners >> 31)) != v66)
              {
                int v71 = v66 + 1;
                if (v70 < 0) {
                  int v65 = v66 + 1;
                }
                v70 += v118;
                ++v66;
                if (v70 - v118 >= v115)
                {
                  int v72 = v71 - 1;
                  goto LABEL_60;
                }
              }
              int v72 = v59;
LABEL_60:
              int v73 = 0;
              int v74 = 0;
              while ((shared_owners_high & ~((int)shared_owners_high >> 31)) != v74)
              {
                int v75 = v74 + 1;
                if (v68 < 0) {
                  int v73 = v74 + 1;
                }
                v68 += v119;
                ++v74;
                if (v68 - v119 >= v120)
                {
                  int v76 = v75 - 1;
                  goto LABEL_67;
                }
              }
              int v76 = v58;
LABEL_67:
              int v77 = 0;
              int v78 = 0;
              int v79 = v128 + v127 * (v130 % v126);
              while ((shared_owners_low & ~((int)shared_owners_low >> 31)) != v78)
              {
                int v80 = v78 + 1;
                if (v79 < 0) {
                  int v77 = v78 + 1;
                }
                v79 += v34;
                ++v78;
                if (v79 - v34 >= v121)
                {
                  int v81 = v80 - 1;
                  goto LABEL_74;
                }
              }
              int v81 = shared_owners_low;
LABEL_74:
              if (v65 < v72)
              {
                int v82 = shared_owners_low * (v73 + v58 * (v65 + v129));
                int v83 = v128
                    + v121
                    * (v120 * (v130 / v124 / v125 / v126 * v115 - v116 + v118 * v65 + v69) - v117 + v119 * v73 + v67)
                    + v34 * v77
                    + v127 * (v130 % v126);
                do
                {
                  int v84 = v83;
                  int v85 = v82;
                  uint64_t v86 = v73;
                  if (v73 < v76)
                  {
                    do
                    {
                      if (v77 < v81)
                      {
                        BOOL v87 = (float *)&__B[v77 + (uint64_t)v85];
                        int v88 = v84;
                        uint64_t v89 = v81 - (uint64_t)v77;
                        do
                        {
                          *v87++ = *(float *)(v60 + 4 * v88);
                          v88 += v34;
                          --v89;
                        }
                        while (v89);
                      }
                      ++v86;
                      v85 += shared_owners_low;
                      v84 += v121 * v119;
                    }
                    while (v86 != v76);
                  }
                  ++v65;
                  v82 += v133;
                  v83 += v120 * v121 * v118;
                }
                while (v65 != v72);
              }
              LODWORD(v129) = v129 + v59;
              HIDWORD(v129) += __ldb;
              ++v130;
            }
            while (v130 != v122);
          }
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, (v18 - 1) / v106 + 1, __ldb, __lda, 1.0, (const float *)(*(void *)(v136 + 32) + 4 * v111 * ((v18 - 1) / v106 + 1) * v112 * v126 * v125 * v124), __lda, __B, __ldb, 0.0, (float *)v110[2].__vftable + (int)(shared_owners * v111 * ((v18 - 1) / v106 + 1) * v108 * v107), __ldb);
          int v56 = v111 + 1;
          a1 = v103;
          int v21 = v110;
        }
        while (v111 + 1 != v106);
      }
      uint64_t v16 = v96;
      if (v134 && a1[78] >= 1)
      {
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        vDSP_Length v92 = SHIDWORD(v21[1].__shared_owners_)
            * (uint64_t)SLODWORD(v21[1].__shared_owners_)
            * SLODWORD(v21[1].__shared_weak_owners_);
        do
        {
          LODWORD(v142) = 0;
          LODWORD(v142) = *(_DWORD *)(*(void *)(v134 + 16) + 4 * v91);
          vDSP_vsadd((const float *)((char *)v21[2].__vftable + v90), 1, (const float *)&v142, (float *)((char *)v21[2].__vftable + v90), 1, v92);
          ++v91;
          v90 += 4 * v92;
        }
        while (v91 < a1[78]);
      }
      if (v101) {
        nitro::nitro_function::nitro_function(v101);
      }
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v102);
      nitro::nitro_function::nitro_function(v21);
      int v14 = v100 + 1;
      int v15 = v95;
      if (v100 + 1 == v98) {
        goto LABEL_91;
      }
    }
    int v36 = *((unsigned __int16 *)a1 + 174);
    int v37 = HIDWORD(v21[1].__shared_owners_);
    int v38 = (v32 - 1) * v114 - *((_DWORD *)v27 + 9) + (shared_owners_high - 1) * *((__int16 *)a1 + 185) + 1;
    int v39 = (v33 - 1) * v127 - *((_DWORD *)v27 + 8) + (shared_owners_low - 1) * v34 + 1;
    int v40 = v21[1].__shared_weak_owners_;
    int v41 = (v31 - 1) * v113 - v29 + (shared_weak_owners - 1) * *((__int16 *)a1 + 186) + 1;
    unsigned int v42 = v38 & ~(v38 >> 31);
    unsigned int v43 = v39 & ~(v39 >> 31);
    unsigned int v44 = v41 & ~(v41 >> 31);
    unsigned int v45 = v43 >> 1;
    unsigned int v46 = v42 >> 1;
    unsigned int v47 = v44 >> 1;
    unsigned int v48 = v44 - (v44 >> 1);
    unsigned int v49 = v42 - (v42 >> 1);
    unsigned int v50 = v43 - (v43 >> 1);
    BOOL v51 = v36 == 1;
    if (v36 == 1) {
      unsigned int v52 = v45;
    }
    else {
      unsigned int v52 = v50;
    }
    if (v36 == 1) {
      unsigned int v53 = v46;
    }
    else {
      unsigned int v53 = v49;
    }
    unsigned int v117 = v53;
    if (v51) {
      unsigned int v54 = v47;
    }
    else {
      unsigned int v54 = v48;
    }
    unsigned int v116 = v54;
    goto LABEL_41;
  }
LABEL_91:
  if (v135) {
    nitro::nitro_function::nitro_function(v135);
  }
  if (v137) {
    nitro::nitro_function::nitro_function(v137);
  }
  if (!v94)
  {
    BOOL v93 = (std::__shared_weak_count *)*((void *)a1 + 56);
    *((void *)a1 + 55) = 0;
    *((void *)a1 + 56) = 0;
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
  }
  if (v139) {
    nitro::nitro_function::nitro_function(v139);
  }
  if (v141) {
    nitro::nitro_function::nitro_function(v141);
  }
}

void sub_192B73EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v30 = *(std::__shared_weak_count **)(v28 - 120);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::conv3d_kernel_cpu::~conv3d_kernel_cpu(Espresso::conv3d_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3578B8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3578B8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

void Espresso::slice_update_kernel_cpu::__launch(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  int v7 = a4[1];
  if (v7 == *a4)
  {
    uint64_t v65 = 0;
    int v66 = 0;
    int v8 = v7;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v65, *a4);
    int v7 = *a4;
    int v8 = a4[1];
  }
  if ((unint64_t)((char *)v8 - (char *)v7) <= 0x10)
  {
    uint64_t v63 = 0;
    int v64 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v63, v7 + 2);
  }
  if (a1[74] == 1)
  {
    uint64_t v9 = (char *)a4[1] - (char *)*a4;
    if (v9 != 48) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("slice_update_kernel_cpu expects 3 arguments when slice_param.mode == SLICE_STATIC_SIZE_DYNAMIC_START. Got %zu", v9 >> 4);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v56, *a4 + 4);
    uint64_t v10 = (int)**(float **)(v56.__r_.__value_.__r.__words[0] + 24);
    if (v56.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v56.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    uint64_t v10 = a1[71];
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v61 = 0;
    int v62 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v61, *(uint64_t **)a3);
  }
  Espresso::abstract_blob_container::shape((char *)&v56, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v59, (const Espresso::layer_shape *)&v56, 0);
  if (__p)
  {
    int v58 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&v56, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v54, (const Espresso::layer_shape *)&v56, 0);
  if (__p)
  {
    int v58 = __p;
    operator delete(__p);
  }
  if (v55 != v60) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("inputs' ranks do not match");
  }
  int v11 = a1[73];
  if (v11 <= 0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("stride = %d <= 0 is not allowed", a1[73]);
  }
  uint64_t v12 = a1[70];
  int v13 = v55 - 1 - v12;
  uint64_t v50 = v54[v13];
  int v14 = a1;
  if (v55)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v55 - 1;
    int v17 = 1;
    int v18 = 1;
    do
    {
      if (v12 == v15)
      {
        unsigned int v19 = a1[74];
        if (v19 == 1)
        {
          int v20 = a1[75];
        }
        else
        {
          int v23 = a1[72];
          if (v23 <= 0) {
            int v24 = 0;
          }
          else {
            int v24 = v59[v16];
          }
          int v20 = v59[v16] + v23 - (a1[71] + v24);
        }
        int v25 = v54[v16] * v11 - v20;
        if (v11 <= v25 || v25 < 0)
        {
          if (v19 == 1)
          {
            Espresso::layer_nd_shape::repr(&v56, (uint64_t)v59);
            int v45 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
            std::string::size_type v46 = v56.__r_.__value_.__r.__words[0];
            Espresso::layer_nd_shape::repr(&v53, (uint64_t)v54);
            if (v45 >= 0) {
              unsigned int v47 = &v56;
            }
            else {
              unsigned int v47 = (std::string *)v46;
            }
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v48 = &v53;
            }
            else {
              unsigned int v48 = (std::string *)v53.__r_.__value_.__r.__words[0];
            }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,int &,int &,int &,int &>("invalide input shapes: %s, %s for mode = SLICE_STATIC_SIZE_DYNAMIC_START, stride = %d, start = %d, static_std::string::size_type size = %d, axis = %d", (uint64_t)v47, (uint64_t)v48, a1[73], v10, a1[75], a1[70]);
          }
          if (!v19)
          {
            Espresso::layer_nd_shape::repr(&v56, (uint64_t)v59);
            int v41 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
            std::string::size_type v42 = v56.__r_.__value_.__r.__words[0];
            Espresso::layer_nd_shape::repr(&v53, (uint64_t)v54);
            if (v41 >= 0) {
              unsigned int v43 = &v56;
            }
            else {
              unsigned int v43 = (std::string *)v42;
            }
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v44 = &v53;
            }
            else {
              unsigned int v44 = (std::string *)v53.__r_.__value_.__r.__words[0];
            }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,int &,int &,int &,int &>("invalide input shapes: %s, %s for mode = SLICE_STATIC, stride = %d, start = %d, std::vector<int>::pointer end = %d, axis = %d", (uint64_t)v43, (uint64_t)v44, a1[73], a1[71], a1[72], a1[70]);
          }
        }
      }
      else
      {
        int v21 = v54[v16];
        int v22 = v59[v16];
        if (v21 != v22) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int const&,int const&>(v15, v12, v21, v22);
        }
        if (v15 < (int)v12) {
          v17 *= v21;
        }
        else {
          v18 *= v21;
        }
      }
      ++v15;
      --v16;
    }
    while (v55 != v15);
  }
  else
  {
    int v18 = 1;
    int v17 = 1;
  }
  uint64_t v26 = 0;
  int v27 = v59[v13];
  uint64_t v28 = v61;
  uint64_t v29 = *(int *)(v65 + 8);
  do
  {
    v29 *= *(int *)(v65 + 12 + v26);
    v26 += 4;
  }
  while (v26 != 12);
  memcpy(*(void **)(v61 + 24), *(const void **)(v65 + 24), 4 * v29);
  if (v18 >= 1)
  {
    int v30 = 0;
    int v31 = v27 * v17;
    int v32 = v17 * v11;
    int v33 = (Espresso *)(*(void *)(v28 + 24) + 4 * (int)v10 * v17);
    vDSP_Length v34 = v17;
    vDSP_Length __N = v17 * (int)v50;
    uint64_t v35 = 4 * v17;
    int v36 = *(float **)(v63 + 24);
    uint64_t v51 = 4 * v31;
    uint64_t v37 = 4 * v32;
    int v52 = v18;
    do
    {
      if (a1[73] == 1)
      {
        Espresso::update_slice_func(v33, v36, (float *)a1[76], __N);
      }
      else
      {
        int v38 = v33;
        int v39 = v36;
        uint64_t v40 = v50;
        if ((int)v50 >= 1)
        {
          do
          {
            Espresso::update_slice_func(v38, v39, (float *)v14[76], v34);
            int v39 = (float *)((char *)v39 + v35);
            int v38 = (Espresso *)((char *)v38 + v37);
            --v40;
          }
          while (v40);
        }
      }
      v36 += __N;
      int v33 = (Espresso *)((char *)v33 + v51);
      ++v30;
      a1 = v14;
    }
    while (v30 != v52);
  }
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
}

void sub_192B74504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 112);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  int v36 = *(std::__shared_weak_count **)(v33 - 96);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,int &,int &,int &,int &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int const&,int const&>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("input shapes at axis %d != p.axis = %d do not match %d vs %d", a1, a2, a3, a4);
}

void Espresso::update_slice_func(Espresso *this, float *__B, float *a3, vDSP_Length __N)
{
  switch((int)a3)
  {
    case 0:
      memcpy(this, __B, 4 * __N);
      break;
    case 1:
      vDSP_vadd((const float *)this, 1, __B, 1, (float *)this, 1, __N);
      break;
    case 2:
      vDSP_vsub(__B, 1, (const float *)this, 1, (float *)this, 1, __N);
      break;
    case 3:
      vDSP_vmul((const float *)this, 1, __B, 1, (float *)this, 1, __N);
      break;
    case 4:
      vDSP_vdiv(__B, 1, (const float *)this, 1, (float *)this, 1, __N);
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("unsupported update operation %d", (uint64_t)a3);
  }
}

void Espresso::slice_update_kernel_cpu::~slice_update_kernel_cpu(Espresso::slice_update_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::static_quantize_kernel_cpu::blob_options(int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  if (a2 || !a1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    unint64_t v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    void *v5 = &unk_1EE388F48;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v5[3] = &unk_1EE3661F8;
    *((_DWORD *)v5 + 12) = 1065353216;
    v5[7] = 0x1FFFFFFFFLL;
    v5[12] = 0;
    v5[13] = 0;
    v5[8] = 0;
    v5[9] = 0;
    *((unsigned char *)v5 + 88) = 0;
    v5[10] = 0;
    *a3 = v5 + 3;
    a3[1] = v5;
    *((unsigned char *)v5 + 32) = 1;
    *((_DWORD *)v5 + 9) = 2;
  }
}

void Espresso::static_quantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::abstract_blob_container::shape((char *)&v29, **a3);
  char v7 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, v30)));
  if (v31 == -1) {
    BOOL v8 = v30.i32[3] != 1;
  }
  else {
    BOOL v8 = v31 == 5;
  }
  if (v30.i32[3]) {
    BOOL v8 = 0;
  }
  if ((v7 & 1) == 0 && v29 >= 1 && !v8)
  {
    Espresso::get_cpu_blob_8((uint64_t)*a3, &v27);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v25, *a4);
    uint64_t v9 = 0;
    float __C = 127.1;
    float __B = -127.1;
    uint64_t v10 = v25;
    int v11 = *(_DWORD *)(v25 + 8);
    do
    {
      v11 *= *(_DWORD *)(v25 + 12 + v9);
      v9 += 4;
    }
    while (v9 != 12);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,void>(&v21, v11);
    uint64_t v12 = 0;
    uint64_t v13 = v21;
    vDSP_Length v14 = *(int *)(v10 + 8);
    do
    {
      v14 *= *(int *)(v10 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    vDSP_vsmul(*(const float **)(v10 + 24), 1, (const float *)(a1 + 284), *(float **)(v21 + 24), 1, v14);
    if (*(float *)(a1 + 288) != 0.0)
    {
      uint64_t v15 = 0;
      vDSP_Length v16 = *(int *)(v10 + 8);
      do
      {
        v16 *= *(int *)(v10 + 12 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      vDSP_vsadd(*(const float **)(v13 + 24), 1, (const float *)(a1 + 288), *(float **)(v13 + 24), 1, v16);
    }
    uint64_t v17 = 0;
    vDSP_Length v18 = *(int *)(v10 + 8);
    do
    {
      v18 *= *(int *)(v10 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    vDSP_vclip(*(const float **)(v13 + 24), 1, &__B, &__C, *(float **)(v13 + 24), 1, v18);
    uint64_t v19 = 0;
    vDSP_Length v20 = *(int *)(v13 + 8);
    do
    {
      v20 *= *(int *)(v13 + 12 + v19);
      v19 += 4;
    }
    while (v19 != 12);
    vDSP_vfixr8(*(const float **)(v13 + 24), 1, *(char **)(v27 + 24), 1, v20);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
}

void sub_192B74A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::static_quantize_kernel_cpu::~static_quantize_kernel_cpu(Espresso::static_quantize_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

unsigned char *Espresso::static_dequantize_kernel_cpu::blob_options@<X0>(char a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  float32x4_t result = getenv("ESPRESSO_USE_I32_OUTPUT");
  if (a2 || (a1 & 1) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    BOOL v8 = result;
    float32x4_t result = operator new(0x70uLL);
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    *(void *)float32x4_t result = &unk_1EE388F48;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((void *)result + 3) = &unk_1EE3661F8;
    *((_DWORD *)result + 12) = 1065353216;
    *((void *)result + 7) = 0x1FFFFFFFFLL;
    *((void *)result + 12) = 0;
    *((void *)result + 13) = 0;
    *((void *)result + 8) = 0;
    *((void *)result + 9) = 0;
    result[88] = 0;
    *((void *)result + 10) = 0;
    *a3 = result + 24;
    a3[1] = result;
    result[32] = 1;
    if (v8)
    {
      if (*v8 != 49) {
        *((_DWORD *)result + 9) = 3;
      }
    }
  }
  return result;
}

void Espresso::static_dequantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  Espresso::abstract_blob_container::shape((char *)&v66, **a3);
  char v7 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, v67)));
  if (v68 == -1) {
    BOOL v8 = v67.i32[3] != 1;
  }
  else {
    BOOL v8 = v68 == 5;
  }
  if (v67.i32[3]) {
    BOOL v8 = 0;
  }
  if ((v7 & 1) == 0 && v66 >= 1 && !v8)
  {
    if (*(void *)(a4 + 8) == *(void *)a4)
    {
      uint64_t v64 = 0;
      uint64_t v65 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v64, *(uint64_t **)a4);
      if (*(void *)(a4 + 8) != *(void *)a4)
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v62, *(uint64_t **)a4);
        uint64_t v9 = v62;
        goto LABEL_14;
      }
    }
    uint64_t v9 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
LABEL_14:
    uint64_t v10 = v64;
    if (!(v64 | v9)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("static_dequantize_kernel_cpu: Atleast one bottom expected");
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v60, *a3);
    uint64_t v11 = v60;
    uint64_t v12 = *(float **)(v60 + 24);
    vDSP_Length v13 = *(int *)(v60 + 8);
    uint64_t v14 = 0;
    if (v10)
    {
      do
      {
        v13 *= *(int *)(v60 + 12 + v14);
        v14 += 4;
      }
      while (v14 != 12);
      vDSP_vflt32(*(const int **)(v10 + 24), 1, *(float **)(v60 + 24), 1, v13);
      uint64_t v15 = 0;
      vDSP_Length v16 = *(const float **)(v11 + 24);
      vDSP_Length v13 = *(int *)(v11 + 8);
      do
      {
        v13 *= *(int *)(v11 + 12 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      uint64_t v12 = *(float **)(v11 + 24);
    }
    else
    {
      vDSP_Length v16 = *(const float **)(v9 + 24);
      do
      {
        v13 *= *(int *)(v60 + 12 + v14);
        v14 += 4;
      }
      while (v14 != 12);
    }
    vDSP_vsmul(v16, 1, (const float *)(a1 + 308), v12, 1, v13);
    if (*(float *)(a1 + 312) != 0.0)
    {
      uint64_t v17 = 0;
      vDSP_Length v18 = *(int *)(v11 + 8);
      do
      {
        v18 *= *(int *)(v11 + 12 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      vDSP_vsadd(*(const float **)(v11 + 24), 1, (const float *)(a1 + 312), *(float **)(v11 + 24), 1, v18);
    }
    Espresso::abstract_blob_container::shape((char *)v51, **a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v54, (const Espresso::layer_shape *)v51, 0);
    if (__p)
    {
      std::string v53 = __p;
      operator delete(__p);
    }
    if (v59 > 3)
    {
      if (v59 == 4)
      {
        uint64_t v19 = v54;
        uint64_t v20 = v56 * (uint64_t)v57 * v55;
      }
      else
      {
        if (v59 != 5)
        {
          uint64_t v20 = 0;
          uint64_t v19 = 0;
LABEL_45:
          memset(&v51[1], 0, 24);
          int v23 = *(_DWORD *)(a1 + 332);
          uint64_t v37 = 0x100000001;
          int v38 = 1;
          uint64_t v24 = *(void *)(a1 + 324);
          uint64_t v39 = *(void *)(a1 + 316);
          uint64_t v40 = v24;
          int v41 = v23;
          uint64_t v42 = 0;
          char v43 = 0;
          uint64_t v44 = 0;
          int v45 = -1;
          __asm { FMOV            V1.2S, #1.0 }
          uint64_t v46 = _D1;
          uint64_t v47 = 0;
          long long v49 = 0u;
          long long v48 = v51[0];
          uint64_t v50 = 0;
          int32x4_t v30 = (std::__shared_weak_count *)v61;
          v36[0] = v11;
          v36[1] = v61;
          if (v61) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = 0;
          int v32 = *(_DWORD *)(v11 + 8);
          do
          {
            v32 *= *(_DWORD *)(v11 + 12 + v31);
            v31 += 4;
          }
          while (v31 != 12);
          uint64_t v33 = *(void *)(a1 + 336);
          vDSP_Length v34 = *(std::__shared_weak_count **)(a1 + 344);
          v35[0] = v33;
          v35[1] = v34;
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)&v37, v36, v32, (uint64_t)v35, v20, v19);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          if (v30)
          {
            nitro::nitro_function::nitro_function(v30);
            nitro::nitro_function::nitro_function(v30);
          }
          if (v63) {
            nitro::nitro_function::nitro_function(v63);
          }
          if (v65) {
            nitro::nitro_function::nitro_function(v65);
          }
          goto LABEL_59;
        }
        uint64_t v19 = v55 * (uint64_t)v54;
        uint64_t v20 = v57 * (uint64_t)v58 * v56;
      }
    }
    else
    {
      switch(v59)
      {
        case 1u:
          uint64_t v19 = 1;
          if (v59) {
            goto LABEL_38;
          }
          goto LABEL_40;
        case 2u:
          uint64_t v19 = v54;
          if (!v59) {
            goto LABEL_40;
          }
          goto LABEL_38;
        case 3u:
          uint64_t v19 = v55 * (uint64_t)v54;
          if (!v59) {
            goto LABEL_40;
          }
          goto LABEL_38;
        case 4u:
          uint64_t v19 = v55 * (uint64_t)v54 * v56;
          if (!v59) {
            goto LABEL_40;
          }
          goto LABEL_38;
        case 5u:
          uint64_t v19 = v55 * (uint64_t)v54 * v56 * v57;
          if (v59) {
            goto LABEL_38;
          }
          goto LABEL_40;
        default:
          uint64_t v19 = 0;
          if (v59) {
LABEL_38:
          }
            uint64_t v20 = *(&v54 + (int)v59 - 1);
          else {
LABEL_40:
          }
            uint64_t v20 = 0;
          break;
      }
    }
    if (*(void *)(a1 + 336) && v19)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v19;
      do
      {
        vDSP_vadd((const float *)(*(void *)(v11 + 24) + v21), 1, *(const float **)(*(void *)(a1 + 336) + 16), 1, (float *)(*(void *)(v11 + 24) + v21), 1, v20);
        v21 += 4 * v20;
        --v22;
      }
      while (v22);
    }
    goto LABEL_45;
  }
LABEL_59:
  if (v69)
  {
    int v70 = v69;
    operator delete(v69);
  }
}

void sub_192B75030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  int v38 = *(std::__shared_weak_count **)(v36 - 136);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  uint64_t v39 = *(void **)(v36 - 88);
  if (v39)
  {
    *(void *)(v36 - 80) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::static_dequantize_kernel_cpu::~static_dequantize_kernel_cpu(Espresso::static_dequantize_kernel_cpu *this)
{
  Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::fused_convolution_grad_kernel_cpu::__launch()
{
}

void Espresso::fused_convolution_grad_kernel_cpu::~fused_convolution_grad_kernel_cpu(Espresso::fused_convolution_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::fused_inner_product_grad_kernel_cpu::__launch()
{
}

void Espresso::fused_inner_product_grad_kernel_cpu::~fused_inner_product_grad_kernel_cpu(Espresso::fused_inner_product_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::get_weights@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 448);
  *a2 = *(void *)(result + 440);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::get_biases@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 432);
  *a2 = *(void *)(result + 424);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = v3;
  *(void *)(a1 + 448) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v5;
  *(void *)(a1 + 432) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 304) = *a2 != 0;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 304)) {
    return 2;
  }
  else {
    return 1;
  }
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::get_weights_blob(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 53);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,5>>>((uint64_t *)&v4, a1 + 1, a1 + 55);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

BOOL Espresso::deconv3d_kernel_cpu::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      int v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((void *)a2 + 1) != 1) {
    return 0;
  }
  int v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

void Espresso::deconv3d_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string::value_type **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (a6)
  {
    uint64_t v8 = *a6;
    if (*a6)
    {
      uint64_t v9 = (std::__shared_weak_count *)a6[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  int v10 = *(_DWORD *)(a1 + 312);
  int v11 = *(_DWORD *)(a1 + 384);
  if (v11 <= 1) {
    int v11 = 1;
  }
  int v12 = v10 / v11;
  if (*((char *)a3 + 23) < 0)
  {
    vDSP_Length v16 = (unsigned __int8 *)a3[1];
    if (v16 != (unsigned __int8 *)1)
    {
      if (v16 != (unsigned __int8 *)5) {
        goto LABEL_77;
      }
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        uint64_t v15 = *a3;
LABEL_25:
        int v18 = *(_DWORD *)v15;
        int v19 = *((unsigned __int8 *)v15 + 4);
        if (v18 == 828792674 && v19 == 54)
        {
          v31[0] = v8;
          v31[1] = (uint64_t)v9;
          if (v9)
          {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
            int v10 = *(_DWORD *)(a1 + 312);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v39, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v31, v10, (a4 & 0x3F) == 0);
          if (v9) {
            nitro::nitro_function::nitro_function(v9);
          }
          uint64_t v21 = *(void *)(a1 + 16);
          uint64_t v29 = *(void *)(a1 + 8);
          uint64_t v30 = v21;
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          if (*((char *)a3 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v28, *a3, (std::string::size_type)a3[1]);
          }
          else {
            std::string v28 = *(std::string *)a3;
          }
          if (v40) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::set_parameter_blob<unsigned short,1>();
        }
        goto LABEL_77;
      }
LABEL_51:
      v38[0] = v8;
      v38[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v39, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v38, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v12, *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v36 = *(void *)(a1 + 8);
      uint64_t v37 = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      if (*((char *)a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v35, *a3, (std::string::size_type)a3[1]);
      }
      else {
        std::string v35 = *(std::string *)a3;
      }
      v34[2] = v39;
      v34[3] = v40;
      if (v40) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::set_parameter_blob<unsigned short,5>();
    }
    int v23 = *(unsigned __int8 *)*a3;
    if (v23 == 87)
    {
LABEL_59:
      v41[0] = v8;
      v41[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v41, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), v12, *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
      uint64_t v26 = *(std::__shared_weak_count **)(a1 + 448);
      *(_OWORD *)(a1 + 440) = *(_OWORD *)&src.data;
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      if (v9)
      {
        uint64_t v27 = v9;
LABEL_76:
        nitro::nitro_function::nitro_function(v27);
        goto LABEL_77;
      }
      goto LABEL_77;
    }
    if (v23 != 98) {
      goto LABEL_77;
    }
  }
  else
  {
    int v13 = *((unsigned __int8 *)a3 + 23);
    if (v13 != 1)
    {
      if (v13 != 5) {
        goto LABEL_77;
      }
      BOOL v14 = *(_DWORD *)a3 == 828792663 && *((unsigned char *)a3 + 4) == 54;
      uint64_t v15 = (const std::string::value_type *)a3;
      if (!v14) {
        goto LABEL_25;
      }
      goto LABEL_51;
    }
    int v22 = *(unsigned __int8 *)a3;
    if (v22 != 98)
    {
      if (v22 != 87) {
        goto LABEL_77;
      }
      goto LABEL_59;
    }
  }
  v34[0] = v8;
  v34[1] = (uint64_t)v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    int v10 = *(_DWORD *)(a1 + 312);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v34, v10, (a4 & 0x3F) == 0);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  vImagePixelCount height = src.height;
  int data = src.data;
  uint64_t v33 = (std::__shared_weak_count *)src.height;
  if (src.height) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 392))(a1, &data);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (height)
  {
    uint64_t v27 = (std::__shared_weak_count *)height;
    goto LABEL_76;
  }
LABEL_77:
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192B758AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 136);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_deconv3d_kernel>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
  int v3 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::deconv3d_kernel_cpu::__launch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v127 = 0;
    int v128 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v127, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v125 = 0;
    int v126 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v125, *(uint64_t **)a4);
  }
  uint64_t v6 = a1[55];
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 416))(&v123, a1);
  uint64_t v95 = v6;
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 408))(&v121, a1);
  uint64_t v8 = (int32x2_t *)((char *)a1 + 324);
  int v9 = *((_DWORD *)a1 + 96);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  int v11 = *(_DWORD *)(v125 + 20);
  int v12 = *((_DWORD *)a1 + 79);
  if (v11 == v11 / v12 * v12) {
    int v13 = v11 / v12;
  }
  else {
    int v13 = v11 / v12 + 1;
  }
  int v14 = *((_DWORD *)a1 + 80);
  int v15 = *(_DWORD *)(v125 + 8);
  uint64_t v102 = v125 + 8;
  int v16 = *((__int16 *)a1 + 187);
  if (v16 > 1) {
    int v17 = (v14 - 1) * v16 + 1;
  }
  else {
    int v17 = *((_DWORD *)a1 + 80);
  }
  int v18 = *((__int16 *)a1 + 184);
  int v19 = *(_DWORD *)(v127 + 8);
  uint64_t v103 = v127 + 8;
  int32x2_t __K = *v8;
  uint64_t v105 = v125;
  uint64_t v106 = v127;
  int v20 = HIDWORD(*(void *)(v125 + 12));
  v7.i16[0] = *((_WORD *)a1 + 188);
  int v113 = a1;
  v7.i16[2] = *((_WORD *)a1 + 189);
  int32x2_t v115 = v7;
  v7.i16[0] = *((_WORD *)a1 + 185);
  int v21 = *(void *)(v125 + 12);
  uint64_t v101 = (int32x2_t *)((char *)a1 + 324);
  v7.i16[2] = *((_WORD *)a1 + 186);
  int32x2_t v116 = v7;
  int32x2_t v117 = *(int32x2_t *)(v125 + 12);
  int32x2_t v22 = *(int32x2_t *)(v127 + 12);
  uint64_t v104 = v10;
  __ldCGFloat a = (int)(v14 * *((_DWORD *)a1 + 78) * *(void *)v8 * HIDWORD(*(unint64_t *)v8)) / (int)v10;
  int v100 = __lda * v10;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v145, v15, v21, v20, __lda * v10);
  std::vector<int>::pointer end = (std::__shared_weak_count *)v145.__end_;
  if (v13 >= 1)
  {
    int v23 = 0;
    unsigned int v24 = (v17 + (v15 - 1) * v18 - v19) & ~((v17 + (v15 - 1) * v18 - v19) >> 31);
    int __ldb = v21 * v15 * v20;
    unsigned int v98 = v24 >> 1;
    begifloat n = v145.__begin_;
    float __A = *(float **)(v123 + 32);
    int32x2_t v26 = vshr_n_s32(vshl_n_s32(v115, 0x10uLL), 0x10uLL);
    uint64_t v27 = v106 + 8;
    int32x2_t v28 = vrev64_s32((int32x2_t)vshr_n_u32((uint32x2_t)vmax_s32(vmla_s32(vsub_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v26, (int32x2_t)0x100000001), (int8x8_t)vmla_s32((int32x2_t)0x100000001, vadd_s32(__K, (int32x2_t)-1), v26), (int8x8_t)__K), v22), vadd_s32(v117, (int32x2_t)-1), vshr_n_s32(vshl_n_s32(v116, 0x10uLL), 0x10uLL)), 0), 1uLL));
    int v97 = v13;
    do
    {
      uint64_t v29 = 0;
      int v30 = *((_DWORD *)v113 + 78);
      v145.__begin_ = *(std::vector<int>::pointer *)v103;
      LODWORD(v145.__end_) = *(_DWORD *)(v103 + 8);
      int v31 = 1;
      do
      {
        int v32 = v31;
        int v33 = *(_DWORD *)(v27 + v29);
        v31 *= v33;
        v29 += 4;
      }
      while (v29 != 12);
      uint64_t v34 = *(void *)(v106 + 24);
      std::string v35 = operator new(0x60uLL);
      uint64_t v36 = 0;
      int v110 = v23;
      int v107 = v30 * v23;
      v35[1] = 0;
      void v35[2] = 0;
      *std::string v35 = &unk_1EE389990;
      *((_OWORD *)v35 + 4) = 0u;
      *((_OWORD *)v35 + 5) = 0u;
      std::vector<int>::pointer v37 = v145.__begin_;
      v35[3] = &unk_1EE36BEF0;
      unsigned char v35[4] = v37;
      *((_DWORD *)v35 + 10) = v145.__end_;
      uint64_t v108 = v34;
      float v109 = (void *)(v34 + 4 * v30 * v23 * v31);
      v35[6] = v109;
      int v114 = v35;
      *((unsigned char *)v35 + 56) = 0;
      int v111 = *((_DWORD *)v113 + 79);
      v145.__begin_ = *(std::vector<int>::pointer *)v102;
      LODWORD(v145.__end_) = *(_DWORD *)(v102 + 8);
      int v38 = 1;
      do
      {
        int v39 = v38;
        int v40 = *(_DWORD *)(v105 + 8 + v36);
        v38 *= v40;
        v36 += 4;
      }
      while (v36 != 12);
      uint64_t v41 = *(void *)(v105 + 24);
      uint64_t v42 = operator new(0x60uLL);
      uint64_t v43 = 0;
      int v44 = v111 * v110;
      v42[1] = 0;
      v42[2] = 0;
      *uint64_t v42 = &unk_1EE389990;
      *((_OWORD *)v42 + 4) = 0u;
      *((_OWORD *)v42 + 5) = 0u;
      std::vector<int>::pointer v45 = v145.__begin_;
      v42[3] = &unk_1EE36BEF0;
      v42[4] = v45;
      *((_DWORD *)v42 + 10) = v145.__end_;
      v42[6] = v41 + 4 * v111 * v110 * v38;
      int v112 = v42;
      *((unsigned char *)v42 + 56) = 0;
      float __B = (const float *)(v41 + 4 * v44 * v39 * v40);
      uint64_t v47 = __A;
      uint64_t v48 = v104;
      do
      {
        cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, __lda, __ldb, v12 / (int)v104, 1.0, v47, __lda, __B, __ldb, 0.0, (float *)(*((void *)begin + 3) + v43), __ldb);
        v43 += 4 * __ldb * __lda;
        __B += __ldb * (v12 / (int)v104);
        v47 += __lda * (v12 / (int)v104);
        --v48;
      }
      while (v48);
      uint64_t v49 = 0;
      int v50 = *((_DWORD *)v113 + 78);
      int32x2_t v143 = vrev64_s32(*(int32x2_t *)((char *)v114 + 36));
      int v51 = *((_DWORD *)v114 + 8);
      int v142 = v50;
      int v144 = v51;
      int32x2_t v140 = vrev64_s32(*(int32x2_t *)((char *)v112 + 36));
      int v52 = *((_DWORD *)v112 + 8);
      int v139 = v100;
      int v141 = v52;
      int32x2_t v136 = vrev64_s32(*v101);
      int v137 = *((_DWORD *)v113 + 80);
      int32x2_t v134 = v28;
      unsigned int v135 = v98;
      int v53 = *((__int16 *)v113 + 185);
      v133[0] = *((__int16 *)v113 + 186);
      v133[1] = v53;
      v133[2] = *((__int16 *)v113 + 184);
      v54.i32[0] = *((__int16 *)v113 + 188);
      v54.i32[1] = *((__int16 *)v113 + 189);
      int32x2_t v131 = vrev64_s32(vmax_s32(v54, (int32x2_t)0x100000001));
      int v55 = *((__int16 *)v113 + 187);
      if (v55 <= 1) {
        int v55 = 1;
      }
      int v132 = v55;
      uint64_t v56 = *((void *)begin + 3);
      unint64_t v57 = 1;
      do
      {
        uint64_t v58 = *(int *)((char *)&v142 + v49);
        v57 *= v58;
        if (v57 >> 31) {
LABEL_86:
        }
          Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int const&>(v57, v58);
        v49 += 4;
      }
      while (v49 != 16);
      bzero(v109, 4 * v57);
      uint64_t v59 = 0;
      unint64_t v57 = 1;
      do
      {
        uint64_t v58 = v136.i32[v59];
        v57 *= v58;
        if (v57 >> 31) {
          goto LABEL_86;
        }
        ++v59;
      }
      while (v59 != 3);
      LODWORD(__x.__begin_) = 0;
      std::vector<int>::vector(&v145, 3uLL, (const std::vector<int>::value_type *)&__x);
      std::vector<int>::value_type v129 = 0;
      std::vector<int>::vector(&__x, 3uLL, &v129);
      if (v100 >= 1)
      {
        int v60 = 0;
        std::vector<int>::pointer v61 = v145.__begin_ + 2;
        do
        {
          unint64_t v62 = 0;
          int v63 = v60;
          do
          {
            if (v62 >= 0xFFFFFFFFFFFFFFFELL) {
              v63 /= *(int *)&v138[4 * v62];
            }
            v61[v62] = v63 % *((_DWORD *)&v136 + v62 + 2);
            --v62;
          }
          while (v62 != -3);
          uint64_t v64 = 0;
          char v65 = 0;
          std::vector<int>::pointer v66 = __x.__begin_;
          std::vector<int>::pointer v67 = v145.__begin_;
LABEL_39:
          int v68 = v60 / (int)v57;
          int v69 = v60;
          do
          {
            int v70 = v66[v64];
            int v71 = v133[v64] * v70 - v134.i32[v64] + v131.i32[v64] * v67[v64];
            ++v64;
            int v72 = *(&v142 + v64);
            BOOL v74 = v71 < 0 || v71 >= v72;
            v65 |= v74;
            int v69 = v70 + *(&v139 + v64) * v69;
            int v68 = v71 + v72 * v68;
          }
          while (v64 != 3);
          if ((v65 & 1) == 0) {
            *((float *)v109 + v68) = *(float *)(v56 + 4 * v69) + *((float *)v109 + v68);
          }
          unsigned int v75 = 3;
          do
          {
            uint64_t v76 = v75 - 1;
            int v77 = v66[v76];
            if (v77 != *(&v139 + v75) - 1)
            {
              uint64_t v64 = 0;
              char v65 = 0;
              v66[v76] = v77 + 1;
              goto LABEL_39;
            }
            v66[v76] = 0;
            --v75;
          }
          while (v75);
          ++v60;
        }
        while (v60 != v100);
      }
      if (__x.__begin_)
      {
        __x.__end_ = __x.__begin_;
        operator delete(__x.__begin_);
      }
      if (v145.__begin_)
      {
        v145.__end_ = v145.__begin_;
        operator delete(v145.__begin_);
      }
      if (*((_DWORD *)v113 + 86))
      {
        uint64_t v78 = *((unsigned int *)v113 + 78);
        if ((int)v78 >= 1)
        {
          uint64_t v79 = 0;
          int v80 = 0;
          int v81 = *((_DWORD *)v114 + 9) * *((_DWORD *)v114 + 8) * *((_DWORD *)v114 + 10);
          uint64_t v82 = *(void *)(v121 + 16);
          do
          {
            if (v81 >= 1)
            {
              int v83 = (float *)(v108 + 4 * v107 * v32 * v33 + 4 * v80);
              int v84 = (float *)(v82 + 16 * v79);
              float v85 = *v84;
              float v86 = v84[1];
              float v87 = v84[2];
              float v88 = v84[3];
              int v89 = v81;
              float v90 = 1.0 / v88;
              do
              {
                *int v83 = v86 + (float)((float)(v90 * (float)(*v83 - v87)) * v85);
                ++v83;
                --v89;
              }
              while (v89);
            }
            ++v79;
            v80 += v81;
          }
          while (v79 != v78);
        }
      }
      else if (v121 && *((int *)v113 + 78) >= 1)
      {
        uint64_t v91 = 0;
        vDSP_Length v92 = *((int *)v114 + 9) * (uint64_t)*((int *)v114 + 8) * *((int *)v114 + 10);
        BOOL v93 = (float *)(v108 + 4 * v107 * v32 * v33);
        do
        {
          LODWORD(v145.__begin_) = 0;
          LODWORD(v145.__begin_) = *(_DWORD *)(*(void *)(v121 + 16) + 4 * v91);
          vDSP_vsadd(v93, 1, (const float *)&v145, v93, 1, v92);
          ++v91;
          v93 += v92;
        }
        while (v91 < *((int *)v113 + 78));
      }
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v112);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v114);
      int v23 = v110 + 1;
      uint64_t v27 = v106 + 8;
    }
    while (v110 + 1 != v97);
  }
  if (end) {
    nitro::nitro_function::nitro_function(end);
  }
  if (v122) {
    nitro::nitro_function::nitro_function(v122);
  }
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  if (!v95)
  {
    uint64_t v94 = (std::__shared_weak_count *)v113[56];
    v113[55] = 0;
    v113[56] = 0;
    if (v94) {
      nitro::nitro_function::nitro_function(v94);
    }
  }
  if (v126) {
    nitro::nitro_function::nitro_function(v126);
  }
  if (v128) {
    nitro::nitro_function::nitro_function(v128);
  }
}

void sub_192B7636C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a50) {
    nitro::nitro_function::nitro_function(a50);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::deconv3d_kernel_cpu::~deconv3d_kernel_cpu(Espresso::deconv3d_kernel_cpu *this)
{
  *(void *)this = &unk_1EE357A98;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE357A98;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

void Espresso::general_slice_update_kernel_cpu::on_resized(Espresso::general_slice_update_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v6, **a3);
  if (v7 == 1) {
    int v4 = 4;
  }
  else {
    int v4 = 5;
  }
  if (v8 == -1) {
    int v5 = v4;
  }
  else {
    int v5 = v8;
  }
  Espresso::general_slice_on_resize(v5, (unsigned char *)this + 280, (uint64_t)this + 384, (uint64_t)this + 408, (uint64_t)this + 432, (uint64_t)this + 456, (uint64_t)this + 480, (uint64_t)this + 504);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_192B76594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::general_slice_update_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_update_kernel_cpu: at least 2 bottom blob required");
  }
  Espresso::abstract_blob_container::shape((char *)&v52, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v50, (const Espresso::layer_shape *)&v52, 0);
  if (v54)
  {
    int v55 = v54;
    operator delete(v54);
  }
  Espresso::abstract_blob_container::shape((char *)&v52, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)&v52, 0);
  if (v54)
  {
    int v55 = v54;
    operator delete(v54);
  }
  std::vector<int>::size_type v8 = v51;
  if (v51 != (uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 2) {
    (*(void (**)(uint64_t, uint64_t **, uint64_t **))(*(void *)a1 + 80))(a1, a3, a4);
  }
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x21) {
    Espresso::general_slice_get_params_from_inputs((uint64_t *)a4, 2u, v8, (uint64_t *)(a1 + 384), (uint64_t *)(a1 + 408), (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504));
  }
  std::vector<int>::vector(&v47, v8);
  int v44 = 0;
  std::vector<int>::pointer v45 = 0;
  uint64_t v46 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v44, (const void *)(a1 + 356), a1 + 356 + 4 * v8, v8);
  Espresso::layer_nd_shape::shape_vector((std::vector<int> *)&v52, (uint64_t)v50);
  NDLayers::slice_nd_shape_computation(*(const void **)(a1 + 384), *(void *)(a1 + 392), a1 + 408, (uint64_t *)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), (uint64_t *)&v52, &v47, *(unsigned char *)(a1 + 355), (int **)&v44);
  if (v52.__r_.__value_.__r.__words[0])
  {
    v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  v41[0] = 0;
  v41[1] = 0;
  int v42 = 0;
  begifloat n = v47.__begin_;
  int64_t v10 = (char *)v47.__end_ - (char *)v47.__begin_;
  if (v47.__end_ != v47.__begin_)
  {
    uint64_t v11 = v10 >> 2;
    if ((unint64_t)(v10 >> 2) <= 1) {
      uint64_t v11 = 1;
    }
    int v12 = v41;
    do
    {
      int v13 = *begin++;
      *v12++ = v13;
      --v11;
    }
    while (v11);
  }
  int v43 = (unint64_t)v10 >> 2;
  if (v49 != v43) {
    goto LABEL_60;
  }
  if (((unint64_t)v10 >> 2))
  {
    if (v48[0] != LODWORD(v41[0])) {
      goto LABEL_60;
    }
    unint64_t v14 = 0;
    do
    {
      if (v49 - 1 == v14) {
        goto LABEL_24;
      }
      int v15 = v48[v14 + 1];
      int v16 = *((_DWORD *)v41 + ++v14);
    }
    while (v15 == v16);
    if (v14 < v49)
    {
LABEL_60:
      Espresso::layer_nd_shape::repr(&v52, (uint64_t)v41);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = (int *)&v52;
      }
      else {
        uint64_t v27 = (int *)v52.__r_.__value_.__r.__words[0];
      }
      v30.__begin_ = v27;
      Espresso::layer_nd_shape::repr(&v56, (uint64_t)v48);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int32x2_t v28 = (int *)&v56;
      }
      else {
        int32x2_t v28 = (int *)v56.__r_.__value_.__r.__words[0];
      }
      __p.__begin_ = v28;
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("Unexpected slice shape: Expected %s vs Actual %s", &v30, &__p);
    }
  }
LABEL_24:
  int v17 = a4[1];
  if (v17 == *a4)
  {
    uint64_t v39 = 0;
    int v40 = 0;
    int v18 = v17;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v39, *a4);
    int v17 = *a4;
    int v18 = a4[1];
  }
  if ((unint64_t)((char *)v18 - (char *)v17) <= 0x10)
  {
    uint64_t v37 = 0;
    int v38 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v37, v17 + 2);
  }
  int v19 = a3[1];
  if (v19 == *a3)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v35, *a3);
    int v19 = *a3;
  }
  uint64_t v20 = *v19;
  int v21 = (std::__shared_weak_count *)(*a4)[1];
  uint64_t v33 = **a4;
  uint64_t v34 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = 0;
  int v32 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 144))(v20, a2, &v33, &v31);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  uint64_t v22 = *(void *)(v39 + 24);
  uint64_t v23 = *(void *)(v35 + 24);
  Espresso::layer_nd_shape::shape_vector(&v30, (uint64_t)v50);
  uint64_t v24 = *(void *)(v37 + 24);
  Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v48);
  int v25 = *(_DWORD *)(a1 + 380);
  uint64_t v57 = 0;
  switch(v25)
  {
    case 0:
      int32x2_t v26 = &unk_1EE37E168;
      break;
    case 1:
      int32x2_t v26 = &unk_1EE37E1C0;
      break;
    case 2:
      int32x2_t v26 = &unk_1EE37E218;
      break;
    case 3:
      int32x2_t v26 = &unk_1EE37E270;
      break;
    case 4:
      int32x2_t v26 = &unk_1EE37E2C8;
      break;
    default:
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int const&>(v25);
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  int v53 = &v52;
  std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::swap[abi:ne180100](&v52, &v56);
  std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::~__value_func[abi:ne180100](&v52);
  apply_func_on_nd_slice(*(const void **)(a1 + 384), *(void *)(a1 + 392), a1 + 408, (int **)(a1 + 432), (uint64_t *)(a1 + 456), (uint64_t *)(a1 + 480), (uint64_t *)(a1 + 504), v24, (uint64_t *)&__p, v22, v23, (uint64_t *)&v30, (uint64_t)&v56);
  std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::~__value_func[abi:ne180100](&v56);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v30.__begin_)
  {
    v30.__end_ = v30.__begin_;
    operator delete(v30.__begin_);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (v44)
  {
    std::vector<int>::pointer v45 = v44;
    operator delete(v44);
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
}

void sub_192B76B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (*(char *)(v38 - 97) < 0) {
    operator delete(*(void **)(v38 - 120));
  }
  if (*(char *)(v38 - 161) < 0) {
    operator delete(*(void **)(v38 - 184));
  }
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::general_slice_update_kernel_cpu::~general_slice_update_kernel_cpu(Espresso::general_slice_update_kernel_cpu *this)
{
  Espresso::general_slice_update_kernel_cpu::~general_slice_update_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE366520;
  uint64_t v2 = (void *)*((void *)this + 63);
  if (v2) {
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 60);
  if (v3) {
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 57);
  if (v4) {
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 54);
  if (v5)
  {
    *((void *)this + 55) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 51);
  if (v6)
  {
    *((void *)this + 52) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 48);
  if (v7)
  {
    *((void *)this + 49) = v7;
    operator delete(v7);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::resize_nearest_neighbor_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  if (*(_DWORD *)(a1 + 280) == 1 && *(_DWORD *)(a1 + 292) != 2) {
    Espresso::throw_exception_selector<Espresso::generic_error>("resize currently only supports resized_dims = 2");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v62, *a4);
  std::vector<int>::size_type v8 = v62;
  if (!v62) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type (bottom)");
  }
  unsigned int v9 = v62[4];
  uint64_t v10 = (int)v62[5];
  int v11 = v62[2];
  int v12 = v62[3];
  if (*(_DWORD *)(a1 + 280) != 1)
  {
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    goto LABEL_17;
  }
  if (!*(void *)(*(void *)a2 + 64) && (!*(_DWORD *)(a1 + 288) || !*(_DWORD *)(a1 + 284))) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("dynamic resize requires interpreter");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v50, *a4 + 2);
  uint64_t v13 = *(void *)(v50 + 24);
  int v14 = *(_DWORD *)(v50 + 8);
  float v15 = *(float *)(v13 + 4 * (v14 - 2));
  float v16 = *(float *)(v13 + 4 * (v14 - 1));
  Espresso::abstract_blob_container::shape((char *)&v57, **a4);
  unint64_t v17 = (unint64_t)v15;
  unint64_t v18 = (unint64_t)v16;
  LODWORD(v57) = (unint64_t)v16;
  DWORD1(v57) = (unint64_t)v15;
  if (!v57)
  {
    LODWORD(v57) = v11;
    if (v17) {
      goto LABEL_10;
    }
LABEL_62:
    DWORD1(v57) = v12;
    goto LABEL_10;
  }
  if (!v17) {
    goto LABEL_62;
  }
LABEL_10:
  int v19 = (std::__shared_weak_count *)operator new(0x98uLL);
  v19->__shared_weak_owners_ = 0;
  v19->__shared_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
  *(_OWORD *)&v19[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v19[3].__shared_owners_ = 0u;
  *(_OWORD *)&v19[1].__shared_owners_ = 0u;
  v19[2].std::__shared_count = 0u;
  v19[4].std::__shared_count = 0u;
  *(_OWORD *)&v19[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v19[5].__shared_owners_ = 0u;
  v19[5].__shared_weak_owners_ = 0;
  v19[6].__vftable = 0;
  LODWORD(v19[2].__vftable) = 1065353216;
  v19[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v19[4].__vftable = 0;
  v19[4].__shared_owners_ = 0;
  v19[2].__shared_weak_owners_ = 0;
  v19[3].__vftable = 0;
  LOBYTE(v19[3].__shared_weak_owners_) = 0;
  v19[3].__shared_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
  v19[5].__vftable = 0;
  v19[5].__shared_owners_ = 0;
  LOBYTE(v19[6].__vftable) = 0;
  LOBYTE(v19[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
  uint64_t v20 = **a3;
  int v55 = v19 + 1;
  std::string v56 = v19;
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, long long *, std::__shared_weak_count **))(*(void *)v20 + 16))(v20, &v57, &v55);
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  nitro::nitro_function::nitro_function(v19);
  if (__p)
  {
    std::vector<int>::pointer v61 = __p;
    operator delete(__p);
  }
  if (*((void *)&v50 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v50 + 1));
  }
LABEL_17:
  if (a3[1] == *a3)
  {
    uint64_t v53 = 0;
    int32x2_t v54 = 0;
LABEL_65:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Blob of wrong type (top)");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v53, *a3);
  uint64_t v21 = v53;
  if (!v53) {
    goto LABEL_65;
  }
  uint64_t v22 = 0;
  uint64_t v23 = v11;
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v24 = 1;
  do
  {
    *((void *)&v57 + v22) = (int)v24;
    v24 *= v8[v22++ + 2];
  }
  while (v22 != 4);
  uint64_t v25 = 0;
  uint64_t v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v26 = 1;
  do
  {
    *((void *)&v50 + v25) = (int)v26;
    v26 *= *(unsigned int *)(v21 + 8 + 4 * v25++);
  }
  while (v25 != 4);
  if (!*(_DWORD *)(a1 + 280))
  {
    unint64_t v18 = *(int *)(v21 + 8);
    unint64_t v17 = *(int *)(v21 + 12);
  }
  if (v18) {
    unint64_t v27 = v18;
  }
  else {
    unint64_t v27 = v11;
  }
  if (v17) {
    unint64_t v28 = v17;
  }
  else {
    unint64_t v28 = v12;
  }
  if (v10)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    float v31 = (float)(unint64_t)v11 / (float)v27;
    float v32 = (float)(unint64_t)(v12 - 1);
    long long v33 = v58;
    float v34 = (float)(unint64_t)(v11 - 1);
    signed int v35 = v11 - 1;
    if (v9 <= 1) {
      int v36 = 1;
    }
    else {
      int v36 = v9;
    }
    uint64_t v37 = 4 * *((void *)&v51 + 1);
    uint64_t v38 = 4 * v51;
    do
    {
      if (v9)
      {
        uint64_t v39 = 0;
        uint64_t v40 = *((void *)v8 + 3) + 4 * *((void *)&v33 + 1) * v30;
        uint64_t v41 = *(void *)(v21 + 24) + v29;
        do
        {
          if (v28)
          {
            unint64_t v42 = 0;
            uint64_t v43 = v41;
            do
            {
              float v44 = v32 * 0.5;
              if (v28 != 1)
              {
                float v44 = fmaxf((float)((float)((float)v42 + 0.5) * (float)((float)(unint64_t)v12 / (float)v28)) + -0.5, 0.0);
                if (v44 > v32) {
                  float v44 = (float)(unint64_t)(v12 - 1);
                }
              }
              if (v27)
              {
                unint64_t v45 = 0;
                signed int v46 = llroundf(v44);
                if (v12 - 1 < v46) {
                  signed int v46 = v12 - 1;
                }
                uint64_t v47 = (int)v23 * (uint64_t)v46;
                do
                {
                  float v48 = v34 * 0.5;
                  if (v27 != 1)
                  {
                    float v48 = fmaxf((float)((float)((float)v45 + 0.5) * v31) + -0.5, 0.0);
                    if (v48 > v34) {
                      float v48 = (float)(unint64_t)(v23 - 1);
                    }
                  }
                  signed int v49 = llroundf(v48);
                  if (v35 < v49) {
                    signed int v49 = v35;
                  }
                  *(_DWORD *)(v43 + 4 * v45++) = *(_DWORD *)(v40 + 4 * v33 * v39 + 4 * (v47 + v49));
                }
                while (v27 != v45);
              }
              ++v42;
              v43 += 4 * v27;
            }
            while (v42 != v28);
          }
          ++v39;
          v41 += v38;
        }
        while (v39 != v36);
      }
      ++v30;
      v29 += v37;
    }
    while (v30 != v10);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
}

void sub_192B77208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  unint64_t v27 = *(std::__shared_weak_count **)(v25 - 112);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::resize_nearest_neighbor_kernel_cpu::~resize_nearest_neighbor_kernel_cpu(Espresso::resize_nearest_neighbor_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::einsum_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  int v4 = *a4;
  int v5 = a4[1];
  if ((char *)v5 - (char *)*a4 != 32) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("einsum kernel: Number of inputs must be 2");
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v67 = 0;
    int v68 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v67, *(uint64_t **)a3);
    int v4 = *a4;
    int v5 = a4[1];
  }
  if (v5 == v4)
  {
    uint64_t v65 = 0;
    std::vector<int>::pointer v66 = 0;
    int v7 = v4;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v65, v4);
    int v4 = *a4;
    int v7 = a4[1];
  }
  if ((unint64_t)((char *)v7 - (char *)v4) <= 0x10)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v63, v4 + 2);
    int v4 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)&__K, *v4);
  Espresso::abstract_blob_container::shape((char *)&__N, (*a4)[2]);
  int v8 = v59;
  if (v59 == 1) {
    int v9 = 4;
  }
  else {
    int v9 = 5;
  }
  if (v60 != -1) {
    int v9 = v60;
  }
  if (v51 == 1) {
    int v10 = 4;
  }
  else {
    int v10 = 5;
  }
  if (v52 != -1) {
    int v10 = v52;
  }
  if (v9 != v10)
  {
    float v34 = "generic_einsum_kernel: inputs must be of same rank";
    goto LABEL_81;
  }
  if (v60 == -1)
  {
    int v11 = __K;
    if (__K == v49)
    {
      int v12 = v58;
      int v13 = v50;
      if (v58 <= v50) {
        int v15 = v50;
      }
      else {
        int v15 = v58;
      }
      int v44 = v15;
      if (v59 == 1) {
        goto LABEL_40;
      }
      goto LABEL_36;
    }
    goto LABEL_79;
  }
  if (v60 < 3)
  {
    float v34 = "generic_einsum_kernel: inputs must have rank at least 3";
LABEL_81:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v34);
  }
  int v11 = __K;
  if (__K != v49)
  {
LABEL_79:
    float v34 = "generic_einsum_kernel: invalid input dims";
    goto LABEL_81;
  }
  if (v60 <= 3)
  {
    int v12 = v58;
    int v44 = 1;
    int v13 = v50;
LABEL_39:
    int v8 = 1;
    goto LABEL_40;
  }
  int v12 = v58;
  int v13 = v50;
  if (v58 <= v50) {
    int v14 = v50;
  }
  else {
    int v14 = v58;
  }
  int v44 = v14;
  if (v60 == 4) {
    goto LABEL_39;
  }
LABEL_36:
  if (v59 <= v51) {
    int v8 = v51;
  }
LABEL_40:
  if ((int)v56 <= (int)v48) {
    uint64_t v16 = v48;
  }
  else {
    uint64_t v16 = v56;
  }
  if (v8 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v17 = 0;
    int v18 = __M;
    int v19 = __N;
    int __ldc = __N * v16;
    int v42 = v48 * v11 * __N;
    int v43 = v56 * v11 * __M;
    int v36 = v43 * v12;
    int v21 = __N * v16 * __M;
    uint64_t v38 = v8;
    uint64_t v37 = 4 * v21 * v44;
    int v35 = v13 * v42;
    uint64_t v41 = 4 * v21;
    uint64_t v22 = 4 * __N;
    do
    {
      uint64_t v39 = v17;
      if (v44 >= 1)
      {
        int v23 = 0;
        int v24 = v51 - 1;
        if (v51 - 1 >= (int)v17) {
          int v24 = v17;
        }
        uint64_t v25 = *(void *)(v63 + 24) + 4 * v35 * v24;
        int v26 = v59 - 1;
        if (v59 - 1 >= (int)v17) {
          int v26 = v17;
        }
        uint64_t v27 = *(void *)(v65 + 24) + 4 * v36 * v26;
        float __C = (float *)(*(void *)(v67 + 24) + v40);
        do
        {
          if ((int)v16 >= 1)
          {
            int v46 = v23;
            uint64_t v29 = 0;
            unint64_t v45 = __C;
            do
            {
              unsigned int v30 = v56 - 1;
              if ((int)(v56 - 1) >= (int)v29) {
                unsigned int v30 = v29;
              }
              if ((int)(v48 - 1) >= (int)v29) {
                unsigned int v31 = v29;
              }
              else {
                unsigned int v31 = v48 - 1;
              }
              cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v18, v19, v11, 1.0, (const float *)(v27 + 4 * (int)(v30 * v11)), v56 * v11, (const float *)(v25 + 4 * (int)(v31 * v19)), v48 * v19, 0.0, __C, __ldc);
              ++v29;
              float __C = (float *)((char *)__C + v22);
            }
            while (v16 != v29);
            int v12 = v58;
            int v13 = v50;
            int v23 = v46;
            float __C = v45;
          }
          int v32 = v43;
          if (v12 <= 1) {
            int v32 = 0;
          }
          v27 += 4 * v32;
          int v33 = v42;
          if (v13 <= 1) {
            int v33 = 0;
          }
          v25 += 4 * v33;
          ++v23;
          float __C = (float *)((char *)__C + v41);
        }
        while (v23 != v44);
      }
      uint64_t v17 = v39 + 1;
      v40 += v37;
    }
    while (v39 + 1 != v38);
  }
  if (__p)
  {
    int32x2_t v54 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    unint64_t v62 = v61;
    operator delete(v61);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
}

void sub_192B776B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 112);
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(v38 - 96);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::einsum_kernel_cpu::~einsum_kernel_cpu(Espresso::einsum_kernel_cpu *this)
{
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::linear_quantize_kernel_cpu::on_resized(Espresso::linear_quantize_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v44, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v42, (const Espresso::layer_shape *)v44, 0);
  memset(v41, 0, sizeof(v41));
  unint64_t v4 = v43;
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v41, v43);
  memset(v40, 0, sizeof(v40));
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v40, v4);
  uint64_t v5 = *((int *)this + 70);
  if ((int)v5 >= 0) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v7 = *((void *)this + 36);
  if (!v7)
  {
    unsigned int v30 = "linear_quantize_kernel_cpu: scale is required";
    goto LABEL_30;
  }
  if (!*((void *)this + 38))
  {
    unsigned int v30 = "linear_quantize_kernel_cpu: zero_point is required";
LABEL_30:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v30);
  }
  uint64_t v8 = 0;
  int v9 = (void *)((char *)this + 360);
  uint64_t v10 = v6 + v5;
  uint64_t v11 = *(int *)(v7 + 8);
  do
  {
    v11 *= *(int *)(v7 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (v11 != 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (int)v42[v10];
    *((_DWORD *)v41 + v10) = v13;
    uint64_t v14 = *(int *)(v7 + 8);
    uint64_t v15 = v14;
    do
    {
      v15 *= *(int *)(v7 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    if (v15 != v13)
    {
      uint64_t v31 = 0;
      uint64_t v32 = v7 + 12;
      do
      {
        v14 *= *(int *)(v32 + v31);
        v31 += 4;
      }
      while (v31 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_quantize_kernel_cpu: Scale vector size %zu not equal to dimension %d at axis %d", v14, v13, v10);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v41, 0, (uint64_t)&v35);
  long long v16 = v36;
  *((_OWORD *)this + 20) = v35;
  *((_OWORD *)this + 21) = v16;
  *((void *)this + 44) = v37;
  uint64_t v17 = (void *)*((void *)this + 45);
  if (v17)
  {
    *((void *)this + 46) = v17;
    operator delete(v17);
    *int v9 = 0;
    *((void *)this + 46) = 0;
    *((void *)this + 47) = 0;
  }
  uint64_t v18 = 0;
  *(_OWORD *)int v9 = v38;
  *((void *)this + 47) = v39;
  *((_DWORD *)this + 85) = v45;
  uint64_t v19 = *((void *)this + 38);
  uint64_t v20 = *(int *)(v19 + 8);
  uint64_t v21 = v20;
  do
  {
    v21 *= *(int *)(v19 + 12 + v18);
    v18 += 4;
  }
  while (v18 != 12);
  if (v21 != 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (int)v42[v10];
    *((_DWORD *)v40 + v10) = v23;
    uint64_t v24 = v20;
    do
    {
      v24 *= *(int *)(v19 + 12 + v22);
      v22 += 4;
    }
    while (v22 != 12);
    if (v24 != v23)
    {
      uint64_t v33 = 0;
      uint64_t v34 = v19 + 12;
      do
      {
        v20 *= *(int *)(v34 + v33);
        v33 += 4;
      }
      while (v33 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_quantize_kernel_cpu: zero_point vector size %zu not equal to dimension %d at axis %d", v20, v23, v10);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v40, 0, (uint64_t)&v35);
  long long v25 = v36;
  *((_OWORD *)this + 24) = v35;
  *((_OWORD *)this + 25) = v25;
  *((void *)this + 52) = v37;
  int v26 = (void *)((char *)this + 424);
  uint64_t v27 = (void *)*((void *)this + 53);
  if (v27)
  {
    *((void *)this + 54) = v27;
    operator delete(v27);
    *int v26 = 0;
    *((void *)this + 54) = 0;
    *((void *)this + 55) = 0;
  }
  *(_OWORD *)int v26 = v38;
  *((void *)this + 55) = v39;
  *((_DWORD *)this + 101) = v45;
  if (Espresso::linear_quantize_kernel_cpu::needs_tmp_buffer(this))
  {
    int v28 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v44);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v35, v28, 1, 1, 1);
    uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 57);
    *((_OWORD *)this + 28) = v35;
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
}

void sub_192B77A44(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

BOOL Espresso::linear_quantize_kernel_cpu::needs_tmp_buffer(Espresso::linear_quantize_kernel_cpu *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = *((void *)this + 36);
  uint64_t v3 = *(int *)(v2 + 8);
  uint64_t v4 = v2 + 12;
  do
  {
    v3 *= *(int *)(v4 + v1);
    v1 += 4;
  }
  while (v1 != 12);
  if (v3 != 1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *((void *)this + 38);
  uint64_t v7 = *(int *)(v6 + 8);
  uint64_t v8 = v6 + 12;
  do
  {
    v7 *= *(int *)(v8 + v5);
    v5 += 4;
  }
  while (v5 != 12);
  return v7 == 1;
}

void Espresso::linear_quantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (a3[1] == *a3)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v14, *a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v12, *(uint64_t **)a4);
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
LABEL_8:
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v10, *(uint64_t **)a4);
LABEL_9:
  if (!*(void *)(a1 + 288) || !*(void *)(a1 + 304))
  {
    uint64_t v7 = "linear_quantize_kernel_cpu: scale and zero_point are required";
    goto LABEL_29;
  }
  if (v12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)**a3 + 32))(**a3) == 4)
    {
      Espresso::abstract_blob_container::shape(v9, **a3);
      Espresso::abstract_blob_container::shape(v8, **(void **)a4);
      Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)**a3 + 32))(**a3) == 2)
    {
      Espresso::abstract_blob_container::shape(v9, **a3);
      Espresso::abstract_blob_container::shape(v8, **(void **)a4);
      Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>();
    }
    goto LABEL_21;
  }
  if (!v10)
  {
    uint64_t v7 = "linear_quantize_kernel_cpu: Only Fp32 and Fp16 inputs supported";
LABEL_29:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v7);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)**a3 + 32))(**a3) == 4)
  {
    Espresso::abstract_blob_container::shape(v9, **a3);
    Espresso::abstract_blob_container::shape(v8, **(void **)a4);
    Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)**a3 + 32))(**a3) == 2)
  {
    Espresso::abstract_blob_container::shape(v9, **a3);
    Espresso::abstract_blob_container::shape(v8, **(void **)a4);
    Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>();
  }
LABEL_21:
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192B77DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  long long v25 = *(std::__shared_weak_count **)(v23 - 72);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  int v26 = *(std::__shared_weak_count **)(v23 - 56);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v23 - 40);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, int *a3, void *a4, int *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 288;
  uint64_t v10 = *(void *)(a1 + 288);
  uint64_t v11 = *(int *)(v10 + 8);
  uint64_t v12 = v10 + 12;
  do
  {
    v11 *= *(int *)(v12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (v11 != 1) {
    goto LABEL_17;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)(a1 + 304);
  uint64_t v15 = *(int *)(v14 + 8);
  uint64_t v16 = v14 + 12;
  do
  {
    v15 *= *(int *)(v16 + v13);
    v13 += 4;
  }
  while (v13 != 12);
  if (v15 == 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    int v19 = *(_DWORD *)(*a4 + 8);
    do
    {
      v19 *= *(_DWORD *)(*a4 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    uint64_t v20 = (std::__shared_weak_count *)a4[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(void *)(a1 + 448);
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 456);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vDSP_Length v23 = v19;
    vDSP_vsdiv(*(const float **)(v18 + 24), 1, *(const float **)(*(void *)v9 + 24), *(float **)(v22 + 24), 1, v19);
    LODWORD(__B) = -822083584;
    float __C = 2147500000.0;
    vDSP_vclip(*(const float **)(v22 + 24), 1, (const float *)&__B, &__C, *(float **)(v22 + 24), 1, v23);
    uint64_t v24 = *(float **)(v22 + 24);
    vDSP_vfixr32(v24, 1, (int *)v24, 1, v23);
    int v28 = **(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v24, 1, &v28, (int *)v24, 1, v23);
    vDSP_vflt32((const int *)v24, 1, *(float **)(v22 + 24), 1, v23);
    float v26 = 255.0;
    float v27 = 0.0;
    vDSP_vclip(*(const float **)(v22 + 24), 1, &v27, &v26, *(float **)(v22 + 24), 1, v23);
    vDSP_vfixru8(*(const float **)(v22 + 24), 1, *(unsigned __int8 **)(*(void *)a2 + 24), 1, v23);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
  }
  else
  {
LABEL_17:
    float __B = (void (**)(void, unint64_t, unint64_t, unint64_t, uint64_t))&unk_1EE38E818;
    Espresso::Util::BlobOperation::elementwise<unsigned char,float,float,int>(a2, a3, (uint64_t)a4, a5, v9, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), &__B);
  }
}

void sub_192B78098(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, int *a3, void *a4, int *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 288;
  uint64_t v10 = *(void *)(a1 + 288);
  uint64_t v11 = *(int *)(v10 + 8);
  uint64_t v12 = v10 + 12;
  do
  {
    v11 *= *(int *)(v12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (v11 != 1) {
    goto LABEL_17;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)(a1 + 304);
  uint64_t v15 = *(int *)(v14 + 8);
  uint64_t v16 = v14 + 12;
  do
  {
    v15 *= *(int *)(v16 + v13);
    v13 += 4;
  }
  while (v13 != 12);
  if (v15 == 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    int v19 = *(_DWORD *)(*a4 + 8);
    do
    {
      v19 *= *(_DWORD *)(*a4 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    uint64_t v20 = (std::__shared_weak_count *)a4[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(void *)(a1 + 448);
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 456);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vDSP_Length v23 = v19;
    vDSP_vsdiv(*(const float **)(v18 + 24), 1, *(const float **)(*(void *)v9 + 24), *(float **)(v22 + 24), 1, v19);
    LODWORD(__B) = -822083584;
    float __C = 2147500000.0;
    vDSP_vclip(*(const float **)(v22 + 24), 1, (const float *)&__B, &__C, *(float **)(v22 + 24), 1, v23);
    uint64_t v24 = *(float **)(v22 + 24);
    vDSP_vfixr32(v24, 1, (int *)v24, 1, v23);
    int v28 = **(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v24, 1, &v28, (int *)v24, 1, v23);
    vDSP_vflt32((const int *)v24, 1, *(float **)(v22 + 24), 1, v23);
    float v26 = 127.0;
    float v27 = -128.0;
    vDSP_vclip(*(const float **)(v22 + 24), 1, &v27, &v26, *(float **)(v22 + 24), 1, v23);
    vDSP_vfixr8(*(const float **)(v22 + 24), 1, *(char **)(*(void *)a2 + 24), 1, v23);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
  }
  else
  {
LABEL_17:
    float __B = (void (**)(void, unint64_t, unint64_t, unint64_t, uint64_t))&unk_1EE38E7C8;
    Espresso::Util::BlobOperation::elementwise<unsigned char,float,float,int>(a2, a3, (uint64_t)a4, a5, v9, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), &__B);
  }
}

void sub_192B78314(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 288;
  uint64_t v9 = *(void *)(a1 + 288);
  uint64_t v10 = *(int *)(v9 + 8);
  uint64_t v11 = v9 + 12;
  do
  {
    v10 *= *(int *)(v11 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v10 != 1) {
    goto LABEL_17;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + 304);
  uint64_t v14 = *(int *)(v13 + 8);
  uint64_t v15 = v13 + 12;
  do
  {
    v14 *= *(int *)(v15 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  if (v14 == 1)
  {
    uint64_t v16 = *(void *)a4;
    uint64_t v17 = *(unsigned int *)(*(void *)a4 + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v17 *= *(unsigned int *)(v16 + i);
    uint64_t v20 = *(void *)(a1 + 448);
    int v19 = *(std::__shared_weak_count **)(a1 + 456);
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v16 = *(void *)a4;
    }
    uint64_t v21 = *(void **)(v20 + 24);
    src.int data = *(void **)(v16 + 24);
    src.vImagePixelCount height = 1;
    *(int64x2_t *)&src.vDSP_Length width = vshlq_s64(vdupq_n_s64(v17 << 32), (int64x2_t)xmmword_192DCA860);
    dest.int data = v21;
    dest.vImagePixelCount height = 1;
    dest.vDSP_Length width = src.width;
    vDSP_Length width = src.width;
    dest.rowBytes = 4 * (int)v17;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    uint64_t v24 = *(void *)(a1 + 448);
    vDSP_Length v23 = *(std::__shared_weak_count **)(a1 + 456);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vDSP_vsdiv(*(const float **)(v20 + 24), 1, *(const float **)(*(void *)v8 + 24), *(float **)(v24 + 24), 1, width);
    LODWORD(src.data) = -822083584;
    LODWORD(dest.data) = 1325400064;
    vDSP_vclip(*(const float **)(v24 + 24), 1, (const float *)&src, (const float *)&dest, *(float **)(v24 + 24), 1, width);
    long long v25 = *(float **)(v24 + 24);
    vDSP_vfixr32(v25, 1, (int *)v25, 1, width);
    int __B = **(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v25, 1, &__B, (int *)v25, 1, width);
    vDSP_vflt32((const int *)v25, 1, *(float **)(v24 + 24), 1, width);
    float __C = 255.0;
    float v27 = 0.0;
    vDSP_vclip(*(const float **)(v24 + 24), 1, &v27, &__C, *(float **)(v24 + 24), 1, width);
    vDSP_vfixru8(*(const float **)(v24 + 24), 1, *(unsigned __int8 **)(*(void *)a2 + 24), 1, width);
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  else
  {
LABEL_17:
    src.int data = &unk_1EE38E840;
    Espresso::Util::BlobOperation::elementwise<unsigned char,unsigned short,float,int>(a2, a3, a4, a5, v8, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), &src);
  }
}

void sub_192B785D8(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 288;
  uint64_t v9 = *(void *)(a1 + 288);
  uint64_t v10 = *(int *)(v9 + 8);
  uint64_t v11 = v9 + 12;
  do
  {
    v10 *= *(int *)(v11 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v10 != 1) {
    goto LABEL_17;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + 304);
  uint64_t v14 = *(int *)(v13 + 8);
  uint64_t v15 = v13 + 12;
  do
  {
    v14 *= *(int *)(v15 + v12);
    v12 += 4;
  }
  while (v12 != 12);
  if (v14 == 1)
  {
    uint64_t v16 = *(void *)a4;
    uint64_t v17 = *(unsigned int *)(*(void *)a4 + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v17 *= *(unsigned int *)(v16 + i);
    uint64_t v20 = *(void *)(a1 + 448);
    int v19 = *(std::__shared_weak_count **)(a1 + 456);
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v16 = *(void *)a4;
    }
    uint64_t v21 = *(void **)(v20 + 24);
    src.int data = *(void **)(v16 + 24);
    src.vImagePixelCount height = 1;
    *(int64x2_t *)&src.vDSP_Length width = vshlq_s64(vdupq_n_s64(v17 << 32), (int64x2_t)xmmword_192DCA860);
    dest.int data = v21;
    dest.vImagePixelCount height = 1;
    dest.vDSP_Length width = src.width;
    vDSP_Length width = src.width;
    dest.rowBytes = 4 * (int)v17;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    uint64_t v24 = *(void *)(a1 + 448);
    vDSP_Length v23 = *(std::__shared_weak_count **)(a1 + 456);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vDSP_vsdiv(*(const float **)(v20 + 24), 1, *(const float **)(*(void *)v8 + 24), *(float **)(v24 + 24), 1, width);
    LODWORD(src.data) = -822083584;
    LODWORD(dest.data) = 1325400064;
    vDSP_vclip(*(const float **)(v24 + 24), 1, (const float *)&src, (const float *)&dest, *(float **)(v24 + 24), 1, width);
    long long v25 = *(float **)(v24 + 24);
    vDSP_vfixr32(v25, 1, (int *)v25, 1, width);
    int __B = **(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsaddi((const int *)v25, 1, &__B, (int *)v25, 1, width);
    vDSP_vflt32((const int *)v25, 1, *(float **)(v24 + 24), 1, width);
    float __C = 127.0;
    float v27 = -128.0;
    vDSP_vclip(*(const float **)(v24 + 24), 1, &v27, &__C, *(float **)(v24 + 24), 1, width);
    vDSP_vfixr8(*(const float **)(v24 + 24), 1, *(char **)(*(void *)a2 + 24), 1, width);
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  else
  {
LABEL_17:
    src.int data = &unk_1EE38E7F0;
    Espresso::Util::BlobOperation::elementwise<unsigned char,unsigned short,float,int>(a2, a3, a4, a5, v8, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), &src);
  }
}

void sub_192B788A8(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::call(uint64_t a1, unsigned char *a2, __int16 *a3, float *a4, int *a5)
{
  _H1 = *a3;
  __asm { FCVT            S1, H1 }
  _S0 = rintf(_S1 / *a4) + (float)*a5;
  __asm { FCVT            H0, S0 }
  __int16 v13 = 22512;
  if (_H0 <= COERCE_SHORT_FLOAT(22512)) {
    *(short float *)&__int16 v13 = _H0;
  }
  if (_H0 >= COERCE_SHORT_FLOAT(-10240)) {
    short float v14 = *(short float *)&v13;
  }
  else {
    short float v14 = COERCE_SHORT_FLOAT(-10240);
  }
  *a2 = (int)v14;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<unsigned short,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned short,4>::ptr const&,Espresso::blob<unsigned short,4>::ptr)::linear_quantize_op::call(uint64_t a1, unsigned char *a2, __int16 *a3, float *a4, int *a5)
{
  _H1 = *a3;
  __asm { FCVT            S1, H1 }
  _S0 = rintf(_S1 / *a4) + (float)*a5;
  __asm { FCVT            H0, S0 }
  __int16 v13 = 23544;
  if (_H0 <= COERCE_SHORT_FLOAT(23544)) {
    *(short float *)&__int16 v13 = _H0;
  }
  __asm { FCMP            H0, #0 }
  LOWORD(v15) = 0;
  if (!_NF) {
    short float v15 = *(short float *)&v13;
  }
  *a2 = (int)v15;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,signed char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::call(uint64_t a1, unsigned char *a2, float *a3, float *a4, int *a5)
{
  float v5 = rintf(*a3 / *a4) + (float)*a5;
  float v6 = 127.0;
  if (v5 <= 127.0) {
    float v6 = v5;
  }
  if (v5 >= -128.0) {
    float v7 = v6;
  }
  else {
    float v7 = -128.0;
  }
  *a2 = (int)v7;
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::~linear_quantize_op()
{
}

void Espresso::linear_quantize_kernel_cpu::__compute<Espresso::blob<unsigned char,4>,unsigned char,Espresso::blob<float,4>>(Espresso::blob<unsigned char,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<float,4>::ptr const&,Espresso::blob<float,4>::ptr)::linear_quantize_op::call(uint64_t a1, unsigned char *a2, float *a3, float *a4, int *a5)
{
  float v5 = rintf(*a3 / *a4) + (float)*a5;
  float v6 = 255.0;
  if (v5 <= 255.0) {
    float v6 = v5;
  }
  BOOL v7 = v5 < 0.0;
  float v8 = 0.0;
  if (!v7) {
    float v8 = v6;
  }
  *a2 = (int)v8;
}

void Espresso::linear_quantize_kernel_cpu::~linear_quantize_kernel_cpu(Espresso::linear_quantize_kernel_cpu *this)
{
  *(void *)this = &unk_1EE35F248;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 53);
  if (v3)
  {
    *((void *)this + 54) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    *((void *)this + 46) = v4;
    operator delete(v4);
  }
  Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE35F248;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 53);
  if (v3)
  {
    *((void *)this + 54) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    *((void *)this + 46) = v4;
    operator delete(v4);
  }

  Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(this);
}

void Espresso::linear_dequantize_kernel_cpu::on_resized(Espresso::linear_dequantize_kernel_cpu *this, Espresso::layer_data *a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v45, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v43, (const Espresso::layer_shape *)v45, 0);
  memset(v42, 0, sizeof(v42));
  unint64_t v5 = v44;
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v42, v44);
  memset(v41, 0, sizeof(v41));
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v41, v5);
  uint64_t v6 = *((int *)this + 70);
  if ((int)v6 >= 0) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v5;
  }
  uint64_t v8 = *((void *)this + 36);
  if (!v8)
  {
    uint64_t v31 = "linear_dequantize_kernel_cpu: scale is required";
    goto LABEL_30;
  }
  if (!*((void *)this + 38))
  {
    uint64_t v31 = "linear_dequantize_kernel_cpu: zero_point is required";
LABEL_30:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v31);
  }
  uint64_t v9 = 0;
  uint64_t v10 = (void *)((char *)this + 360);
  uint64_t v11 = v7 + v6;
  uint64_t v12 = *(int *)(v8 + 8);
  do
  {
    v12 *= *(int *)(v8 + 12 + v9);
    v9 += 4;
  }
  while (v9 != 12);
  if (v12 != 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (int)v43[v11];
    *((_DWORD *)v42 + v11) = v14;
    uint64_t v15 = *(int *)(v8 + 8);
    uint64_t v16 = v15;
    do
    {
      v16 *= *(int *)(v8 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    if (v16 != v14)
    {
      uint64_t v32 = 0;
      uint64_t v33 = v8 + 12;
      do
      {
        v15 *= *(int *)(v33 + v32);
        v32 += 4;
      }
      while (v32 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_dequantize_kernel_cpu: Scale vector size %zu not equal to dimension %d at axis %d", v15, v14, v11);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v42, 0, (uint64_t)&v36);
  long long v17 = v37;
  *((_OWORD *)this + 20) = v36;
  *((_OWORD *)this + 21) = v17;
  *((void *)this + 44) = v38;
  uint64_t v18 = (void *)*((void *)this + 45);
  if (v18)
  {
    *((void *)this + 46) = v18;
    operator delete(v18);
    *uint64_t v10 = 0;
    *((void *)this + 46) = 0;
    *((void *)this + 47) = 0;
  }
  uint64_t v19 = 0;
  *(_OWORD *)uint64_t v10 = v39;
  *((void *)this + 47) = v40;
  *((_DWORD *)this + 85) = v46;
  uint64_t v20 = *((void *)this + 38);
  uint64_t v21 = *(int *)(v20 + 8);
  uint64_t v22 = v21;
  do
  {
    v22 *= *(int *)(v20 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 12);
  if (v22 != 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = (int)v43[v11];
    *((_DWORD *)v41 + v11) = v24;
    uint64_t v25 = v21;
    do
    {
      v25 *= *(int *)(v20 + 12 + v23);
      v23 += 4;
    }
    while (v23 != 12);
    if (v25 != v24)
    {
      uint64_t v34 = 0;
      uint64_t v35 = v20 + 12;
      do
      {
        v21 *= *(int *)(v35 + v34);
        v34 += 4;
      }
      while (v34 != 12);
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long,int &,unsigned long &>("linear_dequantize_kernel_cpu: zero_point vector size %zu not equal to dimension %d at axis %d", v21, v24, v11);
    }
  }
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v41, 0, (uint64_t)&v36);
  long long v26 = v37;
  *((_OWORD *)this + 24) = v36;
  *((_OWORD *)this + 25) = v26;
  *((void *)this + 52) = v38;
  float v27 = (void *)((char *)this + 424);
  int v28 = (void *)*((void *)this + 53);
  if (v28)
  {
    *((void *)this + 54) = v28;
    operator delete(v28);
    *float v27 = 0;
    *((void *)this + 54) = 0;
    *((void *)this + 55) = 0;
  }
  *(_OWORD *)float v27 = v39;
  *((void *)this + 55) = v40;
  *((_DWORD *)this + 101) = v46;
  if (Espresso::linear_dequantize_kernel_cpu::needs_tmp_buffer((uint64_t)this, (void **)a2))
  {
    int v29 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v45);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v36, v29, 1, 1, 1);
    unsigned int v30 = (std::__shared_weak_count *)*((void *)this + 57);
    *((_OWORD *)this + 28) = v36;
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
  }
  if (v47)
  {
    unsigned int v48 = v47;
    operator delete(v47);
  }
}

void sub_192B78E60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::linear_dequantize_kernel_cpu::needs_tmp_buffer(uint64_t a1, void **a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v4 = *(int *)(v3 + 8);
  uint64_t v5 = v3 + 12;
  do
  {
    v4 *= *(int *)(v5 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (v4 != 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 304);
  uint64_t v8 = *(int *)(v7 + 8);
  uint64_t v9 = v7 + 12;
  do
  {
    v8 *= *(int *)(v9 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  return v8 == 1 && (*(unsigned int (**)(void))(*(void *)**a2 + 32))(**a2) == 1;
}

void Espresso::linear_dequantize_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (a4[1] == *a4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v14, *a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v12, *(uint64_t **)a3);
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
LABEL_8:
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v10, *(uint64_t **)a3);
LABEL_9:
  if (!*(void *)(a1 + 288) || !*(void *)(a1 + 304))
  {
    uint64_t v7 = "linear_dequantize_kernel_cpu: scale and zero_point are required";
    goto LABEL_29;
  }
  if (v12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)**a4 + 32))(**a4) == 4)
    {
      Espresso::abstract_blob_container::shape(v9, **(void **)a3);
      Espresso::abstract_blob_container::shape(v8, **a4);
      Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)**a4 + 32))(**a4) == 2)
    {
      Espresso::abstract_blob_container::shape(v9, **(void **)a3);
      Espresso::abstract_blob_container::shape(v8, **a4);
      Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>();
    }
    goto LABEL_21;
  }
  if (!v10)
  {
    uint64_t v7 = "linear_dequantize_kernel_cpu: Only U8 and S8 inputs supported";
LABEL_29:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v7);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)**a4 + 32))(**a4) == 4)
  {
    Espresso::abstract_blob_container::shape(v9, **(void **)a3);
    Espresso::abstract_blob_container::shape(v8, **a4);
    Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)**a4 + 32))(**a4) == 2)
  {
    Espresso::abstract_blob_container::shape(v9, **(void **)a3);
    Espresso::abstract_blob_container::shape(v8, **a4);
    Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>();
  }
LABEL_21:
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192B79200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 72);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  long long v26 = *(std::__shared_weak_count **)(v23 - 56);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  float v27 = *(std::__shared_weak_count **)(v23 - 40);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 288);
  uint64_t v8 = *(int *)(v7 + 8);
  uint64_t v9 = v7 + 12;
  do
  {
    v8 *= *(int *)(v9 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  if (v8 != 1) {
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 304);
  uint64_t v12 = *(int *)(v11 + 8);
  uint64_t v13 = v11 + 12;
  do
  {
    v12 *= *(int *)(v13 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  if (v12 == 1)
  {
    uint64_t v14 = *(void *)a4;
    int v15 = *(_DWORD *)(*(void *)a4 + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v15 *= *(_DWORD *)(v14 + i);
    uint64_t v18 = *a2;
    long long v17 = (std::__shared_weak_count *)a2[1];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *(void *)a4;
    }
    vDSP_Length v19 = v15;
    vDSP_vfltu8(*(const unsigned __int8 **)(v14 + 24), 1, *(float **)(v18 + 24), 1, v15);
    __B[0] = **(float **)(*(void *)(a1 + 288) + 24);
    float __C = __B[0] * (float)-**(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsmsa(*(const float **)(v18 + 24), 1, __B, &__C, *(float **)(v18 + 24), 1, v19);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  else
  {
LABEL_13:
    *(void *)int __B = &unk_1EE38E890;
    Espresso::Util::BlobOperation::elementwise<float,unsigned char,float,int>((uint64_t)a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), (void (***)(void, uint64_t, uint64_t, unint64_t, uint64_t))__B);
  }
}

void sub_192B7941C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 288);
  uint64_t v8 = *(int *)(v7 + 8);
  uint64_t v9 = v7 + 12;
  do
  {
    v8 *= *(int *)(v9 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  if (v8 != 1) {
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 304);
  uint64_t v12 = *(int *)(v11 + 8);
  uint64_t v13 = v11 + 12;
  do
  {
    v12 *= *(int *)(v13 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  if (v12 == 1)
  {
    uint64_t v14 = *(void *)a4;
    int v15 = *(_DWORD *)(*(void *)a4 + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v15 *= *(_DWORD *)(v14 + i);
    uint64_t v18 = *a2;
    long long v17 = (std::__shared_weak_count *)a2[1];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *(void *)a4;
    }
    vDSP_Length v19 = v15;
    vDSP_vflt8(*(const char **)(v14 + 24), 1, *(float **)(v18 + 24), 1, v15);
    __B[0] = **(float **)(*(void *)(a1 + 288) + 24);
    float __C = __B[0] * (float)-**(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsmsa(*(const float **)(v18 + 24), 1, __B, &__C, *(float **)(v18 + 24), 1, v19);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  else
  {
LABEL_13:
    *(void *)int __B = &unk_1EE38E868;
    Espresso::Util::BlobOperation::elementwise<float,unsigned char,float,int>((uint64_t)a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), (void (***)(void, uint64_t, uint64_t, unint64_t, uint64_t))__B);
  }
}

void sub_192B795BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 288);
  uint64_t v9 = *(int *)(v8 + 8);
  uint64_t v10 = v8 + 12;
  do
  {
    v9 *= *(int *)(v10 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v9 != 1) {
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(a1 + 304);
  uint64_t v13 = *(int *)(v12 + 8);
  uint64_t v14 = v12 + 12;
  do
  {
    v13 *= *(int *)(v14 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  if (v13 == 1)
  {
    uint64_t v15 = *(void *)a4;
    uint64_t v16 = *(unsigned int *)(*(void *)a4 + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v16 *= *(unsigned int *)(v15 + i);
    uint64_t v19 = *(void *)(a1 + 448);
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 456);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = *(void *)a4;
    }
    uint64_t v20 = (int)v16;
    vDSP_vfltu8(*(const unsigned __int8 **)(v15 + 24), 1, *(float **)(v19 + 24), 1, (int)v16);
    __B[0] = **(float **)(*(void *)(a1 + 288) + 24);
    float __C = __B[0] * (float)-**(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsmsa(*(const float **)(v19 + 24), 1, __B, &__C, *(float **)(v19 + 24), 1, (int)v16);
    if (v16 << 32)
    {
      uint64_t v21 = *(int **)(v19 + 24);
      uint64_t v22 = *(_WORD **)(*(void *)a2 + 24);
      do
      {
        int v23 = *v21++;
        _S0 = v23;
        __asm { FCVT            H0, S0 }
        *v22++ = _S0;
        --v20;
      }
      while (v20);
    }
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
  }
  else
  {
LABEL_16:
    *(void *)int __B = &unk_1EE38E8E0;
    Espresso::Util::BlobOperation::elementwise<unsigned short,unsigned char,float,int>(a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), (void (***)(void, uint64_t, uint64_t, unint64_t, uint64_t))__B);
  }
}

void sub_192B79790(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 288);
  uint64_t v9 = *(int *)(v8 + 8);
  uint64_t v10 = v8 + 12;
  do
  {
    v9 *= *(int *)(v10 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  if (v9 != 1) {
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(a1 + 304);
  uint64_t v13 = *(int *)(v12 + 8);
  uint64_t v14 = v12 + 12;
  do
  {
    v13 *= *(int *)(v14 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  if (v13 == 1)
  {
    uint64_t v15 = *(void *)a4;
    uint64_t v16 = *(unsigned int *)(*(void *)a4 + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v16 *= *(unsigned int *)(v15 + i);
    uint64_t v19 = *(void *)(a1 + 448);
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 456);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = *(void *)a4;
    }
    uint64_t v20 = (int)v16;
    vDSP_vflt8(*(const char **)(v15 + 24), 1, *(float **)(v19 + 24), 1, (int)v16);
    __B[0] = **(float **)(*(void *)(a1 + 288) + 24);
    float __C = __B[0] * (float)-**(_DWORD **)(*(void *)(a1 + 304) + 24);
    vDSP_vsmsa(*(const float **)(v19 + 24), 1, __B, &__C, *(float **)(v19 + 24), 1, (int)v16);
    if (v16 << 32)
    {
      uint64_t v21 = *(int **)(v19 + 24);
      uint64_t v22 = *(_WORD **)(*(void *)a2 + 24);
      do
      {
        int v23 = *v21++;
        _S0 = v23;
        __asm { FCVT            H0, S0 }
        *v22++ = _S0;
        --v20;
      }
      while (v20);
    }
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
  }
  else
  {
LABEL_16:
    *(void *)int __B = &unk_1EE38E8B8;
    Espresso::Util::BlobOperation::elementwise<unsigned short,unsigned char,float,int>(a2, a3, a4, a5, a1 + 288, (int *)(a1 + 320), a1 + 304, (int *)(a1 + 384), (void (***)(void, uint64_t, uint64_t, unint64_t, uint64_t))__B);
  }
}

void sub_192B79964(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
}

__int16 Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call@<H0>(uint64_t a1@<X0>, _WORD *a2@<X1>, char *a3@<X2>, float *a4@<X3>, int *a5@<X4>)
{
  _S0 = *a4 * (float)((float)*a3 - (float)*a5);
  __asm { FCVT            H0, S0 }
  *a2 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
}

__int16 Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<unsigned short,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call@<H0>(float a1@<S0>, uint64_t a2@<X0>, _WORD *a3@<X1>, unsigned char *a4@<X2>, float *a5@<X3>, int *a6@<X4>)
{
  LOBYTE(a1) = *a4;
  _S0 = *a5 * (float)((float)LODWORD(a1) - (float)*a6);
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
}

float Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,signed char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call(uint64_t a1, float *a2, char *a3, float *a4, int *a5)
{
  float result = *a4 * (float)((float)*a3 - (float)*a5);
  *a2 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::~linear_dequantize_op()
{
}

float Espresso::linear_dequantize_kernel_cpu::__compute<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,unsigned char>(Espresso::blob<float,4>::ptr const&,Espresso::layer_shape const&,Espresso::blob<unsigned char,4>::ptr const&,Espresso::blob<unsigned char,4>::ptr)::linear_dequantize_op::call(float a1, uint64_t a2, float *a3, unsigned char *a4, float *a5, int *a6)
{
  LOBYTE(a1) = *a4;
  float result = *a5 * (float)((float)LODWORD(a1) - (float)*a6);
  *a3 = result;
  return result;
}

void Espresso::linear_dequantize_kernel_cpu::~linear_dequantize_kernel_cpu(Espresso::linear_dequantize_kernel_cpu *this)
{
  *(void *)this = &unk_1EE363750;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 53);
  if (v3)
  {
    *((void *)this + 54) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    *((void *)this + 46) = v4;
    operator delete(v4);
  }
  Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE363750;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 53);
  if (v3)
  {
    *((void *)this + 54) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    *((void *)this + 46) = v4;
    operator delete(v4);
  }

  Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(this);
}

void Espresso::furthest_point_sampling_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  Espresso::abstract_blob_container::shape((char *)v59, **(void **)a4);
  uint64_t v51 = v59[0];
  Espresso::abstract_blob_container::shape((char *)v56, **(void **)a3);
  if (v59[2] != 3) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("FPS sampling requires 3 channels.");
  }
  uint64_t v50 = v56[0];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(v7 + 88);
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 96);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    int v55 = 0;
    uint64_t v54 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v54, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v53 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v52, *(uint64_t **)a3);
  }
  if (*(_DWORD *)(a1 + 280) > v59[0]) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("FPS sampling cannot request more output vertices than input vertices.");
  }
  uint64_t v64 = 0;
  if (*(_DWORD *)(a1 + 284) == 1)
  {
    uint64_t v65 = &unk_1EE377F18;
    uint64_t v10 = Espresso::l1_distance;
  }
  else
  {
    uint64_t v65 = &unk_1EE377F18;
    uint64_t v10 = Espresso::l2_distance;
  }
  std::vector<int>::pointer v66 = v10;
  uint64_t v67 = &v65;
  std::__function::__value_func<float ()(Espresso::vertex,Espresso::vertex)>::swap[abi:ne180100](&v65, v63);
  std::__function::__value_func<float ()(Espresso::vertex,Espresso::vertex)>::~__value_func[abi:ne180100](&v65);
  int v12 = *(_DWORD *)(a1 + 288);
  uint64_t v47 = v8;
  if (v12 < -1)
  {
    int v14 = 0;
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 280) - 1;
    LODWORD(v65) = 0;
    HIDWORD(v65) = v13;
    int v14 = std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v9, &v65);
  }
  uint64_t v46 = (uint64_t)&v46;
  uint64_t v15 = v54;
  uint64_t v16 = *(void *)(v54 + 24) + 4 * v14;
  v11.n128_u32[0] = *(_DWORD *)v16;
  int v17 = *(_DWORD *)(v16 + 4 * v51);
  int v18 = 2 * v51;
  int v19 = *(_DWORD *)(v16 + 8 * v51);
  uint64_t v20 = *(_DWORD **)(v52 + 24);
  *uint64_t v20 = *(_DWORD *)v16;
  LODWORD(v16) = v50;
  v20[v50] = v17;
  int v21 = 2 * v16;
  v20[2 * v16] = v19;
  MEMORY[0x1F4188790](v11);
  int v23 = (char *)&v46 - ((v22 + 15) & 0x7FFFFFFF0);
  int v24 = v59[0];
  bzero(v23, 4 * v59[0]);
  *(_DWORD *)&v23[4 * v14] = -1082130432;
  uint64_t v48 = a1;
  int v25 = *(_DWORD *)(a1 + 280);
  if (v25 >= 2)
  {
    uint64_t v26 = v18;
    uint64_t v49 = v21;
    uint64_t v27 = v18;
    uint64_t v28 = v51;
    for (int i = 1; i < v25; ++i)
    {
      if (v24 >= 1)
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unsigned int *)(*(void *)(v15 + 24) + 4 * v14);
        unsigned int v32 = v31[v26];
        unsigned int v33 = v31[v51];
        unsigned int v34 = *v31;
        float v35 = 0.0;
        do
        {
          float v36 = *(float *)&v23[4 * v30];
          if (v36 >= 0.0)
          {
            long long v37 = (int *)(*(void *)(v15 + 24) + 4 * v30);
            int v38 = *v37;
            int v39 = v37[v28];
            int v40 = v37[v27];
            uint64_t v65 = (void *)__PAIR64__(v33, v34);
            LODWORD(v66) = v32;
            v62[0] = v38;
            v62[1] = v39;
            void v62[2] = v40;
            if (!v64) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            float v41 = v36 + (*(float (**)(uint64_t, void **, _DWORD *))(*(void *)v64 + 48))(v64, &v65, v62);
            *(float *)&v23[4 * v30] = v41;
            if (v41 > v35)
            {
              float v35 = v41;
              int v14 = v30;
            }
            int v24 = v59[0];
          }
          ++v30;
        }
        while (v30 < v24);
        int v25 = *(_DWORD *)(v48 + 280);
      }
      int v42 = (_DWORD *)(*(void *)(v15 + 24) + 4 * v14);
      int v43 = v42[v51];
      int v44 = v42[v26];
      v20[1] = *v42;
      ++v20;
      v20[v50] = v43;
      v20[v49] = v44;
      *(_DWORD *)&v23[4 * v14] = -1082130432;
    }
  }
  std::__function::__value_func<float ()(Espresso::vertex,Espresso::vertex)>::~__value_func[abi:ne180100](v63);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  int v45 = v47;
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (v57)
  {
    int v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    std::vector<int>::pointer v61 = v60;
    operator delete(v60);
  }
}

void sub_192B7A02C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 360);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  uint64_t v5 = *(void **)(v2 - 312);
  if (v5)
  {
    *(void *)(v2 - 304) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v2 - 248);
  if (v6)
  {
    *(void *)(v2 - 240) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<float ()(Espresso::vertex,Espresso::vertex)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        float result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        float result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      float result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_192B7A330(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<float ()(Espresso::vertex,Espresso::vertex)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float Espresso::l2_distance(float a1, float a2, float a3, float a4, float a5, float a6)
{
  return sqrt((float)(a3 - a6) * (float)(a3 - a6)+ (float)(a1 - a4) * (float)(a1 - a4)+ (float)(a2 - a5) * (float)(a2 - a5));
}

void *std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::target_type()
{
}

uint64_t std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFfN8Espresso6vertexES0_E")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return (*(uint64_t (**)(float, float, float, float, float, float))(a1 + 8))(*a2, a2[1], a2[2], *a3, a3[1], a3[2]);
}

uint64_t std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377F18;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EE377F18;
  result[1] = v3;
  return result;
}

void std::__function::__func<float (*)(Espresso::vertex,Espresso::vertex),std::allocator<float (*)(Espresso::vertex,Espresso::vertex)>,float ()(Espresso::vertex,Espresso::vertex)>::~__func()
{
}

float Espresso::l1_distance(float a1, float a2, float a3, float a4, float a5, float a6)
{
  return vabds_f32(a3, a6) + (float)(vabds_f32(a1, a4) + vabds_f32(a2, a5));
}

void Espresso::furthest_point_sampling_kernel_cpu::~furthest_point_sampling_kernel_cpu(Espresso::furthest_point_sampling_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::tunneled_ane_op_kernel_cpu::is_valid_for_engine()
{
  return 0;
}

void Espresso::tunneled_ane_op_kernel_cpu::__launch()
{
}

void Espresso::tunneled_ane_op_kernel_cpu::~tunneled_ane_op_kernel_cpu(Espresso::tunneled_ane_op_kernel_cpu *this)
{
  *(void *)this = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_kernel_cpu *)((char *)this + 280));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_kernel_cpu *)((char *)this + 280));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::tunneled_ane_unit_kernel_cpu::is_valid_for_engine()
{
  return 0;
}

void Espresso::tunneled_ane_unit_kernel_cpu::__launch()
{
}

void Espresso::tunneled_ane_unit_kernel_cpu::~tunneled_ane_unit_kernel_cpu(void **this)
{
  *this = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::plane_rw_cpu::__launch()
{
}

void Espresso::plane_rw_cpu::~plane_rw_cpu(Espresso::plane_rw_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::degamma_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v16 = 0;
    int v17 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v16, *(uint64_t **)a4);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v14, *a3);
  uint64_t v7 = *(const float **)(v16 + 24);
  uint64_t v8 = *(float **)(v14 + 24);
  Espresso::abstract_blob_container::shape(v11, **(void **)a4);
  int v10 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v11);
  if (*(_DWORD *)(a1 + 280)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unknown degamma mode.");
  }
  float v9 = 2.2;
  vvpowsf(v8, &v9, v7, &v10);
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_192B7A840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  int v19 = *(std::__shared_weak_count **)(v17 - 56);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v17 - 40);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::degamma_kernel_cpu::~degamma_kernel_cpu(Espresso::degamma_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

__n128 Espresso::convolution_kernel_cpu::convolution_kernel_cpu(void *a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v6 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(a1, a2);
  v6[69] = 0;
  *(_OWORD *)(v6 + 65) = 0u;
  *(_OWORD *)(v6 + 67) = 0u;
  *(_OWORD *)(v6 + 61) = 0u;
  *(_OWORD *)(v6 + 63) = 0u;
  *uint64_t v6 = &unk_1EE3600B8;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  long long v7 = *a4;
  long long v8 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v8;
  *((_OWORD *)v6 + 19) = v7;
  long long v9 = a4[3];
  long long v10 = a4[4];
  long long v11 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v11;
  *((_OWORD *)v6 + 22) = v9;
  *((_OWORD *)v6 + 23) = v10;
  long long v12 = a4[7];
  long long v13 = a4[8];
  long long v14 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v13;
  *((_OWORD *)v6 + 28) = v14;
  *((_OWORD *)v6 + 26) = v12;
  *uint64_t v6 = &unk_1EE357C78;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  long long v15 = *a4;
  long long v16 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v16;
  *((_OWORD *)v6 + 19) = v15;
  long long v17 = a4[3];
  long long v18 = a4[4];
  long long v19 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v19;
  *((_OWORD *)v6 + 22) = v17;
  *((_OWORD *)v6 + 23) = v18;
  __n128 result = (__n128)a4[7];
  long long v21 = a4[8];
  long long v22 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v21;
  *((_OWORD *)v6 + 28) = v22;
  *((__n128 *)v6 + 26) = result;
  *((unsigned char *)v6 + 468) = *(unsigned char *)(*a2 + 125);
  return result;
}

{
  void *v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  __n128 result;
  long long v21;
  long long v22;

  uint64_t v6 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(a1, a2);
  v6[69] = 0;
  *(_OWORD *)(v6 + 65) = 0u;
  *(_OWORD *)(v6 + 67) = 0u;
  *(_OWORD *)(v6 + 61) = 0u;
  *(_OWORD *)(v6 + 63) = 0u;
  *uint64_t v6 = &unk_1EE3600B8;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  long long v7 = *a4;
  long long v8 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v8;
  *((_OWORD *)v6 + 19) = v7;
  long long v9 = a4[3];
  long long v10 = a4[4];
  long long v11 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v11;
  *((_OWORD *)v6 + 22) = v9;
  *((_OWORD *)v6 + 23) = v10;
  long long v12 = a4[7];
  long long v13 = a4[8];
  long long v14 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v13;
  *((_OWORD *)v6 + 28) = v14;
  *((_OWORD *)v6 + 26) = v12;
  *uint64_t v6 = &unk_1EE357C78;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  long long v15 = *a4;
  long long v16 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v16;
  *((_OWORD *)v6 + 19) = v15;
  long long v17 = a4[3];
  long long v18 = a4[4];
  long long v19 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v19;
  *((_OWORD *)v6 + 22) = v17;
  *((_OWORD *)v6 + 23) = v18;
  __n128 result = (__n128)a4[7];
  long long v21 = a4[8];
  long long v22 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v21;
  *((_OWORD *)v6 + 28) = v22;
  *((__n128 *)v6 + 26) = result;
  *((unsigned char *)v6 + 468) = *(unsigned char *)(*a2 + 125);
  return result;
}

__n128 Espresso::pool3d_kernel_cpu::pool3d_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)uint64_t v5 = xmmword_192DC3600;
  *(_OWORD *)(v5 + 16) = xmmword_192DCA240;
  *(_DWORD *)(v5 + 32) = 0;
  *(_WORD *)(v6 + 316) = 1;
  *(void *)(v5 + 46) = 0;
  *(void *)(v5 + 38) = 0;
  *(void *)(v5 + 52) = 0;
  *(void *)uint64_t v6 = &unk_1EE34D198;
  __n128 result = *(__n128 *)a4;
  long long v8 = *(_OWORD *)(a4 + 16);
  long long v9 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 44) = *(_OWORD *)(a4 + 44);
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(__n128 *)uint64_t v5 = result;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  long long v8;
  long long v9;

  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)uint64_t v5 = xmmword_192DC3600;
  *(_OWORD *)(v5 + 16) = xmmword_192DCA240;
  *(_DWORD *)(v5 + 32) = 0;
  *(_WORD *)(v6 + 316) = 1;
  *(void *)(v5 + 46) = 0;
  *(void *)(v5 + 38) = 0;
  *(void *)(v5 + 52) = 0;
  *(void *)uint64_t v6 = &unk_1EE34D198;
  __n128 result = *(__n128 *)a4;
  long long v8 = *(_OWORD *)(a4 + 16);
  long long v9 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 44) = *(_OWORD *)(a4 + 44);
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(__n128 *)uint64_t v5 = result;
  return result;
}

__n128 Espresso::lrn_kernel_cpu::lrn_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0x3F40000038D1B717;
  *(_DWORD *)(v5 + 288) = 3;
  *(void *)(v5 + 300) = 0;
  *(void *)(v5 + 292) = 0;
  *(void *)uint64_t v5 = &unk_1EE331CB0;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0x3F40000038D1B717;
  *(_DWORD *)(v5 + 288) = 3;
  *(void *)(v5 + 300) = 0;
  *(void *)(v5 + 292) = 0;
  *(void *)uint64_t v5 = &unk_1EE331CB0;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::softmax_kernel_cpu::softmax_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 304) = 256;
  *(_OWORD *)(v5 + 280) = xmmword_192DCA290;
  *(void *)(v5 + 296) = 1;
  *(_DWORD *)(v5 + 308) = 0;
  *(void *)uint64_t v5 = &unk_1EE34ECE0;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)(v5 + 312) = 0;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 304) = 256;
  *(_OWORD *)(v5 + 280) = xmmword_192DCA290;
  *(void *)(v5 + 296) = 1;
  *(_DWORD *)(v5 + 308) = 0;
  *(void *)uint64_t v5 = &unk_1EE34ECE0;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)(v5 + 312) = 0;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

void std::__shared_ptr_emplace<Espresso::argmax_tree_approximator>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void std::__shared_ptr_emplace<Espresso::argmax_tree_approximator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387E70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::argmax_tree_approximator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 Espresso::concat_kernel_cpu::concat_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 340) = 0;
  *(_WORD *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 312) = 0;
  *(void *)uint64_t v5 = &unk_1EE34C580;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 325) = *(_OWORD *)(a4 + 45);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;
  long long v8;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 340) = 0;
  *(_WORD *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 312) = 0;
  *(void *)uint64_t v5 = &unk_1EE34C580;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 325) = *(_OWORD *)(a4 + 45);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::upsample_kernel_cpu::upsample_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA210;
  *(void *)(v5 + 296) = 0x100000000;
  *(unsigned char *)(v5 + 304) = 0;
  *(void *)(v5 + 308) = 0x3F8000003F800000;
  *(unsigned char *)(v5 + 316) = 1;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 336) = 0;
  *(void *)(v5 + 328) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 344) = _D0;
  *(void *)uint64_t v5 = &unk_1EE3505A0;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v12 = *(_OWORD *)(a4 + 32);
  long long v13 = *(_OWORD *)(a4 + 48);
  *(void *)(v5 + 344) = *(void *)(a4 + 64);
  *(_OWORD *)(v5 + 312) = v12;
  *(_OWORD *)(v5 + 328) = v13;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v12;
  long long v13;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA210;
  *(void *)(v5 + 296) = 0x100000000;
  *(unsigned char *)(v5 + 304) = 0;
  *(void *)(v5 + 308) = 0x3F8000003F800000;
  *(unsigned char *)(v5 + 316) = 1;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 336) = 0;
  *(void *)(v5 + 328) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 344) = _D0;
  *(void *)uint64_t v5 = &unk_1EE3505A0;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v12 = *(_OWORD *)(a4 + 32);
  long long v13 = *(_OWORD *)(a4 + 48);
  *(void *)(v5 + 344) = *(void *)(a4 + 64);
  *(_OWORD *)(v5 + 312) = v12;
  *(_OWORD *)(v5 + 328) = v13;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

__n128 Espresso::elementwise_kernel_cpu::elementwise_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 1065353216;
  *(void *)(v5 + 296) = 897988541;
  *(unsigned char *)(v5 + 304) = 0;
  *(void *)(v5 + 324) = 0;
  *(void *)uint64_t v5 = &unk_1EE357F28;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;
  long long v8;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 1065353216;
  *(void *)(v5 + 296) = 897988541;
  *(unsigned char *)(v5 + 304) = 0;
  *(void *)(v5 + 324) = 0;
  *(void *)uint64_t v5 = &unk_1EE357F28;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::split_kernel_cpu::split_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 288) = 0;
  *(void *)(v5 + 300) = 0;
  *(void *)(v5 + 292) = 0;
  *(void *)(v5 + 280) = 0x200000002;
  *(_DWORD *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE33E2C0;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;
  long long v8;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 288) = 0;
  *(void *)(v5 + 300) = 0;
  *(void *)(v5 + 292) = 0;
  *(void *)(v5 + 280) = 0x200000002;
  *(_DWORD *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE33E2C0;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 312) = v8;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::general_padding_kernel_cpu::general_padding_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35E258;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 340) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;
  long long v8;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35E258;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 340) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

__n128 Espresso::crop_kernel_cpu::crop_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  void *v5 = &unk_1EE3328B8;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  void *v5;
  __n128 result;

  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  void *v5 = &unk_1EE3328B8;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

__n128 Espresso::batchnorm_kernel_cpu::batchnorm_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(void *)(v5 + 384) = 0;
  *(void *)(v5 + 392) = 0;
  *(void *)uint64_t v5 = &unk_1EE3507D8;
  *(void *)(v5 + 400) = 0;
  *(void *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 364) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 352) = v8;
  *(__n128 *)(v5 + 320) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;
  long long v8;

  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(void *)(v5 + 384) = 0;
  *(void *)(v5 + 392) = 0;
  *(void *)uint64_t v5 = &unk_1EE3507D8;
  *(void *)(v5 + 400) = 0;
  *(void *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 364) = *(_OWORD *)(a4 + 60);
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 352) = v8;
  *(__n128 *)(v5 + 320) = result;
  return result;
}

__n128 Espresso::activation_kernel_cpu::activation_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = 0;
  *(void *)(v5 + 308) = 0x3F8000003F800000;
  *(void *)(v5 + 316) = 0;
  *(void *)(v5 + 332) = 0;
  *(void *)(v5 + 324) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(void *)uint64_t v5 = &unk_1EE353E58;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_DWORD *)(v5 + 336) = *(_DWORD *)(a4 + 32);
  *(__n128 *)(v5 + 304) = result;
  *(_OWORD *)(v5 + 320) = v7;
  *(void *)(v5 + 344) = 0;
  *(void *)(v5 + 352) = 0;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = 0;
  *(void *)(v5 + 308) = 0x3F8000003F800000;
  *(void *)(v5 + 316) = 0;
  *(void *)(v5 + 332) = 0;
  *(void *)(v5 + 324) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(void *)uint64_t v5 = &unk_1EE353E58;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_DWORD *)(v5 + 336) = *(_DWORD *)(a4 + 32);
  *(__n128 *)(v5 + 304) = result;
  *(_OWORD *)(v5 + 320) = v7;
  *(void *)(v5 + 344) = 0;
  *(void *)(v5 + 352) = 0;
  return result;
}

__n128 Espresso::axpby_kernel_cpu::axpby_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 280) = _D0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 316) = 0u;
  *(void *)uint64_t v5 = &unk_1EE33DAD0;
  __n128 result = *(__n128 *)a4;
  long long v12 = *(_OWORD *)(a4 + 16);
  long long v13 = *(_OWORD *)(a4 + 32);
  *(void *)(v5 + 328) = *(void *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v12;
  long long v13;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 280) = _D0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 316) = 0u;
  *(void *)uint64_t v5 = &unk_1EE33DAD0;
  __n128 result = *(__n128 *)a4;
  long long v12 = *(_OWORD *)(a4 + 16);
  long long v13 = *(_OWORD *)(a4 + 32);
  *(void *)(v5 + 328) = *(void *)(a4 + 48);
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::context_transfer_kernel_cpu::context_transfer_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE366678;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_DWORD *)(v5 + 343) = 0;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  *(void *)uint64_t v5 = &unk_1EE35FE00;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE366678;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_DWORD *)(v5 + 343) = 0;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  *(void *)uint64_t v5 = &unk_1EE35FE00;
  return result;
}

__n128 Espresso::reshape_kernel_cpu::reshape_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(_OWORD *)(v5 + 296) = xmmword_192DCA380;
  *(_WORD *)(v5 + 312) = 1;
  *(_DWORD *)(v5 + 316) = 1;
  *(void *)uint64_t v5 = &unk_1EE34EA30;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(void *)(v5 + 312) = *(void *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(_OWORD *)(v5 + 296) = xmmword_192DCA380;
  *(_WORD *)(v5 + 312) = 1;
  *(_DWORD *)(v5 + 316) = 1;
  *(void *)uint64_t v5 = &unk_1EE34EA30;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(void *)(v5 + 312) = *(void *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::reshape_like_kernel_cpu::reshape_like_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 309) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35B168;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 309) = *(_OWORD *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 309) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35B168;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 309) = *(_OWORD *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::tile_kernel_cpu::tile_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = 1;
  *(void *)uint64_t v5 = &unk_1EE332D90;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = 1;
  *(void *)uint64_t v5 = &unk_1EE332D90;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

void *Espresso::flatten_kernel_cpu::flatten_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *__n128 result = &unk_1EE34DF98;
  result[35] = *a4;
  return result;
}

{
  void *result;

  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *__n128 result = &unk_1EE34DF98;
  result[35] = *a4;
  return result;
}

__n128 Espresso::transpose_kernel_cpu::transpose_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DAF430;
  *(_DWORD *)(v5 + 296) = 4;
  *(void *)uint64_t v5 = &unk_1EE352538;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DAF430;
  *(_DWORD *)(v5 + 296) = 4;
  *(void *)uint64_t v5 = &unk_1EE352538;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::l2_normalize_kernel_cpu::l2_normalize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(result + 280) = 0x3358637BDLL;
  *(_DWORD *)(result + 288) = 2;
  *(void *)uint64_t result = &unk_1EE35AF70;
  uint64_t v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(void *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(result + 280) = 0x3358637BDLL;
  *(_DWORD *)(result + 288) = 2;
  *(void *)uint64_t result = &unk_1EE35AF70;
  uint64_t v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(void *)(result + 280) = v6;
  return result;
}

__n128 Espresso::deconvolution_kernel_cpu::deconvolution_kernel_cpu(void *a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v6 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(a1, a2);
  v6[69] = 0;
  *(_OWORD *)(v6 + 65) = 0u;
  *(_OWORD *)(v6 + 67) = 0u;
  *(_OWORD *)(v6 + 61) = 0u;
  *(_OWORD *)(v6 + 63) = 0u;
  *uint64_t v6 = &unk_1EE360338;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  long long v7 = *a4;
  long long v8 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v8;
  *((_OWORD *)v6 + 19) = v7;
  long long v9 = a4[3];
  long long v10 = a4[4];
  long long v11 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v11;
  *((_OWORD *)v6 + 22) = v9;
  *((_OWORD *)v6 + 23) = v10;
  long long v12 = a4[7];
  long long v13 = a4[8];
  long long v14 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v13;
  *((_OWORD *)v6 + 28) = v14;
  *((_OWORD *)v6 + 26) = v12;
  *uint64_t v6 = &unk_1EE35B870;
  *((_OWORD *)v6 + 38) = 0u;
  long long v15 = *a4;
  long long v16 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v16;
  *((_OWORD *)v6 + 19) = v15;
  long long v17 = a4[3];
  long long v18 = a4[4];
  long long v19 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v19;
  *((_OWORD *)v6 + 22) = v17;
  *((_OWORD *)v6 + 23) = v18;
  __n128 result = (__n128)a4[7];
  long long v21 = a4[8];
  long long v22 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v21;
  *((_OWORD *)v6 + 28) = v22;
  *((__n128 *)v6 + 26) = result;
  *((unsigned char *)v6 + 468) = *(unsigned char *)(*a2 + 125);
  return result;
}

{
  void *v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  __n128 result;
  long long v21;
  long long v22;

  uint64_t v6 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(a1, a2);
  v6[69] = 0;
  *(_OWORD *)(v6 + 65) = 0u;
  *(_OWORD *)(v6 + 67) = 0u;
  *(_OWORD *)(v6 + 61) = 0u;
  *(_OWORD *)(v6 + 63) = 0u;
  *uint64_t v6 = &unk_1EE360338;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  long long v7 = *a4;
  long long v8 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v8;
  *((_OWORD *)v6 + 19) = v7;
  long long v9 = a4[3];
  long long v10 = a4[4];
  long long v11 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v11;
  *((_OWORD *)v6 + 22) = v9;
  *((_OWORD *)v6 + 23) = v10;
  long long v12 = a4[7];
  long long v13 = a4[8];
  long long v14 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v13;
  *((_OWORD *)v6 + 28) = v14;
  *((_OWORD *)v6 + 26) = v12;
  *uint64_t v6 = &unk_1EE35B870;
  *((_OWORD *)v6 + 38) = 0u;
  long long v15 = *a4;
  long long v16 = a4[2];
  *((_OWORD *)v6 + 20) = a4[1];
  *((_OWORD *)v6 + 21) = v16;
  *((_OWORD *)v6 + 19) = v15;
  long long v17 = a4[3];
  long long v18 = a4[4];
  long long v19 = a4[6];
  *((_OWORD *)v6 + 24) = a4[5];
  *((_OWORD *)v6 + 25) = v19;
  *((_OWORD *)v6 + 22) = v17;
  *((_OWORD *)v6 + 23) = v18;
  __n128 result = (__n128)a4[7];
  long long v21 = a4[8];
  long long v22 = a4[9];
  *(void *)((char *)v6 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v6 + 27) = v21;
  *((_OWORD *)v6 + 28) = v22;
  *((__n128 *)v6 + 26) = result;
  *((unsigned char *)v6 + 468) = *(unsigned char *)(*a2 + 125);
  return result;
}

void *Espresso::prediction_smoothing_kernel_cpu::prediction_smoothing_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0x3F4CCCCD00000000;
  result[36] = 0;
  *__n128 result = &unk_1EE3672C8;
  result[37] = 0;
  result[38] = 0;
  result[35] = *a4;
  return result;
}

{
  void *result;

  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0x3F4CCCCD00000000;
  result[36] = 0;
  *__n128 result = &unk_1EE3672C8;
  result[37] = 0;
  result[38] = 0;
  result[35] = *a4;
  return result;
}

uint64_t Espresso::dropout_kernel_cpu::dropout_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v6[35] = 0x7C93F000000;
  v6[36] = 0;
  *uint64_t v6 = &unk_1EE34DE40;
  v6[37] = 0;
  v6[38] = 0;
  *(_OWORD *)(v6 + 35) = *a4;
  long long v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *long long v7 = &unk_1EE386698;
  v7[3] = 0;
  _DWORD v7[4] = 0;
  *(void *)(a1 + 296) = v7 + 3;
  *(void *)(a1 + 304) = v7;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(v8 + 88);
  uint64_t v10 = *(void *)(v8 + 96);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    long long v11 = (std::__shared_weak_count *)v7[4];
    v7[3] = v9;
    _DWORD v7[4] = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    v7[3] = v9;
    _DWORD v7[4] = 0;
  }
  int v12 = *(_DWORD *)(a1 + 284);
  long long v13 = **(int ***)(a1 + 296);
  if (v12 < 1)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    unsigned int v15 = *(_DWORD *)(v14 + 60);
    *(_DWORD *)(v14 + 60) = v15 + 1;
    int v12 = v15 + ((v15 / 0x7FFFFFFF) | ((v15 / 0x7FFFFFFF) << 31));
    if (v12 <= 1) {
      int v12 = 1;
    }
  }
  else if (v12 == 0x7FFFFFFF)
  {
    int v12 = 1;
  }
  *long long v13 = v12;
  return a1;
}

void sub_192B7C128(_Unwind_Exception *a1)
{
  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu::random_state_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu::random_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386698;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu::random_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::dropout_kernel_cpu::recreate_randomgen(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 284);
  uint64_t v2 = **(int ***)(this + 296);
  if (v1 < 1)
  {
    uint64_t v3 = *(void *)(this + 8);
    unsigned int v4 = *(_DWORD *)(v3 + 60);
    *(_DWORD *)(v3 + 60) = v4 + 1;
    int v1 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
    if (v1 <= 1) {
      int v1 = 1;
    }
  }
  else if (v1 == 0x7FFFFFFF)
  {
    int v1 = 1;
  }
  int *v2 = v1;
  return this;
}

__n128 Espresso::space_to_batch_kernel_cpu::space_to_batch_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 309) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35DDF0;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(void *)(v5 + 309) = *(void *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 309) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35DDF0;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(void *)(v5 + 309) = *(void *)(a4 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

double Espresso::space_to_depth_kernel_cpu::space_to_depth_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 2;
  *(void *)(v5 + 280) = 2;
  *(_DWORD *)(v5 + 288) = 0;
  *(void *)uint64_t v5 = &unk_1EE35DF48;
  uint64_t v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(void *)(v5 + 280) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  uint64_t v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 2;
  *(void *)(v5 + 280) = 2;
  *(_DWORD *)(v5 + 288) = 0;
  *(void *)uint64_t v5 = &unk_1EE35DF48;
  uint64_t v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(void *)(v5 + 280) = v7;
  return result;
}

__n128 Espresso::slice_kernel_cpu::slice_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA6B0;
  *(void *)(v5 + 296) = 0x100000000;
  *(void *)uint64_t v5 = &unk_1EE33E168;
  __n128 result = *a4;
  *(void *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA6B0;
  *(void *)(v5 + 296) = 0x100000000;
  *(void *)uint64_t v5 = &unk_1EE33E168;
  __n128 result = *a4;
  *(void *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::broadcast_kernel_cpu::broadcast_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = -1;
  *(void *)(v5 + 288) = -1;
  *(void *)(v5 + 296) = 0xFFFFFFFF00000001;
  *(unsigned char *)(v5 + 304) = 0;
  *(_DWORD *)(v5 + 308) = 0;
  *(unsigned char *)(v5 + 312) = 0;
  *(void *)uint64_t v5 = &unk_1EE350C70;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(unsigned char *)(v5 + 312) = *(unsigned char *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = -1;
  *(void *)(v5 + 288) = -1;
  *(void *)(v5 + 296) = 0xFFFFFFFF00000001;
  *(unsigned char *)(v5 + 304) = 0;
  *(_DWORD *)(v5 + 308) = 0;
  *(unsigned char *)(v5 + 312) = 0;
  *(void *)uint64_t v5 = &unk_1EE350C70;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(unsigned char *)(v5 + 312) = *(unsigned char *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

void *Espresso::cast_kernel_cpu::cast_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *__n128 result = &unk_1EE332608;
  result[35] = *a4;
  return result;
}

{
  void *result;

  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  result[35] = 0;
  *__n128 result = &unk_1EE332608;
  result[35] = *a4;
  return result;
}

void *Espresso::compute_stats_kernel_cpu::compute_stats_kernel_cpu(uint64_t a1, uint64_t *a2)
{
  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *__n128 result = &unk_1EE35B5C0;
  return result;
}

{
  void *result;

  __n128 result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *__n128 result = &unk_1EE35B5C0;
  return result;
}

void *Espresso::lambda_kernel_cpu::lambda_kernel_cpu(uint64_t a1, uint64_t *a2, unsigned int a3, const std::string *a4)
{
  unsigned int v5 = a3;
  __n128 result = (void *)Espresso::generic_lambda_kernel::generic_lambda_kernel(a1, a2, &v5, a4);
  *__n128 result = &unk_1EE34CE38;
  return result;
}

{
  void *result;
  unsigned int v5;

  unsigned int v5 = a3;
  __n128 result = (void *)Espresso::generic_lambda_kernel::generic_lambda_kernel(a1, a2, &v5, a4);
  *__n128 result = &unk_1EE34CE38;
  return result;
}

__n128 Espresso::patch_extractor_kernel_cpu::patch_extractor_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA5A0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 304) = 0;
  *(void *)(v5 + 312) = 0;
  *(unsigned char *)(v5 + 320) = 0;
  *(void *)uint64_t v5 = &unk_1EE35F460;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 305) = *(_OWORD *)(a4 + 25);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA5A0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 304) = 0;
  *(void *)(v5 + 312) = 0;
  *(unsigned char *)(v5 + 320) = 0;
  *(void *)uint64_t v5 = &unk_1EE35F460;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 305) = *(_OWORD *)(a4 + 25);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::crop_and_resize_kernel_cpu::crop_and_resize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 300) = 0;
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(unsigned char *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(unsigned char *)(v5 + 312) = 0;
  *(_DWORD *)(v5 + 316) = 2;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_DWORD *)(v5 + 352) = 1;
  *(unsigned char *)(v5 + 356) = 0;
  *(void *)uint64_t v5 = &unk_1EE35E100;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 341) = *(_OWORD *)(a4 + 61);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;
  long long v8;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 300) = 0;
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(unsigned char *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(unsigned char *)(v5 + 312) = 0;
  *(_DWORD *)(v5 + 316) = 2;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_DWORD *)(v5 + 352) = 1;
  *(unsigned char *)(v5 + 356) = 0;
  *(void *)uint64_t v5 = &unk_1EE35E100;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 341) = *(_OWORD *)(a4 + 61);
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 328) = v8;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

uint64_t Espresso::topk_kernel_cpu::topk_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 5;
  *(_WORD *)(result + 284) = 0;
  *(_DWORD *)(result + 288) = -1;
  *(_WORD *)(result + 292) = 256;
  *(unsigned char *)(result + 294) = 1;
  *(void *)uint64_t result = &unk_1EE332EE8;
  uint64_t v6 = *a4;
  *(void *)(result + 287) = *(uint64_t *)((char *)a4 + 7);
  *(void *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 5;
  *(_WORD *)(result + 284) = 0;
  *(_DWORD *)(result + 288) = -1;
  *(_WORD *)(result + 292) = 256;
  *(unsigned char *)(result + 294) = 1;
  *(void *)uint64_t result = &unk_1EE332EE8;
  uint64_t v6 = *a4;
  *(void *)(result + 287) = *(uint64_t *)((char *)a4 + 7);
  *(void *)(result + 280) = v6;
  return result;
}

__n128 Espresso::gather_kernel_cpu::gather_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(void *)uint64_t v5 = &unk_1EE34CCC0;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(void *)uint64_t v5 = &unk_1EE34CCC0;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

double Espresso::dynamic_quantize_kernel_cpu::dynamic_quantize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 0xFFFFFFFFLL;
  v5[35] = 0xFFFFFFFFLL;
  void *v5 = &unk_1EE3605E0;
  v5[35] = *a4;
  return result;
}

{
  void *v5;
  double result;

  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 0xFFFFFFFFLL;
  v5[35] = 0xFFFFFFFFLL;
  void *v5 = &unk_1EE3605E0;
  v5[35] = *a4;
  return result;
}

__n128 Espresso::dynamic_dequantize_kernel_cpu::dynamic_dequantize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0xFFFFFFFFLL;
  *(_DWORD *)(v5 + 288) = 0;
  *(void *)(v5 + 292) = 1065353216;
  *(void *)(v5 + 300) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)uint64_t v5 = &unk_1EE364228;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0xFFFFFFFFLL;
  *(_DWORD *)(v5 + 288) = 0;
  *(void *)(v5 + 292) = 1065353216;
  *(void *)(v5 + 300) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)uint64_t v5 = &unk_1EE364228;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

__n128 Espresso::quantized_gather_kernel_cpu::quantized_gather_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_192DCA750;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE3613B8;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  __n128 result = *a4;
  *(__n128 *)(v5 + 304) = *a4;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_192DCA750;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE3613B8;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  __n128 result = *a4;
  *(__n128 *)(v5 + 304) = *a4;
  return result;
}

uint64_t Espresso::general_concat_kernel_cpu::general_concat_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 2;
  *(_WORD *)(result + 284) = 0;
  *(void *)uint64_t result = &unk_1EE35D1B0;
  int v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 2;
  *(_WORD *)(result + 284) = 0;
  *(void *)uint64_t result = &unk_1EE35D1B0;
  int v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

__n128 Espresso::spatial_transformer_kernel_cpu::spatial_transformer_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA5A0;
  *(unsigned char *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(void *)uint64_t v5 = &unk_1EE3660A0;
  __n128 result = *a4;
  *(void *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA5A0;
  *(unsigned char *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(void *)uint64_t v5 = &unk_1EE3660A0;
  __n128 result = *a4;
  *(void *)(v5 + 296) = a4[1].n128_u64[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::copy_kernel_cpu::copy_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE332760;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

{
  uint64_t result;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE332760;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

__n128 Espresso::scatter_kernel_cpu::scatter_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(_WORD *)(v5 + 300) = 0;
  *(unsigned char *)(v5 + 302) = 0;
  *(void *)uint64_t v5 = &unk_1EE34EB88;
  __n128 result = *(__n128 *)a4;
  *(void *)(v5 + 295) = *(void *)(a4 + 15);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(_DWORD *)(v5 + 296) = -2;
  *(_WORD *)(v5 + 300) = 0;
  *(unsigned char *)(v5 + 302) = 0;
  *(void *)uint64_t v5 = &unk_1EE34EB88;
  __n128 result = *(__n128 *)a4;
  *(void *)(v5 + 295) = *(void *)(a4 + 15);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::load_random_kernel_cpu::load_random_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  long long v6 = (_OWORD *)(a1 + 292);
  uint64_t v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v7 + 280) = 0;
  *(void *)(v7 + 284) = 1065353216;
  *long long v6 = xmmword_192DCA4C0;
  v6[1] = xmmword_192DC5D50;
  *(_WORD *)(v7 + 324) = 0;
  *(void *)uint64_t v7 = &unk_1EE359970;
  *(void *)(v7 + 328) = 0;
  *(void *)(v7 + 336) = 0;
  long long v9 = *a4;
  long long v8 = a4[1];
  *(_OWORD *)(v7 + 310) = *(long long *)((char *)a4 + 30);
  *(_OWORD *)(v7 + 280) = v9;
  *(_OWORD *)(v7 + 296) = v8;
  int v10 = *(_DWORD *)(v7 + 292);
  if ((v10 & 0x80000000) == 0)
  {
    long long v11 = *(NSObject **)(*(void *)(a1 + 8) + 104);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___ZN8Espresso22load_random_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20load_random_params_tE_block_invoke;
    v13[3] = &__block_descriptor_44_e5_v8__0l;
    v13[4] = a1;
    int v14 = v10;
    dispatch_sync(v11, v13);
  }
  return a1;
}

uint64_t ___ZN8Espresso22load_random_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20load_random_params_tE_block_invoke(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 40)
     + ((*(_DWORD *)(result + 40) / 0x7FFFFFFFu) | ((*(_DWORD *)(result + 40) / 0x7FFFFFFFu) << 31));
  if (v1 <= 1) {
    unsigned int v1 = 1;
  }
  **(_DWORD **)(*(void *)(*(void *)(result + 32) + 8) + 88) = v1;
  return result;
}

uint64_t Espresso::range_kernel_cpu::range_kernel_cpu(uint64_t a1, uint64_t *a2, float a3, float a4, float a5)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)uint64_t result = &unk_1EE33E010;
  *(float *)(result + 280) = a3;
  *(float *)(result + 284) = a4;
  *(float *)(result + 288) = a5;
  return result;
}

{
  uint64_t result;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)uint64_t result = &unk_1EE33E010;
  *(float *)(result + 280) = a3;
  *(float *)(result + 284) = a4;
  *(float *)(result + 288) = a5;
  return result;
}

__n128 Espresso::matrix_band_part_kernel_cpu::matrix_band_part_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 285) = 0;
  *(void *)uint64_t v5 = &unk_1EE361200;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 285) = 0;
  *(void *)uint64_t v5 = &unk_1EE361200;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 Espresso::fill_kernel_cpu::fill_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0x100000000;
  *(void *)(v5 + 304) = 0xFFFFFFFFLL;
  *(unsigned char *)(v5 + 312) = 1;
  *(void *)uint64_t v5 = &unk_1EE332A10;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(unsigned char *)(v5 + 312) = *(unsigned char *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0x100000000;
  *(void *)(v5 + 304) = 0xFFFFFFFFLL;
  *(unsigned char *)(v5 + 312) = 1;
  *(void *)uint64_t v5 = &unk_1EE332A10;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(unsigned char *)(v5 + 312) = *(unsigned char *)(a4 + 32);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v7;
  return result;
}

uint64_t Espresso::batch_matmul_kernel_cpu::batch_matmul_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)uint64_t result = &unk_1EE35A0C0;
  *(_WORD *)(result + 280) = a4;
  *(unsigned char *)(result + 282) = BYTE2(a4);
  return result;
}

{
  uint64_t result;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)uint64_t result = &unk_1EE35A0C0;
  *(_WORD *)(result + 280) = a4;
  *(unsigned char *)(result + 282) = BYTE2(a4);
  return result;
}

uint64_t Espresso::tensor_zero_pad_kernel_cpu::tensor_zero_pad_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *(_OWORD *)(v6 + 100) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_OWORD *)(v6 + 132) = 0u;
  *(_OWORD *)(v6 + 148) = 0u;
  *(_OWORD *)(v6 + 164) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(_OWORD *)(v6 + 196) = 0u;
  *(_OWORD *)(v6 + 212) = 0u;
  *(_OWORD *)(v6 + 228) = 0u;
  *(_OWORD *)(v6 + 244) = 0u;
  *(_OWORD *)(v6 + 4) = 0u;
  *(void *)(v6 + 257) = 0;
  *(void *)a1 = &unk_1EE35FB20;
  memcpy((void *)v6, a4, 0x109uLL);
  return a1;
}

{
  uint64_t v6;

  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *(_OWORD *)(v6 + 100) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_OWORD *)(v6 + 132) = 0u;
  *(_OWORD *)(v6 + 148) = 0u;
  *(_OWORD *)(v6 + 164) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(_OWORD *)(v6 + 196) = 0u;
  *(_OWORD *)(v6 + 212) = 0u;
  *(_OWORD *)(v6 + 228) = 0u;
  *(_OWORD *)(v6 + 244) = 0u;
  *(_OWORD *)(v6 + 4) = 0u;
  *(void *)(v6 + 257) = 0;
  *(void *)a1 = &unk_1EE35FB20;
  memcpy((void *)v6, a4, 0x109uLL);
  return a1;
}

__n128 Espresso::squeeze_kernel_cpu::squeeze_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 401) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_DWORD *)(v5 + 420) = 2;
  *(void *)uint64_t v5 = &unk_1EE34EE38;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  __n128 result = *(__n128 *)(a4 + 80);
  long long v10 = *(_OWORD *)(a4 + 96);
  long long v11 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v5 + 408) = v11;
  *(__n128 *)(v5 + 360) = result;
  *(_OWORD *)(v5 + 376) = v10;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 401) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_DWORD *)(v5 + 420) = 2;
  *(void *)uint64_t v5 = &unk_1EE34EE38;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  __n128 result = *(__n128 *)(a4 + 80);
  long long v10 = *(_OWORD *)(a4 + 96);
  long long v11 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v5 + 408) = v11;
  *(__n128 *)(v5 + 360) = result;
  *(_OWORD *)(v5 + 376) = v10;
  return result;
}

__n128 Espresso::expand_dims_kernel_cpu::expand_dims_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE358080;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  __n128 result = *(__n128 *)(a4 + 80);
  long long v10 = *(_OWORD *)(a4 + 96);
  long long v11 = *(_OWORD *)(a4 + 112);
  *(void *)(v5 + 408) = *(void *)(a4 + 128);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)uint64_t v5 = &unk_1EE358080;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  __n128 result = *(__n128 *)(a4 + 80);
  long long v10 = *(_OWORD *)(a4 + 96);
  long long v11 = *(_OWORD *)(a4 + 112);
  *(void *)(v5 + 408) = *(void *)(a4 + 128);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

__n128 Espresso::array_gather_kernel_cpu::array_gather_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(void *)(v5 + 296) = 4294967294;
  *(unsigned char *)(v5 + 304) = 0;
  *(void *)uint64_t v5 = &unk_1EE359F68;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  *(_OWORD *)(v5 + 280) = v6;
  *(void *)(v5 + 296) = 4294967294;
  *(unsigned char *)(v5 + 304) = 0;
  *(void *)uint64_t v5 = &unk_1EE359F68;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::multinomial_kernel_cpu::multinomial_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  long long v6 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v6[35] = 0xFFFFFFFF00000001;
  *long long v6 = &unk_1EE359AC8;
  uint64_t v7 = *a4;
  v6[35] = *a4;
  if ((v7 & 0x8000000000000000) == 0)
  {
    long long v8 = *(NSObject **)(*(void *)(a1 + 8) + 104);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso22multinomial_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20multinomial_params_tE_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = a1;
    dispatch_sync(v8, block);
  }
  return a1;
}

uint64_t ___ZN8Espresso22multinomial_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_20multinomial_params_tE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(unsigned int **)(*(void *)(v1 + 8) + 88);
  unsigned int v3 = *(_DWORD *)(v1 + 284) + ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) | ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) << 31));
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  unsigned int *v2 = v3;
  return result;
}

__n128 Espresso::instancenorm_1d_kernel_cpu::instancenorm_1d_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0x358637BD00000000;
  *(void *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35F0F0;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0x358637BD00000000;
  *(void *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35F0F0;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 296) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::gumbel_max_kernel_cpu::gumbel_max_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v6 + 280) = 0xFFFFFFFF00000001;
  *(_WORD *)(v6 + 288) = 0;
  *(_OWORD *)(v6 + 292) = xmmword_192DCA260;
  *(unsigned char *)(v6 + 308) = 0;
  *(_DWORD *)(v6 + 312) = 0;
  *(void *)uint64_t v6 = &unk_1EE354FF0;
  *(void *)(v6 + 328) = 0;
  *(void *)(v6 + 336) = 0;
  *(void *)(v6 + 320) = 0;
  long long v8 = *a4;
  long long v7 = a4[1];
  *(_DWORD *)(v6 + 312) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(v6 + 280) = v8;
  *(_OWORD *)(v6 + 296) = v7;
  if ((*(_DWORD *)(v6 + 284) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 308))
    {
      BNNSInitGumbel();
    }
    else
    {
      long long v9 = *(NSObject **)(*(void *)(a1 + 8) + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZN8Espresso21gumbel_max_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_19gumbel_max_params_tE_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      void block[4] = a1;
      dispatch_sync(v9, block);
    }
  }
  int v10 = *(_DWORD *)(a1 + 312);
  if (v10 >= 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v13, v10, 1, 1, 1);
    long long v11 = *(std::__shared_weak_count **)(a1 + 328);
    *(_OWORD *)(a1 + 320) = v13;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  return a1;
}

void sub_192B7DBA0(_Unwind_Exception *a1)
{
  unsigned int v3 = (std::__shared_weak_count *)*((void *)v1 + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso21gumbel_max_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_19gumbel_max_params_tE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(unsigned int **)(*(void *)(v1 + 8) + 88);
  unsigned int v3 = *(_DWORD *)(v1 + 284) + ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) | ((*(_DWORD *)(v1 + 284) / 0x7FFFFFFFu) << 31));
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  unsigned int *v2 = v3;
  return result;
}

__n128 Espresso::transplant_kernel_cpu::transplant_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = v5 + 288;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 304) = 0;
  *(void *)(v5 + 312) = 0;
  *(void *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 320) = 0;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)uint64_t v5 = &unk_1EE357220;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 320) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 304) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = v5 + 288;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 304) = 0;
  *(void *)(v5 + 312) = 0;
  *(void *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 320) = 0;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)uint64_t v5 = &unk_1EE357220;
  __n128 result = *a4;
  *(_DWORD *)(v5 + 320) = a4[1].n128_u32[0];
  *(__n128 *)(v5 + 304) = result;
  return result;
}

__n128 Espresso::general_slice_kernel_cpu::general_slice_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_192E06E0C;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_192E06E0C;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(void *)(v5 + 372) = 0xFFFFFFFF00000000;
  *(void *)uint64_t v5 = &unk_1EE35BAF0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  __n128 result = (__n128)a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(_DWORD *)(v5 + 376) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  __n128 result;
  long long v9;
  long long v10;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_192E06E0C;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_192E06E0C;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(void *)(v5 + 372) = 0xFFFFFFFF00000000;
  *(void *)uint64_t v5 = &unk_1EE35BAF0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  __n128 result = (__n128)a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(_DWORD *)(v5 + 376) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

double Espresso::stack_nd_kernel_cpu::stack_nd_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  *(void *)uint64_t v5 = &unk_1EE3503F0;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(void *)(v5 + 352) = 0;
  *(_DWORD *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  double result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  *(void *)uint64_t v5 = &unk_1EE3503F0;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(void *)(v5 + 352) = 0;
  *(_DWORD *)(v5 + 280) = *a4;
  return result;
}

uint64_t Espresso::split_nd_kernel_cpu::split_nd_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(a1 + 280) = 0x200000000;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)a1 = &unk_1EE350298;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  memcpy((void *)(v6 + 280), a4, 0x208uLL);
  return a1;
}

{
  uint64_t v6;

  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(a1 + 280) = 0x200000000;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)a1 = &unk_1EE350298;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  memcpy((void *)(v6 + 280), a4, 0x208uLL);
  return a1;
}

uint64_t Espresso::softmax_nd_kernel_cpu::softmax_nd_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE3570C8;
  *(void *)(result + 296) = 0;
  *(void *)(result + 304) = 0;
  *(void *)(result + 288) = 0;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

{
  uint64_t result;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE3570C8;
  *(void *)(result + 296) = 0;
  *(void *)(result + 304) = 0;
  *(void *)(result + 288) = 0;
  *(_DWORD *)(result + 280) = *a4;
  return result;
}

double Espresso::sliding_windows_kernel_cpu::sliding_windows_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 0x100000000;
  *(void *)(v5 + 280) = 0x100000000;
  *(_DWORD *)(v5 + 288) = 1;
  *(void *)uint64_t v5 = &unk_1EE35F870;
  uint64_t v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(void *)(v5 + 280) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  uint64_t v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 0x100000000;
  *(void *)(v5 + 280) = 0x100000000;
  *(_DWORD *)(v5 + 288) = 1;
  *(void *)uint64_t v5 = &unk_1EE35F870;
  uint64_t v7 = *a4;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a4 + 2);
  *(void *)(v5 + 280) = v7;
  return result;
}

double Espresso::reverse_seq_kernel_cpu::reverse_seq_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 0x100000000;
  v5[35] = 0x100000000;
  void *v5 = &unk_1EE359C80;
  v5[35] = *a4;
  return result;
}

{
  void *v5;
  double result;

  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 0x100000000;
  v5[35] = 0x100000000;
  void *v5 = &unk_1EE359C80;
  v5[35] = *a4;
  return result;
}

uint64_t Espresso::cross_entropy_kernel_cpu::cross_entropy_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(result + 280) = 0;
  *(_DWORD *)(result + 284) = 1;
  *(unsigned char *)(result + 288) = 1;
  *(void *)uint64_t result = &unk_1EE35B718;
  uint64_t v6 = *a4;
  *(unsigned char *)(result + 288) = *((unsigned char *)a4 + 8);
  *(void *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(result + 280) = 0;
  *(_DWORD *)(result + 284) = 1;
  *(unsigned char *)(result + 288) = 1;
  *(void *)uint64_t result = &unk_1EE35B718;
  uint64_t v6 = *a4;
  *(unsigned char *)(result + 288) = *((unsigned char *)a4 + 8);
  *(void *)(result + 280) = v6;
  return result;
}

uint64_t Espresso::sgd_kernel_cpu::sgd_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(result + 280) = 0;
  *(void *)(result + 284) = 0x100000000;
  *(void *)uint64_t result = &unk_1EE332000;
  uint64_t v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(void *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(result + 280) = 0;
  *(void *)(result + 284) = 0x100000000;
  *(void *)uint64_t result = &unk_1EE332000;
  uint64_t v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(void *)(result + 280) = v6;
  return result;
}

__n128 Espresso::adam_kernel_cpu::adam_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F7FBE773F666666;
  v5[36] = 0x1322BCC77;
  void *v5 = &unk_1EE3322E8;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  void *v5;
  __n128 result;

  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F7FBE773F666666;
  v5[36] = 0x1322BCC77;
  void *v5 = &unk_1EE3322E8;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

uint64_t Espresso::gather_nd_kernel_cpu::gather_nd_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(void *)uint64_t result = &unk_1EE351158;
  *(void *)(result + 304) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 296) = 0;
  uint64_t v6 = *a4;
  *(void *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(void *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(void *)uint64_t result = &unk_1EE351158;
  *(void *)(result + 304) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 296) = 0;
  uint64_t v6 = *a4;
  *(void *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(void *)(result + 280) = v6;
  return result;
}

uint64_t Espresso::scatter_nd_kernel_cpu::scatter_nd_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(void *)uint64_t result = &unk_1EE356F30;
  *(void *)(result + 304) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 296) = 0;
  uint64_t v6 = *a4;
  *(void *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(void *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_WORD *)(result + 292) = 257;
  *(void *)uint64_t result = &unk_1EE356F30;
  *(void *)(result + 304) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 296) = 0;
  uint64_t v6 = *a4;
  *(void *)(result + 286) = *(uint64_t *)((char *)a4 + 6);
  *(void *)(result + 280) = v6;
  return result;
}

void *Espresso::nonzero_kernel_cpu::nonzero_kernel_cpu(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *uint64_t result = &unk_1EE34E6C0;
  result[37] = 0;
  result[38] = 0;
  result[36] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *uint64_t result = &unk_1EE34E6C0;
  result[37] = 0;
  result[38] = 0;
  result[36] = 0;
  return result;
}

void *Espresso::precompiled_segment_kernel_cpu::precompiled_segment_kernel_cpu(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *uint64_t result = &unk_1EE365F48;
  return result;
}

{
  void *result;

  uint64_t result = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  *uint64_t result = &unk_1EE365F48;
  return result;
}

__n128 Espresso::one_hot_kernel_cpu::one_hot_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F80000000000000;
  v5[36] = 0xFFFFFFFF00000000;
  void *v5 = &unk_1EE34E818;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  void *v5;
  __n128 result;

  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0x3F80000000000000;
  v5[36] = 0xFFFFFFFF00000000;
  void *v5 = &unk_1EE34E818;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

uint64_t Espresso::cumsum_kernel_cpu::cumsum_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, _WORD *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_WORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE34C8B8;
  *(_WORD *)(result + 280) = *a4;
  return result;
}

{
  uint64_t result;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_WORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE34C8B8;
  *(_WORD *)(result + 280) = *a4;
  return result;
}

double Espresso::sparse_inner_product_kernel_cpu::sparse_inner_product_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(void *)(v5 + 304) = 0x100000001;
  *(_DWORD *)(v5 + 312) = 0;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE367420;
  double result = 0.0;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  uint64_t v7 = *a4;
  *(_DWORD *)(v5 + 312) = *((_DWORD *)a4 + 2);
  *(void *)(v5 + 304) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  uint64_t v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(void *)(v5 + 304) = 0x100000001;
  *(_DWORD *)(v5 + 312) = 0;
  *(void *)(v5 + 320) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE367420;
  double result = 0.0;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  uint64_t v7 = *a4;
  *(_DWORD *)(v5 + 312) = *((_DWORD *)a4 + 2);
  *(void *)(v5 + 304) = v7;
  return result;
}

uint64_t Espresso::grid_sampling_kernel_cpu::grid_sampling_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_WORD *)(result + 284) = 0;
  *(void *)uint64_t result = &unk_1EE35C8C0;
  int v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(_WORD *)(result + 284) = 0;
  *(void *)uint64_t result = &unk_1EE35C8C0;
  int v6 = *a4;
  *(_WORD *)(result + 284) = *((_WORD *)a4 + 2);
  *(_DWORD *)(result + 280) = v6;
  return result;
}

__n128 Espresso::resample_kernel_cpu::resample_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 1;
  *(void *)(v5 + 292) = 0;
  *(void *)(v5 + 284) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(unsigned char *)(v5 + 304) = 1;
  *(void *)uint64_t v5 = &unk_1EE350140;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 1;
  *(void *)(v5 + 292) = 0;
  *(void *)(v5 + 284) = 0;
  *(_DWORD *)(v5 + 300) = 0;
  *(unsigned char *)(v5 + 304) = 1;
  *(void *)uint64_t v5 = &unk_1EE350140;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 289) = *(_OWORD *)(a4 + 9);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

double Espresso::argsort_kernel_cpu::argsort_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 284) = 1;
  *(void *)uint64_t v5 = &unk_1EE34D448;
  *(void *)(v5 + 368) = 0;
  *(void *)(v5 + 376) = 0;
  *(void *)(v5 + 360) = 0;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  int v7 = *a4;
  *(unsigned char *)(v5 + 284) = *((unsigned char *)a4 + 4);
  *(_DWORD *)(v5 + 280) = v7;
  return result;
}

{
  uint64_t v5;
  double result;
  int v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 284) = 1;
  *(void *)uint64_t v5 = &unk_1EE34D448;
  *(void *)(v5 + 368) = 0;
  *(void *)(v5 + 376) = 0;
  *(void *)(v5 + 360) = 0;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  int v7 = *a4;
  *(unsigned char *)(v5 + 284) = *((unsigned char *)a4 + 4);
  *(_DWORD *)(v5 + 280) = v7;
  return result;
}

uint64_t Espresso::argsort_kernel_cpu::fill_tmp_indices(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 288);
  uint64_t v2 = *(void *)(this + 296);
  uint64_t v3 = v2 - v1;
  if (v2 != v1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = v3 >> 3;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      *(void *)(v1 + 8 * v4) = v4;
      ++v4;
    }
    while (v5 != v4);
  }
  return this;
}

float Espresso::argsort_kernel_cpu::size_t_to_fp32(Espresso::argsort_kernel_cpu *this, unint64_t *a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  for (; a6; --a6)
  {
    float result = (float)*a2;
    *a4 = result;
    a4 += a5;
    a2 += a3;
  }
  return result;
}

__n128 Espresso::local_correlation_kernel_cpu::local_correlation_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA740;
  *(void *)uint64_t v5 = &unk_1EE3638A8;
  __n128 result = *a4;
  *(__n128 *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA740;
  *(void *)uint64_t v5 = &unk_1EE3638A8;
  __n128 result = *a4;
  *(__n128 *)(v5 + 280) = *a4;
  return result;
}

__n128 Espresso::conv3d_kernel_cpu::conv3d_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(void *)(v5 + 408) = 0;
  *(void *)(v5 + 416) = 0;
  *(void *)uint64_t v5 = &unk_1EE3578B8;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  long long v8 = a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(void *)uint64_t v5 = &unk_1EE34C6D8;
  long long v11 = *a4;
  long long v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  __n128 result = (__n128)a4[3];
  long long v14 = a4[4];
  long long v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  __n128 result;
  long long v14;
  long long v15;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(void *)(v5 + 408) = 0;
  *(void *)(v5 + 416) = 0;
  *(void *)uint64_t v5 = &unk_1EE3578B8;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  long long v8 = a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(void *)uint64_t v5 = &unk_1EE34C6D8;
  long long v11 = *a4;
  long long v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  __n128 result = (__n128)a4[3];
  long long v14 = a4[4];
  long long v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

__n128 Espresso::slice_update_kernel_cpu::slice_update_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA6B0;
  *(void *)(v5 + 296) = 0x100000000;
  *(_DWORD *)(v5 + 304) = 0;
  *(void *)uint64_t v5 = &unk_1EE35B310;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

{
  uint64_t v5;
  __n128 result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA6B0;
  *(void *)(v5 + 296) = 0x100000000;
  *(_DWORD *)(v5 + 304) = 0;
  *(void *)uint64_t v5 = &unk_1EE35B310;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v5 + 292) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::static_quantize_kernel_cpu::static_quantize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = -1;
  *(void *)(result + 284) = 1065353216;
  *(void *)uint64_t result = &unk_1EE35F9C8;
  uint64_t v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(void *)(result + 280) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = -1;
  *(void *)(result + 284) = 1065353216;
  *(void *)uint64_t result = &unk_1EE35F9C8;
  uint64_t v6 = *a4;
  *(_DWORD *)(result + 288) = *((_DWORD *)a4 + 2);
  *(void *)(result + 280) = v6;
  return result;
}

__n128 Espresso::static_dequantize_kernel_cpu::static_dequantize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = -1;
  *(void *)(v5 + 308) = 1065353216;
  *(void *)(v5 + 316) = 0;
  *(_DWORD *)(v5 + 324) = 1065353216;
  *(void *)(v5 + 336) = 0;
  *(void *)(v5 + 344) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE363BE8;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 320) = v7;
  return result;
}

{
  uint64_t v5;
  __n128 result;
  long long v7;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = -1;
  *(void *)(v5 + 308) = 1065353216;
  *(void *)(v5 + 316) = 0;
  *(_DWORD *)(v5 + 324) = 1065353216;
  *(void *)(v5 + 336) = 0;
  *(void *)(v5 + 344) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)uint64_t v5 = &unk_1EE363BE8;
  __n128 result = *(__n128 *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 320) = v7;
  return result;
}

uint64_t Espresso::fused_convolution_grad_kernel_cpu::fused_convolution_grad_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 280));
  *(_DWORD *)(a1 + 448) = 65793;
  *(void *)a1 = &unk_1EE368060;
  long long v7 = *a4;
  long long v8 = a4[2];
  v9[1] = a4[1];
  v9[2] = v8;
  *long long v9 = v7;
  long long v10 = a4[3];
  long long v11 = a4[4];
  long long v12 = a4[6];
  v9[5] = a4[5];
  v9[6] = v12;
  v9[3] = v10;
  v9[4] = v11;
  long long v13 = a4[7];
  long long v14 = a4[8];
  long long v15 = a4[9];
  *(_OWORD *)((char *)v9 + 156) = *(long long *)((char *)a4 + 156);
  v9[8] = v14;
  v9[9] = v15;
  v9[7] = v13;
  return a1;
}

{
  uint64_t v6;
  long long v7;
  long long v8;
  _OWORD *v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;

  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 280));
  *(_DWORD *)(a1 + 448) = 65793;
  *(void *)a1 = &unk_1EE368060;
  long long v7 = *a4;
  long long v8 = a4[2];
  v9[1] = a4[1];
  v9[2] = v8;
  *long long v9 = v7;
  long long v10 = a4[3];
  long long v11 = a4[4];
  long long v12 = a4[6];
  v9[5] = a4[5];
  v9[6] = v12;
  v9[3] = v10;
  v9[4] = v11;
  long long v13 = a4[7];
  long long v14 = a4[8];
  long long v15 = a4[9];
  *(_OWORD *)((char *)v9 + 156) = *(long long *)((char *)a4 + 156);
  v9[8] = v14;
  v9[9] = v15;
  v9[7] = v13;
  return a1;
}

__n128 Espresso::fused_inner_product_grad_kernel_cpu::fused_inner_product_grad_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE369AA8;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  __n128 result = *(__n128 *)(a4 + 80);
  long long v10 = *(_OWORD *)(a4 + 96);
  long long v11 = *(_OWORD *)(a4 + 112);
  *(void *)(v5 + 407) = *(void *)(a4 + 127);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;

  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE369AA8;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 344) = v8;
  *(_OWORD *)(v5 + 296) = v6;
  *(_OWORD *)(v5 + 312) = v7;
  __n128 result = *(__n128 *)(a4 + 80);
  long long v10 = *(_OWORD *)(a4 + 96);
  long long v11 = *(_OWORD *)(a4 + 112);
  *(void *)(v5 + 407) = *(void *)(a4 + 127);
  *(_OWORD *)(v5 + 376) = v10;
  *(_OWORD *)(v5 + 392) = v11;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

double Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 280;
  uint64_t v3 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)uint64_t v3 = &unk_1EE356C50;
  *(unsigned char *)(v3 + 320) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v3 + 328) = 0xFFFFFFFF00000000;
  *(void *)(v3 + 336) = _D1;
  *(void *)(v2 + 124) = 0;
  *(void *)&double result = 0x100000001;
  *(_OWORD *)uint64_t v2 = xmmword_192DCA240;
  *(void *)(v3 + 296) = 0x3F80000000000000;
  *(void *)(v3 + 304) = 1065353216;
  *(void *)(v2 + 84) = 0;
  *(_DWORD *)(v3 + 324) = 0;
  *(void *)(v3 + 312) = 0;
  *(void *)(v2 + 100) = 0;
  *(void *)(v2 + 116) = 0;
  *(void *)(v2 + 108) = 0;
  *(_WORD *)(v3 + 412) = 257;
  *(unsigned char *)(v3 + 414) = 1;
  return result;
}

__n128 Espresso::deconv3d_kernel_cpu::deconv3d_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(void *)(v5 + 408) = 0;
  *(void *)(v5 + 416) = 0;
  *(void *)uint64_t v5 = &unk_1EE357A98;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  long long v8 = a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(void *)uint64_t v5 = &unk_1EE34F1A8;
  long long v11 = *a4;
  long long v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  __n128 result = (__n128)a4[3];
  long long v14 = a4[4];
  long long v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  __n128 result;
  long long v14;
  long long v15;

  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(void *)(v5 + 408) = 0;
  *(void *)(v5 + 416) = 0;
  *(void *)uint64_t v5 = &unk_1EE357A98;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  long long v8 = a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v9;
  *(_OWORD *)(v5 + 384) = v10;
  *(_OWORD *)(v5 + 352) = v8;
  *(void *)uint64_t v5 = &unk_1EE34F1A8;
  long long v11 = *a4;
  long long v12 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v12;
  *(_OWORD *)(v5 + 304) = v11;
  __n128 result = (__n128)a4[3];
  long long v14 = a4[4];
  long long v15 = a4[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a4 + 24);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 384) = v15;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

__n128 Espresso::general_slice_update_kernel_cpu::general_slice_update_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_192E06E0C;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_192E06E0C;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(_DWORD *)(v5 + 372) = 0;
  *(void *)(v5 + 376) = 0xFFFFFFFFLL;
  *(void *)uint64_t v5 = &unk_1EE366520;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  __n128 result = (__n128)a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(void *)(v5 + 376) = *((void *)a4 + 12);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  __n128 result;
  long long v9;
  long long v10;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 316) = 1;
  *(_OWORD *)(v5 + 300) = xmmword_192E06E0C;
  *(_DWORD *)(v5 + 336) = 1;
  *(_OWORD *)(v5 + 320) = xmmword_192E06E0C;
  *(_OWORD *)(v5 + 340) = 0u;
  *(_OWORD *)(v5 + 356) = 0u;
  *(_DWORD *)(v5 + 372) = 0;
  *(void *)(v5 + 376) = 0xFFFFFFFFLL;
  *(void *)uint64_t v5 = &unk_1EE366520;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 296) = a4[1];
  *(_OWORD *)(v5 + 312) = v7;
  *(_OWORD *)(v5 + 280) = v6;
  __n128 result = (__n128)a4[3];
  long long v9 = a4[4];
  long long v10 = a4[5];
  *(void *)(v5 + 376) = *((void *)a4 + 12);
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(__n128 *)(v5 + 328) = result;
  return result;
}

__n128 Espresso::resize_nearest_neighbor_kernel_cpu::resize_nearest_neighbor_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 *a4)
{
  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  void *v5 = &unk_1EE369660;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

{
  void *v5;
  __n128 result;

  uint64_t v5 = (void *)Espresso::base_kernel::base_kernel(a1, a2);
  v5[35] = 0;
  v5[36] = 0;
  void *v5 = &unk_1EE369660;
  __n128 result = *a4;
  *(__n128 *)(v5 + 35) = *a4;
  return result;
}

char *Espresso::einsum_kernel_cpu::einsum_kernel_cpu(char *a1, uint64_t *a2, uint64_t a3, const std::string *a4)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  long long v7 = (const std::string *)(v6 + 280);
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(void *)uint64_t v6 = &unk_1EE34CB68;
  std::string::operator=((std::string *)(v6 + 280), a4);
  if (v7 != a4)
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 304, a4[1].__r_.__value_.__l.__data_, a4[1].__r_.__value_.__l.__size_, (uint64_t)(a4[1].__r_.__value_.__l.__size_ - a4[1].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 328, a4[2].__r_.__value_.__l.__data_, a4[2].__r_.__value_.__l.__size_, (uint64_t)(a4[2].__r_.__value_.__l.__size_ - a4[2].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 352, a4[3].__r_.__value_.__l.__data_, a4[3].__r_.__value_.__l.__size_, (uint64_t)(a4[3].__r_.__value_.__l.__size_ - a4[3].__r_.__value_.__r.__words[0]) >> 2);
  }
  return a1;
}

void sub_192B7F828(_Unwind_Exception *a1)
{
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
  _Unwind_Resume(a1);
}

double Espresso::linear_quantize_kernel_cpu::linear_quantize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = -1;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35F248;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_192DC3600;
  *(void *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_192DC3600;
  *(void *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(void *)(v5 + 448) = 0;
  *(void *)(v5 + 456) = 0;
  *(void *)(v5 + 440) = 0;
  *(void *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  double result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = -1;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(void *)uint64_t v5 = &unk_1EE35F248;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_192DC3600;
  *(void *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_192DC3600;
  *(void *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(void *)(v5 + 448) = 0;
  *(void *)(v5 + 456) = 0;
  *(void *)(v5 + 440) = 0;
  *(void *)(v5 + 280) = *a4;
  return result;
}

double Espresso::linear_dequantize_kernel_cpu::linear_dequantize_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = -1;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(void *)uint64_t v5 = &unk_1EE363750;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_192DC3600;
  *(void *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_192DC3600;
  *(void *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(void *)(v5 + 448) = 0;
  *(void *)(v5 + 456) = 0;
  *(void *)(v5 + 440) = 0;
  *(void *)(v5 + 280) = *a4;
  return result;
}

{
  uint64_t v5;
  double result;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = -1;
  double result = 0.0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(void *)uint64_t v5 = &unk_1EE363750;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(void *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 320) = xmmword_192DC3600;
  *(void *)(v5 + 336) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 384) = xmmword_192DC3600;
  *(void *)(v5 + 400) = 0xFFFFFFFF00000001;
  *(void *)(v5 + 448) = 0;
  *(void *)(v5 + 456) = 0;
  *(void *)(v5 + 440) = 0;
  *(void *)(v5 + 280) = *a4;
  return result;
}

uint64_t Espresso::furthest_point_sampling_kernel_cpu::furthest_point_sampling_kernel_cpu(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v7 + 280) = 2;
  *(_DWORD *)(v7 + 288) = -2;
  *(void *)uint64_t v7 = &unk_1EE368F38;
  uint64_t v8 = *a4;
  int v9 = *((_DWORD *)a4 + 2);
  *(_DWORD *)(v7 + 288) = v9;
  *(void *)(v7 + 280) = v8;
  *(_DWORD *)(v7 + 292) = a3;
  if ((v9 & 0x80000000) == 0)
  {
    long long v10 = *(NSObject **)(*(void *)(a1 + 8) + 104);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso34furthest_point_sampling_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_32furthest_point_sampling_params_tE_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = a1;
    dispatch_sync(v10, block);
  }
  return a1;
}

uint64_t ___ZN8Espresso34furthest_point_sampling_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_32furthest_point_sampling_params_tE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(unsigned int **)(*(void *)(v1 + 8) + 88);
  unsigned int v3 = *(_DWORD *)(v1 + 288) + ((*(_DWORD *)(v1 + 288) / 0x7FFFFFFFu) | ((*(_DWORD *)(v1 + 288) / 0x7FFFFFFFu) << 31));
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  unsigned int *v2 = v3;
  return result;
}

void *Espresso::tunneled_ane_op_kernel_cpu::tunneled_ane_op_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  double result = (void *)Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(a1, a2, a4);
  *double result = &unk_1EE35FC78;
  return result;
}

{
  void *result;

  double result = (void *)Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel(a1, a2, a4);
  *double result = &unk_1EE35FC78;
  return result;
}

void *Espresso::tunneled_ane_unit_kernel_cpu::tunneled_ane_unit_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  double result = (void *)Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(a1, a2, a4);
  *double result = &unk_1EE363D80;
  return result;
}

{
  void *result;

  double result = (void *)Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel(a1, a2, a4);
  *double result = &unk_1EE363D80;
  return result;
}

double Espresso::plane_rw_cpu::plane_rw_cpu(uint64_t a1, uint64_t *a2, int a3, void *a4)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 875704422;
  *(void *)(v6 + 280) = 875704422;
  *(void *)uint64_t v6 = &unk_1EE32AA78;
  *(void *)(v6 + 280) = *a4;
  *(_DWORD *)(v6 + 288) = a3;
  return result;
}

{
  uint64_t v6;
  double result;

  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&double result = 875704422;
  *(void *)(v6 + 280) = 875704422;
  *(void *)uint64_t v6 = &unk_1EE32AA78;
  *(void *)(v6 + 280) = *a4;
  *(_DWORD *)(v6 + 288) = a3;
  return result;
}

uint64_t Espresso::degamma_kernel_cpu::degamma_kernel_cpu(uint64_t a1, uint64_t *a2, int a3, _DWORD *a4)
{
  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE34DCE8;
  *(_DWORD *)(result + 280) = *a4;
  *(_DWORD *)(result + 284) = a3;
  return result;
}

{
  uint64_t result;

  uint64_t result = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(result + 280) = 0;
  *(void *)uint64_t result = &unk_1EE34DCE8;
  *(_DWORD *)(result + 280) = *a4;
  *(_DWORD *)(result + 284) = a3;
  return result;
}

Espresso::multi_head_aot_helper_t *Espresso::multi_head_aot_helper_t::multi_head_aot_helper_t(Espresso::multi_head_aot_helper_t *this, Espresso::net *a2)
{
  *(void *)&long long v72 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v48 = (char *)this + 8;
  *(void *)this = (char *)this + 8;
  unsigned int v3 = (const void **)*((void *)a2 + 83);
  uint64_t v4 = (const void **)*((void *)a2 + 84);
  *((void *)this + 4) = 0;
  int v58 = (uint64_t *)((char *)this + 32);
  *((void *)this + 3) = (char *)this + 32;
  uint64_t v52 = (uint64_t **)((char *)this + 24);
  *((void *)this + 5) = 0;
  while (v3 != v4)
  {
    std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v52, v58, v3, (uint64_t)v3);
    v3 += 3;
  }
  Espresso::reload_network_layers(a2, (uint64_t *)&v66);
  uint64_t v5 = v66;
  Espresso::multi_head_aot_helper_t::compute_outputs_per_layer(this, v66, v65);
  std::string::basic_string[abi:ne180100]<0>(&v69, "default");
  unint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  int v59 = &v62;
  LOBYTE(v60) = 0;
  unint64_t v62 = (std::string *)operator new(0x18uLL);
  uint64_t v63 = v62;
  uint64_t v64 = (char *)&v62[1];
  uint64_t v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, &v69, &v72, v62);
  uint64_t v63 = v6;
  if (v71 < 0)
  {
    operator delete((void *)v69);
    uint64_t v6 = v63;
  }
  uint64_t v7 = (void *)*((void *)v5 + 97);
  if (v7 != (void *)((char *)v5 + 784))
  {
    do
    {
      uint64_t v8 = (long long *)(v7 + 4);
      if (v6 >= (std::string *)v64)
      {
        uint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v62, (uint64_t)v8);
      }
      else
      {
        if (*((char *)v7 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v7[4], v7[5]);
        }
        else
        {
          long long v9 = *v8;
          v6->__r_.__value_.__r.__words[2] = v7[6];
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
        }
        ++v6;
      }
      uint64_t v63 = v6;
      long long v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          long long v11 = v10;
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v11 = (void *)v7[2];
          BOOL v18 = *v11 == (void)v7;
          uint64_t v7 = v11;
        }
        while (!v18);
      }
      uint64_t v7 = v11;
    }
    while (v11 != (void *)((char *)v5 + 784));
  }
  long long v12 = v62;
  if (v62 != v6)
  {
    long long v13 = v66;
    uint64_t v49 = v6;
    do
    {
      int v59 = 0;
      int v60 = 0;
      uint64_t v61 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, *((void *)v13 + 83), *((void *)v13 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 + 84) - *((void *)v13 + 83)) >> 3));
      int v14 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
      if (v14 < 0)
      {
        if (v12->__r_.__value_.__l.__size_ != 7) {
          goto LABEL_30;
        }
        long long v15 = (std::string *)v12->__r_.__value_.__r.__words[0];
      }
      else
      {
        long long v15 = v12;
        if (v14 != 7) {
          goto LABEL_30;
        }
      }
      int data = (int)v15->__r_.__value_.__l.__data_;
      int v17 = *(_DWORD *)((char *)v15->__r_.__value_.__r.__words + 3);
      BOOL v18 = data == 1634100580 && v17 == 1953264993;
      if (!v18)
      {
LABEL_30:
        *(void *)&long long v69 = v12;
        long long v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v13 + 97, v12, (long long **)&v69);
        if (&v59 != (std::string ***)(v19 + 7)) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v59, (std::string *)v19[7], (std::string *)v19[8], 0xAAAAAAAAAAAAAAABLL * ((v19[8] - v19[7]) >> 3));
        }
      }
      uint64_t v20 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)this, &v68, v12);
      long long v21 = (char *)*v20;
      if (!*v20)
      {
        long long v22 = (uint64_t **)v20;
        long long v21 = (char *)operator new(0x68uLL);
        *(void *)&long long v69 = v21;
        *((void *)&v69 + 1) = v48;
        char v70 = 0;
        int v23 = (std::string *)(v21 + 32);
        if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v23, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v24 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          *((void *)v21 + 6) = *((void *)&v12->__r_.__value_.__l + 2);
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        }
        *(_OWORD *)(v21 + 88) = 0u;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        char v70 = 1;
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this, v68, v22, (uint64_t *)v21);
        *(void *)&long long v69 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100]((uint64_t)&v69);
      }
      std::string::operator=((std::string *)(v21 + 56), v12);
      int v55 = v21 + 80;
      std::vector<BOOL>::resize((uint64_t)(v21 + 80), (uint64_t)(*((void *)v66 + 5) - *((void *)v66 + 4)) >> 4);
      uint64_t v50 = v66;
      uint64_t v51 = v12;
      uint64_t v25 = *((void *)v66 + 5) - *((void *)v66 + 4);
      if (v25)
      {
        uint64_t v26 = v25 >> 4;
        uint64_t v53 = v59;
        long long v57 = v60;
        do
        {
          unint64_t v54 = v26 - 1;
          if (v53 != (std::string **)v57)
          {
            uint64_t v27 = v53;
            unint64_t v28 = v54 >> 6;
            uint64_t v29 = 1 << v54;
            uint64_t v30 = *v52;
            uint64_t v31 = &v65[0][40 * v54];
            do
            {
              if (v30 == v58)
              {
                unint64_t v32 = 0;
              }
              else
              {
                unint64_t v32 = 0;
                int v33 = *((char *)v27 + 23);
                if (v33 >= 0) {
                  unsigned int v34 = (std::string *)*((unsigned __int8 *)v27 + 23);
                }
                else {
                  unsigned int v34 = v27[1];
                }
                float v35 = v30;
                do
                {
                  uint64_t v36 = *((unsigned __int8 *)v35 + 55);
                  if ((v36 & 0x80u) == 0) {
                    uint64_t v37 = *((unsigned __int8 *)v35 + 55);
                  }
                  else {
                    uint64_t v37 = v35[5];
                  }
                  if ((std::string *)v37 == v34)
                  {
                    int v38 = (const void **)(v35 + 4);
                    if (v33 >= 0) {
                      int v39 = (unsigned __int8 *)v27;
                    }
                    else {
                      int v39 = (unsigned __int8 *)*v27;
                    }
                    if ((v36 & 0x80) != 0)
                    {
                      if (!memcmp(*v38, v39, v35[5])) {
                        break;
                      }
                    }
                    else
                    {
                      if (!*((unsigned char *)v35 + 55)) {
                        break;
                      }
                      while (*(unsigned __int8 *)v38 == *v39)
                      {
                        int v38 = (const void **)((char *)v38 + 1);
                        ++v39;
                        if (!--v36) {
                          goto LABEL_67;
                        }
                      }
                    }
                  }
                  int v40 = (uint64_t *)v35[1];
                  if (v40)
                  {
                    do
                    {
                      float v41 = v40;
                      int v40 = (uint64_t *)*v40;
                    }
                    while (v40);
                  }
                  else
                  {
                    do
                    {
                      float v41 = (uint64_t *)v35[2];
                      BOOL v18 = *v41 == (void)v35;
                      float v35 = v41;
                    }
                    while (!v18);
                  }
                  ++v32;
                  float v35 = v41;
                }
                while (v41 != v58);
              }
LABEL_67:
              if (v32 >= *((void *)this + 5))
              {
                if (*((char *)v27 + 23) < 0) {
                  uint64_t v27 = (std::string **)*v27;
                }
                *(void *)&long long v69 = v27;
                Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("multi_head_aot_helper_t: Output %s not found", &v69);
              }
              unint64_t v42 = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v31, v32);
              uint64_t v43 = *(void *)(*v55 + 8 * v28);
              unint64_t v44 = v43 & v29 | v42;
              uint64_t v45 = v43 & ~(1 << v54);
              uint64_t v46 = v43 | v29;
              if (!v44) {
                uint64_t v46 = v45;
              }
              *(void *)(*v55 + 8 * v28) = v46;
              v27 += 3;
            }
            while (v27 != (std::string **)v57);
          }
          uint64_t v26 = v54;
        }
        while (v54);
      }
      *(void *)&long long v69 = &v59;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
      long long v13 = v50;
      ++v12;
    }
    while (&v51[1] != v49);
  }
  *(void *)&long long v69 = &v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = v65;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  return this;
}

void sub_192B803A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char **a20,void **a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,char a27)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (*(char *)(v27 - 97) < 0) {
    operator delete(*(void **)(v27 - 120));
  }
  a24 = (void **)&a27;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](&a24);
  uint64_t v29 = *(std::__shared_weak_count **)(v27 - 144);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  std::__tree<std::string>::destroy(a14, *a20);
  std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(a18, *(void *)(a18 + 8));
  _Unwind_Resume(a1);
}

void Espresso::multi_head_aot_helper_t::compute_outputs_per_layer(Espresso::multi_head_aot_helper_t *this@<X0>, Espresso::net *a2@<X1>, char **a3@<X8>)
{
  Espresso::net::get_producers_of_blobs(a2, (uint64_t)v22);
  std::vector<std::unordered_set<unsigned long>>::vector(a3, (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  unint64_t v21 = 0;
  uint64_t v6 = (char *)*((void *)this + 3);
  uint64_t v7 = (char *)this + 32;
  if (v6 != (char *)this + 32)
  {
    do
    {
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v22, (uint64_t)(v6 + 32));
      if (!v8) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v9 = v8[5];
      long long v10 = operator new(8uLL);
      v17[2] = 0;
      std::vector<int> __p = v10;
      *long long v10 = v9;
      long long v19 = v10 + 1;
      uint64_t v20 = v10 + 1;
      v17[0] = 0;
      v17[1] = 0;
      Espresso::net::recurse_layer_producers((uint64_t)a2, v22, v9, (uint64_t)&__p, (uint64_t)v17, 0);
      long long v11 = __p;
      long long v12 = v19;
      while (v11 != v12)
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&(*a3)[40 * *v11++], &v21, &v21);
      ++v21;
      int v23 = (void **)v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (__p)
      {
        long long v19 = __p;
        operator delete(__p);
      }
      long long v13 = (char *)*((void *)v6 + 1);
      if (v13)
      {
        do
        {
          int v14 = v13;
          long long v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (char *)*((void *)v6 + 2);
          BOOL v15 = *(void *)v14 == (void)v6;
          uint64_t v6 = v14;
        }
        while (!v15);
      }
      uint64_t v6 = v14;
    }
    while (v14 != v7);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v22[2]);
  long long v16 = v22[0];
  v22[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_192B80604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::multi_head_aot_helper_t::combination>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::multi_head_aot_helper_t::combination>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void Espresso::multi_head_aot_helper_t::remove_unused_layers(uint64_t a1, Espresso::net *a2, void *a3)
{
  if (*((void *)a2 + 20)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot run multi_head_aot_helper_t::remove_unused_layers on a shaped network");
  }
  uint64_t v4 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v8, a3);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  uint64_t v5 = *((void *)a2 + 5) - *((void *)a2 + 4);
  if (v5)
  {
    uint64_t v6 = v5 >> 4;
    do
    {
      uint64_t v7 = v6 - 1;
      if (((*(void *)(*(void *)(v4 + 80) + (((unint64_t)(v6 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 - 1)) & 1) == 0) {
        Espresso::net::remove_layer(a2, v6 - 1);
      }
      uint64_t v6 = v7;
    }
    while (v7);
  }
}

void Espresso::multi_head_aot_helper_t::helper_for_segment(Espresso::multi_head_aot_helper_t *this@<X0>, const Espresso::net_compiler_segment_based::segment_t *a2@<X2>, uint64_t ***a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_1EE387C08;
  *((_OWORD *)v6 + 2) = 0u;
  uint64_t v7 = (uint64_t *)(v6 + 32);
  uint64_t v43 = this;
  unint64_t v44 = v6;
  *((void *)v6 + 3) = v6 + 32;
  uint64_t v8 = (uint64_t **)(v6 + 24);
  long long v11 = *(char **)this;
  long long v10 = (char *)this + 8;
  uint64_t v9 = v11;
  if (v11 != v10)
  {
    do
    {
      uint64_t v12 = *v7;
      long long v13 = v7;
      if (*v8 == v7) {
        goto LABEL_8;
      }
      int v14 = (uint64_t *)*v7;
      BOOL v15 = v7;
      if (v12)
      {
        do
        {
          long long v13 = v14;
          int v14 = (uint64_t *)v14[1];
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v13 = (uint64_t *)v15[2];
          BOOL v16 = *v13 == (void)v15;
          BOOL v15 = v13;
        }
        while (v16);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13 + 4, v9 + 4))
      {
LABEL_8:
        if (!v12)
        {
          uint64_t v47 = v7;
          int v17 = (uint64_t **)v7;
LABEL_14:
          BOOL v18 = (char *)operator new(0x68uLL);
          long long v19 = v18;
          uint64_t v45 = v18;
          *(void *)&long long v46 = v7;
          BYTE8(v46) = 0;
          if (*((char *)v9 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v18 + 32), (const std::string::value_type *)v9[4], v9[5]);
          }
          else
          {
            long long v20 = *((_OWORD *)v9 + 2);
            *((void *)v18 + 6) = v9[6];
            *((_OWORD *)v18 + 2) = v20;
          }
          if (*((char *)v9 + 79) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v19 + 56), (const std::string::value_type *)v9[7], v9[8]);
          }
          else
          {
            long long v21 = *(_OWORD *)(v9 + 7);
            *((void *)v19 + 9) = v9[9];
            *(_OWORD *)(v19 + 56) = v21;
          }
          std::vector<BOOL>::vector((void *)v19 + 10, (uint64_t)(v9 + 10));
          BYTE8(v46) = 1;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v8, (uint64_t)v47, v17, (uint64_t *)v19);
          uint64_t v45 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100]((uint64_t)&v45);
          goto LABEL_21;
        }
        uint64_t v47 = v13;
        int v17 = (uint64_t **)(v13 + 1);
      }
      else
      {
        int v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)v8, &v47, v9 + 4);
      }
      if (!*v17) {
        goto LABEL_14;
      }
LABEL_21:
      long long v22 = (char *)v9[1];
      if (v22)
      {
        do
        {
          int v23 = v22;
          long long v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          int v23 = (char *)v9[2];
          BOOL v16 = *(void *)v23 == (void)v9;
          uint64_t v9 = v23;
        }
        while (!v16);
      }
      uint64_t v9 = v23;
    }
    while (v23 != v10);
  }
  *((void *)v44 + 7) = 0;
  *((void *)v44 + 8) = 0;
  *((void *)v44 + 6) = v44 + 56;
  long long v24 = (const void **)*((void *)v43 + 3);
  if (v24 != (const void **)((char *)v43 + 32))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)v44 + 6, (uint64_t *)v44 + 7, v24 + 4, (uint64_t)(v24 + 4));
      uint64_t v25 = (const void **)v24[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = (const void ***)v25;
          uint64_t v25 = (const void **)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (const void ***)v24[2];
          BOOL v16 = *v26 == v24;
          long long v24 = (const void **)v26;
        }
        while (!v16);
      }
      long long v24 = (const void **)v26;
    }
    while (v26 != (const void ***)((char *)v43 + 32));
  }
  *a3 = v8;
  a3[1] = (uint64_t **)v44;
  uint64_t v27 = (uint64_t *)*((void *)v44 + 3);
  if (v27 != v7)
  {
    do
    {
      unint64_t v28 = *(void *)a2;
      if ((*(void *)a2 & 0x8000000000000000) != 0)
      {
        uint64_t v30 = v28 - 63;
        if ((uint64_t)(v28 - 63) < 0) {
          uint64_t v30 = *(void *)a2;
        }
        uint64_t v29 = v30 >> 6;
      }
      else
      {
        uint64_t v29 = v28 >> 6;
      }
      unint64_t v31 = *((void *)a2 + 1);
      if ((v31 & 0x8000000000000000) != 0)
      {
        uint64_t v33 = v31 - 63;
        if ((uint64_t)(v31 - 63) < 0) {
          uint64_t v33 = *((void *)a2 + 1);
        }
        uint64_t v32 = v33 >> 6;
      }
      else
      {
        uint64_t v32 = v31 >> 6;
      }
      float v35 = (void **)(v27 + 10);
      unsigned int v34 = (char *)v27[10];
      uint64_t v36 = &v34[8 * v29];
      uint64_t v37 = &v34[8 * v32];
      uint64_t v45 = 0;
      long long v46 = 0uLL;
      unint64_t v38 = (v31 & 0x3F) - (v28 & 0x3F);
      uint64_t v39 = v38 + 8 * (v37 - v36);
      if (v39)
      {
        std::vector<BOOL>::__vallocate[abi:ne180100](&v45, v38 + 8 * (v37 - v36));
        std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v45, v36, v28 & 0x3F, v37, v31 & 0x3F, v39);
        unsigned int v34 = (char *)*v35;
      }
      if (v34)
      {
        operator delete(v34);
        *float v35 = 0;
        v27[11] = 0;
        v27[12] = 0;
      }
      v27[10] = (uint64_t)v45;
      *(_OWORD *)(v27 + 11) = v46;
      int v40 = (uint64_t *)v27[1];
      if (v40)
      {
        do
        {
          float v41 = v40;
          int v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          float v41 = (uint64_t *)v27[2];
          BOOL v16 = *v41 == (void)v27;
          uint64_t v27 = v41;
        }
        while (!v16);
      }
      uint64_t v27 = v41;
    }
    while (v41 != v7);
  }
}

void sub_192B80B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p)
{
  if (*(char *)(v14 + 55) < 0) {
    operator delete(*v15);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(v13, a12[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a12);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::multi_head_aot_helper_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387C08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::multi_head_aot_helper_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::multi_head_aot_helper_t::is_needed_for (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  if (!*(void *)(*(void *)a1 + 792)) {
    return 0;
  }
  uint64_t v2 = (void *)v1[97];
  if (v2 == v1 + 98) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = v2[7];
    uint64_t v4 = v2[8];
    if (v3 != v4 && v4 - v3 != v1[84] - v1[83]) {
      break;
    }
    uint64_t v5 = (void *)v2[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v2[2];
        BOOL v7 = *v6 == (void)v2;
        uint64_t v2 = v6;
      }
      while (!v7);
    }
    uint64_t v2 = v6;
    if (v6 == v1 + 98) {
      return 0;
    }
  }
  return 1;
}

uint64_t Espresso::HXEngine::batch::sync_point(Espresso::HXEngine::batch *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void Espresso::HXEngine::batch::~batch(Espresso::HXEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::HXEngine::context::create_compiler_for_network(uint64_t a1, uint64_t *a2)
{
  unsigned int v13 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v3 = *a2;
  uint64_t v4 = (char *)operator new(0x138uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1EE38BE50;
  *((_OWORD *)v4 + 2) = 0u;
  v4[48] = 0;
  *((void *)v4 + 3) = &unk_1EE36EF00;
  *((void *)v4 + 7) = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *((_DWORD *)v4 + 20) = 0;
  *(void *)(v4 + 84) = 1;
  *((_DWORD *)v4 + 23) = -1;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_DWORD *)v4 + 32) = 0;
  *((void *)v4 + 21) = 0;
  *((void *)v4 + 22) = v4 + 184;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *((void *)v4 + 9) = v3;
  uint64_t v5 = *(void **)(v3 + 16);
  if (v5
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    BOOL v7 = (std::__shared_weak_count *)*((void *)v4 + 8);
    *((void *)v4 + 7) = v5;
    *((void *)v4 + 8) = v6;
    if (!v7) {
      goto LABEL_8;
    }
    nitro::nitro_function::nitro_function(v7);
    uint64_t v5 = (void *)*((void *)v4 + 7);
  }
  else
  {
    *((void *)v4 + 7) = v5;
    *((void *)v4 + 8) = 0;
  }
  if (!v5)
  {
    exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_8:
  uint64_t v8 = *a2 + 528;
  uint64_t v14 = &v13;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v8, &v13, (uint64_t)&std::piecewise_construct, &v14);
  *(void *)&long long v10 = v4 + 24;
  *((void *)&v10 + 1) = v4;
  long long v11 = (std::__shared_weak_count *)v9[4];
  *(_OWORD *)(v9 + 3) = v10;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192B80F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 248);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  unsigned int v13 = *(std::__shared_weak_count **)(v10 + 232);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(*(void **)(v10 + 184));
  a10 = (void **)(v10 + 152);
  std::vector<Espresso::HXEngine::HXCompiler::op_t>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v14 = *(std::__shared_weak_count **)(v10 + 64);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  *(void *)(v10 + 24) = &unk_1EE32A8C8;
  BOOL v15 = *(std::__shared_weak_count **)(v10 + 40);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v10);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::HXCompiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::HXCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BE50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::HXCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::HXEngine::context::network_transform_pre_allocation(Espresso::HXEngine::context *this, Espresso::net *a2)
{
  if (*((unsigned char *)this + 158))
  {
    uint64_t v2 = a2;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v119, a2);
    std::vector<int> __p = 0;
    int32x2_t v117 = 0;
    unint64_t v118 = 0;
    int v115 = 0;
    uint64_t v3 = *((void *)v2 + 4);
    int v111 = v2;
    if (*((void *)v2 + 5) == v3) {
      goto LABEL_66;
    }
    unint64_t v101 = 0;
    uint64_t v103 = 0;
    uint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = 0;
    uint64_t v109 = (uint64_t)v2 + 96;
    uint64_t v105 = (uint64_t **)((char *)v2 + 184);
    while (1)
    {
      uint64_t v8 = (uint64_t *)(v3 + 16 * v6);
      uint64_t v9 = *v8;
      uint64_t v10 = (std::__shared_weak_count *)v8[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v11 = *(const void **)(v9 + 64);
      if (!v11) {
        goto LABEL_18;
      }
      if (!v12) {
        goto LABEL_18;
      }
      unsigned int v13 = v12;
      uint64_t v14 = *(std::__shared_weak_count **)(v9 + 72);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v15 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v121, v5, &v115);
      if ((char *)v15[6] - (char *)v15[5] == 4) {
        break;
      }
      long long v22 = v4;
      if (v14) {
        goto LABEL_16;
      }
LABEL_17:
      uint64_t v4 = v22;
      uint64_t v2 = v111;
LABEL_18:
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      int v115 = ++v5;
      uint64_t v6 = v5;
      uint64_t v3 = *((void *)v2 + 4);
      if (v5 >= (unint64_t)((*((void *)v2 + 5) - v3) >> 4))
      {
        unint64_t v44 = __p;
        if (__p != v4)
        {
          int v45 = 0;
          long long v46 = __p;
          do
          {
            Espresso::net::remove_layer(v2, v45 + *v46++);
            --v45;
          }
          while (v46 != v4);
          uint64_t v4 = v44;
        }
        if (v4)
        {
          int32x2_t v117 = (char *)v4;
          operator delete(v4);
        }
LABEL_66:
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v124);
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v122);
        if (v120) {
          nitro::nitro_function::nitro_function(v120);
        }
        Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v119, v2);
        LODWORD(v113) = 0;
        uint64_t v47 = *((void *)v2 + 4);
        if (*((void *)v2 + 5) == v47) {
          goto LABEL_145;
        }
        int v48 = 0;
        uint64_t v49 = 0;
        uint64_t v106 = (uint64_t **)((char *)v2 + 184);
        uint64_t v102 = (uint64_t)v2 + 56;
        uint64_t v110 = (uint64_t)v2 + 96;
        while (2)
        {
          uint64_t v50 = (uint64_t *)(v47 + 16 * v49);
          uint64_t v51 = *v50;
          uint64_t v52 = (std::__shared_weak_count *)v50[1];
          if (v52) {
            atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v53 = *(const void **)(v51 + 64);
          if (!v53
          {
            goto LABEL_142;
          }
          unint64_t v54 = *(std::__shared_weak_count **)(v51 + 72);
          if (v54)
          {
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            nitro::nitro_function::nitro_function(v54);
          }
          std::vector<int> __p = 0;
          int32x2_t v117 = 0;
          unint64_t v118 = 0;
          int v55 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v123, v48, &v113);
          uint64_t v104 = v52;
          unsigned int v56 = (int *)v55[5];
          long long v57 = (int *)v55[6];
          if (v56 != v57)
          {
            int v58 = 0;
            unint64_t v59 = 0;
            int v60 = 0;
            __int16 v61 = 0;
            while (1)
            {
              unint64_t v62 = *v56;
              uint64_t v63 = *(std::__shared_weak_count **)(*((void *)v2 + 4) + 16 * v62 + 8);
              if (v63) {
                atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v112.__r_.__value_.__r.__words[0] = v62;
              uint64_t v64 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v110, v62, &v112)[3];
              if (*((char *)v64 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)v64, *((void *)v64 + 1));
              }
              else
              {
                long long v65 = *v64;
                v114.__r_.__value_.__r.__words[2] = *((void *)v64 + 2);
                *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v65;
              }
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v2 + 24), &v114))
              {
                exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                std::runtime_error::runtime_error(exception, &v112);
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
              int v66 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v106, &v114, (long long **)&v112)+ 16);
              if ((unint64_t)v60 >= v59)
              {
                uint64_t v67 = (v60 - v58) >> 2;
                unint64_t v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 62) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v59 - (void)v58) >> 1 > v68) {
                  unint64_t v68 = (uint64_t)(v59 - (void)v58) >> 1;
                }
                if (v59 - (unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v69 = v68;
                }
                if (v69) {
                  unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v69);
                }
                else {
                  uint64_t v70 = 0;
                }
                char v71 = (char *)(v69 + 4 * v67);
                *(_DWORD *)char v71 = v66;
                long long v72 = v71 + 4;
                while (v60 != v58)
                {
                  int v73 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v71 - 1) = v73;
                  v71 -= 4;
                }
                unint64_t v59 = v69 + 4 * v70;
                std::vector<int> __p = v71;
                int32x2_t v117 = v72;
                unint64_t v118 = v59;
                if (v58) {
                  operator delete(v58);
                }
                int v58 = v71;
                int v60 = v72;
                uint64_t v2 = v111;
              }
              else
              {
                *(_DWORD *)int v60 = v66;
                v60 += 4;
              }
              int32x2_t v117 = v60;
              if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
                break;
              }
              if (v63) {
                goto LABEL_103;
              }
LABEL_104:
              v61 += v66;
              if (++v56 == v57)
              {
                int v48 = v113;
                goto LABEL_109;
              }
            }
            operator delete(v114.__r_.__value_.__l.__data_);
            if (!v63) {
              goto LABEL_104;
            }
LABEL_103:
            nitro::nitro_function::nitro_function(v63);
            goto LABEL_104;
          }
          __int16 v61 = 0;
LABEL_109:
          BOOL v74 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v123, v48, &v113);
          unsigned int v75 = v74[5];
          uint64_t v108 = v74[6];
          if (v75 == v108) {
            goto LABEL_132;
          }
          uint64_t v76 = 0;
          int v77 = 0;
LABEL_111:
          uint64_t v78 = (uint64_t *)(*((void *)v2 + 4) + 16 * *(int *)((char *)v75 + v76));
          uint64_t v79 = *v78;
          int v80 = (std::__shared_weak_count *)v78[1];
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v81 = *(const void **)(v79 + 64);
          if (!v81)
          {
LABEL_148:
            uint64_t v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(v99, &v114);
            __cxa_throw(v99, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v82)
          {
            int v83 = v82;
            int v84 = *(std::__shared_weak_count **)(v79 + 72);
            if (v84) {
              atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v2 = v111;
            *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v82 + 384))(v82) + 130) = v61;
            *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v83 + 384))(v83) + 126) = v77;
            v77 += *(_DWORD *)((char *)__p + v76);
            goto LABEL_122;
          }
          if (v85)
          {
            float v86 = v85;
            int v84 = *(std::__shared_weak_count **)(v79 + 72);
            if (v84) {
              atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v85 + 384))(v85) + 66) = v61;
            *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v86 + 384))(v86) + 62) = v77;
            float v87 = (char *)__p;
            int v88 = *(_DWORD *)((char *)__p + v76);
            *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v86 + 384))(v86) + 68) = v88;
            int v89 = *(_DWORD *)&v87[v76];
            *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v86 + 384))(v86) + 104) = v89;
            v77 += *(_DWORD *)&v87[v76];
            uint64_t v2 = v111;
LABEL_122:
            if (v84) {
LABEL_123:
            }
              nitro::nitro_function::nitro_function(v84);
          }
          else
          {
            {
              goto LABEL_148;
            }
            int v84 = *(std::__shared_weak_count **)(v79 + 72);
            uint64_t v2 = v111;
            if (v84)
            {
              atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_123;
            }
          }
          if (v80) {
            nitro::nitro_function::nitro_function(v80);
          }
          v76 += 4;
          if ((uint64_t *)((char *)v75 + v76) == v108)
          {
            int v48 = v113;
LABEL_132:
            float v90 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v123, v48, &v113);
            uint64_t v91 = (int *)v90[5];
            for (int i = (int *)v90[6]; v91 != i; ++v91)
            {
              unint64_t v93 = *v91;
              uint64_t v94 = *(std::__shared_weak_count **)(*((void *)v111 + 4) + 16 * v93 + 8);
              if (v94) {
                atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v114.__r_.__value_.__r.__words[0] = v48;
              uint64_t v95 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v110, v48, &v114);
              v112.__r_.__value_.__r.__words[0] = v93;
              uint64_t v96 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v110, v93, &v112);
              if (v96 != v95) {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v96 + 3), (std::string *)v95[3], (std::string *)v95[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95[4] - v95[3]) >> 3));
              }
              if (v94) {
                nitro::nitro_function::nitro_function(v94);
              }
            }
            v114.__r_.__value_.__r.__words[0] = v48;
            uint64_t v52 = v104;
            int v97 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v110, v48, &v114);
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v97 + 1, 0, 0, 0);
            v114.__r_.__value_.__r.__words[0] = v48;
            unsigned int v98 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v102, v48, &v114);
            uint64_t v2 = v111;
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v98 + 1, 0, 0, 0);
            if (__p) {
              operator delete(__p);
            }
LABEL_142:
            if (v52) {
              nitro::nitro_function::nitro_function(v52);
            }
            LODWORD(v113) = ++v48;
            uint64_t v49 = v48;
            uint64_t v47 = *((void *)v2 + 4);
            if (v48 >= (unint64_t)((*((void *)v2 + 5) - v47) >> 4))
            {
LABEL_145:
              std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v124);
              std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v122);
              if (v120) {
                nitro::nitro_function::nitro_function(v120);
              }
              return;
            }
            continue;
          }
          goto LABEL_111;
        }
      }
    }
    BOOL v16 = v7;
    int v107 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v121, v5, &v115)[5];
    uint64_t v17 = *(void *)(*((void *)v111 + 4) + 16 * v107);
    BOOL v18 = *(const void **)(v17 + 64);
    if (v18)
    {
      if (v19)
      {
        long long v20 = *(std::__shared_weak_count **)(v17 + 72);
        uint64_t v21 = v109;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_25:
        v112.__r_.__value_.__r.__words[0] = v5;
        int v23 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v5, &v112)[3];
        if (*((char *)v23 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)v23, *((void *)v23 + 1));
        }
        else
        {
          long long v24 = *v23;
          v114.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v24;
        }
        if (v19 && *((int *)v13 + 86) <= 64)
        {
          *((_DWORD *)v13 + 190) = 1;
          uint64_t v25 = (long long *)(*(uint64_t (**)(void *))(*v19 + 384))(v19);
          uint64_t v26 = v103;
          long long v27 = *v25;
          long long v28 = v25[2];
          *((_OWORD *)v13 + 40) = v25[1];
          *((_OWORD *)v13 + 41) = v28;
          *((_OWORD *)v13 + 39) = v27;
          long long v29 = v25[3];
          long long v30 = v25[4];
          long long v31 = v25[6];
          *((_OWORD *)v13 + 44) = v25[5];
          *((_OWORD *)v13 + 45) = v31;
          *((_OWORD *)v13 + 42) = v29;
          *((_OWORD *)v13 + 43) = v30;
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v112, 2, 1, 1, 1);
          std::string::size_type v32 = v112.__r_.__value_.__r.__words[0];
          uint64_t v33 = (std::__shared_weak_count *)*((void *)v13 + 93);
          *((_OWORD *)v13 + 46) = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
          if (v33)
          {
            nitro::nitro_function::nitro_function(v33);
            std::string::size_type v34 = *((void *)v13 + 92);
          }
          else
          {
            std::string::size_type v34 = v32;
          }
          **(void **)(v34 + 16) = **(void **)(v19[54] + 16);
          v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
          *((_DWORD *)v13 + 188) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v105, &v114, (long long **)&v112)+ 14);
          v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
          *((_DWORD *)v13 + 189) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v105, &v114, (long long **)&v112)+ 15);
          if ((unint64_t)v4 >= v101)
          {
            uint64_t v36 = ((char *)v4 - v103) >> 2;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            BOOL v7 = v16;
            if ((uint64_t)(v101 - (void)v103) >> 1 > v37) {
              unint64_t v37 = (uint64_t)(v101 - (void)v103) >> 1;
            }
            if (v101 - (unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v37;
            }
            if (v38) {
              unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v38);
            }
            else {
              uint64_t v39 = 0;
            }
            int v40 = (_DWORD *)(v38 + 4 * v36);
            *int v40 = v107;
            long long v22 = v40 + 1;
            while (v4 != (_DWORD *)v103)
            {
              int v41 = *--v4;
              *--int v40 = v41;
            }
            std::vector<int> __p = v40;
            int32x2_t v117 = (char *)v22;
            unint64_t v101 = v38 + 4 * v39;
            unint64_t v118 = v101;
            if (v103) {
              operator delete(v103);
            }
            uint64_t v26 = v40;
            int v35 = v107;
          }
          else
          {
            int v35 = v107;
            _DWORD *v4 = v107;
            long long v22 = v4 + 1;
            BOOL v7 = v16;
          }
          uint64_t v103 = v26;
          int32x2_t v117 = (char *)v22;
          v112.__r_.__value_.__r.__words[0] = v35;
          unint64_t v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v109, v35, &v112);
          int v5 = v115;
          uint64_t v113 = v115;
          uint64_t v43 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v109, v115, &v113);
          if (v43 != v42) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v43 + 3), (std::string *)v42[3], (std::string *)v42[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42[4] - v42[3]) >> 3));
          }
        }
        else
        {
          long long v22 = v4;
          BOOL v7 = v16;
        }
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v114.__r_.__value_.__l.__data_);
          if (!v20)
          {
LABEL_56:
            if (!v14) {
              goto LABEL_17;
            }
LABEL_16:
            nitro::nitro_function::nitro_function(v14);
            goto LABEL_17;
          }
        }
        else if (!v20)
        {
          goto LABEL_56;
        }
        nitro::nitro_function::nitro_function(v20);
        goto LABEL_56;
      }
      long long v20 = 0;
    }
    else
    {
      long long v20 = 0;
      long long v19 = 0;
    }
    uint64_t v21 = v109;
    goto LABEL_25;
  }
}

void sub_192B81D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if (v35)
    {
LABEL_9:
      nitro::nitro_function::nitro_function(v35);
      if (v36)
      {
LABEL_10:
        nitro::nitro_function::nitro_function(v36);
        if (!v34) {
          goto LABEL_11;
        }
LABEL_7:
        nitro::nitro_function::nitro_function(v34);
LABEL_11:
        if (a31) {
          operator delete(a31);
        }
        Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a34);
        _Unwind_Resume(a1);
      }
LABEL_6:
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_7;
    }
  }
  else if (v35)
  {
    goto LABEL_9;
  }
  if (v36) {
    goto LABEL_10;
  }
  goto LABEL_6;
}

void Espresso::HXEngine::context::~context(Espresso::HXEngine::context *this)
{
  Espresso::HXEngine::context::~context(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  const void *v14;
  const void *v15;
  uint64_t vars8;

  *(void *)this = &unk_1EE36F7B0;
  uint64_t v2 = *((void *)this + 18);
  if (v2 && *((unsigned char *)this + 156))
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    int v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(v2);
    }
    if (*((unsigned char *)this + 156))
    {
      uint64_t v6 = *((void *)this + 18);
      if (v6)
      {
        BOOL v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v9 = *(void (**)(uint64_t))(v8 + 24);
        if (v9) {
          v9(v6);
        }
      }
    }
  }
  if (*((unsigned char *)this + 157))
  {
    uint64_t v10 = *((void *)this + 20);
    if (v10)
    {
      long long v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      unsigned int v13 = *(void (**)(uint64_t))(v12 + 24);
      if (v13) {
        v13(v10);
      }
      uint64_t v14 = (const void *)*((void *)this + 20);
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  BOOL v15 = (const void *)*((void *)this + 18);
  if (v15) {
    CFRelease(v15);
  }

  Espresso::abstract_context::~abstract_context((id *)this);
}

void *Espresso::HXEngine::context::get_device_model_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HX");
}

double Espresso::HXEngine::context::begin_batch@<D0>(Espresso::HXEngine::context *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0xA0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE38BFA0;
  double result = 0.0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_WORD *)v4 + 60) = 256;
  *((void *)v4 + 16) = 0;
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 3) = &unk_1EE36F700;
  *((void *)v4 + 18) = this;
  *((void *)v4 + 19) = 0;
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38BF68;
  long long v9 = *a2;
  long long v10 = a2[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE36F5A8;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192B82354(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::context_transfer_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BF68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE38BEC0;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  *((unsigned char *)v4 + 364) = 0;
  *((_WORD *)v4 + 172) = 0;
  *((_DWORD *)v4 + 76) = 0;
  *((_DWORD *)v4 + 84) = 0;
  v4[3] = &unk_1EE36F0F0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_192B824A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x218uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38BE88;
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 56) = 0;
  *((void *)v6 + 3) = &unk_1EE36EF58;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192B8264C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso8HXEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x358uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38BF30;
  long long v17 = a2[8];
  *(_OWORD *)BOOL v18 = a2[9];
  *(void *)&v18[16] = *((void *)a2 + 20);
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v16 = a2[7];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a1);
  *((void *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((void *)v6 + 3) = &unk_1EE36F328;
  *((_DWORD *)v6 + 162) = 0;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 652) = xmmword_192DCA870;
  *(_OWORD *)(v6 + 668) = xmmword_192DCA880;
  *((_WORD *)v6 + 342) = 1;
  *(_OWORD *)(v6 + 686) = 0u;
  *(_OWORD *)(v6 + 702) = 0u;
  *((_OWORD *)v6 + 45) = 0u;
  *((void *)v6 + 92) = 0x100000001;
  *(_OWORD *)(v6 + 824) = 0u;
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 792) = 0u;
  *(_OWORD *)(v6 + 808) = 0u;
  *(_OWORD *)(v6 + 744) = 0u;
  *(_OWORD *)(v6 + 760) = 0u;
  *(_OWORD *)(v6 + 772) = 0u;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(void *)(v6 + 485) = *(void *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192B827C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::engine::~engine(Espresso::HXEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::HXEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0xC0uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE38C010;
  result.n128_u64[0] = Espresso::HXEngine::context::context((uint64_t)(v4 + 3), a1, 0, 0);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_192B82908(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::HXEngine::context::context(uint64_t a1, uint64_t *a2, CFTypeRef a3, const void *a4)
{
  v72[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = Espresso::abstract_context::abstract_context(a1, a2);
  *(void *)uint64_t v7 = &unk_1EE36F7B0;
  *(void *)(v7 + 144) = 0;
  uint64_t v8 = (CFTypeRef *)(v7 + 144);
  *(void *)(v7 + 150) = 0;
  *(unsigned char *)(v7 + 158) = 1;
  *(void *)(v7 + 160) = 0;
  *(unsigned char *)(v7 + 44) = 1;
  *(unsigned char *)(v7 + 124) = 1;
  if (a3)
  {
    CFRetain(a3);
    *(unsigned char *)(a1 + 157) = 0;
    if (!a4) {
      goto LABEL_3;
    }
LABEL_14:
    *(unsigned char *)(a1 + 156) = 0;
    *(void *)(a1 + 144) = a4;
    CFRetain(a4);
    return a1;
  }
  if (a4) {
    goto LABEL_14;
  }
  char v12 = 0;
  uint64_t v13 = 0;
  CFTypeRef cf = 0;
  mach_port_t v14 = *MEMORY[0x1E4F2EEF0];
  uint64_t v15 = *MEMORY[0x1E4F1CF80];
  do
  {
    char v16 = v12;
    CFDictionaryRef v17 = IOServiceMatching(off_1E5747B70[4 * v13]);
    if (IOServiceGetMatchingService(v14, v17))
    {
      BOOL v18 = &off_1E5747B70[4 * v13];
      long long v19 = v18[2];
      long long v20 = dlopen(v18[1], 4);
      if (v20)
      {
        uint64_t v21 = (uint64_t (*)(uint64_t, void, CFTypeRef *))dlsym(v20, v19);
        if (v21)
        {
          int v22 = v21(v15, 0, &cf);
          if (v22)
          {
            int v51 = v22;
            exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            uint64_t v53 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v72, "H9ISPCaptureDeviceCreate ");
            unint64_t v54 = std::string::append(v53, v19);
            long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            v70.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&theArray, v51);
            if ((theArray.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string theArray = &theArray;
            }
            else {
              p_std::string theArray = (std::string *)theArray.__r_.__value_.__r.__words[0];
            }
            if ((theArray.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(theArray.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = theArray.__r_.__value_.__l.__size_;
            }
            int v58 = std::string::append(&v70, (const std::string::value_type *)p_theArray, size);
            long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            v64.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v64);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
      }
    }
    char v12 = 1;
    uint64_t v13 = 1;
  }
  while ((v16 & 1) == 0);
  a3 = cf;
  if (!cf)
  {
    __int16 v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v70, 0);
    unint64_t v62 = std::string::insert(&v70, 0, "LoadAndCreateVideoCaptureDevice returned ");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v61, &v64);
    __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(unsigned char *)(a1 + 157) = 1;
  *(void *)(a1 + 160) = a3;
LABEL_3:
  theArray.__r_.__value_.__r.__words[0] = getkFigCaptureISPProcessingSessionConfigurationKey_SessionType();
  v72[0] = &unk_1EE3AEFB0;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v72 forKeys:&theArray count:1];
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v23 = *(uint64_t (**)(CFTypeRef, void, uint64_t, CFTypeRef *))(v11 + 8);
  if (!v23)
  {
    LODWORD(a3) = -12782;
    goto LABEL_54;
  }
  uint64_t v24 = *MEMORY[0x1E4F1CF80];
  LODWORD(a3) = v23(a3, *MEMORY[0x1E4F1CF80], v9, v8);
  if (a3 || (a3 = *v8) == 0)
  {
LABEL_54:
    std::string::basic_string[abi:ne180100]<0>(&v64, "error");
    std::string::basic_string[abi:ne180100]<0>(&v70, "CMGeneralProcessDPM failed:Couldn't create ISP processing session - err");
    Espresso::HXEngine::context::error((uint64_t)&v64, (int)a3, (uint64_t)&v70);
  }
  theArray.__r_.__value_.__r.__words[0] = 0;
  uint64_t v25 = getkFigCaptureISPProcessingSessionProperty_SupportedOutputs();
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  long long v28 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, std::string *))(v27 + 48);
  if (!v28)
  {
    int v29 = -12782;
    goto LABEL_63;
  }
  int v29 = v28(a3, v25, v24, &theArray);
  if (v29 || !theArray.__r_.__value_.__r.__words[0])
  {
LABEL_63:
    std::string::basic_string[abi:ne180100]<0>(&v64, "error");
    std::string::basic_string[abi:ne180100]<0>(&v70, "CMGeneralProcessDPM failed:No supported outputs");
    Espresso::HXEngine::context::error((uint64_t)&v64, v29, (uint64_t)&v70);
  }
  if (!CFArrayGetCount((CFArrayRef)theArray.__r_.__value_.__l.__data_))
  {
    int v29 = 0;
    goto LABEL_63;
  }
  CFRelease(theArray.__r_.__value_.__l.__data_);
  theArray.__r_.__value_.__r.__words[0] = 0;
  CFTypeRef cf = 0;
  CFTypeRef v30 = *v8;
  uint64_t v31 = getkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes();
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  std::string::size_type v34 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *))(v33 + 48);
  if (!v34)
  {
    int v35 = -12782;
    goto LABEL_57;
  }
  int v35 = v34(v30, v31, v24, &cf);
  if (v35 || !cf)
  {
LABEL_57:
    std::string::basic_string[abi:ne180100]<0>(&v64, "error");
    std::string::basic_string[abi:ne180100]<0>(&v70, "CMGeneralProcessDPM failed:Could not query input pixel buffer pool attributes");
    Espresso::HXEngine::context::error((uint64_t)&v64, v35, (uint64_t)&v70);
  }
  CFRelease(cf);
  CFTypeRef v68 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v36 = *v8;
  uint64_t v37 = getkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes();
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  int v40 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *))(v39 + 48);
  if (!v40)
  {
    int v41 = -12782;
    goto LABEL_59;
  }
  int v41 = v40(v36, v37, v24, &v68);
  if (v41 || !v68)
  {
LABEL_59:
    std::string::basic_string[abi:ne180100]<0>(&v64, "error");
    std::string::basic_string[abi:ne180100]<0>(&v70, "CMGeneralProcessDPM failed:Could not query output pixel buffer pool attributes");
    Espresso::HXEngine::context::error((uint64_t)&v64, v41, (uint64_t)&v70);
  }
  CFRelease(v68);
  CFTypeRef v68 = 0;
  dispatch_semaphore_t v42 = dispatch_semaphore_create(0);
  uint64_t v43 = *(void *)(a1 + 144);
  v64.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  v64.__r_.__value_.__l.__size_ = 3221225472;
  v64.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso8HXEngine7context12init_sessionEv_block_invoke;
  long long v65 = &unk_1E5747B50;
  uint64_t v67 = a1;
  unint64_t v44 = v42;
  int v66 = v44;
  int v45 = &v64;
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  int v48 = *(uint64_t (**)(uint64_t, std::string *))(v47 + 8);
  if (!v48)
  {

    int v49 = -12782;
LABEL_61:
    std::string::basic_string[abi:ne180100]<0>(&v70, "error");
    std::string::basic_string[abi:ne180100]<0>(v72, "CMGeneralProcess failed:ISP session prepare failed");
    Espresso::HXEngine::context::error((uint64_t)&v70, v49, (uint64_t)v72);
  }
  int v49 = v48(v43, v45);

  if (v49) {
    goto LABEL_61;
  }
  dispatch_semaphore_wait(v44, 0xFFFFFFFFFFFFFFFFLL);
  if (*(_DWORD *)(a1 + 152))
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "error");
    int v60 = *(_DWORD *)(a1 + 152);
    std::string::basic_string[abi:ne180100]<0>(v72, "CMGeneralProcess failed:ISP session prepare failed - err");
    Espresso::HXEngine::context::error((uint64_t)&v70, v60, (uint64_t)v72);
  }

  *(unsigned char *)(a1 + 156) = 1;
  return a1;
}

void sub_192B8317C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      Espresso::abstract_context::~abstract_context(v31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void Espresso::HXEngine::context::error(uint64_t a1, int a2, uint64_t a3)
{
  std::operator+<char>();
  uint64_t v5 = std::string::append(&v34, " ");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v33, a2);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v33;
  }
  else {
    uint64_t v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::string::append(&v35, (const std::string::value_type *)v7, size);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v36, " ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int v13 = *(char *)(a3 + 23);
  if (v13 >= 0) {
    mach_port_t v14 = (const std::string::value_type *)a3;
  }
  else {
    mach_port_t v14 = *(const std::string::value_type **)a3;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a3 + 8);
  }
  char v16 = std::string::append(&v37, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  BOOL v18 = &v38;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  NSLog(&cfstr_S_0.isa, v18);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  long long v20 = std::string::append(&v34, " ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v33, a2);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v33;
  }
  else {
    int v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v33.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = std::string::append(&v35, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = std::string::append(&v36, " ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  int v28 = *(char *)(a3 + 23);
  if (v28 >= 0) {
    int v29 = (const std::string::value_type *)a3;
  }
  else {
    int v29 = *(const std::string::value_type **)a3;
  }
  if (v28 >= 0) {
    std::string::size_type v30 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v30 = *(void *)(a3 + 8);
  }
  uint64_t v31 = std::string::append(&v37, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v38);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192B835C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 41) < 0) {
    operator delete(*(void **)(v37 - 64));
  }
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v36 & 1) == 0) {
LABEL_16:
    }
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v35);
  goto LABEL_16;
}

intptr_t ___ZN8Espresso8HXEngine7context12init_sessionEv_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(a1 + 40) + 152) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t initValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes(void)
{
  if (CMCaptureLibrary(void)::sOnce != -1) {
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_31_25115);
  }
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferuint64_t Attributes = result;
  }
  else
  {
    uint64_t result = constantValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes;
  }
  getkFigCaptureISPProcessingSessionProperty_OutputPixelBufferuint64_t Attributes = kFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributesFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributesFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionProperty_OutputPixelBufferAttributes;
}

void *___ZL16CMCaptureLibraryv_block_invoke_25120()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CMCapture.framework/CMCapture", 2);
  CMCaptureLibrary(void)::sLiCGFloat b = (uint64_t)result;
  return result;
}

uint64_t initValkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes(void)
{
  if (CMCaptureLibrary(void)::sOnce != -1) {
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_31_25115);
  }
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkFigCaptureISPProcessingSessionProperty_InputPixelBufferuint64_t Attributes = result;
  }
  else
  {
    uint64_t result = constantValkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes;
  }
  getkFigCaptureISPProcessingSessionProperty_InputPixelBufferuint64_t Attributes = kFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributesFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributesFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionProperty_InputPixelBufferAttributes;
}

uint64_t initValkFigCaptureISPProcessingSessionProperty_SupportedOutputs(void)
{
  if (CMCaptureLibrary(void)::sOnce != -1) {
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_31_25115);
  }
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionProperty_SupportedOutputs");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkFigCaptureISPProcessingSessionProperty_SupportedOutputs = result;
  }
  else
  {
    uint64_t result = constantValkFigCaptureISPProcessingSessionProperty_SupportedOutputs;
  }
  getkFigCaptureISPProcessingSessionProperty_SupportedOutputs = kFigCaptureISPProcessingSessionProperty_SupportedOutputsFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionProperty_SupportedOutputsFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionProperty_SupportedOutputs;
}

uint64_t initValkFigCaptureISPProcessingSessionConfigurationKey_SessionType(void)
{
  if (CMCaptureLibrary(void)::sOnce != -1) {
    dispatch_once(&CMCaptureLibrary(void)::sOnce, &__block_literal_global_31_25115);
  }
  v0 = (uint64_t *)dlsym((void *)CMCaptureLibrary(void)::sLib, "kFigCaptureISPProcessingSessionConfigurationKey_SessionType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkFigCaptureISPProcessingSessionConfigurationKey_SessionType = result;
  }
  else
  {
    uint64_t result = constantValkFigCaptureISPProcessingSessionConfigurationKey_SessionType;
  }
  getkFigCaptureISPProcessingSessionConfigurationKey_SessionType = kFigCaptureISPProcessingSessionConfigurationKey_SessionTypeFunction;
  return result;
}

uint64_t kFigCaptureISPProcessingSessionConfigurationKey_SessionTypeFunction(void)
{
  return constantValkFigCaptureISPProcessingSessionConfigurationKey_SessionType;
}

__n128 Espresso::HXEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE38BEF8;
  result.n128_u64[0] = Espresso::HXEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192B83A00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *__assign_helper_atomic_property__3(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = a2 + 1;
    uint64_t v4 = (void *)*a2;
    if (result[2])
    {
      uint64_t v5 = *result;
      uint64_t v7 = (uint64_t **)(result + 1);
      uint64_t v6 = result[1];
      *__n128 result = result + 1;
      *(void *)(v6 + 16) = 0;
      result[1] = 0;
      result[2] = 0;
      if (*(void *)(v5 + 8)) {
        uint64_t v8 = *(uint64_t **)(v5 + 8);
      }
      else {
        uint64_t v8 = (uint64_t *)v5;
      }
      int v22 = result;
      std::string::size_type v23 = v8;
      uint64_t v24 = v8;
      if (!v8
        || (std::string::size_type v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v8),
            v4 == v3))
      {
        mach_port_t v14 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          long long v9 = *(_OWORD *)(v4 + 7);
          v8[9] = v4[9];
          *(_OWORD *)(v8 + 7) = v9;
          long long v10 = *v7;
          uint64_t v11 = (uint64_t **)(v2 + 8);
          long long v12 = (uint64_t **)(v2 + 8);
          if (*v7)
          {
            do
            {
              while (1)
              {
                uint64_t v11 = (uint64_t **)v10;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, v10 + 4)) {
                  break;
                }
                long long v10 = *v11;
                long long v12 = v11;
                if (!*v11) {
                  goto LABEL_14;
                }
              }
              long long v10 = v11[1];
            }
            while (v10);
            long long v12 = v11 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v11, v12, v24);
          uint64_t v8 = v23;
          uint64_t v24 = v23;
          if (v23) {
            std::string::size_type v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          int v13 = (void *)v4[1];
          if (v13)
          {
            do
            {
              mach_port_t v14 = v13;
              int v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              mach_port_t v14 = (void *)v4[2];
              BOOL v15 = *v14 == (void)v4;
              uint64_t v4 = v14;
            }
            while (!v15);
          }
          if (!v8) {
            break;
          }
          uint64_t v4 = v14;
        }
        while (v14 != v3);
      }
      __n128 result = (void *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
      uint64_t v4 = v14;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,float_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,float_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float_buffer_t>>>::__construct_node<std::pair<std::string const,float_buffer_t> const&>((uint64_t)&v22, v2, (uint64_t)(v4 + 4));
        char v16 = v22;
        long long v17 = *(uint64_t **)(v2 + 8);
        BOOL v18 = (uint64_t **)(v2 + 8);
        long long v19 = (uint64_t **)(v2 + 8);
        if (v17)
        {
          do
          {
            while (1)
            {
              BOOL v18 = (uint64_t **)v17;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v17 + 4)) {
                break;
              }
              long long v17 = *v18;
              long long v19 = v18;
              if (!*v18) {
                goto LABEL_33;
              }
            }
            long long v17 = v18[1];
          }
          while (v17);
          long long v19 = v18 + 1;
        }
LABEL_33:
        __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v18, v19, v16);
        long long v20 = (void *)v4[1];
        if (v20)
        {
          do
          {
            long long v21 = v20;
            long long v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            long long v21 = (void *)v4[2];
            BOOL v15 = *v21 == (void)v4;
            uint64_t v4 = v21;
          }
          while (!v15);
        }
        uint64_t v4 = v21;
      }
      while (v21 != v3);
    }
  }
  return result;
}

void sub_192B83CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,float_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,float_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float_buffer_t>>>::__construct_node<std::pair<std::string const,float_buffer_t> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((void *)v6 + 9) = *(void *)(a3 + 40);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_192B83D50(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_atomic_property__2(uint64_t *result, void *a2)
{
  result[1] = 0;
  uint64_t v2 = (uint64_t)(result + 1);
  result[2] = 0;
  *__n128 result = (uint64_t)(result + 1);
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t v7 = (void *)v2;
      if (*(void *)v5 == v2) {
        goto LABEL_9;
      }
      uint64_t v8 = *(void **)(v5 + 8);
      long long v9 = (void *)v2;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          long long v9 = v7;
        }
        while (v10);
      }
      __n128 result = (uint64_t *)std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v4 + 4);
      if (result)
      {
LABEL_9:
        if (!v6)
        {
          BOOL v15 = (void *)v2;
          uint64_t v11 = (uint64_t **)v2;
LABEL_15:
          std::__tree<std::__value_type<std::string,float_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,float_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float_buffer_t>>>::__construct_node<std::pair<std::string const,float_buffer_t> const&>((uint64_t)&v14, v5, (uint64_t)(v4 + 4));
          __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v15, v11, v14);
          goto LABEL_16;
        }
        BOOL v15 = v7;
        uint64_t v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(v5, &v15, v4 + 4);
        uint64_t v11 = (uint64_t **)result;
      }
      if (!*v11) {
        goto LABEL_15;
      }
LABEL_16:
      long long v12 = (void *)v4[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v4[2];
          BOOL v10 = *v13 == (void)v4;
          uint64_t v4 = v13;
        }
        while (!v10);
      }
      uint64_t v4 = v13;
    }
    while (v13 != v3);
  }
  return result;
}

void sub_192B83ED0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *__assign_helper_atomic_property__25177(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = a2 + 1;
    uint64_t v4 = (void *)*a2;
    if (result[2])
    {
      uint64_t v5 = *result;
      uint64_t v7 = (uint64_t **)(result + 1);
      uint64_t v6 = result[1];
      *__n128 result = result + 1;
      *(void *)(v6 + 16) = 0;
      result[1] = 0;
      result[2] = 0;
      if (*(void *)(v5 + 8)) {
        uint64_t v8 = *(uint64_t **)(v5 + 8);
      }
      else {
        uint64_t v8 = (uint64_t *)v5;
      }
      int v22 = result;
      std::string::size_type v23 = v8;
      uint64_t v24 = v8;
      if (!v8
        || (std::string::size_type v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v8),
            v4 == v3))
      {
        mach_port_t v14 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          long long v9 = *(_OWORD *)(v4 + 7);
          *(_OWORD *)(v8 + 9) = *(_OWORD *)(v4 + 9);
          *(_OWORD *)(v8 + 7) = v9;
          BOOL v10 = *v7;
          uint64_t v11 = (uint64_t **)(v2 + 8);
          long long v12 = (uint64_t **)(v2 + 8);
          if (*v7)
          {
            do
            {
              while (1)
              {
                uint64_t v11 = (uint64_t **)v10;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, v10 + 4)) {
                  break;
                }
                BOOL v10 = *v11;
                long long v12 = v11;
                if (!*v11) {
                  goto LABEL_14;
                }
              }
              BOOL v10 = v11[1];
            }
            while (v10);
            long long v12 = v11 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v11, v12, v24);
          uint64_t v8 = v23;
          uint64_t v24 = v23;
          if (v23) {
            std::string::size_type v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          int v13 = (void *)v4[1];
          if (v13)
          {
            do
            {
              mach_port_t v14 = v13;
              int v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              mach_port_t v14 = (void *)v4[2];
              BOOL v15 = *v14 == (void)v4;
              uint64_t v4 = v14;
            }
            while (!v15);
          }
          if (!v8) {
            break;
          }
          uint64_t v4 = v14;
        }
        while (v14 != v3);
      }
      __n128 result = (void *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
      uint64_t v4 = v14;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__construct_node<std::pair<std::string const,vImage_Buffer> const&>((uint64_t)&v22, v2, (uint64_t)(v4 + 4));
        char v16 = v22;
        long long v17 = *(uint64_t **)(v2 + 8);
        BOOL v18 = (uint64_t **)(v2 + 8);
        long long v19 = (uint64_t **)(v2 + 8);
        if (v17)
        {
          do
          {
            while (1)
            {
              BOOL v18 = (uint64_t **)v17;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v17 + 4)) {
                break;
              }
              long long v17 = *v18;
              long long v19 = v18;
              if (!*v18) {
                goto LABEL_33;
              }
            }
            long long v17 = v18[1];
          }
          while (v17);
          long long v19 = v18 + 1;
        }
LABEL_33:
        __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v2, (uint64_t)v18, v19, v16);
        long long v20 = (void *)v4[1];
        if (v20)
        {
          do
          {
            long long v21 = v20;
            long long v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            long long v21 = (void *)v4[2];
            BOOL v15 = *v21 == (void)v4;
            uint64_t v4 = v21;
          }
          while (!v15);
        }
        uint64_t v4 = v21;
      }
      while (v21 != v3);
    }
  }
  return result;
}

void sub_192B84128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__construct_node<std::pair<std::string const,vImage_Buffer> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a3 + 24);
  __n128 result = *(__n128 *)(a3 + 40);
  *(__n128 *)(v6 + 72) = result;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_192B841C0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_atomic_property__25179(uint64_t *result, void *a2)
{
  result[1] = 0;
  uint64_t v2 = (uint64_t)(result + 1);
  result[2] = 0;
  *__n128 result = (uint64_t)(result + 1);
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t v7 = (void *)v2;
      if (*(void *)v5 == v2) {
        goto LABEL_9;
      }
      uint64_t v8 = *(void **)(v5 + 8);
      long long v9 = (void *)v2;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          long long v9 = v7;
        }
        while (v10);
      }
      __n128 result = (uint64_t *)std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v4 + 4);
      if (result)
      {
LABEL_9:
        if (!v6)
        {
          BOOL v15 = (void *)v2;
          uint64_t v11 = (uint64_t **)v2;
LABEL_15:
          std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__construct_node<std::pair<std::string const,vImage_Buffer> const&>((uint64_t)&v14, v5, (uint64_t)(v4 + 4));
          __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v15, v11, v14);
          goto LABEL_16;
        }
        BOOL v15 = v7;
        uint64_t v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(v5, &v15, v4 + 4);
        uint64_t v11 = (uint64_t **)result;
      }
      if (!*v11) {
        goto LABEL_15;
      }
LABEL_16:
      long long v12 = (void *)v4[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v4[2];
          BOOL v10 = *v13 == (void)v4;
          uint64_t v4 = v13;
        }
        while (!v10);
      }
      uint64_t v4 = v13;
    }
    while (v13 != v3);
  }
  return result;
}

void sub_192B84340(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void sub_192B84458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192B84510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192B84600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_192B846B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_192B84750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BF08;
      v13[1] = v3 + 16;
      mach_port_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          uint64_t v11 = v7 + 1;
          if (v10) {
            uint64_t v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B84880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes42strength_reduction_loadc_eltwise__eltwisecERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (Espresso::zephyr::node_t *)*a2;
  matched = Espresso::zephyr::match_simple_eltwise_binop(*a2, 0);
  if (!matched)
  {
    matched = Espresso::zephyr::match_simple_eltwise_binop((uint64_t)v2, 1u);
    if (!matched) {
      return 0;
    }
  }
  char v4 = (int *)(*(uint64_t (**)(void *))(*(void *)matched + 320))(matched);
  uint64_t v5 = *(Espresso::zephyr::node_t **)(**((void **)v2 + 15) + 80);
  constant = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v5);
  if (!constant)
  {
    uint64_t v5 = *(Espresso::zephyr::node_t **)(*(void *)(*((void *)v2 + 15) + 8) + 80);
    char v9 = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v5);
    if (v9)
    {
      uint64_t v7 = v9;
      uint64_t v8 = 1;
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t v7 = constant;
  uint64_t v8 = 0;
LABEL_7:
  int v10 = (int32x4_t *)(*(uint64_t (**)(uint64_t *))(*v7 + 384))(v7);
  uint64_t v11 = 0;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v10, v12)))) & 1) == 0
    && v10[1].i32[0] == 1)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v18, v7 + 43);
    uint64_t v13 = v18;
    if (!v18) {
      goto LABEL_18;
    }
    uint64_t v14 = 0;
    uint64_t v15 = *(int *)(v18 + 8);
    do
    {
      v15 *= *(int *)(v18 + 12 + v14);
      v14 += 4;
    }
    while (v14 != 12);
    if (v15 == 1)
    {
      if (*v4) {
        int v16 = 3;
      }
      else {
        int v16 = 2;
      }
      int *v4 = v16;
      v4[2] = **(_DWORD **)(v13 + 24);
      Espresso::zephyr::node_t::erase_input_at(v2, v8);
      Espresso::zephyr::node_t::remove_if_unused(v5);
      uint64_t v11 = 1;
    }
    else
    {
LABEL_18:
      uint64_t v11 = 0;
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  return v11;
}

void sub_192B84A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BF08;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BF08;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_loadc_eltwise__eltwisec(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B84BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BC48;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          uint64_t v11 = v7 + 1;
          if (v10) {
            uint64_t v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B84CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes35strength_reduction_gather_to_lookupERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "array_gather_node->inputs().size() == 2";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_124;
    }
    return 0;
  }
  if (*(void *)(v2 + 104) - *(void *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 83;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "array_gather_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_124;
    }
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (!v4 {
    || (uint64_t v5 = *(const void **)(v4 + 8)) == 0
  }
  {
    uint64_t v15 = Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(v2);
    if (!v15)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v13 = Espresso::espresso_os_log_subsystem(0, v14);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 101;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "gather_kernel != nullptr || gather_nd_kernel != nullptr";
          _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_124;
      }
      return 0;
    }
LABEL_23:
    int v16 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v15 + 320))(v15);
    if (*(_DWORD *)v16)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v13 = Espresso::espresso_os_log_subsystem(v16, v17);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 97;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "gather_nd_kernel->get_params().mode == TF_GATHER";
          _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_124;
      }
      return 0;
    }
    uint64_t v18 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v15 + 320))(v15);
    if (*((_DWORD *)v18 + 1))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v13 = Espresso::espresso_os_log_subsystem(v18, v19);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 98;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "gather_nd_kernel->get_params().axis == 0";
          _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_124;
      }
      return 0;
    }
    long long v20 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v15 + 320))(v15);
    if (*((_DWORD *)v20 + 2))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v13 = Espresso::espresso_os_log_subsystem(v20, v21);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 99;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "gather_nd_kernel->get_params().batch_dims == 0";
          _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_124;
      }
      return 0;
    }
    goto LABEL_47;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(std::__shared_weak_count **)(v4 + 16);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v8);
  }
  char v9 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v7 + 320))(v7);
  if (!*((unsigned char *)v9 + 24))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v9, v10);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 90;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "gather_kernel->get_params().simple_gather == true";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_124;
    }
    return 0;
  }
  uint64_t v11 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v7 + 320))(v7);
  if (*((_DWORD *)v11 + 5))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v11, v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 91;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "gather_kernel->get_params().axis == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_124:

      return 0;
    }
    return 0;
  }
  uint64_t v15 = Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(v2);
  if (v15) {
    goto LABEL_23;
  }
LABEL_47:
  int v22 = *(Espresso::zephyr::node_t **)(**(void **)(v2 + 120) + 80);
  constant = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v22);
  if (!constant)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(0, v24);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 107;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "constant_kernel";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_124;
    }
    return 0;
  }
  long long v25 = constant;
  uint64_t v26 = constant + 43;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(buf, constant + 43);
  uint64_t v29 = *(void *)buf;
  int v28 = *(Espresso **)&buf[8];
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v29)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v28, v27);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 108;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "constant_kernel->get_constant_blob()";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_124;
    }
    return 0;
  }
  std::string::size_type v30 = (Espresso *)(*(uint64_t (**)(uint64_t *))(*v25 + 384))(v25);
  if (*((_DWORD *)v30 + 5) != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v30, v31);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 109;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "constant_kernel->get_params().nd_rank == 2";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_124;
    }
    return 0;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v114, **(Espresso::zephyr::value_t ***)(v2 + 120));
  std::string v34 = (void **)v114;
  if (v114 && *(_DWORD *)(v114 + 20) == 2)
  {
    uint64_t v35 = *(void *)(*(void *)(v2 + 120) + 8);
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v112, (Espresso::zephyr::value_t *)v35);
    uint64_t v38 = v112;
    if (!v112 || (int v39 = *(_DWORD *)(v112 + 20), v39 == -1) || v39 >= 3)
    {
      if (Espresso::zephyr::match_verbose)
      {
        int v80 = Espresso::espresso_os_log_subsystem(v36, v37);
        if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 116;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "input_shape_ptr && input_shape_ptr->rank() <= 2";
          _os_log_impl(&dword_1920CB000, v80, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
      }
      uint64_t v77 = 0;
    }
    else
    {
      int v40 = *(Espresso::zephyr::value_t ***)(v2 + 96);
      if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v40) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      Espresso::zephyr::need_shape((Espresso::zephyr *)&v110, *v40);
      if (!v110) {
        goto LABEL_137;
      }
      int v43 = *(_DWORD *)(v110 + 20);
      if (v43 == -1)
      {
        if (*(_DWORD *)(v110 + 16) == 1) {
          int v43 = 4;
        }
        else {
          int v43 = 5;
        }
      }
      int v44 = *(_DWORD *)(v38 + 20);
      if (v44 == -1)
      {
        if (*(_DWORD *)(v38 + 16) == 1) {
          int v44 = 4;
        }
        else {
          int v44 = 5;
        }
      }
      if (v43 == v44 + 1)
      {
        int v84 = v34;
        int v45 = Espresso::espresso_os_log_subsystem(v41, v42);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v82 = (void *)(v2 + 144);
          if (*(char *)(v2 + 167) < 0) {
            uint64_t v82 = (void *)*v82;
          }
          int v83 = (void *)(v35 + 32);
          if (*(char *)(v35 + 55) < 0) {
            int v83 = (void *)*v83;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v82;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v83;
          _os_log_debug_impl(&dword_1920CB000, v45, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_gather_to_lookup: %s input_value=%s", buf, 0x16u);
        }

        uint64_t v124 = 0;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        memset(buf, 0, sizeof(buf));
        int v46 = *(_DWORD *)(v38 + 20);
        if (v46 == -1)
        {
          if (*(_DWORD *)(v38 + 16) == 1) {
            int v46 = 4;
          }
          else {
            int v46 = 5;
          }
        }
        *(_DWORD *)buf = v46;
        Espresso::zephyr::make_kernel<Espresso::generic_expand_dims_kernel,Espresso::zephyr::node_t,Espresso::expand_dims_params_t>(&v108, *(void *)(*(void *)(v2 + 8) + 8), (uint64_t)buf);
        uint64_t v47 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v2 + 24), v2 + 144);
        uint64_t v48 = *((void *)v47 + 1);
        uint64_t v50 = v108;
        int v49 = v109;
        if (v109) {
          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v51 = *(std::__shared_weak_count **)(v48 + 16);
        *(void *)(v48 + 8) = v50;
        *(void *)(v48 + 16) = v49;
        float v85 = v49;
        if (v51) {
          nitro::nitro_function::nitro_function(v51);
        }
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v47, (Espresso::zephyr::value_t *)v35);
        uint64_t v52 = *(void *)(v35 + 24);
        size_t v53 = *(unsigned __int8 *)(v35 + 55);
        if ((v53 & 0x80u) != 0) {
          size_t v53 = *(void *)(v35 + 40);
        }
        size_t v54 = v53;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v53 + 9);
        if ((v96 & 0x80000000) == 0) {
          long long v55 = __p;
        }
        else {
          long long v55 = (void **)__p[0];
        }
        size_t v56 = v54;
        if (v54)
        {
          if (*(char *)(v35 + 55) >= 0) {
            long long v57 = (const void *)(v35 + 32);
          }
          else {
            long long v57 = *(const void **)(v35 + 32);
          }
          int v58 = v55;
          memmove(v55, v57, v54);
          long long v55 = v58;
          size_t v56 = v54;
        }
        strcpy((char *)v55 + v56, "_expanded");
        long long v59 = Espresso::zephyr::function_t::new_value(v52, (uint64_t)__p);
        if (SBYTE3(v96) < 0) {
          operator delete(__p[0]);
        }
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v47, (Espresso::zephyr::value_t *)v59);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v47, (Espresso::zephyr::node_t *)v2);
        char v99 = 0;
        int v101 = -1;
        __asm { FMOV            V0.2S, #1.0 }
        uint64_t v102 = _D0;
        uint64_t v107 = 0;
        uint64_t v96 = _D0;
        uint64_t v103 = 0;
        uint64_t v100 = 0;
        int v98 = 0;
        uint64_t v104 = 0;
        uint64_t v106 = 0;
        uint64_t v105 = 0;
        __p[0] = *v84;
        char v99 = 1;
        uint64_t v97 = 0x100000000;
        LODWORD(v107) = 1;
        int v95 = 0;
        __p[1] = (void *)1;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v92, SHIDWORD(__p[0]), (int)__p[0], 1, 1);
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v116, v26);
        uint64_t v65 = v92;
        vDSP_mtrans(*(const float **)(*(void *)v116 + 24), 1, *(float **)(v92 + 16), 1, LODWORD(__p[0]), HIDWORD(__p[0]));
        if (*(void *)&v116[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v116[8]);
        }
        Espresso::zephyr::make_kernel<Espresso::generic_inner_product_kernel,Espresso::zephyr::node_t,Espresso::inner_product_uniforms>(&v90, *(void *)(*(void *)(v2 + 8) + 8), (uint64_t)__p);
        uint64_t v66 = v90;
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v88, (int)__p[0], 1, 1, 1);
        uint64_t v67 = v66;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v66 + 392))(v66, &v88);
        if (v89) {
          nitro::nitro_function::nitro_function(v89);
        }
        CFTypeRef v68 = v93;
        uint64_t v86 = v65;
        float v87 = v93;
        if (v93) {
          atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v67 + 400))(v67, &v86);
        if (v87) {
          nitro::nitro_function::nitro_function(v87);
        }
        unint64_t v69 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v2 + 24), v2 + 144);
        uint64_t v70 = *((void *)v69 + 1);
        char v71 = v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v72 = *(std::__shared_weak_count **)(v70 + 16);
        *(void *)(v70 + 8) = v67;
        *(void *)(v70 + 16) = v71;
        if (v72) {
          nitro::nitro_function::nitro_function(v72);
        }
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v69, (Espresso::zephyr::value_t *)v59);
        int v73 = *(Espresso::zephyr::value_t ***)(v2 + 96);
        if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v73) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v69, *v73);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v69, (Espresso::zephyr::node_t *)v47);
        Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v2);
        BOOL v74 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v22);
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v76 = Espresso::espresso_os_log_subsystem(v74, v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int32x2_t v116 = 136315394;
            *(void *)&v116[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_"
                                  "strength_reduction.mm";
            *(_WORD *)&v116[12] = 1024;
            *(_DWORD *)&v116[14] = 173;
            _os_log_impl(&dword_1920CB000, v76, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v116, 0x12u);
          }
        }
        if (v71) {
          nitro::nitro_function::nitro_function(v71);
        }
        if (v68) {
          nitro::nitro_function::nitro_function(v68);
        }
        if (v85) {
          nitro::nitro_function::nitro_function(v85);
        }
        uint64_t v77 = 1;
      }
      else
      {
LABEL_137:
        if (Espresso::zephyr::match_verbose)
        {
          int v81 = Espresso::espresso_os_log_subsystem(v41, v42);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 120;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "output_shape_ptr && output_shape_ptr->rank() == input_shape_ptr->rank() + 1";
            _os_log_impl(&dword_1920CB000, v81, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
        }
        uint64_t v77 = 0;
      }
      if (v111) {
        nitro::nitro_function::nitro_function(v111);
      }
    }
    if (v113) {
      nitro::nitro_function::nitro_function(v113);
    }
  }
  else
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v79 = Espresso::espresso_os_log_subsystem(v32, v33);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 112;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "shape_constant_ptr && shape_constant_ptr->rank() == 2";
        _os_log_impl(&dword_1920CB000, v79, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    uint64_t v77 = 0;
  }
  if (v115) {
    nitro::nitro_function::nitro_function(v115);
  }
  return v77;
}

void sub_192B85D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a43) {
    nitro::nitro_function::nitro_function(a43);
  }
  if (a45) {
    nitro::nitro_function::nitro_function(a45);
  }
  if (a47) {
    nitro::nitro_function::nitro_function(a47);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void Espresso::zephyr::make_kernel<Espresso::generic_expand_dims_kernel,Espresso::zephyr::node_t,Espresso::expand_dims_params_t>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    uint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192B8600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::zephyr::make_kernel<Espresso::generic_inner_product_kernel,Espresso::zephyr::node_t,Espresso::inner_product_uniforms>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    uint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192B86178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BC48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BC48;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_lookup(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B862AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BFB8;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B863DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes48strength_reduction_batch_matmul_to_inner_productERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso *a1, const char *a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem(a1, a2);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 186;
        *(_WORD *)&buf[18] = 2080;
        int v84 = "bmm_node->inputs().size() == 2";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_24;
    }
    return 0;
  }
  if (*(void *)(v2 + 104) - *(void *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem(a1, a2);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 187;
        *(_WORD *)&buf[18] = 2080;
        int v84 = "bmm_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_24;
    }
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3 {
    || (char v4 = a1, (a1 = *(Espresso **)(v3 + 8)) == 0)
  }
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem(a1, a2);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 192;
        *(_WORD *)&buf[18] = 2080;
        int v84 = "bmm_kernel != nullptr";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_24;
    }
    return 0;
  }
  uint64_t v5 = a1;
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v5 + 320))(v5);
  if (*(unsigned char *)v7)
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem(v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 193;
        *(_WORD *)&buf[18] = 2080;
        int v84 = "bmm_kernel->get_params().channel_mode == false";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_24:

      return 0;
    }
    return 0;
  }
  uint64_t v12 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v5 + 320))(v5);
  if (*((unsigned char *)v12 + 1))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(v12, v13);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 194;
      *(_WORD *)&buf[18] = 2080;
      int v84 = "bmm_kernel->get_params().transpose_x == false";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  uint64_t v14 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v5 + 320))(v5);
  if (*((unsigned char *)v14 + 2))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(v14, v15);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 195;
      *(_WORD *)&buf[18] = 2080;
      int v84 = "bmm_kernel->get_params().transpose_y == false";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  int v16 = *(Espresso::zephyr::node_t **)(*(void *)(*(void *)(v2 + 120) + 8) + 80);
  constant = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v16);
  if (!constant)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(0, v18);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 200;
      *(_WORD *)&buf[18] = 2080;
      int v84 = "constant_kernel";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  long long v19 = constant;
  long long v20 = constant + 43;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(buf, constant + 43);
  uint64_t v23 = *(void *)buf;
  int v22 = *(Espresso **)&buf[8];
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v23)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem(v22, v21);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 201;
      *(_WORD *)&buf[18] = 2080;
      int v84 = "constant_kernel->get_constant_blob()";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  uint64_t v24 = (int *)(*(uint64_t (**)(uint64_t *))(*v19 + 384))(v19);
  uint64_t v26 = v24[5];
  if ((v26 & 0xFFFFFFFE) != 2)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v24, v25);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 203;
      *(_WORD *)&buf[18] = 2080;
      int v84 = "constant_rank == 2 || constant_rank == 3";
      _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  if (v26 == 3)
  {
    long long v27 = (Espresso *)(*(uint64_t (**)(uint64_t *))(*v19 + 384))(v19);
    if (*((_DWORD *)v27 + 2) != 1)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 205;
        *(_WORD *)&buf[18] = 2080;
        int v84 = "constant_kernel->get_params().k == 1";
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_24;
    }
  }
  uint64_t v29 = (std::__shared_weak_count *)operator new(0x20uLL);
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BDA8;
  LODWORD(v29[1].__vftable) = Espresso::zephyr::match_verbose;
  Espresso::zephyr::match_verbose = 1;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v80, *(Espresso::zephyr::value_t **)(*(void *)(v2 + 120) + 8));
  long long v32 = v80;
  if (!v80) {
    goto LABEL_69;
  }
  int v33 = v80[5];
  if (v33 == -1)
  {
    if (v80[4] == 1) {
      int v33 = 4;
    }
    else {
      int v33 = 5;
    }
  }
  if (v33 != v26)
  {
LABEL_69:
    if (Espresso::zephyr::match_verbose)
    {
      int v39 = Espresso::espresso_os_log_subsystem(v30, v31);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 210;
        *(_WORD *)&buf[18] = 2080;
        int v84 = "shape_constant_ptr && shape_constant_ptr->rank() == constant_rank";
        _os_log_impl(&dword_1920CB000, v39, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    uint64_t v10 = 0;
    goto LABEL_129;
  }
  uint64_t v67 = **(Espresso::zephyr::value_t ***)(v2 + 120);
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v78, v67);
  if (!v78) {
    goto LABEL_115;
  }
  int v36 = *(_DWORD *)(v78 + 20);
  if (v36 == -1)
  {
    int v40 = *(_DWORD *)(v78 + 16);
    if (v40 == 1) {
      uint64_t v41 = 4;
    }
    else {
      uint64_t v41 = 5;
    }
    if (v26 + 1 != v41) {
      goto LABEL_115;
    }
    if (v40 == 1) {
      int v37 = 4;
    }
    else {
      int v37 = 5;
    }
LABEL_85:
    dispatch_semaphore_t v42 = *(Espresso::zephyr::value_t ***)(v2 + 96);
    if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v42) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v76, *v42);
    if (!v76) {
      goto LABEL_120;
    }
    int v45 = *(_DWORD *)(v76 + 20);
    if (v45 == -1)
    {
      if (*(_DWORD *)(v76 + 16) == 1) {
        int v45 = 4;
      }
      else {
        int v45 = 5;
      }
    }
    if (v45 == v37)
    {
      int v46 = Espresso::espresso_os_log_subsystem(v43, v44);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        std::string v64 = (void *)(v2 + 144);
        if (*(char *)(v2 + 167) < 0) {
          std::string v64 = (void *)*v64;
        }
        int v65 = *v32;
        int v66 = v32[1];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v64;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v65;
        *(_WORD *)&buf[18] = 1024;
        LODWORD(v84) = v66;
        _os_log_debug_impl(&dword_1920CB000, v46, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_batch_matmul_to_inner_product: %s w=%d h=%d", buf, 0x18u);
      }

      char v87 = 0;
      int v89 = -1;
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v90 = _D0;
      uint64_t v95 = 0;
      int v84 = _D0;
      uint64_t v91 = 0;
      uint64_t v88 = 0;
      int v86 = 0;
      uint64_t v92 = 0;
      uint64_t v94 = 0;
      uint64_t v93 = 0;
      *(_DWORD *)&uint8_t buf[4] = v32[1];
      *(_DWORD *)buf = *v32;
      char v87 = 1;
      uint64_t v85 = 0;
      *(_DWORD *)&buf[16] = 0;
      *(void *)&uint8_t buf[8] = 1;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v74, *(int *)&buf[4], *(int *)buf, 1, 1);
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v82, v20);
      uint64_t v51 = v74;
      vDSP_mtrans(*(const float **)(*(void *)v82 + 24), 1, *(float **)(v74 + 16), 1, *(unsigned int *)buf, *(unsigned int *)&buf[4]);
      if (*(void *)&v82[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v82[8]);
      }
      Espresso::zephyr::make_kernel<Espresso::generic_inner_product_kernel,Espresso::zephyr::node_t,Espresso::inner_product_uniforms>(&v72, *(void *)(*(void *)(v2 + 8) + 8), (uint64_t)buf);
      uint64_t v52 = v72;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v70, *(int *)buf, 1, 1, 1);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v52 + 392))(v52, &v70);
      if (v71) {
        nitro::nitro_function::nitro_function(v71);
      }
      size_t v53 = v75;
      uint64_t v68 = v51;
      unint64_t v69 = v75;
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v52 + 400))(v52, &v68);
      if (v69) {
        nitro::nitro_function::nitro_function(v69);
      }
      size_t v54 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v2 + 24), v2 + 144);
      uint64_t v55 = *((void *)v54 + 1);
      size_t v56 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v57 = *(std::__shared_weak_count **)(v55 + 16);
      *(void *)(v55 + 8) = v52;
      *(void *)(v55 + 16) = v56;
      if (v57) {
        nitro::nitro_function::nitro_function(v57);
      }
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v54, v67);
      int v58 = *(Espresso::zephyr::value_t ***)(v2 + 96);
      if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v58) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v54, *v58);
      Espresso::zephyr::ordered_block_t::insert_node_after(**((Espresso::zephyr::ordered_block_t ***)v4 + 1), (Espresso::zephyr::node_t *)v54, (Espresso::zephyr::node_t *)v2);
      Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v2);
      long long v59 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v16);
      if (Espresso::zephyr::match_verbose)
      {
        __int16 v61 = Espresso::espresso_os_log_subsystem(v59, v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v82 = 136315394;
          *(void *)&v82[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&v82[12] = 1024;
          *(_DWORD *)&v82[14] = 256;
          _os_log_impl(&dword_1920CB000, v61, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v82, 0x12u);
        }
      }
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      if (v53) {
        nitro::nitro_function::nitro_function(v53);
      }
      uint64_t v10 = 1;
    }
    else
    {
LABEL_120:
      if (Espresso::zephyr::match_verbose)
      {
        long long v63 = Espresso::espresso_os_log_subsystem(v43, v44);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 220;
          *(_WORD *)&buf[18] = 2080;
          int v84 = "output_shape_ptr && output_shape_ptr->rank() == input_rank";
          _os_log_impl(&dword_1920CB000, v63, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
      }
      uint64_t v10 = 0;
    }
    if (v77) {
      nitro::nitro_function::nitro_function(v77);
    }
    goto LABEL_127;
  }
  int v37 = *(_DWORD *)(v78 + 20);
  if (v36 == v26 || v26 + 1 == v36) {
    goto LABEL_85;
  }
LABEL_115:
  if (Espresso::zephyr::match_verbose)
  {
    unint64_t v62 = Espresso::espresso_os_log_subsystem(v34, v35);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 216;
      *(_WORD *)&buf[18] = 2080;
      int v84 = "input_shape_ptr && (input_shape_ptr->rank() == constant_rank + 1 || input_shape_ptr->rank() == constant_rank)";
      _os_log_impl(&dword_1920CB000, v62, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
  uint64_t v10 = 0;
LABEL_127:
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
LABEL_129:
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  nitro::nitro_function::nitro_function(v29);
  return v10;
}

void sub_192B87238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  nitro::nitro_function::nitro_function(v24);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::scoped_verbose_match>::__on_zero_shared(uint64_t result)
{
  Espresso::zephyr::match_verbose = *(_DWORD *)(result + 24);
  return result;
}

void std::__shared_ptr_emplace<Espresso::zephyr::scoped_verbose_match>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BDA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::zephyr::scoped_verbose_match>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BDA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BFB8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BFB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_batch_matmul_to_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B8747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  *(void *)&long long v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v14[0] = &unk_1EE37C068;
      v14[1] = v3 + 16;
      v14[3] = v14;
      std::string::basic_string[abi:ne180100]<0>(&v15, "transpose");
      std::string::basic_string[abi:ne180100]<0>(v16, "reshape");
      char v9 = 0;
      uint64_t v10 = 0;
      char v11 = 0;
      uint64_t v12 = &v9;
      char v13 = 0;
      char v9 = (std::string *)operator new(0x30uLL);
      uint64_t v10 = v9;
      char v11 = v9 + 2;
      uint64_t v6 = 0;
      uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, &v15, &v17, v9);
      do
      {
        if (SHIBYTE(v16[v6 + 2]) < 0) {
          operator delete((void *)v16[v6]);
        }
        v6 -= 3;
      }
      while (v6 != -6);
      *(void *)&long long v15 = &unk_1EE37DC98;
      *((void *)&v15 + 1) = v14;
      v16[0] = &v15;
      char matched = Espresso::zephyr::match_kernel_chain(v5, (uint64_t *)&v9, &v15);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v15);
      uint64_t v12 = &v9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
      v4 |= matched;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](v14);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B8764C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  a14 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_24generic_transpose_kernelENS_22generic_reshape_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DC98;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37DC98;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes55strength_reduction_transpose_reshape_to_flatten_squeezeERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2, uint64_t *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  if (*(void *)(*a3 + 128) - *(void *)(*a3 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v16 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 275;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "reshape.node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  if (*(void *)(v3 + 104) - *(void *)(v3 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v16 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 276;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "reshape.node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  uint64_t v4 = *(void *)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v16 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 277;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "transpose.node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  if (*(void *)(v4 + 104) - *(void *)(v4 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v16 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 278;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "transpose.node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    return 0;
  }
  uint64_t v6 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*(void *)a2);
  if (!v6
    || (uint64_t v6 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v6 + 320))(v6),
        (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)v6, (int32x4_t)xmmword_192DCA440)))) & 1) != 0)|| *((_DWORD *)v6 + 4) != 4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v16 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 281;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "zephyr::match_transpose_to_nhwc(transpose.node)";
        _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_36:

      return 0;
    }
    return 0;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v50, **(Espresso::zephyr::value_t ***)(v4 + 120));
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v48, **(Espresso::zephyr::value_t ***)(v4 + 96));
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v46, **(Espresso::zephyr::value_t ***)(v3 + 96));
  if (v50)
  {
    uint64_t v10 = v48;
    if (v48)
    {
      if (v46)
      {
        char v11 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v3);
        if (v11)
        {
          uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)v11 + 320))(v11);
          if (*(_DWORD *)(v13 + 24))
          {
            if (Espresso::zephyr::match_verbose)
            {
              long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 298;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&unsigned char buf[20] = "rp.mode == FLATTEN_NCHW";
                _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
LABEL_108:
            }
          }
          else if (*(_DWORD *)(v13 + 28))
          {
            if (Espresso::zephyr::match_verbose)
            {
              long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 299;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&unsigned char buf[20] = "rp.nd_mode == false";
                _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_108;
            }
          }
          else if (*(unsigned char *)(v13 + 32))
          {
            if (Espresso::zephyr::match_verbose)
            {
              long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 300;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&unsigned char buf[20] = "rp.dynamic_shape == false";
                _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_108;
            }
          }
          else if (*(unsigned char *)(v13 + 33))
          {
            if (Espresso::zephyr::match_verbose)
            {
              long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 301;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&unsigned char buf[20] = "rp.rank_preserving_mode == false";
                _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_108;
            }
          }
          else if (*(_DWORD *)v13 == v10[1] * *v10 * v10[2])
          {
            uint64_t v19 = v13;
            if (*(_DWORD *)(v13 + 4) == 1)
            {
              if (*(_DWORD *)(v13 + 8) == 1)
              {
                long long v20 = v10;
                unsigned int v21 = *(_DWORD *)(v13 + 12);
                if (v21 >= 2 && v21 != v10[3])
                {
                  if (!Espresso::zephyr::match_verbose) {
                    goto LABEL_109;
                  }
                  long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 310;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&unsigned char buf[20] = "rp.dst_n == 1 || rp.dst_n == 0 || rp.dst_n == transposed_shape_ptr->n";
                    _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_108;
                }
                unsigned int v22 = *(_DWORD *)(v13 + 16);
                if (v22 >= 2 && v22 != v10[4])
                {
                  if (!Espresso::zephyr::match_verbose) {
                    goto LABEL_109;
                  }
                  long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 312;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&unsigned char buf[20] = "rp.dst_seq == 1 || rp.dst_seq == 0 || rp.dst_seq == transposed_shape_ptr->seq";
                    _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_108;
                }
                if ((*(_DWORD *)(v13 + 20) | 2) == 2)
                {
                  uint64_t v23 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
                  {
                    int v43 = v20[1] * *v20;
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v43;
                    _os_log_debug_impl(&dword_1920CB000, v23, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze dst_w=%d", buf, 8u);
                  }

                  uint64_t v45 = 1;
                  uint64_t v24 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v4 + 24), v4 + 144);
                  Espresso::zephyr::make_kernel<Espresso::generic_flatten_kernel,Espresso::zephyr::node_t,Espresso::flatten_params>(buf, *(void *)(*(void *)(v4 + 8) + 8), (uint64_t)&v45);
                  uint64_t v25 = *((void *)v24 + 1);
                  uint64_t v26 = *(std::__shared_weak_count **)(v25 + 16);
                  *(_OWORD *)(v25 + 8) = *(_OWORD *)buf;
                  if (v26) {
                    nitro::nitro_function::nitro_function(v26);
                  }
                  Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v24, **(Espresso::zephyr::value_t ***)(v4 + 120));
                  Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v24, (Espresso::zephyr::node_t *)v3);
                  if (*(_DWORD *)(v19 + 20) == 2)
                  {
                    uint64_t v27 = *(void *)(v4 + 24);
                    uint64_t v28 = **(void **)(v4 + 120);
                    if (*(char *)(v28 + 55) >= 0) {
                      size_t v29 = *(unsigned __int8 *)(v28 + 55);
                    }
                    else {
                      size_t v29 = *(void *)(v28 + 40);
                    }
                    std::string::size_type v30 = buf;
                    std::string::basic_string[abi:ne180100]((uint64_t)buf, v29 + 8);
                    if ((buf[23] & 0x80u) != 0) {
                      std::string::size_type v30 = *(uint8_t **)buf;
                    }
                    if (v29)
                    {
                      if (*(char *)(v28 + 55) >= 0) {
                        uint64_t v31 = (const void *)(v28 + 32);
                      }
                      else {
                        uint64_t v31 = *(const void **)(v28 + 32);
                      }
                      memmove(v30, v31, v29);
                    }
                    strcpy((char *)&v30[v29], "_flatten");
                    long long v32 = Espresso::zephyr::function_t::new_value(v27, (uint64_t)buf);
                    if ((char)buf[23] < 0) {
                      operator delete(*(void **)buf);
                    }
                    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v24, (Espresso::zephyr::value_t *)v32);
                    long long v57 = 0u;
                    memset(v58, 0, sizeof(v58));
                    long long v55 = 0u;
                    long long v56 = 0u;
                    long long v53 = 0u;
                    long long v54 = 0u;
                    memset(buf, 0, sizeof(buf));
                    int v59 = 2;
                    *(_DWORD *)&uint8_t buf[4] = 2;
                    int v33 = v20[5];
                    if (v33 == -1)
                    {
                      if (v20[4] == 1) {
                        int v34 = 3;
                      }
                      else {
                        int v34 = 4;
                      }
                      if (v20[4] == 1) {
                        int v33 = 4;
                      }
                      else {
                        int v33 = 5;
                      }
                    }
                    else
                    {
                      int v34 = v33 - 1;
                    }
                    *(_DWORD *)&uint8_t buf[8] = v34;
                    *(_DWORD *)&buf[12] = v33 - 2;
                    int v36 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v4 + 24), v3 + 144);
                    Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v44, *(void *)(*(void *)(v3 + 8) + 8), (uint64_t)buf);
                    uint64_t v37 = *((void *)v36 + 1);
                    uint64_t v38 = *(std::__shared_weak_count **)(v37 + 16);
                    *(_OWORD *)(v37 + 8) = v44;
                    if (v38) {
                      nitro::nitro_function::nitro_function(v38);
                    }
                    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v36, (Espresso::zephyr::value_t *)v32);
                    int v39 = *(Espresso::zephyr::value_t ***)(v3 + 96);
                    if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v39) {
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    }
                    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v36, *v39);
                    Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v36, (Espresso::zephyr::node_t *)v24);
                  }
                  else
                  {
                    uint64_t v35 = *(Espresso::zephyr::value_t ***)(v3 + 96);
                    if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v35) {
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    }
                    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v24, *v35);
                  }
                  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v3);
                  int v40 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused((Espresso::zephyr::node_t *)v4);
                  if (Espresso::zephyr::match_verbose)
                  {
                    dispatch_semaphore_t v42 = Espresso::espresso_os_log_subsystem(v40, v41);
                    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136315394;
                      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passe"
                                           "s/passes_strength_reduction.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 355;
                      _os_log_impl(&dword_1920CB000, v42, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
                    }
                  }
                  uint64_t v17 = 1;
                  goto LABEL_110;
                }
                if (Espresso::zephyr::match_verbose)
                {
                  long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 313;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&unsigned char buf[20] = "rp.dst_nd_rank == 2 || rp.dst_nd_rank == 0";
                    _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_108;
                }
              }
              else if (Espresso::zephyr::match_verbose)
              {
                long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_strength_reduction.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 308;
                  *(_WORD *)&buf[18] = 2080;
                  *(void *)&unsigned char buf[20] = "rp.dst_k == 1";
                  _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                }
                goto LABEL_108;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 307;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&unsigned char buf[20] = "rp.dst_h == 1";
                _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_108;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v14);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 306;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&unsigned char buf[20] = "rp.dst_w == transposed_shape_ptr->w * transposed_shape_ptr->h * transposed_shape_ptr->k";
              _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_108;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          long long v15 = Espresso::espresso_os_log_subsystem(0, v12);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 294;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&unsigned char buf[20] = "reshape_kernel != nullptr";
            _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_108;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        long long v15 = Espresso::espresso_os_log_subsystem(v8, v9);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 289;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&unsigned char buf[20] = "reshape_shape_ptr != nullptr";
          _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_108;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      long long v15 = Espresso::espresso_os_log_subsystem(v8, v9);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 288;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "transposed_shape_ptr != nullptr";
        _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_108;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    long long v15 = Espresso::espresso_os_log_subsystem(v8, v9);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 287;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&unsigned char buf[20] = "in_shape_ptr != nullptr";
      _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_108;
  }
LABEL_109:
  uint64_t v17 = 0;
LABEL_110:
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  return v17;
}

void sub_192B888E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::zephyr::make_kernel<Espresso::generic_flatten_kernel,Espresso::zephyr::node_t,Espresso::flatten_params>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    uint64_t v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192B88A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C068;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37C068;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_transpose_reshape_to_flatten_squeeze(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
}

void sub_192B88BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  *((void *)&v16 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BF60;
      v13[1] = v3 + 16;
      void v13[3] = v13;
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v10 = 0;
      char v11 = &v8;
      char v12 = 0;
      uint64_t v8 = (std::string *)operator new(0x18uLL);
      int v9 = v8;
      uint64_t v10 = v8 + 1;
      int v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10, (long long *)__p, &v16, v8);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      __p[0] = &unk_1EE37DC40;
      __p[1] = v13;
      *(void *)&long long v16 = __p;
      char matched = Espresso::zephyr::match_kernel_chain(v5, (uint64_t *)&v8, __p);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](__p);
      char v11 = &v8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
      v4 |= matched;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B88D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::~__value_func[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_24generic_transpose_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EEEEEEUlRKNS5_6vectorIPNS0_6node_tENS5_9allocatorISE_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = **a2;
  v6[0] = v3;
  v6[1] = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(v3);
  uint64_t v4 = *(void *)(v2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v6);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DC40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37DC40;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_transpose_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes45strength_reduction_remove_identity_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::operator()(Espresso *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) == 8)
  {
    if (*((void *)v2 + 13) - *((void *)v2 + 12) == 8)
    {
      uint64_t v3 = (Espresso *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 320))(*(void *)(a2 + 8));
      if (*(_DWORD *)v3)
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            int v12 = 136315650;
            uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            __int16 v14 = 1024;
            int v15 = 375;
            __int16 v16 = 2080;
            uint64_t v17 = "p.axis_w == 0";
LABEL_13:
            _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v12, 0x1Cu);
            goto LABEL_14;
          }
          goto LABEL_14;
        }
      }
      else if (*((_DWORD *)v3 + 1) == 1)
      {
        if (*((_DWORD *)v3 + 2) == 2)
        {
          if (*((_DWORD *)v3 + 3) == 3)
          {
            if (*((_DWORD *)v3 + 4) == 4)
            {
              uint64_t v7 = (Espresso::zephyr::value_t **)*((void *)v2 + 12);
              if (*((Espresso::zephyr::value_t ***)v2 + 13) == v7
                || (uint64_t v8 = (Espresso::zephyr::value_t **)*((void *)v2 + 15),
                    *((Espresso::zephyr::value_t ***)v2 + 16) == v8))
              {
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              }
              Espresso::zephyr::value_t::replace_uses(*v7, *v8);
              int v9 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
              if (!Espresso::zephyr::match_verbose) {
                return 1;
              }
              uint64_t v5 = Espresso::espresso_os_log_subsystem(v9, v10);
              uint64_t v6 = 1;
              if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
              {
                int v12 = 136315394;
                uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
                __int16 v14 = 1024;
                int v15 = 385;
                _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v12, 0x12u);
              }
              goto LABEL_15;
            }
            if (Espresso::zephyr::match_verbose)
            {
              uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
              if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
                goto LABEL_14;
              }
              int v12 = 136315650;
              uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
              __int16 v14 = 1024;
              int v15 = 379;
              __int16 v16 = 2080;
              uint64_t v17 = "p.axis_seq == 4";
              goto LABEL_13;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
            if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
              goto LABEL_14;
            }
            int v12 = 136315650;
            uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            __int16 v14 = 1024;
            int v15 = 378;
            __int16 v16 = 2080;
            uint64_t v17 = "p.axis_n == 3";
            goto LABEL_13;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v12 = 136315650;
          uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v14 = 1024;
          int v15 = 377;
          __int16 v16 = 2080;
          uint64_t v17 = "p.axis_k == 2";
          goto LABEL_13;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
          goto LABEL_14;
        }
        int v12 = 136315650;
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v14 = 1024;
        int v15 = 376;
        __int16 v16 = 2080;
        uint64_t v17 = "p.axis_h == 1";
        goto LABEL_13;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      uint64_t v5 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v12 = 136315650;
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v14 = 1024;
        int v15 = 371;
        __int16 v16 = 2080;
        uint64_t v17 = "t.node->outputs().size() == 1";
        goto LABEL_13;
      }
      goto LABEL_14;
    }
    return 0;
  }
  if (!Espresso::zephyr::match_verbose) {
    return 0;
  }
  uint64_t v5 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315650;
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    __int16 v14 = 1024;
    int v15 = 370;
    __int16 v16 = 2080;
    uint64_t v17 = "t.node->inputs().size() == 1";
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v6 = 0;
LABEL_15:

  return v6;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BF60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BF60;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_transpose_kernel>)>::~__func()
{
}

void sub_192B895BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  *(void *)&long long v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v8 = (char *)this + 64;
  if (v2 == (char *)this + 64)
  {
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      uint64_t v4 = *((void *)v2 + 2);
      v14[0] = &unk_1EE37B778;
      v14[1] = v2 + 16;
      v14[3] = v14;
      std::string::basic_string[abi:ne180100]<0>(&v15, "reshape");
      std::string::basic_string[abi:ne180100]<0>(v16, "reshape");
      int v9 = 0;
      uint64_t v10 = 0;
      char v11 = 0;
      int v12 = &v9;
      char v13 = 0;
      int v9 = (std::string *)operator new(0x30uLL);
      uint64_t v10 = v9;
      char v11 = v9 + 2;
      uint64_t v5 = 0;
      uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, &v15, &v17, v9);
      do
      {
        if (SHIBYTE(v16[v5 + 2]) < 0) {
          operator delete((void *)v16[v5]);
        }
        v5 -= 3;
      }
      while (v5 != -6);
      *(void *)&long long v15 = &unk_1EE37DB90;
      *((void *)&v15 + 1) = v14;
      v16[0] = &v15;
      char matched = Espresso::zephyr::match_kernel_chain(v4, (uint64_t *)&v9, &v15);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v15);
      int v12 = &v9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
      v3 |= matched;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](v14);
      uint64_t v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v8);
  }
  return v3 & 1;
}

void sub_192B89794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  a14 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS7_IT0_EEEEEEUlRKNS5_6vectorIPNS0_6node_tENS5_9allocatorISG_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DB90;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37DB90;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes20remove_reshape_chainERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(Espresso::zephyr::node_t **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)buf = *(void *)a2;
  *(void *)&uint8_t buf[8] = v5;
  uint64_t v8 = *(Espresso::zephyr::node_t **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)&buf[16] = *(void *)a3;
  uint64_t v23 = v7;
  do
  {
    char v9 = v3;
    if (*(void *)(*(void *)&buf[16 * v4] + 128) - *(void *)(*(void *)&buf[16 * v4] + 120) != 8)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      int v16 = 136315650;
      long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v18 = 1024;
      int v19 = 435;
      __int16 v20 = 2080;
      unsigned int v21 = "r.node->inputs().size() == 1";
LABEL_41:
      _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v16, 0x1Cu);
      goto LABEL_42;
    }
    a1 = (*(uint64_t (**)(void))(**(void **)&buf[16 * v4 + 8] + 320))(*(void *)&buf[16 * v4 + 8]);
    if (*(unsigned char *)(a1 + 32))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      int v16 = 136315650;
      long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v18 = 1024;
      int v19 = 440;
      __int16 v20 = 2080;
      unsigned int v21 = "p.dynamic_shape == false";
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 24))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      int v16 = 136315650;
      long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v18 = 1024;
      int v19 = 441;
      __int16 v20 = 2080;
      unsigned int v21 = "p.mode == FLATTEN_NCHW";
      goto LABEL_41;
    }
    if (*(int *)a1 <= 0)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      int v16 = 136315650;
      long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v18 = 1024;
      int v19 = 442;
      __int16 v20 = 2080;
      unsigned int v21 = "p.dst_w > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 4) <= 0)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      int v16 = 136315650;
      long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v18 = 1024;
      int v19 = 443;
      __int16 v20 = 2080;
      unsigned int v21 = "p.dst_h > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 8) <= 0)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      int v16 = 136315650;
      long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v18 = 1024;
      int v19 = 444;
      __int16 v20 = 2080;
      unsigned int v21 = "p.dst_k > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 12) <= 0)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
        goto LABEL_42;
      }
      int v16 = 136315650;
      long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v18 = 1024;
      int v19 = 445;
      __int16 v20 = 2080;
      unsigned int v21 = "p.dst_n > 0";
      goto LABEL_41;
    }
    if (*(int *)(a1 + 16) <= 0)
    {
      if (Espresso::zephyr::match_verbose)
      {
        long long v15 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v16 = 136315650;
          long long v17 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v18 = 1024;
          int v19 = 446;
          __int16 v20 = 2080;
          unsigned int v21 = "p.dst_seq > 0";
          goto LABEL_41;
        }
LABEL_42:
      }
      return 0;
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v9 & 1) == 0);
  uint64_t v10 = (Espresso::zephyr::value_t **)*((void *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v10) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_input_at(v8, 0, *v10);
  char v11 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v6);
  if (Espresso::zephyr::match_verbose)
  {
    char v13 = Espresso::espresso_os_log_subsystem(v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 452;
      _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
  }
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B778;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37B778;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_chain(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
}

void sub_192B8A0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)*((void *)this + 9);
  int v16 = (char *)this + 64;
  if (v2 == (char *)this + 64)
  {
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      uint64_t v4 = *((void *)v2 + 2);
      v20[0] = &unk_1EE37BD50;
      v20[1] = v2 + 16;
      v20[3] = v20;
      char v5 = Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(v4, (uint64_t)v20);
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](v20);
      uint64_t v6 = *((void *)v2 + 2);
      v19[0] = &unk_1EE37BDA8;
      v19[1] = v2 + 16;
      v19[3] = v19;
      char v7 = Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(v6, (uint64_t)v19);
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](v19);
      uint64_t v8 = *((void *)v2 + 2);
      v17[0] = &unk_1EE37BE00;
      v17[1] = v2 + 16;
      __int16 v18 = v17;
      char v11 = *(void **)(v8 + 120);
      uint64_t v10 = (void *)(v8 + 120);
      char v9 = v11;
      if (v11 == v10 - 1)
      {
        char v12 = 0;
      }
      else
      {
        char v12 = 0;
        do
        {
          int v13 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v18, v9[2]);
          __int16 v14 = v9 + 1;
          if (v13) {
            __int16 v14 = v10;
          }
          v12 |= v13;
          char v9 = (void *)*v14;
        }
        while ((void *)*v14 != v10 - 1);
      }
      v3 |= v12 | v5 | v7;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v17);
      uint64_t v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v16);
  }
  return v3 & 1;
}

void sub_192B8A290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v15 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v12, "reshape");
  std::string::basic_string[abi:ne180100]<0>(v13, "inner_product");
  std::string::basic_string[abi:ne180100]<0>(v14, "reshape");
  char v7 = 0;
  uint64_t v8 = 0;
  v9[0] = 0;
  v9[1] = &v7;
  char v10 = 0;
  char v7 = (std::string *)operator new(0x48uLL);
  uint64_t v8 = v7;
  v9[0] = v7 + 3;
  uint64_t v4 = 0;
  uint64_t v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v9, &v12, &v15, v7);
  do
  {
    if (SHIBYTE(v14[v4 + 2]) < 0) {
      operator delete((void *)v14[v4]);
    }
    v4 -= 3;
  }
  while (v4 != -9);
  v11[0] = &unk_1EE37DB38;
  v11[1] = a2;
  v11[3] = v11;
  uint64_t matched = Espresso::zephyr::match_kernel_chain(a1, (uint64_t *)&v7, v11);
  std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](v11);
  *(void *)&long long v12 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  return matched;
}

void sub_192B8A41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41remove_reshape_around_rank3_inner_productERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (Espresso::zephyr::node_t *)*a2;
  char v3 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(*a2);
  if (!v3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v4);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 561;
        __int16 v38 = 2080;
        int v39 = "squeeze_k";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  char v5 = v3;
  uint64_t v6 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v3 + 320))(v3);
  if (*(_DWORD *)v6)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 562;
        __int16 v38 = 2080;
        int v39 = "squeeze_k->get_params().nd_axis == 0";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_15:

      goto LABEL_16;
    }
    goto LABEL_16;
  }
  char v9 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  if (!*((_DWORD *)v9 + 1))
  {
    int v13 = (uint64_t *)*((void *)v2 + 12);
    if (*((uint64_t **)v2 + 13) == v13) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v14 = *v13;
    int v16 = *(uint64_t **)(v14 + 56);
    long long v15 = *(uint64_t **)(v14 + 64);
    if (v15 == v16)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_16;
      }
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 564;
        __int16 v38 = 2080;
        int v39 = "squeeze_node->output()->uses().size() > 0";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_15;
    }
    char v11 = 0;
    while (1)
    {
      if (v16[1])
      {
        char v17 = Espresso::zephyr::match_verbose;
        if (Espresso::zephyr::match_verbose)
        {
          __int16 v18 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 570;
            __int16 v38 = 2080;
            int v39 = "use.index == 0";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
LABEL_25:

          char v17 = 0;
        }
      }
      else
      {
        int v19 = (Espresso::zephyr::node_t *)*v16;
        char v9 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*v16);
        if (!v9)
        {
          char v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_26;
          }
          __int16 v18 = Espresso::espresso_os_log_subsystem(0, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 572;
            __int16 v38 = 2080;
            int v39 = "zephyr::cast_kernel<generic_inner_product_kernel>(use.user_node)";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        __int16 v20 = (void *)*((void *)v19 + 12);
        if (*((void **)v19 + 13) == v20) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v22 = *v20 + 56;
        unsigned int v21 = *(uint64_t **)v22;
        if (*(void *)(v22 + 8) - *(void *)v22 != 16)
        {
          char v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_26;
          }
          __int16 v18 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 576;
            __int16 v38 = 2080;
            int v39 = "inner_product_node->output()->has_one_use()";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        uint64_t v23 = (Espresso::zephyr::node_t *)*v21;
        char v9 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(*v21);
        if (!v9)
        {
          char v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_26;
          }
          __int16 v18 = Espresso::espresso_os_log_subsystem(0, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 581;
            __int16 v38 = 2080;
            int v39 = "expand_dims_k";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        uint64_t v24 = v9;
        char v9 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v9 + 320))(v9);
        if (*(_DWORD *)v9)
        {
          char v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_26;
          }
          __int16 v18 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 582;
            __int16 v38 = 2080;
            int v39 = "expand_dims_k->get_params().nd_axis == 0";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        char v9 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v24 + 320))(v24);
        if (*((_DWORD *)v9 + 1))
        {
          char v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_26;
          }
          __int16 v18 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 583;
            __int16 v38 = 2080;
            int v39 = "expand_dims_k->get_params().size_of_axes == 0";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        uint64_t v25 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
        if (*((Espresso::zephyr::value_t ***)v2 + 16) == v25) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v25);
        if (*(void *)buf)
        {
          uint64_t v26 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
          if (*((Espresso::zephyr::value_t ***)v2 + 16) == v26) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          Espresso::zephyr::need_shape((Espresso::zephyr *)&v35, *v26);
          int v27 = *(_DWORD *)(v35 + 20);
          if (v27 == -1)
          {
            if (*(_DWORD *)(v35 + 16) == 1) {
              int v27 = 4;
            }
            else {
              int v27 = 5;
            }
          }
          BOOL v28 = v27 == 3;
          if (v36) {
            nitro::nitro_function::nitro_function(v36);
          }
        }
        else
        {
          BOOL v28 = 0;
        }
        char v9 = *(Espresso **)&buf[8];
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (!v28)
        {
          char v17 = Espresso::zephyr::match_verbose;
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_26;
          }
          __int16 v18 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 586;
            __int16 v38 = 2080;
            int v39 = "need_shape(squeeze_node->input()) && need_shape(squeeze_node->input())->rank() == 3";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
        size_t v29 = (Espresso::zephyr::value_t **)*((void *)v23 + 12);
        if (*((Espresso::zephyr::value_t ***)v23 + 13) == v29) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v29);
        if (*(void *)buf)
        {
          std::string::size_type v30 = (Espresso::zephyr::value_t **)*((void *)v23 + 12);
          if (*((Espresso::zephyr::value_t ***)v23 + 13) == v30) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          Espresso::zephyr::need_shape((Espresso::zephyr *)&v35, *v30);
          int v31 = *(_DWORD *)(v35 + 20);
          if (v31 == -1)
          {
            if (*(_DWORD *)(v35 + 16) == 1) {
              int v31 = 4;
            }
            else {
              int v31 = 5;
            }
          }
          BOOL v32 = v31 != 3;
          if (v36) {
            nitro::nitro_function::nitro_function(v36);
          }
        }
        else
        {
          BOOL v32 = 1;
        }
        char v9 = *(Espresso **)&buf[8];
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (!v32)
        {
          int v33 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
          if (*((Espresso::zephyr::value_t ***)v2 + 16) == v33) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          Espresso::zephyr::node_t::replace_input_at(v19, 0, *v33);
          int v34 = (Espresso::zephyr::value_t **)*((void *)v23 + 12);
          if (*((Espresso::zephyr::value_t ***)v23 + 13) == v34) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          Espresso::zephyr::node_t::replace_output_at((uint64_t)v19, 0, *v34);
          char v9 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v23);
          char v17 = 1;
          goto LABEL_26;
        }
        char v17 = Espresso::zephyr::match_verbose;
        if (Espresso::zephyr::match_verbose)
        {
          __int16 v18 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 588;
            __int16 v38 = 2080;
            int v39 = "need_shape(expand_dims_node->output()) && need_shape(expand_dims_node->output())->rank() == 3";
            _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_25;
        }
      }
LABEL_26:
      v11 |= v17;
      v16 += 2;
      if (v16 == v15)
      {
        Espresso::zephyr::node_t::remove_if_unused(v2);
        return v11 & 1;
      }
    }
  }
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 563;
      __int16 v38 = 2080;
      int v39 = "squeeze_k->get_params().size_of_axes == 0";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_15;
  }
LABEL_16:
  char v11 = 0;
  return v11 & 1;
}

void sub_192B8AF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BE00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BE00;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41remove_reshape_around_rank3_inner_productERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(Espresso *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  uint64_t v5 = 0;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(Espresso::zephyr::node_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(Espresso::zephyr::node_t **)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(Espresso::zephyr::node_t **)a4;
  uint64_t v11 = *(void *)(a4 + 8);
  *(void *)&buf[0] = *(void *)a2;
  *((void *)&buf[0] + 1) = v7;
  *(void *)&buf[1] = v10;
  do
  {
    char v12 = v4;
    int v13 = *(void **)&buf[v5];
    if (v13[16] - v13[15] != 8)
    {
      if (Espresso::zephyr::match_verbose)
      {
        __int16 v38 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)dispatch_semaphore_t v42 = 136315650;
          *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&v42[12] = 1024;
          *(_DWORD *)&v42[14] = 513;
          __int16 v43 = 2080;
          long long v44 = "r.node->inputs().size() == 1";
LABEL_31:
          _os_log_impl(&dword_1920CB000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v42, 0x1Cu);
        }
LABEL_32:
      }
      return 0;
    }
    if (v13[13] - v13[12] != 8)
    {
      if (Espresso::zephyr::match_verbose)
      {
        __int16 v38 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)dispatch_semaphore_t v42 = 136315650;
          *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&v42[12] = 1024;
          *(_DWORD *)&v42[14] = 514;
          __int16 v43 = 2080;
          long long v44 = "r.node->outputs().size() == 1";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      return 0;
    }
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v12 & 1) == 0);
  uint64_t v14 = (Espresso::zephyr::value_t **)*((void *)v10 + 12);
  if (*((Espresso::zephyr::value_t ***)v10 + 13) == v14) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)v42, *v14);
  long long v15 = (Espresso::zephyr::value_t **)*((void *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v15) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v40, *v15);
  if (!*(void *)v42)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 519;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "out_shape_ptr";
LABEL_73:
    _os_log_impl(&dword_1920CB000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)buf, 0x1Cu);
    goto LABEL_74;
  }
  __int16 v18 = v40;
  if (!v40)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 520;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "in_shape_ptr";
    goto LABEL_73;
  }
  if (v40[5] != 3)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 522;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "in_shape_ptr->rank() == 3";
    goto LABEL_73;
  }
  if (*(_DWORD *)(*(void *)v42 + 20) != 3)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 523;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "out_shape_ptr->rank() == 3";
    goto LABEL_73;
  }
  if (v40[2] != *(_DWORD *)(*(void *)v42 + 8))
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 525;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "in_shape_ptr->k == out_shape_ptr->k";
    goto LABEL_73;
  }
  if (v40[1] != *(_DWORD *)(*(void *)v42 + 4))
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 526;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "in_shape_ptr->h == out_shape_ptr->h";
    goto LABEL_73;
  }
  int v19 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 320))(v7);
  if (*((_DWORD *)v19 + 5) != 2)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v19, v20);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 529;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "p_in.dst_nd_rank == 2";
    goto LABEL_73;
  }
  int v22 = *(_DWORD *)v19;
  int v21 = *((_DWORD *)v19 + 1);
  uint64_t v23 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 384))(v9);
  if (v22 != *((_DWORD *)v23 + 1))
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v23, v24);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 530;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "p_in.dst_w == ip.kernel->get_params().nB";
    goto LABEL_73;
  }
  if (v21 != v18[2] * v18[1])
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v23, v24);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 531;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "p_in.dst_h == in_shape_ptr->h * in_shape_ptr->k";
    goto LABEL_73;
  }
  uint64_t v25 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 320))(v11);
  if (*((_DWORD *)v25 + 5) != 3)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v25, v26);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 534;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "p_out.dst_nd_rank == 3";
    goto LABEL_73;
  }
  int v28 = *(_DWORD *)v25;
  int v27 = *((_DWORD *)v25 + 1);
  int v29 = *((_DWORD *)v25 + 2);
  std::string::size_type v30 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 384))(v9);
  if (v28 != *(_DWORD *)v30)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v30, v31);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 535;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "p_out.dst_w == ip.kernel->get_params().nC";
    goto LABEL_73;
  }
  if (v27 != v18[1])
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_76;
    }
    int v36 = Espresso::espresso_os_log_subsystem(v30, v31);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      goto LABEL_74;
    }
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 536;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = "p_out.dst_h == in_shape_ptr->h";
    goto LABEL_73;
  }
  if (v29 != v18[2])
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v36 = Espresso::espresso_os_log_subsystem(v30, v31);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0]) = 136315650;
        *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_strength_reduction.mm";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 537;
        WORD1(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 4) = "p_out.dst_k == in_shape_ptr->k";
        goto LABEL_73;
      }
LABEL_74:
      uint64_t v37 = 0;
      goto LABEL_75;
    }
LABEL_76:
    uint64_t v37 = 0;
    goto LABEL_77;
  }
  BOOL v32 = (Espresso::zephyr::value_t **)*((void *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v32
    || (Espresso::zephyr::node_t::replace_input_at(v8, 0, *v32),
        int v33 = (Espresso::zephyr::value_t **)*((void *)v10 + 12),
        *((Espresso::zephyr::value_t ***)v10 + 13) == v33))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)v8, 0, *v33);
  Espresso::zephyr::node_t::remove_from_graphs(v10);
  int v34 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v6);
  if (Espresso::zephyr::match_verbose)
  {
    int v36 = Espresso::espresso_os_log_subsystem(v34, v35);
    uint64_t v37 = 1;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 547;
      _os_log_impl(&dword_1920CB000, v36, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)buf, 0x12u);
    }
LABEL_75:
  }
  else
  {
    uint64_t v37 = 1;
  }
LABEL_77:
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (*(void *)&v42[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v42[8]);
  }
  return v37;
}

void sub_192B8BA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BDA8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BDA8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelENS_28generic_inner_product_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EENS8_IT1_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISJ_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  uint64_t v7 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(v6);
  uint64_t v8 = (*a2)[2];
  v13[0] = v4;
  v13[1] = v5;
  v12[0] = v6;
  v12[1] = v7;
  v11[0] = v8;
  v11[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v8);
  uint64_t v9 = *(void *)(v3 + 24);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)v9 + 48))(v9, v13, v12, v11);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DB38;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37DB38;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_inner_product_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41remove_reshape_around_rank3_inner_productERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::operator()(Espresso *a1, uint64_t a2, Espresso::zephyr::node_t **a3, uint64_t a4)
{
  char v4 = 0;
  uint64_t v5 = 0;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(Espresso::zephyr::node_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *a3;
  uint64_t v9 = *(Espresso::zephyr::node_t **)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  *(void *)buf = *(void *)a2;
  *(void *)&uint8_t buf[8] = v7;
  *(void *)&buf[16] = v9;
  *(void *)&unsigned char buf[24] = v10;
  do
  {
    char v11 = v4;
    char v12 = *(void **)&buf[16 * v5];
    if (v12[16] - v12[15] != 8)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v26 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      int v28 = 136315650;
      int v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v30 = 1024;
      int v31 = 474;
      __int16 v32 = 2080;
      int v33 = "r.node->inputs().size() == 1";
LABEL_41:
      int v27 = (uint8_t *)&v28;
LABEL_42:
      _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v27, 0x1Cu);
      goto LABEL_43;
    }
    if (v12[13] - v12[12] != 8)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v26 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      int v28 = 136315650;
      int v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v30 = 1024;
      int v31 = 475;
      __int16 v32 = 2080;
      int v33 = "r.node->outputs().size() == 1";
      goto LABEL_41;
    }
    a1 = (Espresso *)(*(uint64_t (**)(void))(**(void **)&buf[16 * v5 + 8] + 320))(*(void *)&buf[16 * v5 + 8]);
    if (*(int *)a1 <= 0)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v26 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      int v28 = 136315650;
      int v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v30 = 1024;
      int v31 = 481;
      __int16 v32 = 2080;
      int v33 = "p.dst_w > 0";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 2) >= 2u)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v26 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      int v28 = 136315650;
      int v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v30 = 1024;
      int v31 = 483;
      __int16 v32 = 2080;
      int v33 = "p.dst_k == 0 || p.dst_k == 1";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 3) >= 2u)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v26 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      int v28 = 136315650;
      int v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v30 = 1024;
      int v31 = 484;
      __int16 v32 = 2080;
      int v33 = "p.dst_n == 0 || p.dst_n == 1";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 4) >= 2u)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v26 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      int v28 = 136315650;
      int v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v30 = 1024;
      int v31 = 485;
      __int16 v32 = 2080;
      int v33 = "p.dst_seq == 0 || p.dst_seq == 1";
      goto LABEL_41;
    }
    if (*((_DWORD *)a1 + 6))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v26 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          int v28 = 136315650;
          int v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v30 = 1024;
          int v31 = 486;
          __int16 v32 = 2080;
          int v33 = "p.mode == FLATTEN_NCHW";
          goto LABEL_41;
        }
LABEL_43:
      }
      return 0;
    }
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v11 & 1) == 0);
  int v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 320))(v7) + 4);
  uint64_t v14 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 320))(v10);
  if (v13 != *((_DWORD *)v14 + 1))
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v26 = Espresso::espresso_os_log_subsystem(v14, v15);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 490;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = "r_in.kernel->get_params().dst_h == r_out.kernel->get_params().dst_h";
LABEL_55:
    int v27 = buf;
    goto LABEL_42;
  }
  int v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 320))(v7);
  if (*((_DWORD *)v16 + 5) != 2)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v26 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 492;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = "r_in.kernel->get_params().dst_nd_rank == 2";
    goto LABEL_55;
  }
  __int16 v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 320))(v10);
  if (*((_DWORD *)v18 + 5) != 3)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    uint64_t v26 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 493;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = "r_out.kernel->get_params().dst_nd_rank == 3";
    goto LABEL_55;
  }
  __int16 v20 = (Espresso::zephyr::value_t **)*((void *)v6 + 15);
  if (*((Espresso::zephyr::value_t ***)v6 + 16) == v20
    || (Espresso::zephyr::node_t::replace_input_at(v8, 0, *v20),
        int v21 = (Espresso::zephyr::value_t **)*((void *)v9 + 12),
        *((Espresso::zephyr::value_t ***)v9 + 13) == v21))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)v8, 0, *v21);
  Espresso::zephyr::node_t::remove_from_graphs(v9);
  int v22 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v6);
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v24 = Espresso::espresso_os_log_subsystem(v22, v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 501;
      _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
  }
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BD50;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BD50;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank3_inner_product(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__func()
{
}

void sub_192B8C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  *(void *)&long long v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)*((void *)this + 9);
  char v11 = (char *)this + 64;
  if (v2 == (char *)this + 64)
  {
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      uint64_t v4 = *((void *)v2 + 2);
      v18[0] = &unk_1EE37BB98;
      v18[3] = v18;
      int v19 = &unk_1EE379780;
      uint64_t v20 = v4;
      int v21 = v18;
      int v22 = &v19;
      std::string::basic_string[abi:ne180100]<0>(&v23, "reshape");
      std::string::basic_string[abi:ne180100]<0>(v24, "softmax_nd");
      std::string::basic_string[abi:ne180100]<0>(v25, "reshape");
      char v12 = 0;
      int v13 = 0;
      uint64_t v14 = 0;
      long long v15 = &v12;
      char v16 = 0;
      char v12 = (std::string *)operator new(0x48uLL);
      int v13 = v12;
      uint64_t v14 = v12 + 3;
      uint64_t v5 = 0;
      int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v23, &v26, v12);
      do
      {
        if (SHIBYTE(v25[v5 + 2]) < 0) {
          operator delete((void *)v25[v5]);
        }
        v5 -= 3;
      }
      while (v5 != -9);
      *(void *)&long long v23 = &unk_1EE37DAE0;
      *((void *)&v23 + 1) = &v19;
      v24[0] = &v23;
      char matched = Espresso::zephyr::match_kernel_chain(v4, (uint64_t *)&v12, &v23);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v23);
      long long v15 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](&v19);
      std::__function::__value_func<BOOL ()(Espresso::softmax_nd_params_t const&)>::~__value_func[abi:ne180100](v18);
      uint64_t v7 = *((void *)v2 + 2);
      v17[0] = &unk_1EE37BBF0;
      void v17[3] = v17;
      int v19 = &unk_1EE379728;
      uint64_t v20 = v7;
      int v21 = v17;
      int v22 = &v19;
      std::string::basic_string[abi:ne180100]<0>(&v23, "reshape");
      std::string::basic_string[abi:ne180100]<0>(v24, "softmax");
      std::string::basic_string[abi:ne180100]<0>(v25, "reshape");
      char v12 = 0;
      int v13 = 0;
      uint64_t v14 = 0;
      long long v15 = &v12;
      char v16 = 0;
      char v12 = (std::string *)operator new(0x48uLL);
      int v13 = v12;
      uint64_t v14 = v12 + 3;
      uint64_t v8 = 0;
      int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v23, &v26, v12);
      do
      {
        if (SHIBYTE(v25[v8 + 2]) < 0) {
          operator delete((void *)v25[v8]);
        }
        v8 -= 3;
      }
      while (v8 != -9);
      *(void *)&long long v23 = &unk_1EE37DA88;
      *((void *)&v23 + 1) = &v19;
      v24[0] = &v23;
      char v9 = Espresso::zephyr::match_kernel_chain(v7, (uint64_t *)&v12, &v23);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v23);
      long long v15 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](&v19);
      v3 |= matched | v9;
      std::__function::__value_func<BOOL ()(Espresso::softmax_params const&)>::~__value_func[abi:ne180100](v17);
      uint64_t v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v11);
  }
  return v3 & 1;
}

void sub_192B8C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100]((void *)(v28 - 168));
  a18 = (void **)&a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](&a28);
  std::__function::__value_func<BOOL ()(Espresso::softmax_params const&)>::~__value_func[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::softmax_nd_params_t const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Espresso::softmax_params const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelENS_22generic_softmax_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EENS8_IT1_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISJ_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  uint64_t v6 = *a2;
  uint64_t v7 = (*a2)[1];
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0 && (v9 = *(const void **)(v8 + 8)) != 0)
  {
    if (v10)
    {
      char v11 = *(std::__shared_weak_count **)(v8 + 16);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v11);
        uint64_t v6 = *a2;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v12 = v6[2];
  v17[0] = v4;
  v17[1] = v5;
  v16[0] = v7;
  v16[1] = v10;
  v15[0] = v12;
  v15[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v12);
  uint64_t v13 = *(void *)(v3 + 24);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)v13 + 48))(v13, v17, v16, v15);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DA88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37DA88;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"Z37remove_reshape_around_rank2_softmax_tIN8Espresso22generic_softmax_kernelEEbRNS0_6zephyr15ordered_block_tENSt3__18functionIFbRKNT_8params_tEEEEEUlNS2_19match_kernel_info_tINS0_22generic_reshape_kernelEEENSD_IS1_EESF_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *(Espresso::zephyr::node_t **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  char v9 = *(Espresso::zephyr::node_t **)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  char v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BDA8;
  LODWORD(v11[1].__vftable) = Espresso::zephyr::match_verbose;
  Espresso::zephyr::match_verbose = 1;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 320))(v8);
  uint64_t v14 = *(void *)(v12 + 24);
  if (!v14) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v15 = (Espresso *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v13);
  if ((v15 & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 620;
        __int16 v40 = 2080;
        uint64_t v41 = "check_p(softmax.kernel->get_params())";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((void *)v7 + 16) - *((void *)v7 + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 621;
        __int16 v40 = 2080;
        uint64_t v41 = "softmax.node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((void *)v7 + 13) - *((void *)v7 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 622;
        __int16 v40 = 2080;
        uint64_t v41 = "softmax.node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(void *)(v5 + 128) - *(void *)(v5 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 625;
        __int16 v40 = 2080;
        uint64_t v41 = "r_in.node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(void *)(v5 + 104) - *(void *)(v5 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 626;
        __int16 v40 = 2080;
        uint64_t v41 = "r_in.node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  char v17 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 320))(v6);
  if (*((_DWORD *)v17 + 5) != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v17, v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 630;
        __int16 v40 = 2080;
        uint64_t v41 = "p_in.dst_nd_rank == 2";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
LABEL_37:
    uint64_t v20 = 0;
    goto LABEL_38;
  }
  if (*((_DWORD *)v17 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v17, v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 631;
        __int16 v40 = 2080;
        uint64_t v41 = "p_in.mode == FLATTEN_NCHW";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_36:

      goto LABEL_37;
    }
    goto LABEL_37;
  }
  int v22 = *(_DWORD *)v17;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v34, **(Espresso::zephyr::value_t ***)(v5 + 120));
  uint64_t v25 = v34;
  if (!v34)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 634;
        __int16 v40 = 2080;
        uint64_t v41 = "input_shape_ptr";
        goto LABEL_65;
      }
LABEL_66:
      uint64_t v20 = 0;
LABEL_67:

      goto LABEL_82;
    }
    goto LABEL_81;
  }
  int v26 = v34[5];
  if (v26 != 4 && (v26 != -1 || v34[4] != 1))
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 635;
        __int16 v40 = 2080;
        uint64_t v41 = "input_shape_ptr->rank() == 4";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (v22 != *v34)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 637;
        __int16 v40 = 2080;
        uint64_t v41 = "p_in.dst_w == input_shape_ptr->w";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (*((void *)v9 + 16) - *((void *)v9 + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 641;
        __int16 v40 = 2080;
        uint64_t v41 = "r_out.node->inputs().size() == 1";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (*((void *)v9 + 13) - *((void *)v9 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 642;
        __int16 v40 = 2080;
        uint64_t v41 = "r_out.node->outputs().size() == 1";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  int v27 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 320))(v10);
  if (*((_DWORD *)v27 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 645;
        __int16 v40 = 2080;
        uint64_t v41 = "p_out.mode == FLATTEN_NCHW";
LABEL_65:
        _os_log_impl(&dword_1920CB000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        goto LABEL_66;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (*((_DWORD *)v27 + 5) != 4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v38 = 1024;
      int v39 = 646;
      __int16 v40 = 2080;
      uint64_t v41 = "p_out.dst_nd_rank == 4";
      goto LABEL_65;
    }
LABEL_81:
    uint64_t v20 = 0;
    goto LABEL_82;
  }
  if (*(_DWORD *)v27 != *v25)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v38 = 1024;
      int v39 = 648;
      __int16 v40 = 2080;
      uint64_t v41 = "p_out.dst_w == input_shape_ptr->w";
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  __int16 v30 = *(Espresso::zephyr::value_t ***)(v5 + 120);
  if (*(Espresso::zephyr::value_t ***)(v5 + 128) == v30
    || (Espresso::zephyr::node_t::replace_input_at(v7, 0, *v30),
        int v31 = (Espresso::zephyr::value_t **)*((void *)v9 + 12),
        *((Espresso::zephyr::value_t ***)v9 + 13) == v31))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)v7, 0, *v31);
  Espresso::zephyr::node_t::remove_from_graphs(v9);
  __int16 v32 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
  if (Espresso::zephyr::match_verbose)
  {
    int v29 = Espresso::espresso_os_log_subsystem(v32, v33);
    uint64_t v20 = 1;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v38 = 1024;
      int v39 = 658;
      _os_log_impl(&dword_1920CB000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_67;
  }
  uint64_t v20 = 1;
LABEL_82:
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
LABEL_38:
  nitro::nitro_function::nitro_function(v11);
  return v20;
}

void sub_192B8D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  nitro::nitro_function::nitro_function(v10);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE379728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE379728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_kernel>)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes35remove_reshape_around_rank2_softmaxERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 27) && *(unsigned char *)(a2 + 24) == 0;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37BBF0;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EE37BBF0;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::softmax_params const&)>::~__func()
{
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_22generic_reshape_kernelENS_25generic_softmax_nd_kernelES2_EEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EENS8_IT1_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISJ_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v4);
  uint64_t v6 = *a2;
  uint64_t v7 = (*a2)[1];
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0 && (v9 = *(const void **)(v8 + 8)) != 0)
  {
    if (v10)
    {
      char v11 = *(std::__shared_weak_count **)(v8 + 16);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v11);
        uint64_t v6 = *a2;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v12 = v6[2];
  v17[0] = v4;
  v17[1] = v5;
  v16[0] = v7;
  v16[1] = v10;
  v15[0] = v12;
  v15[1] = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(v12);
  uint64_t v13 = *(void *)(v3 + 24);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)v13 + 48))(v13, v17, v16, v15);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DAE0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37DAE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_reshape_kernel,Espresso::generic_softmax_nd_kernel,Espresso::generic_reshape_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_softmax_nd_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"Z37remove_reshape_around_rank2_softmax_tIN8Espresso25generic_softmax_nd_kernelEEbRNS0_6zephyr15ordered_block_tENSt3__18functionIFbRKNT_8params_tEEEEEUlNS2_19match_kernel_info_tINS0_22generic_reshape_kernelEEENSD_IS1_EESF_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *(Espresso::zephyr::node_t **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  char v9 = *(Espresso::zephyr::node_t **)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  char v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BDA8;
  LODWORD(v11[1].__vftable) = Espresso::zephyr::match_verbose;
  Espresso::zephyr::match_verbose = 1;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 320))(v8);
  uint64_t v14 = *(void *)(v12 + 24);
  if (!v14) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v15 = (Espresso *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v13);
  if ((v15 & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 620;
        __int16 v40 = 2080;
        uint64_t v41 = "check_p(softmax.kernel->get_params())";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((void *)v7 + 16) - *((void *)v7 + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 621;
        __int16 v40 = 2080;
        uint64_t v41 = "softmax.node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*((void *)v7 + 13) - *((void *)v7 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 622;
        __int16 v40 = 2080;
        uint64_t v41 = "softmax.node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(void *)(v5 + 128) - *(void *)(v5 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 625;
        __int16 v40 = 2080;
        uint64_t v41 = "r_in.node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (*(void *)(v5 + 104) - *(void *)(v5 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 626;
        __int16 v40 = 2080;
        uint64_t v41 = "r_in.node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  char v17 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 320))(v6);
  if (*((_DWORD *)v17 + 5) != 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v17, v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 630;
        __int16 v40 = 2080;
        uint64_t v41 = "p_in.dst_nd_rank == 2";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_36;
    }
LABEL_37:
    uint64_t v20 = 0;
    goto LABEL_38;
  }
  if (*((_DWORD *)v17 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(v17, v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 631;
        __int16 v40 = 2080;
        uint64_t v41 = "p_in.mode == FLATTEN_NCHW";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_36:

      goto LABEL_37;
    }
    goto LABEL_37;
  }
  int v22 = *(_DWORD *)v17;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v34, **(Espresso::zephyr::value_t ***)(v5 + 120));
  uint64_t v25 = v34;
  if (!v34)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 634;
        __int16 v40 = 2080;
        uint64_t v41 = "input_shape_ptr";
        goto LABEL_65;
      }
LABEL_66:
      uint64_t v20 = 0;
LABEL_67:

      goto LABEL_82;
    }
    goto LABEL_81;
  }
  int v26 = v34[5];
  if (v26 != 4 && (v26 != -1 || v34[4] != 1))
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 635;
        __int16 v40 = 2080;
        uint64_t v41 = "input_shape_ptr->rank() == 4";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (v22 != *v34)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 637;
        __int16 v40 = 2080;
        uint64_t v41 = "p_in.dst_w == input_shape_ptr->w";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (*((void *)v9 + 16) - *((void *)v9 + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 641;
        __int16 v40 = 2080;
        uint64_t v41 = "r_out.node->inputs().size() == 1";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (*((void *)v9 + 13) - *((void *)v9 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v23, v24);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 642;
        __int16 v40 = 2080;
        uint64_t v41 = "r_out.node->outputs().size() == 1";
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  int v27 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 320))(v10);
  if (*((_DWORD *)v27 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v38 = 1024;
        int v39 = 645;
        __int16 v40 = 2080;
        uint64_t v41 = "p_out.mode == FLATTEN_NCHW";
LABEL_65:
        _os_log_impl(&dword_1920CB000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        goto LABEL_66;
      }
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  if (*((_DWORD *)v27 + 5) != 4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v38 = 1024;
      int v39 = 646;
      __int16 v40 = 2080;
      uint64_t v41 = "p_out.dst_nd_rank == 4";
      goto LABEL_65;
    }
LABEL_81:
    uint64_t v20 = 0;
    goto LABEL_82;
  }
  if (*(_DWORD *)v27 != *v25)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v29 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v38 = 1024;
      int v39 = 648;
      __int16 v40 = 2080;
      uint64_t v41 = "p_out.dst_w == input_shape_ptr->w";
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  __int16 v30 = *(Espresso::zephyr::value_t ***)(v5 + 120);
  if (*(Espresso::zephyr::value_t ***)(v5 + 128) == v30
    || (Espresso::zephyr::node_t::replace_input_at(v7, 0, *v30),
        int v31 = (Espresso::zephyr::value_t **)*((void *)v9 + 12),
        *((Espresso::zephyr::value_t ***)v9 + 13) == v31))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)v7, 0, *v31);
  Espresso::zephyr::node_t::remove_from_graphs(v9);
  __int16 v32 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
  if (Espresso::zephyr::match_verbose)
  {
    int v29 = Espresso::espresso_os_log_subsystem(v32, v33);
    uint64_t v20 = 1;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v38 = 1024;
      int v39 = 658;
      _os_log_impl(&dword_1920CB000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_67;
  }
  uint64_t v20 = 1;
LABEL_82:
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
LABEL_38:
  nitro::nitro_function::nitro_function(v11);
  return v20;
}

void sub_192B8E81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  nitro::nitro_function::nitro_function(v10);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE379780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE379780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},std::allocator<std::allocator>,BOOL ()(Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,BOOL remove_reshape_around_rank2_softmax_t<Espresso::generic_softmax_nd_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::generic_softmax_nd_kernel::params_t const&)>)::{lambda(Espresso::zephyr::match_kernel_info_t<Espresso::generic_reshape_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>,Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)#1},Espresso::generic_reshape_kernel<Espresso::generic_softmax_nd_kernel>)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes35remove_reshape_around_rank2_softmaxERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  return *a2 == -1;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37BB98;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EE37BB98;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_reshape_around_rank2_softmax(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::softmax_nd_params_t const&)>::~__func()
{
}

void sub_192B8EA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BCF8;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B8EB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes37strength_reduction_reshape_to_flattenERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  char v4 = Espresso::zephyr::cast_kernel<Espresso::generic_reshape_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 909;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "reshape_kernel != nullptr";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  uint64_t v6 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  if (*((_DWORD *)v6 + 5) != -1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 910;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "reshape_kernel->get_params().dst_nd_rank == -1";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_28:

      return 0;
    }
    return 0;
  }
  char v9 = *(Espresso::zephyr::value_t ***)(v3 + 120);
  if (*(void *)(v3 + 128) - (void)v9 != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 912;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "reshape_node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  if (*(void *)(v3 + 104) - *(void *)(v3 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 913;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "reshape_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_28;
    }
    return 0;
  }
  int v10 = *v9;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v84, *v9);
  uint64_t v13 = v84;
  if (!v84)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v24 = Espresso::espresso_os_log_subsystem(v11, v12);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 917;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "input_shape_ptr";
        _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    uint64_t v22 = 0;
    goto LABEL_149;
  }
  uint64_t v14 = *(Espresso::zephyr::value_t ***)(v3 + 96);
  if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v14) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v82, *v14);
  char v17 = v82;
  if (!v82)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v25 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 920;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "output_shape_ptr";
        _os_log_impl(&dword_1920CB000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    goto LABEL_92;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v76, v13, 0);
  __int16 v18 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v70, v17, 0);
  unsigned int v20 = v81;
  if (v81 > 3)
  {
    if (v81 == 5)
    {
LABEL_43:
      uint64_t v21 = v77 * (uint64_t)v76;
      goto LABEL_46;
    }
    if (v81 == 4)
    {
LABEL_42:
      uint64_t v21 = v76;
      goto LABEL_46;
    }
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = (int)v81;
    if (!v81) {
      goto LABEL_46;
    }
    if (v81 != 1)
    {
      if (v81 != 2) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    uint64_t v21 = 1;
  }
LABEL_46:
  uint64_t v26 = v75;
  if (v75 > 3)
  {
    if (v75 == 5)
    {
LABEL_54:
      uint64_t v27 = v71 * (uint64_t)v70;
      goto LABEL_57;
    }
    if (v75 == 4)
    {
LABEL_53:
      uint64_t v27 = v70;
      goto LABEL_57;
    }
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = v75;
    if (!v75) {
      goto LABEL_57;
    }
    if (v75 != 1)
    {
      if (v75 != 2) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    uint64_t v27 = 1;
  }
LABEL_57:
  if (v81 > 3)
  {
    if (v81 == 5)
    {
      int v30 = v79;
      int v29 = v80;
      uint64_t v31 = v78;
    }
    else
    {
      if (v81 != 4)
      {
        uint64_t v28 = 0;
        goto LABEL_70;
      }
      int v30 = v78;
      int v29 = v79;
      uint64_t v31 = v77;
    }
    uint64_t v28 = v30 * (uint64_t)v29 * v31;
    goto LABEL_70;
  }
  uint64_t v28 = (int)v81;
  if (v81)
  {
    if (v81 == 2)
    {
      uint64_t v28 = v77;
    }
    else if (v81 == 1)
    {
      uint64_t v28 = v76;
    }
    else
    {
      uint64_t v28 = v78;
    }
  }
LABEL_70:
  if (v75 > 3)
  {
    if (v75 == 5)
    {
      int v34 = v73;
      int v33 = v74;
      uint64_t v35 = v72;
    }
    else
    {
      if (v75 != 4)
      {
        uint64_t v32 = 0;
        goto LABEL_83;
      }
      int v34 = v72;
      int v33 = v73;
      uint64_t v35 = v71;
    }
    uint64_t v32 = v34 * (uint64_t)v33 * v35;
  }
  else
  {
    uint64_t v32 = v75;
    if (v75)
    {
      if (v75 == 2)
      {
        uint64_t v32 = v71;
      }
      else if (v75 == 1)
      {
        uint64_t v32 = v70;
      }
      else
      {
        uint64_t v32 = v72;
      }
    }
  }
LABEL_83:
  if (v21 != v27 || v28 != v32)
  {
    if (Espresso::zephyr::match_verbose)
    {
      __int16 v38 = Espresso::espresso_os_log_subsystem(v18, v19);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 931;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "input_m == output_m && input_n == output_n";
        _os_log_impl(&dword_1920CB000, v38, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
LABEL_92:
    uint64_t v22 = 0;
    goto LABEL_147;
  }
  if (v81 <= 3)
  {
    if (v81)
    {
      __int16 v18 = (Espresso *)operator new(4uLL);
      int v36 = v18;
      *(_DWORD *)__int16 v18 = v20 - 1;
      uint64_t v37 = (char *)v18 + 4;
      goto LABEL_99;
    }
    goto LABEL_96;
  }
  if (v81 == 5)
  {
    __int16 v18 = (Espresso *)operator new(0xCuLL);
    int v36 = v18;
    uint64_t v37 = (char *)v18 + 12;
    *(void *)__int16 v18 = 0x300000004;
    int v39 = 2;
  }
  else
  {
    if (v81 != 4)
    {
LABEL_96:
      int v36 = 0;
      uint64_t v37 = 0;
      goto LABEL_99;
    }
    __int16 v18 = (Espresso *)operator new(0xCuLL);
    int v36 = v18;
    uint64_t v37 = (char *)v18 + 12;
    *(void *)__int16 v18 = 0x200000003;
    int v39 = 1;
  }
  *((_DWORD *)v36 + 2) = v39;
LABEL_99:
  if (v26 > 3)
  {
    if (v26 == 5)
    {
      __int16 v18 = (Espresso *)operator new(0xCuLL);
      __int16 v40 = v18;
      uint64_t v41 = (Espresso *)((char *)v18 + 12);
      *(void *)__int16 v18 = 0x300000004;
      int v42 = 2;
    }
    else
    {
      if (v26 != 4) {
        goto LABEL_105;
      }
      __int16 v18 = (Espresso *)operator new(0xCuLL);
      __int16 v40 = v18;
      uint64_t v41 = (Espresso *)((char *)v18 + 12);
      *(void *)__int16 v18 = 0x200000003;
      int v42 = 1;
    }
    *((_DWORD *)v40 + 2) = v42;
    goto LABEL_108;
  }
  if (!v26)
  {
LABEL_105:
    __int16 v40 = 0;
    uint64_t v41 = 0;
    goto LABEL_108;
  }
  __int16 v18 = (Espresso *)operator new(4uLL);
  __int16 v40 = v18;
  *(_DWORD *)__int16 v18 = v26 - 1;
  uint64_t v41 = (Espresso *)((char *)v18 + 4);
LABEL_108:
  unint64_t v43 = (v41 - v40) >> 2;
  if (v43 > (v37 - (char *)v36) >> 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v44 = Espresso::espresso_os_log_subsystem(v18, v19);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 936;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "input_col_dims.size() >= output_col_dims.size()";
        _os_log_impl(&dword_1920CB000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_141:

      goto LABEL_142;
    }
    goto LABEL_142;
  }
  if (v41 == v40)
  {
    int v46 = -1;
LABEL_124:
    if (v28 == v46)
    {
      uint64_t v50 = Espresso::espresso_os_log_subsystem(v18, v19);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        __int16 v61 = (const char *)(v3 + 144);
        if (*(char *)(v3 + 167) < 0) {
          __int16 v61 = *(const char **)v61;
        }
        int v62 = *(_DWORD *)v13;
        int v63 = *((_DWORD *)v13 + 1);
        int v64 = *((_DWORD *)v13 + 2);
        int v65 = *((_DWORD *)v13 + 3);
        int v66 = *((_DWORD *)v13 + 4);
        *(_DWORD *)buf = 136316418;
        char v87 = v61;
        __int16 v88 = 1024;
        int v89 = v62;
        __int16 v90 = 1024;
        *(_DWORD *)uint64_t v91 = v63;
        *(_WORD *)&v91[4] = 1024;
        *(_DWORD *)&v91[6] = v64;
        __int16 v92 = 1024;
        int v93 = v65;
        __int16 v94 = 1024;
        int v95 = v66;
        _os_log_debug_impl(&dword_1920CB000, v50, OS_LOG_TYPE_DEBUG, "zephyr_passes::strength_reduction_reshape_to_flatten: %s w=%d h=%d k=%d n=%d seq=%d", buf, 0x2Au);
      }

      uint64_t v69 = 0;
      Espresso::zephyr::make_kernel<Espresso::generic_flatten_kernel,Espresso::zephyr::node_t,Espresso::flatten_params>(&v67, *(void *)(*(void *)(v3 + 8) + 8), (uint64_t)&v69);
      uint64_t v51 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v3 + 24), v3 + 144);
      uint64_t v52 = *((void *)v51 + 1);
      uint64_t v53 = v67;
      long long v54 = v68;
      if (v68) {
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v55 = *(std::__shared_weak_count **)(v52 + 16);
      *(void *)(v52 + 8) = v53;
      *(void *)(v52 + 16) = v54;
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v51, v10);
      long long v56 = *(Espresso::zephyr::value_t ***)(v3 + 96);
      if (*(Espresso::zephyr::value_t ***)(v3 + 104) == v56) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v51, *v56);
      Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v51, (Espresso::zephyr::node_t *)v3);
      long long v57 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v3);
      if (Espresso::zephyr::match_verbose)
      {
        int v59 = Espresso::espresso_os_log_subsystem(v57, v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v88 = 1024;
          int v89 = 973;
          _os_log_impl(&dword_1920CB000, v59, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
        }
      }
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      uint64_t v22 = 1;
LABEL_143:
      if (v40) {
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    if (Espresso::zephyr::match_verbose)
    {
      long long v44 = Espresso::espresso_os_log_subsystem(v18, v19);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v88 = 1024;
        int v89 = 946;
        __int16 v90 = 2080;
        *(void *)uint64_t v91 = "non_one_col_dim == input_n";
        _os_log_impl(&dword_1920CB000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_141;
    }
LABEL_142:
    uint64_t v22 = 0;
    goto LABEL_143;
  }
  if (v43 <= 1) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = (v41 - v40) >> 2;
  }
  int v46 = -1;
  uint64_t v47 = v40;
  while (1)
  {
    uint64_t v49 = *(int *)v47;
    uint64_t v47 = (Espresso *)((char *)v47 + 4);
    uint64_t v48 = v49;
    if (v49 != 1) {
      break;
    }
LABEL_121:
    if (!--v45) {
      goto LABEL_124;
    }
  }
  if (v46 == -1)
  {
    int v46 = *(&v70 + v48);
    goto LABEL_121;
  }
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v60 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      char v87 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v88 = 1024;
      int v89 = 941;
      __int16 v90 = 2080;
      *(void *)uint64_t v91 = "non_one_col_dim == -1";
      _os_log_impl(&dword_1920CB000, v60, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
  uint64_t v22 = 0;
LABEL_144:
  operator delete(v40);
LABEL_145:
  if (v36) {
    operator delete(v36);
  }
LABEL_147:
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
LABEL_149:
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  return v22;
}

void sub_192B8F780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (v23)
  {
    operator delete(v23);
    if (!v22) {
      goto LABEL_6;
    }
  }
  else if (!v22)
  {
LABEL_6:
    if (a20) {
      nitro::nitro_function::nitro_function(a20);
    }
    if (a22) {
      nitro::nitro_function::nitro_function(a22);
    }
    _Unwind_Resume(exception_object);
  }
  operator delete(v22);
  goto LABEL_6;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BCF8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BCF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_reshape_to_flatten(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B8F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B6C8;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B8FA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes19fuse_gru_activationERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (Espresso::zephyr::node_t *)*a2;
  char v4 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_split_kernel>(*a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v44 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v125 = 136315650;
        int v126 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v127 = 1024;
        v128[0] = 989;
        LOWORD(v128[1]) = 2080;
        *(void *)((char *)&v128[1] + 2) = "input_i_split_k != nullptr";
        _os_log_impl(&dword_1920CB000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v125, 0x1Cu);
      }
      goto LABEL_38;
    }
    return 0;
  }
  if (*((void *)v3 + 13) - *((void *)v3 + 12) != 24)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v44 = Espresso::espresso_os_log_subsystem(v4, v5);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v125 = 136315650;
        int v126 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v127 = 1024;
        v128[0] = 990;
        LOWORD(v128[1]) = 2080;
        *(void *)((char *)&v128[1] + 2) = "input_i_split->outputs().size() == 3";
        _os_log_impl(&dword_1920CB000, v44, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v125, 0x1Cu);
      }
LABEL_38:

      return 0;
    }
    return 0;
  }
  *(void *)buf = v3;
  std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v125, (unint64_t *)buf, 1);
  char matched = (Espresso *)operator new(0x18uLL);
  uint64_t v8 = matched;
  uint64_t v9 = 0;
  *(void *)char matched = 0;
  *((void *)matched + 1) = 0;
  *((void *)matched + 2) = 0;
  do
  {
    uint64_t v10 = *(void *)(*((void *)v3 + 12) + v9);
    char v11 = *(uint64_t **)(v10 + 56);
    if (*(void *)(v10 + 64) - (void)v11 != 16)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_64;
      }
      int v46 = Espresso::espresso_os_log_subsystem(matched, v7);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        uint64_t v122 = 0x820000003E40400;
        long long v123 = "input_i_split->outputs()[i]->has_one_use()";
        _os_log_impl(&dword_1920CB000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_63:

      goto LABEL_64;
    }
    char matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(*v11, 0);
    if (!matched)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_64;
      }
      int v46 = Espresso::espresso_os_log_subsystem(0, v7);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        uint64_t v122 = 0x820000003E80400;
        long long v123 = "match_simple_eltwise_binop(input_i_split_use->user_node, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_1920CB000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_63;
    }
    *(void *)((char *)v8 + v9) = v11;
    v9 += 8;
  }
  while (v9 != 24);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = 1;
  do
  {
    char v15 = v14;
    char v16 = *(void **)(*(void *)(*(void *)(**((void **)v8 + v13) + 120)
                                 + 8 * (*(void *)(*((void *)v8 + v13) + 8) == 0))
                     + 80);
    char v17 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_split_kernel>((uint64_t)v16);
    if (!v17)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_64;
      }
      int v46 = Espresso::espresso_os_log_subsystem(0, v18);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        uint64_t v122 = 0x820000003F50400;
        long long v123 = "zephyr::cast_kernel<generic_split_kernel>(other_split)";
        _os_log_impl(&dword_1920CB000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_63;
    }
    if (v16[13] - v16[12] != 24)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_64;
      }
      int v46 = Espresso::espresso_os_log_subsystem(v17, v18);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        uint64_t v122 = 0x820000003F70400;
        long long v123 = "other_split->outputs().size() == 3";
        _os_log_impl(&dword_1920CB000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_63;
    }
    if (v12)
    {
      _ZF = v16 == v12;
      char v16 = v12;
      if (!_ZF)
      {
        if (Espresso::zephyr::match_verbose)
        {
          int v46 = Espresso::espresso_os_log_subsystem(v17, v18);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            uint64_t v122 = 0x820000003FA0400;
            long long v123 = "other_split == input_r_split";
            _os_log_impl(&dword_1920CB000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_63;
        }
LABEL_64:
        uint64_t v45 = 0;
        goto LABEL_65;
      }
    }
    char v14 = 0;
    uint64_t v12 = v16;
    uint64_t v13 = 1;
  }
  while ((v15 & 1) != 0);
  std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, (unint64_t)v16, (uint64_t)v16);
  unsigned int v20 = (uint64_t *)*((void *)v3 + 15);
  if (*((uint64_t **)v3 + 16) == v20) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v21 = (Espresso::zephyr::value_t **)v16[15];
  if ((Espresso::zephyr::value_t **)v16[16] == v21) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v22 = *v20;
  long long v23 = *v21;
  uint64_t v24 = *((void *)*v21 + 10);
  if (!Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(v24))
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_64;
    }
    int v46 = Espresso::espresso_os_log_subsystem(0, v25);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      uint64_t v122 = 0x820000004060400;
      long long v123 = "zephyr::cast_kernel<generic_inner_product_kernel>(input_r_ip_node)";
      _os_log_impl(&dword_1920CB000, v46, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_63;
  }
  uint64_t v26 = *(Espresso::zephyr::value_t ***)(v24 + 120);
  if (*(Espresso::zephyr::value_t ***)(v24 + 128) == v26) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v114 = *v26;
  uint64_t v27 = operator new(0x10uLL);
  int v29 = v27;
  uint64_t v30 = 0;
  *uint64_t v27 = 0;
  v27[1] = 0;
  char v31 = 1;
  do
  {
    char v32 = v31;
    uint64_t v33 = **((void **)v8 + v30);
    if (*(void *)(v33 + 104) - *(void *)(v33 + 96) != 8)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_83;
      }
      unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v27, v28);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      uint64_t v122 = 0x8200000040C0400;
      long long v123 = "elementwise_node->outputs().size() == 1";
      goto LABEL_73;
    }
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, **((void **)v8 + v30), **((void **)v8 + v30));
    int v36 = *(uint64_t **)(**(void **)(v33 + 96) + 56);
    if (*(void *)(**(void **)(v33 + 96) + 64) - (void)v36 != 16)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_83;
      }
      unint64_t v43 = Espresso::espresso_os_log_subsystem(v34, v35);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      uint64_t v122 = 0x820000004100400;
      long long v123 = "add_out->has_one_use()";
LABEL_73:
      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
LABEL_82:

      goto LABEL_83;
    }
    unint64_t v37 = *v36;
    if (!Espresso::zephyr::match_simple_activation(*v36, 3))
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_83;
      }
      unint64_t v43 = Espresso::espresso_os_log_subsystem(0, v38);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        uint64_t v122 = 0x820000004130400;
        long long v123 = "match_simple_activation(add_out_sigmoid, ACTIVATION_SIGMOID)";
        _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_82;
    }
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, v37, v37);
    int v39 = *(void **)(v37 + 96);
    if (*(void **)(v37 + 104) == v39) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    char v31 = 0;
    v29[v30] = *v39;
    uint64_t v30 = 1;
  }
  while ((v32 & 1) != 0);
  __int16 v40 = *(unint64_t **)(*(void *)(v16[12] + 16) + 56);
  if (*(void *)(*(void *)(v16[12] + 16) + 64) - (void)v40 != 16
    || (uint64_t v41 = *(void **)(*v29 + 56), *(void *)(*v29 + 64) - (void)v41 != 16))
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_83;
    }
    unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v27, v28);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      uint64_t v122 = 0x8200000041C0400;
      long long v123 = "input_r_e->has_one_use() && r_gate->has_one_use()";
      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_82;
  }
  unint64_t v42 = *v40;
  if (*v40 != *v41)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_83;
    }
    unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v27, v28);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      uint64_t v122 = 0x8200000041D0400;
      long long v123 = "input_r_e->uses()[0].user_node == r_gate->uses()[0].user_node";
      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_82;
  }
  uint64_t v48 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v42, 1u);
  if (v48)
  {
    if (*(void *)(v42 + 104) - *(void *)(v42 + 96) == 8)
    {
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, v42, v42);
      uint64_t v52 = *(unint64_t **)(**(void **)(v42 + 96) + 56);
      if (*(void *)(**(void **)(v42 + 96) + 64) - (void)v52 == 16
        && (uint64_t v53 = *(void **)(*(void *)(*((void *)v3 + 12) + 16) + 56),
            *(void *)(*(void *)(*((void *)v3 + 12) + 16) + 64) - (void)v53 == 16))
      {
        unint64_t v54 = *v52;
        if (*v52 == *v53)
        {
          long long v55 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v54, 0);
          if (v55)
          {
            if (*(void *)(v54 + 104) - *(void *)(v54 + 96) == 8)
            {
              std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, v54, v54);
              int v59 = *(uint64_t **)(**(void **)(v54 + 96) + 56);
              if (*(void *)(**(void **)(v54 + 96) + 64) - (void)v59 == 16)
              {
                unint64_t v60 = *v59;
                __int16 v61 = (Espresso *)Espresso::zephyr::match_simple_activation(*v59, 1);
                if (v61)
                {
                  if (*(void *)(v60 + 104) - *(void *)(v60 + 96) == 8)
                  {
                    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, v60, v60);
                    int v65 = *(Espresso::zephyr::value_t ***)(v60 + 96);
                    if (*(Espresso::zephyr::value_t ***)(v60 + 104) == v65) {
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    }
                    uint64_t v66 = v29[1];
                    uint64_t v67 = *(uint64_t **)(v66 + 56);
                    uint64_t v68 = *(uint64_t **)(v66 + 64);
                    if ((char *)v68 - (char *)v67 == 32)
                    {
                      if (v67 != v68)
                      {
                        unint64_t v69 = 0;
                        unint64_t v70 = 0;
                        uint64_t v112 = *v65;
                        do
                        {
                          int v71 = Espresso::zephyr::match_simple_eltwise_unaryop(*v67, 3);
                          if (v71)
                          {
                            int v72 = (float *)(*(uint64_t (**)(void *))(*(void *)v71 + 320))(v71);
                            if (v72[2] != -1.0)
                            {
                              if (!Espresso::zephyr::match_verbose) {
                                goto LABEL_83;
                              }
                              unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v72, v73);
                              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)buf = 136315650;
                                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Ze"
                                                     "phyr/passes/passes_strength_reduction.mm";
                                uint64_t v122 = 0x8200000044A0400;
                                long long v123 = "u_gate_use_kernel->get_params().alpha == -1";
                                _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                              }
                              goto LABEL_82;
                            }
                            std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, *v67, *v67);
                            uint64_t v74 = *(void *)(*v67 + 96);
                            if (*(void *)(*v67 + 104) == v74) {
                              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                            }
                            unint64_t v70 = **(void **)(*(void *)v74 + 56);
                            int v63 = (float *)Espresso::zephyr::match_simple_eltwise_unaryop(v70, 2);
                            if (!v63
                              || (int v63 = (float *)(*(uint64_t (**)(float *))(*(void *)v63 + 320))(v63),
                                  v63[2] != 1.0))
                            {
                              if (!Espresso::zephyr::match_verbose) {
                                goto LABEL_83;
                              }
                              unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)buf = 136315650;
                                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Ze"
                                                     "phyr/passes/passes_strength_reduction.mm";
                                uint64_t v122 = 0x820000004530400;
                                long long v123 = "neg_u_gate_plus_one_k && neg_u_gate_plus_one_k->get_params().alpha == 1";
                                _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                              }
                              goto LABEL_82;
                            }
                          }
                          else
                          {
                            int v63 = (float *)Espresso::zephyr::match_simple_eltwise_binop(*v67, 1u);
                            if (v63)
                            {
                              unint64_t v69 = *v67;
                              if (*(Espresso::zephyr::value_t **)(*(void *)(*v67 + 120) + 8 * (v67[1] == 0)) != v114)
                              {
                                if (!Espresso::zephyr::match_verbose) {
                                  goto LABEL_83;
                                }
                                unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/"
                                                       "Zephyr/passes/passes_strength_reduction.mm";
                                  uint64_t v122 = 0x8200000045C0400;
                                  long long v123 = "input_h_mul_u_gate_node->inputs()[u_gate_use.index == 0 ? 1 : 0] == input_h";
                                  _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                }
                                goto LABEL_82;
                              }
                            }
                          }
                          v67 += 2;
                        }
                        while (v67 != v68);
                        if (!v69 || !v70) {
                          goto LABEL_158;
                        }
                        std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, v69, v69);
                        std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, v70, v70);
                        int v77 = *(uint64_t **)(v70 + 96);
                        if (*(uint64_t **)(v70 + 104) == v77) {
                          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                        }
                        uint64_t v78 = *v77;
                        int v79 = *(uint64_t **)(*v77 + 56);
                        if (*(void *)(v78 + 64) - (void)v79 == 16)
                        {
                          int v80 = (void *)*v79;
                          if (Espresso::zephyr::match_simple_eltwise_binop(*v79, 1u))
                          {
                            std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, (unint64_t)v80, (uint64_t)v80);
                            if (*(Espresso::zephyr::value_t **)(v80[15]
                                                               + 8 * (*(void *)(*(void *)(v78 + 56) + 8) == 0)) == v112)
                            {
                              int v84 = *(void **)(v69 + 96);
                              if (*(void **)(v69 + 104) == v84) {
                                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                              }
                              uint64_t v85 = (void *)v80[12];
                              if ((void *)v80[13] == v85) {
                                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                              }
                              uint64_t v87 = *v84 + 56;
                              int v86 = *(unint64_t **)v87;
                              if (*(void *)(v87 + 8) - *(void *)v87 == 16
                                && (uint64_t v89 = *v85 + 56,
                                    __int16 v88 = *(void **)v89,
                                    *(void *)(v89 + 8) - *(void *)v89 == 16))
                              {
                                unint64_t v90 = *v86;
                                if (*v86 == *v88)
                                {
                                  uint64_t v91 = (Espresso *)Espresso::zephyr::match_simple_eltwise_binop(v90, 0);
                                  if (v91)
                                  {
                                    int v93 = *(Espresso::zephyr::value_t ***)(v90 + 96);
                                    __int16 v94 = *(Espresso::zephyr::value_t ***)(v90 + 104);
                                    if ((char *)v94 - (char *)v93 == 8)
                                    {
                                      if (v94 == v93) {
                                        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                                      }
                                      uint64_t v113 = *v93;
                                      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v125, v90, v90);
                                      __asm { FMOV            V0.2S, #1.0 }
                                      *(void *)&uint8_t buf[4] = _D0;
                                      uint64_t v122 = 0;
                                      uint64_t v124 = 0;
                                      long long v123 = 0;
                                      *(_DWORD *)buf = 15;
                                      Espresso::zephyr::make_kernel<Espresso::generic_activation_kernel,Espresso::zephyr::node_t,Espresso::activation_params>(&v115, *(void *)(*((void *)v3 + 1) + 8), (uint64_t)buf);
                                      uint64_t v99 = *((void *)v3 + 3);
                                      if (*(char *)(v22 + 55) >= 0) {
                                        size_t v100 = *(unsigned __int8 *)(v22 + 55);
                                      }
                                      else {
                                        size_t v100 = *(void *)(v22 + 40);
                                      }
                                      std::string::basic_string[abi:ne180100]((uint64_t)__p, v100 + 15);
                                      if (v120 >= 0) {
                                        int v101 = __p;
                                      }
                                      else {
                                        int v101 = *(unsigned char **)__p;
                                      }
                                      if (v100)
                                      {
                                        if (*(char *)(v22 + 55) >= 0) {
                                          uint64_t v102 = (const void *)(v22 + 32);
                                        }
                                        else {
                                          uint64_t v102 = *(const void **)(v22 + 32);
                                        }
                                        memmove(v101, v102, v100);
                                      }
                                      strcpy(&v101[v100], "_gru_activation");
                                      uint64_t v103 = Espresso::zephyr::function_t::new_detached_node(v99, (uint64_t)__p);
                                      if (v120 < 0) {
                                        operator delete(*(void **)__p);
                                      }
                                      uint64_t v104 = *((void *)v103 + 1);
                                      uint64_t v105 = v115;
                                      uint64_t v106 = v116;
                                      if (v116) {
                                        atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
                                      }
                                      uint64_t v107 = *(std::__shared_weak_count **)(v104 + 16);
                                      *(void *)(v104 + 8) = v105;
                                      *(void *)(v104 + 16) = v106;
                                      if (v107) {
                                        nitro::nitro_function::nitro_function(v107);
                                      }
                                      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v103, v114);
                                      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v103, v23);
                                      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v103, (Espresso::zephyr::value_t *)v22);
                                      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v103, v113);
                                      inserted = (Espresso *)Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v103, v3);
                                      uint64_t v110 = *(uint64_t ***)((char *)v128 + 2);
                                      if (*(void *)((char *)v128 + 2))
                                      {
                                        do
                                        {
                                          inserted = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v110[2]);
                                          uint64_t v110 = (uint64_t **)*v110;
                                        }
                                        while (v110);
                                      }
                                      if (Espresso::zephyr::match_verbose)
                                      {
                                        int v111 = Espresso::espresso_os_log_subsystem(inserted, v109);
                                        if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
                                        {
                                          *(_DWORD *)std::vector<int> __p = 136315394;
                                          *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espre"
                                                               "ssoCore/Zephyr/passes/passes_strength_reduction.mm";
                                          __int16 v118 = 1024;
                                          int v119 = 1177;
                                          _os_log_impl(&dword_1920CB000, v111, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", __p, 0x12u);
                                        }
                                      }
                                      if (v106) {
                                        nitro::nitro_function::nitro_function(v106);
                                      }
                                      uint64_t v45 = 1;
                                      goto LABEL_84;
                                    }
                                    if (!Espresso::zephyr::match_verbose) {
                                      goto LABEL_83;
                                    }
                                    unint64_t v43 = Espresso::espresso_os_log_subsystem(v91, v92);
                                    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                    {
                                      *(_DWORD *)buf = 136315650;
                                      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoC"
                                                           "ore/Zephyr/passes/passes_strength_reduction.mm";
                                      uint64_t v122 = 0x8200000047E0400;
                                      long long v123 = "output_new_hidden_node->outputs().size() == 1";
                                      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                    }
                                  }
                                  else
                                  {
                                    if (!Espresso::zephyr::match_verbose) {
                                      goto LABEL_83;
                                    }
                                    unint64_t v43 = Espresso::espresso_os_log_subsystem(0, v92);
                                    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                    {
                                      *(_DWORD *)buf = 136315650;
                                      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoC"
                                                           "ore/Zephyr/passes/passes_strength_reduction.mm";
                                      uint64_t v122 = 0x8200000047D0400;
                                      long long v123 = "match_simple_eltwise_binop(output_new_hidden_node, ELEMENTWISE_OPERATION_ADD)";
                                      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                    }
                                  }
                                }
                                else
                                {
                                  if (!Espresso::zephyr::match_verbose) {
                                    goto LABEL_83;
                                  }
                                  unint64_t v43 = Espresso::espresso_os_log_subsystem(v82, v83);
                                  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                  {
                                    *(_DWORD *)buf = 136315650;
                                    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCor"
                                                         "e/Zephyr/passes/passes_strength_reduction.mm";
                                    uint64_t v122 = 0x820000004790400;
                                    long long v123 = "input_h_mul_u_gate->uses()[0].user_node == neg_u_gate_plus_one_plus_new_gate-"
                                           ">uses()[0].user_node";
                                    _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                  }
                                }
                              }
                              else
                              {
                                if (!Espresso::zephyr::match_verbose) {
                                  goto LABEL_83;
                                }
                                unint64_t v43 = Espresso::espresso_os_log_subsystem(v82, v83);
                                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/"
                                                       "Zephyr/passes/passes_strength_reduction.mm";
                                  uint64_t v122 = 0x820000004760400;
                                  long long v123 = "input_h_mul_u_gate->has_one_use() && neg_u_gate_plus_one_plus_new_gate->has_one_use()";
                                  _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                                }
                              }
                            }
                            else
                            {
                              if (!Espresso::zephyr::match_verbose) {
                                goto LABEL_83;
                              }
                              unint64_t v43 = Espresso::espresso_os_log_subsystem(v82, v83);
                              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)buf = 136315650;
                                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Ze"
                                                     "phyr/passes/passes_strength_reduction.mm";
                                uint64_t v122 = 0x820000004700400;
                                long long v123 = "neg_u_gate_plus_one_plus_new_gate_node ->inputs()[neg_u_gate_plus_one->uses()[0]."
                                       "index == 0 ? 1 : 0] == new_gate";
                                _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                              }
                            }
                          }
                          else
                          {
                            if (!Espresso::zephyr::match_verbose) {
                              goto LABEL_83;
                            }
                            unint64_t v43 = Espresso::espresso_os_log_subsystem(0, v81);
                            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)buf = 136315650;
                              *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zeph"
                                                   "yr/passes/passes_strength_reduction.mm";
                              uint64_t v122 = 0x8200000046B0400;
                              long long v123 = "match_simple_eltwise_binop(neg_u_gate_plus_one_plus_new_gate_node, ELEMENTWISE_OPERATION_MUL)";
                              _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                            }
                          }
                        }
                        else
                        {
                          if (!Espresso::zephyr::match_verbose) {
                            goto LABEL_83;
                          }
                          unint64_t v43 = Espresso::espresso_os_log_subsystem(v75, v76);
                          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)buf = 136315650;
                            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr"
                                                 "/passes/passes_strength_reduction.mm";
                            uint64_t v122 = 0x820000004660400;
                            long long v123 = "neg_u_gate_plus_one->has_one_use()";
                            _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                          }
                        }
                        goto LABEL_82;
                      }
LABEL_158:
                      if (Espresso::zephyr::match_verbose)
                      {
                        unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 136315650;
                          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/p"
                                               "asses/passes_strength_reduction.mm";
                          uint64_t v122 = 0x820000004600400;
                          long long v123 = "input_h_mul_u_gate_node && neg_u_gate_plus_one_node";
                          _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                        }
                        goto LABEL_82;
                      }
                    }
                    else if (Espresso::zephyr::match_verbose)
                    {
                      unint64_t v43 = Espresso::espresso_os_log_subsystem((Espresso *)v63, v64);
                      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/pas"
                                             "ses/passes_strength_reduction.mm";
                        uint64_t v122 = 0x820000004450400;
                        long long v123 = "u_gate_uses.size() == 2";
                        _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                      }
                      goto LABEL_82;
                    }
                  }
                  else if (Espresso::zephyr::match_verbose)
                  {
                    unint64_t v43 = Espresso::espresso_os_log_subsystem(v61, v62);
                    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passe"
                                           "s/passes_strength_reduction.mm";
                      uint64_t v122 = 0x8200000043A0400;
                      long long v123 = "new_gate_node->outputs().size() == 1";
                      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                    }
                    goto LABEL_82;
                  }
                }
                else if (Espresso::zephyr::match_verbose)
                {
                  unint64_t v43 = Espresso::espresso_os_log_subsystem(0, v62);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/"
                                         "passes_strength_reduction.mm";
                    uint64_t v122 = 0x820000004390400;
                    long long v123 = "match_simple_activation(new_gate_node, ACTIVATION_TANH)";
                    _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_82;
                }
              }
              else if (Espresso::zephyr::match_verbose)
              {
                unint64_t v43 = Espresso::espresso_os_log_subsystem(v57, v58);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_strength_reduction.mm";
                  uint64_t v122 = 0x820000004360400;
                  long long v123 = "input_r_e_mul_r_gate_plus_i_e->has_one_use()";
                  _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                }
                goto LABEL_82;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              unint64_t v43 = Espresso::espresso_os_log_subsystem(v55, v56);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                uint64_t v122 = 0x820000004300400;
                long long v123 = "input_r_e_mul_r_gate_plus_i_e_node->outputs().size() == 1";
                _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_82;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            unint64_t v43 = Espresso::espresso_os_log_subsystem(0, v56);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
              uint64_t v122 = 0x8200000042F0400;
              long long v123 = "match_simple_eltwise_binop(input_r_e_mul_r_gate_plus_i_e_node, ELEMENTWISE_OPERATION_ADD)";
              _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_82;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          unint64_t v43 = Espresso::espresso_os_log_subsystem(v50, v51);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            uint64_t v122 = 0x8200000042A0400;
            long long v123 = "input_r_e_mul_r_gate->uses()[0].user_node == input_e->uses()[0].user_node";
            _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_82;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        unint64_t v43 = Espresso::espresso_os_log_subsystem(v50, v51);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          uint64_t v122 = 0x820000004280400;
          long long v123 = "input_r_e_mul_r_gate->has_one_use() && input_e->has_one_use()";
          _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_82;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      unint64_t v43 = Espresso::espresso_os_log_subsystem(v48, v49);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        uint64_t v122 = 0x820000004220400;
        long long v123 = "input_r_e_mul_r_gate_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_82;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    unint64_t v43 = Espresso::espresso_os_log_subsystem(0, v49);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      uint64_t v122 = 0x820000004210400;
      long long v123 = "match_simple_eltwise_binop(input_r_e_mul_r_gate_node, ELEMENTWISE_OPERATION_MUL)";
      _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_82;
  }
LABEL_83:
  uint64_t v45 = 0;
LABEL_84:
  operator delete(v29);
LABEL_65:
  operator delete(v8);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v125);
  return v45;
}

void sub_192B91548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  operator delete(v27);
  operator delete(v26);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_split_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    char v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B6C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37B6C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_gru_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B917B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37B988;
      v13[1] = v3 + 16;
      char v14 = v13;
      uint64_t v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B918E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes29fuse_broadcastable_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(*a2);
  if (!v3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(0, v4);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1202;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "elementwise_k != nullptr";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (*(void *)(v2 + 128) - *(void *)(v2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(v3, v4);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1203;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "elementwise_node->inputs().size() == 2";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (*(void *)(v2 + 104) - *(void *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(v3, v4);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1204;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "elementwise_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  uint64_t v5 = v3;
  uint64_t v6 = (*(uint64_t (**)(Espresso *))(*(void *)v3 + 320))(v3);
  int v8 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 != 1 && v8 != 33 && v8 != 102)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem((Espresso *)v6, v7);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1208;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "elementwise_p.operation == ELEMENTWISE_OPERATION_SUBTRACT || elementwise_p.operation == ELEMEN"
                          "TWISE_OPERATION_DIV || elementwise_p.operation == ELEMENTWISE_OPERATION_MUL";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (*(_DWORD *)(v6 + 4)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *(float *)(v6 + 8) == 1.0;
  }
  if (!v9 || *(float *)(v6 + 12) != 0.0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem((Espresso *)v6, v7);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1209;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "is_simple(elementwise_p)";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  int v10 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v5 + 320))(v5);
  if (*((_DWORD *)v10 + 5))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(v10, v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1211;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "elementwise_k->get_params().no_broadcast == false";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_101:

      return 0;
    }
    return 0;
  }
  uint64_t v13 = *(uint64_t **)(**(void **)(v2 + 96) + 56);
  if (*(void *)(**(void **)(v2 + 96) + 64) - (void)v13 != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(v10, v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1213;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "elementwise_node->outputs()[0]->has_one_use()";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  char v14 = (void *)*v13;
  uint64_t v15 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*v13);
  if (!v15)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(0, v16);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1218;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "zephyr::cast_kernel<generic_transpose_kernel>(top_transpose_node) != nullptr";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  if (v14[16] - v14[15] != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1219;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "top_transpose_node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  char v17 = (Espresso::zephyr::value_t **)v14[12];
  if (v14[13] - (void)v17 != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v12 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        __int16 v100 = 1024;
        int v101 = 1220;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = "top_transpose_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_101;
    }
    return 0;
  }
  uint64_t v85 = *v17;
  *(void *)buf = v14;
  unint64_t v18 = std::unordered_set<Espresso::zephyr::node_t *>::unordered_set((uint64_t)v95, (unint64_t *)buf, 1);
  uint64_t v20 = *(void *)(v2 + 120);
  uint64_t v86 = *(void *)(v2 + 128);
  if (v20 != v86)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    uint64_t v87 = 0;
    std::vector<int> __p = 0;
    uint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = *(void *)(*(void *)v20 + 80);
      if ((unint64_t)v22 >= v23)
      {
        uint64_t v26 = (v22 - v21) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v23 - (void)v21) >> 2 > v27) {
          unint64_t v27 = (uint64_t)(v23 - (void)v21) >> 2;
        }
        if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v28);
          uint64_t v30 = v21;
        }
        else
        {
          uint64_t v30 = v21;
          uint64_t v29 = 0;
        }
        uint64_t v21 = (char *)(v28 + 8 * v26);
        *(void *)uint64_t v21 = v25;
        char v31 = v21 + 8;
        while (v22 != v30)
        {
          uint64_t v32 = *((void *)v22 - 1);
          v22 -= 8;
          *((void *)v21 - 1) = v32;
          v21 -= 8;
        }
        unint64_t v23 = v28 + 8 * v29;
        if (v30) {
          operator delete(v30);
        }
        uint64_t v22 = v31;
      }
      else
      {
        *(void *)uint64_t v22 = v25;
        v22 += 8;
      }
      uint64_t v33 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*((void *)v22 - 1));
      if (!v33)
      {
        if (!Espresso::zephyr::match_verbose) {
          goto LABEL_155;
        }
        uint64_t v66 = Espresso::espresso_os_log_subsystem(0, v34);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          __int16 v100 = 1024;
          int v101 = 1231;
          __int16 v102 = 2080;
          *(void *)uint64_t v103 = "zephyr::cast_kernel<generic_transpose_kernel>( bottom_tranpose_nodes.back()) != nullptr";
          _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_154;
      }
      unint64_t v35 = *((void *)v22 - 1);
      if (*(void *)(v35 + 128) - *(void *)(v35 + 120) != 8)
      {
        if (!Espresso::zephyr::match_verbose) {
          goto LABEL_155;
        }
        uint64_t v66 = Espresso::espresso_os_log_subsystem(v33, (const char *)v35);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          __int16 v100 = 1024;
          int v101 = 1232;
          __int16 v102 = 2080;
          *(void *)uint64_t v103 = "bottom_tranpose_nodes.back()->inputs().size() == 1";
          _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_154;
      }
      uint64_t v36 = *(void *)(v35 + 96);
      if (*(void *)(v35 + 104) - v36 != 8)
      {
        if (!Espresso::zephyr::match_verbose) {
          goto LABEL_155;
        }
        uint64_t v66 = Espresso::espresso_os_log_subsystem(v33, (const char *)v35);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          __int16 v100 = 1024;
          int v101 = 1233;
          __int16 v102 = 2080;
          *(void *)uint64_t v103 = "bottom_tranpose_nodes.back()->outputs().size() == 1";
          _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_154;
      }
      if (*(void *)(*(void *)v36 + 64) - *(void *)(*(void *)v36 + 56) != 16) {
        break;
      }
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v95, v35, *((void *)v22 - 1));
      unint64_t v37 = *(void **)(*((void *)v22 - 1) + 120);
      if (v24 >= v87)
      {
        uint64_t v39 = (v24 - __p) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((v87 - __p) >> 2 > v40) {
          unint64_t v40 = (v87 - __p) >> 2;
        }
        if ((unint64_t)(v87 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v40;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
        }
        else {
          int v19 = 0;
        }
        uint64_t v41 = (char *)(v18 + 8 * v39);
        *(void *)uint64_t v41 = *v37;
        __int16 v38 = v41 + 8;
        if (v24 == __p)
        {
          unint64_t v42 = __p;
        }
        else
        {
          unint64_t v42 = __p;
          do
          {
            uint64_t v43 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v41 - 1) = v43;
            v41 -= 8;
          }
          while (v24 != __p);
        }
        uint64_t v87 = (char *)(v18 + 8 * (void)v19);
        if (v42) {
          operator delete(v42);
        }
        std::vector<int> __p = v41;
      }
      else
      {
        *(void *)uint64_t v24 = *v37;
        __int16 v38 = v24 + 8;
      }
      v20 += 8;
      uint64_t v24 = v38;
      if (v20 == v86) {
        goto LABEL_105;
      }
    }
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_155;
    }
    uint64_t v66 = Espresso::espresso_os_log_subsystem(v33, (const char *)v35);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v100 = 1024;
      int v101 = 1234;
      __int16 v102 = 2080;
      *(void *)uint64_t v103 = "bottom_tranpose_nodes.back()->outputs()[0]->has_one_use()";
      _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_154;
  }
  uint64_t v21 = 0;
  std::vector<int> __p = 0;
  __int16 v38 = 0;
  uint64_t v22 = 0;
LABEL_105:
  if (v22 - v21 == 16)
  {
    __int16 v88 = v21;
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v93, v85);
    uint64_t v48 = v93;
    if (!v93)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v67 = Espresso::espresso_os_log_subsystem(v46, v47);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          __int16 v100 = 1024;
          int v101 = 1243;
          __int16 v102 = 2080;
          *(void *)uint64_t v103 = "top_shape_ptr";
          _os_log_impl(&dword_1920CB000, v67, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
      }
      uint64_t v44 = 0;
      goto LABEL_180;
    }
    unint64_t v90 = 0;
    unint64_t v91 = 0;
    unint64_t v92 = 0;
    uint64_t v49 = (Espresso::zephyr::value_t **)v38;
    if (__p != v38)
    {
      uint64_t v50 = (Espresso::zephyr::value_t **)__p;
      do
      {
        Espresso::zephyr::need_shape((Espresso::zephyr *)v97, *v50);
        uint64_t v52 = *(long long **)v97;
        if (*(void *)v97)
        {
          unint64_t v53 = v91;
          if (v91 >= v92)
          {
            uint64_t v54 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v90, *(long long **)v97);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v90, *(long long **)v97);
            uint64_t v54 = v53 + 64;
          }
          uint64_t v21 = v88;
          unint64_t v91 = v54;
        }
        else if (Espresso::zephyr::match_verbose)
        {
          long long v55 = Espresso::espresso_os_log_subsystem(v51, v47);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            __int16 v100 = 1024;
            int v101 = 1248;
            __int16 v102 = 2080;
            *(void *)uint64_t v103 = "bottom_shape_ptr";
            _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
        }
        int v46 = (Espresso *)v98;
        if (v98) {
          nitro::nitro_function::nitro_function(v98);
        }
        if (!v52) {
          goto LABEL_170;
        }
        ++v50;
      }
      while (v50 != v49);
    }
    long long v56 = Espresso::espresso_os_log_subsystem(v46, v47);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v69 = (void *)(v2 + 144);
      if (*(char *)(v2 + 167) < 0) {
        unint64_t v69 = (void *)*v69;
      }
      int v70 = *v90;
      int v71 = v90[1];
      int v72 = v90[2];
      int v73 = v90[3];
      int v74 = v90[4];
      int v75 = v90[16];
      int v76 = v90[17];
      int v78 = v90[18];
      int v77 = v90[19];
      int v79 = v90[20];
      int v80 = *v48;
      int v81 = v48[1];
      int v82 = v48[2];
      int v83 = v48[3];
      int v84 = v48[4];
      *(_DWORD *)buf = 136318978;
      *(void *)&uint8_t buf[4] = v69;
      __int16 v100 = 1024;
      int v101 = v70;
      __int16 v102 = 1024;
      *(_DWORD *)uint64_t v103 = v71;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v72;
      __int16 v104 = 1024;
      int v105 = v73;
      __int16 v106 = 1024;
      int v107 = v74;
      __int16 v108 = 1024;
      int v109 = v75;
      __int16 v110 = 1024;
      int v111 = v76;
      __int16 v112 = 1024;
      int v113 = v78;
      __int16 v114 = 1024;
      int v115 = v77;
      __int16 v116 = 1024;
      int v117 = v79;
      __int16 v118 = 1024;
      int v119 = v80;
      __int16 v120 = 1024;
      int v121 = v81;
      __int16 v122 = 1024;
      int v123 = v82;
      __int16 v124 = 1024;
      int v125 = v83;
      __int16 v126 = 1024;
      int v127 = v84;
      _os_log_debug_impl(&dword_1920CB000, v56, OS_LOG_TYPE_DEBUG, "zephyr_passes::fuse_broadcastable_transposes: %s trying to broadcast [%d, %d, %d, %d, %d] [%d, %d, %d, %d, %d] -> [%d, %d, %d, %d, %d]", buf, 0x66u);
    }

    (*(void (**)(unsigned char *__return_ptr, Espresso *, int **))(*(void *)v5 + 64))(buf, v5, &v90);
    BOOL v57 = Espresso::layer_shape::operator==(*(uint64_t *)buf, (uint64_t)v93);
    *(void *)uint64_t v97 = buf;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
    if (v57)
    {
      if (__p != (char *)v49)
      {
        unint64_t v60 = 0;
        if ((unint64_t)(((char *)v49 - __p) >> 3) <= 1) {
          uint64_t v61 = 1;
        }
        else {
          uint64_t v61 = ((char *)v49 - __p) >> 3;
        }
        do
        {
          Espresso::zephyr::node_t::replace_input_at((Espresso::zephyr::node_t *)v2, v60, *(Espresso::zephyr::value_t **)&__p[8 * v60]);
          ++v60;
        }
        while (v61 != v60);
      }
      int v62 = (Espresso *)Espresso::zephyr::node_t::replace_output_at(v2, 0, v85);
      for (int i = v96; i; int i = (uint64_t **)*i)
        int v62 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)i[2]);
      if (Espresso::zephyr::match_verbose)
      {
        int v65 = Espresso::espresso_os_log_subsystem(v62, v63);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          __int16 v100 = 1024;
          int v101 = 1292;
          _os_log_impl(&dword_1920CB000, v65, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
        }

        uint64_t v21 = v88;
        uint64_t v44 = 1;
        goto LABEL_179;
      }
      uint64_t v44 = 1;
    }
    else
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v68 = Espresso::espresso_os_log_subsystem(v58, v59);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          __int16 v100 = 1024;
          int v101 = 1276;
          __int16 v102 = 2080;
          *(void *)uint64_t v103 = "elementwise_k->top_shapes_for_bottom_shapes( bottom_shapes)[0] == *top_shape_ptr";
          _os_log_impl(&dword_1920CB000, v68, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

        uint64_t v21 = v88;
LABEL_170:
        uint64_t v44 = 0;
LABEL_179:
        *(void *)buf = &v90;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_180:
        if (v94) {
          nitro::nitro_function::nitro_function(v94);
        }
        goto LABEL_156;
      }
      uint64_t v44 = 0;
    }
    uint64_t v21 = v88;
    goto LABEL_179;
  }
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v66 = Espresso::espresso_os_log_subsystem((Espresso *)v18, v19);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v100 = 1024;
      int v101 = 1240;
      __int16 v102 = 2080;
      *(void *)uint64_t v103 = "bottom_tranpose_nodes.size() == 2";
      _os_log_impl(&dword_1920CB000, v66, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_154:
  }
LABEL_155:
  uint64_t v44 = 0;
LABEL_156:
  if (__p) {
    operator delete(__p);
  }
  if (v21) {
    operator delete(v21);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v95);
  return v44;
}

void sub_192B92B20(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_192B92B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  JUMPOUT(0x192B92B58);
}

void sub_192B92B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29)
{
  a29 = &a15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

Espresso::espresso_error_base *Espresso::espresso_error_base::espresso_error_base(Espresso::espresso_error_base *this, const Espresso::espresso_error_base *a2)
{
  char v4 = std::runtime_error::runtime_error((std::runtime_error *)this, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_1EE34F388;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else
  {
    std::runtime_error v5 = (std::runtime_error)*((_OWORD *)a2 + 1);
    v4[2].__vftable = (std::runtime_error_vtbl *)*((void *)a2 + 4);
    v4[1] = v5;
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v6;
  }
  uint64_t v7 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_192B92C9C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B988;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37B988;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_broadcastable_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B92DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BE58;
      v13[1] = v3 + 16;
      char v14 = v13;
      long long v8 = *(void **)(v5 + 120);
      long long v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B92F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes41strength_reduction_general_slice_to_sliceERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso *a1, const char *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(a1, a2);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v60[0] = 136315650;
        *(void *)&v60[1] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        LOWORD(v60[3]) = 1024;
        *(_DWORD *)((char *)&v60[3] + 2) = 1306;
        HIWORD(v60[4]) = 2080;
        *(void *)&v60[5] = "general_slice_node->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)v60, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (*((void *)v2 + 13) - *((void *)v2 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(a1, a2);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v60[0] = 136315650;
        *(void *)&v60[1] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        LOWORD(v60[3]) = 1024;
        *(_DWORD *)((char *)&v60[3] + 2) = 1307;
        HIWORD(v60[4]) = 2080;
        *(void *)&v60[5] = "general_slice_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)v60, 0x1Cu);
      }
      goto LABEL_35;
    }
    return 0;
  }
  uint64_t v3 = *((void *)v2 + 1);
  if (!v3 {
    || (char v4 = a1, (a1 = *(Espresso **)(v3 + 8)) == 0)
  }
  {
    if (Espresso::zephyr::match_verbose)
    {
      int v19 = Espresso::espresso_os_log_subsystem(a1, a2);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v60[0] = 136315650;
        *(void *)&v60[1] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        LOWORD(v60[3]) = 1024;
        *(_DWORD *)((char *)&v60[3] + 2) = 1311;
        HIWORD(v60[4]) = 2080;
        *(void *)&v60[5] = "general_slice_kernel";
        _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)v60, 0x1Cu);
      }
LABEL_35:

      return 0;
    }
    return 0;
  }
  uint64_t v5 = a1;
  long long v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (*(uint64_t (**)(Espresso *))(*(void *)v5 + 320))(v5);
  long long v62 = *(_OWORD *)(v7 + 48);
  v63[0] = *(_OWORD *)(v7 + 64);
  v63[1] = *(_OWORD *)(v7 + 80);
  int v64 = *(_DWORD *)(v7 + 96);
  *(_OWORD *)unint64_t v60 = *(_OWORD *)v7;
  *(_OWORD *)&v60[4] = *(_OWORD *)(v7 + 16);
  long long v61 = *(_OWORD *)(v7 + 32);
  long long v8 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
  if (*((Espresso::zephyr::value_t ***)v2 + 16) == v8) {
LABEL_114:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::need_shape((Espresso::zephyr *)v55, *v8);
  uint64_t v11 = *(void *)v55;
  int v10 = *(Espresso **)&v55[8];
  if (*(void *)&v55[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v55[8]);
  }
  if (!v11)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v21 = Espresso::espresso_os_log_subsystem(v10, v9);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long v55 = 136315650;
        *(void *)&v55[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&v55[12] = 1024;
        *(_DWORD *)&v55[14] = 1314;
        *(_WORD *)&v55[18] = 2080;
        *(void *)&v55[20] = "need_shape(general_slice_node->input())";
        _os_log_impl(&dword_1920CB000, v21, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v55, 0x1Cu);
      }
    }
    return 0;
  }
  uint64_t v12 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
  if (*((Espresso::zephyr::value_t ***)v2 + 16) == v12) {
    goto LABEL_114;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v12);
  uint64_t v13 = *(void *)(*(void *)buf + 32);
  long long v14 = *(_OWORD *)(*(void *)buf + 16);
  *(_OWORD *)long long v55 = **(_OWORD **)buf;
  *(_OWORD *)&v55[16] = v14;
  uint64_t v56 = v13;
  std::vector<int> __p = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(*(void *)buf + 40), *(void *)(*(void *)buf + 48), (uint64_t)(*(void *)(*(void *)buf + 48) - *(void *)(*(void *)buf + 40)) >> 2);
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v15 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)v55, 0);
  if (*(_DWORD *)&v55[20] == -1 || *(int *)&v55[20] >= 1)
  {
    if (*(_DWORD *)&v55[16] == 1) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 5;
    }
    if (*(_DWORD *)&v55[20] == -1) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = *(unsigned int *)&v55[20];
    }
    uint64_t v24 = (v23 - 1);
    if ((int)v23 <= 1)
    {
LABEL_53:
      unint64_t v27 = (char *)&v62 + 12;
      unint64_t v28 = (_DWORD *)v63 + 3;
      uint64_t v29 = (char *)&v62 + 12;
      do
      {
        if (*v29++)
        {
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_21;
          }
          char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1326;
            *(_WORD *)&unsigned char buf[18] = 2080;
            uint64_t v54 = "p0.begin_masks[i] == 0";
            _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_20;
        }
        if (!v27[5])
        {
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_21;
          }
          char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1327;
            *(_WORD *)&unsigned char buf[18] = 2080;
            uint64_t v54 = "p0.end_masks[i] == 1";
            _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_20;
        }
        if (*v28)
        {
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_21;
          }
          char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1328;
            *(_WORD *)&unsigned char buf[18] = 2080;
            uint64_t v54 = "p0.static_sizes[i] == 0";
            _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_20;
        }
        if (*(v28 - 9) != 1)
        {
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_21;
          }
          char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1329;
            *(_WORD *)&unsigned char buf[18] = 2080;
            uint64_t v54 = "p0.strides[i] == 1";
            _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_20;
        }
        if (v27[10])
        {
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_21;
          }
          char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1330;
            *(_WORD *)&unsigned char buf[18] = 2080;
            uint64_t v54 = "p0.squeeze_masks[i] == 0";
            _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_20;
        }
        ++v28;
        unint64_t v27 = v29;
        --v23;
      }
      while (v23);
      if (!BYTE11(v63[0]))
      {
        LODWORD(v54) = 1;
        uint64_t v31 = 3;
        if (*(_DWORD *)&v55[16] != 1) {
          uint64_t v31 = 4;
        }
        uint64_t v32 = v22 - 1;
        if (*(_DWORD *)&v55[20] == -1) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = *(int *)&v55[20] - 1;
        }
        if (*(_DWORD *)&v55[20] == -1) {
          uint64_t v34 = v31;
        }
        else {
          uint64_t v34 = *(int *)&v55[20] - 1;
        }
        int v35 = v60[v34];
        *(_DWORD *)buf = 0;
        *(_DWORD *)&uint8_t buf[4] = v35;
        *(_DWORD *)&uint8_t buf[8] = v60[v33 + 5];
        *(void *)&unsigned char buf[12] = 1;
        Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(&v46, *(void *)(*((void *)v2 + 1) + 8), (uint64_t)buf);
        uint64_t v36 = Espresso::zephyr::function_t::new_detached_node(*((void *)v2 + 3), (uint64_t)v2 + 144);
        uint64_t v37 = *((void *)v36 + 1);
        uint64_t v38 = v46;
        uint64_t v39 = v47;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v40 = *(std::__shared_weak_count **)(v37 + 16);
        *(void *)(v37 + 8) = v38;
        *(void *)(v37 + 16) = v39;
        if (v40) {
          nitro::nitro_function::nitro_function(v40);
        }
        uint64_t v41 = (Espresso::zephyr::value_t **)*((void *)v2 + 15);
        if (*((Espresso::zephyr::value_t ***)v2 + 16) == v41
          || (Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v36, *v41),
              unint64_t v42 = (Espresso::zephyr::value_t **)*((void *)v2 + 12),
              *((Espresso::zephyr::value_t ***)v2 + 13) == v42))
        {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v36, *v42);
        Espresso::zephyr::ordered_block_t::insert_node_after(**((Espresso::zephyr::ordered_block_t ***)v4 + 1), (Espresso::zephyr::node_t *)v36, v2);
        uint64_t v43 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v45 = Espresso::espresso_os_log_subsystem(v43, v44);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v49 = 136315394;
            uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            __int16 v51 = 1024;
            int v52 = 1353;
            _os_log_impl(&dword_1920CB000, v45, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v49, 0x12u);
          }
        }
        if (v39) {
          nitro::nitro_function::nitro_function(v39);
        }
        uint64_t v18 = 1;
        goto LABEL_22;
      }
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_21;
      }
      char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1332;
        *(_WORD *)&unsigned char buf[18] = 2080;
        uint64_t v54 = "p0.use_static_sizes == false";
        _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    else
    {
      uint64_t v25 = v48;
      uint64_t v26 = v60;
      while (1)
      {
        if (*v26)
        {
          if (!Espresso::zephyr::match_verbose) {
            goto LABEL_21;
          }
          char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1321;
            *(_WORD *)&unsigned char buf[18] = 2080;
            uint64_t v54 = "p0.begins[i] == 0";
            _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_20;
        }
        if (v26[5] != *(_DWORD *)v25) {
          break;
        }
        v25 += 4;
        ++v26;
        if (!--v24) {
          goto LABEL_53;
        }
      }
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_21;
      }
      char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1322;
        *(_WORD *)&unsigned char buf[18] = 2080;
        uint64_t v54 = "p0.ends[i] == b_shape_nd[i]";
        _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_21;
    }
    char v17 = Espresso::espresso_os_log_subsystem(v15, v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1318;
      *(_WORD *)&unsigned char buf[18] = 2080;
      uint64_t v54 = "b_shape.rank() >= 1";
      _os_log_impl(&dword_1920CB000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
LABEL_20:

LABEL_21:
  uint64_t v18 = 0;
LABEL_22:
  if (__p)
  {
    int v58 = __p;
    operator delete(__p);
  }
  return v18;
}

void sub_192B93ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    long long v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192B93C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BE58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BE58;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_general_slice_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B93D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BCA0;
      v13[1] = v3 + 16;
      long long v14 = v13;
      long long v8 = *(void **)(v5 + 120);
      uint64_t v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          char v11 = v7 + 1;
          if (v10) {
            char v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B93EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes36fuse_blizzard_final_1x1_convolutionsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, Espresso::zephyr::node_t **a2)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  char matched = (Espresso *)fuse_blizzard_final_1x1_convolutions_match_conv(*a2);
  if (matched)
  {
    uint64_t v5 = (uint64_t *)*((void *)v2 + 15);
    if (*((uint64_t **)v2 + 16) == v5) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v96 = v2;
    uint64_t v6 = *v5;
    long long v8 = *(Espresso::zephyr::node_t ***)(v6 + 56);
    uint64_t v7 = *(Espresso::zephyr::node_t ***)(v6 + 64);
    if (v8 == v7)
    {
      std::vector<int> __p = 0;
      uint64_t v15 = 0;
      int v10 = 0;
      int v12 = 0;
    }
    else
    {
      int v101 = 0;
      std::vector<int> __p = 0;
      char v9 = 0;
      int v10 = 0;
      char v11 = 0;
      int v98 = *(Espresso::zephyr::node_t ***)(v6 + 64);
      unint64_t v99 = 0;
      int v12 = 0;
      do
      {
        uint64_t v13 = *v8;
        char matched = (Espresso *)fuse_blizzard_final_1x1_convolutions_match_conv(*v8);
        long long v14 = matched;
        if (matched)
        {
          if (v9 >= v101)
          {
            uint64_t v16 = (v9 - __p) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if ((v101 - __p) >> 2 > v17) {
              unint64_t v17 = (v101 - __p) >> 2;
            }
            if ((unint64_t)(v101 - __p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18)
            {
              if (v18 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v19 = (char *)operator new(8 * v18);
              int v20 = v12;
              uint64_t v21 = v10;
            }
            else
            {
              int v20 = v12;
              uint64_t v21 = v10;
              int v19 = 0;
            }
            unsigned int v22 = (Espresso **)&v19[8 * v16];
            *unsigned int v22 = v14;
            uint64_t v15 = (Espresso::zephyr::value_t *)(v22 + 1);
            if (v9 == __p)
            {
              uint64_t v23 = __p;
            }
            else
            {
              uint64_t v23 = __p;
              do
              {
                uint64_t v24 = (Espresso *)*((void *)v9 - 1);
                char v9 = (Espresso::zephyr::value_t *)((char *)v9 - 8);
                *--unsigned int v22 = v24;
              }
              while (v9 != __p);
            }
            int v101 = (Espresso::zephyr::value_t *)&v19[8 * v18];
            if (v23) {
              operator delete(v23);
            }
            std::vector<int> __p = (Espresso::zephyr::value_t *)v22;
            int v10 = v21;
            int v12 = v20;
            uint64_t v7 = v98;
          }
          else
          {
            *(void *)char v9 = matched;
            uint64_t v15 = (Espresso::zephyr::value_t *)((char *)v9 + 8);
          }
          if ((unint64_t)v11 >= v99)
          {
            uint64_t v26 = (v11 - v10) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v99 - (void)v10) >> 2 > v27) {
              unint64_t v27 = (uint64_t)(v99 - (void)v10) >> 2;
            }
            if (v99 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            uint64_t v30 = (Espresso::zephyr::node_t **)(v28 + 8 * v26);
            *uint64_t v30 = v13;
            uint64_t v25 = (char *)(v30 + 1);
            while (v11 != v10)
            {
              uint64_t v31 = (Espresso::zephyr::node_t *)*((void *)v11 - 1);
              v11 -= 8;
              *--uint64_t v30 = v31;
            }
            unint64_t v99 = v28 + 8 * v29;
            if (v10) {
              operator delete(v10);
            }
            int v10 = (char *)v30;
          }
          else
          {
            *(void *)char v11 = v13;
            uint64_t v25 = v11 + 8;
          }
          char matched = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v14 + 384))(v14);
          v12 += *((_DWORD *)matched + 10);
          char v9 = v15;
          char v11 = v25;
        }
        else
        {
          uint64_t v15 = v9;
        }
        v8 += 2;
      }
      while (v8 != v7);
    }
    uint64_t v34 = v15 - __p;
    if ((unint64_t)(v15 - __p) <= 0x10)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_72;
      }
      uint64_t v50 = Espresso::espresso_os_log_subsystem(matched, v4);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1423;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "all_convolutions.size() >= 3";
        _os_log_impl(&dword_1920CB000, v50, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    else
    {
      uint64_t v35 = *((void *)v96 + 15);
      if (*((void *)v96 + 16) == v35) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v36 = v34 >> 3;
      if (v34 >> 3 == (uint64_t)(*(void *)(*(void *)v35 + 64) - *(void *)(*(void *)v35 + 56)) >> 4)
      {
        uint64_t v37 = (*(uint64_t (**)(void))(**(void **)__p + 384))(*(void *)__p);
        long long v38 = *(_OWORD *)v37;
        long long v39 = *(_OWORD *)(v37 + 32);
        *(_OWORD *)&buf[16] = *(_OWORD *)(v37 + 16);
        long long v113 = v39;
        *(_OWORD *)buf = v38;
        long long v40 = *(_OWORD *)(v37 + 48);
        long long v41 = *(_OWORD *)(v37 + 64);
        long long v42 = *(_OWORD *)(v37 + 96);
        long long v116 = *(_OWORD *)(v37 + 80);
        long long v117 = v42;
        long long v114 = v40;
        long long v115 = v41;
        long long v43 = *(_OWORD *)(v37 + 112);
        long long v44 = *(_OWORD *)(v37 + 128);
        long long v45 = *(_OWORD *)(v37 + 144);
        uint64_t v121 = *(void *)(v37 + 160);
        long long v119 = v44;
        long long v120 = v45;
        long long v118 = v43;
        DWORD2(v113) = v12;
        uint64_t v46 = *(void *)(*((void *)v96 + 1) + 8);
        Espresso::abstract_engine_factory::shared(&v108);
        uint64_t v47 = v108;
        std::string::basic_string[abi:ne180100]<0>(v122, "convolution");
        LODWORD(v106) = (***(uint64_t (****)(void))(*(void *)(v46 + 8) + 8))(*(void *)(*(void *)(v46 + 8) + 8));
        LODWORD(v104) = 0;
        Espresso::abstract_engine_factory::make_kernel_priv(v47, v46 + 8, (uint64_t)v122, (uint64_t)buf, (int *)&v106);
        if ((v122[23] & 0x80000000) != 0) {
          operator delete(*(void **)v122);
        }
        if (v109) {
          nitro::nitro_function::nitro_function(v109);
        }
        if (lpsrc)
        {
          if (v48)
          {
            uint64_t v49 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
LABEL_79:
            if (v111) {
              nitro::nitro_function::nitro_function(v111);
            }
            unint64_t v92 = v49;
            int v52 = Espresso::zephyr::function_t::new_detached_node(*((void *)v96 + 3), (uint64_t)v96 + 144);
            int v93 = v48;
            unint64_t v94 = v36;
            unint64_t v53 = (uint64_t *)*((void *)v96 + 12);
            if (*((uint64_t **)v96 + 13) == v53) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v54 = v52;
            uint64_t v55 = *((void *)v96 + 3);
            uint64_t v56 = *v53;
            size_t v57 = *(unsigned __int8 *)(*v53 + 55);
            if ((v57 & 0x80u) == 0) {
              size_t v58 = v57;
            }
            else {
              size_t v58 = *(void *)(v56 + 40);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v122, v58 + 8);
            if (v122[23] >= 0) {
              uint64_t v59 = v122;
            }
            else {
              uint64_t v59 = *(unsigned char **)v122;
            }
            if (v58)
            {
              if (*(char *)(v56 + 55) >= 0) {
                unint64_t v60 = (const void *)(v56 + 32);
              }
              else {
                unint64_t v60 = *(const void **)(v56 + 32);
              }
              memmove(v59, v60, v58);
            }
            strcpy(&v59[v58], "__concat");
            __int16 v102 = (Espresso::zephyr::value_t *)Espresso::zephyr::function_t::new_value(v55, (uint64_t)v122);
            if ((v122[23] & 0x80000000) != 0) {
              operator delete(*(void **)v122);
            }
            uint64_t v61 = *((void *)v54 + 1);
            if (v49) {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v62 = *(std::__shared_weak_count **)(v61 + 16);
            *(void *)(v61 + 8) = v93;
            *(void *)(v61 + 16) = v49;
            if (v62) {
              nitro::nitro_function::nitro_function(v62);
            }
            int v63 = (Espresso::zephyr::value_t **)*((void *)v96 + 15);
            if (*((Espresso::zephyr::value_t ***)v96 + 16) == v63) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v54, *v63);
            Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v54, v102);
            int v64 = (Espresso::zephyr::value_t **)*((void *)v96 + 15);
            if (*((Espresso::zephyr::value_t ***)v96 + 16) == v64) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v65 = **(Espresso::zephyr::ordered_block_t ***)(a1 + 8);
            use = (Espresso::zephyr::node_t *)Espresso::zephyr::ordered_block_t::first_use(v65, *v64);
            Espresso::zephyr::ordered_block_t::insert_node_before(v65, (Espresso::zephyr::node_t *)v54, use);
            int v100 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)__p + 384))(*(void *)__p) + 44);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&lpsrc, 1, 1, SHIDWORD(v113), SDWORD2(v113));
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v108, SDWORD2(v113), 1, 1, 1);
            uint64_t v67 = lpsrc;
            if (v15 != __p)
            {
              int v68 = 0;
              uint64_t v95 = v108;
              if (v94 <= 1) {
                uint64_t v69 = 1;
              }
              else {
                uint64_t v69 = v94;
              }
              int v70 = __p;
              int v71 = (Espresso::zephyr::node_t **)v10;
              do
              {
                int v72 = v10;
                uint64_t v73 = *(void *)v70;
                uint64_t v74 = v67[3];
                (*(void (**)(unsigned char *__return_ptr, void))(**(void **)v70 + 456))(v122, *(void *)v70);
                int v75 = *(const void **)(*(void *)v122 + 24);
                int v76 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v73 + 384))(v73) + 40);
                uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 384))(v73);
                memcpy((void *)(v74 + 4 * v68 * v100), v75, 4 * *(_DWORD *)(v77 + 44) * v76);
                if (*(void *)&v122[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v122[8]);
                }
                uint64_t v78 = *(void *)(v95 + 16);
                (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v73 + 448))(v122, v73);
                int v79 = *(const void **)(*(void *)v122 + 16);
                uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 384))(v73);
                memcpy((void *)(v78 + 4 * v68), v79, 4 * *(int *)(v80 + 40));
                if (*(void *)&v122[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v122[8]);
                }
                *(_OWORD *)&v122[8] = xmmword_192DCA660;
                *(_DWORD *)__int16 v122 = 2;
                *(_DWORD *)&v122[4] = v68;
                int v10 = v72;
                v68 += *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v73 + 384))(v73) + 40);
                *(_DWORD *)&v122[8] = v68;
                Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(&v106, *(void *)(*((void *)v96 + 1) + 8), (uint64_t)v122);
                int v81 = Espresso::zephyr::function_t::new_detached_node(*((void *)v96 + 3), (uint64_t)v96 + 144);
                uint64_t v82 = *((void *)v81 + 1);
                int v83 = v106;
                int v84 = v107;
                if (v107) {
                  atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v85 = *(std::__shared_weak_count **)(v82 + 16);
                *(void *)(v82 + 8) = v83;
                *(void *)(v82 + 16) = v84;
                if (v85) {
                  nitro::nitro_function::nitro_function(v85);
                }
                Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v81, v102);
                uint64_t v86 = (Espresso::zephyr::value_t **)*((void *)*v71 + 12);
                if (*((Espresso::zephyr::value_t ***)*v71 + 13) == v86) {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v81, *v86);
                Espresso::zephyr::ordered_block_t::insert_node_before(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v81, *v71);
                Espresso::zephyr::node_t::remove_from_graphs(*v71);
                if (v84) {
                  nitro::nitro_function::nitro_function(v84);
                }
                ++v71;
                int v70 = (Espresso::zephyr::value_t *)((char *)v70 + 8);
                --v69;
              }
              while (v69);
            }
            uint64_t v87 = v111;
            __int16 v106 = v67;
            int v107 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, void **))(*(void *)v93 + 400))(v93, &v106);
            if (v107) {
              nitro::nitro_function::nitro_function(v107);
            }
            __int16 v88 = v109;
            uint64_t v104 = v108;
            int v105 = v109;
            if (v109) {
              atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, uint64_t *))(*(void *)v93 + 392))(v93, &v104);
            unint64_t v90 = (Espresso *)v105;
            if (v105) {
              nitro::nitro_function::nitro_function(v105);
            }
            if (Espresso::zephyr::match_verbose)
            {
              unint64_t v91 = Espresso::espresso_os_log_subsystem(v90, v89);
              if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)__int16 v122 = 136315394;
                *(void *)&v122[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pas"
                                      "ses_strength_reduction.mm";
                *(_WORD *)&v122[12] = 1024;
                *(_DWORD *)&v122[14] = 1473;
                _os_log_impl(&dword_1920CB000, v91, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v122, 0x12u);
              }
            }
            if (v88) {
              nitro::nitro_function::nitro_function(v88);
            }
            if (v87) {
              nitro::nitro_function::nitro_function(v87);
            }
            if (v92) {
              nitro::nitro_function::nitro_function(v92);
            }
            uint64_t v33 = 1;
            if (!v10) {
              goto LABEL_74;
            }
LABEL_73:
            operator delete(v10);
LABEL_74:
            if (__p) {
              operator delete(__p);
            }
            return v33;
          }
        }
        else
        {
          uint64_t v48 = 0;
        }
        uint64_t v49 = 0;
        goto LABEL_79;
      }
      if (!Espresso::zephyr::match_verbose)
      {
LABEL_72:
        uint64_t v33 = 0;
        if (!v10) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }
      uint64_t v50 = Espresso::espresso_os_log_subsystem(matched, v4);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1424;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&unsigned char buf[20] = "all_convolutions.size() == node->input()->uses().size()";
        _os_log_impl(&dword_1920CB000, v50, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }

    goto LABEL_72;
  }
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v32 = Espresso::espresso_os_log_subsystem(0, v4);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1408;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = "fuse_blizzard_final_1x1_convolutions_match_conv(node)";
      _os_log_impl(&dword_1920CB000, v32, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
  }
  return 0;
}

void sub_192B94B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (v28) {
    operator delete(v28);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fuse_blizzard_final_1x1_convolutions_match_conv(Espresso::zephyr::node_t *a1)
{
  __n128 result = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>((uint64_t)a1);
  if (result)
  {
    uint64_t v3 = result;
    char v4 = (int32x2_t *)(*(uint64_t (**)(void *))(*(void *)result + 384))(result);
    __n128 result = 0;
    *(int32x2_t *)v5.i8 = vrev64_s32(v4[3]);
    v5.i32[2] = v4[7].i32[1];
    v5.i32[3] = v4[14].i32[0];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v5, (int32x4_t)xmmword_192DCA6C0)))) & 1) == 0)
    {
      BOOL v6 = v4[14].i32[1] == 1 && v4[6].i32[0] == 1;
      if (v6 && v4[6].i32[1] == 1)
      {
        long long v8 = (Espresso::zephyr::value_t **)*((void *)a1 + 15);
        char v9 = (Espresso::zephyr::value_t **)*((void *)a1 + 16);
        if ((char *)v9 - (char *)v8 != 8) {
          return 0;
        }
        if (v9 == v8) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        int v10 = *v8;
        Espresso::zephyr::need_shape((Espresso::zephyr *)&v17, *v8);
        if (v17)
        {
          Espresso::zephyr::need_shape((Espresso::zephyr *)&v15, v10);
          BOOL v11 = *v15 != 1;
          if (v16) {
            nitro::nitro_function::nitro_function(v16);
          }
        }
        else
        {
          BOOL v11 = 1;
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        if (v11) {
          return 0;
        }
        Espresso::zephyr::need_shape((Espresso::zephyr *)&v17, v10);
        if (v17)
        {
          Espresso::zephyr::need_shape((Espresso::zephyr *)&v15, v10);
          BOOL v12 = v15[1] != 1;
          if (v16) {
            nitro::nitro_function::nitro_function(v16);
          }
        }
        else
        {
          BOOL v12 = 1;
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        if (v12) {
          return 0;
        }
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v3 + 456))(&v17, v3);
        uint64_t v13 = v17;
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        if (!v13)
        {
          return 0;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v3 + 448))(&v17, v3);
          uint64_t v14 = v17;
          if (v18) {
            nitro::nitro_function::nitro_function(v18);
          }
          if (v14) {
            return v3;
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_192B94EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BCA0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BCA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_blizzard_final_1x1_convolutions(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192B94FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      v13[0] = &unk_1EE37BB40;
      v13[1] = v3 + 16;
      uint64_t v14 = v13;
      long long v8 = *(void **)(v5 + 120);
      BOOL v6 = (void *)(v5 + 120);
      uint64_t v7 = v8;
      if (v8 == v6 - 1)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          int v10 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v14, v7[2]);
          BOOL v11 = v7 + 1;
          if (v10) {
            BOOL v11 = v6;
          }
          v9 |= v10;
          uint64_t v7 = (void *)*v11;
        }
        while ((void *)*v11 != v6 - 1);
      }
      v4 |= v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v13);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192B95110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes34strength_reduction_gather_to_sliceERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(Espresso::zephyr::ordered_block_t ***a1, const char *a2)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v8 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1486;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "gather_nd_node->inputs().size() == 2";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  if (*(void *)(v2 + 104) - *(void *)(v2 + 96) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v8 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1487;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "gather_nd_node->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  char v4 = Espresso::zephyr::cast_kernel<Espresso::generic_gather_nd_kernel>(*(void *)a2);
  if (!v4)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v8 = Espresso::espresso_os_log_subsystem(0, v5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1491;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "gather_nd_kernel";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  BOOL v6 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  if (*(_DWORD *)v6)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1494;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "p.mode == TF_GATHER";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_25:

      return 0;
    }
    return 0;
  }
  if (*((_DWORD *)v6 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1495;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "p.batch_dims == 0";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_25;
    }
    return 0;
  }
  int v11 = *((_DWORD *)v6 + 1);
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, **(Espresso::zephyr::value_t ***)(v2 + 120));
  uint64_t v14 = *(void *)buf;
  uint64_t v13 = *(Espresso **)&buf[8];
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v14)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    long long v8 = Espresso::espresso_os_log_subsystem(v13, v12);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1497;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&long long v83 = "need_shape(gather_nd_node->inputs()[0])";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_25;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, **(Espresso::zephyr::value_t ***)(v2 + 120));
  uint64_t v15 = *(void *)(*(void *)buf + 32);
  long long v16 = *(_OWORD *)(*(void *)buf + 16);
  long long v72 = **(_OWORD **)buf;
  long long v73 = v16;
  uint64_t v74 = v15;
  int v75 = 0;
  int v76 = 0;
  uint64_t v77 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v75, *(const void **)(*(void *)buf + 40), *(void *)(*(void *)buf + 48), (uint64_t)(*(void *)(*(void *)buf + 48) - *(void *)(*(void *)buf + 40)) >> 2);
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *(Espresso::zephyr::value_t **)(*(void *)(v2 + 120) + 8));
  uint64_t v19 = *(void *)buf;
  unint64_t v18 = *(Espresso **)&buf[8];
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v19)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v54 = Espresso::espresso_os_log_subsystem(v18, v17);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1500;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "need_shape(gather_nd_node->inputs()[1])";
        _os_log_impl(&dword_1920CB000, v54, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    BOOL v9 = 0;
    goto LABEL_102;
  }
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *(Espresso::zephyr::value_t **)(*(void *)(v2 + 120) + 8));
  uint64_t v20 = *(void *)(*(void *)buf + 32);
  long long v21 = *(_OWORD *)(*(void *)buf + 16);
  long long v66 = **(_OWORD **)buf;
  long long v67 = v21;
  uint64_t v68 = v20;
  std::vector<int> __p = 0;
  int v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(*(void *)buf + 40), *(void *)(*(void *)buf + 48), (uint64_t)(*(void *)(*(void *)buf + 48) - *(void *)(*(void *)buf + 40)) >> 2);
  uint64_t v23 = *(Espresso **)&buf[8];
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (DWORD1(v67) == -1 || SDWORD1(v67) >= 2)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(v23, v22);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1502;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "i_shape.rank() <= 1";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_98;
    }
  }
  else if (v66 == 1)
  {
    constant = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(*(void *)(*(void *)(*(void *)(v2 + 120) + 8) + 80));
    if (constant)
    {
      uint64_t v26 = (Espresso *)Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, constant + 43);
      BOOL v9 = v64 != 0;
      if (v64)
      {
        int v28 = (int)**(float **)(v64 + 24);
        int v63 = 1;
        int v29 = DWORD1(v73);
        if (v73 == 1) {
          int v30 = 4;
        }
        else {
          int v30 = 5;
        }
        if (DWORD1(v73) == -1) {
          int v29 = v30;
        }
        v61[0] = v29 + ~v11;
        v61[1] = v28;
        v61[2] = v28 + 1;
        uint64_t v62 = 1;
        Espresso::zephyr::make_kernel<Espresso::generic_slice_kernel,Espresso::zephyr::node_t,Espresso::slice_params_t>(&v59, *(void *)(*(void *)(v2 + 8) + 8), (uint64_t)v61);
        uint64_t v31 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v2 + 24), v2 + 144);
        uint64_t v32 = *(uint64_t **)(v2 + 96);
        if (*(uint64_t **)(v2 + 104) == v32) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v33 = v31;
        uint64_t v34 = *(void *)(v2 + 24);
        uint64_t v35 = *v32;
        size_t v36 = *(unsigned __int8 *)(*v32 + 55);
        if ((v36 & 0x80u) == 0) {
          size_t v37 = v36;
        }
        else {
          size_t v37 = *(void *)(v35 + 40);
        }
        long long v38 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v37 + 4);
        if (SBYTE3(v83) < 0) {
          long long v38 = *(unsigned char **)buf;
        }
        if (v37)
        {
          if (*(char *)(v35 + 55) >= 0) {
            long long v39 = (const void *)(v35 + 32);
          }
          else {
            long long v39 = *(const void **)(v35 + 32);
          }
          memmove(v38, v39, v37);
        }
        strcpy(&v38[v37], "_tmp");
        long long v40 = Espresso::zephyr::function_t::new_value(v34, (uint64_t)buf);
        if (SBYTE3(v83) < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v41 = *((void *)v33 + 1);
        uint64_t v42 = v59;
        long long v43 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v44 = *(std::__shared_weak_count **)(v41 + 16);
        *(void *)(v41 + 8) = v42;
        *(void *)(v41 + 16) = v43;
        if (v44) {
          nitro::nitro_function::nitro_function(v44);
        }
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v33, **(Espresso::zephyr::value_t ***)(v2 + 120));
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v33, (Espresso::zephyr::value_t *)v40);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v33, (Espresso::zephyr::node_t *)v2);
        memset(v89, 0, sizeof(v89));
        long long v88 = 0u;
        long long v87 = 0u;
        long long v86 = 0u;
        long long v85 = 0u;
        long long v84 = 0u;
        long long v83 = 0u;
        *(_OWORD *)&uint8_t buf[4] = 0u;
        int v90 = 2;
        *(_DWORD *)buf = v11;
        Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v57, *(void *)(*(void *)(v2 + 8) + 8), (uint64_t)buf);
        long long v45 = Espresso::zephyr::function_t::new_detached_node(*(void *)(v2 + 24), v2 + 144);
        uint64_t v46 = *((void *)v45 + 1);
        uint64_t v47 = v57;
        uint64_t v48 = v58;
        if (v58) {
          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v49 = *(std::__shared_weak_count **)(v46 + 16);
        *(void *)(v46 + 8) = v47;
        *(void *)(v46 + 16) = v48;
        if (v49) {
          nitro::nitro_function::nitro_function(v49);
        }
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v45, (Espresso::zephyr::value_t *)v40);
        uint64_t v50 = *(Espresso::zephyr::value_t ***)(v2 + 96);
        if (*(Espresso::zephyr::value_t ***)(v2 + 104) == v50) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v45, *v50);
        Espresso::zephyr::ordered_block_t::insert_node_after(*a1[1], (Espresso::zephyr::node_t *)v45, (Espresso::zephyr::node_t *)v33);
        __int16 v51 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v2);
        if (Espresso::zephyr::match_verbose)
        {
          unint64_t v53 = Espresso::espresso_os_log_subsystem(v51, v52);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v78 = 136315394;
            int v79 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            __int16 v80 = 1024;
            int v81 = 1546;
            _os_log_impl(&dword_1920CB000, v53, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v78, 0x12u);
          }
        }
        if (v48) {
          nitro::nitro_function::nitro_function(v48);
        }
        if (v43) {
          nitro::nitro_function::nitro_function(v43);
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        uint64_t v56 = Espresso::espresso_os_log_subsystem(v26, v27);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1511;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&long long v83 = "constant_blob";
          _os_log_impl(&dword_1920CB000, v56, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
      }
      if (v65) {
        nitro::nitro_function::nitro_function(v65);
      }
      goto LABEL_100;
    }
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v55 = Espresso::espresso_os_log_subsystem(0, v25);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1508;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&long long v83 = "const_kernel";
        _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_98:
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v55 = Espresso::espresso_os_log_subsystem(v23, v22);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1503;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&long long v83 = "i_shape.w == 1";
      _os_log_impl(&dword_1920CB000, v55, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_98;
  }
  BOOL v9 = 0;
LABEL_100:
  if (__p)
  {
    int v70 = __p;
    operator delete(__p);
  }
LABEL_102:
  if (v75)
  {
    int v76 = v75;
    operator delete(v75);
  }
  return v9;
}

void sub_192B95C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BB40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BB40;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_gather_to_slice(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_30generic_general_padding_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EEEEEEUlRKNS5_6vectorIPNS0_6node_tENS5_9allocatorISE_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = **a2;
  v6[0] = v3;
  v6[1] = Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(v3);
  uint64_t v4 = *(void *)(v2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v6);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DF00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37DF00;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes50strength_reduction_remove_identity_general_paddingERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::operator()(Espresso *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(void *)(*(void *)a2 + 128) - *(void *)(*(void *)a2 + 120) == 8)
  {
    if (*((void *)v2 + 13) - *((void *)v2 + 12) == 8)
    {
      uint64_t v3 = (Espresso *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 320))(*(void *)(a2 + 8));
      if (*(_WORD *)v3)
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            int v12 = 136315650;
            uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            __int16 v14 = 1024;
            int v15 = 406;
            __int16 v16 = 2080;
            uint64_t v17 = "p.pad.pad_mode == CUSTOM";
LABEL_13:
            _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v12, 0x1Cu);
            goto LABEL_14;
          }
          goto LABEL_14;
        }
      }
      else if (*((_WORD *)v3 + 4))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v12 = 136315650;
          uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v14 = 1024;
          int v15 = 407;
          __int16 v16 = 2080;
          uint64_t v17 = "p.pad.l == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 5))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v12 = 136315650;
          uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v14 = 1024;
          int v15 = 408;
          __int16 v16 = 2080;
          uint64_t v17 = "p.pad.r == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 6))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v12 = 136315650;
          uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v14 = 1024;
          int v15 = 409;
          __int16 v16 = 2080;
          uint64_t v17 = "p.pad.t == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 7))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v12 = 136315650;
          uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v14 = 1024;
          int v15 = 410;
          __int16 v16 = 2080;
          uint64_t v17 = "p.pad.b == 0";
          goto LABEL_13;
        }
      }
      else if (*((_WORD *)v3 + 8))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v12 = 136315650;
          uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v14 = 1024;
          int v15 = 411;
          __int16 v16 = 2080;
          uint64_t v17 = "p.pad.front == 0";
          goto LABEL_13;
        }
      }
      else
      {
        if (!*((_WORD *)v3 + 9))
        {
          long long v8 = (Espresso::zephyr::value_t **)*((void *)v2 + 12);
          if (*((Espresso::zephyr::value_t ***)v2 + 13) == v8
            || (BOOL v9 = (Espresso::zephyr::value_t **)*((void *)v2 + 15), *((Espresso::zephyr::value_t ***)v2 + 16) == v9))
          {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          Espresso::zephyr::value_t::replace_uses(*v8, *v9);
          int v10 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
          if (!Espresso::zephyr::match_verbose) {
            return 1;
          }
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v10, v11);
          uint64_t v6 = 1;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            int v12 = 136315394;
            uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            __int16 v14 = 1024;
            int v15 = 418;
            _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v12, 0x12u);
          }
          goto LABEL_15;
        }
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v12 = 136315650;
          uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v14 = 1024;
          int v15 = 412;
          __int16 v16 = 2080;
          uint64_t v17 = "p.pad.back == 0";
          goto LABEL_13;
        }
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      uint64_t v5 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v12 = 136315650;
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
        __int16 v14 = 1024;
        int v15 = 402;
        __int16 v16 = 2080;
        uint64_t v17 = "t.node->outputs().size() == 1";
        goto LABEL_13;
      }
      goto LABEL_14;
    }
    return 0;
  }
  if (!Espresso::zephyr::match_verbose) {
    return 0;
  }
  uint64_t v5 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315650;
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    __int16 v14 = 1024;
    int v15 = 401;
    __int16 v16 = 2080;
    uint64_t v17 = "t.node->inputs().size() == 1";
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v6 = 0;
LABEL_15:

  return v6;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C010;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37C010;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_remove_identity_general_padding(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes33commute_inner_product_expand_dimsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)*a2;
  if (!Espresso::zephyr::match_simple_eltwise_binop(*a2, 0))
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v8 = Espresso::espresso_os_log_subsystem(0, v4);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 686;
        __int16 v46 = 2080;
        *(void *)uint64_t v47 = "match_simple_eltwise_binop(bias_add, ELEMENTWISE_OPERATION_ADD)";
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    return 0;
  }
  uint64_t v41 = 0;
  *(void *)buf = &unk_1EE37EB08;
  *(void *)&uint8_t buf[8] = &v41;
  *(void *)&v47[4] = buf;
  uint64_t v5 = (void *)v3[15];
  if (v3[16] - (void)v5 != 16) {
    goto LABEL_25;
  }
  uint64_t v6 = *(void *)(*v5 + 80);
  uint64_t v7 = *(Espresso::zephyr::node_t **)(v5[1] + 80);
  if (std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()((uint64_t)buf, v6, (uint64_t)v7))
  {
    uint64_t v7 = (Espresso::zephyr::node_t *)v6;
    goto LABEL_10;
  }
  if ((std::function<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(*(uint64_t *)&v47[4], (uint64_t)v7, v6) & 1) == 0)
  {
LABEL_25:
    BOOL v9 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](buf);
    goto LABEL_26;
  }
LABEL_10:
  BOOL v9 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](buf);
  if (v7)
  {
    uint64_t v11 = *((void *)v7 + 15);
    if (*((void *)v7 + 16) == v11) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    int v12 = *(void **)(*(void *)v11 + 80);
    uint64_t v13 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>((uint64_t)v12);
    if (v12[16] - v12[15] == 8)
    {
      if (v13)
      {
        int v15 = (Espresso::zephyr::value_t **)v12[12];
        if ((Espresso::zephyr::value_t **)v12[13] == v15) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        __int16 v16 = (Espresso::zephyr::value_t **)*((void *)v7 + 12);
        if (*((Espresso::zephyr::value_t ***)v7 + 13) == v16) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v17 = (Espresso::zephyr::value_t **)v3[12];
        if ((Espresso::zephyr::value_t **)v3[13] == v17) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v18 = *v16;
        if (*((void *)*v16 + 8) - *((void *)*v16 + 7) == 16)
        {
          uint64_t v19 = *v15;
          uint64_t v20 = *v17;
          Espresso::zephyr::need_shape((Espresso::zephyr *)v42, *v17);
          if (*(void *)v42)
          {
            Espresso::zephyr::need_shape((Espresso::zephyr *)&v39, v20);
            int v22 = *(_DWORD *)(v39 + 20);
            if (v22 == -1)
            {
              if (*(_DWORD *)(v39 + 16) == 1) {
                int v22 = 4;
              }
              else {
                int v22 = 5;
              }
            }
            BOOL v23 = v22 == 3;
            if (v40) {
              nitro::nitro_function::nitro_function(v40);
            }
          }
          else
          {
            BOOL v23 = 0;
          }
          uint64_t v26 = *(Espresso **)&v42[8];
          if (*(void *)&v42[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v42[8]);
          }
          if (v23)
          {
            Espresso::zephyr::need_shape((Espresso::zephyr *)v42, v18);
            if (*(void *)v42)
            {
              Espresso::zephyr::need_shape((Espresso::zephyr *)&v39, v18);
              int v28 = *(_DWORD *)(v39 + 20);
              if (v28 == -1)
              {
                if (*(_DWORD *)(v39 + 16) == 1) {
                  int v28 = 4;
                }
                else {
                  int v28 = 5;
                }
              }
              BOOL v29 = v28 == 3;
              if (v40) {
                nitro::nitro_function::nitro_function(v40);
              }
            }
            else
            {
              BOOL v29 = 0;
            }
            int v30 = *(Espresso **)&v42[8];
            if (*(void *)&v42[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v42[8]);
            }
            if (v29)
            {
              Espresso::zephyr::need_shape((Espresso::zephyr *)v42, v19);
              if (*(void *)v42)
              {
                Espresso::zephyr::need_shape((Espresso::zephyr *)&v39, v19);
                int v32 = *(_DWORD *)(v39 + 20);
                if (v32 == -1)
                {
                  if (*(_DWORD *)(v39 + 16) == 1) {
                    int v32 = 4;
                  }
                  else {
                    int v32 = 5;
                  }
                }
                BOOL v33 = v32 != 2;
                if (v40) {
                  nitro::nitro_function::nitro_function(v40);
                }
              }
              else
              {
                BOOL v33 = 1;
              }
              uint64_t v34 = *(Espresso **)&v42[8];
              if (*(void *)&v42[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v42[8]);
              }
              if (!v33)
              {
                size_t v36 = Espresso::zephyr::function_t::new_value(v3[3], (uint64_t)v18 + 32);
                Espresso::zephyr::node_t::replace_output_at((uint64_t)v3, 0, (Espresso::zephyr::value_t *)v36);
                Espresso::zephyr::node_t::replace_input_with((Espresso::zephyr::node_t *)v3, v18, v19);
                Espresso::zephyr::node_t::remove_from_graphs(v7);
                Espresso::zephyr::node_t::add_input(v7, (Espresso::zephyr::value_t *)v36);
                Espresso::zephyr::node_t::add_output(v7, v20);
                Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), v7, (Espresso::zephyr::node_t *)v3);
                size_t v37 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v41 + 384))(v41);
                *((_DWORD *)v37 + 5) = 2;
                if (!Espresso::zephyr::match_verbose) {
                  return 1;
                }
                uint64_t v24 = Espresso::espresso_os_log_subsystem(v37, v38);
                uint64_t v25 = 1;
                if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v42 = 136315394;
                  *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_strength_reduction.mm";
                  *(_WORD *)&v42[12] = 1024;
                  *(_DWORD *)&v42[14] = 749;
                  _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v42, 0x12u);
                }
                goto LABEL_31;
              }
              if (Espresso::zephyr::match_verbose)
              {
                uint64_t v24 = Espresso::espresso_os_log_subsystem(v34, v31);
                if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
                  goto LABEL_30;
                }
                *(_DWORD *)uint64_t v42 = 136315650;
                *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_strength_reduction.mm";
                *(_WORD *)&v42[12] = 1024;
                *(_DWORD *)&v42[14] = 724;
                __int16 v43 = 2080;
                long long v44 = "need_shape(x) && need_shape(x)->rank() == 2";
                goto LABEL_29;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              uint64_t v24 = Espresso::espresso_os_log_subsystem(v30, v27);
              if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
                goto LABEL_30;
              }
              *(_DWORD *)uint64_t v42 = 136315650;
              *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_strength_reduction.mm";
              *(_WORD *)&v42[12] = 1024;
              *(_DWORD *)&v42[14] = 723;
              __int16 v43 = 2080;
              long long v44 = "need_shape(y) && need_shape(y)->rank() == 3";
              goto LABEL_29;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            uint64_t v24 = Espresso::espresso_os_log_subsystem(v26, v21);
            if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
              goto LABEL_30;
            }
            *(_DWORD *)uint64_t v42 = 136315650;
            *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&v42[12] = 1024;
            *(_DWORD *)&v42[14] = 722;
            __int16 v43 = 2080;
            long long v44 = "need_shape(z) && need_shape(z)->rank() == 3";
            goto LABEL_29;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          uint64_t v24 = Espresso::espresso_os_log_subsystem(v13, v14);
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
            goto LABEL_30;
          }
          *(_DWORD *)uint64_t v42 = 136315650;
          *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&v42[12] = 1024;
          *(_DWORD *)&v42[14] = 721;
          __int16 v43 = 2080;
          long long v44 = "y->has_one_use()";
          goto LABEL_29;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        uint64_t v24 = Espresso::espresso_os_log_subsystem(0, v14);
        if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
          goto LABEL_30;
        }
        *(_DWORD *)uint64_t v42 = 136315650;
        *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&v42[12] = 1024;
        *(_DWORD *)&v42[14] = 715;
        __int16 v43 = 2080;
        long long v44 = "ik != nullptr";
        goto LABEL_29;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      uint64_t v24 = Espresso::espresso_os_log_subsystem(v13, v14);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
        goto LABEL_30;
      }
      *(_DWORD *)uint64_t v42 = 136315650;
      *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&v42[12] = 1024;
      *(_DWORD *)&v42[14] = 714;
      __int16 v43 = 2080;
      long long v44 = "inner_product->inputs().size() == 1";
      goto LABEL_29;
    }
    return 0;
  }
LABEL_26:
  if (!Espresso::zephyr::match_verbose) {
    return 0;
  }
  uint64_t v24 = Espresso::espresso_os_log_subsystem(v9, v10);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v42 = 136315650;
    *(void *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
    *(_WORD *)&v42[12] = 1024;
    *(_DWORD *)&v42[14] = 709;
    __int16 v43 = 2080;
    long long v44 = "expand_dims";
LABEL_29:
    _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v42, 0x1Cu);
  }
LABEL_30:
  uint64_t v25 = 0;
LABEL_31:

  return v25;
}

void sub_192B96E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes33commute_inner_product_expand_dimsERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_S6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(*a2);
  if (v5)
  {
    uint64_t v7 = v5;
    long long v8 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
    if (*((_DWORD *)v8 + 1))
    {
      if (Espresso::zephyr::match_verbose)
      {
        int v10 = Espresso::espresso_os_log_subsystem(v8, v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          int v22 = 136315650;
          BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v24 = 1024;
          int v25 = 695;
          __int16 v26 = 2080;
          unint64_t v27 = "ek->get_params().size_of_axes == 0";
LABEL_13:
          _os_log_impl(&dword_1920CB000, v10, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v22, 0x1Cu);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v11 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v7 + 320))(v7);
      if (*(_DWORD *)v11)
      {
        if (Espresso::zephyr::match_verbose)
        {
          int v10 = Espresso::espresso_os_log_subsystem(v11, v12);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            int v22 = 136315650;
            BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
            __int16 v24 = 1024;
            int v25 = 696;
            __int16 v26 = 2080;
            unint64_t v27 = "ek->get_params().nd_axis == 0";
            goto LABEL_13;
          }
          goto LABEL_14;
        }
      }
      else
      {
        **(void **)(a1 + 8) = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v4);
        uint64_t v15 = **(void **)(a1 + 8);
        if (!v15)
        {
          if (!Espresso::zephyr::match_verbose) {
            return 0;
          }
          int v10 = Espresso::espresso_os_log_subsystem(0, v14);
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v22 = 136315650;
          BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v24 = 1024;
          int v25 = 700;
          __int16 v26 = 2080;
          unint64_t v27 = "ck != nullptr";
          goto LABEL_13;
        }
        __int16 v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 384))(v15);
        if (*((_DWORD *)v16 + 5) != 3)
        {
          if (!Espresso::zephyr::match_verbose) {
            return 0;
          }
          int v10 = Espresso::espresso_os_log_subsystem(v16, v17);
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v22 = 136315650;
          BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v24 = 1024;
          int v25 = 702;
          __int16 v26 = 2080;
          unint64_t v27 = "ck->get_params().nd_rank == 3";
          goto LABEL_13;
        }
        uint64_t v18 = (Espresso *)(*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 384))(**(void **)(a1 + 8));
        if (*((_DWORD *)v18 + 1) != 1)
        {
          if (!Espresso::zephyr::match_verbose) {
            return 0;
          }
          int v10 = Espresso::espresso_os_log_subsystem(v18, v19);
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v22 = 136315650;
          BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v24 = 1024;
          int v25 = 703;
          __int16 v26 = 2080;
          unint64_t v27 = "ck->get_params().h == 1";
          goto LABEL_13;
        }
        uint64_t v20 = (Espresso *)(*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 384))(**(void **)(a1 + 8));
        if (*((_DWORD *)v20 + 2) == 1) {
          return 1;
        }
        if (Espresso::zephyr::match_verbose)
        {
          int v10 = Espresso::espresso_os_log_subsystem(v20, v21);
          if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
            goto LABEL_14;
          }
          int v22 = 136315650;
          BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
          __int16 v24 = 1024;
          int v25 = 704;
          __int16 v26 = 2080;
          unint64_t v27 = "ck->get_params().k == 1";
          goto LABEL_13;
        }
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    int v10 = Espresso::espresso_os_log_subsystem(0, v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v22 = 136315650;
      BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      __int16 v24 = 1024;
      int v25 = 694;
      __int16 v26 = 2080;
      unint64_t v27 = "ek != nullptr";
      goto LABEL_13;
    }
LABEL_14:
  }
  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37EB08;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37EB08;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *,Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BAE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BAE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::commute_inner_product_expand_dims(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes42strength_reduction_coreflow_attention_headERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (Espresso::zephyr::node_t *)*a2;
  uint64_t v4 = Espresso::zephyr::cast_kernel<Espresso::generic_general_concat_kernel>(*a2);
  if (!v4)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    long long v8 = Espresso::espresso_os_log_subsystem(0, v5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 771;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)int v81 = "ck != nullptr";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_28:

    return 0;
  }
  uint64_t v6 = v4;
  if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(unsigned char *)((*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6) + 4) != 0;
  }
  BOOL v9 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
  if (*(_DWORD *)v9 == 2)
  {
    BOOL v9 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v6 + 320))(v6);
    BOOL v11 = *((unsigned char *)v9 + 4) != 0;
  }
  else
  {
    BOOL v11 = 0;
  }
  if (!v7 && !v11)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    long long v8 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 774;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)int v81 = "concat_on_first_axis || concat_on_last_axis";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_28;
  }
  int v12 = (Espresso::zephyr::value_t **)*((void *)v3 + 15);
  if (*((Espresso::zephyr::value_t ***)v3 + 16) == v12)
  {
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    long long v8 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 776;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)int v81 = "concat->inputs().size() > 0";
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_28;
  }
  uint64_t v13 = *v12;
  Espresso::zephyr::need_shape((Espresso::zephyr *)buf, *v12);
  if (*(void *)buf)
  {
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v78, v13);
    int v15 = v78[5];
    if (v15 == -1)
    {
      if (v78[4] == 1) {
        int v15 = 4;
      }
      else {
        int v15 = 5;
      }
    }
    BOOL v16 = v15 == 3;
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
  }
  else
  {
    BOOL v16 = 0;
  }
  uint64_t v17 = *(Espresso **)&buf[8];
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v40 = Espresso::espresso_os_log_subsystem(v17, v14);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 779;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v81 = "need_shape(first_input) && need_shape(first_input)->rank() == 3";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_58;
    }
    return 0;
  }
  uint64_t v18 = (Espresso::zephyr::node_t *)*((void *)v13 + 10);
  uint64_t v19 = *((void *)v3 + 15);
  uint64_t v20 = *((void *)v3 + 16);
  uint64_t v21 = v20 - v19;
  uint64_t v22 = *((void *)v18 + 12);
  if (v20 - v19 != *((void *)v18 + 13) - v22)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v40 = Espresso::espresso_os_log_subsystem(v17, v14);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 782;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v81 = "concat->inputs().size() == split->outputs().size()";
        _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_58:

      return 0;
    }
    return 0;
  }
  if (v20 != v19)
  {
    uint64_t v23 = 0;
    unint64_t v24 = v21 >> 3;
    while (1)
    {
      int v25 = *(void **)(v19 + 8 * v23);
      if (*(void **)(v22 + 8 * v23) != v25)
      {
        if (!Espresso::zephyr::match_verbose) {
          return 0;
        }
        long long v40 = Espresso::espresso_os_log_subsystem(v17, v14);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 787;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)int v81 = "split_output == concat_input";
          _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_58;
      }
      if ((Espresso::zephyr::node_t *)v25[10] != v18)
      {
        if (!Espresso::zephyr::match_verbose) {
          return 0;
        }
        long long v40 = Espresso::espresso_os_log_subsystem(v17, v14);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 788;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)int v81 = "concat_input->defining_node() == split";
          _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_58;
      }
      if (v25[8] - v25[7] != 16) {
        break;
      }
      if (++v23 >= v24) {
        goto LABEL_40;
      }
    }
    if (!Espresso::zephyr::match_verbose) {
      return 0;
    }
    long long v40 = Espresso::espresso_os_log_subsystem(v17, v14);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)int v81 = "concat_input->has_one_use()";
      _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_58;
  }
LABEL_40:
  __int16 v26 = (Espresso::zephyr::value_t **)*((void *)v18 + 15);
  if (*((Espresso::zephyr::value_t ***)v18 + 16) == v26
    || (unint64_t v27 = (Espresso::zephyr::value_t **)*((void *)v3 + 12), *((Espresso::zephyr::value_t ***)v3 + 13) == v27))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = *v26;
  BOOL v29 = *v27;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v78, *v27);
  int v32 = v78;
  if (!v78)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v39 = Espresso::espresso_os_log_subsystem(v30, v31);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 795;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v81 = "y_shape_ptr";
        goto LABEL_95;
      }
LABEL_96:
      uint64_t v41 = 0;
LABEL_97:

      goto LABEL_99;
    }
    goto LABEL_98;
  }
  if (v78[5] != 3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v39 = Espresso::espresso_os_log_subsystem(v30, v31);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 797;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v81 = "y_rank == 3";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_98;
  }
  BOOL v33 = Espresso::zephyr::cast_kernel<Espresso::generic_split_nd_kernel>((uint64_t)v18);
  if (!v33)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v39 = Espresso::espresso_os_log_subsystem(0, v34);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 800;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v81 = "sk != nullptr";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_98;
  }
  uint64_t v35 = v33;
  size_t v36 = *(uint64_t (**)(void *))(*(void *)v33 + 320);
  if (v7)
  {
    if (*(_DWORD *)v36(v33) != -1)
    {
      size_t v37 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v35 + 320))(v35);
      if (*(_DWORD *)v37 != 2)
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v39 = Espresso::espresso_os_log_subsystem(v37, v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_s"
                                 "trength_reduction.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 804;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)int v81 = "sk->get_params().nd_axis == -1 || sk->get_params().nd_axis == y_rank - 1";
LABEL_95:
            _os_log_impl(&dword_1920CB000, v39, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            goto LABEL_96;
          }
          goto LABEL_96;
        }
        goto LABEL_98;
      }
    }
  }
  else
  {
    __int16 v43 = (Espresso *)v36(v33);
    if (*(_DWORD *)v43)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v39 = Espresso::espresso_os_log_subsystem(v43, v44);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_str"
                               "ength_reduction.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 806;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)int v81 = "sk->get_params().nd_axis == 0";
          goto LABEL_95;
        }
        goto LABEL_96;
      }
      goto LABEL_98;
    }
  }
  long long v45 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v35 + 320))(v35);
  if (*((_DWORD *)v45 + 1) != (uint64_t)(*((void *)v3 + 16) - *((void *)v3 + 15)) >> 3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v39 = Espresso::espresso_os_log_subsystem(v45, v46);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 808;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v81 = "sk->get_params().num_splits == concat->inputs().size()";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
LABEL_98:
    uint64_t v41 = 0;
    goto LABEL_99;
  }
  uint64_t v47 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v35 + 320))(v35);
  if (*((_DWORD *)v47 + 2)
    || (uint64_t v47 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v35 + 320))(v35), *((_DWORD *)v47 + 3)))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v39 = Espresso::espresso_os_log_subsystem(v47, v48);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_stren"
                             "gth_reduction.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 810;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v81 = "sk->get_params().size_splits[0] == 0 && sk->get_params().size_splits[1] == 0";
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_98;
  }
  uint64_t v49 = Espresso::zephyr::function_t::new_value(*((void *)v3 + 3), (uint64_t)v29 + 32);
  uint64_t v50 = *((void *)v3 + 3);
  if (v7)
  {
    __int16 v51 = Espresso::zephyr::function_t::new_detached_node(v50, (uint64_t)v3 + 144);
    memset(buf, 0, sizeof(buf));
    *(void *)&v81[4] = 0;
    __int16 v82 = 1;
    int v83 = 1;
    int v52 = v32[2];
    *(_DWORD *)buf = *v32;
    *(_DWORD *)&uint8_t buf[4] = v52;
    *(_DWORD *)&uint8_t buf[8] = -1;
    int v53 = v32[5];
    if (v53 == -1)
    {
      if (v32[4] == 1) {
        int v53 = 4;
      }
      else {
        int v53 = 5;
      }
    }
    *(_DWORD *)int v81 = v53;
    Espresso::zephyr::make_kernel<Espresso::generic_reshape_kernel,Espresso::zephyr::node_t,Espresso::reshape_params>(&v76, *(void *)(*((void *)v3 + 1) + 8), (uint64_t)buf);
    uint64_t v54 = *((void *)v51 + 1);
    uint64_t v56 = v76;
    uint64_t v55 = v77;
    if (v77) {
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v57 = *(std::__shared_weak_count **)(v54 + 16);
    *(void *)(v54 + 8) = v56;
    *(void *)(v54 + 16) = v55;
    size_t v58 = v55;
    if (v57) {
      nitro::nitro_function::nitro_function(v57);
    }
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v51, v28);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v51, (Espresso::zephyr::value_t *)v49);
    Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v51, v3);
    if (v58) {
      nitro::nitro_function::nitro_function(v58);
    }
    uint64_t v59 = Espresso::zephyr::function_t::new_detached_node(*((void *)v3 + 3), (uint64_t)v3 + 144);
    *(_DWORD *)&buf[16] = 4;
    *(_OWORD *)buf = xmmword_192DCA410;
    Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v76, *(void *)(*((void *)v3 + 1) + 8), (uint64_t)buf);
    uint64_t v60 = *((void *)v59 + 1);
    uint64_t v61 = v76;
    uint64_t v62 = v77;
    if (v77) {
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v63 = *(std::__shared_weak_count **)(v60 + 16);
    *(void *)(v60 + 8) = v61;
    *(void *)(v60 + 16) = v62;
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
  }
  else
  {
    __int16 v51 = Espresso::zephyr::function_t::new_detached_node(v50, (uint64_t)v3 + 144);
    *(_DWORD *)&buf[16] = 4;
    *(_OWORD *)buf = xmmword_192DCA410;
    Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v76, *(void *)(*((void *)v3 + 1) + 8), (uint64_t)buf);
    uint64_t v64 = *((void *)v51 + 1);
    uint64_t v66 = v76;
    uint64_t v65 = v77;
    if (v77) {
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v67 = *(std::__shared_weak_count **)(v64 + 16);
    *(void *)(v64 + 8) = v66;
    *(void *)(v64 + 16) = v65;
    uint64_t v68 = v65;
    if (v67) {
      nitro::nitro_function::nitro_function(v67);
    }
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v51, v28);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v51, (Espresso::zephyr::value_t *)v49);
    Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v51, v3);
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
    uint64_t v59 = Espresso::zephyr::function_t::new_detached_node(*((void *)v3 + 3), (uint64_t)v3 + 144);
    *(void *)&v81[4] = 0;
    __int16 v82 = 1;
    int v83 = 1;
    *(_DWORD *)&uint8_t buf[4] = -1;
    *(void *)&unsigned char buf[12] = 0;
    int v69 = v32[2];
    *(_DWORD *)buf = *v32;
    *(_DWORD *)&uint8_t buf[8] = v69;
    int v70 = v32[5];
    if (v70 == -1)
    {
      if (v32[4] == 1) {
        int v70 = 4;
      }
      else {
        int v70 = 5;
      }
    }
    *(_DWORD *)int v81 = v70;
    Espresso::zephyr::make_kernel<Espresso::generic_reshape_kernel,Espresso::zephyr::node_t,Espresso::reshape_params>(&v76, *(void *)(*((void *)v3 + 1) + 8), (uint64_t)buf);
    uint64_t v71 = *((void *)v59 + 1);
    uint64_t v72 = v76;
    uint64_t v62 = v77;
    if (v77) {
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v73 = *(std::__shared_weak_count **)(v71 + 16);
    *(void *)(v71 + 8) = v72;
    *(void *)(v71 + 16) = v62;
    if (v73) {
      nitro::nitro_function::nitro_function(v73);
    }
  }
  Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v59, (Espresso::zephyr::value_t *)v49);
  Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v59, v29);
  Espresso::zephyr::ordered_block_t::insert_node_after(**(Espresso::zephyr::ordered_block_t ***)(a1 + 8), (Espresso::zephyr::node_t *)v59, (Espresso::zephyr::node_t *)v51);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  Espresso::zephyr::node_t::remove_from_graphs(v3);
  uint64_t v74 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v18);
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v39 = Espresso::espresso_os_log_subsystem(v74, v75);
    uint64_t v41 = 1;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_strength_reduction.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 895;
      _os_log_impl(&dword_1920CB000, v39, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_97;
  }
  uint64_t v41 = 1;
LABEL_99:
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  return v41;
}

void sub_192B98474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_split_nd_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void Espresso::zephyr::make_kernel<Espresso::generic_reshape_kernel,Espresso::zephyr::node_t,Espresso::reshape_params>(void *a1, uint64_t a2, uint64_t a3)
{
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v6 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  int v9 = (***(uint64_t (****)(void))(*(void *)(a2 + 8) + 8))(*(void *)(*(void *)(a2 + 8) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a2 + 8, (uint64_t)__p, a3, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (lpsrc
  {
    long long v8 = v15;
    *a1 = v7;
    a1[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192B986C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37BEB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37BEB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::strength_reduction_coreflow_attention_head(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

BOOL Espresso::ANERuntimeEngine::compiler::compilation_cache_purge(Espresso::ANERuntimeEngine::compiler *this)
{
  uint64_t v2 = [MEMORY[0x1E4F4E030] sharedConnection];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___ZN8Espresso16ANERuntimeEngine8compiler23compilation_cache_purgeEv_block_invoke;
  v6[3] = &unk_1E5747BB8;
  id v7 = v2;
  id v3 = v2;
  BOOL each_segment = Espresso::ANERuntimeEngine::compiler::query_each_segment((uint64_t)this, v6);

  return each_segment;
}

void sub_192B98830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso16ANERuntimeEngine8compiler23compilation_cache_purgeEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  [*(id *)(a1 + 32) purgeCompiledModel:v4];

  return 1;
}

void sub_192B988D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

BOOL Espresso::ANERuntimeEngine::compiler::query_each_segment(uint64_t a1, void *a2)
{
  uint64_t v17 = a2;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  id v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3
    || (v4 = std::__shared_weak_count::lock(v3), v5 = v4, (uint64_t v23 = v4) == 0)
    || (uint64_t v6 = *(void *)(a1 + 8), (v22 = v6) == 0))
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("inconsistent state");
  }
  if (*(unsigned char *)(a1 + 200)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("not yet supported in in-memory model flow");
  }
  uint64_t v20 = v6;
  uint64_t v21 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 88))(a1, &v20);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (*(void *)(a1 + 40) == *(void *)(a1 + 32))
  {
LABEL_19:
    int v14 = 2;
    goto LABEL_23;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  BOOL v16 = (char *)(v17 + 2);
  while (!Espresso::use_multiple_procedure_for_segments(&v22))
  {
    int v9 = Espresso::ANERuntimeEngine::compiler::key_for_segment((Espresso::ANERuntimeEngine::compiler *)a1, v8, (const Espresso::net_compiler_segment_based::segment_t *)(*(void *)(a1 + 32) + v7));
LABEL_13:
    id v10 = *(id *)(a1 + 160);
    uint64_t v18 = v6;
    uint64_t v19 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v11 = get_original_url_if_exists(&v18, v10);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4F4E060], "modelAtURL:key:", v11, v9, v16);
    char v13 = v17[2](v17, v8, v12);

    if ((v13 & 1) == 0)
    {
      int v14 = 1;
      goto LABEL_22;
    }

    ++v8;
    v7 += 120;
    if (v8 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3)) {
      goto LABEL_19;
    }
  }
  int v9 = Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments(a1, &v22);
  if (!v8)
  {
    uint64_t v6 = v22;
    uint64_t v5 = v23;
    goto LABEL_13;
  }
  int v14 = 2;
LABEL_22:

LABEL_23:
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }

  return v14 == 2;
}

void sub_192B98B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  nitro::nitro_function::nitro_function(v14);

  _Unwind_Resume(a1);
}

id Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments(uint64_t a1, void *a2)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  id v3 = [*(id *)(a1 + 168) objectForKeyedSubscript:&unk_1EE3AEFE0];
  if (v3)
  {
    id v4 = v3;
  }
  else
  {
    if (!*a2)
    {
      exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v34 = objc_opt_new();
    size_t v36 = objc_opt_new();
    uint64_t v35 = objc_opt_new();
    if (*(void *)(a1 + 40) != *(void *)(a1 + 32))
    {
      unint64_t v38 = 0;
      __int16 v43 = a2;
      do
      {
        uint64_t v39 = objc_opt_new();
        uint64_t v5 = objc_opt_new();
        uint64_t v6 = *(void *)(a1 + 32);
        std::unordered_set<std::string>::unordered_set((uint64_t)v51, v6 + 120 * (int)v38 + 16);
        id v40 = v39;
        id v52 = v40;
        std::unordered_set<std::string>::unordered_set((uint64_t)v53, v6 + 120 * (int)v38 + 56);
        id v41 = v5;
        char v7 = 0;
        uint64_t v8 = 0;
        v54[0] = v41;
        int v9 = v43;
        do
        {
          char v42 = v7;
          id v10 = *(uint64_t **)&v51[3 * v8 + 1];
          if (v10)
          {
            long long v44 = (void **)&v53[48 * v8 - 8];
            do
            {
              if (*((char *)v10 + 39) < 0) {
                std::string::__init_copy_ctor_external(&v46, (const std::string::value_type *)v10[2], v10[3]);
              }
              else {
                std::string v46 = *(std::string *)(v10 + 2);
              }
              if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*v9 + 136), (unsigned __int8 *)&v46))
              {
                uint64_t v12 = *v9 + 136;
                *(void *)buf = &v46;
                char v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (unsigned __int8 *)&v46, (long long **)buf);
                int v14 = (const void *)*((void *)v13 + 5);
                if (v14)
                {
                  if (v15)
                  {
                    BOOL v16 = v15;
                    uint64_t v17 = (std::__shared_weak_count *)*((void *)v13 + 6);
                    if (v17) {
                      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    uint64_t v48 = @"shape";
                    uint64_t v18 = [NSNumber numberWithInt:v15[44]];
                    v47[0] = v18;
                    long long v45 = [NSNumber numberWithInt:v16[43]];
                    v47[1] = v45;
                    uint64_t v19 = [NSNumber numberWithInt:v16[42]];
                    v47[2] = v19;
                    uint64_t v20 = [NSNumber numberWithInt:v16[41]];
                    v47[3] = v20;
                    uint64_t v21 = [NSNumber numberWithInt:v16[40]];
                    v47[4] = v21;
                    uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:5];
                    uint64_t v49 = v22;
                    uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v49 forKeys:&v48 count:1];
                    unint64_t v24 = *v44;
                    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int v25 = &v46;
                    }
                    else {
                      int v25 = (std::string *)v46.__r_.__value_.__r.__words[0];
                    }
                    __int16 v26 = [NSString stringWithUTF8String:v25];
                    [v24 setObject:v23 forKeyedSubscript:v26];

                    int v9 = v43;
                    if (v17) {
                      nitro::nitro_function::nitro_function(v17);
                    }
                  }
                }
              }
              else
              {
                unint64_t v27 = Espresso::espresso_os_log_subsystem(0, v11);
                if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v28 = &v46;
                  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v28 = (std::string *)v46.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&uint8_t buf[4] = v28;
                  _os_log_error_impl(&dword_1920CB000, v27, OS_LOG_TYPE_ERROR, "[key_for_segment] blob not found: %s", buf, 0xCu);
                }
              }
              if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v46.__r_.__value_.__l.__data_);
              }
              id v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          char v7 = 1;
          uint64_t v8 = 1;
        }
        while ((v42 & 1) == 0);
        for (uint64_t i = 0; i != -12; i -= 6)
        {

          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v53[i * 8]);
        }
        [v36 addObject:v40];
        [v35 addObject:v41];

        ++v38;
      }
      while (v38 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3));
    }
    [v34 setObject:v36 forKeyedSubscript:@"all_inputs"];
    int v30 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v34 options:0 error:0];
    uint64_t v31 = (void *)[[NSString alloc] initWithData:v30 encoding:4];
    [*(id *)(a1 + 168) setObject:v31 forKeyedSubscript:&unk_1EE3AEFE0];
    id v4 = v31;
  }

  return v4;
}

void sub_192B99148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_free_exception(v30);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::implements_compilation_cache_purge(Espresso::ANERuntimeEngine::compiler *this)
{
  return 1;
}

BOOL Espresso::ANERuntimeEngine::compiler::compilation_cache_exists(Espresso::ANERuntimeEngine::compiler *this)
{
  uint64_t v2 = [MEMORY[0x1E4F4E030] sharedConnection];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___ZN8Espresso16ANERuntimeEngine8compiler24compilation_cache_existsEv_block_invoke;
  v6[3] = &unk_1E5747BB8;
  id v7 = v2;
  id v3 = v2;
  BOOL each_segment = Espresso::ANERuntimeEngine::compiler::query_each_segment((uint64_t)this, v6);

  return each_segment;
}

void sub_192B993BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

Espresso *___ZN8Espresso16ANERuntimeEngine8compiler24compilation_cache_existsEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  uint64_t v5 = (Espresso *)[*(id *)(a1 + 32) compiledModelExistsFor:v4];
  id v7 = Espresso::espresso_os_log_subsystem(v5, v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 138412546;
    id v11 = v4;
    __int16 v12 = 1024;
    int v13 = (int)v5;
    _os_log_debug_impl(&dword_1920CB000, v7, OS_LOG_TYPE_DEBUG, "compiledModelExistsFor:ane_model=%@ exists=%D", (uint8_t *)&v10, 0x12u);
  }

  return v5;
}

void sub_192B994F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::__forward_segment(uint64_t a1, uint64_t *a2, uint64_t a3, const Espresso::net_compiler_segment_based::segment_t *a4)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 392);
  if (!v7) {
    goto LABEL_21;
  }
  for (uint64_t i = *(uint64_t **)(v7 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    int v9 = *((_DWORD *)i + 8);
    if (v9 <= (int)a3)
    {
      if (v9 >= (int)a3)
      {
        int v17 = a3;
        goto LABEL_19;
      }
      ++i;
    }
  }
  uint64_t v12 = *(void *)(v7 + 40);
  uint64_t v10 = v7 + 40;
  uint64_t v11 = v12;
  int v17 = a3;
  if (v12)
  {
    uint64_t v13 = v10;
    do
    {
      int v14 = *(_DWORD *)(v11 + 28);
      BOOL v15 = v14 < (int)a3;
      if (v14 >= (int)a3) {
        BOOL v16 = (uint64_t *)v11;
      }
      else {
        BOOL v16 = (uint64_t *)(v11 + 8);
      }
      if (!v15) {
        uint64_t v13 = v11;
      }
      uint64_t v11 = *v16;
    }
    while (*v16);
    int v17 = a3;
    if (v13 != v10)
    {
      int v17 = a3;
      if (*(_DWORD *)(v13 + 28) <= (int)a3) {
        int v17 = *(_DWORD *)(v13 + 32);
      }
    }
  }
LABEL_19:
  uint64_t v18 = *(void *)(*a2 + 64);
  if (!v18
    || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v18 + 48), v17))
  {
LABEL_21:
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    uint64_t v19 = *(std::__shared_weak_count **)(a1 + 16);
    if (v19 && (uint64_t v160 = std::__shared_weak_count::lock(v19)) != 0)
    {
      uint64_t v20 = *(void *)(a1 + 8);
      uint64_t v159 = v20;
    }
    else
    {
      uint64_t v20 = 0;
    }
    kdebug_trace();
    if (!v159)
    {
      exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    memset(&v158, 0, sizeof(v158));
    memset(__p, 0, sizeof(__p));
    uint64_t v21 = *(void *)(a1 + 392);
    if (v21)
    {
      Espresso::analysis_ane_multi_head::get_combo_for_coalesced_segment_given_bound_outputs((Espresso *)buf, v21, *a2, a3, v159);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      __p[0] = *(std::vector<std::string> *)buf;
      memset(buf, 0, 24);
      std::vector<std::string>::__vdeallocate(&__p[1]);
      __p[1] = *(std::vector<std::string> *)&buf[24];
      memset(&buf[24], 0, 24);
      std::vector<std::string>::__vdeallocate(&v158);
      std::vector<std::string> v158 = v162;
      memset(&v162, 0, sizeof(v162));
      uint64_t v155 = &v162;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      uint64_t v155 = (std::vector<std::string> *)&buf[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (__p[0].__begin_ == __p[0].__end_) {
        goto LABEL_48;
      }
    }
    if (!*a2) {
      goto LABEL_184;
    }
    if (v22)
    {
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!*a2)
        {
LABEL_184:
          __int16 v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v124, "Invalid batch supplied");
          __cxa_throw(v124, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v130 = v20;
    uint64_t v131 = (uint64_t)a2;
    uint64_t v132 = a3;
    uint64_t v129 = v23;
    unint64_t v24 = (unsigned __int8 *)*((void *)a4 + 4);
    if (v24)
    {
      do
      {
        *(void *)buf = v24 + 16;
        int v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v159 + 136, v24 + 16, (long long **)buf);
        __int16 v26 = (const void *)*((void *)v25 + 5);
        if (!v26
        {
          long long v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(v118, (const std::string *)buf);
          __cxa_throw(v118, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v28 = (std::__shared_weak_count *)*((void *)v25 + 6);
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          int v134 = v27[45];
          nitro::nitro_function::nitro_function(v28);
        }
        else
        {
          int v134 = v27[45];
        }
        unint64_t v24 = *(unsigned __int8 **)v24;
      }
      while (v24);
      if (v134 < 1)
      {
LABEL_46:
        if (v129) {
          nitro::nitro_function::nitro_function(v129);
        }
LABEL_48:
        *(void *)buf = &v158;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)buf = &__p[1];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (__p[0].__begin_)
        {
          __p[0].__end_ = __p[0].__begin_;
          operator delete(__p[0].__begin_);
        }
        if (v160) {
          nitro::nitro_function::nitro_function(v160);
        }
        return;
      }
    }
    else
    {
      int v134 = 1;
    }
    int v29 = 0;
    int v133 = (std::mutex *)(v22 + 200);
    int v127 = (char **)(v22 + 152);
    while (1)
    {
      if (__p[0].__begin_ == __p[0].__end_) {
        int v30 = (void **)Espresso::ANERuntimeEngine::compiler::create_ane_request(a1, v131, &v159, v132, a4, v29);
      }
      else {
        int v30 = (void **)Espresso::ANERuntimeEngine::compiler::create_ane_request_for_runtime_segment_combination((uint64_t **)a1, v131, &v159, (int **)__p, v29);
      }
      int v32 = v31;
      uint64_t v155 = (std::vector<std::string> *)v30;
      id v156 = v31;
      int32x2_t v136 = v30;
      id v33 = v32;
      _ZNSt3__115allocate_sharedB8ne180100I32ANECompilerAnalyticsHandlerStateNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v153);
      ++*(void *)(a1 + 304);
      uint64_t v34 = v153;
      Espresso::ANERuntimeEngine::compiler::set_compiler_analytics_binary_path((void *)a1, v153 + 40);
      objc_initWeak(&location, v33);
      if (!v22[96])
      {
        [v33 setCompletionHandler:0];
        goto LABEL_96;
      }
      std::mutex::lock(v133);
      uint64_t v37 = *((void *)v22 + 39) + 1;
      *((void *)v22 + 39) = v37;
      uint64_t v38 = *((void *)v22 + 19);
      uint64_t v39 = (char *)*((void *)v22 + 20);
      uint64_t v40 = (uint64_t)&v39[-v38] >> 4;
      if (v22[328])
      {
        id v41 = Espresso::espresso_os_log_subsystem(v35, v36);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v37;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v40;
          _os_log_debug_impl(&dword_1920CB000, v41, OS_LOG_TYPE_DEBUG, "ANE Batch: Registered new async request id %zu, at array index %zu\n", buf, 0x16u);
        }

        uint64_t v38 = *((void *)v22 + 19);
        uint64_t v39 = (char *)*((void *)v22 + 20);
        uint64_t v42 = (uint64_t)&v39[-v38] >> 4;
      }
      else
      {
        uint64_t v42 = (uint64_t)&v39[-v38] >> 4;
      }
      unint64_t v43 = v42 + 1;
      if (v42 + 1 > (unint64_t)((*((void *)v22 + 21) - v38) >> 4))
      {
        std::vector<Espresso::ANERuntimeEngine::async_request_status>::reserve(v127, *((void *)v22 + 18) + v43);
        uint64_t v38 = *((void *)v22 + 19);
        uint64_t v39 = (char *)*((void *)v22 + 20);
      }
      unint64_t v44 = (uint64_t)&v39[-v38] >> 4;
      if (v43 > v44) {
        break;
      }
      if (v43 < v44)
      {
        uint64_t v59 = (char *)(v38 + 16 * v43);
LABEL_83:
        *((void *)v22 + 20) = v59;
      }
LABEL_84:
      uint64_t v60 = *((void *)v22 + 19) + 16 * v40;
      *(unsigned char *)(v60 + 12) = 1;
      *(void *)uint64_t v60 = v37;
      std::mutex::unlock(v133);
      v140[0] = MEMORY[0x1E4F143A8];
      v140[1] = 3321888768;
      v140[2] = ___ZN8Espresso16ANERuntimeEngine8compiler17__forward_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEiRKNS_26net_compiler_segment_based9segment_tE_block_invoke;
      v140[3] = &unk_1EE38EA38;
      v142[1] = (id)a1;
      v142[2] = v22;
      int32x2_t v143 = v129;
      if (v129) {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v151 = v132;
      uint64_t v144 = v40;
      uint64_t v145 = a1;
      uint64_t v146 = v130;
      objc_copyWeak(v142, &location);
      uint64_t v147 = v159;
      uint64_t v148 = v160;
      if (v160) {
        atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v34 = v153;
      uint64_t v149 = v153;
      uint64_t v150 = v154;
      if (v154) {
        atomic_fetch_add_explicit(&v154->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v141 = v136;
      [v33 setCompletionHandler:v140];

      if (v150) {
        nitro::nitro_function::nitro_function(v150);
      }
      if (v148) {
        nitro::nitro_function::nitro_function(v148);
      }
      objc_destroyWeak(v142);
      if (v143) {
        nitro::nitro_function::nitro_function(v143);
      }
LABEL_96:
      if (*(unsigned char *)(a1 + 289))
      {
        if (*(_DWORD *)(a1 + 292)) {
          goto LABEL_98;
        }
      }
      else if (!*(unsigned char *)(*(void *)(a1 + 104) + 139))
      {
LABEL_98:
        uint64_t qos = Espresso::ANERuntimeEngine::compiler::get_qos(a1);
        goto LABEL_101;
      }
      uint64_t qos = [MEMORY[0x1E4F4E080] aneRealTimeTaskQoS];
LABEL_101:
      uint64_t v62 = qos;
      unsigned int v135 = [*(id *)(a1 + 184) objectForKeyedSubscript:v136];
      Espresso::ANERuntimeEngine::compiler::add_ane_eval_profiling_options(a1, (id *)&v155);
      if (*(unsigned char *)(a1 + 296))
      {
        uint64_t v65 = Espresso::espresso_os_log_subsystem(v63, v64);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          uint64_t v66 = (void *)(v159 + 592);
          if (*(char *)(v159 + 615) < 0) {
            uint64_t v66 = (void *)*v66;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v66;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v62;
          *(_WORD *)&unsigned char buf[18] = 2112;
          *(void *)&uint8_t buf[20] = v135;
          _os_log_impl(&dword_1920CB000, v65, OS_LOG_TYPE_INFO, "[__forward_segment] ane_evaluate: net=%s qos=%d options=%@", buf, 0x1Cu);
        }
      }
      long long v67 = *(void **)(a1 + 192);
      if (*(unsigned char *)(a1 + 200))
      {
        uint64_t v68 = [v67 objectForKeyedSubscript:v136];
        int v69 = v68;
        if (!v68)
        {
          *(void *)buf = [v136 UTF8String];
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", buf);
        }
        uint64_t v139 = 0;
        int v70 = (id *)&v139;
        int v71 = [v68 evaluateWithQoS:v62 options:v135 request:v33 error:&v139];
        goto LABEL_116;
      }
      int v69 = [v67 objectForKeyedSubscript:v136];
      if (!v69)
      {
        *(void *)buf = [v136 UTF8String];
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", buf);
      }
      if (*(unsigned char *)(a1 + 289))
      {
        if (!*(_DWORD *)(a1 + 292)) {
          goto LABEL_115;
        }
      }
      else if (*(unsigned char *)(*(void *)(a1 + 104) + 139))
      {
LABEL_115:
        uint64_t v74 = *(void **)(a1 + 136);
        uint64_t v138 = 0;
        int v70 = (id *)&v138;
        int v71 = [v74 evaluateRealTimeWithModel:v69 options:v135 request:v33 error:&v138];
        goto LABEL_116;
      }
      uint64_t v72 = *(void **)(a1 + 136);
      uint64_t v73 = Espresso::ANERuntimeEngine::compiler::get_qos(a1);
      uint64_t v137 = 0;
      int v70 = (id *)&v137;
      int v71 = [v72 evaluateWithModel:v69 options:v135 request:v33 qos:v73 error:&v137];
LABEL_116:
      int v75 = v71;
      id v76 = *v70;

      uint64_t v77 = [v33 completionHandler];
      if (v77) {
        int v78 = 0;
      }
      else {
        int v78 = v75;
      }
      if (v78 == 1 && (uint64_t v79 = *(void *)(v159 + 1240)) != 0)
      {
        if (*(void *)(v79 + 1048))
        {
          __int16 v80 = [v33 perfStats];
          BOOL v81 = v80 == 0;

          if (!v81)
          {
            __int16 v82 = *(void **)(*(void *)(v159 + 1240) + 1048);
            __int16 v126 = [v33 perfStats];
            uint64_t v83 = [v126 hwExecutionTime];
            uint64_t v84 = v83;
            long long v85 = (uint64_t *)v82[2];
            unint64_t v86 = v82[3];
            if ((unint64_t)v85 >= v86)
            {
              uint64_t v96 = (uint64_t *)v82[1];
              uint64_t v97 = v85 - v96;
              if ((unint64_t)(v97 + 1) >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v98 = v86 - (void)v96;
              unint64_t v99 = (uint64_t)(v86 - (void)v96) >> 2;
              if (v99 <= v97 + 1) {
                unint64_t v99 = v97 + 1;
              }
              BOOL v100 = v98 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v100) {
                unint64_t v101 = v99;
              }
              if (v101)
              {
                unint64_t v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v101);
                uint64_t v96 = (uint64_t *)v82[1];
                long long v85 = (uint64_t *)v82[2];
              }
              else
              {
                uint64_t v102 = 0;
              }
              uint64_t v108 = (uint64_t *)(v101 + 8 * v97);
              *uint64_t v108 = v84;
              long long v87 = v108 + 1;
              if (v85 == v96)
              {
                long long v88 = v126;
              }
              else
              {
                long long v88 = v126;
                do
                {
                  uint64_t v109 = *--v85;
                  *--uint64_t v108 = v109;
                }
                while (v85 != v96);
              }
              v82[1] = v108;
              void v82[2] = v87;
              v82[3] = v101 + 8 * v102;
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              uint64_t *v85 = v83;
              long long v87 = v85 + 1;
              long long v88 = v126;
            }
            void v82[2] = v87;
          }
          __int16 v110 = [v33 perfStatsArray];
          if (v110)
          {
            int v111 = [v33 perfStatsArray];
            BOOL v112 = [v111 count] == 0;

            if (!v112)
            {
              uint64_t v113 = *(void *)(*(void *)(v159 + 1240) + 1048);
              std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v136 UTF8String]);
              if (*(char *)(v34 + 63) < 0)
              {
                long long v114 = (uint64_t *)(v34 + 40);
                std::string::__init_copy_ctor_external((std::string *)&buf[24], *(const std::string::value_type **)(v34 + 40), *(void *)(v34 + 48));
              }
              else
              {
                *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)(v34 + 40);
                long long v114 = (uint64_t *)(v34 + 40);
                *(void *)&buf[40] = *(void *)(v34 + 56);
              }
              std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100]((void **)(v113 + 32), (long long *)buf);
              if ((buf[47] & 0x80000000) != 0) {
                operator delete(*(void **)&buf[24]);
              }
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              long long v115 = [v33 perfStatsArray];
              long long v116 = [v115 objectAtIndexedSubscript:0];
              long long v117 = [v116 stats];
              *(void *)buf = [v117 ioSurface];
              Espresso::ANERuntimeEngine::compiler::write_iosurface((IOSurfaceRef *)buf, v114);
            }
          }
        }
      }
      else
      {
      }
      uint64_t v89 = [v33 completionHandler];
      BOOL v90 = v89 == 0;

      if (v90) {
        uint64_t v91 = (Espresso *)kdebug_trace();
      }
      if ((v75 & 1) == 0)
      {
        int v93 = Espresso::espresso_os_log_subsystem(v91, v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
        {
          int v103 = [v76 code];
          id v104 = [v76 description];
          uint64_t v105 = [v104 UTF8String];
          __int16 v106 = "";
          if (v105)
          {
            id v125 = [v76 description];
            __int16 v106 = (const char *)[v125 UTF8String];
          }
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v132;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v103;
          *(_WORD *)&buf[14] = 2080;
          *(void *)&buf[16] = v106;
          _os_log_error_impl(&dword_1920CB000, v93, OS_LOG_TYPE_ERROR, "[Espresso::ANERuntimeEngine::__forward_segment %d] evaluate[RealTime]WithModel returned 0; code=%d err=%s",
            buf,
            0x18u);
          if (v105) {
        }
          }
        if ([v76 code] != 5)
        {
          long long v119 = [v76 localizedDescription];
          long long v120 = (void *)(v159 + 592);
          if (*(char *)(v159 + 615) < 0) {
            long long v120 = (void *)*v120;
          }
          if (v119) {
            uint64_t v121 = (const char *)[v119 UTF8String];
          }
          else {
            uint64_t v121 = "";
          }
          Espresso::throw_exception_selector<Espresso::generic_error,char const*,char const*>("ANEF error: %s, %s", (uint64_t)v120, (uint64_t)v121);
        }
        uint64_t v95 = Espresso::espresso_os_log_subsystem((Espresso *)5, v94);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
        {
          int v107 = (void *)(v159 + 592);
          if (*(char *)(v159 + 615) < 0) {
            int v107 = (void *)*v107;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v107;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v132;
          _os_log_error_impl(&dword_1920CB000, v95, OS_LOG_TYPE_ERROR, "[Espresso::overflow_error] %s:%d", buf, 0x12u);
        }

        if (*(unsigned char *)(*(void *)(a1 + 104) + 140))
        {
          __int16 v122 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::overflow_error::overflow_error(v122);
        }
      }

      objc_destroyWeak(&location);
      if (v154) {
        nitro::nitro_function::nitro_function(v154);
      }

      if (++v29 == v134) {
        goto LABEL_46;
      }
    }
    unint64_t v45 = v43 - v44;
    uint64_t v46 = *((void *)v22 + 21);
    if (v43 - v44 > (v46 - (uint64_t)v39) >> 4)
    {
      if (v43 >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v46 - v38;
      uint64_t v48 = v47 >> 3;
      if (v47 >> 3 <= v43) {
        uint64_t v48 = v43;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v49);
      uint64_t v52 = v51;
      int v53 = &v50[16 * v44];
      bzero(v53, 16 * v45);
      uint64_t v55 = (char *)*((void *)v22 + 19);
      uint64_t v54 = (char *)*((void *)v22 + 20);
      uint64_t v56 = v53;
      if (v54 != v55)
      {
        do
        {
          uint64_t v57 = *((void *)v54 - 2);
          v54 -= 16;
          uint64_t v58 = *(void *)(v54 + 5);
          *((void *)v56 - 2) = v57;
          v56 -= 16;
          *(void *)(v56 + 5) = v58;
        }
        while (v54 != v55);
        uint64_t v54 = *v127;
      }
      *((void *)v22 + 19) = v56;
      *((void *)v22 + 20) = &v53[16 * v45];
      *((void *)v22 + 21) = &v50[16 * v52];
      if (v54) {
        operator delete(v54);
      }
      goto LABEL_84;
    }
    bzero(v39, 16 * v45);
    uint64_t v59 = &v39[16 * v45];
    goto LABEL_83;
  }
}

void sub_192B9A47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id *a31,std::mutex *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id location,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  __cxa_free_exception(v61);
  uint64_t v64 = *(std::__shared_weak_count **)(v62 - 200);
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::create_ane_request(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, const Espresso::net_compiler_segment_based::segment_t *a5, int a6)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  int32x2_t v140 = objc_opt_new();
  uint64_t v139 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration(&__p, a4, a1 + 264);
  LODWORD(buf.__r_.__value_.__l.__data_) = a4;
  uint64_t v138 = (Espresso::ANERuntimeEngine::compiler *)a1;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<std::shared_ptr<Espresso::net> const&,Espresso::net_compiler_segment_based::segment_t const&>>((uint64_t *)(a1 + 224), a4, &buf, a3, (uint64_t)a5);
  if (v8[6] == 1)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v145, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v145 = __p;
    }
  }
  else
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v9 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 504), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&buf);
    uint64_t v10 = (unsigned __int8 *)v9[7];
    uint64_t v11 = (unsigned __int8 *)v9[8];
    if (v10 == v11)
    {
      unint64_t v12 = 0;
    }
    else
    {
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = *a3 + 136;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
        int v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v10, (long long **)&buf);
        BOOL v15 = (const void *)*((void *)v14 + 5);
        if (!v15
        {
          exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &buf);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v17 = v16;
        uint64_t v18 = (std::__shared_weak_count *)*((void *)v14 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v16[17] - v16[16] >= 8uLL)
        {
          unsigned int v19 = [*(id *)(v16[27] + 8 * a6) pixelFormat];
          unsigned int v20 = v19;
          uint64_t v22 = (_DWORD *)v17[16];
          uint64_t v21 = (_DWORD *)v17[17];
          uint64_t v23 = v22;
          if (v22 != v21)
          {
            while (*v23 != v19)
            {
              if (++v23 == v21)
              {
                uint64_t v23 = v21;
                break;
              }
            }
          }
          if (v23 == v21)
          {
            int v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v153, v20);
            uint64_t v128 = std::string::insert(&v153, 0, "Unexpected 4cc format: ");
            long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v129;
            v128->__r_.__value_.__l.__size_ = 0;
            v128->__r_.__value_.__r.__words[2] = 0;
            v128->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v127, &buf);
            __cxa_throw(v127, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v24 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)(v8 + 3), &buf, v10);
          if (!v24) {
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
          }
          v12 += *(void *)(v24 + 64) * (v23 - v22);
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        v10 += 24;
      }
      while (v10 != v11);
    }
    Espresso::ANECompilerEngine::compiler::procedure_name_with_four_cc_configuration(&v145, (uint64_t)&__p, v12);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v145;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unsigned int v25 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v138 + 60, &__p, (long long **)&buf)+ 14);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  __int16 v26 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v138 + 63, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v27 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v138 + 66, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&buf);
  int32x2_t v136 = Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_input_symbol_indices_for_procedure((uint64_t)v138 + 432, &__p);
  uint64_t v132 = v27;
  unsigned int v131 = v25;
  uint64_t v137 = Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_output_symbol_indices_for_procedure((uint64_t)v138 + 432, &__p);
  int v29 = (unsigned __int8 *)v26[7];
  uint64_t v28 = (unsigned __int8 *)v26[8];
  for (uint64_t i = a4; v29 != v28; a4 = i)
  {
    uint64_t v31 = *a3 + 136;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    int v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v29, (long long **)&buf);
    id v33 = (const void *)*((void *)v32 + 5);
    if (!v33
    {
      long long v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v120, &buf);
      __cxa_throw(v120, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v35 = (std::__shared_weak_count *)*((void *)v32 + 6);
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = v34[27];
    if (a6 >= (unint64_t)((v34[28] - v36) >> 3))
    {
      __int16 v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v124, &buf);
      __cxa_throw(v124, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v37 = *(void **)(v36 + 8 * a6);
    if (!v37)
    {
      uint64_t v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v123, &buf);
      __cxa_throw(v123, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v38 = objc_msgSend(v37, "ane_io_surfaceForMultiBufferFrame:", *(void *)(*(void *)a2 + 80));
    [v140 addObject:v38];

    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    v29 += 24;
  }
  uint64_t v39 = (unsigned __int8 *)v132[7];
  for (int j = (unsigned __int8 *)v132[8]; v39 != j; a4 = i)
  {
    uint64_t v41 = *a3 + 136;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    uint64_t v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, v39, (long long **)&buf);
    unint64_t v43 = (const void *)*((void *)v42 + 5);
    if (!v43
    {
      uint64_t v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v121, &buf);
      __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v45 = (std::__shared_weak_count *)*((void *)v42 + 6);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = v44[27];
    if (a6 >= (unint64_t)((v44[28] - v46) >> 3))
    {
      __int16 v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v126, &buf);
      __cxa_throw(v126, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v47 = *(void **)(v46 + 8 * a6);
    if (!v47)
    {
      id v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v125, &buf);
      __cxa_throw(v125, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v48 = objc_msgSend(v47, "ane_io_surfaceForMultiBufferFrame:", *(void *)(*(void *)a2 + 80));
    [v139 addObject:v48];

    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    v39 += 24;
  }
  unint64_t v49 = v138;
  if (*((unsigned char *)v138 + 312))
  {
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    ANECGetMutableProcedureInfoSize();
    uint64_t v150 = 0;
    v149[2] = 0;
    if ((int)v152 >= 1) {
      int v50 = v152 - 1;
    }
    else {
      int v50 = v152 + 62;
    }
    ANECGetMutableOperationInfoSize();
    uint64_t v51 = (int)((v50 & 0xFFFFFFC0) + 64);
    int v52 = v150 + v51 + 62;
    if ((int)v150 + (int)v51 - 1 >= 0) {
      int v52 = v150 + v51 - 1;
    }
    unsigned int v53 = v52 & 0xFFFFFFC0;
    signed int v54 = (v52 & 0xFFFFFFC0) + 87;
    if (v54 < 0) {
      signed int v54 = v53 + 150;
    }
    signed int v55 = (v54 & 0xFFFFFFC0) + 64;
    uint64_t v142 = *((void *)v138 + 41);
    uint64_t v56 = *((void *)v138 + 40) + v55;
    uint64_t v57 = (void *)*((void *)v138 + 48);
    if (!v57)
    {
      v153.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F2F2C0];
      uint64_t v58 = [NSNumber numberWithUnsignedLongLong:v56];
      std::string::size_type v59 = *MEMORY[0x1E4F2F0E8];
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1EE3AEFC8;
      std::string::size_type v60 = *MEMORY[0x1E4F2EFE0];
      v153.__r_.__value_.__l.__size_ = v59;
      v153.__r_.__value_.__r.__words[2] = v60;
      uint64_t v61 = [NSNumber numberWithUnsignedLongLong:v56];
      uint64_t v154 = *MEMORY[0x1E4F2EFD8];
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v61;
      id v156 = &unk_1EE3AEFC8;
      uint64_t v62 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&buf forKeys:&v153 count:4];

      int v63 = [[EspressoANEIOSurface alloc] initWithIOSurfaceProperties:v62 andPixelFormats:0];
      uint64_t v64 = (void *)*((void *)v138 + 48);
      *((void *)v138 + 48) = v63;

      [*((id *)v138 + 48) doNonLazyAllocation:0];
      unint64_t v49 = v138;
      uint64_t v57 = (void *)*((void *)v138 + 48);
      a4 = i;
    }
    uint64_t v65 = (__IOSurface *)[v57 ioSurfaceForMultiBufferFrame:0];
    IOSurfaceLock(v65, 0, 0);
    BaseAddress = IOSurfaceGetBaseAddress(v65);
    uint64_t v67 = (int)(v53 + 64);
    *(void *)BaseAddress = 1;
    BaseAddress[2] = 5;
    *((void *)BaseAddress + 2) = v56;
    BaseAddress[6] = 1;
    *((void *)BaseAddress + 4) = v51;
    uint64_t v68 = (void *)((char *)BaseAddress + v51);
    *uint64_t v68 = 0x100000000;
    v68[1] = v67;
    int v69 = (void *)((char *)BaseAddress + v67);
    *int v69 = 0;
    v69[1] = v55;
    v69[2] = v142;
    int v70 = (std::__shared_weak_count *)*((void *)v49 + 2);
    if (!v70
      || (buffera = v65, (int32x2_t v143 = std::__shared_weak_count::lock(v70)) == 0)
      || (uint64_t v71 = *((void *)v49 + 1)) == 0)
    {
      uint64_t v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Inconsistent state");
      __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v73 = *(uint64_t **)(v71 + 32);
    uint64_t v72 = *(uint64_t **)(v71 + 40);
    if (v73 != v72)
    {
      uint64_t v74 = v71 + 136;
      int v75 = (char *)BaseAddress + v55;
      do
      {
        uint64_t v76 = *v73;
        uint64_t v77 = *(const void **)(*v73 + 64);
        if (v77)
        {
          if (v78)
          {
            uint64_t v79 = v78;
            __int16 v80 = *(std::__shared_weak_count **)(v76 + 72);
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v78[392])
            {
              uint64_t v147 = (long long *)(v78 + 344);
              BOOL v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v74, (unsigned __int8 *)v78 + 344, &v147);
              __int16 v82 = (std::__shared_weak_count *)*((void *)v81 + 6);
              v149[0] = *((void *)v81 + 5);
              v149[1] = v82;
              if (v82) {
                atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              Espresso::sync_copy_to_host(&v145, v149);
              if (v82) {
                nitro::nitro_function::nitro_function(v82);
              }
              uint64_t v83 = *((void *)v79 + 46);
              std::string::size_type v84 = v145.__r_.__value_.__r.__words[0];
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v147, v145.__r_.__value_.__r.__words[0] + 8);
              uint64_t v85 = 0;
              unint64_t v86 = *(int **)(v84 + 24);
              long long v87 = v147;
              long long v88 = (const void *)*((void *)v147 + 3);
              uint64_t v89 = *(int *)(v84 + 8);
              do
              {
                v89 *= *(int *)(v84 + 12 + v85);
                v85 += 4;
              }
              while (v85 != 12);
              if (v89)
              {
                BOOL v90 = (_WORD *)*((void *)v147 + 3);
                do
                {
                  int v91 = *v86++;
                  _S0 = v91;
                  __asm { FCVT            H0, S0 }
                  *v90++ = _S0;
                  --v89;
                }
                while (v89);
              }
              uint64_t v97 = 0;
              uint64_t v98 = *((int *)v87 + 2);
              unint64_t v99 = (char *)v87 + 12;
              do
              {
                v98 *= *(int *)&v99[v97];
                v97 += 4;
              }
              while (v97 != 12);
              memcpy(&v75[v83], v88, 2 * v98);
              if (v148) {
                nitro::nitro_function::nitro_function(v148);
              }
              if (v145.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v145.__r_.__value_.__l.__size_);
              }
            }
            if (v80) {
              nitro::nitro_function::nitro_function(v80);
            }
          }
        }
        v73 += 2;
      }
      while (v73 != v72);
    }
    IOSurfaceUnlock(buffera, 0, 0);
    nitro::nitro_function::nitro_function(v143);
    unint64_t v49 = v138;
  }
  uint64_t v100 = Espresso::ANERuntimeEngine::compiler::key_for_segment(v49, a4, a5);
  unint64_t v101 = (void *)[MEMORY[0x1E4F1CBF0] mutableCopy];
  uint64_t v102 = *(unsigned char **)(*(void *)(*a3 + 1240) + 1048);
  if (v102 && (*v102 & 2) != 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    id v104 = [NSString stringWithUTF8String:p_p];
    if (!v104
      || ([*((id *)v49 + 26) objectForKeyedSubscript:v104],
          uint64_t v105 = objc_claimAutoreleasedReturnValue(),
          BOOL v106 = v105 == 0,
          v105,
          unint64_t v49 = v138,
          v106))
    {
      uint64_t v108 = [*((id *)v49 + 26) objectForKeyedSubscript:@"net"];
      BOOL v109 = v108 == 0;

      if (v109)
      {
        int v107 = Espresso::espresso_os_log_subsystem(v110, v111);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
          _os_log_debug_impl(&dword_1920CB000, v107, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::create_ane_request] Could not find perfStatsArray for segment:\"%@\" ", (uint8_t *)&buf, 0xCu);
        }
      }
      else
      {
        int v107 = [*((id *)v138 + 26) objectForKeyedSubscript:@"net"];
        [v101 addObject:v107];
      }
    }
    else
    {
      int v107 = [*((id *)v138 + 26) objectForKeyedSubscript:v104];
      [v101 addObject:v107];
    }

    unint64_t v49 = v138;
  }
  BOOL v112 = (void *)MEMORY[0x1E4F4E088];
  if (*((unsigned char *)v49 + 312))
  {
    uint64_t v113 = (void *)[v140 copy];
    long long v114 = (void *)[v136 copy];
    long long v115 = (void *)[v139 copy];
    long long v116 = (void *)[v137 copy];
    long long v117 = objc_msgSend(*((id *)v49 + 48), "ane_io_surfaceForMultiBufferFrame:", 0);
    long long v118 = [NSNumber numberWithInt:v131];
    [v112 requestWithInputs:v113 inputIndices:v114 outputs:v115 outputIndices:v116 weightsBuffer:v117 perfStats:v101 procedureIndex:v118];
    objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v113 = (void *)[v140 copy];
    long long v114 = (void *)[v136 copy];
    long long v115 = (void *)[v139 copy];
    long long v116 = (void *)[v137 copy];
    long long v117 = [NSNumber numberWithInt:v131];
    [v112 requestWithInputs:v113 inputIndices:v114 outputs:v115 outputIndices:v116 perfStats:v101 procedureIndex:v117];
    objc_claimAutoreleasedReturnValue();
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v100;
}

void sub_192B9B60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, _Unwind_Exception *exception_object,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_192B9B968()
{
  if (!v1) {
    JUMPOUT(0x192B9B930);
  }
  JUMPOUT(0x192B9B928);
}

uint64_t Espresso::ANERuntimeEngine::compiler::create_ane_request_for_runtime_segment_combination(uint64_t **a1, uint64_t a2, void *a3, int **a4, int a5)
{
  int v52 = objc_opt_new();
  uint64_t v51 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::procedure_name_for_combo_and_configuration(&__p, *a4, a4[1], (uint64_t)(a1 + 33));
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unsigned int v9 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 60, &__p, (long long **)&v53)+ 14);
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 63, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v53);
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 66, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v53);
  Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_input_symbol_indices_for_procedure((uint64_t)(a1 + 54), &__p);
  unint64_t v49 = v47 = v11;
  uint64_t v48 = Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_output_symbol_indices_for_procedure((uint64_t)(a1 + 54), &__p);
  uint64_t v46 = (uint64_t)a1;
  uint64_t v13 = (unsigned __int8 *)v10[7];
  for (uint64_t i = (unsigned __int8 *)v10[8]; v13 != i; v13 += 24)
  {
    uint64_t v14 = *a3 + 136;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    BOOL v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, v13, (long long **)&v53);
    BOOL v16 = (const void *)*((void *)v15 + 5);
    if (!v16
    {
      exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v53);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v18 = (std::__shared_weak_count *)*((void *)v15 + 6);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = v17[27];
    if (a5 >= (unint64_t)((v17[28] - v19) >> 3))
    {
      unint64_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v43, &v53);
      __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v20 = *(void **)(v19 + 8 * a5);
    if (!v20)
    {
      uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v42, &v53);
      __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v21 = objc_msgSend(v20, "ane_io_surfaceForMultiBufferFrame:", *(void *)(*(void *)a2 + 80));
    [v52 addObject:v21];

    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
  }
  uint64_t v23 = (unsigned __int8 *)v47[7];
  for (int j = (unsigned __int8 *)v47[8]; v23 != j; v23 += 24)
  {
    uint64_t v24 = *a3 + 136;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    unsigned int v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, v23, (long long **)&v53);
    __int16 v26 = (const void *)*((void *)v25 + 5);
    if (!v26
    {
      uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v41, &v53);
      __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v28 = (std::__shared_weak_count *)*((void *)v25 + 6);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = v27[27];
    int v30 = *(void **)(v29 + 8 * a5);
    if (!v30)
    {
      unint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v44, &v53);
      __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (a5 >= (unint64_t)((v27[28] - v29) >> 3))
    {
      unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v45, &v53);
      __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v31 = objc_msgSend(v30, "ane_io_surfaceForMultiBufferFrame:", *(void *)(*(void *)a2 + 80));
    [v51 addObject:v31];

    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
  uint64_t v32 = Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments(v46, a3);
  id v33 = (void *)MEMORY[0x1E4F4E088];
  uint64_t v34 = (void *)[v52 copy];
  uint64_t v35 = (void *)[v49 copy];
  uint64_t v36 = (void *)[v51 copy];
  uint64_t v37 = (void *)[v48 copy];
  uint64_t v38 = [NSNumber numberWithInt:v9];
  [v33 requestWithInputs:v34 inputIndices:v35 outputs:v36 outputIndices:v37 procedureIndex:v38];
  objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v32;
}

void sub_192B9BF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100I32ANECompilerAnalyticsHandlerStateNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 1) = 0;
  *(void *)uint64_t v2 = &unk_1EE380620;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *a1 = v2 + 24;
  a1[1] = v2;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 2, 1uLL, memory_order_relaxed);
  *((void *)v2 + 3) = v2 + 24;
  *((void *)v2 + 4) = v2;

  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void Espresso::ANERuntimeEngine::compiler::set_compiler_analytics_binary_path(void *a1, uint64_t a2)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  id v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[1];
      if (!v7) {
        goto LABEL_34;
      }
      uint64_t v8 = *(void *)(v7 + 1240);
      if (!v8) {
        goto LABEL_34;
      }
      uint64_t v9 = *(void *)(v8 + 1048);
      if (!v9) {
        goto LABEL_34;
      }
      if (*(char *)(v9 + 79) < 0)
      {
        if (!*(void *)(v9 + 64))
        {
LABEL_34:
          nitro::nitro_function::nitro_function(v6);
          return;
        }
      }
      else if (!*(unsigned char *)(v9 + 79))
      {
        goto LABEL_34;
      }
      if (*(char *)(v9 + 79) >= 0) {
        size_t v10 = *(unsigned __int8 *)(v9 + 79);
      }
      else {
        size_t v10 = *(void *)(v9 + 64);
      }
      uint64_t v11 = &v22;
      std::string::basic_string[abi:ne180100]((uint64_t)&v22, v10 + 24);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if (v10)
      {
        if (*(char *)(v9 + 79) >= 0) {
          unint64_t v12 = (const void *)(v9 + 56);
        }
        else {
          unint64_t v12 = *(const void **)(v9 + 56);
        }
        memmove(v11, v12, v10);
      }
      strcpy((char *)v11 + v10, "/compiler_analytics_out_");
      std::to_string(&__p, a1[38]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      BOOL v15 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      int v17 = std::string::append(&v23, ".bin");
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
      v24[0] = v17->__r_.__value_.__l.__size_;
      *(void *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      uint64_t v20 = v24[0];
      *(void *)a2 = v18;
      *(void *)(a2 + 8) = v20;
      *(void *)(a2 + 15) = *(void *)((char *)v24 + 7);
      *(unsigned char *)(a2 + 23) = v19;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      goto LABEL_34;
    }
  }
}

void sub_192B9C37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  nitro::nitro_function::nitro_function(v26);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso16ANERuntimeEngine8compiler17__forward_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEiRKNS_26net_compiler_segment_based9segment_tE_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 72);
  int v62 = *(_DWORD *)(a1 + 128);
  id v63 = v5;
  std::mutex::lock((std::mutex *)(v6 + 200));
  uint64_t v10 = *(void *)(v6 + 152);
  uint64_t v11 = (unint64_t *)(v10 + 16 * v7);
  unint64_t v12 = *v11;
  if (*(unsigned char *)(v6 + 328))
  {
    uint64_t v13 = Espresso::espresso_os_log_subsystem(v8, v9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v42 = @"NO";
      *(_DWORD *)std::string buf = 134218498;
      *(void *)&uint8_t buf[4] = v12;
      if (a2) {
        uint64_t v42 = @"YES";
      }
      __int16 v66 = 2048;
      uint64_t v67 = v7;
      __int16 v68 = 2112;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      _os_log_debug_impl(&dword_1920CB000, v13, OS_LOG_TYPE_DEBUG, "ANE Batch: Posting completion of async_request %zu, array index %zu: (success: %@)\n", buf, 0x20u);
    }
  }
  if ((a2 & 1) == 0)
  {
    BOOL v15 = (uint64_t **)(v6 + 184);
    uint64_t v14 = *(uint64_t **)(v6 + 184);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          long long v16 = (uint64_t **)v14;
          unint64_t v17 = v14[4];
          if (v12 >= v17) {
            break;
          }
          uint64_t v14 = *v16;
          BOOL v15 = v16;
          if (!*v16) {
            goto LABEL_13;
          }
        }
        if (v17 >= v12) {
          break;
        }
        uint64_t v14 = v16[1];
        if (!v14)
        {
          BOOL v15 = v16 + 1;
          goto LABEL_13;
        }
      }
      std::string::size_type v18 = v16;
    }
    else
    {
      long long v16 = (uint64_t **)(v6 + 184);
LABEL_13:
      std::string::size_type v18 = operator new(0x40uLL);
      *((void *)v18 + 4) = v12;
      *((void *)v18 + 5) = 0;
      *((void *)v18 + 6) = 0;
      *((void *)v18 + 7) = 0;
      *(void *)std::string::size_type v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = v16;
      *BOOL v15 = (uint64_t *)v18;
      uint64_t v19 = **(void **)(v6 + 176);
      uint64_t v20 = (uint64_t *)v18;
      if (v19)
      {
        *(void *)(v6 + 176) = v19;
        uint64_t v20 = *v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 184), v20);
      ++*(void *)(v6 + 192);
    }
    *((void *)v18 + 5) = v12;
    *((_DWORD *)v18 + 12) = v62;
    objc_storeStrong((id *)v18 + 7, a3);
    if (*(unsigned char *)(v6 + 328))
    {
      std::string v23 = Espresso::espresso_os_log_subsystem(v21, v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        unint64_t v59 = *v11;
        uint64_t v60 = [v63 code];
        uint64_t v61 = [v63 localizedDescription];
        *(_DWORD *)std::string buf = 134218498;
        *(void *)&uint8_t buf[4] = v59;
        __int16 v66 = 2048;
        uint64_t v67 = v60;
        __int16 v68 = 2112;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
        _os_log_error_impl(&dword_1920CB000, v23, OS_LOG_TYPE_ERROR, "ANE Batch: async_request %zu returned error %ld: %@", buf, 0x20u);
      }
    }
  }
  *(unsigned char *)(v10 + 16 * v7 + 12) = 0;
  std::condition_variable::notify_all((std::condition_variable *)(v6 + 264));
  std::mutex::unlock((std::mutex *)(v6 + 200));

  kdebug_trace();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned int v25 = [WeakRetained perfStats];
  __int16 v26 = v25;
  if (v25)
  {
    if (a2)
    {
      uint64_t v27 = *(void *)(*(void *)(a1 + 96) + 1240);
      if (v27)
      {
        uint64_t v28 = *(void *)(v27 + 1048);

        if (!v28) {
          goto LABEL_45;
        }
        uint64_t v29 = *(void **)(*(void *)(*(void *)(a1 + 96) + 1240) + 1048);
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
        __int16 v26 = [WeakRetained perfStats];
        uint64_t v30 = [v26 hwExecutionTime];
        uint64_t v31 = v30;
        uint64_t v32 = (uint64_t *)v29[2];
        unint64_t v33 = v29[3];
        if ((unint64_t)v32 >= v33)
        {
          uint64_t v35 = (uint64_t *)v29[1];
          uint64_t v36 = v32 - v35;
          if ((unint64_t)(v36 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v37 = v33 - (void)v35;
          unint64_t v38 = (uint64_t)(v33 - (void)v35) >> 2;
          if (v38 <= v36 + 1) {
            unint64_t v38 = v36 + 1;
          }
          BOOL v39 = v37 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v39) {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
            uint64_t v35 = (uint64_t *)v29[1];
            uint64_t v32 = (uint64_t *)v29[2];
          }
          else
          {
            uint64_t v41 = 0;
          }
          unint64_t v43 = (uint64_t *)(v40 + 8 * v36);
          unint64_t v44 = v40 + 8 * v41;
          *unint64_t v43 = v31;
          uint64_t v34 = v43 + 1;
          while (v32 != v35)
          {
            uint64_t v45 = *--v32;
            *--unint64_t v43 = v45;
          }
          v29[1] = v43;
          uint64_t v29[2] = v34;
          int v29[3] = v44;
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *uint64_t v32 = v30;
          uint64_t v34 = v32 + 1;
        }
        uint64_t v29[2] = v34;
      }
    }
  }

LABEL_45:
  id v46 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v46)
  {
    uint64_t v47 = v46;
    id v48 = objc_loadWeakRetained((id *)(a1 + 40));
    unint64_t v49 = [v48 perfStatsArray];
    if (v49)
    {
      id v50 = objc_loadWeakRetained((id *)(a1 + 40));
      uint64_t v51 = [v50 perfStatsArray];
      uint64_t v52 = [v51 count];

      if (v52)
      {
        *(unsigned char *)(*(void *)(a1 + 112) + 16) = a2;
        uint64_t v53 = *(void *)(*(void *)(*(void *)(a1 + 96) + 1240) + 1048);
        std::string::basic_string[abi:ne180100]<0>(buf, (char *)[*(id *)(a1 + 32) UTF8String]);
        uint64_t v54 = *(void *)(a1 + 112);
        if (*(char *)(v54 + 63) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v54 + 40), *(void *)(v54 + 48));
        }
        else {
          std::string __p = *(std::string *)(v54 + 40);
        }
        std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100]((void **)(v53 + 32), (long long *)buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v68) < 0) {
          operator delete(*(void **)buf);
        }
        id v55 = objc_loadWeakRetained((id *)(a1 + 40));
        uint64_t v56 = [v55 perfStatsArray];
        uint64_t v57 = [v56 objectAtIndexedSubscript:0];
        uint64_t v58 = [v57 stats];
        *(void *)std::string buf = [v58 ioSurface];
        Espresso::ANERuntimeEngine::compiler::write_iosurface((IOSurfaceRef *)buf, (uint64_t *)(*(void *)(a1 + 112) + 40));
      }
    }
    else
    {
    }
  }
}

void sub_192B9C934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::add_ane_eval_profiling_options(uint64_t a1, id *a2)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = *(void *)(a1 + 8)) == 0)
  {
    exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(void *)(v6 + 1240))
  {
    id v7 = *a2;
    uint64_t v8 = *(_DWORD **)(*(void *)(v6 + 1240) + 1048);
    if (v8)
    {
      uint64_t v9 = *v8 & 1 | (2 * ((*v8 >> 2) & 1)) & 0xFFFFFFFB | (4 * ((*v8 >> 1) & 1));
      uint64_t v20 = *MEMORY[0x1E4F4E198];
      uint64_t v10 = [NSNumber numberWithUnsignedInt:v9];
      v21[0] = v10;
      uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v20 count:1];

      unint64_t v12 = [*(id *)(a1 + 184) objectForKeyedSubscript:v7];
      [v12 addEntriesFromDictionary:v11];

      BOOL v15 = Espresso::espresso_os_log_subsystem(v13, v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v17 = **(_DWORD **)(*(void *)(v6 + 1240) + 1048);
        v19[0] = 67109120;
        v19[1] = v17;
        _os_log_debug_impl(&dword_1920CB000, v15, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::add_ane_eval_profiling_options] Add profiler option:%d", (uint8_t *)v19, 8u);
      }
    }
    else
    {
      long long v16 = [*(id *)(a1 + 184) objectForKeyedSubscript:v7];
      [v16 removeObjectForKey:*MEMORY[0x1E4F4E198]];
    }
  }
  nitro::nitro_function::nitro_function(v5);
}

void sub_192B9CC2C(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100](void **a1, long long *a2)
{
  id v4 = (char *)a1[1];
  id v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[48 * v9];
    *((void *)v14 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v14 = *a2;
    BOOL v15 = &v13[48 * v12];
    long long v16 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v16;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    uint64_t v8 = v14 + 48;
    int v17 = (char *)*a1;
    std::string::size_type v18 = (char *)a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v18 - 3);
        *((void *)v14 - 4) = *((void *)v18 - 4);
        *((_OWORD *)v14 - 3) = v19;
        *((void *)v18 - 5) = 0;
        *((void *)v18 - 4) = 0;
        *((void *)v18 - 6) = 0;
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 48;
        *((void *)v18 - 2) = 0;
        *((void *)v18 - 1) = 0;
        *((void *)v18 - 3) = 0;
        v18 -= 48;
      }
      while (v18 != v17);
      std::string::size_type v18 = (char *)*a1;
      uint64_t v21 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
      while ((char *)v21 != v18)
      {
        v21 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v21);
      }
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)id v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v8 = v4 + 48;
  }
  a1[1] = v8;
}

void Espresso::ANERuntimeEngine::compiler::write_iosurface(IOSurfaceRef *a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v2)
  {
    IOSurfaceLock(*a1, 0, 0);
    BaseAddress = IOSurfaceGetBaseAddress(*a1);
    size_t AllocSize = IOSurfaceGetAllocSize(*a1);
    if (*((char *)a2 + 23) >= 0) {
      long long v7 = a2;
    }
    else {
      long long v7 = (uint64_t *)*a2;
    }
    id v9 = [NSString stringWithUTF8String:v7];
    uint64_t v8 = [MEMORY[0x1E4F1C9B8] dataWithBytes:BaseAddress length:AllocSize];
    [v8 writeToFile:v9 atomically:1];
    IOSurfaceUnlock(*a1, 0, 0);
  }
}

void sub_192B9CF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::analysis_ane_multi_head::runtime_segment_combination_t::~runtime_segment_combination_t(Espresso::analysis_ane_multi_head::runtime_segment_combination_t *this)
{
  id v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  id v3 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void __destroy_helper_block_ea8_56c61_ZTSNSt3__110shared_ptrIN8Espresso16ANERuntimeEngine5batchEEE96c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE112c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[15];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  id v3 = (std::__shared_weak_count *)a1[13];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  id v4 = (std::__shared_weak_count *)a1[8];
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *__copy_helper_block_ea8_56c61_ZTSNSt3__110shared_ptrIN8Espresso16ANERuntimeEngine5batchEEE96c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE112c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[13];
  result[12] = a2[12];
  result[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[15];
  result[14] = a2[14];
  result[15] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<ANECompilerAnalyticsHandlerState>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<ANECompilerAnalyticsHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380620;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<ANECompilerAnalyticsHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_input_symbol_indices_for_procedure(uint64_t a1, void *a2)
{
  uint64_t v2 = std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), a2, (uint64_t)a2)[7];

  return v2;
}

uint64_t *Espresso::ANERuntimeEngine::procedure_io_symbol_mapper_t::get_output_symbol_indices_for_procedure(uint64_t a1, void *a2)
{
  uint64_t v2 = std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 144), a2, (uint64_t)a2)[7];

  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,void *>>>::operator()[abi:ne180100](char a1, char **a2)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a2[4]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

__CFString *get_error_string(NSError *a1)
{
  uint64_t v1 = [(NSError *)a1 localizedDescription];
  if (!v1) {
    uint64_t v1 = &stru_1EE39BDB0;
  }

  return v1;
}

void Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(uint64_t a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("procedure_id out of range: %lu >= %lu", a1, a2);
}

uint64_t ___ZL27get_precompiled_binary_pathP8NSStringS0__block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  get_precompiled_binary_path(NSString *,NSString *)::is_internal_build = result;
  return result;
}

uint64_t Espresso::ANERuntimeEngine::compiler::rebuild(Espresso::ANERuntimeEngine::compiler *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2
    || (uint64_t v3 = std::__shared_weak_count::lock(v2)) == 0
    || (uint64_t v4 = (const Espresso::net *)*((void *)this + 1)) == 0)
  {
    exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  for (uint64_t i = (void *)*((void *)v4 + 19); i; uint64_t i = (void *)*i)
  {
    long long v6 = (const void *)i[5];
    if (v6)
    {
      if (v7)
      {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v7, v4, v3);
        nitro::nitro_function::nitro_function(v3);
      }
    }
  }
  if (*((unsigned char *)this + 288) && *((void *)v4 + 99))
  {
    Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(this);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  nitro::nitro_function::nitro_function(v3);
  return v8;
}

void sub_192B9D3D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::compile_network_to_cache_url_identifier(Espresso::ANERuntimeEngine::compiler *this@<X0>, void *a2@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*((void *)this + 13) + 127)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("compile_model_to_hash: Only supported in the context of E5 Compiler.");
  }
  uint64_t v47 = 0;
  id v48 = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4
    || (v5 = std::__shared_weak_count::lock(v4), long long v6 = v5, (v48 = v5) == 0)
    || (uint64_t v7 = *((void *)this + 1), (v47 = v7) == 0))
  {
    exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v45 = v7;
  id v46 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(Espresso::ANERuntimeEngine::compiler *, uint64_t *))(*(void *)this + 88))(this, &v45);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (*((void *)this + 5) - *((void *)this + 4) != 120) {
    Espresso::throw_exception_selector<Espresso::generic_error>("compile_model_to_hash: Only expect a single segment");
  }
  if (Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(&v47))
  {
    uint64_t v30 = "compile_model_to_hash: Do not expect multihead multiproc to be true.";
    goto LABEL_32;
  }
  if (*((unsigned char *)this + 200))
  {
    uint64_t v30 = "compile_model_to_hash: Do not expect is_in_memory_model to be true.";
LABEL_32:
    Espresso::throw_exception_selector<Espresso::generic_error>(v30);
  }
  uint64_t v8 = objc_opt_new();
  [v8 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F4E0C0]];
  Espresso::ANERuntimeEngine::compiler::key_for_segment(this, 0, *((const Espresso::net_compiler_segment_based::segment_t **)this + 4));
  id v39 = (id)objc_claimAutoreleasedReturnValue();
  [*((id *)this + 23) setObject:v8 forKeyedSubscript:v39];
  if (*(char *)(v7 + 639) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v7 + 616), *(void *)(v7 + 624));
  }
  else {
    std::string v44 = *(std::string *)(v7 + 616);
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v9 = &v44;
  }
  else {
    id v9 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  id v37 = [NSString stringWithUTF8String:v9];
  objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:");
  unint64_t v38 = (Espresso *)objc_claimAutoreleasedReturnValue();
  unint64_t v11 = Espresso::espresso_os_log_subsystem(v38, v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v26 = [v37 UTF8String];
    std::string::size_type v27 = [v39 UTF8String];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v26;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v27;
    _os_log_debug_impl(&dword_1920CB000, v11, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::compile_network_to_cache_url_identifier] input net url=%s key=%s", (uint8_t *)&buf, 0x16u);
  }

  id v12 = *((id *)this + 20);
  uint64_t v42 = v7;
  unint64_t v43 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = get_original_url_if_exists(&v42, v12);
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  uint64_t v14 = [(Espresso *)v38 URLByDeletingLastPathComponent];
  BOOL v15 = [MEMORY[0x1E4F4E060] modelAtURLWithSourceURL:v13 sourceURL:v14 key:v39 cacheURLIdentifier:0];
  uint64_t v16 = [MEMORY[0x1E4F4E030] sharedConnection];
  int v17 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v16;

  std::string::size_type v18 = (void *)*((void *)this + 17);
  id v41 = 0;
  LOBYTE(v18) = [v18 compileModel:v15 options:v8 qos:Espresso::ANERuntimeEngine::compiler::get_qos((uint64_t)this) error:&v41];
  long long v19 = (NSError *)v41;
  long long v20 = v19;
  if ((v18 & 1) == 0)
  {
    uint64_t v31 = get_error_string(v19);
    uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, (char *)[v31 UTF8String]);
    uint64_t v32 = std::string::insert(&v40, 0, "ANERuntimeCompiler error: failed to compile ANE model. Error=");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v36, &buf);
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v21 = [v15 getCacheURLIdentifier];
  std::string v23 = v21;
  if (!v21) {
    Espresso::throw_exception_selector<Espresso::generic_error>("ANERuntimeCompiler: ANEF returned cacheURLIdentifier as nil.");
  }
  uint64_t v24 = Espresso::espresso_os_log_subsystem(v21, v22);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v35 = [v13 path];
    std::string::size_type v34 = [(std::runtime_error *)v35 UTF8String];
    std::string::size_type v28 = [(Espresso *)v23 UTF8String];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v28;
    _os_log_debug_impl(&dword_1920CB000, v24, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::compile_network_to_cache_url_identifier] input net url=%s cacheURLIdentifier=%s", (uint8_t *)&buf, 0x16u);
  }
  unsigned int v25 = v23;
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[(Espresso *)v25 UTF8String]);

  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }

  nitro::nitro_function::nitro_function(v6);
}

void sub_192B9D964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_8:

      if (a29 < 0) {
        operator delete(a24);
      }

      nitro::nitro_function::nitro_function(v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(a11);
  goto LABEL_8;
}

void Espresso::ANERuntimeEngine::compiler::~compiler(Espresso::ANERuntimeEngine::compiler *this, const char *a2)
{
  Espresso::ANERuntimeEngine::compiler::~compiler(this, a2);

  JUMPOUT(0x192FF16B0);
}

{
  NSObject *v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  std::__shared_weak_count *v9;
  int v10;
  int v11;
  void **v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  BOOL v15 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE33B0D0;
  uint64_t v3 = Espresso::espresso_os_log_subsystem(this, a2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v10 = *((unsigned __int8 *)this + 144);
    unint64_t v11 = [*((id *)this + 22) count];
    LODWORD(v12) = 67109376;
    HIDWORD(v12) = v10;
    uint64_t v13 = 1024;
    uint64_t v14 = v11;
    _os_log_debug_impl(&dword_1920CB000, v3, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::compiler::~compiler] Destroy loaded=%d loaded_keys_count=%d", (uint8_t *)&v12, 0xEu);
  }

  Espresso::ANERuntimeEngine::compiler::reset(this);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*((void **)this + 73));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*((void **)this + 70));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 528, *((char **)this + 67));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 504, *((char **)this + 64));
  std::__tree<std::string>::destroy((uint64_t)this + 480, *((char **)this + 61));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((void *)this + 58));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 432, *((void *)this + 55));
  uint64_t v4 = (void *)*((void *)this + 51);
  if (v4)
  {
    *((void *)this + 52) = v4;
    operator delete(v4);
  }
  id v5 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 344);
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::~__hash_table((uint64_t)this + 224);

  long long v6 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(void *)this = &unk_1EE35F3A0;
  uint64_t v8 = (void *)*((void *)this + 10);
  if (v8)
  {
    *((void *)this + 11) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  id v12 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v12);
  *(void *)this = &unk_1EE32A8C8;
  id v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_192B9DDA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *v2;
      std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v2[4]);
      operator delete(v2);
      uint64_t v2 = (char **)v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

NSURL *swap_for_devop_override_if_exists_and_not_precompiled(char *a1, NSURL *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = [NSString stringWithUTF8String:a1];
  id v5 = [v4 stringByDeletingLastPathComponent];
  std::string::basic_string[abi:ne180100]<0>(v44, ".espresso.net");
  std::string::basic_string[abi:ne180100]<0>(v42, a1);
  unint64_t v6 = v43;
  unsigned __int8 v7 = v43;
  uint64_t v8 = (void **)v42[0];
  if ((v43 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)v42[1];
  }
  else {
    uint64_t v8 = v42;
  }
  unint64_t v9 = v45;
  unint64_t v10 = (void **)v44[0];
  if ((v45 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)v44[1];
  }
  else {
    unint64_t v10 = v44;
  }
  unint64_t v11 = (unsigned __int8 *)v8 + v6;
  if (v6 && v9)
  {
    id v12 = v8;
    uint64_t v13 = (unsigned __int8 *)v8 + v6;
    do
    {
      if (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v10)
      {
        uint64_t v14 = 1;
        while (v9 != v14)
        {
          if ((unsigned __int8 *)((char *)v12 + v14) == v11) {
            goto LABEL_20;
          }
          int v15 = *((unsigned __int8 *)v12 + v14);
          int v16 = *((unsigned __int8 *)v10 + v14++);
          if (v15 != v16) {
            goto LABEL_11;
          }
        }
        uint64_t v13 = (unsigned __int8 *)v12;
      }
LABEL_11:
      id v12 = (void **)((char *)v12 + 1);
    }
    while (v12 != (void **)v11);
  }
  else
  {
    uint64_t v13 = (unsigned __int8 *)v8 + v6;
  }
LABEL_20:
  uint64_t v17 = v13 - (unsigned __int8 *)v8;
  if (v13 == v11 && v9 != 0) {
    uint64_t v17 = -1;
  }
  if (v17 != v6 - v9)
  {
    std::string v22 = v3;
    if ((v7 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  v41[0] = 0;
  v41[1] = 0;
  std::string v40 = v41;
  std::string::basic_string[abi:ne180100]<0>(v38, "json");
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  Espresso::load_jsfile(&v36, (uint64_t)&__p, v38, 0);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p);
  }
  uint64_t v19 = v36;
  if (!v36)
  {
    uint64_t v24 = v3;
    goto LABEL_50;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "properties");
  int v20 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v19 + 24))(v19, &__p);
  int v21 = v20;
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if (!v20) {
      goto LABEL_49;
    }
LABEL_41:
    std::string::basic_string[abi:ne180100]<0>(&__p, "properties");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v19 + 120))(&v31, v19, &__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    std::string __p = 0;
    std::string::size_type v34 = 0;
    uint64_t v35 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v31 + 32))(v31, &__p);
    unsigned int v25 = (long long *)__p;
    std::string::size_type v26 = v34;
    if (__p != v34)
    {
      do
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v31 + 112))(&v29);
        id v46 = v25;
        std::string::size_type v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v40, v25, (uint64_t)&std::piecewise_construct, &v46);
        std::string::size_type v28 = v27 + 7;
        if (*((char *)v27 + 79) < 0) {
          operator delete((void *)*v28);
        }
        *(_OWORD *)std::string::size_type v28 = v29;
        void v28[2] = v30;
        unsigned int v25 = (long long *)((char *)v25 + 24);
      }
      while (v25 != v26);
    }
    *(void *)&long long v29 = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    goto LABEL_49;
  }
  operator delete(__p);
  if (v21) {
    goto LABEL_41;
  }
LABEL_49:
  resolve_url_from_net_properties_and_path((uint64_t)&v40, v3, v5);
  uint64_t v24 = (NSURL *)objc_claimAutoreleasedReturnValue();
LABEL_50:
  std::string v22 = v24;
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v40, v41[0]);
  if ((v43 & 0x80) != 0) {
LABEL_33:
  }
    operator delete(v42[0]);
LABEL_34:
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }

  return v22;
}

void sub_192B9E1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  a9 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a31, a32);
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v42 - 81) < 0) {
    operator delete(*(void **)(v42 - 104));
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::standard_ane_cache_client::~standard_ane_cache_client(id *this)
{
  JUMPOUT(0x192FF16B0);
}

{
}

uint64_t anonymous namespace'::standard_ane_cache_client::purge_from_cache(id *this, NSURL *a2)
{
  uint64_t v4 = (void *)MEMORY[0x192FF2020]();
  id v5 = [MEMORY[0x1E4F4E060] modelAtURL:a2 key:@"com.apple.appleneuralengine._ANEModel.AllSegments"];
  [this[1] purgeCompiledModel:v5];

  return 0;
}

void sub_192B9E3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::standard_ane_cache_client::exists_in_cache(id *this, NSURL *a2, BOOL *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = objc_opt_respondsToSelector();
  if (v6)
  {
    uint64_t v8 = (void *)MEMORY[0x192FF2020]();
    unint64_t v9 = [MEMORY[0x1E4F4E060] modelAtURL:v5 key:*MEMORY[0x1E4F4E1A8]];
    unint64_t v10 = (Espresso *)[this[1] compiledModelExistsFor:v9];
    *a3 = (char)v10;
    id v12 = Espresso::espresso_os_log_subsystem(v10, v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      BOOL v16 = *a3;
      int v17 = 138412546;
      std::string::size_type v18 = v9;
      __int16 v19 = 1024;
      BOOL v20 = v16;
      _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "compiledModelExistsFor:ane_model=%@ exists=%D", (uint8_t *)&v17, 0x12u);
    }

    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v14 = Espresso::espresso_os_log_subsystem((Espresso *)v6, v7);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v17) = 0;
      _os_log_error_impl(&dword_1920CB000, v14, OS_LOG_TYPE_ERROR, "ANE model purge selector is not available", (uint8_t *)&v17, 2u);
    }

    uint64_t v13 = 0xFFFFFFFFLL;
  }

  return v13;
}

void sub_192B9E570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::forward_single_ane_segment(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  void (***v18)(std::vector<std::string> *__return_ptr);
  std::__shared_weak_count *v19;
  std::string *begin;
  std::vector<std::string>::pointer end;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t (***v26)(void);
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  id v41;
  void **p_begin;
  std::__shared_weak_count *v43;
  id v44;
  id v45;
  uint64_t qos;
  uint64_t v47;
  void *v48;
  Espresso *v49;
  const char *v50;
  NSObject *v51;
  std::string *v52;
  int v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  std::runtime_error *exception;
  uint64_t v63;
  const char *v64;
  id *v65;
  id *v66;
  id v67;
  dispatch_block_t v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  void v74[4];
  id v75;
  id v76;
  id v77;
  id v78[3];
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  void **v82;
  std::__shared_weak_count *v83;
  id location;
  std::vector<std::string> *v85;
  std::__shared_weak_count *v86;
  void block[4];
  id v88;
  uint64_t v89;
  uint64_t v90;
  std::string *v91;
  uint64_t v92;
  char *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  std::vector<std::string> __p[2];
  std::vector<std::string> v99;
  id v100[2];
  std::string *v101;
  std::__shared_weak_count *v102;
  char v103[4];
  int v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  std::vector<std::string> buf;
  std::vector<std::string> v110;
  std::vector<std::string> v111;
  uint64_t v112;

  BOOL v112 = *MEMORY[0x1E4F143B8];
  int v69 = a3;
  uint64_t v70 = a4;
  v103[0] = 1;
  uint64_t v105 = 0u;
  BOOL v106 = 0u;
  int v107 = 0u;
  uint64_t v108 = 0u;
  id v104 = 723714936;
  kdebug_trace();
  unint64_t v101 = 0;
  uint64_t v102 = 0;
  unsigned __int8 v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7 || (v102 = std::__shared_weak_count::lock(v7)) == 0 || (uint64_t v8 = *(std::string **)(a1 + 8), (v101 = v8) == 0))
  {
    exceptiofloat n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  uint64_t v9 = *(void *)(a1 + 392);
  if (v9)
  {
    if (*(void *)(v9 + 24) == 1)
    {
      unint64_t v10 = *(const Espresso::net_compiler_segment_based::segment_t **)(a1 + 32);
      goto LABEL_8;
    }
    uint64_t v64 = "Only supported for one-segment multi-head networks";
LABEL_100:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v64);
  }
  unint64_t v10 = *(const Espresso::net_compiler_segment_based::segment_t **)(a1 + 32);
  if (*(void *)(a1 + 40) - (void)v10 != 120)
  {
    uint64_t v64 = "Only supported for one-segment networks";
    goto LABEL_100;
  }
LABEL_8:
  unint64_t v11 = (uint64_t *)*((void *)v10 + 4);
  if (v11)
  {
    do
    {
      id v12 = (std::string *)(v11 + 2);
      __p[0].__begin_ = (std::vector<std::string>::pointer)(v11 + 2);
      uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v101[5].__r_.__value_.__r.__words[2], (unsigned __int8 *)v11 + 16, (long long **)__p);
      uint64_t v14 = (const void *)*((void *)v13 + 5);
      if (!v14
      {
        if (*((char *)v11 + 39) < 0) {
          id v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
        }
        __p[0].__begin_ = v12;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Unexpected null blob for name %s", __p);
      }
      BOOL v16 = (std::__shared_weak_count *)*((void *)v13 + 6);
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v15[45] != 1) {
          goto LABEL_94;
        }
        nitro::nitro_function::nitro_function(v16);
      }
      else if (v15[45] != 1)
      {
LABEL_94:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Only supported for batch=1");
      }
      unint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
    uint64_t v8 = v101;
  }
  if (*(void *)v10)
  {
    uint64_t v17 = *(void *)(*(void *)(v8[1].__r_.__value_.__l.__size_ + 16 * *(void *)v10) + 64);
    std::string::size_type v18 = *(void (****)(std::vector<std::string> *__return_ptr))(v17 + 8);
    __int16 v19 = *(std::__shared_weak_count **)(v17 + 16);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (**v18)(&buf);
    begifloat n = buf.__begin_;
    std::vector<int>::pointer end = buf.__end_;
    buf.__begin_[3].__r_.__value_.__l.__size_ = *(void *)(*a2 + 80);
    __p[0].__end_ = v8;
    __p[0].__end_cap_.__value_ = begin;
    __p[1].__begin_ = end;
    if (end) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&end->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(__p[1].__end_) = 0;
    if (*(void *)v10)
    {
      std::string v22 = 0;
      std::string v23 = 0;
      do
      {
        uint64_t v24 = (uint64_t)v101;
        if (v101[56].__r_.__value_.__s.__data_[8])
        {
          unsigned int v25 = std::string::compare((const std::string *)(*(void *)(v101[1].__r_.__value_.__l.__size_ + v22) + 40), "context_transfer");
          uint64_t v24 = (uint64_t)v101;
          if (v25)
          {
            std::string::size_type v26 = *(uint64_t (****)(void))(*(void *)(*(void *)(*(void *)(v101[1].__r_.__value_.__l.__size_
                                                                                         + v22)
                                                                             + 64)
                                                                 + 8)
                                                     + 8);
            std::string::size_type v27 = (**v26)(v26);
            JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)__p, v27);
            uint64_t v24 = (uint64_t)v101;
          }
        }
        (*(void (**)(void, std::vector<std::string> *, unint64_t))(**(void **)(*(void *)(v24 + 32) + v22)
                                                                                     + 8))(*(void *)(*(void *)(v24 + 32) + v22), &buf, v23++);
        v22 += 16;
      }
      while (v23 < *(void *)v10);
      begifloat n = buf.__begin_;
    }
    (*(void (**)(std::string *))(begin->__r_.__value_.__r.__words[0] + 16))(begin);
    (*((void (**)(std::vector<std::string>::pointer))buf.__begin_->__r_.__value_.__l.__data_ + 3))(buf.__begin_);
    JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)__p);
    if (buf.__end_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__end_);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  std::string::size_type v28 = *((void *)v10 + 1);
  memset(&v99, 0, sizeof(v99));
  memset(__p, 0, sizeof(__p));
  long long v29 = *(void *)(a1 + 392);
  if (v29)
  {
    Espresso::analysis_ane_multi_head::get_combo_for_coalesced_segment_given_bound_outputs((Espresso *)&buf, v29, *a2, 0, (uint64_t)v101);
    if (__p[0].__begin_)
    {
      __p[0].__end_ = __p[0].__begin_;
      operator delete(__p[0].__begin_);
    }
    __p[0] = buf;
    memset(&buf, 0, sizeof(buf));
    std::vector<std::string>::__vdeallocate(&__p[1]);
    __p[1] = v110;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::string>::__vdeallocate(&v99);
    unint64_t v99 = v111;
    memset(&v111, 0, sizeof(v111));
    uint64_t v85 = &v111;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    uint64_t v85 = &v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    if (buf.__begin_)
    {
      buf.__end_ = buf.__begin_;
      operator delete(buf.__begin_);
    }
    if (__p[0].__begin_ == __p[0].__end_)
    {
      std::string v44 = 0;
      uint64_t v41 = 0;
      goto LABEL_86;
    }
    uint64_t v30 = *(void *)(*(void *)(a1 + 392) + 8);
    uint64_t v31 = *(int **)(v30 + 40);
    uint64_t v32 = *(int **)(v30 + 48);
    while (v31 != v32)
    {
      long long v33 = *v31++;
      std::string::size_type v34 = *(void *)(*(void *)(a1 + 32) + 120 * v33 + 8);
      if (v28 <= v34) {
        std::string::size_type v28 = v34;
      }
    }
    uint64_t v35 = (void *)Espresso::ANERuntimeEngine::compiler::create_ane_request_for_runtime_segment_combination((uint64_t **)a1, (uint64_t)a2, &v101, (int **)__p, 0);
  }
  else
  {
    uint64_t v35 = (void *)Espresso::ANERuntimeEngine::compiler::create_ane_request(a1, (uint64_t)a2, &v101, 0, v10, 0);
  }
  id v37 = v35;
  unint64_t v38 = v36;
  v100[0] = v35;
  v100[1] = v36;
  char v39 = *(void *)(*a2 + 80);
  std::string v40 = (char *)operator new(0x38uLL);
  *((void *)v40 + 2) = 0;
  *((void *)v40 + 1) = 0;
  *(void *)std::string v40 = &unk_1EE380578;
  *(_OWORD *)(v40 + 24) = 0u;
  *(_OWORD *)(v40 + 40) = 0u;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 2, 1uLL, memory_order_relaxed);
  *((void *)v40 + 3) = v40 + 24;
  *((void *)v40 + 4) = v40;
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke;
  block[3] = &unk_1EE38E930;
  uint64_t v89 = a1;
  BOOL v90 = a1;
  int v91 = v8;
  unint64_t v92 = v39;
  int v93 = v40 + 24;
  unint64_t v94 = (std::__shared_weak_count *)v40;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 1, 1uLL, memory_order_relaxed);
  uint64_t v95 = (uint64_t)v101;
  uint64_t v96 = v102;
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v88 = v70;
  uint64_t v97 = v28;
  __int16 v68 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  uint64_t v41 = v38;
  ++*(void *)(a1 + 304);
  _ZNSt3__115allocate_sharedB8ne180100I32ANECompilerAnalyticsHandlerStateNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v85);
  p_begifloat n = (void **)&v85->__begin_;
  Espresso::ANERuntimeEngine::compiler::set_compiler_analytics_binary_path((void *)a1, (uint64_t)&v85[1].__end_cap_);
  uint64_t v67 = v37;
  Espresso::ANERuntimeEngine::compiler::add_ane_eval_profiling_options(a1, v100);
  objc_initWeak(&location, v41);
  v74[0] = MEMORY[0x1E4F143A8];
  v74[1] = 3321888768;
  v74[2] = ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke_133;
  v74[3] = &unk_1EE38E9A0;
  v78[1] = (id)a1;
  v78[2] = v40 + 24;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 1, 1uLL, memory_order_relaxed);
  uint64_t v79 = (std::__shared_weak_count *)v40;
  __int16 v80 = (uint64_t)v101;
  BOOL v81 = v102;
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v65 = v78;
  objc_copyWeak(v78, &location);
  unsigned __int8 v43 = v86;
  __int16 v82 = p_begin;
  uint64_t v83 = v86;
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v44 = v67;
  int v75 = v44;
  uint64_t v76 = v69;
  unsigned __int8 v45 = v68;
  uint64_t v77 = v45;
  [v41 setCompletionHandler:v74];
  if (*(unsigned char *)(a1 + 289))
  {
    if (*(_DWORD *)(a1 + 292))
    {
LABEL_53:
      uint64_t qos = Espresso::ANERuntimeEngine::compiler::get_qos(a1);
      goto LABEL_56;
    }
  }
  else if (!*(unsigned char *)(*(void *)(a1 + 104) + 139))
  {
    goto LABEL_53;
  }
  uint64_t qos = objc_msgSend(MEMORY[0x1E4F4E080], "aneRealTimeTaskQoS", v78);
LABEL_56:
  uint64_t v47 = qos;
  id v48 = objc_msgSend(*(id *)(a1 + 184), "objectForKeyedSubscript:", v44, v65);
  unint64_t v49 = (Espresso *)kdebug_trace();
  if (*(unsigned char *)(a1 + 296))
  {
    uint64_t v51 = Espresso::espresso_os_log_subsystem(v49, v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
    {
      uint64_t v52 = (std::string *)((char *)v101 + 592);
      if (v101[25].__r_.__value_.__s.__data_[15] < 0) {
        uint64_t v52 = (std::string *)v52->__r_.__value_.__r.__words[0];
      }
      uint64_t v53 = *(unsigned __int8 *)(a1 + 200);
      LODWORD(buf.__begin_) = 136315650;
      *(std::vector<std::string>::pointer *)((char *)&buf.__begin_ + 4) = v52;
      WORD2(buf.__end_) = 1024;
      *(_DWORD *)((char *)&buf.__end_ + 6) = v47;
      WORD1(buf.__end_cap_.__value_) = 1024;
      HIDWORD(buf.__end_cap_.__value_) = v53;
      _os_log_impl(&dword_1920CB000, v51, OS_LOG_TYPE_INFO, "[forward_single_ane_segment] ane_evaluate: net=%s qos=%d is_in_memory_model=%d", (uint8_t *)&buf, 0x18u);
    }
  }
  uint64_t v54 = *(void **)(a1 + 192);
  if (*(unsigned char *)(a1 + 200))
  {
    id v55 = [v54 objectForKeyedSubscript:v44];
    uint64_t v56 = v55;
    if (!v55)
    {
      buf.__begin_ = (std::vector<std::string>::pointer)[v44 UTF8String];
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", &buf);
    }
    uint64_t v73 = 0;
    uint64_t v57 = [v55 evaluateWithQoS:v47 options:v48 request:v41 error:&v73];
    uint64_t v58 = v73;

    goto LABEL_72;
  }
  unint64_t v59 = [v54 objectForKeyedSubscript:v44];
  if (!v59)
  {
    buf.__begin_ = (std::vector<std::string>::pointer)[v44 UTF8String];
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find model for key %s", &buf);
  }
  if (!*(unsigned char *)(a1 + 289))
  {
    if (!*(unsigned char *)(*(void *)(a1 + 104) + 139)) {
      goto LABEL_68;
    }
LABEL_71:
    uint64_t v61 = *(void **)(a1 + 136);
    uint64_t v72 = 0;
    uint64_t v57 = [v61 evaluateRealTimeWithModel:v59 options:v48 request:v41 error:&v72];
    uint64_t v58 = v72;

    goto LABEL_72;
  }
  if (!*(_DWORD *)(a1 + 292)) {
    goto LABEL_71;
  }
LABEL_68:
  uint64_t v60 = *(void **)(a1 + 136);
  uint64_t v71 = 0;
  uint64_t v57 = [v60 evaluateWithModel:v59 options:v48 request:v41 qos:Espresso::ANERuntimeEngine::compiler::get_qos(a1) error:&v71];
  uint64_t v58 = v71;

LABEL_72:
  if ((v57 & 1) == 0)
  {
    id v63 = [v58 localizedDescription];
    Espresso::throw_exception_selector<Espresso::invalid_state_error,NSString * {__strong}>(v63);
  }

  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
  objc_destroyWeak(v66);
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  objc_destroyWeak(&location);

  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }

  if (v96) {
    nitro::nitro_function::nitro_function(v96);
  }
  if (v94) {
    nitro::nitro_function::nitro_function(v94);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40);
LABEL_86:
  buf.__begin_ = (std::vector<std::string>::pointer)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__begin_ = (std::vector<std::string>::pointer)&__p[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }

  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v103);
}

void sub_192B9F084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,id a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,void *a59,uint64_t a60,std::__shared_weak_count *a61,char a62)
{
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  objc_destroyWeak(location);
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  objc_destroyWeak(&a32);

  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }

  if (a47) {
    nitro::nitro_function::nitro_function(a47);
  }
  if (a45) {
    nitro::nitro_function::nitro_function(a45);
  }
  nitro::nitro_function::nitro_function(v63);
  uint64_t v67 = a58;
  __int16 v68 = a59;
  Espresso::analysis_ane_multi_head::runtime_segment_combination_t::~runtime_segment_combination_t((Espresso::analysis_ane_multi_head::runtime_segment_combination_t *)&a49);

  if (a61) {
    nitro::nitro_function::nitro_function(a61);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a62);

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  kdebug_trace();
  uint64_t v3 = a1[9];
  if (!*(unsigned char *)(v3 + 16))
  {
    if ([*(id *)(v3 + 24) code] != 5) {
      return (*(uint64_t (**)(void))(a1[4] + 16))();
    }
    std::string::size_type v18 = Espresso::espresso_os_log_subsystem((Espresso *)5, v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = a1[11];
      BOOL v20 = (void *)(v19 + 592);
      if (*(char *)(v19 + 615) < 0) {
        BOOL v20 = (void *)*v20;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v24 = v20;
      _os_log_error_impl(&dword_1920CB000, v18, OS_LOG_TYPE_ERROR, "[Espresso::overflow_error] %s", buf, 0xCu);
    }

    if (*(unsigned char *)(*(void *)(v2 + 104) + 140)) {
      return (*(uint64_t (**)(void))(a1[4] + 16))();
    }
  }
  uint64_t v4 = a1[11];
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *(void *)(v4 + 40) - v5;
  unint64_t v7 = a1[13];
  if (v7 < v6 >> 4)
  {
    (***(void (****)(void **__return_ptr))(*(void *)(*(void *)(v5 + 16 * v7) + 64) + 8))(&v21);
    unint64_t v8 = v6 >> 4;
    uint64_t v9 = v21;
    unint64_t v10 = v22;
    v21[10] = a1[8];
    *(void *)&v24[4] = a1[7];
    unsigned int v25 = v9;
    std::string::size_type v26 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v27 = 0;
    unint64_t v11 = a1[13];
    if (v11 < v8)
    {
      uint64_t v12 = 16 * v11;
      do
      {
        uint64_t v13 = a1[11];
        if (*(unsigned char *)(v13 + 1352)
          && std::string::compare((const std::string *)(*(void *)(*(void *)(v13 + 32) + v12) + 40), "context_transfer"))
        {
          uint64_t v14 = *(uint64_t (****)(void))(*(void *)(*(void *)(*(void *)(*(void *)(a1[11] + 32) + v12)
                                                                           + 64)
                                                               + 8)
                                                   + 8);
          int v15 = (**v14)(v14);
          JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)buf, v15);
        }
        (*(void (**)(void, void **, unint64_t))(**(void **)(*(void *)(v4 + 32) + v12) + 8))(*(void *)(*(void *)(v4 + 32) + v12), &v21, v11++);
        v12 += 16;
      }
      while (v8 != v11);
      uint64_t v9 = v21;
    }
    (*(void (**)(void *))(*v9 + 16))(v9);
    (*(void (**)(void *))(*v21 + 24))(v21);
    JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)buf);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
  }
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

void sub_192B9F580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(*(void *)(v11 + 32) + 16))();
    __cxa_end_catch();
    JUMPOUT(0x192B9F500);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso16ANERuntimeEngine8compiler26forward_single_ane_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbP7NSErrorE_block_invoke_133(uint64_t a1, int a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 72);
  *(unsigned char *)(v7 + 16) = a2;
  objc_storeStrong((id *)(v7 + 24), a3);
  if (a2)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 88) + 1240);
    if (v8)
    {
      if (*(void *)(v8 + 1048))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
        unint64_t v10 = [WeakRetained perfStats];

        if (v10)
        {
          uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 88) + 1240) + 1048);
          id v12 = objc_loadWeakRetained((id *)(a1 + 56));
          uint64_t v13 = [v12 perfStats];
          uint64_t v14 = [v13 hwExecutionTime];
          uint64_t v15 = v14;
          BOOL v16 = (uint64_t *)v11[2];
          unint64_t v17 = v11[3];
          if ((unint64_t)v16 >= v17)
          {
            uint64_t v19 = (uint64_t *)v11[1];
            uint64_t v20 = v16 - v19;
            if ((unint64_t)(v20 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v21 = v17 - (void)v19;
            unint64_t v22 = (uint64_t)(v17 - (void)v19) >> 2;
            if (v22 <= v20 + 1) {
              unint64_t v22 = v20 + 1;
            }
            BOOL v23 = v21 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v23) {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
              uint64_t v19 = (uint64_t *)v11[1];
              BOOL v16 = (uint64_t *)v11[2];
            }
            else
            {
              uint64_t v25 = 0;
            }
            std::string::size_type v26 = (uint64_t *)(v24 + 8 * v20);
            unint64_t v27 = v24 + 8 * v25;
            *std::string::size_type v26 = v15;
            std::string::size_type v18 = v26 + 1;
            while (v16 != v19)
            {
              uint64_t v28 = *--v16;
              *--std::string::size_type v26 = v28;
            }
            v11[1] = v26;
            void v11[2] = v18;
            v11[3] = v27;
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *BOOL v16 = v14;
            std::string::size_type v18 = v16 + 1;
          }
          void v11[2] = v18;
        }
        id v29 = objc_loadWeakRetained((id *)(a1 + 56));
        uint64_t v30 = [v29 perfStatsArray];
        if (v30)
        {
          id v31 = objc_loadWeakRetained((id *)(a1 + 56));
          uint64_t v32 = [v31 perfStatsArray];
          uint64_t v33 = [v32 count];

          if (v33)
          {
            *(unsigned char *)(*(void *)(a1 + 104) + 16) = a2;
            uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 88) + 1240) + 1048);
            std::string::basic_string[abi:ne180100]<0>(v40, (char *)[*(id *)(a1 + 32) UTF8String]);
            uint64_t v35 = *(void *)(a1 + 104);
            if (*(char *)(v35 + 63) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v35 + 40), *(void *)(v35 + 48));
            }
            else {
              std::string __p = *(std::string *)(v35 + 40);
            }
            std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::push_back[abi:ne180100]((void **)(v34 + 32), (long long *)v40);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v41 < 0) {
              operator delete(v40[0]);
            }
            id v36 = objc_loadWeakRetained((id *)(a1 + 56));
            id v37 = [v36 perfStatsArray];
            unint64_t v38 = [v37 objectAtIndexedSubscript:0];
            char v39 = [v38 stats];
            v40[0] = (void *)[v39 ioSurface];
            Espresso::ANERuntimeEngine::compiler::write_iosurface((IOSurfaceRef *)v40, (uint64_t *)(*(void *)(a1 + 104) + 40));
          }
        }
        else
        {
        }
      }
    }
  }
  dispatch_async(*(dispatch_queue_t *)(a1 + 40), *(dispatch_block_t *)(a1 + 48));
}

void sub_192B9F8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,NSString * {__strong}>(uint64_t a1)
{
}

void __destroy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE104c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[12];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *__copy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE104c60_ZTSNSt3__110shared_ptrI32ANECompilerAnalyticsHandlerStateEE(void *result, void *a2)
{
  uint64_t v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[12];
  result[11] = a2[11];
  result[12] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[14];
  result[13] = a2[13];
  result[14] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void *__copy_helper_block_ea8_72c53_ZTSNSt3__110shared_ptrI25ANECompletionHandlerStateEE88c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(void *result, void *a2)
{
  uint64_t v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[12];
  result[11] = a2[11];
  result[12] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<ANECompletionHandlerState>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<ANECompletionHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380578;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<ANECompletionHandlerState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_192B9FDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_192B9FEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::context::is_valid_for_submit(Espresso *a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 == 16)
  {
    unsigned int v4 = (***((uint64_t (****)(void))a1 + 1))(*((void *)a1 + 1));
    uint64_t v5 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*v2 + 528), v4);
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = (const void *)v5[3];
      uint64_t v8 = (std::__shared_weak_count *)v6[4];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v7
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v14 = 0;
        if (!v8) {
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      unint64_t v10 = v9;
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = v8;
LABEL_13:
        nitro::nitro_function::nitro_function(v8);
        uint64_t v14 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v14 = 0;
LABEL_16:
    int v15 = (***((uint64_t (****)(void))a1 + 1))(*((void *)a1 + 1));
    uint64_t v16 = *v2;
    std::string::basic_string[abi:ne180100]<0>(&v49, "override_valid_for_submit");
    std::string::basic_string[abi:ne180100]<0>(__p, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v16 + 472, (uint64_t)&v49, (uint64_t)__p, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v19 = buf.__r_.__value_.__l.__size_ == 1 && *buf.__r_.__value_.__l.__data_ == 49;
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v19 = SHIBYTE(buf.__r_.__value_.__r.__words[2]) == 1 && buf.__r_.__value_.__s.__data_[0] == 49;
    }
    if (v48 < 0) {
      operator delete(__p[0]);
    }
    if (v51 < 0)
    {
      operator delete(v49);
      if (v19) {
        goto LABEL_28;
      }
    }
    else if (v19)
    {
LABEL_28:
      uint64_t v13 = 1;
LABEL_72:
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      return v13;
    }
    if (!v10)
    {
      unint64_t v24 = Espresso::espresso_os_log_subsystem(v17, v18);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, "is_valid_for_submit: Can't use submit, only one segment supported", (uint8_t *)&buf, 2u);
      }

      uint64_t v13 = 0;
      goto LABEL_72;
    }
    Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(&v49, *v2);
    if (v49)
    {
      if (*((void *)v49 + 3) != 1)
      {
        unint64_t v22 = Espresso::espresso_os_log_subsystem(v20, v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          BOOL v23 = "is_valid_for_submit: Can't use submit, only one multi-head segment supported";
LABEL_66:
          std::string v40 = v22;
          uint32_t v41 = 2;
LABEL_67:
          _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, v23, (uint8_t *)&buf, v41);
          goto LABEL_68;
        }
        goto LABEL_68;
      }
    }
    else if (v10[5] - v10[4] != 120)
    {
      unint64_t v22 = Espresso::espresso_os_log_subsystem(v20, v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        BOOL v23 = "is_valid_for_submit: Can't use submit, only one segment supported";
        goto LABEL_66;
      }
LABEL_68:

      goto LABEL_69;
    }
    uint64_t v25 = (void *)*v2;
    uint64_t v26 = *(void *)(*v2 + 32);
    if (*(void *)(*v2 + 40) == v26 || *(_DWORD *)(*(void *)v26 + 8) == v15)
    {
      std::string::size_type v27 = v25[80];
      uint64_t v28 = v25[81];
      if (v27 == v28)
      {
LABEL_46:
        id v31 = (unsigned __int8 *)v25[32];
        uint64_t v32 = (unsigned __int8 *)(v25 + 33);
        if (v31 == (unsigned __int8 *)(v25 + 33))
        {
          uint64_t v13 = 1;
LABEL_70:
          if (v50) {
            nitro::nitro_function::nitro_function(v50);
          }
          goto LABEL_72;
        }
        uint64_t v13 = 1;
        while (1)
        {
          uint64_t v33 = *v2 + 136;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v31 + 32);
          uint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, v31 + 32, (long long **)&buf);
          int v35 = (*(uint64_t (**)(void))(**((void **)v34 + 5) + 24))(*((void *)v34 + 5));
          BOOL v36 = (v35 - 50000) < 4 || v35 == 20000;
          if (v36 || v35 == 90000) {
            break;
          }
          unint64_t v38 = (unsigned __int8 *)*((void *)v31 + 1);
          if (v38)
          {
            do
            {
              char v39 = v38;
              unint64_t v38 = *(unsigned __int8 **)v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              char v39 = (unsigned __int8 *)*((void *)v31 + 2);
              BOOL v36 = *(void *)v39 == (void)v31;
              id v31 = v39;
            }
            while (!v36);
          }
          id v31 = v39;
          if (v39 == v32) {
            goto LABEL_70;
          }
        }
LABEL_69:
        uint64_t v13 = 0;
        goto LABEL_70;
      }
      while (1)
      {
        id v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(*v2 + 136), (unsigned __int8 *)v27);
        if (v29)
        {
          if (*(Espresso **)(*((void *)v29 + 5) + 72) != a1) {
            break;
          }
        }
        v27 += 24;
        if (v27 == v28)
        {
          uint64_t v25 = (void *)*v2;
          goto LABEL_46;
        }
      }
      unint64_t v22 = Espresso::espresso_os_log_subsystem((Espresso *)v29, v30);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        std::string::size_type v43 = v27;
        if (*(char *)(v27 + 23) < 0) {
          std::string::size_type v43 = *(void *)v27;
        }
        uint64_t v44 = *v2 + 136;
        __p[0] = (void *)v27;
        unsigned __int8 v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, (unsigned __int8 *)v27, (long long **)__p);
        int v46 = (*(uint64_t (**)(void))(**((void **)v45 + 5) + 24))(*((void *)v45 + 5));
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v43;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v15;
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = v46;
        BOOL v23 = "is_valid_for_submit: Can't use ANE submit, input '%s' not on %d, but %d";
        std::string v40 = v22;
        uint32_t v41 = 24;
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v22 = Espresso::espresso_os_log_subsystem(v20, v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        BOOL v23 = "is_valid_for_submit: Can't use ANE submit, network should start on ANE";
        goto LABEL_66;
      }
    }
    goto LABEL_68;
  }
  id v12 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "is_valid_for_submit: Can't use ANE submit, only one network supported", (uint8_t *)&buf, 2u);
  }

  return 0;
}

void sub_192BA04A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::context::set_platform_specific_option(Espresso::ANERuntimeEngine::context *this, const char *__s1, int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!strncmp(__s1, "enable_overflow_error", 0x100uLL))
  {
    *((unsigned char *)this + 140) = a3 != 0;
    return 1;
  }
  if (!strncmp(__s1, "compiler_nocache", 0x100uLL))
  {
    *((unsigned char *)this + 138) = a3 != 0;
    return 1;
  }
  if (!strncmp(__s1, "is_direct_path", 0x100uLL))
  {
    *((unsigned char *)this + 139) = a3 != 0;
    return 1;
  }
  if (!strncmp(__s1, "force_use_iofences", 0x100uLL))
  {
    *((unsigned char *)this + 141) = a3 != 0;
    return 1;
  }
  id v6 = (Espresso *)strncmp(__s1, "ane_surface_alias", 0x100uLL);
  if (!v6)
  {
    *((_DWORD *)this + 36) = a3;
    return 1;
  }
  uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315138;
    uint64_t v11 = __s1;
    _os_log_debug_impl(&dword_1920CB000, v8, OS_LOG_TYPE_DEBUG, "option %s does not exist in ANERuntime Engine", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384088;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::ANERuntimeEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);

  JUMPOUT(0x192FF16B0);
}

void *Espresso::ANERuntimeEngine::context::get_device_model_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "ANE");
}

void Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::ANERuntimeEngine::batch *this, Espresso::net *a2)
{
  BOOL is_fallback_gpu = Espresso::net::is_fallback_gpu(a2);
  *((unsigned char *)this + 96) = is_fallback_gpu;
  *((void *)this + 4) = a2;
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 1352);
  if (!is_fallback_gpu)
  {
    uint64_t v5 = (void *)*((void *)a2 + 80);
    id v6 = (void *)*((void *)a2 + 81);
    if (v5 != v6)
    {
      char v7 = is_fallback_gpu;
      uint64_t v8 = (char *)a2 + 184;
      uint64_t v9 = (char *)a2 + 192;
      do
      {
        int v10 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v8, v5);
        if (v9 != v10)
        {
          v7 |= *((_DWORD *)v10 + 18) * *((_DWORD *)v10 + 17) > 1;
          *((unsigned char *)this + 96) = v7;
        }
        if (v7) {
          break;
        }
        char v7 = 0;
        v5 += 3;
      }
      while (v5 != v6);
    }
  }
  if (Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::onceToken != -1) {
    dispatch_once(&Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::onceToken, &__block_literal_global_199);
  }
  if (Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::override_use_iofence == 1)
  {
    int v11 = Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::use_iofence_from_defaults;
    *((unsigned char *)this + 96) = Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::use_iofence_from_defaults;
    if (!v11) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 96))
  {
    return;
  }
  unint64_t v12 = *((void *)this + 18);

  std::vector<Espresso::ANERuntimeEngine::async_request_status>::reserve((char **)this + 19, v12);
}

void std::vector<Espresso::ANERuntimeEngine::async_request_status>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (a1[2] - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = a1[1] - *a1;
    unsigned int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
    uint64_t v5 = &v4[v3];
    char v7 = &v4[16 * v6];
    uint64_t v9 = *a1;
    uint64_t v8 = a1[1];
    int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 2);
        v8 -= 16;
        uint64_t v12 = *(void *)(v8 + 5);
        *((void *)v10 - 2) = v11;
        v10 -= 16;
        *(void *)(v10 + 5) = v12;
      }
      while (v8 != v9);
      uint64_t v8 = *a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void ___ZN8Espresso16ANERuntimeEngine5batch17setup_for_networkERNS_3netE_block_invoke()
{
  v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v3 = [v0 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v1 = [v3 objectForKeyedSubscript:@"espresso.use_iofences"];
  uint64_t v2 = v1;
  if (v1)
  {
    Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::override_use_iofence = 1;
    Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::use_iofence_from_defaults = [v1 BOOLValue];
  }
}

void sub_192BA0A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::batch::sync_point(Espresso::ANERuntimeEngine::batch *this)
{
  uint64_t result = *((void *)this + 15);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  if (*((unsigned char *)this + 96))
  {
    id v3 = *(uint64_t (**)(Espresso::ANERuntimeEngine::batch *))(*(void *)this + 24);
    return v3(this);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_62@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383EC8;
  Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::mix_sequence_repeat_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE33A558;
  v6[39] = &unk_1EE33A6B8;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA0C24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 496) || *(unsigned char *)(a1 + 497)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 288), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_non_maximum_suppression_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 544) || *(unsigned char *)(a1 + 545)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 336), a3, a4, a5);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383F38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x238uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE383528;
  uint64_t v9 = Espresso::ANECompilerEngine::mix_tile_kernel::mix_tile_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &unk_1EE3347F8;
  v8[41] = &unk_1EE334958;
  *((unsigned char *)v8 + 560) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192BA104C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANERuntimeEngine::mix_tile_kernel *this)
{
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_tile_kernel *)((char *)this - 304);
  *((void *)this - 38) = &unk_1EE340A40;
  *(void *)this = &unk_1EE340BA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_tile_kernel *)((char *)this - 304);
  *((void *)this - 38) = &unk_1EE340A40;
  *(void *)this = &unk_1EE340BA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void Espresso::ANERuntimeEngine::mix_tile_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 512) || *(unsigned char *)(a1 + 536)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 304), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANERuntimeEngine::mix_tile_kernel *this)
{
  *(void *)this = &unk_1EE340A40;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_tile_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE340BA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE340A40;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_tile_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE340BA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383528;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x218uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383DE8;
  Espresso::ANECompilerEngine::space_to_depth_kernel::space_to_depth_kernel((uint64_t)(v6 + 3), a1, *(void *)a2, *(_DWORD *)(a2 + 8));
  v6[3] = &unk_1EE339D58;
  char v6[40] = &unk_1EE339EB8;
  *((unsigned char *)v6 + 529) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA1420(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(Espresso::ANERuntimeEngine::mix_space_to_depth_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_space_to_depth_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_space_to_depth_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_space_to_depth_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 504) || *(unsigned char *)(a1 + 505)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 296), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(Espresso::ANERuntimeEngine::mix_space_to_depth_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_space_to_depth_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_space_to_depth_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383560;
  Espresso::ANECompilerEngine::plane_rw_kernel::plane_rw_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE3349F8;
  v6[39] = &unk_1EE334B58;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA16C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::plane_rw_kernel::~plane_rw_kernel(Espresso::ANERuntimeEngine::plane_rw_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::plane_rw_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::plane_rw_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::plane_rw_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 496) || *(unsigned char *)(a1 + 497)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 288), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::plane_rw_kernel::~plane_rw_kernel(Espresso::ANERuntimeEngine::plane_rw_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::plane_rw_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::plane_rw_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::plane_rw_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383560;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383950;
  Espresso::ANECompilerEngine::mix_stack_nd_kernel::mix_stack_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE337090;
  v6[39] = &unk_1EE3371F0;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA1970(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(Espresso::ANERuntimeEngine::mix_stack_nd_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_stack_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_stack_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_stack_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 496) || *(unsigned char *)(a1 + 497)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 288), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(Espresso::ANERuntimeEngine::mix_stack_nd_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_stack_nd_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_stack_nd_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_stack_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383950;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x218uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383F00;
  Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::mix_furthest_point_sampling_kernel((uint64_t)(v6 + 3), a1, *(void *)a2, *(_DWORD *)(a2 + 8));
  v6[3] = &unk_1EE33A758;
  char v6[40] = &unk_1EE33A8B8;
  *((unsigned char *)v6 + 529) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA1C1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 504) || *(unsigned char *)(a1 + 505)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 296), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383F00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_squeeze_kernel::~mix_squeeze_kernel(Espresso::ANERuntimeEngine::mix_squeeze_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_squeeze_kernel *)((char *)this - 424);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_squeeze_kernel *)((char *)this - 424);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_squeeze_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 632) || *(unsigned char *)(a1 + 633)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 424), a3, a4, a5);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3838A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3838A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(Espresso::ANERuntimeEngine::mix_expand_dims_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_expand_dims_kernel *)((char *)this - 416);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_expand_dims_kernel *)((char *)this - 416);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_expand_dims_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 624) || *(unsigned char *)(a1 + 625)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 416), a3, a4, a5);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(uint64_t *a1@<X1>, __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383CD0;
  Espresso::ANECompilerEngine::mix_batch_matmul_kernel::mix_batch_matmul_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE339288;
  v6[39] = &unk_1EE3393E8;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA21A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(Espresso::ANERuntimeEngine::mix_batch_matmul_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_batch_matmul_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_batch_matmul_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_batch_matmul_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 496) || *(unsigned char *)(a1 + 497)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 288), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(Espresso::ANERuntimeEngine::mix_batch_matmul_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_batch_matmul_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_batch_matmul_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANERuntimeEngine::mix_inner_product_kernel *this)
{
}

{
  Espresso::generic_inner_product_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_inner_product_kernel *)((char *)this - 544);
  *((void *)this - 68) = &unk_1EE344278;
  *(void *)this = &unk_1EE3444A8;
  id v3 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

void Espresso::ANERuntimeEngine::mix_inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*(unsigned char *)(a1 + 752) || *(unsigned char *)(a1 + 842)) {
    Espresso::ANECompilerEngine::inner_product_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383D78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x2B0uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383918;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::mix_deconv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE336E08;
  v6[56] = &unk_1EE336FF0;
  *((unsigned char *)v6 + 680) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA265C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANERuntimeEngine::mix_deconv3d_kernel *this)
{
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE3438B8;
  *(void *)this = &unk_1EE343AA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_conv3d_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE3438B8;
  *(void *)this = &unk_1EE343AA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

void Espresso::ANERuntimeEngine::mix_deconv3d_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, const std::string::value_type **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((unsigned char *)a1 + 632) || *((unsigned char *)a1 + 656)) {
    Espresso::ANECompilerEngine::mix_deconv3d_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  }
}

void Espresso::ANERuntimeEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANERuntimeEngine::mix_deconv3d_kernel *this)
{
  *(void *)this = &unk_1EE3438B8;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_deconv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE343AA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3438B8;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_deconv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE343AA0;
  id v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_deconv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x218uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383D08;
  Espresso::ANECompilerEngine::mix_l2_normalize_kernel::mix_l2_normalize_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE339488;
  char v6[40] = &unk_1EE3395E8;
  *((unsigned char *)v6 + 529) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA2A1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(Espresso::ANERuntimeEngine::mix_l2_normalize_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_l2_normalize_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_l2_normalize_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_l2_normalize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 504) || *(unsigned char *)(a1 + 505)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 296), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(Espresso::ANERuntimeEngine::mix_l2_normalize_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_l2_normalize_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_l2_normalize_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383D08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383800;
  Espresso::ANECompilerEngine::flatten_kernel::flatten_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE336408;
  v6[39] = &unk_1EE336568;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA2CC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_flatten_kernel::~mix_flatten_kernel(Espresso::ANERuntimeEngine::mix_flatten_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_flatten_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_flatten_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_flatten_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 496) || *(unsigned char *)(a1 + 497)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 288), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_flatten_kernel::~mix_flatten_kernel(Espresso::ANERuntimeEngine::mix_flatten_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_flatten_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_flatten_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383800;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x230uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE3834B8;
  Espresso::ANECompilerEngine::crop_kernel::crop_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE3343B8;
  char v6[40] = &unk_1EE334518;
  *((unsigned char *)v6 + 552) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA2F6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANERuntimeEngine::mix_crop_kernel *this)
{
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_crop_kernel *)((char *)this - 296);
  *((void *)this - 37) = &unk_1EE33E8E0;
  *(void *)this = &unk_1EE33EA40;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_crop_kernel *)((char *)this - 296);
  *((void *)this - 37) = &unk_1EE33E8E0;
  *(void *)this = &unk_1EE33EA40;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void Espresso::ANERuntimeEngine::mix_crop_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 504) || *(unsigned char *)(a1 + 528)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 296), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANERuntimeEngine::mix_crop_kernel *this)
{
  *(void *)this = &unk_1EE33E8E0;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_crop_kernel *)((char *)this + 296);
  *((void *)this + 37) = &unk_1EE33EA40;
  id v3 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE33E8E0;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_crop_kernel *)((char *)this + 296);
  *((void *)this + 37) = &unk_1EE33EA40;
  id v3 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3834B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3834B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x2B0uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE3836B0;
  Espresso::ANECompilerEngine::mix_conv3d_kernel::mix_conv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE335650;
  v6[56] = &unk_1EE335838;
  *((unsigned char *)v6 + 680) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA333C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANERuntimeEngine::mix_conv3d_kernel *this)
{
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE341EF0;
  *(void *)this = &unk_1EE3420D8;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_conv3d_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE341EF0;
  *(void *)this = &unk_1EE3420D8;
  id v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

void Espresso::ANERuntimeEngine::mix_conv3d_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, const std::string::value_type **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (*((unsigned char *)a1 + 632) || *((unsigned char *)a1 + 656)) {
    Espresso::ANECompilerEngine::mix_conv3d_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  }
}

void Espresso::ANERuntimeEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANERuntimeEngine::mix_conv3d_kernel *this)
{
  *(void *)this = &unk_1EE341EF0;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_conv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE3420D8;
  id v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341EF0;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_conv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE3420D8;
  id v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_conv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3836B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3836B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x248uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383720;
  Espresso::ANECompilerEngine::mix_pool3d_kernel::mix_pool3d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE335AD8;
  v6[46] = &unk_1EE335C38;
  *((unsigned char *)v6 + 577) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA36FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_pool3d_kernel::~mix_pool3d_kernel(Espresso::ANERuntimeEngine::mix_pool3d_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_pool3d_kernel *)((char *)this - 344);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_pool3d_kernel *)((char *)this - 344);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_pool3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 552) || *(unsigned char *)(a1 + 553)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 344), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_pool3d_kernel::~mix_pool3d_kernel(Espresso::ANERuntimeEngine::mix_pool3d_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_pool3d_kernel *)((char *)this + 344));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_pool3d_kernel *)((char *)this + 344));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383720;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383AD8;
  Espresso::ANECompilerEngine::mix_softmax_nd_kernel::mix_softmax_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE338070;
  v6[39] = &unk_1EE3381D0;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA39A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(Espresso::ANERuntimeEngine::mix_softmax_nd_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_softmax_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_softmax_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_softmax_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 496) || *(unsigned char *)(a1 + 497)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 288), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(Espresso::ANERuntimeEngine::mix_softmax_nd_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_softmax_nd_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_softmax_nd_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_softmax_kernel::~mix_softmax_kernel(Espresso::ANERuntimeEngine::mix_softmax_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_softmax_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_softmax_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_softmax_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 520) || *(unsigned char *)(a1 + 528)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 312), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_softmax_kernel::~mix_softmax_kernel(Espresso::ANERuntimeEngine::mix_softmax_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_softmax_kernel *)((char *)this + 312));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_softmax_kernel *)((char *)this + 312));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383870;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_pool_kernel::~mix_pool_kernel(Espresso::ANERuntimeEngine::mix_pool_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_pool_kernel *)((char *)this - 432);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_pool_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_pool_kernel *)((char *)this - 432);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_pool_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, unsigned __int8 **a3, char *a4, unint64_t a5, uint64_t *a6)
{
  if (*((unsigned char *)a1 + 640) || *((unsigned char *)a1 + 641)) {
    Espresso::ANECompilerEngine::pool_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3834F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3834F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANERuntimeEngine::mix_elementwise_kernel *this)
{
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE342CA8;
  *(void *)this = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_elementwise_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE342CA8;
  *(void *)this = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void Espresso::ANERuntimeEngine::mix_elementwise_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 544) || *(unsigned char *)(a1 + 632)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 336), a3, a4, a5);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x238uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383D40;
  Espresso::ANECompilerEngine::mix_reshape_like_kernel::mix_reshape_like_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE339688;
  v6[44] = &unk_1EE3397E8;
  *((unsigned char *)v6 + 561) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA41BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(Espresso::ANERuntimeEngine::mix_reshape_like_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_reshape_like_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_reshape_like_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_reshape_like_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 536) || *(unsigned char *)(a1 + 537)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 328), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(Espresso::ANERuntimeEngine::mix_reshape_like_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_reshape_like_kernel *)((char *)this + 328));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_reshape_like_kernel *)((char *)this + 328));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_like_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383D40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_reshape_kernel::~mix_reshape_kernel(Espresso::ANERuntimeEngine::mix_reshape_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_reshape_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_reshape_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_reshape_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 528) || *(unsigned char *)(a1 + 530)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 320), a3, a4, a5);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_reduce_kernel::~mix_reduce_kernel(Espresso::ANERuntimeEngine::mix_reduce_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_reduce_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_reduce_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_reduce_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 536) || *(unsigned char *)(a1 + 537)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 328), a3, a4, a5);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383758;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x238uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE3839F8;
  Espresso::ANECompilerEngine::broadcast_kernel::broadcast_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  long long v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v9;
  *((unsigned char *)v8 + 336) = *(unsigned char *)(a2 + 32);
  v8[3] = &unk_1EE337808;
  v8[43] = &unk_1EE337968;
  *((unsigned char *)v8 + 564) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192BA4764(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_broadcast_kernel::~mix_broadcast_kernel(Espresso::ANERuntimeEngine::mix_broadcast_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_broadcast_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_broadcast_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_broadcast_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 528) || *(unsigned char *)(a1 + 540)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 320), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_broadcast_kernel::~mix_broadcast_kernel(Espresso::ANERuntimeEngine::mix_broadcast_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_broadcast_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_broadcast_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_broadcast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3839F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3839F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANERuntimeEngine::mix_activation_kernel *this)
{
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_activation_kernel *)((char *)this - 392);
  *((void *)this - 49) = &unk_1EE344D88;
  *(void *)this = &unk_1EE344F50;
  id v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)uint64_t v2 = &unk_1EE341C98;
  *(void *)this = &unk_1EE341E50;
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_activation_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_activation_kernel *)((char *)this - 392);
  *((void *)this - 49) = &unk_1EE344D88;
  *(void *)this = &unk_1EE344F50;
  id v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)uint64_t v2 = &unk_1EE341C98;
  *(void *)this = &unk_1EE341E50;
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
}

void Espresso::ANERuntimeEngine::mix_activation_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5)
{
  if (*(unsigned char *)(a1 + 600) || *(unsigned char *)(a1 + 640)) {
    Espresso::ANECompilerEngine::activation_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);
  }
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x240uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383E90;
  Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::mix_instancenorm_1d_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE33A358;
  v6[45] = &unk_1EE33A4B8;
  *((unsigned char *)v6 + 569) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA4D18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_instancenorm_1d_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 544) || *(unsigned char *)(a1 + 545))
  {
    Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob((void *)a1, a2, a3, a4, a5);
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 336), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel *)((char *)this + 336));
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel *)((char *)this + 336));

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383E90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x218uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383B48;
  Espresso::ANECompilerEngine::stir_gather_nd_kernel::stir_gather_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE338470;
  char v6[40] = &unk_1EE3385D0;
  *((unsigned char *)v6 + 529) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA5020(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(Espresso::ANERuntimeEngine::stir_gather_nd_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_gather_nd_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_gather_nd_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::stir_gather_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 504) || *(unsigned char *)(a1 + 505)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 296), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(Espresso::ANERuntimeEngine::stir_gather_nd_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_gather_nd_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_gather_nd_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383B48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x228uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383A30;
  Espresso::ANECompilerEngine::stir_resample_kernel::stir_resample_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE337A08;
  v6[42] = &unk_1EE337B68;
  *((unsigned char *)v6 + 545) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA52C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::stir_resample_kernel::~stir_resample_kernel(Espresso::ANERuntimeEngine::stir_resample_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_resample_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_resample_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::stir_resample_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 520) || *(unsigned char *)(a1 + 521)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 312), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::stir_resample_kernel::~stir_resample_kernel(Espresso::ANERuntimeEngine::stir_resample_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_resample_kernel *)((char *)this + 312));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_resample_kernel *)((char *)this + 312));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383A30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x218uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383F70;
  Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::stir_resize_nearest_neighbor_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE33AB58;
  char v6[40] = &unk_1EE33ACB8;
  *((unsigned char *)v6 + 529) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA5570(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 504) || *(unsigned char *)(a1 + 505)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 296), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383F70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x220uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383FA8;
  Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::stir_spatial_transformer_affine_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE33AD58;
  v6[41] = &unk_1EE33AEB8;
  *((unsigned char *)v6 + 537) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA5818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel *)((char *)this - 304);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 512) || *(unsigned char *)(a1 + 513)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 304), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel::~stir_spatial_transformer_affine_kernel(Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel *)((char *)this + 304));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel *)((char *)this + 304));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x228uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE383C98;
  Espresso::ANECompilerEngine::mix_array_gather_kernel::mix_array_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE339088;
  v6[42] = &unk_1EE3391E8;
  *((unsigned char *)v6 + 545) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192BA5AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANERuntimeEngine::mix_array_gather_kernel::~mix_array_gather_kernel(Espresso::ANERuntimeEngine::mix_array_gather_kernel *this)
{
  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_array_gather_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANERuntimeEngine::mix_array_gather_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void Espresso::ANERuntimeEngine::mix_array_gather_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  if (*(unsigned char *)(a1 + 520) || *(unsigned char *)(a1 + 521)) {
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 312), a3, a4, a5);
  }
}

void Espresso::ANERuntimeEngine::mix_array_gather_kernel::~mix_array_gather_kernel(Espresso::ANERuntimeEngine::mix_array_gather_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_array_gather_kernel *)((char *)this + 312));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_array_gather_kernel *)((char *)this + 312));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_array_gather_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383C98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x220uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE3836E8;
  Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE3358D8;
  v6[41] = &unk_1EE335A38;
  *((unsigned char *)v6 + 537) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}