void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  void *v1;
  void *v2;
  uint64_t vars8;

  *a1 = &unk_1EE379E60;
  v1 = a1 + 1;
  v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE379E60;
  v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_192672D50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EE379E60;
  v3 = a2 + 1;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      v5 = *(uint64_t (**)(void))(**(void **)(result + 32) + 24);
      return v5();
    }
    else
    {
      result = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  v2 = __p + 8;
  v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  operator delete(__p);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  v5 = a2[1];
  uint64_t v6 = (char *)v5 - (char *)*a2;
  uint64_t v28 = v6 >> 5;
  if (v6 != 64) {
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *v4;
  if (v5 == v4)
  {
    if (v7) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    if (v5[4]) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
  }
  else if (v7 || v4[4])
  {
    nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v28);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v28)
  {
    v10 = (atomic_ullong *)v28;
    *(void *)(a3 + 16) = v28;
    int v11 = v29;
    *(unsigned char *)(a3 + 24) = v29;
    if ((v11 - 2) < 4 || v11 == 9) {
      atomic_fetch_add(v10, 1uLL);
    }
  }
  switch(v29)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = v28;
        if (v28)
        {
          if (*(char *)(v28 + 31) < 0) {
            operator delete(*(void **)(v28 + 8));
          }
          v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = v28;
        if (v28)
        {
          v20 = *(void **)(v28 + 8);
          if (v20)
          {
            *(void *)(v28 + 16) = v20;
            operator delete(v20);
          }
          v13 = (void *)v19;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v16 = *(void *)(v28 + 8);
          if (!v16) {
            goto LABEL_39;
          }
          uint64_t v17 = *(void *)(v28 + 16);
          v18 = *(void **)(v28 + 8);
          if (v17 != v16)
          {
            do
            {
              v17 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v15 + 24, v17);
            }
            while (v17 != v16);
            v18 = *(void **)(v15 + 8);
          }
          *(void *)(v15 + 16) = v16;
          goto LABEL_38;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v21 = *(void *)(v28 + 8);
          if (v21)
          {
            uint64_t v22 = *(void *)(v28 + 16);
            atomic_ullong v23 = *(void *)(v28 + 8);
            if (v22 != v21)
            {
              do
                uint64_t v22 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v22 - 32);
              while (v22 != v21);
              atomic_ullong v23 = *(void *)(v15 + 8);
            }
            *(void *)(v15 + 16) = v21;
            v18 = (void *)v23;
LABEL_38:
            operator delete(v18);
          }
LABEL_39:
          v13 = (void *)v15;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v24 = (void *)v28;
        if (v28)
        {
          v25 = *(void **)(v28 + 56);
          if (v25)
          {
            *(void *)(v28 + 64) = v25;
            operator delete(v25);
          }
          v26 = (void *)v24[4];
          if (v26)
          {
            v24[5] = v26;
            operator delete(v26);
          }
          v27 = (std::__shared_weak_count *)v24[3];
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          v13 = v24;
          uint64_t v14 = 0x10B0C4002311774;
LABEL_50:
          uint64_t result = (void *)MEMORY[0x192FF16B0](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nv.size()", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 27, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        atomic_ullong v16 = __p;
      }
      else {
        atomic_ullong v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 27, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      atomic_ullong v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192673624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379EB8;
  v2 = a1 + 1;
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379EB8;
  uint64_t v1 = a1 + 1;
  v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE379EB8;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_192673970(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EE379EB8;
  unint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      v5 = *(uint64_t (**)(void))(**(void **)(result + 32) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  v2 = __p + 8;
  unint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  operator delete(__p);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  uint64_t v6 = (uint64_t)v5 - *(void *)a2;
  uint64_t v28 = v6 >> 5;
  if (v6 != 96) {
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *v4;
  if (v5 == v4)
  {
    if (v7) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    if (v7 || v4[4] || v4[8]) {
      nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
    }
    v5 = v4;
  }
  if (v5[4]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (v5[8]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v28);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v28)
  {
    v10 = (atomic_ullong *)v28;
    *(void *)(a3 + 16) = v28;
    int v11 = v29;
    *(unsigned char *)(a3 + 24) = v29;
    if ((v11 - 2) < 4 || v11 == 9) {
      atomic_fetch_add(v10, 1uLL);
    }
  }
  switch(v29)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = v28;
        if (v28)
        {
          if (*(char *)(v28 + 31) < 0) {
            operator delete(*(void **)(v28 + 8));
          }
          v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_52;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = v28;
        if (v28)
        {
          v20 = *(void **)(v28 + 8);
          if (v20)
          {
            *(void *)(v28 + 16) = v20;
            operator delete(v20);
          }
          v13 = (void *)v19;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_52;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v16 = *(void *)(v28 + 8);
          if (!v16) {
            goto LABEL_41;
          }
          uint64_t v17 = *(void *)(v28 + 16);
          v18 = *(void **)(v28 + 8);
          if (v17 != v16)
          {
            do
            {
              v17 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v15 + 24, v17);
            }
            while (v17 != v16);
            v18 = *(void **)(v15 + 8);
          }
          *(void *)(v15 + 16) = v16;
          goto LABEL_40;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v21 = *(void *)(v28 + 8);
          if (v21)
          {
            uint64_t v22 = *(void *)(v28 + 16);
            atomic_ullong v23 = *(void *)(v28 + 8);
            if (v22 != v21)
            {
              do
                uint64_t v22 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v22 - 32);
              while (v22 != v21);
              atomic_ullong v23 = *(void *)(v15 + 8);
            }
            *(void *)(v15 + 16) = v21;
            v18 = (void *)v23;
LABEL_40:
            operator delete(v18);
          }
LABEL_41:
          v13 = (void *)v15;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_52;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v24 = (void *)v28;
        if (v28)
        {
          v25 = *(void **)(v28 + 56);
          if (v25)
          {
            *(void *)(v28 + 64) = v25;
            operator delete(v25);
          }
          v26 = (void *)v24[4];
          if (v26)
          {
            v24[5] = v26;
            operator delete(v26);
          }
          v27 = (std::__shared_weak_count *)v24[3];
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          v13 = v24;
          uint64_t v14 = 0x10B0C4002311774;
LABEL_52:
          uint64_t result = (void *)MEMORY[0x192FF16B0](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nv.size()", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 36, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        atomic_ullong v16 = __p;
      }
      else {
        atomic_ullong v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 36, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      atomic_ullong v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192674264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379F68;
  v2 = a1 + 1;
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379F68;
  uint64_t v1 = a1 + 1;
  v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE379F68;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_1926745B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EE379F68;
  unint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      v5 = *(uint64_t (**)(void))(**(void **)(result + 32) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  v2 = __p + 8;
  unint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  operator delete(__p);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  uint64_t v6 = (uint64_t)v5 - *(void *)a2;
  uint64_t v28 = v6 >> 5;
  if (v6 != 160) {
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *v4;
  if (v5 == v4)
  {
    if (v7) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    if (v7 || v4[4] || v4[8] || v4[12] || v4[16]) {
      nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
    }
    v5 = v4;
  }
  if (v5[4]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (v5[8]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (v5[12]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (v5[16]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v28);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v28)
  {
    v10 = (atomic_ullong *)v28;
    *(void *)(a3 + 16) = v28;
    int v11 = v29;
    *(unsigned char *)(a3 + 24) = v29;
    if ((v11 - 2) < 4 || v11 == 9) {
      atomic_fetch_add(v10, 1uLL);
    }
  }
  switch(v29)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = v28;
        if (v28)
        {
          if (*(char *)(v28 + 31) < 0) {
            operator delete(*(void **)(v28 + 8));
          }
          v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_56;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = v28;
        if (v28)
        {
          v20 = *(void **)(v28 + 8);
          if (v20)
          {
            *(void *)(v28 + 16) = v20;
            operator delete(v20);
          }
          v13 = (void *)v19;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_56;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v16 = *(void *)(v28 + 8);
          if (!v16) {
            goto LABEL_45;
          }
          uint64_t v17 = *(void *)(v28 + 16);
          v18 = *(void **)(v28 + 8);
          if (v17 != v16)
          {
            do
            {
              v17 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v15 + 24, v17);
            }
            while (v17 != v16);
            v18 = *(void **)(v15 + 8);
          }
          *(void *)(v15 + 16) = v16;
          goto LABEL_44;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v21 = *(void *)(v28 + 8);
          if (v21)
          {
            uint64_t v22 = *(void *)(v28 + 16);
            atomic_ullong v23 = *(void *)(v28 + 8);
            if (v22 != v21)
            {
              do
                uint64_t v22 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v22 - 32);
              while (v22 != v21);
              atomic_ullong v23 = *(void *)(v15 + 8);
            }
            *(void *)(v15 + 16) = v21;
            v18 = (void *)v23;
LABEL_44:
            operator delete(v18);
          }
LABEL_45:
          v13 = (void *)v15;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_56;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v24 = (void *)v28;
        if (v28)
        {
          v25 = *(void **)(v28 + 56);
          if (v25)
          {
            *(void *)(v28 + 64) = v25;
            operator delete(v25);
          }
          v26 = (void *)v24[4];
          if (v26)
          {
            v24[5] = v26;
            operator delete(v26);
          }
          v27 = (std::__shared_weak_count *)v24[3];
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          v13 = v24;
          uint64_t v14 = 0x10B0C4002311774;
LABEL_56:
          uint64_t result = (void *)MEMORY[0x192FF16B0](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_"
                                "S4_S4_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nv.size()", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 55, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        atomic_ullong v16 = __p;
      }
      else {
        atomic_ullong v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 55, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      atomic_ullong v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192674EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379F10;
  v2 = a1 + 1;
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379F10;
  uint64_t v1 = a1 + 1;
  v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE379F10;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_192675248(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EE379F10;
  unint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      v5 = *(uint64_t (**)(void))(**(void **)(result + 32) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  v2 = __p + 8;
  unint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  operator delete(__p);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  uint64_t v6 = (uint64_t)v5 - *(void *)a2;
  uint64_t v28 = v6 >> 5;
  if (v6 != 128) {
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *v4;
  if (v5 == v4)
  {
    if (v7) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    if (v7 || v4[4] || v4[8] || v4[12]) {
      nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
    }
    v5 = v4;
  }
  if (v5[4]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (v5[8]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (v5[12]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v28);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v28)
  {
    v10 = (atomic_ullong *)v28;
    *(void *)(a3 + 16) = v28;
    int v11 = v29;
    *(unsigned char *)(a3 + 24) = v29;
    if ((v11 - 2) < 4 || v11 == 9) {
      atomic_fetch_add(v10, 1uLL);
    }
  }
  switch(v29)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = v28;
        if (v28)
        {
          if (*(char *)(v28 + 31) < 0) {
            operator delete(*(void **)(v28 + 8));
          }
          v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_54;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = v28;
        if (v28)
        {
          v20 = *(void **)(v28 + 8);
          if (v20)
          {
            *(void *)(v28 + 16) = v20;
            operator delete(v20);
          }
          v13 = (void *)v19;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_54;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v16 = *(void *)(v28 + 8);
          if (!v16) {
            goto LABEL_43;
          }
          uint64_t v17 = *(void *)(v28 + 16);
          v18 = *(void **)(v28 + 8);
          if (v17 != v16)
          {
            do
            {
              v17 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v15 + 24, v17);
            }
            while (v17 != v16);
            v18 = *(void **)(v15 + 8);
          }
          *(void *)(v15 + 16) = v16;
          goto LABEL_42;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v21 = *(void *)(v28 + 8);
          if (v21)
          {
            uint64_t v22 = *(void *)(v28 + 16);
            atomic_ullong v23 = *(void *)(v28 + 8);
            if (v22 != v21)
            {
              do
                uint64_t v22 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v22 - 32);
              while (v22 != v21);
              atomic_ullong v23 = *(void *)(v15 + 8);
            }
            *(void *)(v15 + 16) = v21;
            v18 = (void *)v23;
LABEL_42:
            operator delete(v18);
          }
LABEL_43:
          v13 = (void *)v15;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v24 = (void *)v28;
        if (v28)
        {
          v25 = *(void **)(v28 + 56);
          if (v25)
          {
            *(void *)(v28 + 64) = v25;
            operator delete(v25);
          }
          v26 = (void *)v24[4];
          if (v26)
          {
            v24[5] = v26;
            operator delete(v26);
          }
          v27 = (std::__shared_weak_count *)v24[3];
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          v13 = v24;
          uint64_t v14 = 0x10B0C4002311774;
LABEL_54:
          uint64_t result = (void *)MEMORY[0x192FF16B0](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nv.size()", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 45, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        atomic_ullong v16 = __p;
      }
      else {
        atomic_ullong v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 45, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      atomic_ullong v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192675B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t std::string::compare[abi:ne180100](const void **a1, unsigned char *a2)
{
  char v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v4 = a1;
    a1 = (const void **)*a1;
    size_t v3 = (size_t)v4[1];
  }
  else
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0) {
    size_t v5 = a2[23];
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  if (v2 < 0) {
    a2 = *(unsigned char **)a2;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v5 < v3;
  }
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

uint64_t nitro::ndarray_container::ndarray_container<double,(void *)0>(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 10;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  size_t v6 = (unsigned char *)a2[2];
  size_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v11 = (unsigned char *)a2[5];
  v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 72) = a2[8];
  return a1;
}

void sub_192675E18(_Unwind_Exception *a1)
{
  size_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  int64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"var[i].is_value()", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 13, 1);
    std::stringbuf::str();
    int64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unsigned int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        v9 = __p;
      }
      else {
        v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v11 = (file_logger *)global_logger();
    int64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 13, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926760A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_variable::value(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_instance == nullptr", 21);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  size_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 57, 1);
    std::stringbuf::str();
    unsigned int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::nitro_variable::value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192676460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1926765E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1926765FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1926765F4);
}

void nitro::nitro_builtins::convert_slice_array_to_list(nitro::flexible_type const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"shape.size()", 12);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 670, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      std::locale v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 670, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926768F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377788;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377788;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE3779F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3779F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__invoke[abi:ne180100]<nitro::flexible_type (*&)(nitro::flexible_type,nitro::flexible_type const&),nitro::flexible_type&,nitro::flexible_type&>((uint64_t (**)(atomic_ullong **, uint64_t))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeES0_RKS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeES0_RKS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeES0_RKS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeES0_RKS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

uint64_t std::__invoke[abi:ne180100]<nitro::flexible_type (*&)(nitro::flexible_type,nitro::flexible_type const&),nitro::flexible_type&,nitro::flexible_type&>(uint64_t (**a1)(atomic_ullong **, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a1;
  uint64_t v22 = 0;
  unsigned __int8 v23 = 0;
  if (&v22 != (atomic_ullong **)a2)
  {
    uint64_t v22 = *(atomic_ullong **)a2;
    unsigned __int8 v23 = *(unsigned char *)(a2 + 8);
    if (v23 - 2 < 4 || v23 == 9) {
      atomic_fetch_add(v22, 1uLL);
    }
  }
  uint64_t result = v3(&v22, a3);
  switch(v23)
  {
    case 2u:
      if (atomic_fetch_add(v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v6 = v22;
        if (v22)
        {
          if (*((char *)v22 + 31) < 0) {
            operator delete((void *)v22[1]);
          }
          int64_t v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_45;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add(v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v9 = v22;
        if (v22)
        {
          uint64_t v10 = (void *)v22[1];
          if (v10)
          {
            v22[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          int64_t v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_45;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add(v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v22;
        if (v22)
        {
          atomic_ullong v12 = v22[1];
          if (!v12) {
            goto LABEL_34;
          }
          uint64_t v13 = v22[2];
          uint64_t v14 = (void *)v22[1];
          if (v13 != v12)
          {
            do
            {
              v13 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v11 + 3), v13);
            }
            while (v13 != v12);
            uint64_t v14 = (void *)v11[1];
          }
          v11[2] = v12;
          goto LABEL_33;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add(v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v22;
        if (v22)
        {
          atomic_ullong v15 = v22[1];
          if (v15)
          {
            uint64_t v16 = v22[2];
            atomic_ullong v17 = v22[1];
            if (v16 != v15)
            {
              do
                uint64_t v16 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v16 - 32);
              while (v16 != v15);
              atomic_ullong v17 = v11[1];
            }
            v11[2] = v15;
            uint64_t v14 = (void *)v17;
LABEL_33:
            operator delete(v14);
          }
LABEL_34:
          int64_t v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_45;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add(v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v18 = v22;
        if (v22)
        {
          uint64_t v19 = (void *)v22[7];
          if (v19)
          {
            v22[8] = (atomic_ullong)v19;
            operator delete(v19);
          }
          v20 = (void *)v18[4];
          if (v20)
          {
            v18[5] = (atomic_ullong)v20;
            operator delete(v20);
          }
          unsigned __int8 v21 = (std::__shared_weak_count *)v18[3];
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
          int64_t v7 = v18;
          uint64_t v8 = 0x10B0C4002311774;
LABEL_45:
          uint64_t result = MEMORY[0x192FF16B0](v7, v8);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_192676EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, __int16 a11, char a12, char a13)
{
  switch((char)a11)
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE3777E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3777E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377838;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377838;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_RS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_RS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_RS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_RS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377998;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377890;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377890;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func()
{
}

void *std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE379DB0;
  return result;
}

void std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE379DB0;
}

void std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)*a1;
  uint64_t v4 = (void *)*a1;
  unint64_t v5 = (uint64_t)(a1[1] - *a1) >> 5;
  if (a1[1] != *a1)
  {
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (uint64_t)(a1[1] - *a1) >> 5;
    }
    int64_t v7 = (void *)*a1;
    do
    {
      if (*v7) {
        nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
      }
      v7 += 4;
      --v6;
    }
    while (v6);
  }
  if (v5 == 4)
  {
    if (*v4) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    if (v4[4]) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    if (v4[8]) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    if (v4[12]) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    nitro::nitro_builtins::MatMul((nitro::nitro_builtins *)(v3 + 2), (const nitro::flexible_type *)(v4 + 6), (const nitro::flexible_type *)(v4 + 10), (const nitro::flexible_type *)(v4 + 14), (uint64_t)&v76);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v13 = v76;
    *(void *)(a2 + 16) = v76;
    int v14 = v77;
    *(unsigned char *)(a2 + 24) = v77;
    if ((v14 - 2) < 4 || v14 == 9)
    {
      atomic_fetch_add(v13, 1uLL);
      int v14 = v77;
    }
    switch(v14)
    {
      case 2:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong v15 = v76;
          if (v76)
          {
LABEL_123:
            if (*((char *)v15 + 31) < 0) {
              operator delete((void *)v15[1]);
            }
            v54 = v15;
            uint64_t v55 = 0x1012C404EF22A49;
            goto LABEL_157;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v32 = v76;
          if (v76)
          {
LABEL_128:
            v56 = (void *)v32[1];
            if (v56)
            {
              v32[2] = (atomic_ullong)v56;
              operator delete(v56);
            }
            v54 = v32;
            uint64_t v55 = 0x1080C409938AC02;
            goto LABEL_157;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v33 = v76;
          if (v76)
          {
            atomic_ullong v34 = v76[1];
            if (!v34) {
              goto LABEL_146;
            }
            uint64_t v35 = v76[2];
            v36 = (void *)v76[1];
            if (v35 != v34)
            {
              do
              {
                v35 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v33 + 3), v35);
              }
              while (v35 != v34);
LABEL_136:
              v36 = (void *)v33[1];
            }
LABEL_137:
            v33[2] = v34;
            goto LABEL_145;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v33 = v76;
          if (v76)
          {
            atomic_ullong v37 = v76[1];
            if (v37)
            {
              uint64_t v38 = v76[2];
              atomic_ullong v39 = v76[1];
              if (v38 != v37)
              {
                do
                  uint64_t v38 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v38 - 32);
                while (v38 != v37);
LABEL_143:
                atomic_ullong v39 = v33[1];
              }
LABEL_144:
              v33[2] = v37;
              v36 = (void *)v39;
LABEL_145:
              operator delete(v36);
            }
LABEL_146:
            v54 = v33;
            uint64_t v55 = 0x1020C405E66F15BLL;
            goto LABEL_157;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v40 = v76;
          if (v76)
          {
LABEL_149:
            v59 = (void *)v40[7];
            if (v59)
            {
              v40[8] = (atomic_ullong)v59;
              operator delete(v59);
            }
            v60 = (void *)v40[4];
            if (v60)
            {
              v40[5] = (atomic_ullong)v60;
              operator delete(v60);
            }
            v61 = (std::__shared_weak_count *)v40[3];
            if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
            v54 = v40;
            uint64_t v55 = 0x10B0C4002311774;
LABEL_157:
            MEMORY[0x192FF16B0](v54, v55);
          }
        }
        break;
      default:
        return;
    }
  }
  else
  {
    if (v5 != 2)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        v65 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v65, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 91, 1);
        v67 = pthread_getspecific(started[74]);
        if (v67 && *((unsigned char *)v67 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67 + 2, (uint64_t)"Check failed: ", 14);
        }
        v68 = pthread_getspecific(started[74]);
        if (v68 && *((unsigned char *)v68 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68 + 2, (uint64_t)"false", 5);
        }
        v69 = pthread_getspecific(started[74]);
        if (v69 && *((unsigned char *)v69 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69 + 2, (uint64_t)":\n", 2);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 91, "Unexpected number of arguments for Matmul", v62, v63, v64, v71);
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "assertion failure";
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    if (*v4) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    if (v4[4]) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    char v75 = 0;
    v74 = 0;
    char v73 = 0;
    v72 = 0;
    nitro::nitro_builtins::MatMul((nitro::nitro_builtins *)(v3 + 2), (const nitro::flexible_type *)(v4 + 6), (const nitro::flexible_type *)&v74, (const nitro::flexible_type *)&v72, (uint64_t)&v76);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v8 = v76;
    *(void *)(a2 + 16) = v76;
    int v9 = v77;
    *(unsigned char *)(a2 + 24) = v77;
    if ((v9 - 2) < 4 || v9 == 9)
    {
      atomic_fetch_add(v8, 1uLL);
      int v9 = v77;
    }
    switch(v9)
    {
      case 2:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v10 = v76;
          if (v76)
          {
            if (*((char *)v76 + 31) < 0) {
              operator delete((void *)v76[1]);
            }
            uint64_t v11 = v10;
            uint64_t v12 = 0x1012C404EF22A49;
            goto LABEL_63;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v16 = v76;
          if (v76)
          {
            atomic_ullong v17 = (void *)v76[1];
            if (v17)
            {
              v76[2] = (atomic_ullong)v17;
              operator delete(v17);
            }
            uint64_t v11 = v16;
            uint64_t v12 = 0x1080C409938AC02;
            goto LABEL_63;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v18 = v76;
          if (v76)
          {
            atomic_ullong v19 = v76[1];
            if (!v19) {
              goto LABEL_52;
            }
            uint64_t v20 = v76[2];
            unsigned __int8 v21 = (void *)v76[1];
            if (v20 != v19)
            {
              do
              {
                v20 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v18 + 3), v20);
              }
              while (v20 != v19);
              unsigned __int8 v21 = (void *)v18[1];
            }
            v18[2] = v19;
            goto LABEL_51;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v18 = v76;
          if (v76)
          {
            atomic_ullong v22 = v76[1];
            if (v22)
            {
              uint64_t v23 = v76[2];
              atomic_ullong v24 = v76[1];
              if (v23 != v22)
              {
                do
                  uint64_t v23 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v23 - 32);
                while (v23 != v22);
                atomic_ullong v24 = v18[1];
              }
              v18[2] = v22;
              unsigned __int8 v21 = (void *)v24;
LABEL_51:
              operator delete(v21);
            }
LABEL_52:
            uint64_t v11 = v18;
            uint64_t v12 = 0x1020C405E66F15BLL;
            goto LABEL_63;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v76, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v25 = v76;
          if (v76)
          {
            v26 = (void *)v76[7];
            if (v26)
            {
              v76[8] = (atomic_ullong)v26;
              operator delete(v26);
            }
            v27 = (void *)v25[4];
            if (v27)
            {
              v25[5] = (atomic_ullong)v27;
              operator delete(v27);
            }
            unsigned __int8 v28 = (std::__shared_weak_count *)v25[3];
            if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
            uint64_t v11 = v25;
            uint64_t v12 = 0x10B0C4002311774;
LABEL_63:
            MEMORY[0x192FF16B0](v11, v12);
          }
        }
        break;
      default:
        break;
    }
    v76 = 0;
    unsigned __int8 v77 = 0;
    switch(v73)
    {
      case 2:
        if (atomic_fetch_add(v72, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned __int8 v29 = v72;
          if (v72)
          {
            if (*((char *)v72 + 31) < 0) {
              operator delete((void *)v72[1]);
            }
            uint64_t v30 = v29;
            uint64_t v31 = 0x1012C404EF22A49;
            goto LABEL_119;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v72, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v41 = v72;
          if (v72)
          {
            v42 = (void *)v72[1];
            if (v42)
            {
              v72[2] = (atomic_ullong)v42;
              operator delete(v42);
            }
            uint64_t v30 = v41;
            uint64_t v31 = 0x1080C409938AC02;
            goto LABEL_119;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v72, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v43 = v72;
          if (v72)
          {
            atomic_ullong v44 = v72[1];
            if (!v44) {
              goto LABEL_108;
            }
            uint64_t v45 = v72[2];
            v46 = (void *)v72[1];
            if (v45 != v44)
            {
              do
              {
                v45 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v43 + 3), v45);
              }
              while (v45 != v44);
              v46 = (void *)v43[1];
            }
            v43[2] = v44;
            goto LABEL_107;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v72, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v43 = v72;
          if (v72)
          {
            atomic_ullong v47 = v72[1];
            if (v47)
            {
              uint64_t v48 = v72[2];
              atomic_ullong v49 = v72[1];
              if (v48 != v47)
              {
                do
                  uint64_t v48 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v48 - 32);
                while (v48 != v47);
                atomic_ullong v49 = v43[1];
              }
              v43[2] = v47;
              v46 = (void *)v49;
LABEL_107:
              operator delete(v46);
            }
LABEL_108:
            uint64_t v30 = v43;
            uint64_t v31 = 0x1020C405E66F15BLL;
            goto LABEL_119;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v72, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v50 = v72;
          if (v72)
          {
            v51 = (void *)v72[7];
            if (v51)
            {
              v72[8] = (atomic_ullong)v51;
              operator delete(v51);
            }
            v52 = (void *)v50[4];
            if (v52)
            {
              v50[5] = (atomic_ullong)v52;
              operator delete(v52);
            }
            v53 = (std::__shared_weak_count *)v50[3];
            if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
            uint64_t v30 = v50;
            uint64_t v31 = 0x10B0C4002311774;
LABEL_119:
            MEMORY[0x192FF16B0](v30, v31);
          }
        }
        break;
      default:
        break;
    }
    switch(v75)
    {
      case 2:
        if (atomic_fetch_add(v74, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong v15 = v74;
          if (v74) {
            goto LABEL_123;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v74, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v32 = v74;
          if (v74) {
            goto LABEL_128;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v74, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v33 = v74;
          if (v74)
          {
            atomic_ullong v34 = v74[1];
            if (!v34) {
              goto LABEL_146;
            }
            uint64_t v57 = v74[2];
            v36 = (void *)v74[1];
            if (v57 != v34)
            {
              do
              {
                v57 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v33 + 3), v57);
              }
              while (v57 != v34);
              goto LABEL_136;
            }
            goto LABEL_137;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v74, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v33 = v74;
          if (v74)
          {
            atomic_ullong v37 = v74[1];
            if (!v37) {
              goto LABEL_146;
            }
            uint64_t v58 = v74[2];
            atomic_ullong v39 = v74[1];
            if (v58 != v37)
            {
              do
                uint64_t v58 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v58 - 32);
              while (v58 != v37);
              goto LABEL_143;
            }
            goto LABEL_144;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v74, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v40 = v74;
          if (v74) {
            goto LABEL_149;
          }
        }
        break;
      default:
        return;
    }
  }
}

uint64_t std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::~__func()
{
}

void *std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377A48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377A48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE"
    || ((v3 & (unint64_t)"PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377940;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377940;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE3778E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3778E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_S2_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_S2_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void *std::pair<nitro::atomic<unsigned long>,std::string>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  unint64_t v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>::get_elements_copy(void)::{lambda(int const&)#1}>(uint64_t *a1, uint64_t *a2, void *a3)
{
  long long v4 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  size_t v5 = v3 - v4;
  if (v3 == v4) {
    return;
  }
  uint64_t v7 = *a1;
  if (!*a1) {
    return;
  }
  if (v5 - 8 < 8)
  {
    uint64_t v10 = 1;
    uint64_t v11 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v17 = *(void *)v11;
      v11 += 8;
      v10 *= v17;
    }
    while (v11 != v3);
    goto LABEL_9;
  }
  unint64_t v12 = ((v5 - 8) >> 3) + 1;
  uint64_t v11 = &v4[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v13 = v4 + 8;
  uint64_t v14 = 1;
  uint64_t v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v16 = 1;
  do
  {
    v14 *= *(v13 - 1);
    v16 *= *v13;
    v13 += 2;
    v15 -= 2;
  }
  while (v15);
  uint64_t v10 = v16 * v14;
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v10) {
    return;
  }
  uint64_t v18 = (uint64_t)v5 >> 3;
  if ((uint64_t)v5 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a1[8];
      uint64_t v38 = (void *)a1[5];
      unint64_t v39 = *((void *)v4 + 1);
      unint64_t v40 = v39;
      do
      {
        if (v40)
        {
          unint64_t v41 = 0;
          unint64_t v42 = *((void *)v4 + 2);
          uint64_t v43 = v37;
          do
          {
            if (v42)
            {
              unint64_t v44 = 0;
              uint64_t v45 = *a3 + 1;
              uint64_t v46 = *a2 + 4 * *a3;
              uint64_t v47 = v43;
              do
              {
                int v48 = *(_DWORD *)(v7 + 4 * v47);
                *a3 = v45 + v44;
                *(_DWORD *)(v46 + 4 * v44) = v48;
                v47 += v38[2];
                ++v44;
                unint64_t v42 = *((void *)v4 + 2);
              }
              while (v44 < v42);
              unint64_t v39 = *((void *)v4 + 1);
            }
            v43 += v38[1];
            ++v41;
          }
          while (v41 < v39);
          unint64_t v35 = *(void *)v4;
          unint64_t v40 = v39;
        }
        v37 += *v38;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v18 != 2)
    {
      if (v18 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v19 = 0;
          uint64_t v20 = a1[8];
          unsigned __int8 v21 = (void *)a1[5];
          uint64_t v22 = *a3 + 1;
          uint64_t v23 = *a2 + 4 * *a3;
          do
          {
            int v24 = *(_DWORD *)(v7 + 4 * v20);
            *a3 = v22 + v19;
            *(_DWORD *)(v23 + 4 * v19) = v24;
            v20 += *v21;
            ++v19;
          }
          while (v19 < *(void *)v4);
        }
        return;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      atomic_ullong v49 = operator new(v5);
      bzero(v49, v5 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v50 = *a2;
      if (v5 >> 3 <= 1) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = v5 >> 3;
      }
      uint64_t v52 = a1[5];
      while (v51 >= 2)
      {
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = v51 & 0x1FFFFFFFFFFFFFFELL;
        uint64_t v58 = (void *)(v52 + 8);
        v59 = v49 + 1;
        do
        {
          v55 += *(v58 - 1) * *(v59 - 1);
          v56 += *v58 * *v59;
          v59 += 2;
          v58 += 2;
          v57 -= 2;
        }
        while (v57);
        uint64_t v53 = v56 + v55;
        uint64_t v54 = v51 & 0x1FFFFFFFFFFFFFFELL;
        if (v51 != (v51 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_45;
        }
LABEL_47:
        int v67 = *(_DWORD *)(v7 + 4 * v53);
        uint64_t v68 = (*a3)++;
        *(_DWORD *)(v50 + 4 * v68) = v67;
        if ((int)(v5 >> 3) >= 1)
        {
          uint64_t v69 = (v5 >> 3) + 1;
          size_t v70 = v5 >> 3;
          while (1)
          {
            uint64_t v71 = (v69 - 2);
            unint64_t v72 = v49[v71] + 1;
            v49[v71] = v72;
            if (v72 < *(void *)&v4[v71 * 8]) {
              break;
            }
            v49[(v69 - 2)] = 0;
            LODWORD(v70) = v70 - 1;
            if ((unint64_t)--v69 <= 1) {
              goto LABEL_53;
            }
          }
          if ((int)v70 > 0) {
            continue;
          }
        }
LABEL_53:
        operator delete(v49);
        return;
      }
      uint64_t v53 = 0;
      uint64_t v54 = 0;
LABEL_45:
      unint64_t v60 = v51 - v54;
      uint64_t v61 = v54;
      uint64_t v62 = (uint64_t *)(v52 + 8 * v54);
      uint64_t v63 = &v49[v61];
      do
      {
        uint64_t v65 = *v63++;
        uint64_t v64 = v65;
        uint64_t v66 = *v62++;
        v53 += v66 * v64;
        --v60;
      }
      while (v60);
      goto LABEL_47;
    }
    unint64_t v25 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v26 = 0;
      uint64_t v27 = a1[8];
      unsigned __int8 v28 = (void *)a1[5];
      unint64_t v29 = *((void *)v4 + 1);
      do
      {
        if (v29)
        {
          unint64_t v30 = 0;
          uint64_t v31 = *a3 + 1;
          uint64_t v32 = *a2 + 4 * *a3;
          uint64_t v33 = v27;
          do
          {
            int v34 = *(_DWORD *)(v7 + 4 * v33);
            *a3 = v31 + v30;
            *(_DWORD *)(v32 + 4 * v30) = v34;
            v33 += v28[1];
            ++v30;
            unint64_t v29 = *((void *)v4 + 1);
          }
          while (v30 < v29);
          unint64_t v25 = *(void *)v4;
        }
        v27 += *v28;
        ++v26;
      }
      while (v26 < v25);
    }
  }
}

void sub_192678678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::ndarray_container<float,(void *)0>(uint64_t a1)
{
  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new[]();
}

void sub_192678914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  int v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 56) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 32) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

void std::vector<nitro::ndarray_container>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        uint64_t v7 = (void *)*((void *)v4 - 7);
        if (v7)
        {
          *((void *)v4 - 6) = v7;
          operator delete(v7);
        }
        uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v4 -= 80;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(int64x2_t *a1, const nitro::ndarray_container *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  unsigned __int8 v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v18 = v7;
  v19.i64[0] = (uint64_t)&v7[80 * v3];
  uint64_t v20 = &v7[80 * v6];
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v19.i64[0], a2);
  uint64_t v8 = v19.i64[0];
  uint64_t v9 = v19.i64[0] + 80;
  v19.i64[1] = v19.i64[0] + 80;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v10 + v12;
      uint64_t v14 = v8 + v12;
      *(_DWORD *)(v14 - 80) = *(_DWORD *)(v10 + v12 - 80);
      *(_OWORD *)(v14 - 72) = *(_OWORD *)(v10 + v12 - 72);
      *(void *)(v13 - 72) = 0;
      *(void *)(v13 - 64) = 0;
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(_OWORD *)(v14 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v14 - 40) = *(void *)(v10 + v12 - 40);
      *(void *)(v13 - 56) = 0;
      *(void *)(v13 - 48) = 0;
      *(void *)(v13 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(void *)(v14 - 16) = *(void *)(v10 + v12 - 16);
      *(void *)(v13 - 32) = 0;
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v14 - 8) = *(void *)(v10 + v12 - 8);
      v12 -= 80;
    }
    while (v10 + v12 != v11);
    int64x2_t v15 = *a1;
    uint64_t v9 = v19.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v19 = v15;
  uint64_t v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  uint64_t v20 = v16;
  uint64_t v18 = (char *)v15.i64[0];
  std::__split_buffer<nitro::ndarray_container>::~__split_buffer((uint64_t)&v18);
  return v9;
}

void sub_192678BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nitro::ndarray_container>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nitro::ndarray_container>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    unint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(i - 56);
    if (v5)
    {
      *(void *)(i - 48) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(std::__shared_weak_count **)(i - 64);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        int64x2_t v15 = v23;
      }
      else {
        int64x2_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192678F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"start", 5);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    int64x2_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192679370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1926794F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192679504);
}

void nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"start", 5);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    int64x2_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192679844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1926799CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1926799E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1926799D8);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        int64x2_t v15 = v23;
      }
      else {
        int64x2_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192679C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"start", 5);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 47, 1);
    std::stringbuf::str();
    int64x2_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267A098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"end", 3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"start", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    int64x2_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267A3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 47, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19267A580(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267A594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267A58CLL);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19267A6F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267A70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267A704);
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(_DWORD *a1, float *a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v59, (uint64_t)a1);
      if (v62 == v61 || v59 == 0) {
        goto LABEL_32;
      }
      unint64_t v5 = v62 - v61 - 8;
      if (v5 < 8)
      {
        uint64_t v6 = 1;
        uint64_t v7 = v61;
        do
        {
LABEL_29:
          uint64_t v27 = *(void *)v7;
          v7 += 8;
          v6 *= v27;
        }
        while (v7 != v62);
        goto LABEL_30;
      }
      uint64_t v22 = (v5 >> 3) + 1;
      uint64_t v7 = &v61[8 * (v22 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v23 = v61 + 8;
      uint64_t v24 = 1;
      uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v26 = 1;
      do
      {
        v24 *= *(v23 - 1);
        v26 *= *v23;
        v23 += 2;
        v25 -= 2;
      }
      while (v25);
      uint64_t v6 = v26 * v24;
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_29;
      }
LABEL_30:
      if (v6)
      {
        *(float *)&double v3 = *a2;
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(float)::{lambda(int &)#1}>(&v59, v3);
      }
LABEL_32:
      if (v63)
      {
        uint64_t v64 = v63;
        operator delete(v63);
      }
      if (v61)
      {
        uint64_t v62 = v61;
        operator delete(v61);
      }
      unsigned __int8 v28 = v60;
      if (!v60) {
        return;
      }
      goto LABEL_73;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v65, (uint64_t)a1);
      if (v68 == v67 || v65 == 0) {
        goto LABEL_56;
      }
      unint64_t v14 = v68 - v67 - 8;
      if (v14 < 8)
      {
        uint64_t v15 = 1;
        uint64_t v16 = v67;
        do
        {
LABEL_53:
          uint64_t v40 = *(void *)v16;
          v16 += 8;
          v15 *= v40;
        }
        while (v16 != v68);
        goto LABEL_54;
      }
      uint64_t v35 = (v14 >> 3) + 1;
      uint64_t v16 = &v67[8 * (v35 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v36 = v67 + 8;
      uint64_t v37 = 1;
      uint64_t v38 = v35 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v39 = 1;
      do
      {
        v37 *= *(v36 - 1);
        v39 *= *v36;
        v36 += 2;
        v38 -= 2;
      }
      while (v38);
      uint64_t v15 = v39 * v37;
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_53;
      }
LABEL_54:
      if (v15) {
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(float)::{lambda(unsigned char &)#1}>(&v65, *a2);
      }
LABEL_56:
      if (v69)
      {
        size_t v70 = v69;
        operator delete(v69);
      }
      if (v67)
      {
        uint64_t v68 = v67;
        operator delete(v67);
      }
      unsigned __int8 v28 = v66;
      if (!v66) {
        return;
      }
      goto LABEL_73;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v47, (uint64_t)a1);
      if (v50 == v49 || v47 == 0) {
        goto LABEL_68;
      }
      unint64_t v19 = (char *)v50 - (unsigned char *)v49 - 8;
      if (v19 < 8)
      {
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t *)v49;
        do
        {
LABEL_65:
          uint64_t v46 = *v21++;
          v20 *= v46;
        }
        while (v21 != v50);
        goto LABEL_66;
      }
      uint64_t v41 = (v19 >> 3) + 1;
      uint64_t v21 = (uint64_t *)((char *)v49 + 8 * (v41 & 0x3FFFFFFFFFFFFFFELL));
      unint64_t v42 = (char *)v49 + 8;
      uint64_t v43 = 1;
      uint64_t v44 = v41 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v45 = 1;
      do
      {
        v43 *= *(v42 - 1);
        v45 *= *v42;
        v42 += 2;
        v44 -= 2;
      }
      while (v44);
      uint64_t v20 = v45 * v43;
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_65;
      }
LABEL_66:
      if (v20)
      {
        *(float *)&double v17 = *a2;
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(float)::{lambda(float &)#1}>(&v47, v17);
      }
LABEL_68:
      if (v51)
      {
        uint64_t v52 = v51;
        operator delete(v51);
      }
      if (v49)
      {
        uint64_t v50 = (uint64_t *)v49;
        operator delete(v49);
      }
      unsigned __int8 v28 = v48;
      if (v48) {
        goto LABEL_73;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v53, (uint64_t)a1);
      if (v56 == v55 || v53 == 0) {
        goto LABEL_44;
      }
      unint64_t v10 = (char *)v56 - (unsigned char *)v55 - 8;
      if (v10 < 8)
      {
        uint64_t v11 = 1;
        uint64_t v12 = (uint64_t *)v55;
        do
        {
LABEL_41:
          uint64_t v34 = *v12++;
          v11 *= v34;
        }
        while (v12 != v56);
        goto LABEL_42;
      }
      uint64_t v29 = (v10 >> 3) + 1;
      uint64_t v12 = (uint64_t *)((char *)v55 + 8 * (v29 & 0x3FFFFFFFFFFFFFFELL));
      unint64_t v30 = (char *)v55 + 8;
      uint64_t v31 = 1;
      uint64_t v32 = v29 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v33 = 1;
      do
      {
        v31 *= *(v30 - 1);
        v33 *= *v30;
        v30 += 2;
        v32 -= 2;
      }
      while (v32);
      uint64_t v11 = v33 * v31;
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_41;
      }
LABEL_42:
      if (v11)
      {
        *(float *)&double v8 = *a2;
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(float)::{lambda(half &)#1}>(&v53, v8);
      }
LABEL_44:
      if (__p)
      {
        uint64_t v58 = __p;
        operator delete(__p);
      }
      if (v55)
      {
        uint64_t v56 = (uint64_t *)v55;
        operator delete(v55);
      }
      unsigned __int8 v28 = v54;
      if (v54)
      {
LABEL_73:
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator()();
  }
}

void sub_19267AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19267AB0C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_19267AB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19267AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  std::result_of<float ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267ADF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(float)::{lambda(unsigned char &)#1}>(void *a1, float a2)
{
  uint64_t v2 = (char *)a1[2];
  double v3 = (char *)a1[3];
  uint64_t v4 = v3 - v2;
  if (v3 == v2 || !*a1) {
    return;
  }
  float v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    uint64_t v7 = 1;
    double v8 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *(void *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  unint64_t v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  double v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v10 = v2 + 8;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  unint64_t v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    unint64_t v24 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v25 = 0;
      uint64_t v26 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v27 = 0;
          uint64_t v28 = v26;
          do
          {
            if (*((void *)v2 + 2))
            {
              unint64_t v30 = 0;
              uint64_t v31 = v28;
              do
              {
                LOBYTE(a2) = *(unsigned char *)(*a1 + v31);
                a2 = v6 + (float)LODWORD(a2);
                *(unsigned char *)(*a1 + v31) = (int)a2;
                uint64_t v29 = (void *)a1[5];
                v31 += v29[2];
                ++v30;
                uint64_t v2 = (char *)a1[2];
              }
              while (v30 < *((void *)v2 + 2));
            }
            else
            {
              uint64_t v29 = (void *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((void *)v2 + 1));
          unint64_t v24 = *(void *)v2;
        }
        else
        {
          uint64_t v29 = (void *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(void *)v2)
        {
          unint64_t v16 = 0;
          uint64_t v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v17);
            a2 = v6 + (float)LODWORD(a2);
            *(unsigned char *)(*a1 + v17) = (int)a2;
            v17 += *(void *)a1[5];
            ++v16;
          }
          while (v16 < *(void *)a1[2]);
        }
        return;
      }
      if (v4 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v4 >> 3;
      }
      while (1)
      {
        uint64_t v35 = a1[5];
        if (v34 < 2) {
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = (void *)(v35 + 8);
        unint64_t v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        uint64_t v36 = v39 + v38;
        unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_47;
        }
LABEL_49:
        LOBYTE(v33) = *(unsigned char *)(*a1 + v36);
        float v33 = v6 + (float)LODWORD(v33);
        *(unsigned char *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          uint64_t v50 = a1[2];
          uint64_t v51 = ((unint64_t)v4 >> 3) + 1;
          unint64_t v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            uint64_t v53 = (v51 - 2);
            unint64_t v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(void *)(v50 + v53 * 8)) {
              break;
            }
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1) {
              goto LABEL_55;
            }
          }
          if ((int)v52 > 0) {
            continue;
          }
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      uint64_t v36 = 0;
      unint64_t v37 = 0;
LABEL_47:
      unint64_t v43 = v34 - v37;
      uint64_t v44 = v37;
      uint64_t v45 = (uint64_t *)(v35 + v44 * 8);
      uint64_t v46 = &v32[v44];
      do
      {
        uint64_t v48 = *v46++;
        uint64_t v47 = v48;
        uint64_t v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    unint64_t v18 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v19 = 0;
      uint64_t v20 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v22 = 0;
          uint64_t v23 = v20;
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v23);
            a2 = v6 + (float)LODWORD(a2);
            *(unsigned char *)(*a1 + v23) = (int)a2;
            uint64_t v21 = (void *)a1[5];
            v23 += v21[1];
            ++v22;
            uint64_t v2 = (char *)a1[2];
          }
          while (v22 < *((void *)v2 + 1));
          unint64_t v18 = *(void *)v2;
        }
        else
        {
          uint64_t v21 = (void *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_19267B1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(float)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  float v94 = *(float *)&a2;
  double v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    double v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  double v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unint64_t v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v48 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v49 = 0;
    uint64_t v50 = a1[8];
    unint64_t v51 = v3[1];
    unint64_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v55 = v6 + 4 * v50 + 16;
    uint64_t v56 = 4 * *v52;
    while (!v51)
    {
LABEL_38:
      v50 += v53;
      ++v49;
      v55 += v56;
      if (v49 == v48) {
        return;
      }
    }
    uint64_t v57 = 0;
    unint64_t v58 = v3[2];
    uint64_t v59 = v52[1];
    unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v61 = (int32x4_t *)v55;
    uint64_t v62 = v50;
    while (1)
    {
      if (v58)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v52[2];
        uint64_t v65 = v62;
        if (v58 < 8)
        {
          float v66 = v94;
        }
        else
        {
          float v66 = v94;
          if (v64 == 1)
          {
            uint64_t v65 = v62 + v60;
            int v67 = v61;
            unint64_t v68 = v58 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              int32x4_t v69 = vcvtq_s32_f32(vaddq_f32(v54, vcvtq_f32_s32(*v67)));
              v67[-1] = vcvtq_s32_f32(vaddq_f32(v54, vcvtq_f32_s32(v67[-1])));
              int32x4_t *v67 = v69;
              v67 += 2;
              v68 -= 8;
            }
            while (v68);
            unint64_t v63 = v58 & 0xFFFFFFFFFFFFFFF8;
            float v66 = v94;
            if (v58 == v60) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v70 = v58 - v63;
        uint64_t v71 = 4 * v64;
        unint64_t v72 = (int *)(v6 + 4 * v65);
        do
        {
          int *v72 = (int)(float)(v66 + (float)*v72);
          unint64_t v72 = (int *)((char *)v72 + v71);
          --v70;
        }
        while (v70);
      }
LABEL_41:
      v62 += v59;
      ++v57;
      uint64_t v61 = (int32x4_t *)((char *)v61 + 4 * v59);
      if (v57 == v51) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v28 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v29 = 0;
    uint64_t v30 = a1[8];
    unint64_t v31 = v3[1];
    uint64_t v32 = (uint64_t *)a1[5];
    uint64_t v33 = *v32;
    unint64_t v34 = v31 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v36 = v6 + 4 * v30 + 16;
    uint64_t v37 = 4 * *v32;
    while (1)
    {
      if (v31)
      {
        unint64_t v38 = 0;
        uint64_t v39 = v32[1];
        uint64_t v40 = v30;
        if (v31 < 8)
        {
          float v41 = v94;
        }
        else
        {
          float v41 = v94;
          if (v39 == 1)
          {
            uint64_t v40 = v30 + v34;
            unint64_t v42 = (int32x4_t *)v36;
            unint64_t v43 = v31 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              int32x4_t v44 = vcvtq_s32_f32(vaddq_f32(v35, vcvtq_f32_s32(*v42)));
              v42[-1] = vcvtq_s32_f32(vaddq_f32(v35, vcvtq_f32_s32(v42[-1])));
              int32x4_t *v42 = v44;
              v42 += 2;
              v43 -= 8;
            }
            while (v43);
            unint64_t v38 = v31 & 0xFFFFFFFFFFFFFFF8;
            float v41 = v94;
            if (v31 == v34) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v45 = v31 - v38;
        uint64_t v46 = 4 * v39;
        uint64_t v47 = (int *)(v6 + 4 * v40);
        do
        {
          *uint64_t v47 = (int)(float)(v41 + (float)*v47);
          uint64_t v47 = (int *)((char *)v47 + v46);
          --v45;
        }
        while (v45);
      }
LABEL_24:
      v30 += v33;
      ++v29;
      v36 += v37;
      if (v29 == v28) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    char v73 = operator new(v4);
    bzero(v73, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v74 = 1;
    }
    else {
      unint64_t v74 = v4 >> 3;
    }
    uint64_t v75 = a1[5];
    while (v74 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = v74 & 0x1FFFFFFFFFFFFFFELL;
      v81 = (void *)(v75 + 8);
      v82 = v73 + 1;
      do
      {
        v78 += *(v81 - 1) * *(v82 - 1);
        v79 += *v81 * *v82;
        v82 += 2;
        v81 += 2;
        v80 -= 2;
      }
      while (v80);
      uint64_t v76 = v79 + v78;
      uint64_t v77 = v74 & 0x1FFFFFFFFFFFFFFELL;
      if (v74 != (v74 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      *(_DWORD *)(v6 + 4 * v76) = (int)(float)(v94 + (float)*(int *)(v6 + 4 * v76));
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v90 = (v4 >> 3) + 1;
        size_t v91 = v4 >> 3;
        while (1)
        {
          uint64_t v92 = (v90 - 2);
          unint64_t v93 = v73[v92] + 1;
          v73[v92] = v93;
          if (v93 < v3[v92]) {
            break;
          }
          v73[(v90 - 2)] = 0;
          LODWORD(v91) = v91 - 1;
          if ((unint64_t)--v90 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v91 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v73);
      return;
    }
    uint64_t v76 = 0;
    uint64_t v77 = 0;
LABEL_63:
    unint64_t v83 = v74 - v77;
    uint64_t v84 = v77;
    v85 = (uint64_t *)(v75 + 8 * v77);
    v86 = &v73[v84];
    do
    {
      uint64_t v88 = *v86++;
      uint64_t v87 = v88;
      uint64_t v89 = *v85++;
      v76 += v89 * v87;
      --v83;
    }
    while (v83);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    unint64_t v22 = (int32x4_t *)(v6 + 4 * v18 + 16);
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v24 = vcvtq_s32_f32(vaddq_f32(v21, vcvtq_f32_s32(*v22)));
      v22[-1] = vcvtq_s32_f32(vaddq_f32(v21, vcvtq_f32_s32(v22[-1])));
      *unint64_t v22 = v24;
      v22 += 2;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v25 = v16 - v17;
      uint64_t v26 = 4 * v19;
      unint64_t v27 = (int *)(v6 + 4 * v18);
      do
      {
        int *v27 = (int)(float)(v94 + (float)*v27);
        unint64_t v27 = (int *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_19267B6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(float)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  float v111 = *(float *)&a2;
  double v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    double v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  double v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unint64_t v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v58 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v59 = 0;
    uint64_t v60 = a1[8];
    unint64_t v61 = v3[1];
    uint64_t v62 = (uint64_t *)a1[5];
    uint64_t v63 = *v62;
    float32x4_t v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v65 = v6 + 2 * v60 + 16;
    uint64_t v66 = 2 * *v62;
    while (!v61)
    {
LABEL_38:
      v60 += v63;
      ++v59;
      v65 += v66;
      if (v59 == v58) {
        return;
      }
    }
    uint64_t v67 = 0;
    unint64_t v68 = v3[2];
    uint64_t v69 = v62[1];
    unint64_t v70 = v68 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v71 = (float16x4_t *)v65;
    uint64_t v72 = v60;
    while (1)
    {
      if (v68)
      {
        unint64_t v73 = 0;
        uint64_t v74 = v62[2];
        uint64_t v75 = v72;
        if (v68 < 0x10)
        {
          float v76 = v111;
        }
        else
        {
          float v76 = v111;
          if (v74 == 1)
          {
            uint64_t v75 = v72 + v70;
            uint64_t v77 = v71;
            unint64_t v78 = v68 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              float16x8_t v79 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v64, vcvtq_f32_f16(*v77))), vaddq_f32(v64, vcvt_hight_f32_f16(*(float16x8_t *)v77->i8)));
              *(float16x8_t *)v77[-2].i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v64, vcvtq_f32_f16(v77[-2]))), vaddq_f32(v64, vcvt_hight_f32_f16(*(float16x8_t *)v77[-2].i8)));
              *(float16x8_t *)v77->i8 = v79;
              v77 += 4;
              v78 -= 16;
            }
            while (v78);
            unint64_t v73 = v68 & 0xFFFFFFFFFFFFFFF0;
            float v76 = v111;
            if (v68 == v70) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v80 = v68 - v73;
        uint64_t v81 = 2 * v74;
        v82 = (__int16 *)(v6 + 2 * v75);
        do
        {
          _H1 = *v82;
          __asm { FCVT            S1, H1 }
          _S1 = v76 + _S1;
          __asm { FCVT            H1, S1 }
          __int16 *v82 = LOWORD(_S1);
          v82 = (__int16 *)((char *)v82 + v81);
          --v80;
        }
        while (v80);
      }
LABEL_41:
      v72 += v69;
      ++v67;
      uint64_t v71 = (float16x4_t *)((char *)v71 + 2 * v69);
      if (v67 == v61) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v35 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a1[8];
    unint64_t v38 = v3[1];
    uint64_t v39 = (uint64_t *)a1[5];
    uint64_t v40 = *v39;
    unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFF0;
    float32x4_t v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v43 = v6 + 2 * v37 + 16;
    uint64_t v44 = 2 * *v39;
    while (1)
    {
      if (v38)
      {
        unint64_t v45 = 0;
        uint64_t v46 = v39[1];
        uint64_t v47 = v37;
        if (v38 < 0x10)
        {
          float v48 = v111;
        }
        else
        {
          float v48 = v111;
          if (v46 == 1)
          {
            uint64_t v47 = v37 + v41;
            uint64_t v49 = (float16x4_t *)v43;
            unint64_t v50 = v38 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              float16x8_t v51 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v42, vcvtq_f32_f16(*v49))), vaddq_f32(v42, vcvt_hight_f32_f16(*(float16x8_t *)v49->i8)));
              *(float16x8_t *)v49[-2].i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v42, vcvtq_f32_f16(v49[-2]))), vaddq_f32(v42, vcvt_hight_f32_f16(*(float16x8_t *)v49[-2].i8)));
              *(float16x8_t *)v49->i8 = v51;
              v49 += 4;
              v50 -= 16;
            }
            while (v50);
            unint64_t v45 = v38 & 0xFFFFFFFFFFFFFFF0;
            float v48 = v111;
            if (v38 == v41) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v52 = v38 - v45;
        uint64_t v53 = 2 * v46;
        float32x4_t v54 = (__int16 *)(v6 + 2 * v47);
        do
        {
          _H1 = *v54;
          __asm { FCVT            S1, H1 }
          _S1 = v48 + _S1;
          __asm { FCVT            H1, S1 }
          __int16 *v54 = LOWORD(_S1);
          float32x4_t v54 = (__int16 *)((char *)v54 + v53);
          --v52;
        }
        while (v52);
      }
LABEL_24:
      v37 += v40;
      ++v36;
      v43 += v44;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v86 = operator new(v4);
    bzero(v86, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v87 = 1;
    }
    else {
      unint64_t v87 = v4 >> 3;
    }
    uint64_t v88 = a1[5];
    while (v87 >= 2)
    {
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      uint64_t v93 = v87 & 0x1FFFFFFFFFFFFFFELL;
      float v94 = (void *)(v88 + 8);
      v95 = v86 + 1;
      do
      {
        v91 += *(v94 - 1) * *(v95 - 1);
        v92 += *v94 * *v95;
        v95 += 2;
        v94 += 2;
        v93 -= 2;
      }
      while (v93);
      uint64_t v89 = v92 + v91;
      uint64_t v90 = v87 & 0x1FFFFFFFFFFFFFFELL;
      if (v87 != (v87 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      uint64_t v103 = 2 * v89;
      _H0 = *(_WORD *)(v6 + v103);
      __asm { FCVT            S0, H0 }
      _S0 = v111 + _S0;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v6 + v103) = LOWORD(_S0);
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v107 = (v4 >> 3) + 1;
        size_t v108 = v4 >> 3;
        while (1)
        {
          uint64_t v109 = (v107 - 2);
          unint64_t v110 = v86[v109] + 1;
          v86[v109] = v110;
          if (v110 < v3[v109]) {
            break;
          }
          v86[(v107 - 2)] = 0;
          LODWORD(v108) = v108 - 1;
          if ((unint64_t)--v107 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v108 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v86);
      return;
    }
    uint64_t v89 = 0;
    uint64_t v90 = 0;
LABEL_63:
    unint64_t v96 = v87 - v90;
    uint64_t v97 = v90;
    v98 = (uint64_t *)(v88 + 8 * v90);
    v99 = &v86[v97];
    do
    {
      uint64_t v101 = *v99++;
      uint64_t v100 = v101;
      uint64_t v102 = *v98++;
      v89 += v102 * v100;
      --v96;
    }
    while (v96);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 0x10) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF0);
    float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    unint64_t v22 = (float16x4_t *)(v6 + 2 * v18 + 16);
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      float16x8_t v24 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v21, vcvtq_f32_f16(*v22))), vaddq_f32(v21, vcvt_hight_f32_f16(*(float16x8_t *)v22->i8)));
      *(float16x8_t *)v22[-2].i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v21, vcvtq_f32_f16(v22[-2]))), vaddq_f32(v21, vcvt_hight_f32_f16(*(float16x8_t *)v22[-2].i8)));
      *(float16x8_t *)v22->i8 = v24;
      v22 += 4;
      v23 -= 16;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v25 = v16 - v17;
      uint64_t v26 = 2 * v19;
      unint64_t v27 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v27;
        __asm { FCVT            S0, H0 }
        _S0 = v111 + _S0;
        __asm { FCVT            H0, S0 }
        __int16 *v27 = LOWORD(_S0);
        unint64_t v27 = (__int16 *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_19267BC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(float)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  float v94 = *(float *)&a2;
  double v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    double v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  double v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unint64_t v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v48 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v49 = 0;
    uint64_t v50 = a1[8];
    unint64_t v51 = v3[1];
    unint64_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v55 = v6 + 4 * v50 + 16;
    uint64_t v56 = 4 * *v52;
    while (!v51)
    {
LABEL_38:
      v50 += v53;
      ++v49;
      v55 += v56;
      if (v49 == v48) {
        return;
      }
    }
    uint64_t v57 = 0;
    unint64_t v58 = v3[2];
    uint64_t v59 = v52[1];
    unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v61 = (float32x4_t *)v55;
    uint64_t v62 = v50;
    while (1)
    {
      if (v58)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v52[2];
        uint64_t v65 = v62;
        if (v58 < 8)
        {
          float v66 = v94;
        }
        else
        {
          float v66 = v94;
          if (v64 == 1)
          {
            uint64_t v65 = v62 + v60;
            uint64_t v67 = v61;
            unint64_t v68 = v58 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v69 = vaddq_f32(v54, *v67);
              v67[-1] = vaddq_f32(v54, v67[-1]);
              float32x4_t *v67 = v69;
              v67 += 2;
              v68 -= 8;
            }
            while (v68);
            unint64_t v63 = v58 & 0xFFFFFFFFFFFFFFF8;
            float v66 = v94;
            if (v58 == v60) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v70 = v58 - v63;
        uint64_t v71 = 4 * v64;
        uint64_t v72 = (float *)(v6 + 4 * v65);
        do
        {
          float *v72 = v66 + *v72;
          uint64_t v72 = (float *)((char *)v72 + v71);
          --v70;
        }
        while (v70);
      }
LABEL_41:
      v62 += v59;
      ++v57;
      unint64_t v61 = (float32x4_t *)((char *)v61 + 4 * v59);
      if (v57 == v51) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v28 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v29 = 0;
    uint64_t v30 = a1[8];
    unint64_t v31 = v3[1];
    uint64_t v32 = (uint64_t *)a1[5];
    uint64_t v33 = *v32;
    unint64_t v34 = v31 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v36 = v6 + 4 * v30 + 16;
    uint64_t v37 = 4 * *v32;
    while (1)
    {
      if (v31)
      {
        unint64_t v38 = 0;
        uint64_t v39 = v32[1];
        uint64_t v40 = v30;
        if (v31 < 8)
        {
          float v41 = v94;
        }
        else
        {
          float v41 = v94;
          if (v39 == 1)
          {
            uint64_t v40 = v30 + v34;
            float32x4_t v42 = (float32x4_t *)v36;
            unint64_t v43 = v31 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v44 = vaddq_f32(v35, *v42);
              v42[-1] = vaddq_f32(v35, v42[-1]);
              float32x4_t *v42 = v44;
              v42 += 2;
              v43 -= 8;
            }
            while (v43);
            unint64_t v38 = v31 & 0xFFFFFFFFFFFFFFF8;
            float v41 = v94;
            if (v31 == v34) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v45 = v31 - v38;
        uint64_t v46 = 4 * v39;
        uint64_t v47 = (float *)(v6 + 4 * v40);
        do
        {
          *uint64_t v47 = v41 + *v47;
          uint64_t v47 = (float *)((char *)v47 + v46);
          --v45;
        }
        while (v45);
      }
LABEL_24:
      v30 += v33;
      ++v29;
      v36 += v37;
      if (v29 == v28) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v73 = operator new(v4);
    bzero(v73, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v74 = 1;
    }
    else {
      unint64_t v74 = v4 >> 3;
    }
    uint64_t v75 = a1[5];
    while (v74 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = v74 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v81 = (void *)(v75 + 8);
      v82 = v73 + 1;
      do
      {
        v78 += *(v81 - 1) * *(v82 - 1);
        v79 += *v81 * *v82;
        v82 += 2;
        v81 += 2;
        v80 -= 2;
      }
      while (v80);
      uint64_t v76 = v79 + v78;
      uint64_t v77 = v74 & 0x1FFFFFFFFFFFFFFELL;
      if (v74 != (v74 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      *(float *)(v6 + 4 * v76) = v94 + *(float *)(v6 + 4 * v76);
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v90 = (v4 >> 3) + 1;
        size_t v91 = v4 >> 3;
        while (1)
        {
          uint64_t v92 = (v90 - 2);
          unint64_t v93 = v73[v92] + 1;
          v73[v92] = v93;
          if (v93 < v3[v92]) {
            break;
          }
          v73[(v90 - 2)] = 0;
          LODWORD(v91) = v91 - 1;
          if ((unint64_t)--v90 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v91 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v73);
      return;
    }
    uint64_t v76 = 0;
    uint64_t v77 = 0;
LABEL_63:
    unint64_t v83 = v74 - v77;
    uint64_t v84 = v77;
    v85 = (uint64_t *)(v75 + 8 * v77);
    v86 = &v73[v84];
    do
    {
      uint64_t v88 = *v86++;
      uint64_t v87 = v88;
      uint64_t v89 = *v85++;
      v76 += v89 * v87;
      --v83;
    }
    while (v83);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    unint64_t v22 = (float32x4_t *)(v6 + 4 * v18 + 16);
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v24 = vaddq_f32(v21, *v22);
      v22[-1] = vaddq_f32(v21, v22[-1]);
      *unint64_t v22 = v24;
      v22 += 2;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v25 = v16 - v17;
      uint64_t v26 = 4 * v19;
      unint64_t v27 = (float *)(v6 + 4 * v18);
      do
      {
        float *v27 = v94 + *v27;
        unint64_t v27 = (float *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_19267C0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::result_of<float ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19267C218(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267C22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267C224);
}

void nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267C4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19267C65C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267C670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267C668);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19267C8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19267CC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267D018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19267D1A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267D1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267D1ACLL);
}

void nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267D45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19267D5E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267D5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267D5F0);
}

void nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267D8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19267DA28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267DA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267DA34);
}

void nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267DCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      double v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19267DE6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267DE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267DE78);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19267E0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267E4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19267E630(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267E644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267E63CLL);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19267E8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267EC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19267EDF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267EE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267EE00);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19267F074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    double v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19267F430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19267F5B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19267F5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19267F5C4);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19267F838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

char *std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v5 = 0x333333333333333;
  }
  else {
    unint64_t v5 = v4;
  }
  uint64_t v24 = 0;
  unint64_t v25 = a1 + 1;
  if (v5 > 0x333333333333333) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = (char *)operator new(80 * v5);
  double v8 = &v7[80 * v3];
  *(_DWORD *)double v8 = *(_DWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  v23.i64[0] = (uint64_t)v8;
  v23.i64[1] = (uint64_t)v8;
  unint64_t v22 = v7;
  *((void *)v8 + 7) = 0;
  *((void *)v8 + 8) = 0;
  *((_OWORD *)v8 + 3) = v9;
  *((void *)v8 + 8) = v10;
  *((void *)v8 + 9) = v11;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v12);
    uint64_t v18 = &v7[80 * v3];
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v12 + v14;
      uint64_t v16 = &v8[v14];
      *((_DWORD *)v16 - 20) = *(_DWORD *)(v12 + v14 - 80);
      *(_OWORD *)(v16 - 72) = *(_OWORD *)(v12 + v14 - 72);
      *(void *)(v15 - 72) = 0;
      *(void *)(v15 - 64) = 0;
      *((void *)v16 - 7) = 0;
      *((void *)v16 - 6) = 0;
      *((void *)v16 - 5) = 0;
      *(_OWORD *)(v16 - 56) = *(_OWORD *)(v12 + v14 - 56);
      *((void *)v16 - 5) = *(void *)(v12 + v14 - 40);
      *(void *)(v15 - 56) = 0;
      *(void *)(v15 - 48) = 0;
      *(void *)(v15 - 40) = 0;
      *((void *)v16 - 4) = 0;
      *((void *)v16 - 3) = 0;
      *((void *)v16 - 2) = 0;
      *((_OWORD *)v16 - 2) = *(_OWORD *)(v12 + v14 - 32);
      *((void *)v16 - 2) = *(void *)(v12 + v14 - 16);
      *(void *)(v15 - 32) = 0;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *((void *)v16 - 1) = *(void *)(v12 + v14 - 8);
      v14 -= 80;
    }
    while (v12 + v14 != v13);
    int64x2_t v17 = *a1;
    uint64_t v18 = &v8[v14];
  }
  uint64_t v19 = v8 + 80;
  a1->i64[0] = (uint64_t)v18;
  a1->i64[1] = (uint64_t)(v8 + 80);
  int64x2_t v23 = v17;
  uint64_t v20 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[80 * v5];
  uint64_t v24 = v20;
  unint64_t v22 = (char *)v17.i64[0];
  std::__split_buffer<nitro::ndarray_container>::~__split_buffer((uint64_t)&v22);
  return v19;
}

void nitro::ndarray_container::ndarray_container<int,(void *)0>(uint64_t a1)
{
  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new[]();
}

void sub_19267FDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  long long v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 56) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 32) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type::operator=<double>(uint64_t a1, void *a2)
{
  switch(*(unsigned char *)(a1 + 8))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          double v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong v10 = v9[1];
          if (!v10) {
            goto LABEL_27;
          }
          uint64_t v11 = v9[2];
          unint64_t v12 = (void *)v9[1];
          if (v11 != v10)
          {
            do
            {
              v11 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v9 + 3), v11);
            }
            while (v11 != v10);
            unint64_t v12 = (void *)v9[1];
          }
          v9[2] = v10;
          goto LABEL_26;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong v13 = v9[1];
          if (v13)
          {
            uint64_t v14 = v9[2];
            uint64_t v15 = (void *)v9[1];
            if (v14 != v13)
            {
              do
                uint64_t v14 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v14 - 32);
              while (v14 != v13);
              uint64_t v15 = (void *)v9[1];
            }
            v9[2] = v13;
            unint64_t v12 = v15;
LABEL_26:
            operator delete(v12);
          }
LABEL_27:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          int64x2_t v17 = (void *)v16[7];
          if (v17)
          {
            v16[8] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v18 = (void *)v16[4];
          if (v18)
          {
            v16[5] = (atomic_ullong)v18;
            operator delete(v18);
          }
          uint64_t v19 = (std::__shared_weak_count *)v16[3];
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          atomic_ullong *volatile v5 = v16;
          uint64_t v6 = 0x10B0C4002311774;
LABEL_38:
          MEMORY[0x192FF16B0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = *a2;
  return a1;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  double v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  uint64_t v11 = __src;
  uint64_t v13 = v7 >> 3;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v20 = v18;
      unsigned __int8 v21 = operator new(8 * v18);
      unint64_t v18 = v20;
      double v8 = (char *)v19;
      uint64_t v13 = v7 >> 3;
      uint64_t v11 = __src;
    }
    else
    {
      unsigned __int8 v21 = 0;
    }
    float32x4_t v35 = &v21[8 * v13];
    uint64_t v36 = &v35[8 * a5];
    uint64_t v37 = v35;
    unint64_t v38 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_56;
    }
    uint64_t v37 = &v21[8 * v13];
    unint64_t v38 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20) {
      goto LABEL_56;
    }
    uint64_t v39 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v37 = &v35[v40];
    unint64_t v38 = &v11[v40];
    float v41 = (long long *)(v11 + 16);
    float32x4_t v42 = &v21[8 * v13 + 16];
    uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *v41;
      *(v42 - 1) = *(v41 - 1);
      _OWORD *v42 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        uint64_t v45 = *(void *)v38;
        v38 += 8;
        *(void *)uint64_t v37 = v45;
        v37 += 8;
      }
      while (v37 != v36);
    }
    uint64_t v46 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      uint64_t v47 = v8;
      uint64_t v46 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68) {
        goto LABEL_57;
      }
      uint64_t v47 = v8;
      uint64_t v46 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
        goto LABEL_57;
      }
      unint64_t v48 = ((unint64_t)(v7 - 8) >> 3) + 1;
      uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v47 = &v8[-v49];
      uint64_t v46 = &v35[-v49];
      uint64_t v50 = 8 * v13 - 16;
      unint64_t v51 = &v21[v50];
      unint64_t v52 = (long long *)(v6 + v50);
      uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        _OWORD *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 4;
      }
      while (v53);
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        do
        {
          uint64_t v55 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v46 - 1) = v55;
          v46 -= 8;
        }
        while (v47 != (char *)v6);
      }
    }
    uint64_t v56 = &v21[8 * v18];
    size_t v57 = v15 - (void)v8;
    if (v57) {
      memmove(&v35[8 * a5], v8, v57);
    }
    *a1 = (unint64_t)v46;
    a1[1] = (unint64_t)&v36[v57];
    a1[2] = (unint64_t)v56;
    if (v6) {
      operator delete((void *)v6);
    }
    return v35;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 3;
  if (v23 >= a5)
  {
    uint64_t v24 = &__src[8 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    uint64_t v24 = &__src[8 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v68 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      uint64_t v13 = v7 >> 3;
      double v8 = (char *)v68;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  unint64_t v27 = &v8[8 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 3;
  uint64_t v30 = (uint64_t *)(v26 - 8 * a5);
  unint64_t v31 = (void *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    unint64_t v33 = v32 + v6 + 8;
    if (v15 > v33) {
      unint64_t v33 = v15;
    }
    unint64_t v34 = v33 + ~v6 - v32;
    if (v34 < 0x58)
    {
      unint64_t v31 = (void *)v26;
      do
      {
LABEL_45:
        uint64_t v64 = *v30++;
        *v31++ = v64;
      }
      while ((unint64_t)v30 < v15);
      goto LABEL_46;
    }
    unint64_t v31 = (void *)v26;
    if ((unint64_t)&v27[-(v7 & 0xFFFFFFFFFFFFFFF8) - v6] < 0x20) {
      goto LABEL_45;
    }
    uint64_t v58 = (v34 >> 3) + 1;
    uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v30 = (uint64_t *)((char *)v30 + v59);
    unint64_t v31 = (void *)(v26 + v59);
    unint64_t v60 = (_OWORD *)(v26 + 16);
    unint64_t v61 = (long long *)(8 * v29 + 8 * v13 + v6 + 16);
    uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v63 = *v61;
      *(v60 - 1) = *(v61 - 1);
      _OWORD *v60 = v63;
      v60 += 2;
      v61 += 2;
      v62 -= 4;
    }
    while (v62);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_45;
    }
  }
LABEL_46:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    uint64_t v65 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    double v8 = v65;
  }
  if (v24 != v11)
  {
    float32x4_t v35 = v8;
    memmove(v8, v11, v24 - v11);
    return v35;
  }
  return v8;
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  atomic_ullong *volatile v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"start", 5);
  atomic_ullong *volatile v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  double v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  atomic_ullong v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 53, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      unint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192680750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  atomic_ullong *volatile v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"end", 3);
  atomic_ullong *volatile v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"start", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  double v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  atomic_ullong v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 54, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      unint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192680AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 53, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        atomic_ullong *volatile v4 = __p;
      }
      else {
        atomic_ullong *volatile v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192680C38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192680C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192680C44);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 54, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        atomic_ullong *volatile v4 = __p;
      }
      else {
        atomic_ullong *volatile v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192680DB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192680DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192680DBCLL);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  atomic_ullong *volatile v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        unint64_t v15 = v23;
      }
      else {
        unint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192681030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  atomic_ullong *volatile v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        unint64_t v15 = v23;
      }
      else {
        unint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926813B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(float *a1, float *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      uint64_t v13 = v6;
      while (1)
      {
        float v16 = *a1;
        float v17 = *(float *)v13;
        if (*a1 < *(float *)v13)
        {
          int v14 = *(_DWORD *)(v13 + 4);
          int v15 = *((_DWORD *)a1 + 1);
        }
        else
        {
          if (v17 < v16) {
            goto LABEL_9;
          }
          int v15 = *((_DWORD *)a1 + 1);
          int v14 = *(_DWORD *)(v13 + 4);
          if (v15 >= v14) {
            goto LABEL_9;
          }
        }
        *(float *)uint64_t v13 = v16;
        *a1 = v17;
        *(_DWORD *)(v13 + 4) = v15;
        *((_DWORD *)a1 + 1) = v14;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)a1, a4, v9, (uint64_t)a1);
LABEL_9:
        v13 += 8;
        if (v13 == a3) {
          goto LABEL_15;
        }
      }
    }
    a3 = v6;
LABEL_15:
    if (v8 >= 9)
    {
      unint64_t v18 = (unint64_t)v8 >> 3;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<std::pair<float,int> *>>(a1, v6, a4, v18);
        v6 -= 8;
      }
      while (v18-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) | 1;
      uint64_t v8 = result + 8 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = *(float *)(v8 + 8);
        if (v10 < *(float *)v8 || *(float *)v8 >= v10 && *(_DWORD *)(v8 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
        {
          v8 += 8;
          uint64_t v7 = v9;
        }
      }
      float v11 = *(float *)a4;
      float v12 = *(float *)v8;
      if (*(float *)a4 >= *(float *)v8)
      {
        int v13 = *(_DWORD *)(v8 + 4);
        if (v12 >= v11)
        {
          int v14 = *(_DWORD *)(a4 + 4);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          int v14 = *(_DWORD *)(a4 + 4);
        }
        *(float *)a4 = v12;
        *(_DWORD *)(a4 + 4) = v13;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = result + 8 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              float v18 = *(float *)(v15 + 8);
              if (v18 < *(float *)v15
                || *(float *)v15 >= v18 && *(_DWORD *)(v15 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
              {
                v15 += 8;
                uint64_t v7 = v17;
              }
            }
            float v19 = *(float *)v15;
            if (v11 < *(float *)v15) {
              break;
            }
            int v20 = *(_DWORD *)(v15 + 4);
            if (v19 >= v11 && v14 < v20) {
              break;
            }
            *(float *)uint64_t v8 = v19;
            *(_DWORD *)(v8 + 4) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(float *)uint64_t v15 = v11;
        *(_DWORD *)(v15 + 4) = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<std::pair<float,int> *>>(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    int v5 = *result;
    int v6 = result[1];
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        float v12 = *((float *)v7 + 2);
        if (v12 < *(float *)v7 || *(float *)v7 >= v12 && v7[3] < v8[2 * v9 + 1])
        {
          v7 += 2;
          uint64_t v4 = v11;
        }
      }
      *uint64_t v8 = *v7;
      v8[1] = v7[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (_DWORD *)(a2 - 8))
    {
      *uint64_t v7 = v5;
      v7[1] = v6;
      return result;
    }
    *uint64_t v7 = *(_DWORD *)(a2 - 8);
    v7[1] = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 8) = v5;
    *(_DWORD *)(a2 - 4) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 8;
    if (v13 >= 9)
    {
      unint64_t v14 = ((unint64_t)v13 >> 3) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = (float *)&result[2 * (v14 >> 1)];
      float v17 = *(float *)v7;
      float v18 = *v16;
      if (*(float *)v7 >= *v16)
      {
        if (v18 < v17) {
          return result;
        }
        int v19 = v7[1];
        int v20 = result[2 * v15 + 1];
        if (v19 >= v20) {
          return result;
        }
      }
      else
      {
        int v19 = v7[1];
        int v20 = *((_DWORD *)v16 + 1);
      }
      *(float *)uint64_t v7 = v18;
      v7[1] = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v23 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          unsigned __int8 v21 = (float *)&result[2 * v15];
          float v24 = *v21;
          if (v17 < *v21)
          {
            int v22 = *((_DWORD *)v21 + 1);
          }
          else
          {
            if (v24 < v17) {
              break;
            }
            int v22 = result[2 * v15 + 1];
            if (v19 >= v22) {
              break;
            }
          }
          *uint64_t v16 = v24;
          *((_DWORD *)v16 + 1) = v22;
          uint64_t v16 = (float *)&result[2 * v15];
          if (v23 <= 1) {
            goto LABEL_19;
          }
        }
      }
      unsigned __int8 v21 = v16;
LABEL_19:
      *unsigned __int8 v21 = v17;
      *((_DWORD *)v21 + 1) = v19;
    }
  }
  return result;
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    float v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        unint64_t v15 = v23;
      }
      else {
        unint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    float v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192681B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)a1 = 9;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new[]();
}

void sub_192681EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  uint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 56) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 32) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__insert_with_size[abi:ne180100]<int *,int *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1) {
    return v8;
  }
  unint64_t v13 = a1[1];
  unint64_t v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    unint64_t v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v12 - v6;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      float v18 = (char *)operator new(4 * v16);
    }
    else
    {
      float v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      float v18 = 0;
    }
    size_t v32 = 4 * a5;
    uint64_t v57 = 4 * a5;
    uint64_t v33 = &v18[4 * (v7 >> 2)];
    unint64_t v34 = v18;
    memcpy(v33, __src, v32);
    float32x4_t v35 = v33;
    if ((void *)v6 != a2)
    {
      uint64_t v36 = v17;
      float32x4_t v35 = v33;
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_50;
      }
      uint64_t v36 = v17;
      float32x4_t v35 = v33;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v34[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_50;
      }
      unint64_t v37 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v36 = &v17[-v38];
      float32x4_t v35 = &v33[-v38];
      uint64_t v39 = 4 * (v7 >> 2) - 16;
      uint64_t v40 = &v34[v39];
      float v41 = (long long *)(v6 + v39);
      uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *v41;
        *((_OWORD *)v40 - 1) = *(v41 - 1);
        *(_OWORD *)uint64_t v40 = v43;
        v40 -= 32;
        v41 -= 2;
        v42 -= 8;
      }
      while (v42);
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          int v44 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v35 - 1) = v44;
          v35 -= 4;
        }
        while (v36 != (char *)v6);
      }
    }
    uint64_t v45 = &v34[4 * v16];
    size_t v46 = v13 - (void)v17;
    if (v46) {
      memmove(&v33[v57], v17, v46);
    }
    *a1 = (unint64_t)v35;
    a1[1] = (unint64_t)&v33[v57 + v46];
    a1[2] = (unint64_t)v45;
    if (v6) {
      operator delete((void *)v6);
    }
    return v33;
  }
  uint64_t v19 = v13 - (void)v8;
  uint64_t v20 = (uint64_t)(v13 - (void)v8) >> 2;
  if (v20 >= a5)
  {
    unsigned __int8 v21 = &__src[4 * a5];
    unint64_t v23 = a1[1];
  }
  else
  {
    unsigned __int8 v21 = &__src[4 * v20];
    int64_t v22 = a4 - v21;
    if (a4 != v21)
    {
      unint64_t v56 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      uint64_t v8 = (char *)v56;
    }
    unint64_t v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1) {
      return v8;
    }
  }
  unsigned __int8 v24 = &v8[4 * a5];
  size_t v25 = v23 - (void)v24;
  uint64_t v26 = (uint64_t)(v23 - (void)v24) >> 2;
  unint64_t v27 = (int *)(v23 - 4 * a5);
  size_t v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    unint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    unint64_t v30 = v29 + v6 + 4;
    if (v13 > v30) {
      unint64_t v30 = v13;
    }
    unint64_t v31 = v30 + ~v6 - v29;
    if (v31 < 0x2C)
    {
      size_t v28 = (_DWORD *)v23;
      do
      {
LABEL_39:
        int v53 = *v27++;
        *v28++ = v53;
      }
      while ((unint64_t)v27 < v13);
      goto LABEL_40;
    }
    size_t v28 = (_DWORD *)v23;
    if ((unint64_t)&v24[-(v7 & 0xFFFFFFFFFFFFFFFCLL) - v6] < 0x20) {
      goto LABEL_39;
    }
    uint64_t v47 = (v31 >> 2) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v27 = (int *)((char *)v27 + v48);
    size_t v28 = (_DWORD *)(v23 + v48);
    uint64_t v49 = (_OWORD *)(v23 + 16);
    uint64_t v50 = (long long *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
    uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *uint64_t v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_39;
    }
  }
LABEL_40:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    long long v54 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    uint64_t v8 = v54;
  }
  if (v21 != __src)
  {
    uint64_t v33 = v8;
    memmove(v8, __src, v21 - __src);
    return v33;
  }
  return v8;
}

void nitro::ndarray_container::ndarray_container<half,(void *)0>(uint64_t a1)
{
  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new[]();
}

void sub_1926824E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  uint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 56) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 32) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

char *std::vector<half>::__insert_with_size[abi:ne180100]<half *,half *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
  if (a5 < 1) {
    return v8;
  }
  unint64_t v13 = a1[1];
  unint64_t v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 1)
  {
    uint64_t v14 = a5 + ((uint64_t)(v13 - v6) >> 1);
    if (v14 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = v12 - v6;
    if (v15 > v14) {
      uint64_t v14 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 < 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      float v18 = (char *)operator new(2 * v16);
    }
    else
    {
      float v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      float v18 = 0;
    }
    size_t v32 = 2 * a5;
    uint64_t v57 = 2 * a5;
    uint64_t v33 = &v18[2 * (v7 >> 1)];
    unint64_t v34 = v18;
    memcpy(v33, __src, v32);
    float32x4_t v35 = v33;
    if ((void *)v6 != a2)
    {
      uint64_t v36 = v17;
      float32x4_t v35 = v33;
      if ((unint64_t)(v7 - 2) < 0x1E) {
        goto LABEL_50;
      }
      uint64_t v36 = v17;
      float32x4_t v35 = v33;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) + v6 - (unint64_t)&v34[v7 & 0xFFFFFFFFFFFFFFFELL] < 0x20) {
        goto LABEL_50;
      }
      unint64_t v37 = ((unint64_t)(v7 - 2) >> 1) + 1;
      unint64_t v38 = 2 * (v37 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v36 = &v17[-v38];
      float32x4_t v35 = &v33[-v38];
      uint64_t v39 = 2 * (v7 >> 1) - 16;
      uint64_t v40 = &v34[v39];
      float v41 = (long long *)(v6 + v39);
      unint64_t v42 = v37 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v43 = *v41;
        *((_OWORD *)v40 - 1) = *(v41 - 1);
        *(_OWORD *)uint64_t v40 = v43;
        v40 -= 32;
        v41 -= 2;
        v42 -= 16;
      }
      while (v42);
      if (v37 != (v37 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_50:
        do
        {
          __int16 v44 = *((_WORD *)v36 - 1);
          v36 -= 2;
          *((_WORD *)v35 - 1) = v44;
          v35 -= 2;
        }
        while (v36 != (char *)v6);
      }
    }
    uint64_t v45 = &v34[2 * v16];
    size_t v46 = v13 - (void)v17;
    if (v46) {
      memmove(&v33[v57], v17, v46);
    }
    *a1 = (unint64_t)v35;
    a1[1] = (unint64_t)&v33[v57 + v46];
    a1[2] = (unint64_t)v45;
    if (v6) {
      operator delete((void *)v6);
    }
    return v33;
  }
  uint64_t v19 = v13 - (void)v8;
  uint64_t v20 = (uint64_t)(v13 - (void)v8) >> 1;
  if (v20 >= a5)
  {
    unsigned __int8 v21 = &__src[2 * a5];
    unint64_t v23 = a1[1];
  }
  else
  {
    unsigned __int8 v21 = &__src[2 * v20];
    int64_t v22 = a4 - v21;
    if (a4 != v21)
    {
      unint64_t v56 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
      memmove((void *)a1[1], &__src[2 * v20], a4 - v21);
      uint64_t v8 = (char *)v56;
    }
    unint64_t v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1) {
      return v8;
    }
  }
  unsigned __int8 v24 = &v8[2 * a5];
  size_t v25 = v23 - (void)v24;
  uint64_t v26 = (uint64_t)(v23 - (void)v24) >> 1;
  unint64_t v27 = (__int16 *)(v23 - 2 * a5);
  size_t v28 = (_WORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    unint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v25;
    unint64_t v30 = v29 + v6 + 2;
    if (v13 > v30) {
      unint64_t v30 = v13;
    }
    unint64_t v31 = v30 + ~v6 - v29;
    if (v31 < 0x1E)
    {
      size_t v28 = (_WORD *)v23;
      do
      {
LABEL_39:
        __int16 v53 = *v27++;
        *v28++ = v53;
      }
      while ((unint64_t)v27 < v13);
      goto LABEL_40;
    }
    size_t v28 = (_WORD *)v23;
    if ((unint64_t)&v24[-(v7 & 0xFFFFFFFFFFFFFFFELL) - v6] < 0x20) {
      goto LABEL_39;
    }
    uint64_t v47 = (v31 >> 1) + 1;
    unint64_t v48 = 2 * (v47 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v27 = (__int16 *)((char *)v27 + v48);
    size_t v28 = (_WORD *)(v23 + v48);
    uint64_t v49 = (_OWORD *)(v23 + 16);
    uint64_t v50 = (long long *)(2 * v26 + 2 * (v7 >> 1) + v6 + 16);
    unint64_t v51 = v47 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *uint64_t v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 16;
    }
    while (v51);
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_39;
    }
  }
LABEL_40:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    long long v54 = v8;
    memmove((void *)(v23 - 2 * v26), v8, v25);
    uint64_t v8 = v54;
  }
  if (v21 != __src)
  {
    uint64_t v33 = v8;
    memmove(v8, __src, v21 - __src);
    return v33;
  }
  return v8;
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<float *,float *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1) {
    return v8;
  }
  unint64_t v13 = a1[1];
  unint64_t v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    unint64_t v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v12 - v6;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      float v18 = (char *)operator new(4 * v16);
    }
    else
    {
      float v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      float v18 = 0;
    }
    size_t v32 = 4 * a5;
    uint64_t v57 = 4 * a5;
    uint64_t v33 = &v18[4 * (v7 >> 2)];
    unint64_t v34 = v18;
    memcpy(v33, __src, v32);
    float32x4_t v35 = v33;
    if ((void *)v6 != a2)
    {
      uint64_t v36 = v17;
      float32x4_t v35 = v33;
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_50;
      }
      uint64_t v36 = v17;
      float32x4_t v35 = v33;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v34[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_50;
      }
      unint64_t v37 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v36 = &v17[-v38];
      float32x4_t v35 = &v33[-v38];
      uint64_t v39 = 4 * (v7 >> 2) - 16;
      uint64_t v40 = &v34[v39];
      float v41 = (long long *)(v6 + v39);
      uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *v41;
        *((_OWORD *)v40 - 1) = *(v41 - 1);
        *(_OWORD *)uint64_t v40 = v43;
        v40 -= 32;
        v41 -= 2;
        v42 -= 8;
      }
      while (v42);
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          int v44 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v35 - 1) = v44;
          v35 -= 4;
        }
        while (v36 != (char *)v6);
      }
    }
    uint64_t v45 = &v34[4 * v16];
    size_t v46 = v13 - (void)v17;
    if (v46) {
      memmove(&v33[v57], v17, v46);
    }
    *a1 = (unint64_t)v35;
    a1[1] = (unint64_t)&v33[v57 + v46];
    a1[2] = (unint64_t)v45;
    if (v6) {
      operator delete((void *)v6);
    }
    return v33;
  }
  uint64_t v19 = v13 - (void)v8;
  uint64_t v20 = (uint64_t)(v13 - (void)v8) >> 2;
  if (v20 >= a5)
  {
    unsigned __int8 v21 = &__src[4 * a5];
    unint64_t v23 = a1[1];
  }
  else
  {
    unsigned __int8 v21 = &__src[4 * v20];
    int64_t v22 = a4 - v21;
    if (a4 != v21)
    {
      unint64_t v56 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      uint64_t v8 = (char *)v56;
    }
    unint64_t v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1) {
      return v8;
    }
  }
  unsigned __int8 v24 = &v8[4 * a5];
  size_t v25 = v23 - (void)v24;
  uint64_t v26 = (uint64_t)(v23 - (void)v24) >> 2;
  unint64_t v27 = (int *)(v23 - 4 * a5);
  size_t v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    unint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    unint64_t v30 = v29 + v6 + 4;
    if (v13 > v30) {
      unint64_t v30 = v13;
    }
    unint64_t v31 = v30 + ~v6 - v29;
    if (v31 < 0x2C)
    {
      size_t v28 = (_DWORD *)v23;
      do
      {
LABEL_39:
        int v53 = *v27++;
        *v28++ = v53;
      }
      while ((unint64_t)v27 < v13);
      goto LABEL_40;
    }
    size_t v28 = (_DWORD *)v23;
    if ((unint64_t)&v24[-(v7 & 0xFFFFFFFFFFFFFFFCLL) - v6] < 0x20) {
      goto LABEL_39;
    }
    uint64_t v47 = (v31 >> 2) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v27 = (int *)((char *)v27 + v48);
    size_t v28 = (_DWORD *)(v23 + v48);
    uint64_t v49 = (_OWORD *)(v23 + 16);
    uint64_t v50 = (long long *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
    uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *uint64_t v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_39;
    }
  }
LABEL_40:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    long long v54 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    uint64_t v8 = v54;
  }
  if (v21 != __src)
  {
    uint64_t v33 = v8;
    memmove(v8, __src, v21 - __src);
    return v33;
  }
  return v8;
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Softmax(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Softmax(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    float v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192682DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    float v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192683154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIhEEEEDaT_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"shape[batchdim]", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    unint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    float v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        int64_t v22 = v30;
      }
      else {
        int64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  size_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192683568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIiEEEEDaT_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"shape[batchdim]", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    unint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    float v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        int64_t v22 = v30;
      }
      else {
        int64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  size_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192683978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIDhEEEEDaT_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"shape[batchdim]", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    unint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    float v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        int64_t v22 = v30;
      }
      else {
        int64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  size_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192683D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIfEEEEDaT_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"shape[batchdim]", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    unint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    float v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        int64_t v22 = v30;
      }
      else {
        int64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  size_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192684198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192684514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192684894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192684C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192684F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192685314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192685694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192685A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192685D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192686114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192686494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192686814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192686B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192686F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192687294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192687614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192687994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192687D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Tanh(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Tanh(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192688094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Cos(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Cos(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192688414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Sin(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Sin(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  float v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192688794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_3(atomic_ullong *a1@<X8>)
{
}

void OUTLINED_FUNCTION_11()
{
  atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 16), v1);
}

void OUTLINED_FUNCTION_17()
{
  *(void *)(v0 - 16) = 0;
  *(unsigned char *)(v0 - 8) = 0;
}

uint64_t OUTLINED_FUNCTION_18_0(uint64_t a1)
{
  return *(void *)a1;
}

void nitro::nitro_builtins::MakeTensorArray(atomic_ullong *volatile *a1)
{
  OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    OUTLINED_FUNCTION_10_1();
    if (v1)
    {
      if (*(char *)(v1 + 31) < 0) {
        operator delete(*(void **)(v1 + 8));
      }
      OUTLINED_FUNCTION_5_1();
    }
    OUTLINED_FUNCTION_5();
  }
}

{
  uint64_t v1;
  char v2;
  void *v3;

  OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    OUTLINED_FUNCTION_10_1();
    if (v1)
    {
      unint64_t v3 = *(void **)(v1 + 8);
      if (v3)
      {
        *(void *)(v1 + 16) = v3;
        operator delete(v3);
      }
      OUTLINED_FUNCTION_6_0();
    }
    OUTLINED_FUNCTION_5();
  }
}

void nitro::nitro_builtins::Range(uint64_t a1)
{
  char v2 = (void *)OUTLINED_FUNCTION_18_0(a1);
  if (v2)
  {
    std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v2);
    OUTLINED_FUNCTION_4_1();
  }
  void *v1 = 0;
}

void nitro::nitro_builtins::TopK(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_18_0(a1);
  if (v2)
  {
    std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v2);
    OUTLINED_FUNCTION_2();
  }
  void *v1 = 0;
}

void nitro::nitro_builtins::convert_slice_array_to_list(atomic_ullong *volatile *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    unint64_t v3 = v1;
    atomic_ullong *volatile v4 = *v1;
    if (v4)
    {
      std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v4);
      OUTLINED_FUNCTION_4_1();
    }
    atomic_ullong *volatile *v3 = 0;
  }
  OUTLINED_FUNCTION_5();
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile *v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    unint64_t v3 = v1;
    atomic_ullong *volatile v4 = (uint64_t)*v1;
    if (v4)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v4);
      OUTLINED_FUNCTION_2();
    }
    atomic_ullong *volatile *v3 = 0;
  }
  OUTLINED_FUNCTION_5();
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile *v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    unint64_t v3 = v1;
    atomic_ullong *volatile v4 = (uint64_t)*v1;
    if (v4)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v4);
      OUTLINED_FUNCTION_2();
    }
    atomic_ullong *volatile *v3 = 0;
  }
  OUTLINED_FUNCTION_5();
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>()
{
  OUTLINED_FUNCTION_19_0();
  do
  {
    OUTLINED_FUNCTION_21_0();
    switch(v1)
    {
      case 0:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v3 = *(void *)(v0 - 16);
          if (!v3) {
            goto LABEL_29;
          }
          if (*(char *)(v3 + 31) < 0) {
            operator delete(*(void **)(v3 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_28;
        }
        break;
      case 1:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v4 = *(void *)(v0 - 16);
          if (!v4) {
            goto LABEL_29;
          }
          uint64_t v5 = *(void **)(v4 + 8);
          if (v5)
          {
            *(void *)(v4 + 16) = v5;
            operator delete(v5);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_28;
        }
        break;
      case 2:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v6 = *(void *)(v0 - 16);
          if (!v6) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v6);
          goto LABEL_23;
        }
        break;
      case 3:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v7 = *(void *)(v0 - 16);
          if (!v7) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v7);
LABEL_23:
          OUTLINED_FUNCTION_12_0();
          goto LABEL_28;
        }
        break;
      case 7:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v8 = *(void **)(v0 - 16);
          if (v8)
          {
            std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v8);
            OUTLINED_FUNCTION_13_0();
LABEL_28:
            MEMORY[0x192FF16B0]();
          }
LABEL_29:
          *(void *)(v0 - 16) = 0;
        }
        break;
      default:
        break;
    }
    OUTLINED_FUNCTION_17();
  }
  while (!v2);
}

{
  atomic_ullong **v0;
  int v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  OUTLINED_FUNCTION_16_0();
  switch(v1)
  {
    case 0:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v4 = *v2;
        if (*v2)
        {
          if (*(char *)(v4 + 31) < 0) {
            operator delete(*(void **)(v4 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_27;
        }
      }
      break;
    case 1:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          uint64_t v7 = *(void **)(v6 + 8);
          if (v7)
          {
            *(void *)(v6 + 16) = v7;
            operator delete(v7);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_27;
        }
      }
      break;
    case 2:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v8)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*v8);
        goto LABEL_22;
      }
      break;
    case 3:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v9)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*v9);
LABEL_22:
        OUTLINED_FUNCTION_12_0();
        goto LABEL_27;
      }
      break;
    case 7:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v10)
      {
        std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*v10);
        OUTLINED_FUNCTION_13_0();
LABEL_27:
        MEMORY[0x192FF16B0]();
      }
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  OUTLINED_FUNCTION_19_0();
  do
  {
    OUTLINED_FUNCTION_21_0();
    switch(v1)
    {
      case 0:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v3 = *(void *)(v0 - 16);
          if (!v3) {
            goto LABEL_29;
          }
          if (*(char *)(v3 + 31) < 0) {
            operator delete(*(void **)(v3 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_28;
        }
        break;
      case 1:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v4 = *(void *)(v0 - 16);
          if (!v4) {
            goto LABEL_29;
          }
          uint64_t v5 = *(void **)(v4 + 8);
          if (v5)
          {
            *(void *)(v4 + 16) = v5;
            operator delete(v5);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_28;
        }
        break;
      case 2:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v6 = *(void *)(v0 - 16);
          if (!v6) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v6);
          goto LABEL_23;
        }
        break;
      case 3:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v7 = *(void *)(v0 - 16);
          if (!v7) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v7);
LABEL_23:
          OUTLINED_FUNCTION_12_0();
          goto LABEL_28;
        }
        break;
      case 7:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v8 = *(void **)(v0 - 16);
          if (v8)
          {
            std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v8);
            OUTLINED_FUNCTION_13_0();
LABEL_28:
            MEMORY[0x192FF16B0]();
          }
LABEL_29:
          *(void *)(v0 - 16) = 0;
        }
        break;
      default:
        break;
    }
    OUTLINED_FUNCTION_17();
  }
  while (!v2);
}

{
  atomic_ullong **v0;
  int v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  OUTLINED_FUNCTION_16_0();
  switch(v1)
  {
    case 0:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v4 = *v2;
        if (*v2)
        {
          if (*(char *)(v4 + 31) < 0) {
            operator delete(*(void **)(v4 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_27;
        }
      }
      break;
    case 1:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          uint64_t v7 = *(void **)(v6 + 8);
          if (v7)
          {
            *(void *)(v6 + 16) = v7;
            operator delete(v7);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_27;
        }
      }
      break;
    case 2:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v8)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*v8);
        goto LABEL_22;
      }
      break;
    case 3:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v9)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*v9);
LABEL_22:
        OUTLINED_FUNCTION_12_0();
        goto LABEL_27;
      }
      break;
    case 7:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v10)
      {
        std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*v10);
        OUTLINED_FUNCTION_13_0();
LABEL_27:
        MEMORY[0x192FF16B0]();
      }
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  OUTLINED_FUNCTION_19_0();
  do
  {
    OUTLINED_FUNCTION_21_0();
    switch(v1)
    {
      case 0:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v3 = *(void *)(v0 - 16);
          if (!v3) {
            goto LABEL_29;
          }
          if (*(char *)(v3 + 31) < 0) {
            operator delete(*(void **)(v3 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_28;
        }
        break;
      case 1:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v4 = *(void *)(v0 - 16);
          if (!v4) {
            goto LABEL_29;
          }
          uint64_t v5 = *(void **)(v4 + 8);
          if (v5)
          {
            *(void *)(v4 + 16) = v5;
            operator delete(v5);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_28;
        }
        break;
      case 2:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v6 = *(void *)(v0 - 16);
          if (!v6) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v6);
          goto LABEL_23;
        }
        break;
      case 3:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v7 = *(void *)(v0 - 16);
          if (!v7) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v7);
LABEL_23:
          OUTLINED_FUNCTION_12_0();
          goto LABEL_28;
        }
        break;
      case 7:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v8 = *(void **)(v0 - 16);
          if (v8)
          {
            std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v8);
            OUTLINED_FUNCTION_13_0();
LABEL_28:
            MEMORY[0x192FF16B0]();
          }
LABEL_29:
          *(void *)(v0 - 16) = 0;
        }
        break;
      default:
        break;
    }
    OUTLINED_FUNCTION_17();
  }
  while (!v2);
}

{
  atomic_ullong **v0;
  int v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  OUTLINED_FUNCTION_16_0();
  switch(v1)
  {
    case 0:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v4 = *v2;
        if (*v2)
        {
          if (*(char *)(v4 + 31) < 0) {
            operator delete(*(void **)(v4 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_27;
        }
      }
      break;
    case 1:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          uint64_t v7 = *(void **)(v6 + 8);
          if (v7)
          {
            *(void *)(v6 + 16) = v7;
            operator delete(v7);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_27;
        }
      }
      break;
    case 2:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v8)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*v8);
        goto LABEL_22;
      }
      break;
    case 3:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v9)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*v9);
LABEL_22:
        OUTLINED_FUNCTION_12_0();
        goto LABEL_27;
      }
      break;
    case 7:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v10)
      {
        std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*v10);
        OUTLINED_FUNCTION_13_0();
LABEL_27:
        MEMORY[0x192FF16B0]();
      }
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  OUTLINED_FUNCTION_19_0();
  do
  {
    OUTLINED_FUNCTION_21_0();
    switch(v1)
    {
      case 0:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v3 = *(void *)(v0 - 16);
          if (!v3) {
            goto LABEL_29;
          }
          if (*(char *)(v3 + 31) < 0) {
            operator delete(*(void **)(v3 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_28;
        }
        break;
      case 1:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v4 = *(void *)(v0 - 16);
          if (!v4) {
            goto LABEL_29;
          }
          uint64_t v5 = *(void **)(v4 + 8);
          if (v5)
          {
            *(void *)(v4 + 16) = v5;
            operator delete(v5);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_28;
        }
        break;
      case 2:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v6 = *(void *)(v0 - 16);
          if (!v6) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v6);
          goto LABEL_23;
        }
        break;
      case 3:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v7 = *(void *)(v0 - 16);
          if (!v7) {
            goto LABEL_29;
          }
          std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v7);
LABEL_23:
          OUTLINED_FUNCTION_12_0();
          goto LABEL_28;
        }
        break;
      case 7:
        OUTLINED_FUNCTION_11();
        if (v2)
        {
          uint64_t v8 = *(void **)(v0 - 16);
          if (v8)
          {
            std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v8);
            OUTLINED_FUNCTION_13_0();
LABEL_28:
            MEMORY[0x192FF16B0]();
          }
LABEL_29:
          *(void *)(v0 - 16) = 0;
        }
        break;
      default:
        break;
    }
    OUTLINED_FUNCTION_17();
  }
  while (!v2);
}

{
  atomic_ullong **v0;
  int v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  OUTLINED_FUNCTION_16_0();
  switch(v1)
  {
    case 0:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v4 = *v2;
        if (*v2)
        {
          if (*(char *)(v4 + 31) < 0) {
            operator delete(*(void **)(v4 + 8));
          }
          OUTLINED_FUNCTION_15_0();
          goto LABEL_27;
        }
      }
      break;
    case 1:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3)
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          uint64_t v7 = *(void **)(v6 + 8);
          if (v7)
          {
            *(void *)(v6 + 16) = v7;
            operator delete(v7);
          }
          OUTLINED_FUNCTION_14_0();
          goto LABEL_27;
        }
      }
      break;
    case 2:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v8)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*v8);
        goto LABEL_22;
      }
      break;
    case 3:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v9)
      {
        std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*v9);
LABEL_22:
        OUTLINED_FUNCTION_12_0();
        goto LABEL_27;
      }
      break;
    case 7:
      OUTLINED_FUNCTION_2_3(*v0);
      if (v3 && *v10)
      {
        std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*v10);
        OUTLINED_FUNCTION_13_0();
LABEL_27:
        MEMORY[0x192FF16B0]();
      }
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_5();
}

double nitro::model_metadata::model_metadata(nitro::model_metadata *this)
{
  *((unsigned char *)this + 96) = 0;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void nitro::model_metadata::~model_metadata(nitro::model_metadata *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 10);
    uint64_t v4 = (void *)*((void *)this + 9);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 7);
    uint64_t v7 = (void *)*((void *)this + 6);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v5;
    operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 4);
    uint64_t v10 = (void *)*((void *)this + 3);
    if (v9 != v8)
    {
      uint64_t v11 = *((void *)this + 4);
      do
      {
        unint64_t v13 = *(void **)(v11 - 24);
        v11 -= 24;
        unint64_t v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v8;
    operator delete(v10);
  }
  uint64_t v14 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v15 = *((void *)this + 1);
    uint64_t v16 = *(void **)this;
    if (v15 != v14)
    {
      uint64_t v17 = *((void *)this + 1);
      do
      {
        uint64_t v19 = *(void **)(v17 - 24);
        v17 -= 24;
        float v18 = v19;
        if (v19)
        {
          *(void *)(v15 - 16) = v18;
          operator delete(v18);
        }
        uint64_t v15 = v17;
      }
      while (v17 != v14);
      uint64_t v16 = *(void **)this;
    }
    *((void *)this + 1) = v14;
    operator delete(v16);
  }
}

uint64_t nitro::model_metadata::load_model_metadata(char **a1)
{
  v91[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v89);
  if (*(_DWORD *)&v90[*(void *)(v89[0] - 24) + 16]) {
    nitro::model_metadata::load_model_metadata(std::string const&)::$_0::operator()();
  }
  v82[0] = v89;
  memset(&v82[1], 0, 24);
  uint64_t v87 = 0;
  char v88 = 0;
  v85 = 0;
  char v86 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v82, (uint64_t)&v87);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v82, (uint64_t)&v85);
  nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get((char *)&v87, &v80);
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = v80;
  a1[2] = v81;
  nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get((char *)&v85, &v80);
  uint64_t v8 = (void **)(a1 + 3);
  uint64_t v9 = a1[3];
  if (v9)
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = a1[3];
    if (v10 != v9)
    {
      unint64_t v12 = a1[4];
      do
      {
        uint64_t v14 = (void *)*((void *)v12 - 3);
        v12 -= 24;
        unint64_t v13 = v14;
        if (v14)
        {
          *((void *)v10 - 2) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      uint64_t v11 = (char *)*v8;
    }
    a1[4] = v9;
    operator delete(v11);
    *uint64_t v8 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = v80;
  a1[5] = v81;
  unint64_t v83 = 0;
  char v84 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v82, (uint64_t)&v83);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v82, (uint64_t)&v87);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v82, (uint64_t)&v85);
  nitro::flexible_type_converter<std::vector<std::string>>::get(&v87, (uint64_t)&v80);
  uint64_t v15 = (void **)(a1 + 6);
  uint64_t v16 = a1[6];
  if (v16)
  {
    uint64_t v17 = a1[7];
    float v18 = a1[6];
    if (v17 != v16)
    {
      do
      {
        if (*(v17 - 1) < 0) {
          operator delete(*((void **)v17 - 3));
        }
        v17 -= 24;
      }
      while (v17 != v16);
      float v18 = (char *)*v15;
    }
    a1[7] = v16;
    operator delete(v18);
    *uint64_t v15 = 0;
    a1[7] = 0;
    a1[8] = 0;
  }
  *((_OWORD *)a1 + 3) = v80;
  a1[8] = v81;
  nitro::flexible_type_converter<std::vector<std::string>>::get(&v85, (uint64_t)&v80);
  uint64_t v19 = (void **)(a1 + 9);
  uint64_t v20 = a1[9];
  if (v20)
  {
    unsigned __int8 v21 = a1[10];
    int64_t v22 = a1[9];
    if (v21 != v20)
    {
      do
      {
        if (*(v21 - 1) < 0) {
          operator delete(*((void **)v21 - 3));
        }
        v21 -= 24;
      }
      while (v21 != v20);
      int64_t v22 = (char *)*v19;
    }
    a1[10] = v20;
    operator delete(v22);
    *uint64_t v19 = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = v80;
  a1[11] = v81;
  *((unsigned char *)a1 + 96) = 1;
  uint64_t v23 = (uint64_t **)a1[3];
  unsigned __int8 v24 = a1[4];
  if (v23 != (uint64_t **)v24)
  {
    char v25 = 1;
    do
    {
      uint64_t v26 = *v23;
      unint64_t v27 = v23[1];
      if (*v23 != v27)
      {
        do
        {
          uint64_t v29 = *v26++;
          uint64_t v28 = v29;
          if (v25) {
            BOOL v30 = v28 <= 0;
          }
          else {
            BOOL v30 = 1;
          }
          char v25 = !v30;
        }
        while (v26 != v27);
        *((unsigned char *)a1 + 96) = v25;
      }
      v23 += 3;
    }
    while (v23 != (uint64_t **)v24);
  }
  switch(v84)
  {
    case 2:
      if (atomic_fetch_add(v83, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned __int8 v31 = v83;
        if (v83)
        {
          if (*((char *)v83 + 31) < 0) {
            operator delete((void *)v83[1]);
          }
          size_t v32 = v31;
          uint64_t v33 = 0x1012C404EF22A49;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v83, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v38 = v83;
        if (v83)
        {
          uint64_t v39 = (void *)v83[1];
          if (v39)
          {
            v83[2] = (atomic_ullong)v39;
            operator delete(v39);
          }
          size_t v32 = v38;
          uint64_t v33 = 0x1080C409938AC02;
          goto LABEL_83;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v83, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v34 = v83;
        if (v83)
        {
          atomic_ullong v35 = v83[1];
          if (!v35) {
            goto LABEL_72;
          }
          uint64_t v36 = v83[2];
          unint64_t v37 = (void *)v83[1];
          if (v36 != v35)
          {
            do
            {
              v36 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v34 + 3), v36);
            }
            while (v36 != v35);
            unint64_t v37 = (void *)v34[1];
          }
          v34[2] = v35;
          goto LABEL_71;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v83, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v34 = v83;
        if (v83)
        {
          atomic_ullong v40 = v83[1];
          if (v40)
          {
            uint64_t v41 = v83[2];
            atomic_ullong v42 = v83[1];
            if (v41 != v40)
            {
              do
                uint64_t v41 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v41 - 32);
              while (v41 != v40);
              atomic_ullong v42 = v34[1];
            }
            v34[2] = v40;
            unint64_t v37 = (void *)v42;
LABEL_71:
            operator delete(v37);
          }
LABEL_72:
          size_t v32 = v34;
          uint64_t v33 = 0x1020C405E66F15BLL;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v83, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v43 = v83;
        if (v83)
        {
          int v44 = (void *)v83[7];
          if (v44)
          {
            v83[8] = (atomic_ullong)v44;
            operator delete(v44);
          }
          uint64_t v45 = (void *)v43[4];
          if (v45)
          {
            v43[5] = (atomic_ullong)v45;
            operator delete(v45);
          }
          size_t v46 = (std::__shared_weak_count *)v43[3];
          if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
          size_t v32 = v43;
          uint64_t v33 = 0x10B0C4002311774;
LABEL_83:
          MEMORY[0x192FF16B0](v32, v33);
        }
      }
      break;
    default:
      break;
  }
  switch(v86)
  {
    case 2:
      if (atomic_fetch_add(v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v47 = v85;
        if (v85)
        {
          if (*((char *)v85 + 31) < 0) {
            operator delete((void *)v85[1]);
          }
          uint64_t v48 = v47;
          uint64_t v49 = 0x1012C404EF22A49;
          goto LABEL_121;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v54 = v85;
        if (v85)
        {
          uint64_t v55 = (void *)v85[1];
          if (v55)
          {
            v85[2] = (atomic_ullong)v55;
            operator delete(v55);
          }
          uint64_t v48 = v54;
          uint64_t v49 = 0x1080C409938AC02;
          goto LABEL_121;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v50 = v85;
        if (v85)
        {
          atomic_ullong v51 = v85[1];
          if (!v51) {
            goto LABEL_110;
          }
          uint64_t v52 = v85[2];
          int v53 = (void *)v85[1];
          if (v52 != v51)
          {
            do
            {
              v52 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v50 + 3), v52);
            }
            while (v52 != v51);
            int v53 = (void *)v50[1];
          }
          v50[2] = v51;
          goto LABEL_109;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v50 = v85;
        if (v85)
        {
          atomic_ullong v56 = v85[1];
          if (v56)
          {
            uint64_t v57 = v85[2];
            atomic_ullong v58 = v85[1];
            if (v57 != v56)
            {
              do
                uint64_t v57 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v57 - 32);
              while (v57 != v56);
              atomic_ullong v58 = v50[1];
            }
            v50[2] = v56;
            int v53 = (void *)v58;
LABEL_109:
            operator delete(v53);
          }
LABEL_110:
          uint64_t v48 = v50;
          uint64_t v49 = 0x1020C405E66F15BLL;
          goto LABEL_121;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v85, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v59 = v85;
        if (v85)
        {
          unint64_t v60 = (void *)v85[7];
          if (v60)
          {
            v85[8] = (atomic_ullong)v60;
            operator delete(v60);
          }
          unint64_t v61 = (void *)v59[4];
          if (v61)
          {
            v59[5] = (atomic_ullong)v61;
            operator delete(v61);
          }
          uint64_t v62 = (std::__shared_weak_count *)v59[3];
          if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
          uint64_t v48 = v59;
          uint64_t v49 = 0x10B0C4002311774;
LABEL_121:
          MEMORY[0x192FF16B0](v48, v49);
        }
      }
      break;
    default:
      break;
  }
  switch(v88)
  {
    case 2:
      if (atomic_fetch_add(v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v63 = v87;
        if (v87)
        {
          if (*((char *)v87 + 31) < 0) {
            operator delete((void *)v87[1]);
          }
          uint64_t v64 = v63;
          uint64_t v65 = 0x1012C404EF22A49;
          goto LABEL_159;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v70 = v87;
        if (v87)
        {
          uint64_t v71 = (void *)v87[1];
          if (v71)
          {
            v87[2] = (atomic_ullong)v71;
            operator delete(v71);
          }
          uint64_t v64 = v70;
          uint64_t v65 = 0x1080C409938AC02;
          goto LABEL_159;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        float v66 = v87;
        if (v87)
        {
          atomic_ullong v67 = v87[1];
          if (!v67) {
            goto LABEL_148;
          }
          uint64_t v68 = v87[2];
          float32x4_t v69 = (void *)v87[1];
          if (v68 != v67)
          {
            do
            {
              v68 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v66 + 3), v68);
            }
            while (v68 != v67);
            float32x4_t v69 = (void *)v66[1];
          }
          v66[2] = v67;
          goto LABEL_147;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        float v66 = v87;
        if (v87)
        {
          atomic_ullong v72 = v87[1];
          if (v72)
          {
            uint64_t v73 = v87[2];
            atomic_ullong v74 = v87[1];
            if (v73 != v72)
            {
              do
                uint64_t v73 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v73 - 32);
              while (v73 != v72);
              atomic_ullong v74 = v66[1];
            }
            v66[2] = v72;
            float32x4_t v69 = (void *)v74;
LABEL_147:
            operator delete(v69);
          }
LABEL_148:
          uint64_t v64 = v66;
          uint64_t v65 = 0x1020C405E66F15BLL;
          goto LABEL_159;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v75 = v87;
        if (v87)
        {
          uint64_t v76 = (void *)v87[7];
          if (v76)
          {
            v87[8] = (atomic_ullong)v76;
            operator delete(v76);
          }
          uint64_t v77 = (void *)v75[4];
          if (v77)
          {
            v75[5] = (atomic_ullong)v77;
            operator delete(v77);
          }
          uint64_t v78 = (std::__shared_weak_count *)v75[3];
          if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
          uint64_t v64 = v75;
          uint64_t v65 = 0x10B0C4002311774;
LABEL_159:
          MEMORY[0x192FF16B0](v64, v65);
        }
      }
      break;
    default:
      break;
  }
  v89[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v89 + *(void *)(v89[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FF1040](v90);
  std::istream::~istream();
  return MEMORY[0x192FF15B0](v91);
}

void sub_19268A084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, ...)
{
  va_start(va, a16);
  switch(a12)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a11, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a11) {
        goto LABEL_23;
      }
      if (*(char *)(a11 + 31) < 0) {
        operator delete(*(void **)(a11 + 8));
      }
      uint64_t v17 = a11;
      uint64_t v18 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a11, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a11) {
        goto LABEL_23;
      }
      uint64_t v19 = *(void **)(a11 + 8);
      if (v19)
      {
        *(void *)(a11 + 16) = v19;
        operator delete(v19);
      }
      uint64_t v17 = a11;
      uint64_t v18 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a11, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a11) {
        goto LABEL_23;
      }
      uint64_t v17 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a11);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a11, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a11) {
        goto LABEL_23;
      }
      uint64_t v17 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a11);
LABEL_18:
      uint64_t v18 = 0x1020C405E66F15BLL;
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a11, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a11) {
        goto LABEL_23;
      }
      uint64_t v17 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((void *)a11);
      uint64_t v18 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_23;
  }
  MEMORY[0x192FF16B0](v17, v18);
LABEL_23:
  switch(a14)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_45;
      }
      if (*(char *)(a13 + 31) < 0) {
        operator delete(*(void **)(a13 + 8));
      }
      uint64_t v20 = a13;
      uint64_t v21 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_45;
      }
      int64_t v22 = *(void **)(a13 + 8);
      if (v22)
      {
        *(void *)(a13 + 16) = v22;
        operator delete(v22);
      }
      uint64_t v20 = a13;
      uint64_t v21 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_45;
      }
      uint64_t v20 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a13);
      goto LABEL_40;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_45;
      }
      uint64_t v20 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a13);
LABEL_40:
      uint64_t v21 = 0x1020C405E66F15BLL;
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_45;
      }
      uint64_t v20 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((void *)a13);
      uint64_t v21 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_45;
  }
  MEMORY[0x192FF16B0](v20, v21);
LABEL_45:
  switch(a16)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a15, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a15) {
        goto LABEL_67;
      }
      if (*(char *)(a15 + 31) < 0) {
        operator delete(*(void **)(a15 + 8));
      }
      uint64_t v23 = a15;
      uint64_t v24 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a15, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a15) {
        goto LABEL_67;
      }
      char v25 = *(void **)(a15 + 8);
      if (v25)
      {
        *(void *)(a15 + 16) = v25;
        operator delete(v25);
      }
      uint64_t v23 = a15;
      uint64_t v24 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a15, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a15) {
        goto LABEL_67;
      }
      uint64_t v23 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a15);
      goto LABEL_62;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a15, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a15) {
        goto LABEL_67;
      }
      uint64_t v23 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a15);
LABEL_62:
      uint64_t v24 = 0x1020C405E66F15BLL;
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a15, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a15) {
        goto LABEL_67;
      }
      uint64_t v23 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((void *)a15);
      uint64_t v24 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_67;
  }
  MEMORY[0x192FF16B0](v23, v24);
LABEL_67:
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::model_metadata::load_model_metadata(std::string const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/model_metadata/model_metadata.mm", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fin.good()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/model_metadata/model_metadata.mm", "operator()", 18, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/model_metadata/model_metadata.mm", "operator()", 18, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19268A7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::model_metadata::get_input_names(nitro::model_metadata *this)
{
  return (uint64_t)this + 48;
}

uint64_t nitro::model_metadata::get_output_names(nitro::model_metadata *this)
{
  return (uint64_t)this + 72;
}

uint64_t nitro::model_metadata::get_output_shape(void *a1, unsigned __int8 **a2)
{
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  if (v3 == v4)
  {
    uint64_t v8 = a1[9];
  }
  else
  {
    char v5 = *((unsigned char *)a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v6 = a2[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v7 = *a2;
    }
    uint64_t v8 = a1[9];
    do
    {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = (unsigned __int8 *)*(unsigned __int8 *)(v8 + 23);
      }
      else {
        uint64_t v10 = *(unsigned __int8 **)(v8 + 8);
      }
      if (v10 == v6)
      {
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v8, v7, *(void *)(v8 + 8))) {
            return a1[3] + v8 - v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v8 + 23)) {
            return a1[3] + v8 - v3;
          }
          uint64_t v11 = 0;
          while (*(unsigned __int8 *)(v8 + v11) == v7[v11])
          {
            if (v9 == ++v11) {
              return a1[3] + v8 - v3;
            }
          }
        }
      }
      v8 += 24;
    }
    while (v8 != v4);
    uint64_t v8 = v4;
  }
  return a1[3] + v8 - v3;
}

void nitro::SExp::load(nitro::SExp *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  char v20 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(a2, (uint64_t)&v19);
  nitro::SExp::load_impl(a1, &v19);
  switch(v20)
  {
    case 2:
      if (atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v3 = v19;
        if (v19)
        {
          if (*((char *)v19 + 31) < 0) {
            operator delete((void *)v19[1]);
          }
          uint64_t v4 = v3;
          uint64_t v5 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v6 = v19;
        if (v19)
        {
          uint64_t v7 = (void *)v19[1];
          if (v7)
          {
            v19[2] = (atomic_ullong)v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
          uint64_t v5 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v19;
        if (v19)
        {
          atomic_ullong v9 = v19[1];
          if (!v9) {
            goto LABEL_27;
          }
          uint64_t v10 = v19[2];
          uint64_t v11 = (void *)v19[1];
          if (v10 != v9)
          {
            do
            {
              v10 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v8 + 3), v10);
            }
            while (v10 != v9);
            uint64_t v11 = (void *)v8[1];
          }
          v8[2] = v9;
          goto LABEL_26;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v19;
        if (v19)
        {
          atomic_ullong v12 = v19[1];
          if (v12)
          {
            uint64_t v13 = v19[2];
            atomic_ullong v14 = v19[1];
            if (v13 != v12)
            {
              do
                uint64_t v13 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v13 - 32);
              while (v13 != v12);
              atomic_ullong v14 = v8[1];
            }
            v8[2] = v12;
            uint64_t v11 = (void *)v14;
LABEL_26:
            operator delete(v11);
          }
LABEL_27:
          uint64_t v4 = v8;
          uint64_t v5 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v19;
        if (v19)
        {
          uint64_t v16 = (void *)v19[7];
          if (v16)
          {
            v19[8] = (atomic_ullong)v16;
            operator delete(v16);
          }
          uint64_t v17 = (void *)v15[4];
          if (v17)
          {
            v15[5] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v18 = (std::__shared_weak_count *)v15[3];
          if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          uint64_t v4 = v15;
          uint64_t v5 = 0x10B0C4002311774;
LABEL_38:
          MEMORY[0x192FF16B0](v4, v5);
        }
      }
      break;
    default:
      return;
  }
}

void sub_19268AC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, __int16 a11, char a12, char a13)
{
  switch((char)a11)
  {
    case 2:
      nitro::SExp::load(&a10);
      break;
    case 3:
      nitro::SExp::load(&a10);
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 9:
      nitro::SExp::load(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void nitro::SExp::load_impl(nitro::SExp *this, atomic_ullong **a2)
{
  if (*((unsigned char *)a2 + 8) == 4)
  {
    uint64_t v4 = *a2;
    *(unsigned char *)this = 0;
    atomic_ullong v6 = v4[1];
    atomic_ullong v5 = v4[2];
    unint64_t v7 = (v5 - v6) >> 4;
    atomic_ullong v9 = (void *)((char *)this + 48);
    uint64_t v8 = *((void *)this + 6);
    uint64_t v10 = *((void *)this + 7);
    unint64_t v11 = 0x8E38E38E38E38E39 * ((v10 - v8) >> 3);
    if (v7 <= v11)
    {
      if (v7 < v11)
      {
        uint64_t v16 = v8 + 72 * v7;
        while (v10 != v16)
          nitro::SExp::~SExp((nitro::SExp *)(v10 - 72));
        *((void *)this + 7) = v16;
      }
    }
    else
    {
      std::vector<nitro::SExp>::__append((uint64_t)this + 48, v7 - v11);
    }
    if (v5 != v6)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      do
      {
        nitro::SExp::load_impl((nitro::SExp *)(*v9 + v18), (const nitro::flexible_type *)(v4[1] + v17));
        v18 += 72;
        v17 += 16;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    *(unsigned char *)this = 1;
    atomic_ullong v12 = (atomic_ullong *volatile *)((char *)this + 32);
    if ((atomic_ullong **)((char *)this + 32) != a2)
    {
      switch(*((unsigned char *)this + 40))
      {
        case 2:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v13 = *v12;
            if (!*v12) {
              goto LABEL_36;
            }
            if (*((char *)v13 + 31) < 0) {
              operator delete((void *)v13[1]);
            }
            uint64_t v14 = (uint64_t)v13;
            uint64_t v15 = 0x1012C404EF22A49;
            goto LABEL_35;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v19 = *v12;
            if (!*v12) {
              goto LABEL_36;
            }
            char v20 = (void *)v19[1];
            if (v20)
            {
              v19[2] = (atomic_ullong)v20;
              operator delete(v20);
            }
            uint64_t v14 = (uint64_t)v19;
            uint64_t v15 = 0x1080C409938AC02;
            goto LABEL_35;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (!*v12) {
              goto LABEL_36;
            }
            uint64_t v14 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)*v12);
            goto LABEL_31;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (!*v12) {
              goto LABEL_36;
            }
            uint64_t v14 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)*v12);
LABEL_31:
            uint64_t v15 = 0x1020C405E66F15BLL;
            goto LABEL_35;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*v12)
            {
              uint64_t v14 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*(void **)v12);
              uint64_t v15 = 0x10B0C4002311774;
LABEL_35:
              MEMORY[0x192FF16B0](v14, v15);
            }
LABEL_36:
            *atomic_ullong v12 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v21 = *a2;
      *((unsigned char *)this + 40) = *((unsigned char *)a2 + 8);
      *atomic_ullong v12 = v21;
      int v22 = *((unsigned __int8 *)a2 + 8);
      *((unsigned char *)this + 40) = v22;
      if ((v22 - 2) < 4 || v22 == 9) {
        atomic_fetch_add(*v12, 1uLL);
      }
    }
    if (*((unsigned char *)a2 + 8) == 2)
    {
      *((unsigned char *)this + 1) = 1;
      unsigned __int8 v24 = (const std::string *)(*a2 + 1);
      std::string::operator=((std::string *)((char *)this + 8), v24);
    }
  }
}

uint64_t nitro::indent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 2;
  strcpy((char *)a2, "  ");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19, a1, 24);
  __p = 0;
  std::string::size_type v17 = 0;
  uint64_t v18 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(v19[0] - 24)));
  uint64_t v3 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  unsigned __int8 v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v22);
  atomic_ullong v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (uint64_t)&__p, v4);
  if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) == 0)
  {
    if (v18 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v18 >= 0) {
      std::string::size_type v9 = HIBYTE(v18);
    }
    else {
      std::string::size_type v9 = v17;
    }
    std::string::append((std::string *)a2, p_p, v9);
    uint64_t v10 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(v19[0] - 24)));
      unint64_t v11 = std::locale::use_facet(&v22, v10);
      unsigned __int8 v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      std::locale::~locale(&v22);
      atomic_ullong *volatile v13 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (uint64_t)&__p, v12);
      if ((*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) != 0) {
        break;
      }
      std::string::append((std::string *)a2, "\n  ");
      if (v18 >= 0) {
        uint64_t v14 = (const std::string::value_type *)&__p;
      }
      else {
        uint64_t v14 = (const std::string::value_type *)__p;
      }
      if (v18 >= 0) {
        std::string::size_type v15 = HIBYTE(v18);
      }
      else {
        std::string::size_type v15 = v17;
      }
      std::string::append((std::string *)a2, v14, v15);
    }
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  v19[0] = *MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v19[2] = v6;
  v19[3] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v21);
}

void sub_19268B334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::locale::~locale((std::locale *)(v17 - 72));
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(a1);
}

void nitro::sexp_print(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v6 = *(unsigned __int8 **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56) - (void)v6;
    if (!v7)
    {
LABEL_10:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      MEMORY[0x192FF0F50](a3, "(");
      uint64_t v14 = *(void *)(a1 + 48);
      if (*(void *)(a1 + 56) != v14)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          nitro::sexp_print((nitro *)(v14 + v15), (const nitro::SExp *)0x3C, v13);
          if (v87 >= 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if (v87 >= 0) {
            size_t v18 = HIBYTE(v87);
          }
          else {
            size_t v18 = __n;
          }
          std::string::append((std::string *)a3, p_p, v18);
          if (SHIBYTE(v87) < 0) {
            operator delete(__p);
          }
          ++v16;
          uint64_t v14 = *(void *)(a1 + 48);
          unint64_t v19 = 0x8E38E38E38E38E39 * ((*(void *)(a1 + 56) - v14) >> 3);
          if (v16 < v19)
          {
            std::string::append((std::string *)a3, " ");
            uint64_t v14 = *(void *)(a1 + 48);
            unint64_t v19 = 0x8E38E38E38E38E39 * ((*(void *)(a1 + 56) - v14) >> 3);
          }
          v15 += 72;
        }
        while (v16 < v19);
      }
      std::string::append((std::string *)a3, ")");
      return;
    }
    unint64_t v9 = 0;
    uint64_t v10 = &v77.__r_.__value_.__s.__data_[1];
    unint64_t v11 = v7 / 72;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    while (1)
    {
      int v12 = *v6;
      v6 += 72;
      if (!v12) {
        break;
      }
      if (v11 == ++v9) {
        goto LABEL_10;
      }
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    MEMORY[0x192FF0F50](a3, "(");
    if (v9)
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      do
      {
        nitro::sexp_print((nitro *)(*(void *)(a1 + 48) + v32), (const nitro::SExp *)0x3C, v31);
        if (v87 >= 0) {
          unint64_t v34 = (const std::string::value_type *)&__p;
        }
        else {
          unint64_t v34 = (const std::string::value_type *)__p;
        }
        if (v87 >= 0) {
          size_t v35 = HIBYTE(v87);
        }
        else {
          size_t v35 = __n;
        }
        std::string::append((std::string *)a3, v34, v35);
        if (SHIBYTE(v87) < 0) {
          operator delete(__p);
        }
        if (++v33 < v9) {
          std::string::append((std::string *)a3, " ");
        }
        v32 += 72;
      }
      while (v9 != v33);
    }
    __p = 0;
    size_t __n = 0;
    uint64_t v87 = 0;
    memset(&v79, 0, sizeof(v79));
    uint64_t v36 = *(void *)(a1 + 48);
    unint64_t v37 = ")";
    if (v9 >= 0x8E38E38E38E38E39 * ((*(void *)(a1 + 56) - v36) >> 3))
    {
LABEL_122:
      std::string::append((std::string *)a3, v37);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87) < 0) {
        operator delete(__p);
      }
      return;
    }
    char v38 = 0;
    while (1)
    {
      uint64_t v39 = (nitro *)(v36 + 72 * v9);
      if (!*(unsigned char *)v39)
      {
        uint64_t v41 = (uint64_t *)(v36 + 72 * v9 + 48);
        uint64_t v40 = *v41;
        if (v41[1] != *v41) {
          std::string::operator=(&v79, (const std::string *)(v40 + 8));
        }
      }
      nitro::sexp_print(v39, (const nitro::SExp *)(a2 - 2), v31);
      std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v84.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = *(unsigned __int8 *)(a3 + 23);
      int v44 = (char)v43;
      uint64_t v45 = *(void *)(a3 + 8);
      if ((v43 & 0x80u) != 0) {
        uint64_t v43 = *(void *)(a3 + 8);
      }
      if (v43 + size <= a2)
      {
        uint64_t v47 = HIBYTE(v87);
        if (v87 >= 0) {
          size_t v48 = HIBYTE(v87);
        }
        else {
          size_t v48 = __n;
        }
        if (!v48) {
          goto LABEL_89;
        }
        std::string::size_type v49 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v49 = v79.__r_.__value_.__l.__size_;
        }
        if (v48 != v49) {
          goto LABEL_89;
        }
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v50 = &v79;
        }
        else {
          uint64_t v50 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        if (v87 < 0)
        {
          if (memcmp(__p, v50, __n)) {
            goto LABEL_89;
          }
        }
        else if (HIBYTE(v87))
        {
          atomic_ullong v51 = &__p;
          while (*(unsigned __int8 *)v51 == v50->__r_.__value_.__s.__data_[0])
          {
            atomic_ullong v51 = (void **)((char *)v51 + 1);
            uint64_t v50 = (std::string *)((char *)v50 + 1);
            if (!--v47) {
              goto LABEL_54;
            }
          }
LABEL_89:
          std::operator+<char>();
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v58 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v58 = __dst.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)a3, (const std::string::value_type *)p_dst, v58);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          goto LABEL_116;
        }
      }
LABEL_54:
      if (v44 < 0)
      {
        if (v45 != 1) {
          goto LABEL_79;
        }
        size_t v46 = *(unsigned char **)a3;
      }
      else
      {
        size_t v46 = (unsigned char *)a3;
        if (v44 != 1) {
          goto LABEL_79;
        }
      }
      if (*v46 != 40)
      {
LABEL_79:
        nitro::indent((uint64_t)&v84, (uint64_t)&v77);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v54.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v77;
        }
        else {
          v54.__i_ = (std::__wrap_iter<const char *>::iterator_type)v77.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&v77, v54, 10);
        std::string __dst = v77;
        memset(&v77, 0, sizeof(v77));
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v55 = &__dst;
        }
        else {
          uint64_t v55 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v56 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v56 = __dst.__r_.__value_.__l.__size_;
        }
        goto LABEL_113;
      }
      nitro::indent((uint64_t)&v84, (uint64_t)&v77);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v53 = v77.__r_.__value_.__l.__size_;
        if (!v77.__r_.__value_.__l.__size_) {
LABEL_150:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        uint64_t v52 = (std::string::value_type *)(v77.__r_.__value_.__r.__words[0] + 1);
      }
      else
      {
        uint64_t v52 = v10;
        std::string::size_type v53 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        if (!*((unsigned char *)&v77.__r_.__value_.__s + 23)) {
          goto LABEL_150;
        }
      }
      std::string::size_type v59 = v53 - 1;
      if (v53 - 1 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v59 >= 0x17)
      {
        unint64_t v61 = v10;
        uint64_t v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v59 | 7) != 0x17) {
          uint64_t v62 = v59 | 7;
        }
        uint64_t v63 = v62 + 1;
        unint64_t v60 = (std::string *)operator new(v62 + 1);
        __dst.__r_.__value_.__l.__size_ = v59;
        __dst.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        uint64_t v10 = v61;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v53 - 1;
        unint64_t v60 = &__dst;
        if (v53 == 1) {
          goto LABEL_107;
        }
      }
      memmove(v60, v52, v59);
LABEL_107:
      v60->__r_.__value_.__s.__data_[v59] = 0;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v55 = &__dst;
      }
      else {
        uint64_t v55 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v56 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v56 = __dst.__r_.__value_.__l.__size_;
      }
LABEL_113:
      std::string::append((std::string *)a3, (const std::string::value_type *)v55, v56);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
LABEL_119:
        }
          operator delete(v77.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_119;
      }
      char v38 = 1;
LABEL_116:
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      ++v9;
      uint64_t v36 = *(void *)(a1 + 48);
      if (v9 >= 0x8E38E38E38E38E39 * ((*(void *)(a1 + 56) - v36) >> 3))
      {
        unint64_t v37 = ")";
        if (v38) {
          unint64_t v37 = "\n)";
        }
        goto LABEL_122;
      }
    }
  }
  atomic_ullong v5 = (_OWORD *)(a1 + 8);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 31))
    {
      *(_OWORD *)a3 = *v5;
      *(void *)(a3 + 16) = *(void *)(a1 + 24);
      return;
    }
    goto LABEL_28;
  }
  std::string::size_type v20 = *(void *)(a1 + 16);
  if (!v20)
  {
LABEL_28:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v79);
    uint64_t v22 = MEMORY[0x1E4FBA408];
    switch(*(unsigned char *)(a1 + 40))
    {
      case 1:
        uint64_t v66 = MEMORY[0x1E4FBA488] + 104;
        v92[0] = MEMORY[0x1E4FBA488] + 104;
        uint64_t v67 = MEMORY[0x1E4FBA488] + 64;
        uint64_t v87 = MEMORY[0x1E4FBA488] + 64;
        uint64_t v68 = *(void **)(MEMORY[0x1E4FBA408] + 24);
        __p = *(void **)(MEMORY[0x1E4FBA408] + 16);
        *(void **)((char *)&__p + *((void *)__p - 3)) = v68;
        size_t __n = 0;
        float32x4_t v69 = (std::ios_base *)((char *)&__p + *((void *)__p - 3));
        std::ios_base::init(v69, v88);
        unint64_t v70 = (void *)(MEMORY[0x1E4FBA488] + 24);
        v69[1].__vftable = 0;
        v69[1].__fmtflags_ = -1;
        uint64_t v71 = *(void *)(v22 + 40);
        uint64_t v87 = *(void *)(v22 + 32);
        *(void *)((char *)&v88[-1] + *(void *)(v87 - 24)) = v71;
        __p = *(void **)(v22 + 8);
        *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v22 + 48);
        v92[0] = v66;
        __p = v70;
        uint64_t v87 = v67;
        std::streambuf::basic_streambuf();
        uint64_t v72 = MEMORY[0x1E4FBA470] + 16;
        v88[0] = MEMORY[0x1E4FBA470] + 16;
        long long v89 = 0u;
        long long v90 = 0u;
        int v91 = 24;
        std::ostream::operator<<();
        std::stringbuf::str();
        __p = *(void **)v22;
        uint64_t v73 = *(void *)(v22 + 72);
        *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v22 + 64);
        uint64_t v87 = v73;
        v88[0] = v72;
        goto LABEL_131;
      case 2:
        uint64_t v64 = *(void *)(a1 + 32);
        if (*(char *)(v64 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(v64 + 8), *(void *)(v64 + 16));
        }
        else
        {
          long long v65 = *(_OWORD *)(v64 + 8);
          v84.__r_.__value_.__r.__words[2] = *(void *)(v64 + 24);
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v65;
        }
        goto LABEL_138;
      case 3:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)(a1 + 32) + 8));
        goto LABEL_138;
      case 4:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(void *)(a1 + 32) + 8));
        goto LABEL_138;
      case 5:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)(a1 + 32) + 8));
        goto LABEL_138;
      case 6:
      case 8:
        __break(1u);
        return;
      case 7:
        memset(&v84, 0, sizeof(v84));
        goto LABEL_138;
      case 9:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_DWORD *)(*(void *)(a1 + 32) + 8));
        goto LABEL_138;
      default:
        uint64_t v23 = MEMORY[0x1E4FBA488] + 104;
        v92[0] = MEMORY[0x1E4FBA488] + 104;
        uint64_t v24 = MEMORY[0x1E4FBA488] + 64;
        uint64_t v87 = MEMORY[0x1E4FBA488] + 64;
        char v25 = *(void **)(MEMORY[0x1E4FBA408] + 24);
        __p = *(void **)(MEMORY[0x1E4FBA408] + 16);
        *(void **)((char *)&__p + *((void *)__p - 3)) = v25;
        size_t __n = 0;
        uint64_t v26 = (std::ios_base *)((char *)&__p + *((void *)__p - 3));
        std::ios_base::init(v26, v88);
        unint64_t v27 = (void *)(MEMORY[0x1E4FBA488] + 24);
        v26[1].__vftable = 0;
        v26[1].__fmtflags_ = -1;
        uint64_t v28 = *(void *)(v22 + 40);
        uint64_t v87 = *(void *)(v22 + 32);
        *(void *)((char *)&v88[-1] + *(void *)(v87 - 24)) = v28;
        __p = *(void **)(v22 + 8);
        *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v22 + 48);
        v92[0] = v23;
        __p = v27;
        uint64_t v87 = v24;
        std::streambuf::basic_streambuf();
        uint64_t v29 = MEMORY[0x1E4FBA470] + 16;
        v88[0] = MEMORY[0x1E4FBA470] + 16;
        long long v89 = 0u;
        long long v90 = 0u;
        int v91 = 24;
        std::ostream::operator<<();
        std::stringbuf::str();
        __p = *(void **)v22;
        uint64_t v30 = *(void *)(v22 + 72);
        *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v22 + 64);
        uint64_t v87 = v30;
        v88[0] = v29;
LABEL_131:
        if (SBYTE7(v90) < 0) {
          operator delete((void *)v89);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x192FF15B0](v92);
LABEL_138:
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          atomic_ullong v74 = &v84;
        }
        else {
          atomic_ullong v74 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v75 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v75 = v84.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79.__r_.__value_.__r.__words[2], (uint64_t)v74, v75);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str();
        v79.__r_.__value_.__r.__words[0] = *(void *)v22;
        std::string::size_type v76 = *(void *)(v22 + 72);
        *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words
                                  + *(void *)(v79.__r_.__value_.__r.__words[0] - 24)) = *(void *)(v22 + 64);
        v79.__r_.__value_.__r.__words[2] = v76;
        uint64_t v80 = MEMORY[0x1E4FBA470] + 16;
        if (v82 < 0) {
          operator delete(v81);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x192FF15B0](&v83);
        break;
    }
    return;
  }
  uint64_t v21 = *(const std::string::value_type **)v5;

  std::string::__init_copy_ctor_external((std::string *)a3, v21, v20);
}

void sub_19268C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *__p)
{
}

void sub_19268C34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x19268C398);
  }
  JUMPOUT(0x19268C39CLL);
}

void sub_19268C360()
{
}

void sub_19268C368()
{
}

void sub_19268C388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a64 < 0)
  {
    operator delete(a59);
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a70 < 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  operator delete(a21);
  if (a70 < 0)
  {
LABEL_6:
    operator delete(a65);
    if (*(char *)(v70 + 23) < 0) {
      JUMPOUT(0x19268C420);
    }
    JUMPOUT(0x19268C43CLL);
  }
LABEL_14:
  JUMPOUT(0x19268C418);
}

void sub_19268C3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a23 < 0)
  {
    operator delete(a18);
    if (a64 < 0)
    {
LABEL_3:
      operator delete(__p);
      if (*(char *)(v64 + 23) < 0)
      {
LABEL_7:
        operator delete(*(void **)v64);
        _Unwind_Resume(a1);
      }
LABEL_8:
      _Unwind_Resume(a1);
    }
  }
  else if (a64 < 0)
  {
    goto LABEL_3;
  }
  if (*(char *)(v64 + 23) < 0) {
    goto LABEL_7;
  }
  goto LABEL_8;
}

void sub_19268C400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if ((a61 & 0x80000000) == 0) {
    JUMPOUT(0x19268C418);
  }
  JUMPOUT(0x19268C3BCLL);
}

void sub_19268C430()
{
  if ((*(char *)(v0 + 23) & 0x80000000) == 0) {
    JUMPOUT(0x19268C43CLL);
  }
  JUMPOUT(0x19268C420);
}

void *nitro::operator<<(void *a1, uint64_t a2)
{
  nitro::sexp_print(a2, 60, (uint64_t)__p);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_19268C4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<nitro::SExp>::__append(uint64_t a1, unint64_t a2)
{
  atomic_ullong v5 = *(nitro::SExp **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0x8E38E38E38E38E39 * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(a1 + 8), v12);
      atomic_ullong v5 = (nitro::SExp *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(nitro::SExp **)a1;
    unint64_t v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x8E38E38E38E38E39 * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x1C71C71C71C71C7) {
      unint64_t v10 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(72 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    int v13 = &v11[72 * v7];
    uint64_t v14 = &v11[72 * v10];
    size_t v15 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_22;
    }
    uint64_t v17 = 0;
    do
    {
      size_t v18 = &v13[v17];
      unint64_t v19 = (char *)v5 + v17;
      *((_WORD *)v18 - 36) = *(_WORD *)((char *)v5 + v17 - 72);
      long long v20 = *(_OWORD *)((char *)v5 + v17 - 64);
      *((void *)v18 - 6) = *(void *)((char *)v5 + v17 - 48);
      *((_OWORD *)v18 - 4) = v20;
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 8) = 0;
      *((void *)v18 - 5) = 0;
      *(v18 - 32) = 0;
      uint64_t v21 = *(void *)((char *)v5 + v17 - 40);
      *(v18 - 32) = *((unsigned char *)v5 + v17 - 32);
      *((void *)v18 - 5) = v21;
      *(v18 - 32) = *((unsigned char *)v5 + v17 - 32);
      *(v19 - 32) = 0;
      *((void *)v18 - 2) = 0;
      *((void *)v18 - 1) = 0;
      *(_OWORD *)(v18 - 24) = *(_OWORD *)((char *)v5 + v17 - 24);
      *((void *)v18 - 1) = *(void *)((char *)v5 + v17 - 8);
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((void *)v19 - 1) = 0;
      v17 -= 72;
    }
    while ((nitro::SExp *)((char *)v5 + v17) != v6);
    uint64_t v22 = *(nitro::SExp **)a1;
    atomic_ullong v5 = *(nitro::SExp **)(a1 + 8);
    *(void *)a1 = &v13[v17];
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v22)
    {
      do
      {
        atomic_ullong v5 = (nitro::SExp *)((char *)v5 - 72);
        nitro::SExp::~SExp(v5);
      }
      while (v5 != v22);
      atomic_ullong v5 = v22;
    }
    if (v5)
    {
LABEL_22:
      operator delete(v5);
    }
  }
}

atomic_ullong *volatile *nitro::SExp::load(atomic_ullong *volatile *a1)
{
  double result = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *result;
    if (*result)
    {
      if (*((char *)v3 + 31) < 0) {
        operator delete((void *)v3[1]);
      }
      return (atomic_ullong *volatile *)MEMORY[0x192FF16B0](v3, 0x1012C404EF22A49);
    }
  }
  return result;
}

{
  atomic_ullong *volatile *result;
  char v2;
  atomic_ullong *volatile v3;
  void *v4;

  double result = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *result;
    if (*result)
    {
      uint64_t v4 = (void *)v3[1];
      if (v4)
      {
        v3[2] = (atomic_ullong)v4;
        operator delete(v4);
      }
      return (atomic_ullong *volatile *)MEMORY[0x192FF16B0](v3, 0x1080C409938AC02);
    }
  }
  return result;
}

{
  atomic_ullong *volatile *result;
  char v2;
  void *v3;

  double result = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    double result = (atomic_ullong *volatile *)*result;
    if (result)
    {
      atomic_ullong *volatile v3 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(result);
      return (atomic_ullong *volatile *)MEMORY[0x192FF16B0](v3, 0x10B0C4002311774);
    }
  }
  return result;
}

void demangle(const char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  size_t outlen = 0;
  int status = 0;
  if (sscanf(a1, "%*[^(]%*[^_]%127[^)+]", mangled) != 1
    || (uint64_t v4 = __cxa_demangle(mangled, 0, &outlen, &status), (v5 = v4) == 0))
  {
    if (sscanf(a1, "%127s", mangled) == 1)
    {
      size_t v8 = strlen(mangled);
      if (v8 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v12 = v8 | 7;
        }
        uint64_t v13 = v12 + 1;
        uint64_t v14 = operator new(v12 + 1);
        a2[1] = v9;
        a2[2] = v13 | 0x8000000000000000;
        *a2 = v14;
        a2 = v14;
      }
      else
      {
        *((unsigned char *)a2 + 23) = v8;
        if (!v8) {
          goto LABEL_20;
        }
      }
      memcpy(a2, mangled, v9);
LABEL_20:
      *((unsigned char *)a2 + v9) = 0;
      return;
    }
    size_t v10 = strlen(a1);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v15 = v10 | 7;
      }
      uint64_t v16 = v15 + 1;
      uint64_t v17 = operator new(v15 + 1);
      a2[1] = v11;
      a2[2] = v16 | 0x8000000000000000;
      *a2 = v17;
      a2 = v17;
    }
    else
    {
      *((unsigned char *)a2 + 23) = v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
    memcpy(a2, a1, v11);
LABEL_25:
    *((unsigned char *)a2 + v11) = 0;
    return;
  }
  size_t v6 = strlen(v4);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v18 = v6 | 7;
    }
    uint64_t v19 = v18 + 1;
    long long v20 = operator new(v18 + 1);
    a2[1] = v7;
    a2[2] = v19 | 0x8000000000000000;
    *a2 = v20;
    a2 = v20;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v6;
    if (!v6) {
      goto LABEL_30;
    }
  }
  memmove(a2, v5, v7);
LABEL_30:
  *((unsigned char *)a2 + v7) = 0;
  free(v5);
}

uint64_t nitro::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, void *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
  if (a2[1] != *a2)
  {
    unint64_t v3 = 0;
    do
    {
      std::ostream::operator<<();
      ++v3;
      unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 3;
      if (v3 < v4)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
        unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 3;
      }
    }
    while (v3 < v4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v8[0] = v5;
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v10);
}

{
  unsigned char *v3;
  unint64_t v4;
  unsigned char *v5;
  unint64_t v6;
  unsigned char *v7;
  void *v8;
  std::string *p_p;
  std::string::size_type size;
  void *v11;
  std::string *v12;
  std::string::size_type v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  void *v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  std::string __p;
  void v23[2];
  void v24[11];
  char v25;
  uint64_t v26;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"{", 1);
  unint64_t v3 = (unsigned char *)a2[1];
  if (v3 != (unsigned char *)*a2)
  {
    unint64_t v4 = (uint64_t)&v3[-*a2] >> 5;
    uint64_t v5 = (unsigned char *)(*a2 + 16);
    size_t v6 = 1;
    do
    {
      if (*(v5 - 8) == 2)
      {
        size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5 - 16, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
      }
      else
      {
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5 - 16, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &__p;
        }
        else {
          uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t v13 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v12, v13);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)":", 1);
      if (v5[8] == 2)
      {
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v15 = &__p;
        }
        else {
          uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t v16 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
      }
      else
      {
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &__p;
        }
        else {
          uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t v19 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v18, v19);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v6 < v4) {
LABEL_40:
        }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
      }
      else if (v6 < v4)
      {
        goto LABEL_40;
      }
      ++v6;
      size_t v7 = v5 + 16;
      v5 += 32;
    }
    while (v7 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"}", 1);
  std::stringbuf::str();
  v23[0] = *MEMORY[0x1E4FBA408];
  long long v20 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v24[0] = v20;
  v24[1] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v26);
}

void sub_19268CC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, _DWORD *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  nitro::operator<<(v6, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v8);
}

void sub_19268CE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"[", 1);
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      if (*(unsigned char *)(v3 + v4 + 8) == 2)
      {
        size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>((unsigned char *)(*a2 + v4), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"", 1);
      }
      else
      {
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>((unsigned char *)(v3 + v4), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v10 = &__p;
        }
        else {
          uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v10, v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v5;
      uint64_t v3 = *a2;
      unint64_t v12 = (a2[1] - *a2) >> 4;
      if (v5 < v12)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
        uint64_t v3 = *a2;
        unint64_t v12 = (a2[1] - *a2) >> 4;
      }
      v4 += 16;
    }
    while (v5 < v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v17[0] = v13;
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v19);
}

void sub_19268D0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_19268D470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v3 - *a2 != v5 - *a3) {
    return;
  }
  v189 = 0;
  uint64_t v190 = 0;
  v188 = &v189;
  if (v5 != v6)
  {
    char v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      std::string::size_type v11 = &v189;
      unint64_t v12 = &v189;
      if (v9)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v12 = (uint64_t **)v9;
            unint64_t v13 = v9[4];
            if (v10 >= v13) {
              break;
            }
            char v9 = *v12;
            std::string::size_type v11 = v12;
            if (!*v12) {
              goto LABEL_11;
            }
          }
          if (v13 >= v10) {
            break;
          }
          char v9 = v12[1];
          if (!v9)
          {
            std::string::size_type v11 = v12 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v10;
        *uint64_t v14 = 0;
        v14[1] = 0;
        v14[2] = (uint64_t)v12;
        *std::string::size_type v11 = v14;
        if (*v188)
        {
          v188 = (uint64_t **)*v188;
          uint64_t v14 = *v11;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v189, v14);
        ++v190;
        uint64_t v6 = *a3;
        uint64_t v5 = a3[1];
      }
      if (++v10 >= (v5 - v6) >> 5) {
        break;
      }
      char v9 = v189;
    }
    uint64_t v4 = *a2;
    uint64_t v3 = a2[1];
  }
  if (v3 == v4) {
    goto LABEL_238;
  }
  uint64_t v15 = 0;
  while (2)
  {
    uint64_t v16 = (uint64_t *)v188;
    if (v188 == &v189) {
      goto LABEL_238;
    }
    while (2)
    {
      unint64_t v17 = v16[4];
      uint64_t v18 = *a2;
      uint64_t v19 = (unsigned char *)(*a2 + 32 * v15);
      uint64_t v20 = *a3;
      uint64_t v21 = (unsigned char *)(*a3 + 32 * v17);
      switch(v21[8])
      {
        case 1:
          switch(v19[8])
          {
            case 1:
              double v40 = *(double *)v19;
              double v41 = *(double *)v21;
              goto LABEL_76;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_115;
            case 6:
            case 8:
              goto LABEL_239;
            case 9:
              double v63 = *(double *)v19;
              double v64 = *(double *)v21;
              v192 = 0;
              uint64_t v66 = *(char **)(*(void *)&v63 + 32);
              long long v65 = *(char **)(*(void *)&v63 + 40);
              if (v65 == v66 || !*(void *)(*(void *)&v63 + 16)) {
                goto LABEL_112;
              }
              unint64_t v67 = v65 - v66 - 8;
              if (v67 < 8)
              {
                uint64_t v68 = 1;
                float32x4_t v69 = *(char **)(*(void *)&v63 + 32);
                do
                {
LABEL_110:
                  uint64_t v93 = *(void *)v69;
                  v69 += 8;
                  v68 *= v93;
                }
                while (v69 != v65);
                goto LABEL_111;
              }
              uint64_t v88 = (v67 >> 3) + 1;
              float32x4_t v69 = &v66[8 * (v88 & 0x3FFFFFFFFFFFFFFELL)];
              long long v89 = v66 + 8;
              uint64_t v90 = v88 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v91 = 1;
              uint64_t v92 = 1;
              do
              {
                v91 *= *(v89 - 1);
                v92 *= *v89;
                v89 += 2;
                v90 -= 2;
              }
              while (v90);
              uint64_t v68 = v92 * v91;
              if (v88 != (v88 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_110;
              }
LABEL_111:
              v192 = (char *)v68;
              if (v68 != 1)
              {
LABEL_112:
                v194 = &v192;
                nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
              }
              int v49 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v63 + 8), v64);
              break;
            default:
              double v40 = *(double *)v21;
              double v41 = (double)*(uint64_t *)v19;
              goto LABEL_76;
          }
          goto LABEL_114;
        case 2:
          if (v19[8] != 2) {
            goto LABEL_115;
          }
          double v28 = *(double *)v19;
          int v29 = *(char *)(*(void *)v19 + 31);
          size_t v30 = *(unsigned __int8 *)(*(void *)v19 + 31);
          if (v29 < 0) {
            size_t v31 = *(void *)(*(void *)&v28 + 16);
          }
          else {
            size_t v31 = v30;
          }
          double v45 = *(double *)v21;
          uint64_t v46 = *(unsigned __int8 *)(*(void *)&v45 + 31);
          if (*(char *)(*(void *)&v45 + 31) < 0)
          {
            if (v31 != *(void *)(*(void *)&v45 + 16)) {
              goto LABEL_115;
            }
          }
          else if (v31 != v46)
          {
            goto LABEL_115;
          }
          uint64_t v47 = (unsigned __int8 *)(*(void *)&v28 + 8);
          if ((v30 & 0x80) != 0)
          {
            uint64_t v47 = *(unsigned __int8 **)v47;
            size_t v48 = (unsigned __int8 *)(*(void *)&v45 + 8);
            if ((v46 & 0x80) == 0)
            {
LABEL_60:
              if ((v30 & 0x80) == 0) {
                goto LABEL_61;
              }
              goto LABEL_84;
            }
          }
          else
          {
            size_t v48 = (unsigned __int8 *)(*(void *)&v45 + 8);
            if ((v46 & 0x80) == 0) {
              goto LABEL_60;
            }
          }
          size_t v48 = *(unsigned __int8 **)v48;
          if ((v30 & 0x80) == 0)
          {
LABEL_61:
            if (!v31) {
              break;
            }
            while (*v47 == *v48)
            {
              ++v47;
              ++v48;
              if (!--v31) {
                goto LABEL_122;
              }
            }
            goto LABEL_115;
          }
LABEL_84:
          if (!memcmp(v47, v48, v31)) {
            goto LABEL_121;
          }
          goto LABEL_115;
        case 3:
          if (v19[8] != 3) {
            goto LABEL_115;
          }
          uint64_t v24 = *(void *)v19 + 8;
          uint64_t v22 = *(double **)v24;
          uint64_t v23 = *(double **)(v24 + 8);
          unint64_t v25 = ((uint64_t)v23 - *(void *)v24) >> 3;
          uint64_t v27 = *(void *)v21 + 8;
          uint64_t v26 = *(double **)v27;
          if (v25 != (uint64_t)(*(void *)(v27 + 8) - *(void *)v27) >> 3) {
            goto LABEL_115;
          }
          if (v23 == v22) {
            break;
          }
          if (v25 <= 1) {
            unint64_t v25 = 1;
          }
          while (*v22 == *v26)
          {
            ++v22;
            ++v26;
            if (!--v25) {
              goto LABEL_122;
            }
          }
          goto LABEL_115;
        case 4:
          uint64_t v42 = *(void *)v21 + 8;
          v192 = &v191;
          uint64_t v193 = v42;
          if (v19[8] != 4) {
            goto LABEL_115;
          }
          BOOL v43 = nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>((uint64_t)&v192, (uint64_t *)(*(void *)v19 + 8));
          goto LABEL_49;
        case 5:
          uint64_t v44 = *(void *)v21 + 8;
          v192 = &v191;
          uint64_t v193 = v44;
          if (v19[8] != 5) {
            goto LABEL_115;
          }
          nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>((uint64_t)&v192, (uint64_t *)(*(void *)v19 + 8));
LABEL_49:
          if (v43) {
            goto LABEL_121;
          }
          goto LABEL_115;
        case 6:
        case 8:
LABEL_239:
          __break(1u);
          return;
        case 7:
          if (v19[8] == 7) {
            break;
          }
          goto LABEL_115;
        case 9:
          uint64_t v32 = *(void **)v21;
          uint64_t v33 = (_DWORD *)(*(void *)v21 + 8);
          switch(v19[8])
          {
            case 1:
              double v57 = *(double *)v19;
              v192 = 0;
              std::string::size_type v59 = (char *)v32[4];
              std::string::size_type v58 = (char *)v32[5];
              unint64_t v60 = (char *)(v58 - v59);
              if (v58 == v59 || !v32[2]) {
                goto LABEL_105;
              }
              if ((unint64_t)(v60 - 8) < 8)
              {
                uint64_t v61 = 1;
                uint64_t v62 = (char *)v32[4];
                do
                {
LABEL_103:
                  uint64_t v87 = *(void *)v62;
                  v62 += 8;
                  v61 *= v87;
                }
                while (v62 != v58);
                goto LABEL_104;
              }
              unint64_t v82 = ((unint64_t)(v60 - 8) >> 3) + 1;
              uint64_t v62 = &v59[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v83 = v59 + 8;
              uint64_t v84 = v82 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v85 = 1;
              uint64_t v86 = 1;
              do
              {
                v85 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v84 -= 2;
              }
              while (v84);
              uint64_t v61 = v86 * v85;
              if (v82 != (v82 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_103;
              }
LABEL_104:
              v192 = (char *)v61;
              if (v61 != 1)
              {
LABEL_105:
                v194 = &v192;
                nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              int v49 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v33, v57);
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_115;
            case 6:
            case 8:
              goto LABEL_239;
            case 9:
              int v49 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)v19 + 8), (_DWORD *)(*(void *)v21 + 8));
              goto LABEL_114;
            default:
              uint64_t v34 = *(void *)v19;
              v192 = 0;
              uint64_t v36 = (char *)v32[4];
              size_t v35 = (char *)v32[5];
              unint64_t v37 = (char *)(v35 - v36);
              if (v35 == v36 || !v32[2]) {
                goto LABEL_91;
              }
              if ((unint64_t)(v37 - 8) < 8)
              {
                uint64_t v38 = 1;
                uint64_t v39 = (char *)v32[4];
                do
                {
LABEL_89:
                  uint64_t v75 = *(void *)v39;
                  v39 += 8;
                  v38 *= v75;
                }
                while (v39 != v35);
                goto LABEL_90;
              }
              unint64_t v70 = ((unint64_t)(v37 - 8) >> 3) + 1;
              uint64_t v39 = &v36[8 * (v70 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v71 = v36 + 8;
              uint64_t v72 = v70 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v73 = 1;
              uint64_t v74 = 1;
              do
              {
                v73 *= *(v71 - 1);
                v74 *= *v71;
                v71 += 2;
                v72 -= 2;
              }
              while (v72);
              uint64_t v38 = v74 * v73;
              if (v70 != (v70 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_89;
              }
LABEL_90:
              v192 = (char *)v38;
              if (v38 != 1)
              {
LABEL_91:
                v194 = &v192;
                nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              int v49 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v33, v34);
              break;
          }
          goto LABEL_114;
        default:
          switch(v19[8])
          {
            case 1:
              double v40 = *(double *)v19;
              double v41 = (double)*(uint64_t *)v21;
LABEL_76:
              if (v40 == v41) {
                goto LABEL_121;
              }
              goto LABEL_115;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_115;
            case 6:
            case 8:
              goto LABEL_239;
            case 9:
              uint64_t v50 = *(void *)v19;
              uint64_t v51 = *(void *)v21;
              v192 = 0;
              std::string::size_type v53 = *(char **)(v50 + 32);
              uint64_t v52 = *(char **)(v50 + 40);
              if (v52 == v53 || !*(void *)(v50 + 16)) {
                goto LABEL_98;
              }
              unint64_t v54 = v52 - v53 - 8;
              if (v54 < 8)
              {
                uint64_t v55 = 1;
                std::string::size_type v56 = *(char **)(v50 + 32);
                do
                {
LABEL_96:
                  uint64_t v81 = *(void *)v56;
                  v56 += 8;
                  v55 *= v81;
                }
                while (v56 != v52);
                goto LABEL_97;
              }
              uint64_t v76 = (v54 >> 3) + 1;
              std::string::size_type v56 = &v53[8 * (v76 & 0x3FFFFFFFFFFFFFFELL)];
              std::string v77 = v53 + 8;
              uint64_t v78 = v76 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v79 = 1;
              uint64_t v80 = 1;
              do
              {
                v79 *= *(v77 - 1);
                v80 *= *v77;
                v77 += 2;
                v78 -= 2;
              }
              while (v78);
              uint64_t v55 = v80 * v79;
              if (v76 != (v76 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_96;
              }
LABEL_97:
              v192 = (char *)v55;
              if (v55 != 1)
              {
LABEL_98:
                v194 = &v192;
                nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
              }
              int v49 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v50 + 8), v51);
LABEL_114:
              if (!v49)
              {
LABEL_115:
                float v94 = (uint64_t *)v16[1];
                if (v94)
                {
                  do
                  {
                    v95 = (uint64_t **)v94;
                    float v94 = (uint64_t *)*v94;
                  }
                  while (v94);
                }
                else
                {
                  do
                  {
                    v95 = (uint64_t **)v16[2];
                    BOOL v96 = *v95 == v16;
                    uint64_t v16 = (uint64_t *)v95;
                  }
                  while (!v96);
                }
                uint64_t v16 = (uint64_t *)v95;
                if (v95 == &v189) {
                  goto LABEL_238;
                }
                continue;
              }
LABEL_121:
              uint64_t v18 = *a2;
              uint64_t v20 = *a3;
              break;
            default:
              if (*(void *)v19 == *(void *)v21) {
                goto LABEL_121;
              }
              goto LABEL_115;
          }
          break;
      }
      break;
    }
LABEL_122:
    uint64_t v97 = (unsigned char *)(v18 + 32 * v15 + 16);
    uint64_t v98 = v20 + 32 * v17;
    v99 = (double *)(v98 + 16);
    switch(*(unsigned char *)(v98 + 24))
    {
      case 1:
        switch(v97[8])
        {
          case 1:
            double v100 = *(double *)v97;
            double v101 = *v99;
            goto LABEL_175;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_238;
          case 6:
          case 8:
            goto LABEL_239;
          case 9:
            double v140 = *(double *)v97;
            double v141 = *v99;
            v192 = 0;
            v143 = *(char **)(*(void *)&v140 + 32);
            v142 = *(char **)(*(void *)&v140 + 40);
            if (v142 == v143 || !*(void *)(*(void *)&v140 + 16)) {
              goto LABEL_207;
            }
            unint64_t v144 = v142 - v143 - 8;
            if (v144 < 8)
            {
              uint64_t v145 = 1;
              v146 = *(char **)(*(void *)&v140 + 32);
              do
              {
LABEL_205:
                uint64_t v171 = *(void *)v146;
                v146 += 8;
                v145 *= v171;
              }
              while (v146 != v142);
              goto LABEL_206;
            }
            uint64_t v166 = (v144 >> 3) + 1;
            v146 = &v143[8 * (v166 & 0x3FFFFFFFFFFFFFFELL)];
            v167 = v143 + 8;
            uint64_t v168 = v166 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v169 = 1;
            uint64_t v170 = 1;
            do
            {
              v169 *= *(v167 - 1);
              v170 *= *v167;
              v167 += 2;
              v168 -= 2;
            }
            while (v168);
            uint64_t v145 = v170 * v169;
            if (v166 != (v166 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_205;
            }
LABEL_206:
            v192 = (char *)v145;
            if (v145 != 1)
            {
LABEL_207:
              v194 = &v192;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
            BOOL v159 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v140 + 8), v141);
            break;
          default:
            double v100 = *v99;
            double v101 = (double)*(uint64_t *)v97;
            goto LABEL_175;
        }
        goto LABEL_216;
      case 2:
        if (v97[8] != 2) {
          goto LABEL_238;
        }
        double v102 = *(double *)v97;
        int v103 = *(char *)(*(void *)v97 + 31);
        uint64_t v104 = *(unsigned __int8 *)(*(void *)v97 + 31);
        size_t v105 = v103 < 0 ? *(void *)(*(void *)&v102 + 16) : v104;
        double v129 = *v99;
        uint64_t v130 = *(char *)(*(void *)&v129 + 31) < 0
             ? *(void *)(*(void *)&v129 + 16)
             : *(unsigned __int8 *)(*(void *)&v129 + 31);
        if (v105 != v130) {
          goto LABEL_238;
        }
        v131 = (unsigned __int8 *)(*(void *)&v102 + 8);
        if ((v104 & 0x80) != 0)
        {
          v131 = *(unsigned __int8 **)v131;
          v132 = (unsigned __int8 *)(*(void *)&v129 + 8);
          if ((*(unsigned char *)(*(void *)&v129 + 31) & 0x80) == 0)
          {
LABEL_160:
            if ((v104 & 0x80) != 0) {
              goto LABEL_167;
            }
            goto LABEL_161;
          }
        }
        else
        {
          v132 = (unsigned __int8 *)(*(void *)&v129 + 8);
          if ((*(unsigned char *)(*(void *)&v129 + 31) & 0x80) == 0) {
            goto LABEL_160;
          }
        }
        v132 = *(unsigned __int8 **)v132;
        if ((v104 & 0x80) != 0)
        {
LABEL_167:
          if (memcmp(v131, v132, v105)) {
            goto LABEL_238;
          }
          goto LABEL_217;
        }
LABEL_161:
        if (!v105)
        {
LABEL_217:
          if (v189)
          {
            v178 = (uint64_t *)&v189;
            v179 = v189;
            do
            {
              v180 = v179;
              v181 = v178;
              unint64_t v182 = v179[4];
              v183 = v179 + 1;
              if (v182 >= v17) {
                v178 = v179;
              }
              else {
                ++v179;
              }
              v179 = (uint64_t *)*v179;
            }
            while (v179);
            if (v178 != (uint64_t *)&v189)
            {
              if (v182 < v17) {
                v180 = v181;
              }
              if (v17 >= v180[4])
              {
                v184 = v181 + 1;
                if (v182 >= v17) {
                  v184 = v183;
                }
                v185 = (uint64_t *)*v184;
                v186 = v178;
                if (*v184)
                {
                  do
                  {
                    v187 = (uint64_t **)v185;
                    v185 = (uint64_t *)*v185;
                  }
                  while (v185);
                }
                else
                {
                  do
                  {
                    v187 = (uint64_t **)v186[2];
                    BOOL v96 = *v187 == v186;
                    v186 = (uint64_t *)v187;
                  }
                  while (!v96);
                }
                if (v188 == (uint64_t **)v178) {
                  v188 = v187;
                }
                --v190;
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v189, v178);
                operator delete(v178);
              }
            }
          }
          if (++v15 >= (unint64_t)((a2[1] - *a2) >> 5)) {
            goto LABEL_238;
          }
          continue;
        }
        while (*v131 == *v132)
        {
          ++v131;
          ++v132;
          if (!--v105) {
            goto LABEL_217;
          }
        }
LABEL_238:
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v188, v189);
        return;
      case 3:
        if (v97[8] != 3) {
          goto LABEL_238;
        }
        double v106 = *v99;
        uint64_t v109 = *(void *)v97 + 8;
        uint64_t v107 = *(double **)v109;
        size_t v108 = *(double **)(v109 + 8);
        unint64_t v110 = ((uint64_t)v108 - *(void *)v109) >> 3;
        uint64_t v112 = *(void *)&v106 + 8;
        float v111 = *(double **)(*(void *)&v106 + 8);
        if (v110 != (uint64_t)(*(void *)(v112 + 8) - (void)v111) >> 3) {
          goto LABEL_238;
        }
        if (v108 == v107) {
          goto LABEL_217;
        }
        if (v110 <= 1) {
          uint64_t v113 = 1;
        }
        else {
          uint64_t v113 = v108 - v107;
        }
        if (*v107 != *v111) {
          goto LABEL_238;
        }
        uint64_t v114 = 1;
        do
        {
          unint64_t v115 = v114;
          if (v113 == v114) {
            break;
          }
          double v116 = v107[v114];
          double v117 = v111[v114++];
        }
        while (v116 == v117);
        char v118 = v115 >= v110;
LABEL_186:
        if ((v118 & 1) == 0) {
          goto LABEL_238;
        }
        goto LABEL_217;
      case 4:
        uint64_t v119 = *(void *)v99 + 8;
        v192 = &v191;
        uint64_t v193 = v119;
        if (v97[8] != 4) {
          goto LABEL_238;
        }
        char v118 = nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>((uint64_t)&v192, (uint64_t *)(*(void *)v97 + 8));
        goto LABEL_186;
      case 5:
        uint64_t v120 = *(void *)v99 + 8;
        v192 = &v191;
        uint64_t v193 = v120;
        if (v97[8] != 5) {
          goto LABEL_238;
        }
        nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>((uint64_t)&v192, (uint64_t *)(*(void *)v97 + 8));
        goto LABEL_186;
      case 6:
      case 8:
        goto LABEL_239;
      case 7:
        if (v97[8] != 7) {
          goto LABEL_238;
        }
        goto LABEL_217;
      case 9:
        double v121 = *v99;
        v122 = (_DWORD *)(*(void *)&v121 + 8);
        switch(v97[8])
        {
          case 1:
            double v147 = *(double *)v97;
            v192 = 0;
            v149 = *(char **)(*(void *)&v121 + 32);
            v148 = *(char **)(*(void *)&v121 + 40);
            v150 = (char *)(v148 - v149);
            if (v148 == v149 || !*(void *)(*(void *)&v121 + 16)) {
              goto LABEL_214;
            }
            if ((unint64_t)(v150 - 8) < 8)
            {
              uint64_t v151 = 1;
              v152 = *(char **)(*(void *)&v121 + 32);
              do
              {
LABEL_212:
                uint64_t v177 = *(void *)v152;
                v152 += 8;
                v151 *= v177;
              }
              while (v152 != v148);
              goto LABEL_213;
            }
            unint64_t v172 = ((unint64_t)(v150 - 8) >> 3) + 1;
            v152 = &v149[8 * (v172 & 0x3FFFFFFFFFFFFFFELL)];
            v173 = v149 + 8;
            uint64_t v174 = v172 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v175 = 1;
            uint64_t v176 = 1;
            do
            {
              v175 *= *(v173 - 1);
              v176 *= *v173;
              v173 += 2;
              v174 -= 2;
            }
            while (v174);
            uint64_t v151 = v176 * v175;
            if (v172 != (v172 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_212;
            }
LABEL_213:
            v192 = (char *)v151;
            if (v151 != 1)
            {
LABEL_214:
              v194 = &v192;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL v159 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v122, v147);
            goto LABEL_216;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_238;
          case 6:
          case 8:
            goto LABEL_239;
          case 9:
            char v118 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)v97 + 8), (_DWORD *)(*(void *)&v121 + 8));
            goto LABEL_186;
          default:
            uint64_t v123 = *(void *)v97;
            v192 = 0;
            v125 = *(char **)(*(void *)&v121 + 32);
            v124 = *(char **)(*(void *)&v121 + 40);
            v126 = (char *)(v124 - v125);
            if (v124 == v125 || !*(void *)(*(void *)&v121 + 16)) {
              goto LABEL_193;
            }
            if ((unint64_t)(v126 - 8) < 8)
            {
              uint64_t v127 = 1;
              v128 = *(char **)(*(void *)&v121 + 32);
              do
              {
LABEL_191:
                uint64_t v158 = *(void *)v128;
                v128 += 8;
                v127 *= v158;
              }
              while (v128 != v124);
              goto LABEL_192;
            }
            unint64_t v153 = ((unint64_t)(v126 - 8) >> 3) + 1;
            v128 = &v125[8 * (v153 & 0x3FFFFFFFFFFFFFFELL)];
            v154 = v125 + 8;
            uint64_t v155 = v153 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v156 = 1;
            uint64_t v157 = 1;
            do
            {
              v156 *= *(v154 - 1);
              v157 *= *v154;
              v154 += 2;
              v155 -= 2;
            }
            while (v155);
            uint64_t v127 = v157 * v156;
            if (v153 != (v153 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_191;
            }
LABEL_192:
            v192 = (char *)v127;
            if (v127 != 1)
            {
LABEL_193:
              v194 = &v192;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL v159 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v122, v123);
            break;
        }
        goto LABEL_216;
      default:
        switch(v97[8])
        {
          case 1:
            double v100 = *(double *)v97;
            double v101 = (double)*(uint64_t *)v99;
LABEL_175:
            if (v100 != v101) {
              goto LABEL_238;
            }
            goto LABEL_217;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_238;
          case 6:
          case 8:
            goto LABEL_239;
          case 9:
            uint64_t v133 = *(void *)v97;
            double v134 = *v99;
            v192 = 0;
            v136 = *(char **)(v133 + 32);
            v135 = *(char **)(v133 + 40);
            if (v135 == v136 || !*(void *)(v133 + 16)) {
              goto LABEL_200;
            }
            unint64_t v137 = v135 - v136 - 8;
            if (v137 < 8)
            {
              uint64_t v138 = 1;
              v139 = *(char **)(v133 + 32);
              do
              {
LABEL_198:
                uint64_t v165 = *(void *)v139;
                v139 += 8;
                v138 *= v165;
              }
              while (v139 != v135);
              goto LABEL_199;
            }
            uint64_t v160 = (v137 >> 3) + 1;
            v139 = &v136[8 * (v160 & 0x3FFFFFFFFFFFFFFELL)];
            v161 = v136 + 8;
            uint64_t v162 = v160 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v163 = 1;
            uint64_t v164 = 1;
            do
            {
              v163 *= *(v161 - 1);
              v164 *= *v161;
              v161 += 2;
              v162 -= 2;
            }
            while (v162);
            uint64_t v138 = v164 * v163;
            if (v160 != (v160 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_198;
            }
LABEL_199:
            v192 = (char *)v138;
            if (v138 != 1)
            {
LABEL_200:
              v194 = &v192;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
            BOOL v159 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v133 + 8), *(uint64_t *)&v134);
LABEL_216:
            if (!v159) {
              goto LABEL_238;
            }
            break;
          default:
            if (*(void *)v97 != *(void *)v99) {
              goto LABEL_238;
            }
            goto LABEL_217;
        }
        goto LABEL_217;
    }
  }
}

void sub_19268E218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL nitro::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 - *a2 != a3[1] - *a3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = 0;
  while (2)
  {
    uint64_t v8 = (unsigned char *)(v4 + 16 * v7);
    char v9 = (unsigned char *)(*a3 + 16 * v7);
    switch(v9[8])
    {
      case 1:
        switch(v8[8])
        {
          case 1:
            double v28 = *(double *)v8;
            double v41 = *(double *)v9;
            goto LABEL_58;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            return 0;
          case 6:
          case 8:
            goto LABEL_109;
          case 9:
            double v55 = *(double *)v8;
            double v56 = *(double *)v9;
            uint64_t v88 = 0;
            std::string::size_type v58 = *(char **)(*(void *)&v55 + 32);
            double v57 = *(char **)(*(void *)&v55 + 40);
            if (v57 == v58 || !*(void *)(*(void *)&v55 + 16)) {
              goto LABEL_104;
            }
            unint64_t v59 = v57 - v58 - 8;
            if (v59 < 8)
            {
              uint64_t v60 = 1;
              uint64_t v61 = *(char **)(*(void *)&v55 + 32);
              do
              {
LABEL_102:
                uint64_t v86 = *(void *)v61;
                v61 += 8;
                v60 *= v86;
              }
              while (v61 != v57);
              goto LABEL_103;
            }
            uint64_t v81 = (v59 >> 3) + 1;
            uint64_t v61 = &v58[8 * (v81 & 0x3FFFFFFFFFFFFFFELL)];
            unint64_t v82 = v58 + 8;
            uint64_t v83 = v81 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v84 = 1;
            uint64_t v85 = 1;
            do
            {
              v84 *= *(v82 - 1);
              v85 *= *v82;
              v82 += 2;
              v83 -= 2;
            }
            while (v83);
            uint64_t v60 = v85 * v84;
            if (v81 != (v81 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_102;
            }
LABEL_103:
            uint64_t v88 = (char *)v60;
            if (v60 != 1)
            {
LABEL_104:
              uint64_t v90 = &v88;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v55 + 8), v56);
            if (!result) {
              return result;
            }
            goto LABEL_5;
          default:
            double v28 = *(double *)v9;
            double v29 = *(double *)v8;
            goto LABEL_57;
        }
      case 2:
        if (v8[8] != 2) {
          return 0;
        }
        double v30 = *(double *)v8;
        int v31 = *(char *)(*(void *)v8 + 31);
        size_t v32 = *(unsigned __int8 *)(*(void *)v8 + 31);
        if (v31 < 0) {
          size_t v33 = *(void *)(*(void *)&v30 + 16);
        }
        else {
          size_t v33 = v32;
        }
        double v37 = *(double *)v9;
        uint64_t v38 = *(unsigned __int8 *)(*(void *)&v37 + 31);
        if (*(char *)(*(void *)&v37 + 31) < 0)
        {
          if (v33 != *(void *)(*(void *)&v37 + 16)) {
            return 0;
          }
        }
        else if (v33 != v38)
        {
          return 0;
        }
        uint64_t v39 = (unsigned __int8 *)(*(void *)&v30 + 8);
        if ((v32 & 0x80) == 0)
        {
          double v40 = (unsigned __int8 *)(*(void *)&v37 + 8);
          if ((v38 & 0x80) != 0) {
            goto LABEL_51;
          }
LABEL_48:
          if ((v32 & 0x80) == 0) {
            goto LABEL_52;
          }
LABEL_4:
          if (memcmp(v39, v40, v33)) {
            return 0;
          }
LABEL_5:
          uint64_t v4 = *a2;
          uint64_t v3 = a2[1];
LABEL_6:
          if (++v7 >= (unint64_t)((v3 - v4) >> 4)) {
            return 1;
          }
          continue;
        }
        uint64_t v39 = *(unsigned __int8 **)v39;
        double v40 = (unsigned __int8 *)(*(void *)&v37 + 8);
        if ((v38 & 0x80) == 0) {
          goto LABEL_48;
        }
LABEL_51:
        double v40 = *(unsigned __int8 **)v40;
        if ((v32 & 0x80) != 0) {
          goto LABEL_4;
        }
LABEL_52:
        if (!v33) {
          goto LABEL_6;
        }
        while (*v39 == *v40)
        {
          ++v39;
          ++v40;
          if (!--v33) {
            goto LABEL_6;
          }
        }
        return 0;
      case 3:
        if (v8[8] != 3) {
          return 0;
        }
        double v10 = *(double *)v9;
        std::string::size_type v11 = *(double **)(*(void *)v8 + 8);
        unint64_t v12 = *(double **)(*(void *)v8 + 16);
        unint64_t v13 = v12 - v11;
        uint64_t v14 = *(double **)(*(void *)&v10 + 8);
        if (v13 != (uint64_t)(*(void *)(*(void *)&v10 + 16) - (void)v14) >> 3) {
          return 0;
        }
        if (v12 != v11)
        {
          uint64_t v15 = v13 <= 1 ? 1 : v12 - v11;
          if (*v11 != *v14) {
            return 0;
          }
          uint64_t v16 = 1;
          do
          {
            unint64_t v17 = v16;
            if (v15 == v16) {
              break;
            }
            double v18 = v11[v16];
            double v19 = v14[v16++];
          }
          while (v18 == v19);
          if (v17 < v13) {
            return 0;
          }
        }
        goto LABEL_5;
      case 4:
        uint64_t v36 = *(void *)v9 + 8;
        uint64_t v88 = &v87;
        uint64_t v89 = v36;
        if (v8[8] != 4
          || !nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>((uint64_t)&v88, (uint64_t *)(*(void *)v8 + 8)))
        {
          return 0;
        }
        goto LABEL_5;
      case 5:
        uint64_t v34 = *(void *)v9 + 8;
        uint64_t v88 = &v87;
        uint64_t v89 = v34;
        if (v8[8] != 5) {
          return 0;
        }
        nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>((uint64_t)&v88, (uint64_t *)(*(void *)v8 + 8));
        if ((v35 & 1) == 0) {
          return 0;
        }
        goto LABEL_5;
      case 6:
      case 8:
LABEL_109:
        __break(1u);
        JUMPOUT(0x19268E9A4);
      case 7:
        if (v8[8] != 7) {
          return 0;
        }
        goto LABEL_6;
      case 9:
        uint64_t v20 = *(void **)v9;
        uint64_t v21 = (_DWORD *)(*(void *)v9 + 8);
        switch(v8[8])
        {
          case 1:
            double v49 = *(double *)v8;
            uint64_t v88 = 0;
            uint64_t v51 = (char *)v20[4];
            uint64_t v50 = (char *)v20[5];
            uint64_t v52 = (char *)(v50 - v51);
            if (v50 == v51 || !v20[2]) {
              goto LABEL_96;
            }
            if ((unint64_t)(v52 - 8) < 8)
            {
              uint64_t v53 = 1;
              unint64_t v54 = (char *)v20[4];
              do
              {
LABEL_94:
                uint64_t v80 = *(void *)v54;
                v54 += 8;
                v53 *= v80;
              }
              while (v54 != v50);
              goto LABEL_95;
            }
            unint64_t v75 = ((unint64_t)(v52 - 8) >> 3) + 1;
            unint64_t v54 = &v51[8 * (v75 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v76 = v51 + 8;
            uint64_t v77 = v75 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v78 = 1;
            uint64_t v79 = 1;
            do
            {
              v78 *= *(v76 - 1);
              v79 *= *v76;
              v76 += 2;
              v77 -= 2;
            }
            while (v77);
            uint64_t v53 = v79 * v78;
            if (v75 != (v75 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_94;
            }
LABEL_95:
            uint64_t v88 = (char *)v53;
            if (v53 != 1)
            {
LABEL_96:
              uint64_t v90 = &v88;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v21, v49);
            if (!result) {
              return result;
            }
            goto LABEL_5;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            return 0;
          case 6:
          case 8:
            goto LABEL_109;
          case 9:
            if ((nitro::ndarray_container::operator==((_DWORD *)(*(void *)v8 + 8), (_DWORD *)(*(void *)v9 + 8)) & 1) == 0) {
              return 0;
            }
            goto LABEL_5;
          default:
            uint64_t v22 = *(void *)v8;
            uint64_t v88 = 0;
            uint64_t v24 = (char *)v20[4];
            uint64_t v23 = (char *)v20[5];
            unint64_t v25 = (char *)(v23 - v24);
            if (v23 == v24 || !v20[2]) {
              goto LABEL_80;
            }
            if ((unint64_t)(v25 - 8) < 8)
            {
              uint64_t v26 = 1;
              uint64_t v27 = (char *)v20[4];
              do
              {
LABEL_78:
                uint64_t v67 = *(void *)v27;
                v27 += 8;
                v26 *= v67;
              }
              while (v27 != v23);
              goto LABEL_79;
            }
            unint64_t v62 = ((unint64_t)(v25 - 8) >> 3) + 1;
            uint64_t v27 = &v24[8 * (v62 & 0x3FFFFFFFFFFFFFFELL)];
            double v63 = v24 + 8;
            uint64_t v64 = v62 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v65 = 1;
            uint64_t v66 = 1;
            do
            {
              v65 *= *(v63 - 1);
              v66 *= *v63;
              v63 += 2;
              v64 -= 2;
            }
            while (v64);
            uint64_t v26 = v66 * v65;
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_78;
            }
LABEL_79:
            uint64_t v88 = (char *)v26;
            if (v26 != 1)
            {
LABEL_80:
              uint64_t v90 = &v88;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v21, v22);
            if (!result) {
              return result;
            }
            goto LABEL_5;
        }
      default:
        switch(v8[8])
        {
          case 1:
            double v28 = *(double *)v8;
            double v29 = *(double *)v9;
LABEL_57:
            double v41 = (double)*(uint64_t *)&v29;
LABEL_58:
            if (v28 != v41) {
              return 0;
            }
            goto LABEL_5;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            return 0;
          case 6:
          case 8:
            goto LABEL_109;
          case 9:
            uint64_t v42 = *(void *)v8;
            uint64_t v43 = *(void *)v9;
            uint64_t v88 = 0;
            double v45 = *(char **)(v42 + 32);
            uint64_t v44 = *(char **)(v42 + 40);
            if (v44 == v45 || !*(void *)(v42 + 16)) {
              goto LABEL_88;
            }
            unint64_t v46 = v44 - v45 - 8;
            if (v46 < 8)
            {
              uint64_t v47 = 1;
              size_t v48 = *(char **)(v42 + 32);
              do
              {
LABEL_86:
                uint64_t v74 = *(void *)v48;
                v48 += 8;
                v47 *= v74;
              }
              while (v48 != v44);
              goto LABEL_87;
            }
            uint64_t v69 = (v46 >> 3) + 1;
            size_t v48 = &v45[8 * (v69 & 0x3FFFFFFFFFFFFFFELL)];
            unint64_t v70 = v45 + 8;
            uint64_t v71 = v69 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v72 = 1;
            uint64_t v73 = 1;
            do
            {
              v72 *= *(v70 - 1);
              v73 *= *v70;
              v70 += 2;
              v71 -= 2;
            }
            while (v71);
            uint64_t v47 = v73 * v72;
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_86;
            }
LABEL_87:
            uint64_t v88 = (char *)v47;
            if (v47 != 1)
            {
LABEL_88:
              uint64_t v90 = &v88;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v42 + 8), v43);
            if (!result) {
              return result;
            }
            goto LABEL_5;
          default:
            if (*(void *)v8 != *(void *)v9) {
              return 0;
            }
            goto LABEL_5;
        }
    }
  }
}

uint64_t nitro::flexible_type_fail(uint64_t this)
{
  if ((this & 1) == 0) {
    nitro::flexible_type_fail(BOOL)::$_0::operator()();
  }
  return this;
}

uint64_t nitro::flexible_type::is_zero(nitro::flexible_type *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t is_zero = 1;
  switch(*((unsigned char *)this + 8))
  {
    case 0:
      double v3 = *(double *)this;
      return *(void *)&v3 == 0;
    case 1:
      return *(double *)this == 0.0;
    case 2:
      if (*(char *)(*(void *)this + 31) < 0) {
        double v3 = *(double *)(*(void *)this + 16);
      }
      else {
        *(void *)&double v3 = *(unsigned __int8 *)(*(void *)this + 31);
      }
      return *(void *)&v3 == 0;
    case 3:
    case 4:
    case 5:
      return *(void *)(*(void *)this + 8) == *(void *)(*(void *)this + 16);
    case 7:
      return is_zero;
    case 9:
      double v4 = *(double *)this;
      uint64_t v6 = *(char **)(*(void *)this + 32);
      uint64_t v5 = *(char **)(*(void *)this + 40);
      int64_t v7 = v5 - v6;
      if (v5 == v6 || !*(void *)(*(void *)&v4 + 16)) {
        return is_zero;
      }
      unint64_t v8 = v7 - 8;
      unint64_t v9 = (unint64_t)(v7 - 8) >> 3;
      if (v8 < 8)
      {
        uint64_t v10 = 1;
        std::string::size_type v11 = *(char **)(*(void *)this + 32);
        do
        {
LABEL_20:
          uint64_t v18 = *(void *)v11;
          v11 += 8;
          v10 *= v18;
        }
        while (v11 != v5);
        goto LABEL_21;
      }
      uint64_t v13 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
      std::string::size_type v11 = &v6[8 * v13];
      uint64_t v14 = v6 + 8;
      uint64_t v15 = 1;
      uint64_t v16 = v13;
      uint64_t v17 = 1;
      do
      {
        v15 *= *(v14 - 1);
        v17 *= *v14;
        v14 += 2;
        v16 -= 2;
      }
      while (v16);
      uint64_t v10 = v17 * v15;
      if (v9 + 1 != v13) {
        goto LABEL_20;
      }
LABEL_21:
      if (!v10) {
        return 1;
      }
      if (v8 < 8)
      {
        uint64_t v19 = 1;
        uint64_t v20 = v6;
        do
        {
LABEL_28:
          uint64_t v27 = *(void *)v20;
          v20 += 8;
          v19 *= v27;
        }
        while (v20 != v5);
        goto LABEL_29;
      }
      unint64_t v21 = v9 + 1;
      uint64_t v22 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v20 = &v6[8 * v22];
      uint64_t v23 = v6 + 8;
      uint64_t v24 = 1;
      uint64_t v25 = v22;
      uint64_t v26 = 1;
      do
      {
        v24 *= *(v23 - 1);
        v26 *= *v23;
        v23 += 2;
        v25 -= 2;
      }
      while (v25);
      uint64_t v19 = v26 * v24;
      if (v21 != v22) {
        goto LABEL_28;
      }
LABEL_29:
      if (v19 != 1) {
        return 0;
      }
      uint64_t v28 = *(void *)&v4 + 8;
      switch(*(_DWORD *)(*(void *)&v4 + 8))
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)v36, v28);
          char v39 = 0;
          *(void *)&double v38 = *(int *)(v36[0] + 4 * v36[8]);
          uint64_t is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v36);
          break;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)v37, v28);
          char v39 = 0;
          *(void *)&double v38 = *(unsigned __int8 *)(v37[0] + v37[8]);
          uint64_t is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v37);
          break;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)v34, v28);
          char v39 = 1;
          double v38 = *(float *)(v34[0] + 4 * v34[8]);
          uint64_t is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v34);
          break;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)v35, v28);
          char v39 = 1;
          _H0 = *(_WORD *)(v35[0] + 2 * v35[8]);
          __asm { FCVT            D0, H0 }
          double v38 = _D0;
          uint64_t is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v35);
          break;
        default:
          nitro::ndarray_container::visit<nitro::flexible_type::is_zero(void)::$_0>(nitro::flexible_type::is_zero(void)::$_0)const::{lambda(void)#1}::operator()();
      }
      return is_zero;
    default:
      nitro::flexible_type::is_zero(void)const::$_1::operator()();
  }
}

void sub_19268ED58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19268ED6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19268ED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void nitro::flexible_type::is_zero(void)const::$_1::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 177, 1);
    char v2 = pthread_getspecific(*((void *)started + 74));
    if (v2 && *((unsigned char *)v2 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2 + 2, (uint64_t)"Unexpected type!", 16);
    }
    double v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
      }
    }
  }
  uint64_t v5 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "Unexpected type!");
}

void sub_19268EEF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_fail(BOOL)::$_0::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 192, 1);
    char v2 = pthread_getspecific(*((void *)started + 74));
    if (v2 && *((unsigned char *)v2 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2 + 2, (uint64_t)"Invalid type conversion", 23);
    }
    double v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
      }
    }
  }
  uint64_t v5 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "Invalid type conversion");
}

void sub_19268F010(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::vector<std::string>>::get(unsigned char *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1[8] != 4) {
    nitro::flexible_type_converter<std::vector<std::string>>::get(nitro::flexible_type const&)const::$_0::operator()();
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 8);
  if (*(void *)(*(void *)a1 + 16) != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v9 = *(void *)(v4 + v5);
      uint64_t v10 = (long long *)(v9 + 8);
      if ((unint64_t)v6 < *(void *)(a2 + 16))
      {
        if (*(char *)(v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
        }
        else
        {
          long long v8 = *v10;
          v6->__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
        }
        *(void *)(a2 + 8) = ++v6;
      }
      else
      {
        uint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v10);
      }
      *(void *)(a2 + 8) = v6;
      ++v7;
      uint64_t v4 = *(void *)(v3 + 8);
      v5 += 16;
    }
    while (v7 < (*(void *)(v3 + 16) - v4) >> 4);
  }
}

void nitro::flexible_type_converter<std::vector<std::string>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  char v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"int(f.get_type())", 17);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"int(flex_type_enum::LIST)", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 200, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 200, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19268F414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::vector<int>>::get(unsigned __int8 *a1@<X1>, std::vector<int> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  int v3 = a1[8];
  if (v3 == 9)
  {
    double v18 = *(double *)a1;
    int v20 = *(_DWORD *)(*(void *)&v18 + 8);
    uint64_t v19 = (const nitro::ndarray_container *)(*(void *)&v18 + 8);
    if (v20 == 3) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v19);
    }
    else {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v19, (uint64_t)&__dst);
    }
    nitro::ndarray<int>::ndarray((uint64_t)&v77, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v77, (uint64_t *)__idx);
    begin = a2->__begin_;
    if (a2->__begin_)
    {
      a2->__end_ = begin;
      operator delete(begin);
      a2->__begin_ = 0;
      a2->__end_ = 0;
      a2->__end_cap_.__value_ = 0;
    }
    *(_OWORD *)&a2->__begin_ = *(_OWORD *)__idx;
    a2->__end_cap_.__value_ = v83;
    __idx[1] = 0;
    uint64_t v83 = 0;
    __idx[0] = 0;
    if (__p)
    {
      uint64_t v80 = __p;
      operator delete(__p);
    }
    if (v77.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v78 = v77.__r_.__value_.__r.__words[2];
      operator delete((void *)v77.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
    if (v77.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v77.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    if (v87)
    {
      uint64_t v88 = v87;
      operator delete(v87);
    }
    if (v85)
    {
      uint64_t v86 = v85;
      operator delete(v85);
    }
    uint64_t v24 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2]
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    return;
  }
  if (v3 != 4)
  {
    LODWORD(v21) = 0;
    switch(a1[8])
    {
      case 1u:
        uint64_t v21 = (uint64_t)*(double *)a1;
        goto LABEL_50;
      case 2u:
        double v40 = *(double *)a1;
        double v41 = (const char **)(*(void *)a1 + 8);
        v89[0] = 0;
        uint64_t v42 = (const char *)v41;
        if (*(char *)(*(void *)&v40 + 31) < 0) {
          uint64_t v42 = *v41;
        }
        size_t v43 = strlen(v42);
        if (v43 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v44 = v43;
        if (v43 >= 0x17)
        {
          uint64_t v53 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43 | 7) != 0x17) {
            uint64_t v53 = v43 | 7;
          }
          uint64_t v54 = v53 + 1;
          p_dst = (std::string *)operator new(v53 + 1);
          __dst.__r_.__value_.__l.__size_ = v44;
          __dst.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43;
          p_dst = &__dst;
          if (!v43) {
            goto LABEL_84;
          }
        }
        memmove(p_dst, v42, v44);
LABEL_84:
        p_dst->__r_.__value_.__s.__data_[v44] = 0;
        int v55 = std::stoll(&__dst, v89, 10);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(char *)(*(void *)&v40 + 31) < 0)
        {
          if (v89[0] == *(void *)(*(void *)&v40 + 16))
          {
LABEL_88:
            std::vector<int>::pointer end = a2->__end_;
            value = a2->__end_cap_.__value_;
            p_std::vector<int>::pointer end = &a2->__end_;
            LODWORD(v21) = v55;
            if (end < value)
            {
              *std::vector<int>::pointer end = v55;
              double v37 = end + 1;
LABEL_78:
              *p_std::vector<int>::pointer end = v37;
              return;
            }
LABEL_51:
            std::vector<int>::pointer v28 = a2->__begin_;
            uint64_t v29 = (char *)end - (char *)a2->__begin_;
            uint64_t v30 = v29 >> 2;
            unint64_t v31 = (v29 >> 2) + 1;
            if (v31 >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = (char *)value - (char *)v28;
            if (v32 >> 1 > v31) {
              unint64_t v31 = v32 >> 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              if (v33 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v34 = operator new(4 * v33);
            }
            else
            {
              uint64_t v34 = 0;
            }
            char v35 = (int *)&v34[4 * v30];
            uint64_t v36 = (int *)&v34[4 * v33];
            *char v35 = v21;
            double v37 = v35 + 1;
            if (end != v28)
            {
              unint64_t v38 = (char *)end - (char *)v28 - 4;
              if (v38 < 0x2C)
              {
                std::vector<int>::pointer v39 = end;
                goto LABEL_75;
              }
              if ((unint64_t)((char *)end - &v34[v29]) < 0x20)
              {
                std::vector<int>::pointer v39 = end;
                do
                {
LABEL_75:
                  int v52 = *--v39;
                  *--char v35 = v52;
                }
                while (v39 != v28);
                goto LABEL_76;
              }
              uint64_t v46 = (v38 >> 2) + 1;
              uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
              std::vector<int>::pointer v39 = &end[v47 / 0xFFFFFFFFFFFFFFFCLL];
              char v35 = (int *)((char *)v35 - v47);
              size_t v48 = &v34[4 * v30 - 16];
              double v49 = (long long *)(end - 4);
              uint64_t v50 = v46 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v51 = *v49;
                *(v48 - 1) = *(v49 - 1);
                *size_t v48 = v51;
                v48 -= 2;
                v49 -= 2;
                v50 -= 8;
              }
              while (v50);
              if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_75;
              }
            }
LABEL_76:
            a2->__begin_ = v35;
            a2->__end_ = v37;
            a2->__end_cap_.__value_ = v36;
            if (v28) {
              operator delete(v28);
            }
            goto LABEL_78;
          }
        }
        else if (v89[0] == *(unsigned __int8 *)(*(void *)&v40 + 31))
        {
          goto LABEL_88;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v57 = std::string::append(&v77, " cannot be interpreted as an integer");
        long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      case 3u:
        double v70 = *(double *)a1;
        __idx[1] = 0;
        uint64_t v83 = 0;
        __idx[0] = 0;
        uint64_t v72 = *(unsigned char **)(*(void *)&v70 + 8);
        uint64_t v71 = *(unsigned char **)(*(void *)&v70 + 16);
        int64_t v73 = v71 - v72;
        if (v71 != v72)
        {
          if (v73 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v75 = operator new(v71 - v72);
          size_t v76 = (size_t)v75 + 8 * (v73 >> 3);
          __idx[0] = (size_t)v75;
          uint64_t v83 = (int *)v76;
          memcpy(v75, v72, v73);
          __idx[1] = v76;
        }
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      case 4u:
      case 6u:
LABEL_111:
        __break(1u);
        return;
      case 5u:
        double v74 = *(double *)a1;
        memset(v81, 0, sizeof(v81));
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)v81, *(char **)(*(void *)&v74 + 8), *(char **)(*(void *)&v74 + 16), (uint64_t)(*(void *)(*(void *)&v74 + 16) - *(void *)(*(void *)&v74 + 8)) >> 5);
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      case 7u:
        goto LABEL_50;
      default:
        uint64_t v21 = *(void *)a1;
LABEL_50:
        std::vector<int>::pointer end = 0;
        value = 0;
        p_std::vector<int>::pointer end = &a2->__end_;
        goto LABEL_51;
    }
  }
  double v4 = *(double *)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 8);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  if (v5 != v6)
  {
    std::vector<Device>::__append(a2, (v5 - v6) >> 4);
    uint64_t v6 = *(void *)(*(void *)&v4 + 8);
    uint64_t v5 = *(void *)(*(void *)&v4 + 16);
  }
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (2)
    {
      uint64_t v10 = (double *)(v6 + v7);
      LODWORD(v9) = 0;
      switch(*(unsigned char *)(v6 + v7 + 8))
      {
        case 1:
          std::string::size_type v9 = (uint64_t)*v10;
          goto LABEL_8;
        case 2:
          double v11 = *v10;
          unint64_t v12 = (const char **)(*(void *)v10 + 8);
          __idx[0] = 0;
          uint64_t v13 = (const char *)v12;
          if (*(char *)(*(void *)&v11 + 31) < 0) {
            uint64_t v13 = *v12;
          }
          size_t v14 = strlen(v13);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v9 = v14;
          if (v14 >= 0x17)
          {
            uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v16 = v14 | 7;
            }
            uint64_t v17 = v16 + 1;
            uint64_t v15 = (std::string *)operator new(v16 + 1);
            __dst.__r_.__value_.__l.__size_ = v9;
            __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            uint64_t v15 = &__dst;
            if (!v14) {
              goto LABEL_21;
            }
          }
          memmove(v15, v13, v9);
LABEL_21:
          v15->__r_.__value_.__s.__data_[v9] = 0;
          LODWORD(v9) = std::stoll(&__dst, __idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(*(void *)&v11 + 31) < 0)
          {
            if (__idx[0] != *(void *)(*(void *)&v11 + 16))
            {
LABEL_93:
              unint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v60 = std::string::append(&v77, " cannot be interpreted as an integer");
              long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v61;
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v59, &__dst);
              __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
          }
          else if (__idx[0] != *(unsigned __int8 *)(*(void *)&v11 + 31))
          {
            goto LABEL_93;
          }
          uint64_t v6 = *(void *)(*(void *)&v4 + 8);
          uint64_t v5 = *(void *)(*(void *)&v4 + 16);
LABEL_8:
          a2->__begin_[v8++] = v9;
          v7 += 16;
          if (v8 < (v5 - v6) >> 4) {
            continue;
          }
          return;
        case 3:
          uint64_t v62 = *(void *)(v6 + v7);
          memset(&__dst, 0, sizeof(__dst));
          uint64_t v64 = *(unsigned char **)(v62 + 8);
          double v63 = *(unsigned char **)(v62 + 16);
          int64_t v65 = v63 - v64;
          if (v63 != v64)
          {
            if (v65 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v68 = operator new(v63 - v64);
            std::string::size_type v69 = (std::string::size_type)v68 + 8 * (v65 >> 3);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
            __dst.__r_.__value_.__r.__words[2] = v69;
            memcpy(v68, v64, v65);
            __dst.__r_.__value_.__l.__size_ = v69;
          }
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 4:
          uint64_t v66 = *(void *)(v6 + v7);
          memset(&__dst, 0, sizeof(__dst));
          std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(v66 + 8), *(void **)(v66 + 16), (uint64_t)(*(void *)(v66 + 16) - *(void *)(v66 + 8)) >> 4);
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 5:
          uint64_t v67 = *(void *)(v6 + v7);
          memset(&__dst, 0, sizeof(__dst));
          std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(v67 + 8), *(char **)(v67 + 16), (uint64_t)(*(void *)(v67 + 16) - *(void *)(v67 + 8)) >> 5);
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 6:
        case 8:
          goto LABEL_111;
        case 7:
          goto LABEL_8;
        case 9:
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)(v6 + v7) + 8));
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        default:
          std::string::size_type v9 = *(void *)v10;
          goto LABEL_8;
      }
    }
  }
}

void sub_19268FD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v35 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
LABEL_8:
    double v37 = *(void **)v33;
    if (*(void *)v33)
    {
      *(void *)(v33 + 8) = v37;
      operator delete(v37);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void nitro::flexible_type_converter<std::vector<long long>>::get(unsigned __int8 *a1@<X1>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v3 = a1[8];
  if (v3 == 9)
  {
    double v19 = *(double *)a1;
    int v21 = *(_DWORD *)(*(void *)&v19 + 8);
    int v20 = (const nitro::ndarray_container *)(*(void *)&v19 + 8);
    if (v21 == 3) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v20);
    }
    else {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v20, (uint64_t)&__dst);
    }
    nitro::ndarray<int>::ndarray((uint64_t)&v95, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v95, (uint64_t *)&__idx);
    if (__p)
    {
      uint64_t v98 = __p;
      operator delete(__p);
    }
    if (v95.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v96 = v95.__r_.__value_.__r.__words[2];
      operator delete((void *)v95.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
    if (v95.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v95.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    if (v102)
    {
      int v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      double v101 = v100;
      operator delete(v100);
    }
    uint64_t v24 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2]
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = (char *)__idx;
    uint64_t v26 = v106;
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v27 = (uint64_t)v106 - __idx;
    if (v106 == (int *)__idx)
    {
      uint64_t v30 = 0;
      uint64_t v29 = 0;
      size_t v43 = *a2;
      if (!*a2)
      {
LABEL_56:
        *a2 = (uint64_t *)v29;
        a2[1] = (uint64_t *)v27;
        a2[2] = (uint64_t *)v30;
        if (v25)
        {
          double v106 = (int *)v25;
          operator delete(v25);
        }
        return;
      }
    }
    else
    {
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFDLL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::vector<int>::pointer v28 = (char *)operator new(2 * v27);
      uint64_t v29 = v28;
      uint64_t v30 = &v28[8 * (v27 >> 2)];
      unint64_t v31 = v27 - 4;
      uint64_t v32 = (int *)v25;
      uint64_t v27 = (uint64_t)v28;
      if (v31 < 0x1C) {
        goto LABEL_126;
      }
      uint64_t v33 = (v31 >> 2) + 1;
      uint64_t v32 = (int *)&v25[4 * (v33 & 0x7FFFFFFFFFFFFFF8)];
      uint64_t v27 = (uint64_t)&v28[8 * (v33 & 0x7FFFFFFFFFFFFFF8)];
      uint64_t v34 = v28 + 32;
      int v35 = v25 + 16;
      uint64_t v36 = v33 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v37 = *((_OWORD *)v35 - 1);
        *(void *)&long long v38 = (int)v37;
        *((void *)&v38 + 1) = SDWORD1(v37);
        long long v39 = v38;
        *(void *)&long long v38 = SDWORD2(v37);
        *((void *)&v38 + 1) = SHIDWORD(v37);
        long long v40 = v38;
        *(void *)&long long v38 = (int)*(_OWORD *)v35;
        *((void *)&v38 + 1) = (int)HIDWORD(*(void *)v35);
        long long v41 = v38;
        *(void *)&long long v38 = (int)*((void *)v35 + 1);
        *((void *)&v38 + 1) = (int)HIDWORD(*(_OWORD *)v35);
        *(v34 - 2) = v39;
        *(v34 - 1) = v40;
        *uint64_t v34 = v41;
        v34[1] = v38;
        v34 += 4;
        v35 += 32;
        v36 -= 8;
      }
      while (v36);
      if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_126:
        do
        {
          uint64_t v42 = *v32++;
          *(void *)uint64_t v27 = v42;
          v27 += 8;
        }
        while (v32 != v26);
      }
      size_t v43 = *a2;
      if (!*a2) {
        goto LABEL_56;
      }
    }
    a2[1] = v43;
    operator delete(v43);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v25 = (char *)__idx;
    goto LABEL_56;
  }
  if (v3 != 4)
  {
    uint64_t v22 = 0;
    switch(a1[8])
    {
      case 1u:
        uint64_t v22 = (uint64_t)*(double *)a1;
        goto LABEL_67;
      case 2u:
        double v44 = *(double *)a1;
        double v45 = (const char **)(*(void *)a1 + 8);
        v108[0] = 0;
        uint64_t v46 = (const char *)v45;
        if (*(char *)(*(void *)&v44 + 31) < 0) {
          uint64_t v46 = *v45;
        }
        size_t v47 = strlen(v46);
        if (v47 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v48 = v47;
        if (v47 >= 0x17)
        {
          uint64_t v72 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17) {
            uint64_t v72 = v47 | 7;
          }
          uint64_t v73 = v72 + 1;
          p_dst = (std::string *)operator new(v72 + 1);
          __dst.__r_.__value_.__l.__size_ = v48;
          __dst.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v47;
          p_dst = &__dst;
          if (!v47) {
            goto LABEL_95;
          }
        }
        memmove(p_dst, v46, v48);
LABEL_95:
        p_dst->__r_.__value_.__s.__data_[v48] = 0;
        uint64_t v22 = std::stoll(&__dst, v108, 10);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(char *)(*(void *)&v44 + 31) < 0)
        {
          if (v108[0] == *(void *)(*(void *)&v44 + 16))
          {
LABEL_99:
            uint64_t v50 = a2[1];
            unint64_t v51 = (unint64_t)a2[2];
            int v52 = a2 + 1;
            if ((unint64_t)v50 < v51)
            {
              uint64_t *v50 = v22;
              uint64_t v62 = v50 + 1;
LABEL_89:
              char *v52 = v62;
              return;
            }
LABEL_68:
            uint64_t v53 = *a2;
            uint64_t v54 = (char *)v50 - (char *)*a2;
            uint64_t v55 = v54 >> 3;
            unint64_t v56 = (v54 >> 3) + 1;
            if (v56 >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v57 = v51 - (void)v53;
            if (v57 >> 2 > v56) {
              unint64_t v56 = v57 >> 2;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v56;
            }
            if (v58)
            {
              if (v58 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v59 = operator new(8 * v58);
            }
            else
            {
              unint64_t v59 = 0;
            }
            uint64_t v60 = (uint64_t *)&v59[8 * v55];
            long long v61 = &v59[8 * v58];
            uint64_t *v60 = v22;
            uint64_t v62 = v60 + 1;
            if (v50 != v53)
            {
              unint64_t v63 = (char *)v50 - (char *)v53 - 8;
              if (v63 < 0x58)
              {
                uint64_t v64 = v50;
                goto LABEL_86;
              }
              if ((unint64_t)((char *)v50 - &v59[v54]) < 0x20)
              {
                uint64_t v64 = v50;
                do
                {
LABEL_86:
                  uint64_t v71 = *--v64;
                  *--uint64_t v60 = v71;
                }
                while (v64 != v53);
                goto LABEL_87;
              }
              uint64_t v65 = (v63 >> 3) + 1;
              uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v64 = &v50[v66 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v60 = (uint64_t *)((char *)v60 - v66);
              uint64_t v67 = &v59[8 * v55 - 16];
              uint64_t v68 = v50 - 2;
              uint64_t v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v70 = *(_OWORD *)v68;
                *(v67 - 1) = *((_OWORD *)v68 - 1);
                _OWORD *v67 = v70;
                v67 -= 2;
                v68 -= 4;
                v69 -= 4;
              }
              while (v69);
              if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_86;
              }
            }
LABEL_87:
            *a2 = v60;
            a2[1] = v62;
            a2[2] = (uint64_t *)v61;
            if (v53) {
              operator delete(v53);
            }
            goto LABEL_89;
          }
        }
        else if (v108[0] == *(unsigned __int8 *)(*(void *)&v44 + 31))
        {
          goto LABEL_99;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v75 = std::string::append(&v95, " cannot be interpreted as an integer");
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      case 3u:
        double v88 = *(double *)a1;
        double v106 = 0;
        uint64_t v107 = 0;
        size_t __idx = 0;
        uint64_t v90 = *(unsigned char **)(*(void *)&v88 + 8);
        uint64_t v89 = *(unsigned char **)(*(void *)&v88 + 16);
        int64_t v91 = v89 - v90;
        if (v89 != v90)
        {
          if (v91 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v93 = (char *)operator new(v89 - v90);
          float v94 = &v93[8 * (v91 >> 3)];
          size_t __idx = (size_t)v93;
          uint64_t v107 = v94;
          memcpy(v93, v90, v91);
          double v106 = (int *)v94;
        }
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      case 4u:
      case 6u:
LABEL_123:
        __break(1u);
        return;
      case 5u:
        double v92 = *(double *)a1;
        memset(v104, 0, sizeof(v104));
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)v104, *(char **)(*(void *)&v92 + 8), *(char **)(*(void *)&v92 + 16), (uint64_t)(*(void *)(*(void *)&v92 + 16) - *(void *)(*(void *)&v92 + 8)) >> 5);
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      case 7u:
        goto LABEL_67;
      default:
        uint64_t v22 = *(void *)a1;
LABEL_67:
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        int v52 = a2 + 1;
        goto LABEL_68;
    }
  }
  double v4 = *(double *)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 8);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  if (v5 != v6)
  {
    std::vector<unsigned long long>::__append((uint64_t)a2, (v5 - v6) >> 4);
    uint64_t v6 = *(void *)(*(void *)&v4 + 8);
    uint64_t v5 = *(void *)(*(void *)&v4 + 16);
  }
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (2)
    {
      uint64_t v10 = (double *)(v6 + v7);
      uint64_t v9 = 0;
      switch(*(unsigned char *)(v6 + v7 + 8))
      {
        case 1:
          uint64_t v9 = (uint64_t)*v10;
          goto LABEL_8;
        case 2:
          double v11 = *v10;
          unint64_t v12 = (const char **)(*(void *)v10 + 8);
          size_t __idx = 0;
          uint64_t v13 = (const char *)v12;
          if (*(char *)(*(void *)&v11 + 31) < 0) {
            uint64_t v13 = *v12;
          }
          size_t v14 = strlen(v13);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v15 = v14;
          if (v14 >= 0x17)
          {
            uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v17 = v14 | 7;
            }
            uint64_t v18 = v17 + 1;
            uint64_t v16 = (std::string *)operator new(v17 + 1);
            __dst.__r_.__value_.__l.__size_ = v15;
            __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            uint64_t v16 = &__dst;
            if (!v14) {
              goto LABEL_21;
            }
          }
          memmove(v16, v13, v15);
LABEL_21:
          v16->__r_.__value_.__s.__data_[v15] = 0;
          uint64_t v9 = std::stoll(&__dst, &__idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(*(void *)&v11 + 31) < 0)
          {
            if (__idx != *(void *)(*(void *)&v11 + 16))
            {
LABEL_109:
              uint64_t v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v84 = std::string::append(&v95, " cannot be interpreted as an integer");
              long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v85;
              v84->__r_.__value_.__l.__size_ = 0;
              v84->__r_.__value_.__r.__words[2] = 0;
              v84->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v83, &__dst);
              __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
          }
          else if (__idx != *(unsigned __int8 *)(*(void *)&v11 + 31))
          {
            goto LABEL_109;
          }
          uint64_t v6 = *(void *)(*(void *)&v4 + 8);
          uint64_t v5 = *(void *)(*(void *)&v4 + 16);
LABEL_8:
          (*a2)[v8++] = v9;
          v7 += 16;
          if (v8 < (v5 - v6) >> 4) {
            continue;
          }
          return;
        case 3:
          uint64_t v77 = *(void *)(v6 + v7);
          memset(&__dst, 0, sizeof(__dst));
          uint64_t v79 = *(unsigned char **)(v77 + 8);
          std::string::size_type v78 = *(unsigned char **)(v77 + 16);
          int64_t v80 = v78 - v79;
          if (v78 != v79)
          {
            if (v80 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v86 = operator new(v78 - v79);
            std::string::size_type v87 = (std::string::size_type)v86 + 8 * (v80 >> 3);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
            __dst.__r_.__value_.__r.__words[2] = v87;
            memcpy(v86, v79, v80);
            __dst.__r_.__value_.__l.__size_ = v87;
          }
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 4:
          uint64_t v81 = *(void *)(v6 + v7);
          memset(&__dst, 0, sizeof(__dst));
          std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(v81 + 8), *(void **)(v81 + 16), (uint64_t)(*(void *)(v81 + 16) - *(void *)(v81 + 8)) >> 4);
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 5:
          uint64_t v82 = *(void *)(v6 + v7);
          memset(&__dst, 0, sizeof(__dst));
          std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(v82 + 8), *(char **)(v82 + 16), (uint64_t)(*(void *)(v82 + 16) - *(void *)(v82 + 8)) >> 5);
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 6:
        case 8:
          goto LABEL_123;
        case 7:
          goto LABEL_8;
        case 9:
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)(v6 + v7) + 8));
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        default:
          uint64_t v9 = *(void *)v10;
          goto LABEL_8;
      }
    }
  }
}

void sub_1926907A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v29)
  {
LABEL_8:
    unint64_t v31 = *(void **)v27;
    if (*(void *)v27)
    {
      *(void *)(v27 + 8) = v31;
      operator delete(v31);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

double nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get@<D0>(char *a1@<X1>, void *a2@<X8>)
{
  int v14 = a1[8];
  if (v14 != 4)
  {
    *(void *)&long long v12 = &v14;
    nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get(nitro::flexible_type const&)const::$_0::operator()();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 8);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  if (v5 != v4)
  {
    std::vector<std::vector<long long>>::__append((uint64_t)a2, (v5 - v4) >> 4);
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
  }
  if (v5 != v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      nitro::flexible_type_converter<std::vector<long long>>::get((unsigned __int8 *)(v4 + v8), (uint64_t **)&v12);
      uint64_t v10 = *a2 + v7;
      double v11 = *(void **)v10;
      if (*(void *)v10)
      {
        *(void *)(v10 + 8) = v11;
        operator delete(v11);
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
      }
      double result = *(double *)&v12;
      *(_OWORD *)uint64_t v10 = v12;
      *(void *)(v10 + 16) = v13;
      ++v9;
      uint64_t v4 = *(void *)(v3 + 8);
      v8 += 16;
      v7 += 24;
    }
    while (v9 < (*(void *)(v3 + 16) - v4) >> 4);
  }
  return result;
}

void nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  char v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"int(f.get_type())", 17);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"int(flex_type_enum::LIST)", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 255, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      std::string::size_type v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    double v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 255, 1);
    std::stringbuf::str();
    int v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      int v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192690D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_converter<int>::get(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = a2[8];
  if (v3 == 9)
  {
    double v7 = *(double *)a2;
    int v9 = *(_DWORD *)(*(void *)&v7 + 8);
    uint64_t v8 = (const nitro::ndarray_container *)(*(void *)&v7 + 8);
    if (v9 == 3) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v8);
    }
    else {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v8, (uint64_t)&__dst);
    }
    nitro::ndarray<int>::ndarray((uint64_t)&v46, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v46, (uint64_t *)&__idx);
    if (__p)
    {
      double v49 = __p;
      operator delete(__p);
    }
    if (v46.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v47 = v46.__r_.__value_.__r.__words[2];
      operator delete((void *)v46.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v46.__r_.__value_.__l.__size_;
    if (v46.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v46.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    if (v55)
    {
      unint64_t v56 = v55;
      operator delete(v55);
    }
    if (v53)
    {
      uint64_t v54 = v53;
      operator delete(v53);
    }
    double v11 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2]
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    __dst.__r_.__value_.__r.__words[0] = (uint64_t)(v51 - __idx) >> 2;
    if (v51 - __idx != 4)
    {
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
      nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_1::operator()();
    }
    uint64_t v6 = *(unsigned int *)__idx;
    uint64_t v51 = __idx;
    operator delete((void *)__idx);
  }
  else
  {
    if (v3 != 4)
    {
      uint64_t v6 = 0;
      switch(a2[8])
      {
        case 1u:
          return (uint64_t)*(double *)a2;
        case 2u:
          double v12 = *(double *)a2;
          uint64_t v13 = (const char **)(*(void *)a2 + 8);
          size_t __idx = 0;
          int v14 = (const char *)v13;
          if (*(char *)(*(void *)&v12 + 31) < 0) {
            int v14 = *v13;
          }
          size_t v15 = strlen(v14);
          if (v15 > 0x7FFFFFFFFFFFFFF7) {
LABEL_65:
          }
            std::string::__throw_length_error[abi:ne180100]();
          std::string::size_type v16 = v15;
          if (v15 >= 0x17)
          {
            uint64_t v24 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17) {
              uint64_t v24 = v15 | 7;
            }
            uint64_t v25 = v24 + 1;
            p_dst = (std::string *)operator new(v24 + 1);
            __dst.__r_.__value_.__l.__size_ = v16;
            __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
            p_dst = &__dst;
            if (!v15) {
              goto LABEL_45;
            }
          }
          memmove(p_dst, v14, v16);
LABEL_45:
          p_dst->__r_.__value_.__s.__data_[v16] = 0;
          uint64_t v6 = std::stoll(&__dst, &__idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(*(void *)&v12 + 31) < 0)
          {
            if (__idx == *(void *)(*(void *)&v12 + 16)) {
              return v6;
            }
          }
          else if (__idx == *(unsigned __int8 *)(*(void *)&v12 + 31))
          {
            return v6;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          int v29 = std::string::append(&v46, " cannot be interpreted as an integer");
          long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__dst);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        case 3u:
          double v32 = *(double *)a2;
          memset(&__dst, 0, sizeof(__dst));
          uint64_t v6 = *(void *)(*(void *)&v32 + 8);
          uint64_t v33 = *(void *)(*(void *)&v32 + 16);
          size_t v2 = v33 - v6;
          if (v33 == v6) {
            goto LABEL_67;
          }
          if ((v2 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
LABEL_80:
          double v44 = operator new(v2);
          memcpy(v44, (const void *)v6, v2);
LABEL_67:
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 4u:
        case 6u:
LABEL_79:
          __break(1u);
          goto LABEL_80;
        case 5u:
          double v34 = *(double *)a2;
          memset(&__dst, 0, sizeof(__dst));
          std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v34 + 8), *(char **)(*(void *)&v34 + 16), (uint64_t)(*(void *)(*(void *)&v34 + 16) - *(void *)(*(void *)&v34 + 8)) >> 5);
          nitro::flexible_type_fail(BOOL)::$_0::operator()();
        case 7u:
          return v6;
        default:
          return *(void *)a2;
      }
    }
    uint64_t v4 = *(unsigned char **)(*(void *)a2 + 8);
    uint64_t v5 = *(void *)(*(void *)a2 + 16) - (void)v4;
    __dst.__r_.__value_.__r.__words[0] = v5 >> 4;
    if (v5 != 16)
    {
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
      nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_0::operator()();
    }
    uint64_t v6 = 0;
    switch(v4[8])
    {
      case 1:
        return (uint64_t)*(double *)v4;
      case 2:
        double v18 = *(double *)v4;
        double v19 = (const char **)(*(void *)v4 + 8);
        size_t __idx = 0;
        int v20 = (const char *)v19;
        if (*(char *)(*(void *)&v18 + 31) < 0) {
          int v20 = *v19;
        }
        size_t v21 = strlen(v20);
        if (v21 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_65;
        }
        std::string::size_type v22 = v21;
        if (v21 >= 0x17)
        {
          uint64_t v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17) {
            uint64_t v26 = v21 | 7;
          }
          uint64_t v27 = v26 + 1;
          uint64_t v23 = (std::string *)operator new(v26 + 1);
          __dst.__r_.__value_.__l.__size_ = v22;
          __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
          uint64_t v23 = &__dst;
          if (!v21) {
            goto LABEL_54;
          }
        }
        memmove(v23, v20, v22);
LABEL_54:
        v23->__r_.__value_.__s.__data_[v22] = 0;
        uint64_t v6 = std::stoll(&__dst, &__idx, 10);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(char *)(*(void *)&v18 + 31) < 0)
        {
          if (__idx != *(void *)(*(void *)&v18 + 16)) {
            goto LABEL_74;
          }
        }
        else if (__idx != *(unsigned __int8 *)(*(void *)&v18 + 31))
        {
LABEL_74:
          long long v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v42 = std::string::append(&v46, " cannot be interpreted as an integer");
          long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v41, &__dst);
          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        return result;
      case 3:
        double v35 = *(double *)v4;
        memset(&__dst, 0, sizeof(__dst));
        long long v37 = *(unsigned char **)(*(void *)&v35 + 8);
        uint64_t v36 = *(unsigned char **)(*(void *)&v35 + 16);
        size_t v38 = v36 - v37;
        if (v36 != v37)
        {
          if ((v38 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          double v45 = operator new(v36 - v37);
          memcpy(v45, v37, v38);
        }
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      case 4:
        double v39 = *(double *)v4;
        memset(&__dst, 0, sizeof(__dst));
        std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(*(void *)&v39 + 8), *(void **)(*(void *)&v39 + 16), (uint64_t)(*(void *)(*(void *)&v39 + 16) - *(void *)(*(void *)&v39 + 8)) >> 4);
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      case 5:
        double v40 = *(double *)v4;
        memset(&__dst, 0, sizeof(__dst));
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v40 + 8), *(char **)(*(void *)&v40 + 16), (uint64_t)(*(void *)(*(void *)&v40 + 16) - *(void *)(*(void *)&v40 + 8)) >> 5);
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      case 6:
      case 8:
        goto LABEL_79;
      case 7:
        return v6;
      case 9:
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)v4 + 8));
        nitro::flexible_type_fail(BOOL)::$_0::operator()();
      default:
        return *(void *)v4;
    }
  }
  return v6;
}

void sub_1926914C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fl.size()", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  double v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 269, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      size_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v16 = __p;
      }
      else {
        std::string::size_type v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v18 = (file_logger *)global_logger();
    double v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 269, 1);
    std::stringbuf::str();
    int v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      size_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19269193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"v.size()", 8);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  double v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 276, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      size_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v16 = __p;
      }
      else {
        std::string::size_type v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v18 = (file_logger *)global_logger();
    double v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 276, 1);
    std::stringbuf::str();
    int v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      size_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192691D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get(unsigned __int8 *a1@<X1>, uint64_t **a2@<X8>)
{
  size_t v2 = a2;
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  int v3 = a1[8];
  if (v3 == 5)
  {
    uint64_t v31 = *(void *)a1;
    uint64_t v32 = *(void *)(*(void *)a1 + 8);
    if (*(void *)(*(void *)a1 + 16) != v32)
    {
      unint64_t v33 = 0;
      do
      {
        double v34 = (unsigned char *)(v32 + 32 * v33);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v34, &__p);
        p_p = &__p;
        double v35 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        uint64_t v36 = v35;
        long long v37 = v34 + 16;
        size_t v38 = v35 + 7;
        if (v34 + 16 != (unsigned char *)(v35 + 7))
        {
          switch(*((unsigned char *)v35 + 64))
          {
            case 2:
              if (atomic_fetch_add(*v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v39 = *v38;
                if (*v38)
                {
                  if (*((char *)v39 + 31) < 0) {
                    operator delete((void *)v39[1]);
                  }
                  MEMORY[0x192FF16B0](v39, 0x1012C404EF22A49);
                }
                goto LABEL_93;
              }
              break;
            case 3:
              if (atomic_fetch_add(*v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v44 = *v38;
                if (*v38)
                {
                  double v45 = (void *)v44[1];
                  if (v45)
                  {
                    v44[2] = (atomic_ullong)v45;
                    operator delete(v45);
                  }
                  MEMORY[0x192FF16B0](v44, 0x1080C409938AC02);
                }
                goto LABEL_93;
              }
              break;
            case 4:
              if (atomic_fetch_add(*v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v40 = *v38;
                if (!*v38) {
                  goto LABEL_93;
                }
                atomic_ullong v41 = v40[1];
                if (v41)
                {
                  uint64_t v42 = v40[2];
                  long long v43 = (void *)v40[1];
                  if (v42 != v41)
                  {
                    do
                    {
                      v42 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v40 + 3), v42);
                    }
                    while (v42 != v41);
                    long long v43 = (void *)v40[1];
                  }
                  v40[2] = v41;
                  operator delete(v43);
                }
                goto LABEL_82;
              }
              break;
            case 5:
              if (atomic_fetch_add(*v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v40 = *v38;
                if (*v38)
                {
                  atomic_ullong v46 = v40[1];
                  if (v46)
                  {
                    uint64_t v47 = v40[2];
                    std::string::size_type v48 = (void *)v40[1];
                    if (v47 != v46)
                    {
                      do
                        uint64_t v47 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v47 - 32);
                      while (v47 != v46);
                      std::string::size_type v48 = (void *)v40[1];
                    }
                    v40[2] = v46;
                    operator delete(v48);
                  }
LABEL_82:
                  MEMORY[0x192FF16B0](v40, 0x1020C405E66F15BLL);
                }
                goto LABEL_93;
              }
              break;
            case 9:
              if (atomic_fetch_add(*v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v49 = *v38;
                if (*v38)
                {
                  uint64_t v50 = (void *)v49[7];
                  if (v50)
                  {
                    v49[8] = (atomic_ullong)v50;
                    operator delete(v50);
                  }
                  uint64_t v51 = (void *)v49[4];
                  if (v51)
                  {
                    v49[5] = (atomic_ullong)v51;
                    operator delete(v51);
                  }
                  int v52 = (std::__shared_weak_count *)v49[3];
                  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                  MEMORY[0x192FF16B0](v49, 0x10B0C4002311774);
                }
LABEL_93:
                *size_t v38 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v53 = *(uint64_t **)v37;
          *((unsigned char *)v38 + 8) = v37[8];
          *size_t v38 = v53;
          int v54 = v37[8];
          *((unsigned char *)v36 + 64) = v54;
          if ((v54 - 2) < 4 || v54 == 9) {
            atomic_fetch_add(*v38, 1uLL);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v33;
        uint64_t v32 = *(void *)(v31 + 8);
      }
      while (v33 < (*(void *)(v31 + 16) - v32) >> 5);
    }
  }
  else
  {
    if (v3 != 4)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        unint64_t v59 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v59, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 302, 1);
        long long v61 = pthread_getspecific(started[74]);
        if (v61 && *((unsigned char *)v61 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61 + 2, (uint64_t)"Check failed: ", 14);
        }
        uint64_t v62 = pthread_getspecific(started[74]);
        if (v62 && *((unsigned char *)v62 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62 + 2, (uint64_t)"false", 5);
        }
        unint64_t v63 = pthread_getspecific(started[74]);
        if (v63 && *((unsigned char *)v63 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63 + 2, (uint64_t)":\n", 2);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 302, "Not deserializable", v56, v57, v58, v65);
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "assertion failure";
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(*(void *)a1 + 8);
    if (*(void *)(*(void *)a1 + 16) != v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(v5 + 16 * v6);
        uint64_t v8 = *(void *)(v7 + 8);
        uint64_t v9 = *(void *)(v7 + 16) - v8;
        __p.__r_.__value_.__r.__words[0] = v9 >> 4;
        if (v9 != 32)
        {
          p_p = &__p;
          nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get(nitro::flexible_type const&)const::$_0::operator()();
        }
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>((unsigned char *)v8, &__p);
        p_p = &__p;
        uint64_t v10 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        double v11 = v10;
        double v12 = v10 + 7;
        if ((uint64_t **)(v8 + 16) != v10 + 7)
        {
          switch(*((unsigned char *)v10 + 64))
          {
            case 2:
              if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v13 = *v12;
                if (*v12)
                {
                  if (*((char *)v13 + 31) < 0) {
                    operator delete((void *)v13[1]);
                  }
                  MEMORY[0x192FF16B0](v13, 0x1012C404EF22A49);
                }
                goto LABEL_44;
              }
              break;
            case 3:
              if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *v12;
                if (*v12)
                {
                  double v19 = (void *)v18[1];
                  if (v19)
                  {
                    v18[2] = (atomic_ullong)v19;
                    operator delete(v19);
                  }
                  MEMORY[0x192FF16B0](v18, 0x1080C409938AC02);
                }
                goto LABEL_44;
              }
              break;
            case 4:
              if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v14 = *v12;
                if (!*v12) {
                  goto LABEL_44;
                }
                atomic_ullong v15 = v14[1];
                if (v15)
                {
                  uint64_t v66 = v2;
                  uint64_t v16 = v14[2];
                  uint64_t v17 = (void *)v14[1];
                  if (v16 != v15)
                  {
                    do
                    {
                      v16 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v14 + 3), v16);
                    }
                    while (v16 != v15);
                    uint64_t v17 = (void *)v14[1];
                  }
                  v14[2] = v15;
                  operator delete(v17);
                  size_t v2 = v66;
                }
                goto LABEL_33;
              }
              break;
            case 5:
              if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v14 = *v12;
                if (*v12)
                {
                  atomic_ullong v20 = v14[1];
                  if (v20)
                  {
                    uint64_t v21 = v14[2];
                    std::string::size_type v22 = (void *)v14[1];
                    if (v21 != v20)
                    {
                      do
                        uint64_t v21 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v21 - 32);
                      while (v21 != v20);
                      std::string::size_type v22 = (void *)v14[1];
                    }
                    v14[2] = v20;
                    operator delete(v22);
                  }
LABEL_33:
                  MEMORY[0x192FF16B0](v14, 0x1020C405E66F15BLL);
                }
                goto LABEL_44;
              }
              break;
            case 9:
              if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v23 = *v12;
                if (*v12)
                {
                  uint64_t v24 = (void *)v23[7];
                  if (v24)
                  {
                    v23[8] = (atomic_ullong)v24;
                    operator delete(v24);
                  }
                  uint64_t v25 = v2;
                  uint64_t v26 = (void *)v23[4];
                  if (v26)
                  {
                    v23[5] = (atomic_ullong)v26;
                    operator delete(v26);
                  }
                  uint64_t v27 = (std::__shared_weak_count *)v23[3];
                  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                    std::__shared_weak_count::__release_weak(v27);
                  }
                  MEMORY[0x192FF16B0](v23, 0x10B0C4002311774);
                  size_t v2 = v25;
                }
LABEL_44:
                *double v12 = 0;
              }
              break;
            default:
              break;
          }
          unsigned __int8 v28 = *(uint64_t **)(v8 + 16);
          *((unsigned char *)v12 + 8) = *(unsigned char *)(v8 + 24);
          *double v12 = v28;
          int v29 = *(unsigned __int8 *)(v8 + 24);
          *((unsigned char *)v11 + 64) = v29;
          if ((v29 - 2) < 4 || v29 == 9) {
            atomic_fetch_add(*v12, 1uLL);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v6;
        uint64_t v5 = *(void *)(v4 + 8);
      }
      while (v6 < (*(void *)(v4 + 16) - v5) >> 4);
    }
  }
}

void sub_192692610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(v15, *(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inner.size()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 291, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v18 = (file_logger *)global_logger();
    double v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 291, 1);
    std::stringbuf::str();
    atomic_ullong v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192692970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  int v3 = a1[8];
  if (v3 == 5)
  {
    uint64_t v19 = *(void *)a1;
    uint64_t v20 = *(void *)(*(void *)a1 + 8);
    if (*(void *)(*(void *)a1 + 16) != v20)
    {
      unint64_t v21 = 0;
      do
      {
        nitro::flexible_type_converter<std::vector<std::string>>::get((unsigned char *)(v20 + 32 * v21 + 16), (uint64_t)__p);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>((unsigned char *)(*(void *)(v19 + 8) + 32 * v21), &v41);
        atomic_ullong *volatile v44 = &v41;
        uint64_t v23 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v41.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
        uint64_t v24 = v23;
        uint64_t v25 = v23 + 7;
        uint64_t v26 = v23[7];
        if (v26)
        {
          uint64_t v27 = v23[8];
          unsigned __int8 v28 = v23[7];
          if (v27 != v26)
          {
            do
            {
              if (*((char *)v27 - 1) < 0) {
                operator delete((void *)*(v27 - 3));
              }
              v27 -= 3;
            }
            while (v27 != v26);
            unsigned __int8 v28 = *v25;
          }
          v24[8] = v26;
          operator delete(v28);
          void *v25 = 0;
          v25[1] = 0;
          v25[2] = 0;
        }
        *(_OWORD *)(v24 + 7) = *(_OWORD *)__p;
        v24[9] = v43;
        __p[1] = 0;
        long long v43 = 0;
        __p[0] = 0;
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          int v29 = (void **)__p[0];
          if (__p[0])
          {
            int v30 = (void **)__p[1];
            std::string::size_type v22 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                if (*((char *)v30 - 1) < 0) {
                  operator delete(*(v30 - 3));
                }
                v30 -= 3;
              }
              while (v30 != v29);
              std::string::size_type v22 = __p[0];
            }
            __p[1] = v29;
            operator delete(v22);
          }
        }
        ++v21;
        uint64_t v20 = *(void *)(v19 + 8);
      }
      while (v21 < (*(void *)(v19 + 16) - v20) >> 5);
    }
  }
  else
  {
    if (v3 != 4)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        double v34 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v34, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 328, 1);
        uint64_t v36 = pthread_getspecific(started[74]);
        if (v36 && *((unsigned char *)v36 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36 + 2, (uint64_t)"Check failed: ", 14);
        }
        long long v37 = pthread_getspecific(started[74]);
        if (v37 && *((unsigned char *)v37 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"false", 5);
        }
        size_t v38 = pthread_getspecific(started[74]);
        if (v38 && *((unsigned char *)v38 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)":\n", 2);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 328, "Not deserializable", v31, v32, v33, v40);
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "assertion failure";
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(*(void *)a1 + 8);
    if (*(void *)(*(void *)a1 + 16) != v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v8 = *(void *)(v5 + 16 * v6);
        uint64_t v9 = *(void *)(v8 + 8);
        uint64_t v10 = *(void *)(v8 + 16) - v9;
        __p[0] = (void *)(v10 >> 4);
        if (v10 != 32)
        {
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get(nitro::flexible_type const&)const::$_0::operator()();
        }
        nitro::flexible_type_converter<std::vector<std::string>>::get((unsigned char *)(v9 + 16), (uint64_t)__p);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(*(unsigned char **)(v8 + 8), &v41);
        atomic_ullong *volatile v44 = &v41;
        double v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v41.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v44);
        double v12 = v11;
        atomic_ullong *volatile v13 = v11 + 7;
        atomic_ullong *volatile v14 = v11[7];
        if (v14)
        {
          uint64_t v15 = v11[8];
          uint64_t v16 = v11[7];
          if (v15 != v14)
          {
            do
            {
              if (*((char *)v15 - 1) < 0) {
                operator delete((void *)*(v15 - 3));
              }
              v15 -= 3;
            }
            while (v15 != v14);
            uint64_t v16 = *v13;
          }
          v12[8] = v14;
          operator delete(v16);
          const char *v13 = 0;
          v13[1] = 0;
          v13[2] = 0;
        }
        *(_OWORD *)(v12 + 7) = *(_OWORD *)__p;
        v12[9] = v43;
        __p[1] = 0;
        long long v43 = 0;
        __p[0] = 0;
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          uint64_t v17 = (void **)__p[0];
          if (__p[0])
          {
            atomic_ullong *volatile v18 = (void **)__p[1];
            uint64_t v7 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                if (*((char *)v18 - 1) < 0) {
                  operator delete(*(v18 - 3));
                }
                v18 -= 3;
              }
              while (v18 != v17);
              uint64_t v7 = __p[0];
            }
            __p[1] = v17;
            operator delete(v7);
          }
        }
        ++v6;
        uint64_t v5 = *(void *)(v4 + 8);
      }
      while (v6 < (*(void *)(v4 + 16) - v5) >> 4);
    }
  }
}

void sub_192692EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inner.size()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 314, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 314, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926931E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

BOOL nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>(uint64_t a1, uint64_t *a2)
{
  size_t v2 = *(void **)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 - *a2 != v2[1] - *v2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v6 = 0;
  while (2)
  {
    uint64_t v7 = (unsigned char *)(v4 + 16 * v6);
    uint64_t v8 = (unsigned char *)(*v2 + 16 * v6);
    switch(v8[8])
    {
      case 1:
        switch(v7[8])
        {
          case 1:
            double v27 = *(double *)v7;
            double v40 = *(double *)v8;
            goto LABEL_58;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            return 0;
          case 6:
          case 8:
            goto LABEL_109;
          case 9:
            double v54 = *(double *)v7;
            double v55 = *(double *)v8;
            std::string::size_type v87 = 0;
            uint64_t v57 = *(char **)(*(void *)&v54 + 32);
            uint64_t v56 = *(char **)(*(void *)&v54 + 40);
            if (v56 == v57 || !*(void *)(*(void *)&v54 + 16)) {
              goto LABEL_104;
            }
            unint64_t v58 = v56 - v57 - 8;
            if (v58 < 8)
            {
              uint64_t v59 = 1;
              uint64_t v60 = *(char **)(*(void *)&v54 + 32);
              do
              {
LABEL_102:
                uint64_t v85 = *(void *)v60;
                v60 += 8;
                v59 *= v85;
              }
              while (v60 != v56);
              goto LABEL_103;
            }
            uint64_t v80 = (v58 >> 3) + 1;
            uint64_t v60 = &v57[8 * (v80 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v81 = v57 + 8;
            uint64_t v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v83 = 1;
            uint64_t v84 = 1;
            do
            {
              v83 *= *(v81 - 1);
              v84 *= *v81;
              v81 += 2;
              v82 -= 2;
            }
            while (v82);
            uint64_t v59 = v84 * v83;
            if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_102;
            }
LABEL_103:
            std::string::size_type v87 = (char *)v59;
            if (v59 != 1)
            {
LABEL_104:
              uint64_t v89 = &v87;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v54 + 8), v55);
            if (!result) {
              return result;
            }
            goto LABEL_5;
          default:
            double v27 = *(double *)v8;
            double v28 = *(double *)v7;
            goto LABEL_57;
        }
      case 2:
        if (v7[8] != 2) {
          return 0;
        }
        double v29 = *(double *)v7;
        int v30 = *(char *)(*(void *)v7 + 31);
        size_t v31 = *(unsigned __int8 *)(*(void *)v7 + 31);
        if (v30 < 0) {
          size_t v32 = *(void *)(*(void *)&v29 + 16);
        }
        else {
          size_t v32 = v31;
        }
        double v36 = *(double *)v8;
        uint64_t v37 = *(unsigned __int8 *)(*(void *)&v36 + 31);
        if (*(char *)(*(void *)&v36 + 31) < 0)
        {
          if (v32 != *(void *)(*(void *)&v36 + 16)) {
            return 0;
          }
        }
        else if (v32 != v37)
        {
          return 0;
        }
        size_t v38 = (unsigned __int8 *)(*(void *)&v29 + 8);
        if ((v31 & 0x80) == 0)
        {
          atomic_ullong *volatile v39 = (unsigned __int8 *)(*(void *)&v36 + 8);
          if ((v37 & 0x80) != 0) {
            goto LABEL_51;
          }
LABEL_48:
          if ((v31 & 0x80) == 0) {
            goto LABEL_52;
          }
LABEL_4:
          if (memcmp(v38, v39, v32)) {
            return 0;
          }
LABEL_5:
          uint64_t v4 = *a2;
          uint64_t v3 = a2[1];
LABEL_6:
          if (++v6 >= (unint64_t)((v3 - v4) >> 4)) {
            return 1;
          }
          continue;
        }
        size_t v38 = *(unsigned __int8 **)v38;
        atomic_ullong *volatile v39 = (unsigned __int8 *)(*(void *)&v36 + 8);
        if ((v37 & 0x80) == 0) {
          goto LABEL_48;
        }
LABEL_51:
        atomic_ullong *volatile v39 = *(unsigned __int8 **)v39;
        if ((v31 & 0x80) != 0) {
          goto LABEL_4;
        }
LABEL_52:
        if (!v32) {
          goto LABEL_6;
        }
        while (*v38 == *v39)
        {
          ++v38;
          ++v39;
          if (!--v32) {
            goto LABEL_6;
          }
        }
        return 0;
      case 3:
        if (v7[8] != 3) {
          return 0;
        }
        double v9 = *(double *)v8;
        uint64_t v10 = *(double **)(*(void *)v7 + 8);
        double v11 = *(double **)(*(void *)v7 + 16);
        unint64_t v12 = v11 - v10;
        atomic_ullong *volatile v13 = *(double **)(*(void *)&v9 + 8);
        if (v12 != (uint64_t)(*(void *)(*(void *)&v9 + 16) - (void)v13) >> 3) {
          return 0;
        }
        if (v11 != v10)
        {
          uint64_t v14 = v12 <= 1 ? 1 : v11 - v10;
          if (*v10 != *v13) {
            return 0;
          }
          uint64_t v15 = 1;
          do
          {
            unint64_t v16 = v15;
            if (v14 == v15) {
              break;
            }
            double v17 = v10[v15];
            double v18 = v13[v15++];
          }
          while (v17 == v18);
          if (v16 < v12) {
            return 0;
          }
        }
        goto LABEL_5;
      case 4:
        uint64_t v35 = *(void *)v8 + 8;
        std::string::size_type v87 = &v86;
        uint64_t v88 = v35;
        if (v7[8] != 4
          || (nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>(&v87, *(void *)v7 + 8) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_5;
      case 5:
        uint64_t v33 = *(void *)v8 + 8;
        std::string::size_type v87 = &v86;
        uint64_t v88 = v33;
        if (v7[8] != 5) {
          return 0;
        }
        nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>((uint64_t)&v87, (uint64_t *)(*(void *)v7 + 8));
        if ((v34 & 1) == 0) {
          return 0;
        }
        goto LABEL_5;
      case 6:
      case 8:
LABEL_109:
        __break(1u);
        JUMPOUT(0x19269393CLL);
      case 7:
        if (v7[8] != 7) {
          return 0;
        }
        goto LABEL_6;
      case 9:
        uint64_t v19 = *(void **)v8;
        uint64_t v20 = (_DWORD *)(*(void *)v8 + 8);
        switch(v7[8])
        {
          case 1:
            double v48 = *(double *)v7;
            std::string::size_type v87 = 0;
            uint64_t v50 = (char *)v19[4];
            atomic_ullong *volatile v49 = (char *)v19[5];
            uint64_t v51 = (char *)(v49 - v50);
            if (v49 == v50 || !v19[2]) {
              goto LABEL_96;
            }
            if ((unint64_t)(v51 - 8) < 8)
            {
              uint64_t v52 = 1;
              uint64_t v53 = (char *)v19[4];
              do
              {
LABEL_94:
                uint64_t v79 = *(void *)v53;
                v53 += 8;
                v52 *= v79;
              }
              while (v53 != v49);
              goto LABEL_95;
            }
            unint64_t v74 = ((unint64_t)(v51 - 8) >> 3) + 1;
            uint64_t v53 = &v50[8 * (v74 & 0x3FFFFFFFFFFFFFFELL)];
            unint64_t v75 = v50 + 8;
            uint64_t v76 = v74 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v77 = 1;
            uint64_t v78 = 1;
            do
            {
              v77 *= *(v75 - 1);
              v78 *= *v75;
              v75 += 2;
              v76 -= 2;
            }
            while (v76);
            uint64_t v52 = v78 * v77;
            if (v74 != (v74 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_94;
            }
LABEL_95:
            std::string::size_type v87 = (char *)v52;
            if (v52 != 1)
            {
LABEL_96:
              uint64_t v89 = &v87;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v20, v48);
            if (!result) {
              return result;
            }
            goto LABEL_5;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            return 0;
          case 6:
          case 8:
            goto LABEL_109;
          case 9:
            if ((nitro::ndarray_container::operator==((_DWORD *)(*(void *)v7 + 8), (_DWORD *)(*(void *)v8 + 8)) & 1) == 0) {
              return 0;
            }
            goto LABEL_5;
          default:
            uint64_t v21 = *(void *)v7;
            std::string::size_type v87 = 0;
            uint64_t v23 = (char *)v19[4];
            std::string::size_type v22 = (char *)v19[5];
            uint64_t v24 = (char *)(v22 - v23);
            if (v22 == v23 || !v19[2]) {
              goto LABEL_80;
            }
            if ((unint64_t)(v24 - 8) < 8)
            {
              uint64_t v25 = 1;
              uint64_t v26 = (char *)v19[4];
              do
              {
LABEL_78:
                uint64_t v66 = *(void *)v26;
                v26 += 8;
                v25 *= v66;
              }
              while (v26 != v22);
              goto LABEL_79;
            }
            unint64_t v61 = ((unint64_t)(v24 - 8) >> 3) + 1;
            uint64_t v26 = &v23[8 * (v61 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v62 = v23 + 8;
            uint64_t v63 = v61 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v64 = 1;
            uint64_t v65 = 1;
            do
            {
              v64 *= *(v62 - 1);
              v65 *= *v62;
              v62 += 2;
              v63 -= 2;
            }
            while (v63);
            uint64_t v25 = v65 * v64;
            if (v61 != (v61 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_78;
            }
LABEL_79:
            std::string::size_type v87 = (char *)v25;
            if (v25 != 1)
            {
LABEL_80:
              uint64_t v89 = &v87;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v20, v21);
            if (!result) {
              return result;
            }
            goto LABEL_5;
        }
      default:
        switch(v7[8])
        {
          case 1:
            double v27 = *(double *)v7;
            double v28 = *(double *)v8;
LABEL_57:
            double v40 = (double)*(uint64_t *)&v28;
LABEL_58:
            if (v27 != v40) {
              return 0;
            }
            goto LABEL_5;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            return 0;
          case 6:
          case 8:
            goto LABEL_109;
          case 9:
            uint64_t v41 = *(void *)v7;
            uint64_t v42 = *(void *)v8;
            std::string::size_type v87 = 0;
            atomic_ullong *volatile v44 = *(char **)(v41 + 32);
            long long v43 = *(char **)(v41 + 40);
            if (v43 == v44 || !*(void *)(v41 + 16)) {
              goto LABEL_88;
            }
            unint64_t v45 = v43 - v44 - 8;
            if (v45 < 8)
            {
              uint64_t v46 = 1;
              uint64_t v47 = *(char **)(v41 + 32);
              do
              {
LABEL_86:
                uint64_t v73 = *(void *)v47;
                v47 += 8;
                v46 *= v73;
              }
              while (v47 != v43);
              goto LABEL_87;
            }
            uint64_t v68 = (v45 >> 3) + 1;
            uint64_t v47 = &v44[8 * (v68 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v69 = v44 + 8;
            uint64_t v70 = v68 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v71 = 1;
            uint64_t v72 = 1;
            do
            {
              v71 *= *(v69 - 1);
              v72 *= *v69;
              v69 += 2;
              v70 -= 2;
            }
            while (v70);
            uint64_t v46 = v72 * v71;
            if (v68 != (v68 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_86;
            }
LABEL_87:
            std::string::size_type v87 = (char *)v46;
            if (v46 != 1)
            {
LABEL_88:
              uint64_t v89 = &v87;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
            BOOL result = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v41 + 8), v42);
            if (!result) {
              return result;
            }
            goto LABEL_5;
          default:
            if (*(void *)v7 != *(void *)v8) {
              return 0;
            }
            goto LABEL_5;
        }
    }
  }
}

void nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>(uint64_t a1, uint64_t *a2)
{
  size_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  if (v3 - *a2 != v5 - *v2) {
    return;
  }
  v188 = 0;
  uint64_t v189 = 0;
  v187 = &v188;
  if (v5 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = &v188;
      double v11 = &v188;
      if (v8)
      {
        while (1)
        {
          while (1)
          {
            double v11 = (uint64_t **)v8;
            unint64_t v12 = v8[4];
            if (v9 >= v12) {
              break;
            }
            uint64_t v8 = *v11;
            uint64_t v10 = v11;
            if (!*v11) {
              goto LABEL_11;
            }
          }
          if (v12 >= v9) {
            break;
          }
          uint64_t v8 = v11[1];
          if (!v8)
          {
            uint64_t v10 = v11 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        atomic_ullong *volatile v13 = (uint64_t *)operator new(0x28uLL);
        v13[4] = v9;
        uint64_t *v13 = 0;
        v13[1] = 0;
        v13[2] = (uint64_t)v11;
        double *v10 = v13;
        if (*v187)
        {
          v187 = (uint64_t **)*v187;
          atomic_ullong *volatile v13 = *v10;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v188, v13);
        ++v189;
        uint64_t v6 = *v2;
        uint64_t v5 = v2[1];
      }
      if (++v9 >= (v5 - v6) >> 5) {
        break;
      }
      uint64_t v8 = v188;
    }
    uint64_t v4 = *a2;
    uint64_t v3 = a2[1];
  }
  if (v3 == v4) {
    goto LABEL_238;
  }
  uint64_t v14 = 0;
  while (2)
  {
    uint64_t v15 = (uint64_t *)v187;
    if (v187 == &v188) {
      goto LABEL_238;
    }
    while (2)
    {
      unint64_t v16 = v15[4];
      uint64_t v17 = *a2;
      double v18 = (unsigned char *)(*a2 + 32 * v14);
      uint64_t v19 = *v2;
      uint64_t v20 = (unsigned char *)(*v2 + 32 * v16);
      switch(v20[8])
      {
        case 1:
          switch(v18[8])
          {
            case 1:
              double v39 = *(double *)v18;
              double v40 = *(double *)v20;
              goto LABEL_76;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_115;
            case 6:
            case 8:
              goto LABEL_239;
            case 9:
              double v62 = *(double *)v18;
              double v63 = *(double *)v20;
              char v191 = 0;
              uint64_t v65 = *(char **)(*(void *)&v62 + 32);
              uint64_t v64 = *(char **)(*(void *)&v62 + 40);
              if (v64 == v65 || !*(void *)(*(void *)&v62 + 16)) {
                goto LABEL_112;
              }
              unint64_t v66 = v64 - v65 - 8;
              if (v66 < 8)
              {
                uint64_t v67 = 1;
                uint64_t v68 = *(char **)(*(void *)&v62 + 32);
                do
                {
LABEL_110:
                  uint64_t v92 = *(void *)v68;
                  v68 += 8;
                  v67 *= v92;
                }
                while (v68 != v64);
                goto LABEL_111;
              }
              uint64_t v87 = (v66 >> 3) + 1;
              uint64_t v68 = &v65[8 * (v87 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v88 = v65 + 8;
              uint64_t v89 = v87 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v90 = 1;
              uint64_t v91 = 1;
              do
              {
                v90 *= *(v88 - 1);
                v91 *= *v88;
                v88 += 2;
                v89 -= 2;
              }
              while (v89);
              uint64_t v67 = v91 * v90;
              if (v87 != (v87 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_110;
              }
LABEL_111:
              char v191 = (char *)v67;
              if (v67 != 1)
              {
LABEL_112:
                uint64_t v193 = &v191;
                nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
              }
              int v48 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v62 + 8), v63);
              break;
            default:
              double v39 = *(double *)v20;
              double v40 = (double)*(uint64_t *)v18;
              goto LABEL_76;
          }
          goto LABEL_114;
        case 2:
          if (v18[8] != 2) {
            goto LABEL_115;
          }
          double v27 = *(double *)v18;
          int v28 = *(char *)(*(void *)v18 + 31);
          size_t v29 = *(unsigned __int8 *)(*(void *)v18 + 31);
          if (v28 < 0) {
            size_t v30 = *(void *)(*(void *)&v27 + 16);
          }
          else {
            size_t v30 = v29;
          }
          double v44 = *(double *)v20;
          uint64_t v45 = *(unsigned __int8 *)(*(void *)&v44 + 31);
          if (*(char *)(*(void *)&v44 + 31) < 0)
          {
            if (v30 != *(void *)(*(void *)&v44 + 16)) {
              goto LABEL_115;
            }
          }
          else if (v30 != v45)
          {
            goto LABEL_115;
          }
          uint64_t v46 = (unsigned __int8 *)(*(void *)&v27 + 8);
          if ((v29 & 0x80) != 0)
          {
            uint64_t v46 = *(unsigned __int8 **)v46;
            uint64_t v47 = (unsigned __int8 *)(*(void *)&v44 + 8);
            if ((v45 & 0x80) == 0)
            {
LABEL_60:
              if ((v29 & 0x80) == 0) {
                goto LABEL_61;
              }
              goto LABEL_84;
            }
          }
          else
          {
            uint64_t v47 = (unsigned __int8 *)(*(void *)&v44 + 8);
            if ((v45 & 0x80) == 0) {
              goto LABEL_60;
            }
          }
          uint64_t v47 = *(unsigned __int8 **)v47;
          if ((v29 & 0x80) == 0)
          {
LABEL_61:
            if (!v30) {
              break;
            }
            while (*v46 == *v47)
            {
              ++v46;
              ++v47;
              if (!--v30) {
                goto LABEL_122;
              }
            }
            goto LABEL_115;
          }
LABEL_84:
          if (!memcmp(v46, v47, v30)) {
            goto LABEL_121;
          }
          goto LABEL_115;
        case 3:
          if (v18[8] != 3) {
            goto LABEL_115;
          }
          uint64_t v23 = *(void *)v18 + 8;
          uint64_t v21 = *(double **)v23;
          std::string::size_type v22 = *(double **)(v23 + 8);
          unint64_t v24 = ((uint64_t)v22 - *(void *)v23) >> 3;
          uint64_t v26 = *(void *)v20 + 8;
          uint64_t v25 = *(double **)v26;
          if (v24 != (uint64_t)(*(void *)(v26 + 8) - *(void *)v26) >> 3) {
            goto LABEL_115;
          }
          if (v22 == v21) {
            break;
          }
          if (v24 <= 1) {
            unint64_t v24 = 1;
          }
          while (*v21 == *v25)
          {
            ++v21;
            ++v25;
            if (!--v24) {
              goto LABEL_122;
            }
          }
          goto LABEL_115;
        case 4:
          uint64_t v41 = *(void *)v20 + 8;
          char v191 = &v190;
          uint64_t v192 = v41;
          if (v18[8] != 4) {
            goto LABEL_115;
          }
          char v42 = nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>(&v191, *(void *)v18 + 8);
          goto LABEL_49;
        case 5:
          uint64_t v43 = *(void *)v20 + 8;
          char v191 = &v190;
          uint64_t v192 = v43;
          if (v18[8] != 5) {
            goto LABEL_115;
          }
          char v42 = nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>(&v191, *(void *)v18 + 8);
LABEL_49:
          if (v42) {
            goto LABEL_121;
          }
          goto LABEL_115;
        case 6:
        case 8:
LABEL_239:
          __break(1u);
          return;
        case 7:
          if (v18[8] == 7) {
            break;
          }
          goto LABEL_115;
        case 9:
          size_t v31 = *(void **)v20;
          size_t v32 = (_DWORD *)(*(void *)v20 + 8);
          switch(v18[8])
          {
            case 1:
              double v56 = *(double *)v18;
              char v191 = 0;
              unint64_t v58 = (char *)v31[4];
              uint64_t v57 = (char *)v31[5];
              uint64_t v59 = (char *)(v57 - v58);
              if (v57 == v58 || !v31[2]) {
                goto LABEL_105;
              }
              if ((unint64_t)(v59 - 8) < 8)
              {
                uint64_t v60 = 1;
                unint64_t v61 = (char *)v31[4];
                do
                {
LABEL_103:
                  uint64_t v86 = *(void *)v61;
                  v61 += 8;
                  v60 *= v86;
                }
                while (v61 != v57);
                goto LABEL_104;
              }
              unint64_t v81 = ((unint64_t)(v59 - 8) >> 3) + 1;
              unint64_t v61 = &v58[8 * (v81 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v82 = v58 + 8;
              uint64_t v83 = v81 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v84 = 1;
              uint64_t v85 = 1;
              do
              {
                v84 *= *(v82 - 1);
                v85 *= *v82;
                v82 += 2;
                v83 -= 2;
              }
              while (v83);
              uint64_t v60 = v85 * v84;
              if (v81 != (v81 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_103;
              }
LABEL_104:
              char v191 = (char *)v60;
              if (v60 != 1)
              {
LABEL_105:
                uint64_t v193 = &v191;
                nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              int v48 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v32, v56);
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_115;
            case 6:
            case 8:
              goto LABEL_239;
            case 9:
              int v48 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)v18 + 8), (_DWORD *)(*(void *)v20 + 8));
              goto LABEL_114;
            default:
              uint64_t v33 = *(void *)v18;
              char v191 = 0;
              uint64_t v35 = (char *)v31[4];
              char v34 = (char *)v31[5];
              double v36 = (char *)(v34 - v35);
              if (v34 == v35 || !v31[2]) {
                goto LABEL_91;
              }
              if ((unint64_t)(v36 - 8) < 8)
              {
                uint64_t v37 = 1;
                size_t v38 = (char *)v31[4];
                do
                {
LABEL_89:
                  uint64_t v74 = *(void *)v38;
                  v38 += 8;
                  v37 *= v74;
                }
                while (v38 != v34);
                goto LABEL_90;
              }
              unint64_t v69 = ((unint64_t)(v36 - 8) >> 3) + 1;
              size_t v38 = &v35[8 * (v69 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v70 = v35 + 8;
              uint64_t v71 = v69 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v72 = 1;
              uint64_t v73 = 1;
              do
              {
                v72 *= *(v70 - 1);
                v73 *= *v70;
                v70 += 2;
                v71 -= 2;
              }
              while (v71);
              uint64_t v37 = v73 * v72;
              if (v69 != (v69 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_89;
              }
LABEL_90:
              char v191 = (char *)v37;
              if (v37 != 1)
              {
LABEL_91:
                uint64_t v193 = &v191;
                nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              int v48 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v32, v33);
              break;
          }
          goto LABEL_114;
        default:
          switch(v18[8])
          {
            case 1:
              double v39 = *(double *)v18;
              double v40 = (double)*(uint64_t *)v20;
LABEL_76:
              if (v39 == v40) {
                goto LABEL_121;
              }
              goto LABEL_115;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_115;
            case 6:
            case 8:
              goto LABEL_239;
            case 9:
              uint64_t v49 = *(void *)v18;
              uint64_t v50 = *(void *)v20;
              char v191 = 0;
              uint64_t v52 = *(char **)(v49 + 32);
              uint64_t v51 = *(char **)(v49 + 40);
              if (v51 == v52 || !*(void *)(v49 + 16)) {
                goto LABEL_98;
              }
              unint64_t v53 = v51 - v52 - 8;
              if (v53 < 8)
              {
                uint64_t v54 = 1;
                double v55 = *(char **)(v49 + 32);
                do
                {
LABEL_96:
                  uint64_t v80 = *(void *)v55;
                  v55 += 8;
                  v54 *= v80;
                }
                while (v55 != v51);
                goto LABEL_97;
              }
              uint64_t v75 = (v53 >> 3) + 1;
              double v55 = &v52[8 * (v75 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v76 = v52 + 8;
              uint64_t v77 = v75 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v78 = 1;
              uint64_t v79 = 1;
              do
              {
                v78 *= *(v76 - 1);
                v79 *= *v76;
                v76 += 2;
                v77 -= 2;
              }
              while (v77);
              uint64_t v54 = v79 * v78;
              if (v75 != (v75 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_96;
              }
LABEL_97:
              char v191 = (char *)v54;
              if (v54 != 1)
              {
LABEL_98:
                uint64_t v193 = &v191;
                nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
              }
              int v48 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v49 + 8), v50);
LABEL_114:
              if (!v48)
              {
LABEL_115:
                uint64_t v93 = (uint64_t *)v15[1];
                if (v93)
                {
                  do
                  {
                    float v94 = (uint64_t **)v93;
                    uint64_t v93 = (uint64_t *)*v93;
                  }
                  while (v93);
                }
                else
                {
                  do
                  {
                    float v94 = (uint64_t **)v15[2];
                    BOOL v95 = *v94 == v15;
                    uint64_t v15 = (uint64_t *)v94;
                  }
                  while (!v95);
                }
                uint64_t v15 = (uint64_t *)v94;
                if (v94 == &v188) {
                  goto LABEL_238;
                }
                continue;
              }
LABEL_121:
              uint64_t v17 = *a2;
              uint64_t v19 = *v2;
              break;
            default:
              if (*(void *)v18 == *(void *)v20) {
                goto LABEL_121;
              }
              goto LABEL_115;
          }
          break;
      }
      break;
    }
LABEL_122:
    std::string::size_type v96 = (unsigned char *)(v17 + 32 * v14 + 16);
    uint64_t v97 = v19 + 32 * v16;
    uint64_t v98 = (double *)(v97 + 16);
    switch(*(unsigned char *)(v97 + 24))
    {
      case 1:
        switch(v96[8])
        {
          case 1:
            double v99 = *(double *)v96;
            double v100 = *v98;
            goto LABEL_175;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_238;
          case 6:
          case 8:
            goto LABEL_239;
          case 9:
            double v139 = *(double *)v96;
            double v140 = *v98;
            char v191 = 0;
            v142 = *(char **)(*(void *)&v139 + 32);
            double v141 = *(char **)(*(void *)&v139 + 40);
            if (v141 == v142 || !*(void *)(*(void *)&v139 + 16)) {
              goto LABEL_207;
            }
            unint64_t v143 = v141 - v142 - 8;
            if (v143 < 8)
            {
              uint64_t v144 = 1;
              uint64_t v145 = *(char **)(*(void *)&v139 + 32);
              do
              {
LABEL_205:
                uint64_t v170 = *(void *)v145;
                v145 += 8;
                v144 *= v170;
              }
              while (v145 != v141);
              goto LABEL_206;
            }
            uint64_t v165 = (v143 >> 3) + 1;
            uint64_t v145 = &v142[8 * (v165 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v166 = v142 + 8;
            uint64_t v167 = v165 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v168 = 1;
            uint64_t v169 = 1;
            do
            {
              v168 *= *(v166 - 1);
              v169 *= *v166;
              v166 += 2;
              v167 -= 2;
            }
            while (v167);
            uint64_t v144 = v169 * v168;
            if (v165 != (v165 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_205;
            }
LABEL_206:
            char v191 = (char *)v144;
            if (v144 != 1)
            {
LABEL_207:
              uint64_t v193 = &v191;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
            BOOL v158 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v139 + 8), v140);
            break;
          default:
            double v99 = *v98;
            double v100 = (double)*(uint64_t *)v96;
            goto LABEL_175;
        }
        goto LABEL_216;
      case 2:
        if (v96[8] != 2) {
          goto LABEL_238;
        }
        double v101 = *(double *)v96;
        int v102 = *(char *)(*(void *)v96 + 31);
        uint64_t v103 = *(unsigned __int8 *)(*(void *)v96 + 31);
        size_t v104 = v102 < 0 ? *(void *)(*(void *)&v101 + 16) : v103;
        double v128 = *v98;
        uint64_t v129 = *(char *)(*(void *)&v128 + 31) < 0
             ? *(void *)(*(void *)&v128 + 16)
             : *(unsigned __int8 *)(*(void *)&v128 + 31);
        if (v104 != v129) {
          goto LABEL_238;
        }
        uint64_t v130 = (unsigned __int8 *)(*(void *)&v101 + 8);
        if ((v103 & 0x80) != 0)
        {
          uint64_t v130 = *(unsigned __int8 **)v130;
          v131 = (unsigned __int8 *)(*(void *)&v128 + 8);
          if ((*(unsigned char *)(*(void *)&v128 + 31) & 0x80) == 0)
          {
LABEL_160:
            if ((v103 & 0x80) != 0) {
              goto LABEL_167;
            }
            goto LABEL_161;
          }
        }
        else
        {
          v131 = (unsigned __int8 *)(*(void *)&v128 + 8);
          if ((*(unsigned char *)(*(void *)&v128 + 31) & 0x80) == 0) {
            goto LABEL_160;
          }
        }
        v131 = *(unsigned __int8 **)v131;
        if ((v103 & 0x80) != 0)
        {
LABEL_167:
          if (memcmp(v130, v131, v104)) {
            goto LABEL_238;
          }
          goto LABEL_217;
        }
LABEL_161:
        if (!v104)
        {
LABEL_217:
          if (v188)
          {
            uint64_t v177 = (uint64_t *)&v188;
            v178 = v188;
            do
            {
              v179 = v178;
              v180 = v177;
              unint64_t v181 = v178[4];
              unint64_t v182 = v178 + 1;
              if (v181 >= v16) {
                uint64_t v177 = v178;
              }
              else {
                ++v178;
              }
              v178 = (uint64_t *)*v178;
            }
            while (v178);
            if (v177 != (uint64_t *)&v188)
            {
              if (v181 < v16) {
                v179 = v180;
              }
              if (v16 >= v179[4])
              {
                v183 = v180 + 1;
                if (v181 >= v16) {
                  v183 = v182;
                }
                v184 = (uint64_t *)*v183;
                v185 = v177;
                if (*v183)
                {
                  do
                  {
                    v186 = (uint64_t **)v184;
                    v184 = (uint64_t *)*v184;
                  }
                  while (v184);
                }
                else
                {
                  do
                  {
                    v186 = (uint64_t **)v185[2];
                    BOOL v95 = *v186 == v185;
                    v185 = (uint64_t *)v186;
                  }
                  while (!v95);
                }
                if (v187 == (uint64_t **)v177) {
                  v187 = v186;
                }
                --v189;
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v188, v177);
                operator delete(v177);
              }
            }
          }
          if (++v14 >= (unint64_t)((a2[1] - *a2) >> 5)) {
            goto LABEL_238;
          }
          continue;
        }
        while (*v130 == *v131)
        {
          ++v130;
          ++v131;
          if (!--v104) {
            goto LABEL_217;
          }
        }
LABEL_238:
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v187, v188);
        return;
      case 3:
        if (v96[8] != 3) {
          goto LABEL_238;
        }
        double v105 = *v98;
        uint64_t v108 = *(void *)v96 + 8;
        double v106 = *(double **)v108;
        uint64_t v107 = *(double **)(v108 + 8);
        unint64_t v109 = ((uint64_t)v107 - *(void *)v108) >> 3;
        uint64_t v111 = *(void *)&v105 + 8;
        unint64_t v110 = *(double **)(*(void *)&v105 + 8);
        if (v109 != (uint64_t)(*(void *)(v111 + 8) - (void)v110) >> 3) {
          goto LABEL_238;
        }
        if (v107 == v106) {
          goto LABEL_217;
        }
        if (v109 <= 1) {
          uint64_t v112 = 1;
        }
        else {
          uint64_t v112 = v107 - v106;
        }
        if (*v106 != *v110) {
          goto LABEL_238;
        }
        uint64_t v113 = 1;
        do
        {
          unint64_t v114 = v113;
          if (v112 == v113) {
            break;
          }
          double v115 = v106[v113];
          double v116 = v110[v113++];
        }
        while (v115 == v116);
        char v117 = v114 >= v109;
LABEL_186:
        if ((v117 & 1) == 0) {
          goto LABEL_238;
        }
        goto LABEL_217;
      case 4:
        uint64_t v118 = *(void *)v98 + 8;
        char v191 = &v190;
        uint64_t v192 = v118;
        if (v96[8] != 4) {
          goto LABEL_238;
        }
        char v117 = nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>(&v191, *(void *)v96 + 8);
        goto LABEL_186;
      case 5:
        uint64_t v119 = *(void *)v98 + 8;
        char v191 = &v190;
        uint64_t v192 = v119;
        if (v96[8] != 5) {
          goto LABEL_238;
        }
        char v117 = nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>(&v191, *(void *)v96 + 8);
        goto LABEL_186;
      case 6:
      case 8:
        goto LABEL_239;
      case 7:
        if (v96[8] != 7) {
          goto LABEL_238;
        }
        goto LABEL_217;
      case 9:
        double v120 = *v98;
        double v121 = (_DWORD *)(*(void *)&v120 + 8);
        switch(v96[8])
        {
          case 1:
            double v146 = *(double *)v96;
            char v191 = 0;
            v148 = *(char **)(*(void *)&v120 + 32);
            double v147 = *(char **)(*(void *)&v120 + 40);
            v149 = (char *)(v147 - v148);
            if (v147 == v148 || !*(void *)(*(void *)&v120 + 16)) {
              goto LABEL_214;
            }
            if ((unint64_t)(v149 - 8) < 8)
            {
              uint64_t v150 = 1;
              uint64_t v151 = *(char **)(*(void *)&v120 + 32);
              do
              {
LABEL_212:
                uint64_t v176 = *(void *)v151;
                v151 += 8;
                v150 *= v176;
              }
              while (v151 != v147);
              goto LABEL_213;
            }
            unint64_t v171 = ((unint64_t)(v149 - 8) >> 3) + 1;
            uint64_t v151 = &v148[8 * (v171 & 0x3FFFFFFFFFFFFFFELL)];
            unint64_t v172 = v148 + 8;
            uint64_t v173 = v171 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v174 = 1;
            uint64_t v175 = 1;
            do
            {
              v174 *= *(v172 - 1);
              v175 *= *v172;
              v172 += 2;
              v173 -= 2;
            }
            while (v173);
            uint64_t v150 = v175 * v174;
            if (v171 != (v171 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_212;
            }
LABEL_213:
            char v191 = (char *)v150;
            if (v150 != 1)
            {
LABEL_214:
              uint64_t v193 = &v191;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL v158 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v121, v146);
            goto LABEL_216;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_238;
          case 6:
          case 8:
            goto LABEL_239;
          case 9:
            char v117 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)v96 + 8), (_DWORD *)(*(void *)&v120 + 8));
            goto LABEL_186;
          default:
            uint64_t v122 = *(void *)v96;
            char v191 = 0;
            v124 = *(char **)(*(void *)&v120 + 32);
            uint64_t v123 = *(char **)(*(void *)&v120 + 40);
            v125 = (char *)(v123 - v124);
            if (v123 == v124 || !*(void *)(*(void *)&v120 + 16)) {
              goto LABEL_193;
            }
            if ((unint64_t)(v125 - 8) < 8)
            {
              uint64_t v126 = 1;
              uint64_t v127 = *(char **)(*(void *)&v120 + 32);
              do
              {
LABEL_191:
                uint64_t v157 = *(void *)v127;
                v127 += 8;
                v126 *= v157;
              }
              while (v127 != v123);
              goto LABEL_192;
            }
            unint64_t v152 = ((unint64_t)(v125 - 8) >> 3) + 1;
            uint64_t v127 = &v124[8 * (v152 & 0x3FFFFFFFFFFFFFFELL)];
            unint64_t v153 = v124 + 8;
            uint64_t v154 = v152 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v155 = 1;
            uint64_t v156 = 1;
            do
            {
              v155 *= *(v153 - 1);
              v156 *= *v153;
              v153 += 2;
              v154 -= 2;
            }
            while (v154);
            uint64_t v126 = v156 * v155;
            if (v152 != (v152 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_191;
            }
LABEL_192:
            char v191 = (char *)v126;
            if (v126 != 1)
            {
LABEL_193:
              uint64_t v193 = &v191;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            BOOL v158 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v121, v122);
            break;
        }
        goto LABEL_216;
      default:
        switch(v96[8])
        {
          case 1:
            double v99 = *(double *)v96;
            double v100 = (double)*(uint64_t *)v98;
LABEL_175:
            if (v99 != v100) {
              goto LABEL_238;
            }
            goto LABEL_217;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_238;
          case 6:
          case 8:
            goto LABEL_239;
          case 9:
            uint64_t v132 = *(void *)v96;
            double v133 = *v98;
            char v191 = 0;
            v135 = *(char **)(v132 + 32);
            double v134 = *(char **)(v132 + 40);
            if (v134 == v135 || !*(void *)(v132 + 16)) {
              goto LABEL_200;
            }
            unint64_t v136 = v134 - v135 - 8;
            if (v136 < 8)
            {
              uint64_t v137 = 1;
              uint64_t v138 = *(char **)(v132 + 32);
              do
              {
LABEL_198:
                uint64_t v164 = *(void *)v138;
                v138 += 8;
                v137 *= v164;
              }
              while (v138 != v134);
              goto LABEL_199;
            }
            uint64_t v159 = (v136 >> 3) + 1;
            uint64_t v138 = &v135[8 * (v159 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v160 = v135 + 8;
            uint64_t v161 = v159 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v162 = 1;
            uint64_t v163 = 1;
            do
            {
              v162 *= *(v160 - 1);
              v163 *= *v160;
              v160 += 2;
              v161 -= 2;
            }
            while (v161);
            uint64_t v137 = v163 * v162;
            if (v159 != (v159 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_198;
            }
LABEL_199:
            char v191 = (char *)v137;
            if (v137 != 1)
            {
LABEL_200:
              uint64_t v193 = &v191;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
            BOOL v158 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v132 + 8), *(uint64_t *)&v133);
LABEL_216:
            if (!v158) {
              goto LABEL_238;
            }
            break;
          default:
            if (*(void *)v96 != *(void *)v98) {
              goto LABEL_238;
            }
            goto LABEL_217;
        }
        goto LABEL_217;
    }
  }
}

void sub_192694734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(unsigned char *a1@<X0>, std::string *a2@<X8>)
{
  switch(a1[8])
  {
    case 1:
      uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
      v69[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v28 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v64 = MEMORY[0x1E4FBA488] + 64;
      size_t v29 = (uint64_t *)MEMORY[0x1E4FBA408];
      uint64_t v30 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      uint64_t v62 = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = v30;
      uint64_t v63 = 0;
      size_t v31 = (std::ios_base *)((char *)&v62 + *(void *)(v62 - 24));
      std::ios_base::init(v31, v65);
      uint64_t v32 = MEMORY[0x1E4FBA488] + 24;
      v31[1].__vftable = 0;
      v31[1].__fmtflags_ = -1;
      uint64_t v33 = v29[5];
      uint64_t v64 = v29[4];
      *(void *)((char *)&v65[-1] + *(void *)(v64 - 24)) = v33;
      uint64_t v62 = v29[1];
      *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = v29[6];
      v69[0] = v27;
      uint64_t v62 = v32;
      uint64_t v64 = v28;
      std::streambuf::basic_streambuf();
      uint64_t v34 = MEMORY[0x1E4FBA470] + 16;
      v65[0] = MEMORY[0x1E4FBA470] + 16;
      *(_OWORD *)std::string __p = 0u;
      long long v67 = 0u;
      int v68 = 24;
      std::ostream::operator<<();
      std::stringbuf::str();
      uint64_t v62 = *v29;
      uint64_t v35 = v29[9];
      *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = v29[8];
      uint64_t v64 = v35;
      v65[0] = v34;
      if (SBYTE7(v67) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_34;
    case 2:
      uint64_t v23 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 31) < 0)
      {
        uint64_t v59 = (const std::string::value_type *)v23[1];
        std::string::size_type v60 = v23[2];
        std::string::__init_copy_ctor_external(a2, v59, v60);
      }
      else
      {
        long long v24 = *(_OWORD *)(v23 + 1);
        a2->__r_.__value_.__r.__words[2] = v23[3];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v24;
      }
      return;
    case 3:
      uint64_t v36 = *(void *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"[", 1);
      if (*(void *)(v36 + 16) != *(void *)(v36 + 8))
      {
        unint64_t v37 = 0;
        do
        {
          std::ostream::operator<<();
          ++v37;
          unint64_t v38 = (uint64_t)(*(void *)(v36 + 16) - *(void *)(v36 + 8)) >> 3;
          if (v37 < v38)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)" ", 1);
            unint64_t v38 = (uint64_t)(*(void *)(v36 + 16) - *(void *)(v36 + 8)) >> 3;
          }
        }
        while (v37 < v38);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"]", 1);
      std::stringbuf::str();
      goto LABEL_84;
    case 4:
      uint64_t v12 = *(void *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"[", 1);
      uint64_t v13 = *(void *)(v12 + 8);
      if (*(void *)(v12 + 16) != v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          if (*(unsigned char *)(v13 + v14 + 8) == 2)
          {
            unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"\"", 1);
            nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(&v61, *(void *)(v12 + 8) + v14);
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v17 = &v61;
            }
            else {
              uint64_t v17 = (std::string *)v61.__r_.__value_.__r.__words[0];
            }
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v61.__r_.__value_.__l.__size_;
            }
            uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, size);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
          }
          else
          {
            nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(&v61, v13 + v14);
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v20 = &v61;
            }
            else {
              uint64_t v20 = (std::string *)v61.__r_.__value_.__r.__words[0];
            }
            if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v21 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v21 = v61.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)v20, v21);
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          ++v15;
          uint64_t v13 = *(void *)(v12 + 8);
          unint64_t v22 = (*(void *)(v12 + 16) - v13) >> 4;
          if (v15 < v22)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)",", 1);
            uint64_t v13 = *(void *)(v12 + 8);
            unint64_t v22 = (*(void *)(v12 + 16) - v13) >> 4;
          }
          v14 += 16;
        }
        while (v15 < v22);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"]", 1);
      std::stringbuf::str();
      goto LABEL_84;
    case 5:
      uint64_t v39 = *(void *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"{", 1);
      uint64_t v40 = *(void *)(v39 + 8);
      uint64_t v41 = *(void *)(v39 + 16);
      if (v41 == v40) {
        goto LABEL_83;
      }
      unint64_t v42 = (v41 - v40) >> 5;
      uint64_t v43 = v40 + 16;
      unint64_t v44 = 1;
      break;
    case 6:
    case 8:
      __break(1u);
      return;
    case 7:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      return;
    case 9:
      uint64_t v25 = (_DWORD *)(*(void *)a1 + 8);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v62);
      nitro::operator<<(&v64, v25);
      std::stringbuf::str();
      uint64_t v62 = *MEMORY[0x1E4FBA408];
      uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v64 = v26;
      v65[0] = MEMORY[0x1E4FBA470] + 16;
      if (SBYTE7(v67) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_34;
    default:
      uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
      v69[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v64 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
      uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      uint64_t v62 = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = v6;
      uint64_t v63 = 0;
      uint64_t v7 = (std::ios_base *)((char *)&v62 + *(void *)(v62 - 24));
      std::ios_base::init(v7, v65);
      uint64_t v8 = MEMORY[0x1E4FBA488] + 24;
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      uint64_t v9 = v5[5];
      uint64_t v64 = v5[4];
      *(void *)((char *)&v65[-1] + *(void *)(v64 - 24)) = v9;
      uint64_t v62 = v5[1];
      *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = v5[6];
      v69[0] = v3;
      uint64_t v62 = v8;
      uint64_t v64 = v4;
      std::streambuf::basic_streambuf();
      uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
      v65[0] = MEMORY[0x1E4FBA470] + 16;
      *(_OWORD *)std::string __p = 0u;
      long long v67 = 0u;
      int v68 = 24;
      std::ostream::operator<<();
      std::stringbuf::str();
      uint64_t v62 = *v5;
      uint64_t v11 = v5[9];
      *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = v5[8];
      uint64_t v64 = v11;
      v65[0] = v10;
      if (SBYTE7(v67) < 0) {
        operator delete(__p[0]);
      }
LABEL_34:
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      goto LABEL_87;
  }
  do
  {
    if (*(unsigned char *)(v43 - 8) == 2)
    {
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"\"", 1);
      nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(&v61, v43 - 16);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v47 = &v61;
      }
      else {
        uint64_t v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v61.__r_.__value_.__l.__size_;
      }
      uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\"", 1);
    }
    else
    {
      nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(&v61, v43 - 16);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v50 = &v61;
      }
      else {
        uint64_t v50 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = v61.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)v50, v51);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)":", 1);
    if (*(unsigned char *)(v43 + 8) == 2)
    {
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"\"", 1);
      nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(&v61, v43);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v53 = &v61;
      }
      else {
        unint64_t v53 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v54 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v54 = v61.__r_.__value_.__l.__size_;
      }
      double v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\"", 1);
    }
    else
    {
      nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(&v61, v43);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v56 = &v61;
      }
      else {
        double v56 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v61.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)v56, v57);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v61.__r_.__value_.__l.__data_);
      if (v44 >= v42) {
        goto LABEL_43;
      }
    }
    else if (v44 >= v42)
    {
      goto LABEL_43;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)", ", 2);
LABEL_43:
    ++v44;
    uint64_t v45 = v43 + 16;
    v43 += 32;
  }
  while (v45 != v41);
LABEL_83:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"}", 1);
  std::stringbuf::str();
LABEL_84:
  uint64_t v62 = *MEMORY[0x1E4FBA408];
  uint64_t v58 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&v62 + *(void *)(v62 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v64 = v58;
  v65[0] = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v67) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
LABEL_87:
  MEMORY[0x192FF15B0](v69);
}

void sub_1926956CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void nitro::ndarray_container::visit<nitro::flexible_type::is_zero(void)::$_0>(nitro::flexible_type::is_zero(void)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  int v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        unint64_t v15 = v23;
      }
      else {
        unint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  double v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192695A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<long long>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      uint64_t v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      void v5[2] = 0;
    }
    while (v5 != v6);
    uint64_t v19 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      uint64_t v20 = v5;
      do
      {
        unint64_t v22 = (void *)*(v20 - 3);
        v20 -= 3;
        unsigned __int8 v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        uint64_t v5 = v20;
      }
      while (v20 != v19);
      uint64_t v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

uint64_t **std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        size_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        unint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x48uLL);
    unsigned __int8 v24 = *a4;
    uint64_t v25 = (uint64_t *)*((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    void *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[7] = 0;
    *((unsigned char *)v11 + 64) = 0;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *unint64_t v7 = (uint64_t *)v11;
    uint64_t v26 = (uint64_t *)**a1;
    uint64_t v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      uint64_t v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        size_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        unint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x50uLL);
    unsigned __int8 v24 = *a4;
    uint64_t v25 = (uint64_t *)*((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    void *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[8] = 0;
    v11[9] = 0;
    v11[7] = 0;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *unint64_t v7 = (uint64_t *)v11;
    uint64_t v26 = (uint64_t *)**a1;
    uint64_t v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      uint64_t v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

void Espresso::optimizer_builder::build_single_layer_optimizer(Espresso::optimizer_builder *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::not_implemented_error::not_implemented_error(exception);
}

void sub_192696094(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::optimizer_builder::update_states(Espresso::optimizer_builder *this)
{
}

void update_scalar_global_by_constant(uint64_t *a1, uint64_t a2, unsigned int a3, float a4)
{
  if (*(char *)(a2 + 23) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v8 = *(void *)(a2 + 8);
  }
  size_t v9 = &v20;
  std::string::basic_string[abi:ne180100]((uint64_t)&v20, v8 + 16);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v9 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v10 = (const void *)a2;
    }
    else {
      unint64_t v10 = *(const void **)a2;
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/updated_opcode_");
  std::to_string(&v19, a3);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v19;
  }
  else {
    uint64_t v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v20, (const std::string::value_type *)v11, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  Espresso::sequential_builder::by_constant_op(a3, a1, a2, (uint64_t)__p, (uint64_t)v23, a4);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  Espresso::sequential_builder::store_global_op((std::string *)a2, a1, (uint64_t)v23, (uint64_t)v15, (uint64_t)&v17);
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
}

void sub_192696264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sgd_optimizer_builder::build_single_layer_optimizer(Espresso::sgd_optimizer_builder *this)
{
  size_t v2 = (std::string **)*((void *)this + 33);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)*v2) >> 3);
  int v97 = 0;
  int v98 = v5;
  v96[0] = *((unsigned char *)this + 312);
  uint64_t v93 = 0;
  float v94 = 0;
  unint64_t v95 = 0;
  uint64_t v67 = v5;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v93, 0, v3, v4, v5);
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v93, (uint64_t)v94, **((std::string ***)this + 34), *(std::string **)(*((void *)this + 34) + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)this + 34) + 8) - **((void **)this + 34)) >> 3));
  memset(&v92, 0, sizeof(v92));
  uint64_t v6 = *(void *)(*((void *)this + 33) + 8);
  if (v6 == **((void **)this + 33))
  {
    uint64_t v19 = *(void *)(*((void *)this + 33) + 8);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      std::operator+<char>();
      std::vector<std::string>::pointer end = v92.__end_;
      if (v92.__end_ >= v92.__end_cap_.__value_)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v12) {
          unint64_t v12 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v92.__end_cap_;
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        int v15 = (std::string *)(v13 + 24 * v11);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
        __v.__begin_ = v15;
        __v.__end_cap_.__value_ = (std::string *)(v13 + 24 * v14);
        long long v16 = v90;
        v15->__r_.__value_.__r.__words[2] = v91;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        int64_t v91 = 0;
        long long v90 = 0uLL;
        __v.__end_ = v15 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v92, &__v);
        uint64_t v17 = v92.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v92.__end_ = v17;
      }
      else
      {
        long long v10 = v90;
        v92.__end_->__r_.__value_.__r.__words[2] = v91;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
        v92.__end_ = end + 1;
      }
      ++v8;
      char v18 = (uint64_t *)*((void *)this + 33);
      uint64_t v6 = *v18;
      uint64_t v19 = v18[1];
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v19 - *v18) >> 3));
  }
  if (*((unsigned char *)this + 312))
  {
    if (v19 != v6)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      while (1)
      {
        std::string::size_type v22 = (const void **)(v6 + v20);
        uint64_t v23 = Espresso::net::loaded_global_name(*((void **)this + 11), v6 + v20);
        if (*(char *)(v23 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v23, *(void *)(v23 + 8));
        }
        else
        {
          long long v24 = *(_OWORD *)v23;
          __v.__end_ = *(std::__split_buffer<std::string>::pointer *)(v23 + 16);
          *(_OWORD *)&__v.__first_ = v24;
        }
        uint64_t v25 = *((unsigned int *)this + 34);
        Espresso::net::get_global(&v90, *((void *)this + 11), (unsigned __int8 *)&__v);
        Espresso::abstract_blob_container::shape(v85, v90);
        Espresso::make_filled_bc(&v88, (uint64_t)this + 120, 0.0, v25, (uint64_t)v85);
        if (__p)
        {
          uint64_t v87 = __p;
          operator delete(__p);
        }
        if (*((void *)&v90 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v90 + 1));
        }
        uint64_t v26 = v89;
        v84[0] = v88;
        v84[1] = (uint64_t)v89;
        if (v89) {
          atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v27 = v6 + v20;
        if (*(char *)(v6 + v20 + 23) >= 0) {
          size_t v28 = *(unsigned __int8 *)(v6 + v20 + 23);
        }
        else {
          size_t v28 = *(void *)(v6 + v20 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v28 + 9);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v28)
        {
          if (*(char *)(v27 + 23) >= 0) {
            uint64_t v30 = v22;
          }
          else {
            uint64_t v30 = *v22;
          }
          memmove(p_str, v30, v28);
        }
        strcpy((char *)p_str + v28, "/momentum");
        std::string::basic_string[abi:ne180100]<0>(&v82, "");
        Espresso::sequential_builder::load_global_op(&__str, &v82, (uint64_t *)this + 1, v84, (uint64_t)&v90);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (v26) {
          goto LABEL_45;
        }
LABEL_46:
        size_t v31 = v94;
        if ((unint64_t)v94 >= v95)
        {
          uint64_t v33 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v93, (uint64_t)&v90);
        }
        else
        {
          if (SHIBYTE(v91) < 0)
          {
            std::string::__init_copy_ctor_external(v94, (const std::string::value_type *)v90, *((std::string::size_type *)&v90 + 1));
          }
          else
          {
            long long v32 = v90;
            v94->__r_.__value_.__r.__words[2] = v91;
            *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
          }
          uint64_t v33 = v31 + 1;
        }
        float v94 = v33;
        if (SHIBYTE(v91) < 0) {
          operator delete((void *)v90);
        }
        if (v89) {
          nitro::nitro_function::nitro_function(v89);
        }
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        ++v21;
        uint64_t v34 = (uint64_t *)*((void *)this + 33);
        uint64_t v6 = *v34;
        v20 += 24;
        if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((v34[1] - *v34) >> 3)) {
          goto LABEL_61;
        }
      }
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!v26) {
        goto LABEL_46;
      }
LABEL_45:
      nitro::nitro_function::nitro_function(v26);
      goto LABEL_46;
    }
LABEL_61:
    uint64_t v35 = (long long *)((char *)this + 240);
    uint64_t v36 = v94;
    if ((unint64_t)v94 >= v95)
    {
      uint64_t v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v93, (uint64_t)v35);
    }
    else
    {
      if (*((char *)this + 263) < 0)
      {
        std::string::__init_copy_ctor_external(v94, *((const std::string::value_type **)this + 30), *((void *)this + 31));
      }
      else
      {
        long long v37 = *v35;
        v94->__r_.__value_.__r.__words[2] = *((void *)this + 32);
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
      }
      uint64_t v41 = v36 + 1;
    }
    float v94 = v41;
    if (*(void *)(*((void *)this + 33) + 8) != **((void **)this + 33))
    {
      unint64_t v43 = 0;
      uint64_t v44 = 48 * v67;
      do
      {
        uint64_t v45 = &v93[v44];
        if ((char)v93[v44 + 23] >= 0) {
          size_t v46 = v45[23];
        }
        else {
          size_t v46 = *((void *)v45 + 1);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v90, v46 + 8);
        if (v91 >= 0) {
          uint64_t v47 = &v90;
        }
        else {
          uint64_t v47 = (long long *)v90;
        }
        if (v46)
        {
          if (v45[23] >= 0) {
            std::string::size_type v48 = v45;
          }
          else {
            std::string::size_type v48 = *(const void **)v45;
          }
          memmove(v47, v48, v46);
        }
        strcpy((char *)v47 + v46, "/updated");
        std::vector<std::string>::pointer v49 = v92.__end_;
        if (v92.__end_ >= v92.__end_cap_.__value_)
        {
          unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
          unint64_t v52 = v51 + 1;
          if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v52) {
            unint64_t v52 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v53 = v52;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v92.__end_cap_;
          if (v53) {
            unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v53);
          }
          else {
            uint64_t v54 = 0;
          }
          double v55 = (std::string *)(v53 + 24 * v51);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v53;
          __v.__begin_ = v55;
          __v.__end_cap_.__value_ = (std::string *)(v53 + 24 * v54);
          long long v56 = v90;
          v55->__r_.__value_.__r.__words[2] = v91;
          *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
          int64_t v91 = 0;
          long long v90 = 0uLL;
          __v.__end_ = v55 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v92, &__v);
          std::string::size_type v57 = v92.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v92.__end_ = v57;
          if (SHIBYTE(v91) < 0) {
            operator delete((void *)v90);
          }
        }
        else
        {
          long long v50 = v90;
          v92.__end_->__r_.__value_.__r.__words[2] = v91;
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
          v92.__end_ = v49 + 1;
        }
        ++v43;
        v44 += 24;
      }
      while (v43 < 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(*(void *)(*((void *)this + 33) + 8) - **((void **)this + 33)) >> 3));
    }
    int v97 = *((_DWORD *)this + 70);
    std::string::basic_string[abi:ne180100]<0>(&__v, "sgd");
    std::string::basic_string[abi:ne180100]<0>(&v90, "sgd_optimizer");
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, (uint64_t)v93, (uint64_t)v94, 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - v93) >> 3));
    memset(v76, 0, sizeof(v76));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v76, (uint64_t)v92.__begin_, (uint64_t)v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
    Espresso::sequential_builder::add<Espresso::sgd_params_t>(&v80, (uint64_t *)this + 1, (uint64_t)&__v, (uint64_t)&v90, (uint64_t)v96, v77, v78, v76);
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v91) < 0) {
      operator delete((void *)v90);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(*((void *)this + 11));
    uint64_t v58 = **((void **)this + 33);
    if (*(void *)(*((void *)this + 33) + 8) != v58)
    {
      uint64_t v59 = 0;
      unint64_t v60 = 0;
      uint64_t v61 = 48 * v67;
      do
      {
        store_updated_global((uint64_t)this + 8, v58 + v59 * 24, (uint64_t)&v92.__begin_[v59]);
        uint64_t v62 = &v93[v61 + v59 * 24];
        if (v62[23] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v62, *(void *)&v93[v61 + 8 + v59 * 24]);
        }
        else
        {
          long long v63 = *(_OWORD *)v62;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v62 + 2);
          *(_OWORD *)&__v.__first_ = v63;
        }
        store_updated_global((uint64_t)this + 8, (uint64_t)&__v, (uint64_t)&v92.__begin_[v67 + v59]);
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        ++v60;
        uint64_t v58 = **((void **)this + 33);
        ++v59;
      }
      while (v60 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)this + 33) + 8) - v58) >> 3));
    }
  }
  else
  {
    unint64_t v38 = (long long *)((char *)this + 240);
    uint64_t v39 = v94;
    if ((unint64_t)v94 >= v95)
    {
      unint64_t v42 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v93, (uint64_t)v38);
    }
    else
    {
      if (*((char *)this + 263) < 0)
      {
        std::string::__init_copy_ctor_external(v94, *((const std::string::value_type **)this + 30), *((void *)this + 31));
      }
      else
      {
        long long v40 = *v38;
        v94->__r_.__value_.__r.__words[2] = *((void *)this + 32);
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
      }
      unint64_t v42 = v39 + 1;
    }
    float v94 = v42;
    std::string::basic_string[abi:ne180100]<0>(&__v, "sgd");
    std::string::basic_string[abi:ne180100]<0>(&v90, "sgd_optimizer");
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v71, (uint64_t)v93, (uint64_t)v94, 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - v93) >> 3));
    memset(v70, 0, sizeof(v70));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v70, (uint64_t)v92.__begin_, (uint64_t)v92.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3));
    Espresso::sequential_builder::add<Espresso::sgd_params_t>(&v74, (uint64_t *)this + 1, (uint64_t)&__v, (uint64_t)&v90, (uint64_t)v96, v71, v72, v70);
    if (v75) {
      nitro::nitro_function::nitro_function(v75);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v91) < 0) {
      operator delete((void *)v90);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    uint64_t v64 = **((void **)this + 33);
    if (*(void *)(*((void *)this + 33) + 8) != v64)
    {
      uint64_t v65 = 0;
      unint64_t v66 = 0;
      do
      {
        store_updated_global((uint64_t)this + 8, v64 + v65 * 24, (uint64_t)&v92.__begin_[v65]);
        ++v66;
        uint64_t v64 = **((void **)this + 33);
        ++v65;
      }
      while (v66 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)this + 33) + 8) - v64) >> 3));
    }
  }
  update_scalar_global_by_constant((uint64_t *)this + 1, (uint64_t)this + 208, 2u, 1.0);
  Espresso::sequential_builder::build_from_shapes((uint64_t)this + 8, *((void *)this + 1), 1, &v68);
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_192696CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  *(void *)(v51 - 176) = v50;
  *(void *)(v51 - 232) = v51 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 232));
  *(void *)(v51 - 208) = v51 - 184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 208));
  _Unwind_Resume(a1);
}

void Espresso::net::get_global(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 1096);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 1088);
      if (v8)
      {
        Espresso::net::get_global(a1, v8, a3);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  size_t v9 = (void *)(a2 + 1440);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v9, a3))
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_10;
  }
  unint64_t v12 = a3;
  long long v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, a3, (long long **)&v12);
  uint64_t v11 = *((void *)v10 + 6);
  *a1 = *((void *)v10 + 5);
  a1[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
LABEL_10:
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192696F68(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::sgd_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192697168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void store_updated_global(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = Espresso::net::loaded_global_name(*(void **)(a1 + 80), a2);
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    __str.__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
  }
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&__str, (uint64_t *)a1, a3, (uint64_t)&v7, (uint64_t)&__p);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1926972A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387C40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_192697458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  long long v6 = (char *)__from_s + (char *)end - (char *)__to;
  long long v7 = end;
  while (v6 < (char *)__from_e)
  {
    long long v8 = *(_OWORD *)v6;
    v7->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    ++v7;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)long long v6 = 0;
    v6 += 24;
  }
  this->__end_ = v7;
  if (end != __to)
  {
    size_t v9 = end - 1;
    uint64_t v10 = 8 * (((char *)end - (char *)__to) >> 3);
    do
    {
      if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9->__r_.__value_.__l.__data_);
      }
      uint64_t v11 = (long long *)((char *)&__from_s[-1] + v10);
      long long v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = __from_s->__r_.__value_.__r.__words[(unint64_t)v10 / 8 - 1];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
      --v9;
      __from_s->__r_.__value_.__s.__data_[v10 - 1] = 0;
      *(unsigned char *)uint64_t v11 = 0;
      v10 -= 24;
    }
    while (v10);
  }
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer v3 = __p;
  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  __v->__begin_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  std::vector<std::string>::pointer end = this->__end_;
  std::__split_buffer<std::string>::pointer v9 = __v->__end_;
  std::__split_buffer<std::string>::pointer v17 = v9;
  std::__split_buffer<std::string>::pointer v18 = v9;
  v15[0] = p_end_cap;
  v15[1] = &v17;
  v15[2] = &v18;
  if (end != v3)
  {
    do
    {
      long long v10 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v9->__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      ++v9;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      ++v3;
    }
    while (v3 != end);
    std::__split_buffer<std::string>::pointer v18 = v9;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  __v->__end_ = v9;
  uint64_t v11 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v11;
  long long v12 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v12;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void Espresso::sgd_optimizer_builder::update_func(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::operator+<char>();
  uint64_t v6 = Espresso::net::loaded_global_name(*(void **)(a1 + 88), a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v62.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v7;
  }
  long long v8 = (uint64_t *)(a1 + 8);
  if (*(unsigned char *)(a1 + 312))
  {
    uint64_t v9 = *(unsigned int *)(a1 + 136);
    Espresso::net::get_global(&__str, *(void *)(a1 + 88), (unsigned __int8 *)&v62);
    Espresso::abstract_blob_container::shape(v57, (uint64_t)__str.__r_.__value_.__l.__data_);
    Espresso::make_filled_bc(&v60, a1 + 120, 0.0, v9, (uint64_t)v57);
    if (v58)
    {
      uint64_t v59 = v58;
      operator delete(v58);
    }
    if (__str.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    if (*(char *)(a2 + 23) >= 0) {
      size_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v10 = *(void *)(a2 + 8);
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v10 + 9);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v10)
    {
      if (*(char *)(a2 + 23) >= 0) {
        long long v12 = (const void *)a2;
      }
      else {
        long long v12 = *(const void **)a2;
      }
      memmove(p_str, v12, v10);
    }
    strcpy((char *)p_str + v10, "/momentum");
    uint64_t v13 = v61;
    v54[0] = v60;
    v54[1] = (uint64_t)v61;
    if (v61) {
      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    Espresso::sequential_builder::load_global_op(&__str, &__p, (uint64_t *)(a1 + 8), v54, (uint64_t)&v55);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    float v14 = *(float *)(a1 + 280);
    int v15 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v55.__r_.__value_.__l.__size_;
    }
    std::__split_buffer<std::string>::pointer v17 = v49;
    std::string::basic_string[abi:ne180100]((uint64_t)v49, size + 8);
    if (v50 < 0) {
      std::__split_buffer<std::string>::pointer v17 = (void **)v49[0];
    }
    if (size)
    {
      if (v15 >= 0) {
        std::__split_buffer<std::string>::pointer v18 = &v55;
      }
      else {
        std::__split_buffer<std::string>::pointer v18 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      memmove(v17, v18, size);
    }
    strcpy((char *)v17 + size, "/decayed");
    Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)&v55, (uint64_t)v49, (uint64_t)v51, v14);
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (*(char *)(a3 + 23) >= 0) {
      size_t v19 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v19 = *(void *)(a3 + 8);
    }
    uint64_t v20 = v45;
    std::string::basic_string[abi:ne180100]((uint64_t)v45, v19 + 5);
    if (v46 < 0) {
      uint64_t v20 = (void **)v45[0];
    }
    if (v19)
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v21 = (const void *)a3;
      }
      else {
        uint64_t v21 = *(const void **)a3;
      }
      memmove(v20, v21, v19);
    }
    strcpy((char *)v20 + v19, "/step");
    Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), a3, a1 + 240, (uint64_t)v45, (uint64_t)v47);
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    std::string::size_type v22 = v41;
    std::string::basic_string[abi:ne180100]((uint64_t)v41, size + 8);
    if (v42 < 0) {
      std::string::size_type v22 = (void **)v41[0];
    }
    if (size)
    {
      if (v15 >= 0) {
        uint64_t v23 = &v55;
      }
      else {
        uint64_t v23 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      memmove(v22, v23, size);
    }
    strcpy((char *)v22 + size, "/updated");
    Espresso::sequential_builder::elementwise_op(0, (uint64_t *)(a1 + 8), (uint64_t)v51, (uint64_t)v47, (uint64_t)v41, (uint64_t)v43);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    std::operator+<char>();
    Espresso::sequential_builder::store_global_op(&__str, (uint64_t *)(a1 + 8), (uint64_t)v43, (uint64_t)&v37, (uint64_t)&v39);
    if (v40 < 0) {
      operator delete(v39);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    int v24 = (char)v44;
    if ((v44 & 0x80u) == 0) {
      size_t v25 = v44;
    }
    else {
      size_t v25 = (size_t)v43[1];
    }
    uint64_t v26 = v34;
    std::string::basic_string[abi:ne180100]((uint64_t)v34, v25 + 4);
    if (v35 < 0) {
      uint64_t v26 = (void **)v34[0];
    }
    if (v25)
    {
      if (v24 >= 0) {
        uint64_t v27 = v43;
      }
      else {
        uint64_t v27 = (void **)v43[0];
      }
      memmove(v26, v27, v25);
    }
    strcpy((char *)v26 + v25, "/neg");
    Espresso::sequential_builder::by_constant_op(3u, v8, (uint64_t)v43, (uint64_t)v34, (uint64_t)&v36, -1.0);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    std::string v63 = v36;
    if (v35 < 0)
    {
      operator delete(v34[0]);
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_76;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_76;
    }
    operator delete(v43[0]);
LABEL_76:
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v52 < 0)
    {
      operator delete(v51[0]);
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_80;
      }
    }
    else if ((v15 & 0x80000000) == 0)
    {
LABEL_80:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      goto LABEL_95;
    }
    operator delete(v55.__r_.__value_.__l.__data_);
    goto LABEL_80;
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v63;
  }
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), a3, a1 + 288, (uint64_t)&v33, (uint64_t)&__str);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  std::string v63 = __str;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
LABEL_95:
  std::operator+<char>();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v32, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v32 = __str;
  }
  Espresso::sequential_builder::elementwise_op(0, v8, a2, (uint64_t)&v63, (uint64_t)&v32, (uint64_t)&v55);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v55;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v62, v8, (uint64_t)&__str, (uint64_t)&v28, (uint64_t)&v30);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_192697C98(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_192697E68()
{
}

void Espresso::sgd_optimizer_builder::init_optimizer_states(Espresso::sgd_optimizer_builder *this)
{
  if (!*((unsigned char *)this + 312))
  {
    size_t v2 = (uint64_t *)((char *)this + 8);
    std::vector<std::string>::pointer v3 = (char *)this + 240;
    if (*((char *)this + 263) >= 0) {
      size_t v4 = *((unsigned __int8 *)this + 263);
    }
    else {
      size_t v4 = *((void *)this + 31);
    }
    uint64_t v5 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 4);
    if (v9 < 0) {
      uint64_t v5 = (void **)__p[0];
    }
    if (v4)
    {
      if (*((char *)this + 263) >= 0) {
        uint64_t v6 = v3;
      }
      else {
        uint64_t v6 = (const void *)*((void *)this + 30);
      }
      memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, "/neg");
    Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)v3, (uint64_t)__p, (uint64_t)&v10, -1.0);
    long long v7 = (void **)((char *)this + 288);
    if (*((char *)this + 311) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)long long v7 = v10;
    *((void *)this + 38) = v11;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_192697F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sgd_optimizer_builder::~sgd_optimizer_builder(void **this)
{
  *this = &unk_1EE357088;
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  Espresso::optimizer_builder::~optimizer_builder(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE357088;
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }

  Espresso::optimizer_builder::~optimizer_builder(this);
}

void Espresso::optimizer_builder::~optimizer_builder(void **this)
{
  *this = &unk_1EE34D0F8;
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)(this + 18));
  size_t v2 = (std::__shared_weak_count *)this[16];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::vector<std::string>::pointer v3 = (std::__shared_weak_count *)this[14];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  size_t v4 = (std::__shared_weak_count *)this[12];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(this + 3), this[4]);
  uint64_t v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void Espresso::adam_optimizer_builder::build_single_layer_optimizer(Espresso::adam_optimizer_builder *this)
{
  size_t v2 = (std::string **)*((void *)this + 33);
  std::vector<std::string>::pointer v3 = *v2;
  size_t v4 = v2[1];
  uint64_t v5 = ((char *)v4 - (char *)*v2) >> 3;
  int v117 = -1431655765 * v5;
  uint64_t v115 = *((void *)this + 35);
  int v116 = *((_DWORD *)this + 72);
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  unint64_t v114 = 0;
  unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * v5;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v112, 0, v3, v4, 0xAAAAAAAAAAAAAAABLL * v5);
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v112, (uint64_t)v113, **((std::string ***)this + 34), *(std::string **)(*((void *)this + 34) + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)this + 34) + 8) - **((void **)this + 34)) >> 3));
  memset(&v111, 0, sizeof(v111));
  uint64_t v6 = (uint64_t *)*((void *)this + 33);
  if (v6[1] != *v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      std::operator+<char>();
      std::vector<std::string>::pointer end = v111.__end_;
      if (v111.__end_ >= v111.__end_cap_.__value_)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v111.__end_ - (char *)v111.__begin_) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 3) > v12) {
          unint64_t v12 = 0x5555555555555556 * (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v111.__end_cap_;
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        int v15 = (std::string *)(v13 + 24 * v11);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
        __v.__begin_ = v15;
        __v.__end_cap_.__value_ = (std::string *)(v13 + 24 * v14);
        long long v16 = v109;
        v15->__r_.__value_.__r.__words[2] = v110;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        std::string::size_type v110 = 0;
        long long v109 = 0uLL;
        __v.__end_ = v15 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v111, &__v);
        std::__split_buffer<std::string>::pointer v17 = v111.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v111.__end_ = v17;
        if (SHIBYTE(v110) < 0) {
          operator delete((void *)v109);
        }
      }
      else
      {
        long long v10 = v109;
        v111.__end_->__r_.__value_.__r.__words[2] = v110;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
        v111.__end_ = end + 1;
      }
      ++v8;
      uint64_t v6 = (uint64_t *)*((void *)this + 33);
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
  }
  long long v109 = 0uLL;
  std::string::size_type v110 = 0;
  uint64_t v107 = 0;
  unint64_t v108 = 0;
  double v106 = 0;
  uint64_t v18 = *v6;
  if (v6[1] != *v6)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v72 = (uint64_t *)((char *)this + 8);
    uint64_t v73 = (char *)this + 120;
    while (1)
    {
      uint64_t v21 = (const void **)(v18 + v19);
      uint64_t v22 = Espresso::net::loaded_global_name(*((void **)this + 11), v18 + v19);
      if (*(char *)(v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
      }
      else
      {
        long long v23 = *(_OWORD *)v22;
        v105.__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v23;
      }
      Espresso::net::get_global(&v94, *((void *)this + 11), (unsigned __int8 *)&v105);
      Espresso::abstract_blob_container::shape((char *)&__v, v94);
      if (*((void *)&v94 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v94 + 1));
      }
      uint64_t v24 = *((unsigned int *)this + 34);
      std::__split_buffer<std::string> v96 = __v;
      int v98 = 0;
      uint64_t v99 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v103, (uint64_t)v104, (v104 - (unsigned char *)v103) >> 2);
      Espresso::make_filled_bc(&v100, (uint64_t)v73, 0.0, v24, (uint64_t)&v96);
      if (__p)
      {
        int v98 = __p;
        operator delete(__p);
      }
      size_t v25 = v101;
      v93[0] = v100;
      v93[1] = (uint64_t)v101;
      if (v101) {
        atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = v18 + v19;
      if (*(char *)(v18 + v19 + 23) >= 0) {
        size_t v27 = *(unsigned __int8 *)(v18 + v19 + 23);
      }
      else {
        size_t v27 = *(void *)(v18 + v19 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v27 + 9);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v27)
      {
        if (*(char *)(v26 + 23) >= 0) {
          char v29 = v21;
        }
        else {
          char v29 = *v21;
        }
        memmove(p_str, v29, v27);
      }
      strcpy((char *)p_str + v27, "/momentum");
      std::string::basic_string[abi:ne180100]<0>(&v91, "");
      Espresso::sequential_builder::load_global_op(&__str, &v91, v72, v93, (uint64_t)&v94);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v25) {
        goto LABEL_43;
      }
LABEL_44:
      uint64_t v30 = (_OWORD *)*((void *)&v109 + 1);
      if (*((void *)&v109 + 1) >= v110)
      {
        std::string v32 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v109, (uint64_t)&v94);
      }
      else
      {
        if (SHIBYTE(v95) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)&v109 + 1), (const std::string::value_type *)v94, *((std::string::size_type *)&v94 + 1));
        }
        else
        {
          long long v31 = v94;
          *(void *)(*((void *)&v109 + 1) + 16) = v95;
          *uint64_t v30 = v31;
        }
        std::string v32 = (std::string *)((char *)v30 + 24);
      }
      *((void *)&v109 + 1) = v32;
      uint64_t v33 = *((unsigned int *)this + 34);
      std::__split_buffer<std::string> v85 = __v;
      uint64_t v87 = 0;
      uint64_t v88 = 0;
      uint64_t v86 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v86, v103, (uint64_t)v104, (v104 - (unsigned char *)v103) >> 2);
      Espresso::make_filled_bc(&v89, (uint64_t)v73, 0.0, v33, (uint64_t)&v85);
      if (v86)
      {
        uint64_t v87 = v86;
        operator delete(v86);
      }
      uint64_t v34 = v90;
      v84[0] = v89;
      v84[1] = (uint64_t)v90;
      if (v90) {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(v26 + 23) >= 0) {
        size_t v35 = *(unsigned __int8 *)(v26 + 23);
      }
      else {
        size_t v35 = *(void *)(v26 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v83, v35 + 4);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v36 = &v83;
      }
      else {
        std::string v36 = (std::string *)v83.__r_.__value_.__r.__words[0];
      }
      if (v35)
      {
        if (*(char *)(v26 + 23) >= 0) {
          long long v37 = v21;
        }
        else {
          long long v37 = *v21;
        }
        memmove(v36, v37, v35);
      }
      strcpy((char *)v36 + v35, "/var");
      std::string::basic_string[abi:ne180100]<0>(&v82, "");
      Espresso::sequential_builder::load_global_op(&v83, &v82, v72, v84, (uint64_t)&__str);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v83.__r_.__value_.__l.__data_);
        if (!v34) {
          goto LABEL_72;
        }
LABEL_71:
        nitro::nitro_function::nitro_function(v34);
        goto LABEL_72;
      }
      if (v34) {
        goto LABEL_71;
      }
LABEL_72:
      char v38 = v107;
      if ((unint64_t)v107 >= v108)
      {
        char v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v106, (uint64_t)&__str);
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v107, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v39 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v107->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
        }
        char v40 = v38 + 1;
      }
      uint64_t v107 = v40;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v90) {
        nitro::nitro_function::nitro_function(v90);
      }
      if (SHIBYTE(v95) < 0) {
        operator delete((void *)v94);
      }
      if (v101) {
        nitro::nitro_function::nitro_function(v101);
      }
      if (v103)
      {
        size_t v104 = v103;
        operator delete(v103);
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      ++v20;
      uint64_t v41 = (uint64_t *)*((void *)this + 33);
      uint64_t v18 = *v41;
      v19 += 24;
      if (v20 >= 0xAAAAAAAAAAAAAAABLL * ((v41[1] - *v41) >> 3))
      {
        unint64_t v43 = (std::string *)*((void *)&v109 + 1);
        char v42 = (std::string *)v109;
        goto LABEL_95;
      }
    }
    if (!v25) {
      goto LABEL_44;
    }
LABEL_43:
    nitro::nitro_function::nitro_function(v25);
    goto LABEL_44;
  }
  unint64_t v43 = 0;
  char v42 = 0;
LABEL_95:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v112, (uint64_t)v113, v42, v43, 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (char *)v42) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v112, (uint64_t)v113, v106, v107, 0xAAAAAAAAAAAAAAABLL * (((char *)v107 - (char *)v106) >> 3));
  unsigned __int8 v44 = (long long *)((char *)this + 240);
  uint64_t v45 = v113;
  if ((unint64_t)v113 >= v114)
  {
    uint64_t v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v112, (uint64_t)v44);
  }
  else
  {
    if (*((char *)this + 263) < 0)
    {
      std::string::__init_copy_ctor_external(v113, *((const std::string::value_type **)this + 30), *((void *)this + 31));
    }
    else
    {
      long long v46 = *v44;
      v113->__r_.__value_.__r.__words[2] = *((void *)this + 32);
      *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
    }
    uint64_t v47 = v45 + 1;
  }
  uint64_t v113 = v47;
  if ((unint64_t)v47 >= v114)
  {
    std::vector<std::string>::pointer v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v112, (uint64_t)this + 208);
  }
  else
  {
    if (*((char *)this + 231) < 0)
    {
      std::string::__init_copy_ctor_external(v47, *((const std::string::value_type **)this + 26), *((void *)this + 27));
    }
    else
    {
      long long v48 = *((_OWORD *)this + 13);
      v47->__r_.__value_.__r.__words[2] = *((void *)this + 28);
      *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
    }
    std::vector<std::string>::pointer v49 = v47 + 1;
  }
  uint64_t v113 = v49;
  if (*(void *)(*((void *)this + 33) + 8) != **((void **)this + 33))
  {
    uint64_t v50 = 0;
    unint64_t v51 = 0;
    do
    {
      updated_name((uint64_t)&__v, (const void **)(v109 + v50));
      std::vector<std::string>::pointer v52 = v111.__end_;
      if (v111.__end_ >= v111.__end_cap_.__value_)
      {
        uint64_t v54 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v111, (uint64_t)&__v);
      }
      else
      {
        if (SHIBYTE(__v.__end_) < 0)
        {
          std::string::__init_copy_ctor_external(v111.__end_, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
        }
        else
        {
          long long v53 = *(_OWORD *)&__v.__first_;
          v111.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
          *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
        }
        uint64_t v54 = v52 + 1;
      }
      v111.__end_ = v54;
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      ++v51;
      uint64_t v56 = **((void **)this + 33);
      uint64_t v55 = *(void *)(*((void *)this + 33) + 8);
      v50 += 24;
    }
    while (v51 < 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 3));
    if (v55 != v56)
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0;
      do
      {
        updated_name((uint64_t)&__v, (const void **)&v106[v57].__r_.__value_.__l.__data_);
        std::vector<std::string>::pointer v59 = v111.__end_;
        if (v111.__end_ >= v111.__end_cap_.__value_)
        {
          uint64_t v61 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v111, (uint64_t)&__v);
        }
        else
        {
          if (SHIBYTE(__v.__end_) < 0)
          {
            std::string::__init_copy_ctor_external(v111.__end_, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
          }
          else
          {
            long long v60 = *(_OWORD *)&__v.__first_;
            v111.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
            *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
          }
          uint64_t v61 = v59 + 1;
        }
        v111.__end_ = v61;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        ++v58;
        ++v57;
      }
      while (v58 < 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(*(void *)(*((void *)this + 33) + 8) - **((void **)this + 33)) >> 3));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "adam");
  std::string::basic_string[abi:ne180100]<0>(&v105, "adam_optimizer");
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, (uint64_t)v112, (uint64_t)v113, 0xAAAAAAAAAAAAAAABLL * (((char *)v113 - v112) >> 3));
  memset(v76, 0, sizeof(v76));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v76, (uint64_t)v111.__begin_, (uint64_t)v111.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v111.__end_ - (char *)v111.__begin_) >> 3));
  Espresso::sequential_builder::add<Espresso::adam_params_t>(&v80, (uint64_t *)this + 1, (uint64_t)&__v, (uint64_t)&v105, (uint64_t)&v115, v77, v78, v76);
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  *(void *)&long long v94 = v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  *(void *)&long long v94 = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(*((void *)this + 11));
  uint64_t v62 = **((void **)this + 33);
  if (*(void *)(*((void *)this + 33) + 8) != v62)
  {
    unint64_t v63 = 0;
    unint64_t v64 = 0;
    uint64_t v65 = 72 * v71;
    unint64_t v66 = 48 * v71;
    do
    {
      store_updated_global((uint64_t)this + 8, v62 + v63, (uint64_t)&v111.__begin_[v63 / 0x18]);
      uint64_t v67 = &v112[v66 + v63];
      if (v67[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v67, *(void *)&v112[v66 + 8 + v63]);
      }
      else
      {
        long long v68 = *(_OWORD *)v67;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v67 + 2);
        *(_OWORD *)&__v.__first_ = v68;
      }
      store_updated_global((uint64_t)this + 8, (uint64_t)&__v, (uint64_t)v111.__begin_ + 24 * v71 + v63);
      unint64_t v69 = &v112[v65 + v63];
      if (v69[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v69, *(void *)&v112[v65 + 8 + v63]);
      }
      else
      {
        long long v70 = *(_OWORD *)v69;
        v105.__r_.__value_.__r.__words[2] = *((void *)v69 + 2);
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v70;
      }
      store_updated_global((uint64_t)this + 8, (uint64_t)&v105, (uint64_t)&v111.__begin_[v66 / 0x18 + v63 / 0x18]);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      ++v64;
      uint64_t v62 = **((void **)this + 33);
      v63 += 24;
    }
    while (v64 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)this + 33) + 8) - v62) >> 3));
  }
  update_scalar_global_by_constant((uint64_t *)this + 1, (uint64_t)this + 208, 2u, 1.0);
  Espresso::sequential_builder::build_from_shapes((uint64_t)this + 8, *((void *)this + 1), 1, &v74);
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v111;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_192698C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  *(void *)(v64 - 128) = v63;
  std::string __p = (void *)(v64 - 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v64 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)(v64 - 184) = v64 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v64 - 184));
  *(void *)(v64 - 160) = v64 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v64 - 160));
  _Unwind_Resume(a1);
}

uint64_t updated_name(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v3 + 8);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v5 = (void *)result;
  }
  else {
    uint64_t v5 = *(void **)result;
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/updated");
  return result;
}

void Espresso::sequential_builder::add<Espresso::adam_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  size_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  size_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_19269912C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::adam_optimizer_builder::update_func(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = Espresso::net::loaded_global_name(*(void **)(a1 + 88), a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v147.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v7;
  }
  Espresso::net::get_global(&v134, *(void *)(a1 + 88), (unsigned __int8 *)&v147);
  Espresso::abstract_blob_container::shape((char *)&v142, (uint64_t)v134.__r_.__value_.__l.__data_);
  if (v134.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v134.__r_.__value_.__l.__size_);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 136);
  v135[0] = v142;
  v135[1] = v143;
  uint64_t v136 = v144;
  std::string __p = 0;
  uint64_t v139 = 0;
  uint64_t v138 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v145, (uint64_t)v146, (v146 - (unsigned char *)v145) >> 2);
  Espresso::make_filled_bc(&v140, a1 + 120, 0.0, v8, (uint64_t)v135);
  if (__p)
  {
    uint64_t v138 = __p;
    operator delete(__p);
  }
  char v9 = v141;
  v133[0] = v140;
  v133[1] = (uint64_t)v141;
  if (v141) {
    atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v10 + 9);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const void *)a2;
    }
    else {
      unint64_t v12 = *(const void **)a2;
    }
    memmove(p_str, v12, v10);
  }
  strcpy((char *)p_str + v10, "/momentum");
  std::string::basic_string[abi:ne180100]<0>(&v131, "");
  uint64_t v13 = (uint64_t *)(a1 + 8);
  Espresso::sequential_builder::load_global_op(&__str, &v131, (uint64_t *)(a1 + 8), v133, (uint64_t)&v134);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  float v14 = *(float *)(a1 + 280);
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v134.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = v129;
  std::string::basic_string[abi:ne180100]((uint64_t)v129, size + 8);
  if (v130 < 0) {
    uint64_t v16 = (void **)v129[0];
  }
  if (size)
  {
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v134;
    }
    else {
      uint64_t v17 = (std::string *)v134.__r_.__value_.__r.__words[0];
    }
    memmove(v16, v17, size);
  }
  strcpy((char *)v16 + size, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)&v134, (uint64_t)v129, (uint64_t)&__str, v14);
  if (v130 < 0) {
    operator delete(v129[0]);
  }
  float v18 = *(float *)(a1 + 280);
  if (*(char *)(a3 + 23) >= 0) {
    size_t v19 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v19 = *(void *)(a3 + 8);
  }
  uint64_t v20 = v125;
  std::string::basic_string[abi:ne180100]((uint64_t)v125, v19 + 8);
  if (v126 < 0) {
    uint64_t v20 = (void **)v125[0];
  }
  if (v19)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v21 = (const void *)a3;
    }
    else {
      uint64_t v21 = *(const void **)a3;
    }
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), a3, (uint64_t)v125, (uint64_t)v127, 1.0 - v18);
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v22 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v22 = v134.__r_.__value_.__l.__size_;
  }
  long long v23 = v121;
  std::string::basic_string[abi:ne180100]((uint64_t)v121, v22 + 8);
  if (v122 < 0) {
    long long v23 = (void **)v121[0];
  }
  if (v22)
  {
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v134;
    }
    else {
      uint64_t v24 = (std::string *)v134.__r_.__value_.__r.__words[0];
    }
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, "/updated");
  Espresso::sequential_builder::elementwise_op(0, (uint64_t *)(a1 + 8), (uint64_t)&__str, (uint64_t)v127, (uint64_t)v121, (uint64_t)v123);
  if (v122 < 0) {
    operator delete(v121[0]);
  }
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v134, (uint64_t *)(a1 + 8), (uint64_t)v123, (uint64_t)&v117, (uint64_t)&v119);
  if (v120 < 0) {
    operator delete(v119);
  }
  if (v118 < 0) {
    operator delete(v117);
  }
  uint64_t v25 = *(unsigned int *)(a1 + 136);
  v110[0] = v142;
  v110[1] = v143;
  uint64_t v111 = v144;
  uint64_t v112 = 0;
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v112, v145, (uint64_t)v146, (v146 - (unsigned char *)v145) >> 2);
  Espresso::make_filled_bc(&v115, a1 + 120, 0.0, v25, (uint64_t)v110);
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
  uint64_t v26 = v116;
  v108[0] = v115;
  v108[1] = (uint64_t)v116;
  if (v116) {
    atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v27 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v27 = *(void *)(a2 + 8);
  }
  size_t v28 = &v107;
  std::string::basic_string[abi:ne180100]((uint64_t)&v107, v27 + 9);
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v28 = (std::string *)v107.__r_.__value_.__r.__words[0];
  }
  if (v27)
  {
    if (*(char *)(a2 + 23) >= 0) {
      char v29 = (const void *)a2;
    }
    else {
      char v29 = *(const void **)a2;
    }
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, "/variance");
  std::string::basic_string[abi:ne180100]<0>(&v106, "");
  Espresso::sequential_builder::load_global_op(&v107, &v106, (uint64_t *)(a1 + 8), v108, (uint64_t)&v109);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  float v30 = *(float *)(a1 + 284);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v31 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v31 = v109.__r_.__value_.__l.__size_;
  }
  std::string v32 = v104;
  std::string::basic_string[abi:ne180100]((uint64_t)v104, v31 + 8);
  if (v105 < 0) {
    std::string v32 = (void **)v104[0];
  }
  if (v31)
  {
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v33 = &v109;
    }
    else {
      uint64_t v33 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    memmove(v32, v33, v31);
  }
  strcpy((char *)v32 + v31, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)&v109, (uint64_t)v104, (uint64_t)&v107, v30);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if (*(char *)(a3 + 23) >= 0) {
    size_t v34 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v34 = *(void *)(a3 + 8);
  }
  size_t v35 = v100;
  std::string::basic_string[abi:ne180100]((uint64_t)v100, v34 + 8);
  if (v101 < 0) {
    size_t v35 = (void **)v100[0];
  }
  if (v34)
  {
    if (*(char *)(a3 + 23) >= 0) {
      std::string v36 = (const void *)a3;
    }
    else {
      std::string v36 = *(const void **)a3;
    }
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, "/squered");
  Espresso::sequential_builder::by_constant_op(0xDu, (uint64_t *)(a1 + 8), a3, (uint64_t)v100, (uint64_t)v102, 2.0);
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  float v37 = *(float *)(a1 + 284);
  int v38 = (char)v103;
  if ((v103 & 0x80u) == 0) {
    size_t v39 = v103;
  }
  else {
    size_t v39 = (size_t)v102[1];
  }
  char v40 = v96;
  std::string::basic_string[abi:ne180100]((uint64_t)v96, v39 + 8);
  if (v97 < 0) {
    char v40 = (void **)v96[0];
  }
  if (v39)
  {
    if (v38 >= 0) {
      uint64_t v41 = v102;
    }
    else {
      uint64_t v41 = (void **)v102[0];
    }
    memmove(v40, v41, v39);
  }
  strcpy((char *)v40 + v39, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)v102, (uint64_t)v96, (uint64_t)v98, 1.0 - v37);
  if (v97 < 0) {
    operator delete(v96[0]);
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v42 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v42 = v109.__r_.__value_.__l.__size_;
  }
  unint64_t v43 = v92;
  std::string::basic_string[abi:ne180100]((uint64_t)v92, v42 + 8);
  if (v93 < 0) {
    unint64_t v43 = (void **)v92[0];
  }
  if (v42)
  {
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v44 = &v109;
    }
    else {
      unsigned __int8 v44 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, "/updated");
  Espresso::sequential_builder::elementwise_op(0, (uint64_t *)(a1 + 8), (uint64_t)&v109, (uint64_t)v98, (uint64_t)v92, (uint64_t)v94);
  if (v93 < 0) {
    operator delete(v92[0]);
  }
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v109, (uint64_t *)(a1 + 8), (uint64_t)v94, (uint64_t)&v88, (uint64_t)&v90);
  if (v91 < 0) {
    operator delete(v90);
  }
  if (v89 < 0) {
    operator delete(v88);
  }
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v45 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v45 = v134.__r_.__value_.__l.__size_;
  }
  long long v46 = v84;
  std::string::basic_string[abi:ne180100]((uint64_t)v84, v45 + 16);
  if (v85 < 0) {
    long long v46 = (void **)v84[0];
  }
  if (v45)
  {
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v47 = &v134;
    }
    else {
      uint64_t v47 = (std::string *)v134.__r_.__value_.__r.__words[0];
    }
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, "/bias_correction");
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), (uint64_t)v123, a1 + 368, (uint64_t)v84, (uint64_t)v86);
  if (v85 < 0) {
    operator delete(v84[0]);
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v48 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v48 = v109.__r_.__value_.__l.__size_;
  }
  std::vector<std::string>::pointer v49 = v80;
  std::string::basic_string[abi:ne180100]((uint64_t)v80, v48 + 16);
  if (v81 < 0) {
    std::vector<std::string>::pointer v49 = (void **)v80[0];
  }
  if (v48)
  {
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v50 = &v109;
    }
    else {
      uint64_t v50 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    memmove(v49, v50, v48);
  }
  strcpy((char *)v49 + v48, "/bias_correction");
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), (uint64_t)v94, a1 + 392, (uint64_t)v80, (uint64_t)v82);
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v51 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v51 = v134.__r_.__value_.__l.__size_;
  }
  std::vector<std::string>::pointer v52 = v76;
  std::string::basic_string[abi:ne180100]((uint64_t)v76, v51 + 5);
  if (v77 < 0) {
    std::vector<std::string>::pointer v52 = (void **)v76[0];
  }
  if (v51)
  {
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v53 = &v134;
    }
    else {
      long long v53 = (std::string *)v134.__r_.__value_.__r.__words[0];
    }
    memmove(v52, v53, v51);
  }
  strcpy((char *)v52 + v51, "/step");
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), (uint64_t)v86, a1 + 296, (uint64_t)v76, (uint64_t)v78);
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  unsigned int v54 = *(_DWORD *)(a1 + 288);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v55 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v55 = v109.__r_.__value_.__l.__size_;
  }
  uint64_t v56 = v72;
  std::string::basic_string[abi:ne180100]((uint64_t)v72, v55 + 6);
  if (v73 < 0) {
    uint64_t v56 = (void **)v72[0];
  }
  if (v55)
  {
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v57 = &v109;
    }
    else {
      uint64_t v57 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    memmove(v56, v57, v55);
  }
  strcpy((char *)v56 + v55, "/rsqrt");
  Espresso::sequential_builder::rsqrt(v13, (uint64_t)v82, (uint64_t)v72, (uint64_t)v74, v54);
  if (v73 < 0) {
    operator delete(v72[0]);
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v58 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v58 = *(void *)(a2 + 8);
  }
  std::vector<std::string>::pointer v59 = v68;
  std::string::basic_string[abi:ne180100]((uint64_t)v68, v58 + 10);
  if (v69 < 0) {
    std::vector<std::string>::pointer v59 = (void **)v68[0];
  }
  if (v58)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v60 = (const void *)a2;
    }
    else {
      long long v60 = *(const void **)a2;
    }
    memmove(v59, v60, v58);
  }
  strcpy((char *)v59 + v58, "/adam_step");
  Espresso::sequential_builder::elementwise_op(1u, v13, (uint64_t)v78, (uint64_t)v74, (uint64_t)v68, (uint64_t)v70);
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  std::operator+<char>();
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v67;
  }
  Espresso::sequential_builder::elementwise_op(0, v13, a2, (uint64_t)v70, (uint64_t)&v65, (uint64_t)&v66);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  std::string v67 = v66;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v147, v13, (uint64_t)&v67, (uint64_t)&v61, (uint64_t)&v63);
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  if (v79 < 0) {
    operator delete(v78[0]);
  }
  if (v83 < 0) {
    operator delete(v82[0]);
  }
  if (v87 < 0) {
    operator delete(v86[0]);
  }
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  if (v99 < 0)
  {
    operator delete(v98[0]);
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_225;
    }
  }
  else if ((v38 & 0x80000000) == 0)
  {
    goto LABEL_225;
  }
  operator delete(v102[0]);
LABEL_225:
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (v116) {
    nitro::nitro_function::nitro_function(v116);
  }
  if (v124 < 0) {
    operator delete(v123[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  if (v141) {
    nitro::nitro_function::nitro_function(v141);
  }
  if (v145)
  {
    double v146 = v145;
    operator delete(v145);
  }
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
}

void sub_192699EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a75);
  }
  if (v75 < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (STACK[0x2F8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2F8]);
  }
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete((void *)STACK[0x348]);
  }
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  uint64_t v78 = *(std::__shared_weak_count **)(v76 - 200);
  if (v78) {
    nitro::nitro_function::nitro_function(v78);
  }
  char v79 = *(void **)(v76 - 152);
  if (v79)
  {
    *(void *)(v76 - 144) = v79;
    operator delete(v79);
  }
  if (*(char *)(v76 - 105) < 0) {
    operator delete(*(void **)(v76 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_19269A0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a68 < 0) {
    JUMPOUT(0x19269A014);
  }
  JUMPOUT(0x19269A018);
}

void sub_19269A0E8()
{
}

void sub_19269A0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    JUMPOUT(0x19269A024);
  }
  JUMPOUT(0x19269A028);
}

void sub_19269A104()
{
}

void sub_19269A10C()
{
  if (SLOBYTE(STACK[0x227]) < 0) {
    JUMPOUT(0x19269A030);
  }
  JUMPOUT(0x19269A034);
}

void sub_19269A120()
{
}

void sub_19269A128()
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    JUMPOUT(0x19269A040);
  }
  JUMPOUT(0x19269A044);
}

void sub_19269A13C()
{
}

void sub_19269A144()
{
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x19269A054);
}

void sub_19269A188()
{
  uint64_t v0 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x19269A060);
}

void sub_19269A1C0()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    JUMPOUT(0x19269A06CLL);
  }
  JUMPOUT(0x19269A070);
}

void sub_19269A1D4()
{
}

void sub_19269A1DC()
{
  if (SLOBYTE(STACK[0x377]) < 0) {
    JUMPOUT(0x19269A07CLL);
  }
  JUMPOUT(0x19269A080);
}

void sub_19269A1F0()
{
}

void sub_19269A1F8()
{
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    JUMPOUT(0x19269A08CLL);
  }
  JUMPOUT(0x19269A090);
}

void sub_19269A20C()
{
}

void sub_19269A214()
{
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete((void *)STACK[0x3A8]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x19269A0A0);
}

void sub_19269A258()
{
  uint64_t v0 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x19269A0ACLL);
}

void sub_19269A270()
{
}

void sub_19269A278()
{
  if (STACK[0x3F0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3F0]);
  }
  JUMPOUT(0x19269A0BCLL);
}

void sub_19269A28C()
{
}

void Espresso::adam_optimizer_builder::update_states(Espresso::adam_optimizer_builder *this)
{
  size_t v2 = (uint64_t *)((char *)this + 8);
  update_scalar_global_by_constant((uint64_t *)this + 1, (uint64_t)this + 208, 2u, 1.0);
  update_scalar_global_by_constant(v2, (uint64_t)this + 320, 3u, *((float *)this + 70));
  float v3 = *((float *)this + 71);

  update_scalar_global_by_constant(v2, (uint64_t)this + 344, 3u, v3);
}

void Espresso::adam_optimizer_builder::init_optimizer_states(Espresso::adam_optimizer_builder *this)
{
  size_t v2 = (uint64_t *)((char *)this + 8);
  float v3 = (char *)this + 240;
  if (*((char *)this + 263) >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 263);
  }
  else {
    size_t v4 = *((void *)this + 31);
  }
  uint64_t v5 = v48;
  std::string::basic_string[abi:ne180100]((uint64_t)v48, v4 + 4);
  if (v49 < 0) {
    uint64_t v5 = (void **)v48[0];
  }
  if (v4)
  {
    if (*((char *)this + 263) >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = (const void *)*((void *)this + 30);
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/neg");
  Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)v3, (uint64_t)v48, (uint64_t)&v50, -1.0);
  long long v7 = (void **)((char *)this + 296);
  if (*((char *)this + 319) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)long long v7 = v50;
  *((void *)this + 39) = v51;
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  init_scalar_global((uint64_t)v2, (std::string *)((char *)this + 320), *((float *)this + 70));
  if (*((char *)this + 343) >= 0) {
    size_t v8 = *((unsigned __int8 *)this + 343);
  }
  else {
    size_t v8 = *((void *)this + 41);
  }
  char v9 = v46;
  std::string::basic_string[abi:ne180100]((uint64_t)v46, v8 + 4);
  if (v47 < 0) {
    char v9 = (void **)v46[0];
  }
  if (v8)
  {
    if (*((char *)this + 343) >= 0) {
      size_t v10 = (char *)this + 320;
    }
    else {
      size_t v10 = (char *)*((void *)this + 40);
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/neg");
  Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)this + 320, (uint64_t)v46, (uint64_t)&v50, -1.0);
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (*((char *)this + 343) >= 0) {
    size_t v11 = *((unsigned __int8 *)this + 343);
  }
  else {
    size_t v11 = *((void *)this + 41);
  }
  unint64_t v12 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 4);
  if (v43 < 0) {
    unint64_t v12 = (void **)__p[0];
  }
  if (v11)
  {
    if (*((char *)this + 343) >= 0) {
      uint64_t v13 = (char *)this + 320;
    }
    else {
      uint64_t v13 = (char *)*((void *)this + 40);
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/res");
  Espresso::sequential_builder::by_constant_op(2u, v2, (uint64_t)&v50, (uint64_t)__p, (uint64_t)v44, 1.0);
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)this + 343) >= 0) {
    size_t v14 = *((unsigned __int8 *)this + 343);
  }
  else {
    size_t v14 = *((void *)this + 41);
  }
  int v15 = v38;
  std::string::basic_string[abi:ne180100]((uint64_t)v38, v14 + 6);
  if (v39 < 0) {
    int v15 = (void **)v38[0];
  }
  if (v14)
  {
    if (*((char *)this + 343) >= 0) {
      uint64_t v16 = (char *)this + 320;
    }
    else {
      uint64_t v16 = (char *)*((void *)this + 40);
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "/scale");
  Espresso::sequential_builder::by_constant_op(0xAu, v2, (uint64_t)v44, (uint64_t)v38, (uint64_t)v40, 1.0);
  uint64_t v17 = (void **)((char *)this + 368);
  if (*((char *)this + 391) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v40;
  *((void *)this + 48) = v41;
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  init_scalar_global((uint64_t)v2, (std::string *)((char *)this + 344), *((float *)this + 71));
  if (*((char *)this + 367) >= 0) {
    size_t v18 = *((unsigned __int8 *)this + 367);
  }
  else {
    size_t v18 = *((void *)this + 44);
  }
  size_t v19 = v36;
  std::string::basic_string[abi:ne180100]((uint64_t)v36, v18 + 4);
  if (v37 < 0) {
    size_t v19 = (void **)v36[0];
  }
  if (v18)
  {
    if (*((char *)this + 367) >= 0) {
      uint64_t v20 = (char *)this + 344;
    }
    else {
      uint64_t v20 = (char *)*((void *)this + 43);
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "/neg");
  Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)this + 344, (uint64_t)v36, (uint64_t)v40, -1.0);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (*((char *)this + 367) >= 0) {
    size_t v21 = *((unsigned __int8 *)this + 367);
  }
  else {
    size_t v21 = *((void *)this + 44);
  }
  size_t v22 = v32;
  std::string::basic_string[abi:ne180100]((uint64_t)v32, v21 + 4);
  if (v33 < 0) {
    size_t v22 = (void **)v32[0];
  }
  if (v21)
  {
    if (*((char *)this + 367) >= 0) {
      long long v23 = (char *)this + 344;
    }
    else {
      long long v23 = (char *)*((void *)this + 43);
    }
    memmove(v22, v23, v21);
  }
  strcpy((char *)v22 + v21, "/res");
  Espresso::sequential_builder::by_constant_op(2u, v2, (uint64_t)v40, (uint64_t)v32, (uint64_t)v34, 1.0);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (*((char *)this + 367) >= 0) {
    size_t v24 = *((unsigned __int8 *)this + 367);
  }
  else {
    size_t v24 = *((void *)this + 44);
  }
  uint64_t v25 = v28;
  std::string::basic_string[abi:ne180100]((uint64_t)v28, v24 + 6);
  if (v29 < 0) {
    uint64_t v25 = (void **)v28[0];
  }
  if (v24)
  {
    if (*((char *)this + 367) >= 0) {
      uint64_t v26 = (char *)this + 344;
    }
    else {
      uint64_t v26 = (char *)*((void *)this + 43);
    }
    memmove(v25, v26, v24);
  }
  strcpy((char *)v25 + v24, "/scale");
  Espresso::sequential_builder::by_constant_op(0xAu, v2, (uint64_t)v34, (uint64_t)v28, (uint64_t)&v30, 1.0);
  size_t v27 = (void **)((char *)this + 392);
  if (*((char *)this + 415) < 0) {
    operator delete(*v27);
  }
  *(_OWORD *)size_t v27 = v30;
  *((void *)this + 51) = v31;
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
}

void sub_19269A820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (*(char *)(v47 - 137) < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  if (*(char *)(v47 - 65) < 0) {
    operator delete(*(void **)(v47 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_19269A8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    JUMPOUT(0x19269A8BCLL);
  }
  JUMPOUT(0x19269A8C0);
}

void sub_19269A8F0()
{
}

void sub_19269A8F8()
{
  if (*(char *)(v0 - 113) < 0) {
    JUMPOUT(0x19269A8CCLL);
  }
  JUMPOUT(0x19269A8D4);
}

void sub_19269A90C()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x19269A8D0);
  }
  JUMPOUT(0x19269A8D4);
}

void init_scalar_global(uint64_t a1, std::string *a2, float a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 128);
  uint64_t v7 = a1 + 112;
  memset(v13, 0, sizeof(v13));
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v13, 0, (uint64_t)v14);
  Espresso::make_filled_bc(&v17, v7, a3, v6, (uint64_t)v14);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  size_t v8 = v18;
  v10[0] = v17;
  v10[1] = (uint64_t)v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "");
  Espresso::sequential_builder::load_global_op(a2, &v9, (uint64_t *)a1, v10, (uint64_t)&v11);
  if (v12 < 0) {
    operator delete(v11);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
}

void sub_19269AA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  char v33 = *(std::__shared_weak_count **)(v31 - 56);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::adam_optimizer_builder::~adam_optimizer_builder(void **this)
{
  *this = &unk_1EE3576F0;
  if (*((char *)this + 415) < 0) {
    operator delete(this[49]);
  }
  if (*((char *)this + 391) < 0) {
    operator delete(this[46]);
  }
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  if (*((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  Espresso::optimizer_builder::~optimizer_builder(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE3576F0;
  if (*((char *)this + 415) < 0) {
    operator delete(this[49]);
  }
  if (*((char *)this + 391) < 0) {
    operator delete(this[46]);
  }
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  if (*((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }

  Espresso::optimizer_builder::~optimizer_builder(this);
}

uint64_t Espresso::optimizer_builder::optimizer_builder(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, std::string *a5, float a6)
{
  *(void *)a1 = &unk_1EE34D0F8;
  uint64_t v12 = a1 + 8;
  uint64_t v13 = *a2;
  size_t v14 = (std::__shared_weak_count *)a2[1];
  v22[0] = *a2;
  v22[1] = (uint64_t)v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = *a2;
  }
  int v15 = *(std::__shared_weak_count **)(v13 + 24);
  v21[0] = *(void *)(v13 + 16);
  v21[1] = (uint64_t)v15;
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = *a2;
  }
  int v16 = *(_DWORD *)(**(void **)(v13 + 32) + 12);
  v20[0] = 0;
  v20[1] = 0;
  Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)(a1 + 8), v22, v21, v16, v20);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 208), "step_global");
  *(float *)(a1 + 232) = a6;
  if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 240), a5->__r_.__value_.__l.__data_, a5->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v17 = *(_OWORD *)&a5->__r_.__value_.__l.__data_;
    *(void *)(a1 + 256) = *((void *)&a5->__r_.__value_.__l + 2);
    *(_OWORD *)(a1 + 240) = v17;
  }
  *(void *)(a1 + 264) = a3;
  *(void *)(a1 + 272) = a4;
  size_t v18 = *(unsigned int (****)(void))(*(void *)(*a2 + 16) + 8);
  if ((**v18)(v18) != 80000) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("optimizer_builder can be created only for networks on IR platform");
  }
  init_scalar_global(v12, a5, a6);
  init_scalar_global(v12, (std::string *)(a1 + 208), 0.0);
  return a1;
}

void sub_19269ADA4(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 231) < 0) {
    operator delete(*v3);
  }
  Espresso::sequential_builder::~sequential_builder(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error>(const char *a1)
{
}

unsigned __int8 *encrypted_file::load_file(void **a1, uint64_t a2)
{
  float v3 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    float v3 = *(const char **)a2;
  }
  int v4 = open(v3, 0);
  if (v4 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)&v60);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v5 = v4;
  v60.st_std::string::size_type size = 0;
  if (fstat(v4, &v60) == -1)
  {
    close(v5);
    size_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    size_t v19 = std::string::append(&v57, ":");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    size_t v21 = __error();
    std::to_string(&v56, *v21);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v22 = &v56;
    }
    else {
      size_t v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    size_t v24 = std::string::append(&v58, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v59);
    __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  st_std::string::size_type size = v60.st_size;
  a1[1] = (void *)v60.st_size;
  if ((v60.st_mode & 0xF000) != 0x8000)
  {
    close(v5);
    uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    size_t v27 = std::string::append(&v58, "not a regular file");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, &v59);
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *a1 = mmap(0, st_size, 1, 2, v5, 0);
  close(v5);
  uint64_t result = (unsigned __int8 *)*a1;
  if (*a1 == (void *)-1)
  {
    char v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v30 = std::string::append(&v57, " error: ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::string v32 = __error();
    std::to_string(&v56, *v32);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v33 = &v56;
    }
    else {
      char v33 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v56.__r_.__value_.__l.__size_;
    }
    char v35 = std::string::append(&v58, (const std::string::value_type *)v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &v59);
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v8 = (unint64_t)a1[1];
  if (v8 <= 0x3F)
  {
    char v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "file does not contain encrypted model header");
    goto LABEL_41;
  }
  if (*(_DWORD *)result != 1162759500)
  {
    char v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "unrecognized magic word in the encrypted model header");
LABEL_41:
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!result[4] || result[4] >= 3u)
  {
    uint64_t v13 = (unsigned __int8 *)*a1;
    size_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v58, v13[4]);
    int v15 = std::string::insert(&v58, 0, "unsupported major version = ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &v59);
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (result[4] == 1) {
    unsigned int v9 = 64;
  }
  else {
    unsigned int v9 = result[7];
  }
  unint64_t v10 = v9;
  if (v8 <= v9)
  {
    int v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v58, v10);
    char v39 = std::string::insert(&v58, 0, "file does not contain any payload, sizeOfHeader = ");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v38, &v59);
    __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v11 = *((void *)result + 1);
  if (v11 - 1 >= v8 - v9)
  {
    uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v58, v11);
    size_t v42 = std::string::insert(&v58, 0, "illegal value for original file size = ");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v41, &v59);
    __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v12 = *((void *)result + 2);
  if (v12)
  {
    if (v12 >> 52)
    {
      unint64_t v44 = *((void *)result + 2);
      char v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v58, v44);
      long long v46 = std::string::insert(&v58, 0, "illegal value for number of encrypted pages = ");
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v45, &v59);
      __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v8 < v12 << 12)
    {
      unint64_t v48 = *((void *)result + 2);
      char v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v58, v48);
      long long v50 = std::string::insert(&v58, 0, "illegal number of encrypted bytes, encrypted pages = ");
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v49, &v59);
      __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (mremap_encrypted())
    {
      std::vector<std::string>::pointer v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      long long v53 = __error();
      std::to_string(&v58, *v53);
      unsigned int v54 = std::string::insert(&v58, 0, "failed to setup decryption path due to error: ");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v52, &v59);
      __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t result = (unsigned __int8 *)*a1;
  }
  a1[2] = &result[v10];
  a1[3] = (void *)v11;
  return result;
}

void sub_19269B5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v41) {
    __cxa_free_exception(v40);
  }
  _Unwind_Resume(exception_object);
}

void encrypted_file::~encrypted_file(encrypted_file *this)
{
  uint64_t v2 = *(void **)this;
  if (v2 != (void *)-1) {
    munmap(v2, *((void *)this + 1));
  }
  *(void *)this = -1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = -1;
  *((void *)this + 3) = 0;
}

uint64_t initValkCVANetInputChannels(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputChannels");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetInputChannels = result;
  }
  else
  {
    uint64_t result = constantValkCVANetInputChannels;
  }
  getkCVANetInputChannels[0] = kCVANetInputChannelsFunction;
  return result;
}

uint64_t kCVANetInputChannelsFunction(void)
{
  return constantValkCVANetInputChannels;
}

void *___ZL15AppleCVALibraryv_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AppleCVA.framework/AppleCVA", 2);
  AppleCVALibrary(void)::sLib = (uint64_t)result;
  return result;
}

uint64_t initValkCVANetInputHeight(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputHeight");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetInputHeight = result;
  }
  else
  {
    uint64_t result = constantValkCVANetInputHeight;
  }
  getkCVANetInputHeight[0] = kCVANetInputHeightFunction;
  return result;
}

uint64_t kCVANetInputHeightFunction(void)
{
  return constantValkCVANetInputHeight;
}

uint64_t initValkCVANetInputWidth(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputWidth");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetInputWidth = result;
  }
  else
  {
    uint64_t result = constantValkCVANetInputWidth;
  }
  getkCVANetInputWidth[0] = kCVANetInputWidthFunction;
  return result;
}

uint64_t kCVANetInputWidthFunction(void)
{
  return constantValkCVANetInputWidth;
}

uint64_t initValkCVANetInputType(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetInputType = result;
  }
  else
  {
    uint64_t result = constantValkCVANetInputType;
  }
  getkCVANetInputType[0] = kCVANetInputTypeFunction;
  return result;
}

uint64_t kCVANetInputTypeFunction(void)
{
  return constantValkCVANetInputType;
}

void dictionaryAddVector<int>(__CFDictionary *a1, const void *a2, char **a3)
{
  int v5 = *a3;
  uint64_t v6 = a3[1];
  unint64_t v7 = v6 - *a3;
  if (v6 == *a3)
  {
    unsigned int v9 = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unint64_t v12 = a3[1];
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v9 = operator new(2 * v7);
    bzero(v9, 2 * v7);
    unint64_t v7 = (unint64_t)v9 + 2 * v7;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unint64_t v11 = (CFNumberRef *)v9;
    do
    {
      *v11++ = CFNumberCreate(v10, kCFNumberSInt32Type, v5);
      v5 += 4;
    }
    while (v5 != v6);
    uint64_t v6 = *a3;
    unint64_t v12 = a3[1];
  }
  CFArrayRef v13 = CFArrayCreate(v10, (const void **)v9, (v12 - v6) >> 2, MEMORY[0x1E4F1D510]);
  CFDictionaryAddValue(a1, a2, v13);
  if (v9 != (void *)v7)
  {
    size_t v14 = (CFTypeRef *)v9;
    do
      CFRelease(*v14++);
    while (v14 != (CFTypeRef *)v7);
  }
  CFRelease(v13);
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_19269BB08(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t initValkCVANetUnitParams(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitParams");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitParams = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitParams;
  }
  getkCVANetUnitParams[0] = kCVANetUnitParamsFunction;
  return result;
}

uint64_t kCVANetUnitParamsFunction(void)
{
  return constantValkCVANetUnitParams;
}

uint64_t initValkCVANetUnitOutputShape(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOutputShape");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitOutputShape = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitOutputShape;
  }
  getkCVANetUnitOutputShape[0] = kCVANetUnitOutputShapeFunction;
  return result;
}

uint64_t kCVANetUnitOutputShapeFunction(void)
{
  return constantValkCVANetUnitOutputShape;
}

uint64_t initValkCVANetUnitStep(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitStep");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitStep = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitStep;
  }
  getkCVANetUnitStep[0] = kCVANetUnitStepFunction;
  return result;
}

uint64_t kCVANetUnitStepFunction(void)
{
  return constantValkCVANetUnitStep;
}

uint64_t initValkCVANetUnitShiftOut(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitShiftOut");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitShiftOut = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitShiftOut;
  }
  getkCVANetUnitShiftOut[0] = kCVANetUnitShiftOutFunction;
  return result;
}

uint64_t kCVANetUnitShiftOutFunction(void)
{
  return constantValkCVANetUnitShiftOut;
}

uint64_t initValkCVANetUnitScaleOut(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitScaleOut");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitScaleOut = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitScaleOut;
  }
  getkCVANetUnitScaleOut[0] = kCVANetUnitScaleOutFunction;
  return result;
}

uint64_t kCVANetUnitScaleOutFunction(void)
{
  return constantValkCVANetUnitScaleOut;
}

uint64_t initValkCVANetUnitOffsetIn(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOffsetIn");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitOffsetIn = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitOffsetIn;
  }
  getkCVANetUnitOffsetIn[0] = kCVANetUnitOffsetInFunction;
  return result;
}

uint64_t kCVANetUnitOffsetInFunction(void)
{
  return constantValkCVANetUnitOffsetIn;
}

uint64_t initValkCVANetUnitKernelHeight(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernelHeight");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitKernelHeight = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitKernelHeight;
  }
  getkCVANetUnitKernelHeight[0] = kCVANetUnitKernelHeightFunction;
  return result;
}

uint64_t kCVANetUnitKernelHeightFunction(void)
{
  return constantValkCVANetUnitKernelHeight;
}

uint64_t initValkCVANetUnitKernelWidth(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernelWidth");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitKernelWidth = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitKernelWidth;
  }
  getkCVANetUnitKernelWidth[0] = kCVANetUnitKernelWidthFunction;
  return result;
}

uint64_t kCVANetUnitKernelWidthFunction(void)
{
  return constantValkCVANetUnitKernelWidth;
}

uint64_t initValkCVANetUnitKernel(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernel");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitKernel = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitKernel;
  }
  getkCVANetUnitKernel[0] = kCVANetUnitKernelFunction;
  return result;
}

uint64_t kCVANetUnitKernelFunction(void)
{
  return constantValkCVANetUnitKernel;
}

uint64_t initValkCVANetUnitOffsetOut(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOffsetOut");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitOffsetOut = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitOffsetOut;
  }
  getkCVANetUnitOffsetOut[0] = kCVANetUnitOffsetOutFunction;
  return result;
}

uint64_t kCVANetUnitOffsetOutFunction(void)
{
  return constantValkCVANetUnitOffsetOut;
}

uint64_t initValkCVANetUnitKernelType(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitKernelType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitKernelType = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitKernelType;
  }
  getkCVANetUnitKernelType[0] = kCVANetUnitKernelTypeFunction;
  return result;
}

uint64_t kCVANetUnitKernelTypeFunction(void)
{
  return constantValkCVANetUnitKernelType;
}

uint64_t initValkCVANetUnitOutputChannels(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitOutputChannels");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitOutputChannels = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitOutputChannels;
  }
  getkCVANetUnitOutputChannels[0] = kCVANetUnitOutputChannelsFunction;
  return result;
}

uint64_t kCVANetUnitOutputChannelsFunction(void)
{
  return constantValkCVANetUnitOutputChannels;
}

uint64_t initValkCVANetUnitInputChannels(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitInputChannels");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitInputChannels = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitInputChannels;
  }
  getkCVANetUnitInputChannels[0] = kCVANetUnitInputChannelsFunction;
  return result;
}

uint64_t kCVANetUnitInputChannelsFunction(void)
{
  return constantValkCVANetUnitInputChannels;
}

uint64_t initValkCVANetUnitBottomOutputChannelStart(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitBottomOutputChannelStart");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitBottomOutputChannelStart = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitBottomOutputChannelStart;
  }
  getkCVANetUnitBottomOutputChannelStart[0] = kCVANetUnitBottomOutputChannelStartFunction;
  return result;
}

uint64_t kCVANetUnitBottomOutputChannelStartFunction(void)
{
  return constantValkCVANetUnitBottomOutputChannelStart;
}

uint64_t initValkCVANetUnitBottomOutputIndex(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitBottomOutputIndex");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitBottomOutputIndex = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitBottomOutputIndex;
  }
  getkCVANetUnitBottomOutputIndex[0] = kCVANetUnitBottomOutputIndexFunction;
  return result;
}

uint64_t kCVANetUnitBottomOutputIndexFunction(void)
{
  return constantValkCVANetUnitBottomOutputIndex;
}

uint64_t initValkCVANetUnitBottomName(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitBottomName");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitBottomName = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitBottomName;
  }
  getkCVANetUnitBottomName[0] = kCVANetUnitBottomNameFunction;
  return result;
}

uint64_t kCVANetUnitBottomNameFunction(void)
{
  return constantValkCVANetUnitBottomName;
}

uint64_t initValkCVANetUnitDataType(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitDataType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitDataType = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitDataType;
  }
  getkCVANetUnitDataType[0] = kCVANetUnitDataTypeFunction;
  return result;
}

uint64_t kCVANetUnitDataTypeFunction(void)
{
  return constantValkCVANetUnitDataType;
}

uint64_t initValkCVANetUnitName(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitName");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitName = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitName;
  }
  getkCVANetUnitName[0] = kCVANetUnitNameFunction;
  return result;
}

uint64_t kCVANetUnitNameFunction(void)
{
  return constantValkCVANetUnitName;
}

uint64_t initValkCVANetUnitAcceleratorType(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitAcceleratorType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitAcceleratorType = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitAcceleratorType;
  }
  getkCVANetUnitAcceleratorType[0] = kCVANetUnitAcceleratorTypeFunction;
  return result;
}

uint64_t kCVANetUnitAcceleratorTypeFunction(void)
{
  return constantValkCVANetUnitAcceleratorType;
}

uint64_t initValkCVANetUnitTypeConvolution(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitTypeConvolution");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitTypeConvolution = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitTypeConvolution;
  }
  getkCVANetUnitTypeConvolution[0] = kCVANetUnitTypeConvolutionFunction;
  return result;
}

uint64_t kCVANetUnitTypeConvolutionFunction(void)
{
  return constantValkCVANetUnitTypeConvolution;
}

uint64_t initValkCVANetUnitType(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitType = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitType;
  }
  getkCVANetUnitType[0] = kCVANetUnitTypeFunction;
  return result;
}

uint64_t kCVANetUnitTypeFunction(void)
{
  return constantValkCVANetUnitType;
}

uint64_t initValkCVANetUnitPoolingType(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitPoolingType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitPoolingType = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitPoolingType;
  }
  getkCVANetUnitPoolingType[0] = kCVANetUnitPoolingTypeFunction;
  return result;
}

uint64_t kCVANetUnitPoolingTypeFunction(void)
{
  return constantValkCVANetUnitPoolingType;
}

uint64_t initValkCVANetUnitTypePooling(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitTypePooling");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitTypePooling = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitTypePooling;
  }
  getkCVANetUnitTypePooling[0] = kCVANetUnitTypePoolingFunction;
  return result;
}

uint64_t kCVANetUnitTypePoolingFunction(void)
{
  return constantValkCVANetUnitTypePooling;
}

uint64_t initValkCVANetUnitTypeConcat(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_1);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnitTypeConcat");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnitTypeConcat = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnitTypeConcat;
  }
  getkCVANetUnitTypeConcat[0] = kCVANetUnitTypeConcatFunction;
  return result;
}

uint64_t kCVANetUnitTypeConcatFunction(void)
{
  return constantValkCVANetUnitTypeConcat;
}

uint64_t Espresso::CPUFP16Engine::fp16_zero(Espresso::CPUFP16Engine *this)
{
  return 0;
}

float Espresso::CPUFP16Engine::f16_to_fp32_1_slow(Espresso::CPUFP16Engine *this)
{
  _H0 = (__int16)this;
  __asm { FCVT            S0, H0 }
  return result;
}

float Espresso::CPUFP16Engine::f32_to_fp16_1_slow(Espresso::CPUFP16Engine *this, float result)
{
  __asm { FCVT            H0, S0 }
  return result;
}

vImage_Error Espresso::CPUFP16Engine::f16_to_fp32(Espresso::CPUFP16Engine *this, unsigned __int16 *a2, vImagePixelCount a3)
{
  src.data = this;
  src.height = 1;
  src.width = a3;
  src.rowBytes = 2 * a3;
  v4.data = a2;
  v4.height = 1;
  v4.width = a3;
  v4.rowBytes = 4 * a3;
  return vImageConvert_Planar16FtoPlanarF(&src, &v4, 0);
}

__int16 Espresso::CPUFP16Engine::f32_to_fp16@<H0>(Espresso::CPUFP16Engine *this@<X0>, float *a2@<X1>, unsigned __int16 *a3@<X2>)
{
  for (; a3; a3 = (unsigned __int16 *)((char *)a3 - 1))
  {
    int v3 = *(_DWORD *)this;
    this = (Espresso::CPUFP16Engine *)((char *)this + 4);
    _S0 = v3;
    __asm { FCVT            H0, S0 }
    *(_WORD *)a2 = result;
    a2 = (float *)((char *)a2 + 2);
  }
  return result;
}

short float *Espresso::CPUFP16Engine::_f16_add(short float *this, short float *a2, short float *a3, unsigned __int16 *a4)
{
  for (; a4; a4 = (unsigned __int16 *)((char *)a4 - 1))
  {
    short float v4 = *a2++;
    short float v5 = v4;
    short float v6 = *a3++;
    *this++ = v5 + v6;
  }
  return this;
}

_WORD *Espresso::CPUFP16Engine::_f16_thr(_WORD *this, unsigned __int16 *a2, unsigned __int16 *a3, float a4)
{
  for (; a3; a3 = (unsigned __int16 *)((char *)a3 - 1))
  {
    __int16 v4 = *a2++;
    _H1 = v4;
    __asm { FCVT            S2, H1 }
    __int16 v11 = v4;
    if (_S2 < a4) {
      __int16 v11 = 0;
    }
    *this++ = v11;
  }
  return this;
}

uint64_t Espresso::CPUFP16Engine::image2colbuffer_f32_partitioned(uint64_t this, float *a2, const unsigned __int16 *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18)
{
  int v56 = a9 * a8 * a3;
  if (v56 >= 1)
  {
    int v59 = 0;
    int v58 = 0;
    int v18 = a17 * a15 + a15;
    if (v18 >= a6) {
      int v18 = a6;
    }
    int v19 = a16 * a14;
    if (a16 * a14 + a14 >= a7) {
      int v20 = a7;
    }
    else {
      int v20 = a16 * a14 + a14;
    }
    uint64_t v21 = v18;
    int v57 = v19 * a13 - a11;
    do
    {
      if (a17 * a15 < (int)v21)
      {
        int v22 = v59;
        uint64_t v23 = a17 * a15;
        do
        {
          uint64_t v24 = v23 * a12 - a10 + v58 / a9 % a8;
          BOOL v26 = v24 >= 0 && v24 < a4;
          if (v19 < v20)
          {
            uint64_t v27 = 0;
            uint64_t v28 = (v24 + v58 / (a9 * a8) * a4) * a5;
            for (int i = v57 - v58 / a9 * a9; ; int i = v30 + 4 * a13)
            {
              uint64_t v30 = i;
              BOOL v31 = i >= 0 && v26;
              _H0 = 0;
              BOOL v33 = v31 && i < a5;
              _H1 = 0;
              if (v33) {
                _H1 = *((_WORD *)a2 + v28 + i);
              }
              uint64_t v35 = i + (uint64_t)a13;
              BOOL v36 = v30 + a13 < 0 == __OFADD__(v30, a13) && v26;
              if (v36 && v35 < a5) {
                _H0 = *((_WORD *)a2 + v35 + v28);
              }
              _VF = __OFADD__(v35, a13);
              uint64_t v39 = v35 + a13;
              BOOL v40 = v39 < 0 == _VF && v26;
              _H2 = 0;
              BOOL v42 = v40 && v39 < a5;
              _H4 = 0;
              if (v42) {
                _H4 = *((_WORD *)a2 + v39 + v28);
              }
              _VF = __OFADD__(v39, a13);
              uint64_t v44 = v39 + a13;
              BOOL v45 = v44 < 0 == _VF && v26;
              if (v45 && v44 < a5) {
                _H2 = *((_WORD *)a2 + v44 + v28);
              }
              __asm
              {
                FCVT            S5, H1
                FCVT            S3, H0
                FCVT            S1, H4
                FCVT            S0, H2
              }
              if (v19 + v27 + 4 >= v20) {
                break;
              }
              *(_DWORD *)(this + 4 * (v22 + (int)v27)) = _S5;
              *(_DWORD *)(this + 4 * (v22 + (int)v27 + 1)) = _S3;
              *(_DWORD *)(this + 4 * (v22 + (int)v27 + 2)) = _S1;
              *(_DWORD *)(this + 4 * (v22 + (int)v27 + 3)) = _S0;
              v27 += 4;
            }
            uint64_t v53 = v19 + v27;
            int v54 = ((v58 - a17) * a15 + v23 - a16) * a14 + v19 + v27;
            *(_DWORD *)(this + 4 * v54) = _S5;
            if (v53 < v20 - 1) {
              *(_DWORD *)(this + 4 * (v54 + 1)) = _S3;
            }
            if (v53 < v20 - 2) {
              *(_DWORD *)(this + 4 * (v54 + 2)) = _S1;
            }
            if (v53 < v20 - 3) {
              *(_DWORD *)(this + 4 * (v54 + 3)) = _S0;
            }
          }
          ++v23;
          v22 += a14;
        }
        while (v23 != v21);
      }
      v59 += a15 * a14;
      ++v57;
      ++v58;
    }
    while (v58 != v56);
  }
  return this;
}

void Espresso::abstract_kernel_with_weights_::blob_container_options_for_weight(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::abstract_kernel_with_weights_::weight_names_and_shapes(Espresso::abstract_kernel_with_weights_ *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unexpected not-implemented function ");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19269CC44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_weights_::create_weights_named(uint64_t a1, void *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 368))(&v19);
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v20, a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 368))(&v13, a1);
  __int16 v4 = (long long *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v13, a2);
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](&v15, v4 + 2);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v13, v14);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 8) + 24))(&v13);
  uint64_t v5 = v13;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(void *)a1 + 376))(&v11, a1, &v15);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v5 + 16))(v5, &v16, &v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v21 = &v15;
  short float v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), &v15, (long long **)&v21);
  uint64_t v8 = v13;
  unint64_t v7 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  }
  unsigned int v9 = (std::__shared_weak_count *)v6[8];
  v6[7] = v8;
  v6[8] = (uint64_t)v7;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v14) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14);
  }
  if (__p)
  {
    int v18 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v19, v20);
}

void sub_19269CEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v21 - 64, *(char **)(v21 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  short float v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    short float v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    unsigned int v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19269D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<std::string const,Espresso::layer_shape>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::abstract_kernel_with_weights_::create_all_weights(uint64_t a1)
{
  (*(void (**)(char ***__return_ptr))(*(void *)a1 + 368))(&v15);
  uint64_t v2 = v15;
  if (v15 != v16)
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a1 + 288), v2 + 4))
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 8) + 24))(&v13);
        uint64_t v3 = v13;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, char **))(*(void *)a1 + 376))(&v11, a1, v2 + 4);
        (*(void (**)(uint64_t, char **, uint64_t *))(*(void *)v3 + 16))(v3, v2 + 7, &v11);
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
        long long v17 = (long long *)(v2 + 4);
        __int16 v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), v2 + 4, &v17);
        uint64_t v6 = v13;
        uint64_t v5 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v7 = (std::__shared_weak_count *)v4[8];
        v4[7] = v6;
        v4[8] = (uint64_t)v5;
        if (v7) {
          nitro::nitro_function::nitro_function(v7);
        }
        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
      }
      uint64_t v8 = v2[1];
      if (v8)
      {
        do
        {
          unsigned int v9 = (char **)v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (char **)v2[2];
          BOOL v10 = *v9 == (char *)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v16);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v15, v16[0]);
}

void sub_19269D24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, char a13, char *a14)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_kernel_with_weights_::__set_weight_cpu_blob(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), a3, &v5)[7]+ 48);

  return v3();
}

void Espresso::abstract_kernel_with_weights_::set_weight_blob(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  __int16 v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v8);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[8];
  v4[7] = v6;
  v4[8] = v5;
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

uint64_t Espresso::abstract_kernel_with_weights_::num_weights_blob(Espresso::abstract_kernel_with_weights_ *this)
{
  return 0;
}

void Espresso::abstract_kernel_with_weights_::get_weights_blob(Espresso::abstract_kernel_with_weights_ *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19269D3D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double Espresso::base_kernel::get_output_to_input_blob_aliases@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

const void **Espresso::base_kernel::unpacked_name@<X0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  return std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 72), a2, a3);
}

const char *Espresso::generic_pool_kernel::kernel_type_str(Espresso::generic_pool_kernel *this)
{
  return "pool";
}

uint64_t Espresso::base_kernel::dump_weight_blob@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a1 + 160), a2);
  if (result)
  {
    uint64_t v8 = a2;
    uint64_t result = (uint64_t)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 152), a2, &v8);
    uint64_t v7 = *(void *)(result + 64);
    *a3 = *(void *)(result + 56);
    a3[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<unsigned char,1>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    unsigned int v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19269D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::base_kernel::wisdom_tunables(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void Espresso::base_kernel::wisdom_key(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t Espresso::base_kernel::estimated_gflop(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 128))(a1, a2, 0);
}

uint64_t Espresso::MetalLowmemEngine::pool_kernel::number_of_top_blobs(Espresso::MetalLowmemEngine::pool_kernel *this)
{
  if (*((_DWORD *)this + 94)) {
    return 2;
  }
  else {
    return 1;
  }
}

void Espresso::MetalLowmemEngine::pool_kernel::blob_options(int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  if (a2 == 1 && a1)
  {
    uint64_t v5 = operator new(0x70uLL);
    v5[1] = 0;
    void v5[2] = 0;
    void *v5 = &unk_1EE388F48;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v5[3] = &unk_1EE3661F8;
    *((_DWORD *)v5 + 12) = 1065353216;
    v5[7] = 0x1FFFFFFFFLL;
    v5[12] = 0;
    v5[13] = 0;
    v5[8] = 0;
    v5[9] = 0;
    *((unsigned char *)v5 + 88) = 0;
    v5[10] = 0;
    *a3 = v5 + 3;
    a3[1] = v5;
    *((unsigned char *)v5 + 32) = 1;
    *((_DWORD *)v5 + 9) = 3;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::abstract_blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MetalLowmemEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, int32x2_t ***a3, int32x2_t ***a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = **a4;
  __int32 v9 = v8[2].i32[1];
  if (v8[3].i32[0] <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = v8[3].i32[0];
  }
  int32x2_t v63 = v8[1];
  if (*(_WORD *)(a1 + 372)) {
    int v11 = *(unsigned __int16 *)(a1 + 372);
  }
  else {
    int v11 = v8[2].i32[0];
  }
  if (v12 && (char v13 = (std::__shared_weak_count *)v7[1]) != 0)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    id v64 = v12[21];
    nitro::nitro_function::nitro_function(v13);
  }
  else
  {
    id v64 = v12[21];
  }
  int v14 = v10 * v9;
  std::string v15 = (const void **)*a3;
  long long v17 = (std::__shared_weak_count *)v15[1];
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    id v18 = v16[21];
    nitro::nitro_function::nitro_function(v17);
  }
  else
  {
    id v18 = v16[21];
  }
  uint64_t v19 = (int *)(a1 + 304);
  int v20 = *(id **)(a1 + 8);
  id v21 = *(id *)(*(void *)a2 + 152);
  int32x2_t v22 = (**a3)[1];
  int32x2_t v65 = v22;
  if (*(_DWORD *)(a1 + 388) == v14
    && *(_DWORD *)(a1 + 400) == v63.i32[0]
    && *(void *)(a1 + 404) == __PAIR64__(v11, v63.u32[1])
    && *(void *)(a1 + 432)
    && *(void *)(a1 + 380) == *(void *)&v22)
  {
    goto LABEL_33;
  }
  *(int32x2_t *)(a1 + 400) = v63;
  *(_DWORD *)(a1 + 408) = v11;
  int v23 = *(__int16 *)(a1 + 340);
  if (v23 == 4) {
    goto LABEL_22;
  }
  if (v23 == 2)
  {
    int32x2_t v27 = 0;
LABEL_25:
    int32x2_t v24 = v65;
    goto LABEL_26;
  }
  if (v23 != 1)
  {
    v22.i16[0] = *(_WORD *)(a1 + 348);
    v22.i16[2] = *(_WORD *)(a1 + 352);
    int32x2_t v27 = vshr_n_s32(vshl_n_s32(v22, 0x10uLL), 0x10uLL);
    goto LABEL_25;
  }
LABEL_22:
  int32x2_t v24 = v22;
  int32x2_t v25 = vmax_s32(vmla_s32(vsub_s32(*(int32x2_t *)(a1 + 308), v63), *(int32x2_t *)(a1 + 320), vadd_s32(v22, (int32x2_t)-1)), 0);
  int32x2_t v26 = (int32x2_t)vshr_n_u32((uint32x2_t)v25, 1uLL);
  int32x2_t v27 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 340) == 1), 0x1FuLL)), (int8x8_t)v26, (int8x8_t)vsub_s32(v25, v26));
LABEL_26:
  *(int32x2_t *)(a1 + 392) = v27;
  *(int32x2_t *)(a1 + 380) = v24;
  *(_DWORD *)(a1 + 388) = v14;
  int v28 = v11 - 1;
  if (v11 < 1) {
    int v28 = v11 + 2;
  }
  *(_DWORD *)(a1 + 412) = (v28 >> 2) + 1;
  if (!*(_WORD *)(a1 + 368)) {
    *(_WORD *)(a1 + 368) = v11;
  }
  if (!*(_WORD *)(a1 + 370)) {
    *(_WORD *)(a1 + 370) = v11;
  }
  uint64_t v29 = objc_msgSend(v20[18], "newBufferWithBytes:length:options:", a1 + 304, 112, 0, *(void *)&v63);
  uint64_t v30 = *(void **)(a1 + 432);
  *(void *)(a1 + 432) = v29;

LABEL_33:
  int v31 = *v19;
  if (*v19 == 2)
  {
    if ([v18 pixelFormat] != 115)
    {
      if ([v18 pixelFormat] == 125)
      {
        std::string v32 = "l2_pool_f32_pack";
        goto LABEL_57;
      }
      if ([v18 pixelFormat] != 72) {
        goto LABEL_94;
      }
    }
    std::string v32 = "l2_pool_f16_pack";
    goto LABEL_57;
  }
  if (v31 != 1)
  {
    if (v31) {
      goto LABEL_94;
    }
    if ([v18 pixelFormat] != 115)
    {
      if ([v18 pixelFormat] == 125)
      {
        std::string v32 = "avg_pool_f32_pack";
LABEL_57:
        uint64_t v35 = objc_msgSend(v20[20], "kernelForFunction:cacheString:withConstants:", v32, 0, 0, *(void *)&v63);
        BOOL v33 = 0;
        goto LABEL_58;
      }
      if ([v18 pixelFormat] != 72) {
        goto LABEL_94;
      }
    }
    std::string v32 = "avg_pool_f16_pack";
    goto LABEL_57;
  }
  BOOL v33 = @"max_pool_f16_pack";
  if ([v18 pixelFormat] != 115)
  {
    if ([v18 pixelFormat] == 125)
    {
      BOOL v33 = @"max_pool_f32_pack";
    }
    else if ([v18 pixelFormat] == 72)
    {
      BOOL v33 = @"max_pool_f16_pack";
    }
    else
    {
      BOOL v33 = 0;
    }
  }
  int64_t v34 = (char *)a3[1] - (char *)*a3;
  if (*(_DWORD *)(a1 + 376) && v34 != 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v34 == 32)
  {
    BOOL v33 = [@"arg" stringByAppendingString:v33];
  }
  uint64_t v35 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v20, &v33->isa);
LABEL_58:
  if (!v35)
  {
LABEL_94:
    stat v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Kernel not found");
    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v36 = (void *)v35;
  [v21 setComputePipelineState:v35];
  [v21 setTexture:v18 atIndex:0];
  [v21 setTexture:v64 atIndex:1];
  char v37 = (const void **)*a3;
  if ((char *)a3[1] - (char *)*a3 == 32)
  {
    uint64_t v39 = (std::__shared_weak_count *)v37[3];
    if (v39)
    {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      id v40 = v38[21];
      nitro::nitro_function::nitro_function(v39);
    }
    else
    {
      id v40 = v38[21];
    }
    objc_msgSend(v21, "setTexture:atIndex:", v40, 2, *(void *)&v63);
    if ([v40 pixelFormat] != 124)
    {
      uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "Invalid texture");
      __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *(void *)(a1 + 432), 0, 0, *(void *)&v63);
  if (v65.i32[0] > 3 || v65.i32[1] > 3)
  {
    int v49 = v65.i32[1] - 1;
    if (v65.i32[0] > 11 || v65.i32[1] > 11)
    {
      __int32 v57 = v65.i32[0] - 1;
      int v58 = v11 - 1;
      if (v11 < 1) {
        int v58 = v11 + 2;
      }
      uint64_t v59 = v14 + v14 * (v58 >> 2);
      if (v65.i32[0] > 31 || v65.i32[1] > 31)
      {
        if (v49 < 0) {
          int v49 = v65.i32[1] + 14;
        }
        v67[0] = v57 / 16 + 1;
        v67[1] = (v49 >> 4) + 1;
        v67[2] = v59;
        uint64_t v66 = 16;
        int64x2_t v46 = (int64x2_t)xmmword_192DCA1C0;
        long long v47 = (int64x2_t *)v67;
        unint64_t v48 = &v66;
      }
      else
      {
        if (v49 < 0) {
          int v49 = v65.i32[1] + 6;
        }
        v69[0] = v57 / 8 + 1;
        v69[1] = (v49 >> 3) + 1;
        v69[2] = v59;
        uint64_t v68 = 8;
        int64x2_t v46 = (int64x2_t)xmmword_192DCA1D0;
        long long v47 = (int64x2_t *)v69;
        unint64_t v48 = &v68;
      }
    }
    else
    {
      int v50 = v65.i32[0] - 1;
      if (v65.i32[0] < 1) {
        int v50 = v65.i32[0] + 2;
      }
      uint64_t v51 = (v50 >> 2) + 1;
      if (v49 < 0) {
        int v49 = v65.i32[1] + 2;
      }
      uint64_t v52 = (v49 >> 2) + 1;
      int v53 = v11 - 1;
      if (v11 < 1) {
        int v53 = v11 + 2;
      }
      int v54 = v14 + v14 * (v53 >> 2);
      int v55 = v54 - 1;
      BOOL v43 = v54 < 1;
      int v56 = v54 + 2;
      if (!v43) {
        int v56 = v55;
      }
      v71[0] = v51;
      v71[1] = v52;
      v71[2] = (v56 >> 2) + 1;
      uint64_t v70 = 4;
      int64x2_t v46 = vdupq_n_s64(4uLL);
      long long v47 = (int64x2_t *)v71;
      unint64_t v48 = &v70;
    }
  }
  else
  {
    int v41 = v11 - 1;
    if (v11 < 1) {
      int v41 = v11 + 2;
    }
    int v42 = v14 + v14 * (v41 >> 2);
    int v44 = v42 - 1;
    BOOL v43 = v42 < 1;
    int v45 = v42 + 14;
    if (!v43) {
      int v45 = v44;
    }
    int64x2_t v73 = vdupq_n_s64(1uLL);
    uint64_t v74 = (v45 >> 4) + 1;
    uint64_t v72 = v65.i32[0];
    int64x2_t v46 = vdupq_n_s64(0x10uLL);
    v46.i64[0] = v65.i32[1];
    long long v47 = &v73;
    unint64_t v48 = &v72;
  }
  *(int64x2_t *)(v48 + 1) = v46;
  objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", v47);
}

void sub_19269DF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_free_exception(v15);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::pool_kernel::~pool_kernel(id *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::lrn_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_lrn_kernel::kernel_type_str(Espresso::generic_lrn_kernel *this)
{
  return "lrn";
}

uint64_t Espresso::base_kernel::supports_weight_key()
{
  return 0;
}

uint64_t Espresso::base_kernel::number_of_top_blobs(Espresso::base_kernel *this)
{
  return 1;
}

void Espresso::MetalLowmemEngine::lrn_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = **a3;
  if ((int)v7[6] <= 1) {
    int v8 = 1;
  }
  else {
    int v8 = v7[6];
  }
  int v10 = v7[2];
  int v9 = v7[3];
  int v11 = v7[4];
  int v35 = v7[5];
  int v36 = v8;
  unint64_t v12 = *a4;
  int v14 = (std::__shared_weak_count *)v12[1];
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    id v15 = v13[21];
    nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    id v15 = v13[21];
  }
  uint64_t v16 = *a3;
  id v18 = (std::__shared_weak_count *)v16[1];
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    id v19 = v17[21];
    nitro::nitro_function::nitro_function(v18);
  }
  else
  {
    id v19 = v17[21];
  }
  int v20 = *(id **)(a1 + 8);
  id v21 = *(id *)(*(void *)a2 + 152);
  if ([v19 pixelFormat] == 115 || objc_msgSend(v19, "pixelFormat") == 72)
  {
    int32x2_t v22 = @"f16";
  }
  else
  {
    [v19 pixelFormat];
    int32x2_t v22 = @"f32";
  }
  switch(*(_DWORD *)(a1 + 288))
  {
    case 5:
      int v23 = [NSString stringWithFormat:@"lrn_across_channel_%@_pack4_size_5", v22];
      uint64_t v24 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v20, v23);
      break;
    case 7:
      int v23 = [NSString stringWithFormat:@"lrn_across_channel_%@_pack4_size_7", v22];
      uint64_t v24 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v20, v23);
      break;
    default:
      int v23 = [NSString stringWithFormat:@"lrn_across_channel_%@_pack4", v22];
      uint64_t v24 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v20, v23);
      break;
  }
  int32x2_t v25 = (void *)v24;

  if (*(_DWORD *)(a1 + 300) != v10
    || *(_DWORD *)(a1 + 304) != v9
    || *(_DWORD *)(a1 + 292) != v11
    || !*(void *)(a1 + 312))
  {
    *(_DWORD *)(a1 + 300) = v10;
    *(_DWORD *)(a1 + 304) = v9;
    *(_DWORD *)(a1 + 292) = v11;
    int v26 = v11 - 1;
    if (v11 < 1) {
      int v26 = v11 + 2;
    }
    *(_DWORD *)(a1 + 296) = (v26 >> 2) + 1;
    uint64_t v27 = [v20[18] newBufferWithBytes:a1 + 280 length:28 options:0];
    int v28 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v27;
  }
  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v21 setComputePipelineState:v25];
  [v21 setTexture:v19 atIndex:0];
  [v21 setTexture:v15 atIndex:1];
  [v21 setBuffer:*(void *)(a1 + 312) offset:0 atIndex:0];
  int v29 = v10 - 1;
  if (v10 < 1) {
    int v29 = v10 + 14;
  }
  uint64_t v30 = (v29 >> 4) + 1;
  int v31 = v9 - 1;
  if (v9 < 1) {
    int v31 = v9 + 14;
  }
  uint64_t v32 = (v31 >> 4) + 1;
  int v33 = v11 - 1;
  if (v11 < 1) {
    int v33 = v11 + 2;
  }
  v39[0] = v30;
  v39[1] = v32;
  v39[2] = v36 * v35 + v36 * v35 * (v33 >> 2);
  int64x2_t v37 = vdupq_n_s64(0x10uLL);
  uint64_t v38 = 1;
  [v21 dispatchThreadgroups:v39 threadsPerThreadgroup:&v37];
}

void sub_19269E4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::lrn_kernel::~lrn_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::concat_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_concat_kernel::kernel_type_str(Espresso::generic_concat_kernel *this)
{
  return "concat";
}

BOOL Espresso::MetalLowmemEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 == a3[1])
  {
    BOOL v5 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1) {
        int v4 = 4;
      }
      else {
        int v4 = 5;
      }
    }
    BOOL v5 = v4 > 3;
  }
  return !*(unsigned char *)(a1 + 340) && v5;
}

void Espresso::MetalLowmemEngine::concat_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t **a4)
{
  int v4 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = a2;
    memset(v147, 0, 24);
    int v8 = *a4;
    if (a4[1] == *a4)
    {
      char v11 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      char v11 = 0;
      do
      {
        unint64_t v12 = &v8[v9];
        int v14 = (std::__shared_weak_count *)v12[1];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v15 = (*((_DWORD *)v13 + 4) & 3) != 0;
        id v16 = *((id *)v13 + 21);
        std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::push_back[abi:ne180100](v147, v16);

        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
        v11 |= v15;
        ++v10;
        int v8 = *a4;
        v9 += 2;
      }
      while (v10 < ((char *)a4[1] - (char *)*a4) >> 4);
      int v4 = *a3;
      uint64_t v6 = a2;
    }
    id v18 = (std::__shared_weak_count *)v4[1];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      id v130 = v17[21];
      nitro::nitro_function::nitro_function(v18);
    }
    else
    {
      id v130 = v17[21];
    }
    v125 = *(id **)(a1 + 8);
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v146, *v6);
    id v19 = v146[0];
    uint64_t v20 = **a4;
    int v127 = *(_DWORD *)(v20 + 8);
    int v128 = *(_DWORD *)(v20 + 12);
    id v21 = **a3;
    LODWORD(v22) = v21[6];
    if ((int)v22 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v22;
    }
    int v23 = v21[4];
    uint64_t v118 = v22 * (int)v21[5];
    if (v11)
    {
      uint64_t v24 = *(void *)(a1 + 368);
      for (uint64_t i = *(void *)(a1 + 376); i != v24; i -= 8)
      {
        int v26 = *(void **)(i - 8);
      }
      *(void *)(a1 + 376) = v24;
      v135 = [v125[20] kernelForFunction:"concat_kernel_singe_channel" cacheString:0 withConstants:0];
      if (v23 >= 1) {
        int v81 = v23 - 1;
      }
      else {
        int v81 = v23 + 2;
      }
      if (v23 >= -2)
      {
        BOOL v83 = v127 < 8 && v128 < 8;
        BOOL v126 = v83;
        int v84 = v127 - 1;
        int v85 = v128 - 1;
        if (v127 >= 1) {
          int v86 = v127 - 1;
        }
        else {
          int v86 = v127 + 14;
        }
        if (v127 < 1) {
          int v84 = v127 + 2;
        }
        if (v85 >= 0) {
          int v87 = v128 - 1;
        }
        else {
          int v87 = v128 + 14;
        }
        int v88 = v128 + 2;
        if (v85 >= 0) {
          int v88 = v128 - 1;
        }
        if (!v135)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Kernel not found");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v89 = 0;
        int v90 = 0;
        int v91 = 0;
        int v92 = v81 >> 2;
        uint64_t v124 = (v86 >> 4) + 1;
        int64x2_t v121 = vdupq_n_s64(0x10uLL);
        int64x2_t v122 = vdupq_n_s64(4uLL);
        uint64_t v119 = (v87 >> 4) + 1;
        int v132 = v92 + 1;
        uint64_t v115 = (v88 >> 2) + 1;
        uint64_t v117 = (v84 >> 2) + 1;
        int v93 = v92 & ~(v92 >> 31);
        do
        {
          [v19 setComputePipelineState:v135];
          [v19 setTexture:v130 atIndex:0];
          uint64_t v94 = 0;
          *(_DWORD *)(a1 + 312) = v89;
          *(_DWORD *)(a1 + 316) = v132;
          *(_DWORD *)(a1 + 308) = v128;
          *(_DWORD *)(a1 + 304) = v127;
          do
          {
            int v95 = *(_DWORD *)((*a4)[2 * v91] + 16);
            *(_DWORD *)(a1 + 324 + 4 * v94) = v90;
            switch((int)v94)
            {
              case 0:
                int v96 = v95 - 1;
                if (v95 < 1) {
                  int v96 = v95 + 2;
                }
                *(_DWORD *)(a1 + 288) = (v96 >> 2) + 1;
                break;
              case 1:
                int v99 = v95 - 1;
                if (v95 < 1) {
                  int v99 = v95 + 2;
                }
                *(_DWORD *)(a1 + 292) = (v99 >> 2) + 1;
                break;
              case 2:
                int v97 = v95 - 1;
                if (v95 < 1) {
                  int v97 = v95 + 2;
                }
                *(_DWORD *)(a1 + 296) = (v97 >> 2) + 1;
                break;
              case 3:
                int v98 = v95 - 1;
                if (v95 < 1) {
                  int v98 = v95 + 2;
                }
                *(_DWORD *)(a1 + 300) = (v98 >> 2) + 1;
                break;
              default:
                break;
            }
            [v19 setTexture:*(void *)&v147[0][8 * v91] atIndex:++v94];
            if (++v90 >= v95)
            {
              uint64_t v100 = (char *)a4[1] - (char *)*a4;
              if (v91 + 1 < (unint64_t)(v100 >> 4)) {
                ++v91;
              }
              else {
                int v91 = ((unint64_t)v100 >> 4) - 1;
              }
              int v90 = 0;
            }
          }
          while (v94 != 4);
          [v19 setBytes:a1 + 280 length:64 atIndex:0];
          if (v126)
          {
            v145[0] = v117;
            v145[1] = v115;
            v145[2] = v118;
            char v101 = &v144;
            int v102 = v145;
            int64x2_t v144 = v122;
          }
          else
          {
            v143[0] = v124;
            v143[1] = v119;
            v143[2] = v118;
            char v101 = &v142;
            int v102 = v143;
            int64x2_t v142 = v121;
          }
          v101[1].i64[0] = 1;
          objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", v102);
          BOOL v45 = v89++ == v93;
        }
        while (!v45);
      }

      goto LABEL_143;
    }
    uint64_t v27 = (char *)a4[1] - (char *)*a4;
    if (!v27)
    {
LABEL_143:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)v146);
      v146[0] = (void **)v147;
      std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](v146);
      return;
    }
    unint64_t v131 = 0;
    int v28 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = v27 >> 4;
    uint64_t v31 = a1 + 368;
    int v32 = v23 - 1;
    if (v23 < 1) {
      int v32 = v23 + 2;
    }
    int v33 = (v32 >> 2) + 1;
    BOOL v34 = v127 < 4 && v128 < 4;
    int v35 = v34;
    int v113 = v35;
    int v114 = v33;
    BOOL v37 = v127 < 8 && v128 < 8;
    BOOL v112 = v37;
    int v38 = v127 - 1;
    int v39 = v127 + 14;
    int v40 = v128 - 1;
    if (v127 >= 1) {
      int v39 = v127 - 1;
    }
    uint64_t v110 = (v39 >> 4) + 1;
    int v41 = v128 + 14;
    if (v127 < 1) {
      int v38 = v127 + 2;
    }
    if (v40 >= 0) {
      int v41 = v128 - 1;
    }
    uint64_t v108 = (v38 >> 2) + 1;
    uint64_t v109 = (v41 >> 4) + 1;
    int v42 = v128 + 2;
    if (v40 >= 0) {
      int v42 = v128 - 1;
    }
    int64x2_t v111 = vdupq_n_s64(1uLL);
    int64x2_t v106 = vdupq_n_s64(0x10uLL);
    int64x2_t v107 = vdupq_n_s64(4uLL);
    uint64_t v105 = (v42 >> 2) + 1;
    while (1)
    {
      BOOL v43 = *a4;
      int v44 = *(_DWORD *)((*a4)[2 * v29] + 16);
      if (v29) {
        BOOL v45 = 1;
      }
      else {
        BOOL v45 = *(unsigned __int16 *)(a1 + 320) == 0;
      }
      if (!v45) {
        int v44 = *(unsigned __int16 *)(a1 + 320);
      }
      int v46 = v44 - 1;
      BOOL v34 = v44 < 1;
      int v47 = v44 + 2;
      if (!v34) {
        int v47 = v46;
      }
      int v48 = (v47 >> 2) + 1;
      *(_DWORD *)(a1 + 288) = v48;
      int v49 = v48 + v28;
      if (v30 == 1)
      {
        int v50 = 0;
        uint64_t v51 = 1;
      }
      else
      {
        uint64_t v52 = &v43[2 * v29];
        int v53 = *(_DWORD *)(v52[2] + 16);
        int v54 = v53 - 1;
        BOOL v34 = v53 < 1;
        int v55 = v53 + 2;
        if (!v34) {
          int v55 = v54;
        }
        int v56 = (v55 >> 2) + 1;
        *(_DWORD *)(a1 + 292) = v56;
        v49 += v56;
        if (v30 < 3)
        {
          uint64_t v123 = 2;
          int v50 = 1;
          goto LABEL_63;
        }
        int v57 = *(_DWORD *)(v52[4] + 16);
        int v58 = v57 - 1;
        BOOL v34 = v57 < 1;
        int v59 = v57 + 2;
        if (!v34) {
          int v59 = v58;
        }
        int v60 = (v59 >> 2) + 1;
        *(_DWORD *)(a1 + 296) = v60;
        v49 += v60;
        if (v30 == 3)
        {
          int v50 = 0;
          uint64_t v51 = 3;
        }
        else
        {
          int v50 = 0;
          int v77 = *(_DWORD *)(v43[2 * v29 + 6] + 16);
          int v78 = v77 - 1;
          BOOL v34 = v77 < 1;
          int v79 = v77 + 2;
          if (!v34) {
            int v79 = v78;
          }
          int v80 = (v79 >> 2) + 1;
          *(_DWORD *)(a1 + 300) = v80;
          v49 += v80;
          uint64_t v51 = 4;
        }
      }
      uint64_t v123 = v51;
LABEL_63:
      uint64_t v61 = *(void *)(a1 + 368);
      if (v131 >= (*(void *)(a1 + 376) - v61) >> 3)
      {
        unint64_t v62 = v30;
        int v63 = v49;
        id v64 = (uint64_t *)v31;
        std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize(v31, v131 + 1);
        uint64_t v61 = *v64;
        int v49 = v63;
        unint64_t v30 = v62;
      }
      id v134 = *(id *)(v61 + 8 * v131);
      int v129 = v49 - v28;
      if (v114 != *(_DWORD *)(a1 + 284) || !v134 || *(_DWORD *)(a1 + 308) != v128 || *(_DWORD *)(a1 + 304) != v127)
      {
        *(_DWORD *)(a1 + 312) = v28;
        *(_DWORD *)(a1 + 284) = v129;
        *(_DWORD *)(a1 + 308) = v128;
        *(_DWORD *)(a1 + 304) = v127;
        int v65 = *((_DWORD *)**a3 + 4);
        int v66 = v65 - 1;
        BOOL v34 = v65 < 1;
        int v67 = v65 + 2;
        if (!v34) {
          int v67 = v66;
        }
        *(_DWORD *)(a1 + 316) = (v67 >> 2) + 1;
        uint64_t v68 = (void *)[v125[18] newBufferWithBytes:a1 + 280 length:64 options:0];

        objc_storeStrong((id *)(*(void *)(a1 + 368) + 8 * v131), v68);
        id v134 = v68;
      }
      int v120 = v49;
      if (v50)
      {
        unsigned int v69 = v123;
        if ([v130 pixelFormat] == 125) {
          uint64_t v70 = "concat_kernel_f32";
        }
        else {
          uint64_t v70 = "concat_kernel_f16";
        }
        char v71 = [v125[20] kernelForFunction:v70 cacheString:0 withConstants:0];
      }
      else
      {
        unsigned int v69 = v123;
        if ([v130 pixelFormat] == 125) {
          objc_msgSend(NSString, "stringWithFormat:", @"concat_kernel_f32_%dinputs", v123);
        }
        else {
          objc_msgSend(NSString, "stringWithFormat:", @"concat_kernel_f16_%dinputs", v123);
        }
        uint64_t v72 = (NSString *)objc_claimAutoreleasedReturnValue();
        char v71 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v125, v72);
      }
      if (!v71)
      {
        unsigned __int8 v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v103, "Kernel not found");
        __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      [v19 setComputePipelineState:v71];
      [v19 setTexture:v130 atIndex:0];
      for (uint64_t j = 0; v69 != j; [v19 setTexture:v74 atIndex:j])
        uint64_t v74 = *(void *)&v147[0][8 * v29 + 8 * j++];
      [v19 setBuffer:v134 offset:0 atIndex:0];
      if (v113)
      {
        v141[0] = v127;
        v141[1] = v128;
        v141[2] = v129 * (int)v118;
        int v75 = &v140;
        uint64_t v76 = v141;
        int64x2_t v140 = v111;
      }
      else if (v112)
      {
        v139[0] = v108;
        v139[1] = v105;
        v139[2] = v129 * (int)v118;
        int v75 = &v138;
        uint64_t v76 = v139;
        int64x2_t v138 = v107;
      }
      else
      {
        v137[0] = v110;
        v137[1] = v109;
        v137[2] = v129 * (int)v118;
        int v75 = &v136;
        uint64_t v76 = v137;
        int64x2_t v136 = v106;
      }
      v75[1].i64[0] = 1;
      objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", v76);
      ++v131;
      v29 += v69;
      v30 -= v69;

      int v28 = v120;
      uint64_t v31 = a1 + 368;
      if (!v30) {
        goto LABEL_143;
      }
    }
  }
}

void sub_19269F100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v41 - 128));
  *(void *)(v41 - 128) = v41 - 112;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 128));
  _Unwind_Resume(a1);
}

uint64_t Espresso::temporary_mtl_encoder::temporary_mtl_encoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  objc_storeStrong((id *)a1, *(id *)(a2 + 152));
  if (!*(void *)a1)
  {
    uint64_t v4 = [*(id *)(a2 + 144) computeCommandEncoder];
    id v5 = *(id *)a1;
    *(void *)a1 = v4;

    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void sub_19269F224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::push_back[abi:ne180100](char **a1, void *a2)
{
  id v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v11 = (char *)operator new(8 * v10);
    }
    else
    {
      char v11 = 0;
    }
    unint64_t v12 = &v11[8 * v7];
    char v13 = &v11[8 * v10];
    *(void *)unint64_t v12 = a2;
    uint64_t v6 = v12 + 8;
    BOOL v15 = *a1;
    int v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)int v14 = 0;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    id v19 = (char *)v17.i64[1];
    id v18 = (char *)v17.i64[0];
    while (v19 != v18)
    {
      uint64_t v20 = (void *)*((void *)v19 - 1);
      v19 -= 8;
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *(void *)id v5 = a2;
    uint64_t v6 = v5 + 8;
  }
  a1[1] = v6;
}

void std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      int64x2_t v17 = &v4[a2];
      while (v3 != v17)
      {
        id v18 = (void *)*--v3;
      }
      *(void *)(a1 + 8) = v17;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    uint64_t v7 = *(void *)(a1 + 16);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*(void **)(a1 + 8), 8 * v6);
      *(void *)(a1 + 8) = &v3[v6];
    }
    else
    {
      if (a2 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = v7 - (void)v4;
      uint64_t v9 = v8 >> 2;
      if (v8 >> 2 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v11 = (char *)operator new(8 * v10);
      unint64_t v12 = &v11[8 * v5];
      char v13 = &v11[8 * v10];
      bzero(v12, 8 * v6);
      int v14 = &v12[8 * v6];
      if (v3 == v4)
      {
        int64x2_t v16 = vdupq_n_s64((unint64_t)v3);
      }
      else
      {
        do
        {
          uint64_t v15 = *--v3;
          void *v3 = 0;
          *((void *)v12 - 1) = v15;
          v12 -= 8;
        }
        while (v3 != v4);
        int64x2_t v16 = *(int64x2_t *)a1;
      }
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v13;
      uint64_t v20 = (char *)v16.i64[1];
      id v19 = (char *)v16.i64[0];
      while (v20 != v19)
      {
        id v21 = (void *)*((void *)v20 - 1);
        v20 -= 8;
      }
      if (v19)
      {
        operator delete(v19);
      }
    }
  }
}

void Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(id *this)
{
  if (*((unsigned char *)this + 8)) {
    [*this endEncoding];
  }
}

void std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::MetalLowmemEngine::concat_kernel::~concat_kernel(Espresso::MetalLowmemEngine::concat_kernel *this)
{
  *(void *)this = &unk_1EE348A70;
  uint64_t v3 = (void **)((char *)this + 368);
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE348A70;
  uint64_t v3 = (void **)((char *)this + 368);
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

const char *Espresso::generic_elementwise_kernel::kernel_type_str(Espresso::generic_elementwise_kernel *this)
{
  return "elementwise";
}

void Espresso::MetalLowmemEngine::elementwise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v191, *a2);
  id v178 = v191[0];
  uint64_t v8 = *a4;
  unint64_t v9 = (char *)a4[1] - (char *)*a4;
  __int16 v190 = v9 >> 4;
  unint64_t v10 = *a3;
  char v11 = **a3;
  if (v11)
  {
    if (v12 && (char v13 = (atomic_ullong *)v10[1]) != 0)
    {
      uint64_t v169 = (std::__shared_weak_count *)v10[1];
      atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
      uint64_t v8 = *a4;
    }
    else
    {
      uint64_t v169 = 0;
    }
  }
  else
  {
    uint64_t v169 = 0;
    unint64_t v12 = 0;
  }
  int v14 = v178;
  if (!*v8
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int64x2_t v16 = v15;
  int64x2_t v17 = (std::__shared_weak_count *)v8[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v168 = v17;
  if (!v12)
  {
    uint64_t v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v165, "Inconsistent state");
    __cxa_throw(v165, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v18 = v15[21];
  id v175 = v12[21];
  if ((unsigned __int16)(v9 >> 4) != 1)
  {
    id v21 = *a4;
    uint64_t v22 = **a4;
    uint64_t v173 = a3;
    uint64_t v167 = v16;
    if (v22)
    {
      if (v23 && (uint64_t v24 = (atomic_ullong *)v21[1]) != 0)
      {
        uint64_t v176 = (std::__shared_weak_count *)v21[1];
        atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
        id v21 = *a4;
      }
      else
      {
        uint64_t v176 = 0;
      }
    }
    else
    {
      uint64_t v176 = 0;
      int v23 = 0;
    }
    int32x2_t v25 = a4;
    int v26 = v21[2];
    if (v26)
    {
      if (v27)
      {
        int v28 = (std::__shared_weak_count *)v21[3];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          id v21 = *v25;
        }
LABEL_28:
        if ((char *)v25[1] - (char *)v21 == 32 && ((unsigned int v29 = *(_DWORD *)(a1 + 280), v29 < 0xA) || v29 - 29 <= 3))
        {
          uint64_t v30 = v7;
          Espresso::abstract_blob_container::shape((char *)&v185, (uint64_t)v23);
          id v31 = v18;
          uint64_t v32 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v185);
          Espresso::abstract_blob_container::shape((char *)&v182, (uint64_t)v27);
          uint64_t v33 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v182);
          if (__p)
          {
            v184 = __p;
            operator delete(__p);
          }
          if (v188)
          {
            uint64_t v189 = v188;
            operator delete(v188);
          }
          if (v32 >= v33)
          {
            HIDWORD(v170) = 0;
            BOOL v34 = v27;
            int v35 = v28;
          }
          else
          {
            HIDWORD(v170) = 1;
            BOOL v34 = v23;
            int v35 = v176;
            uint64_t v176 = v28;
            int v23 = v27;
          }
          id v18 = v31;
          uint64_t v7 = v30;
        }
        else
        {
          HIDWORD(v170) = 0;
          BOOL v34 = v27;
          int v35 = v28;
        }
        uint64_t v36 = v23[6];
        if ((int)v36 <= 1) {
          int v37 = 1;
        }
        else {
          int v37 = v23[6];
        }
        signed int v38 = v34[6];
        if (v38 <= 1) {
          int v39 = 1;
        }
        else {
          int v39 = v34[6];
        }
        uint64_t v40 = v34[2];
        uint64_t v41 = v23[2];
        int v14 = v178;
        a4 = v25;
        if (*((void *)v34 + 1) == *((void *)v23 + 1) && v34[4] == v23[4] && v34[5] == v23[5] && v37 == v39)
        {
          LODWORD(v170) = 0;
          a3 = v173;
          int64x2_t v16 = v167;
          goto LABEL_99;
        }
        unsigned int v42 = v34[4];
        a3 = v173;
        if (v42 == 1 && v40 == v41 && v34[5] * v39 == 1 && v34[3] == v23[3])
        {
          int v49 = *(_DWORD *)(a1 + 280);
          int64x2_t v16 = v167;
          int v44 = v176;
          if (v49 != 1)
          {
            if (!v49)
            {
              LODWORD(v170) = 0;
              int v45 = 4;
              goto LABEL_134;
            }
LABEL_131:
            LODWORD(v170) = 0;
            if (!v35) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          LODWORD(v170) = 0;
          int v45 = 7;
LABEL_134:
          *(_DWORD *)(a1 + 280) = v45;
          if (!v35)
          {
LABEL_101:
            if (v44) {
              nitro::nitro_function::nitro_function(v44);
            }
            goto LABEL_103;
          }
LABEL_100:
          nitro::nitro_function::nitro_function(v35);
          goto LABEL_101;
        }
        if (v40 == 1 && v34[3] == 1 && v34[5] * v39 == 1 && v42 == v23[4])
        {
          int v43 = *(_DWORD *)(a1 + 280);
          int64x2_t v16 = v167;
          if (v43 != 1)
          {
            int v44 = v176;
            if (!v43)
            {
              LODWORD(v170) = 0;
              int v45 = 5;
              goto LABEL_134;
            }
            goto LABEL_131;
          }
          LODWORD(v170) = 0;
          int v74 = 8;
        }
        else
        {
          unsigned int v46 = v34[5];
          int64x2_t v16 = v167;
          if (v40 != v41 || v46 * v39 != 1 || v34[3] != v23[3] || v42 != v23[4])
          {
            if (v40 == 1 && v34[3] == 1 && v42 == 1)
            {
              if (v46 * v38 == v23[5] * v36)
              {
                int v48 = *(_DWORD *)(a1 + 280);
                if (v48 != 1)
                {
                  int v44 = v176;
                  if (!v48)
                  {
                    LODWORD(v170) = 0;
                    int v45 = 29;
                    goto LABEL_134;
                  }
                  goto LABEL_131;
                }
                LODWORD(v170) = 0;
                int v74 = 30;
                goto LABEL_198;
              }
              if (v46 == 1 && v38 == 1)
              {
                int v50 = *(_DWORD *)(a1 + 280);
                if (v50 != 1)
                {
                  int v44 = v176;
                  if (v50) {
                    goto LABEL_131;
                  }
                  LODWORD(v170) = 0;
                  int v45 = 31;
                  goto LABEL_134;
                }
                LODWORD(v170) = 0;
                int v74 = 32;
                goto LABEL_198;
              }
            }
            if (*(_DWORD *)(a1 + 280) > 1u
              || v190 != 2
              || v40 != 1 && v40 != v41 && v41 != 1
              || (unsigned int v51 = v34[3], v51 != 1) && (v52 = v23[3], v52 != 1) && v52 != v51
              || v23[4] != v42
              || v23[5] != v46
              || v36 != v38)
            {
              Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("[%d,%d,%d,%d,%d], [%d,%d,%d,%d,%d]", v41, v23[3], v23[5], v23[4], v36, v40, v34[3], v46, v42, v38);
            }
            LODWORD(v170) = 1;
LABEL_99:
            int v44 = v176;
            if (!v35) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v47 = *(_DWORD *)(a1 + 280);
          if (v47 != 1)
          {
            int v44 = v176;
            if (!v47)
            {
              LODWORD(v170) = 0;
              int v45 = 6;
              goto LABEL_134;
            }
            goto LABEL_131;
          }
          LODWORD(v170) = 0;
          int v74 = 9;
        }
LABEL_198:
        *(_DWORD *)(a1 + 280) = v74;
        goto LABEL_99;
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    int v28 = 0;
    goto LABEL_28;
  }
  int v19 = *(_DWORD *)(a1 + 280);
  if (v19 == 1)
  {
    uint64_t v170 = 0;
    int v20 = 3;
    goto LABEL_39;
  }
  if (!v19)
  {
    uint64_t v170 = 0;
    int v20 = 2;
LABEL_39:
    *(_DWORD *)(a1 + 280) = v20;
    goto LABEL_103;
  }
  uint64_t v170 = 0;
LABEL_103:
  int v53 = **a3;
  int v172 = v53[2];
  int v174 = v53[3];
  int v54 = v53[4];
  int v55 = v53[5];
  int v56 = v53[6];
  if (v56 <= 1) {
    int v56 = 1;
  }
  int v177 = v56 * v55;
  int v58 = v54 - 1;
  BOOL v57 = v54 < 1;
  int v59 = v54 + 2;
  if (v57) {
    int v58 = v59;
  }
  int v60 = (_DWORD *)(a1 + 280);
  int v171 = (v58 >> 2) + 1;
  if (v171 != *(_DWORD *)(a1 + 308)
    || *(_DWORD *)(a1 + 312) != v177
    || !*(void *)(a1 + 360)
    || *(_DWORD *)(a1 + 320) != v174
    || *(_DWORD *)(a1 + 316) != v172)
  {
    *(_DWORD *)(a1 + 316) = v172;
    *(_DWORD *)(a1 + 320) = v174;
    *(_DWORD *)(a1 + 308) = v171;
    *(_DWORD *)(a1 + 312) = v177;
    if (((*((unsigned int (**)(id *))*v12 + 4))(v12) == 2
       || (*((unsigned int (**)(id *))*v12 + 4))(v12) == 4)
      && *v60 == 3)
    {
      *(float *)(a1 + 288) = *(float *)(a1 + 288) * (float)(*((float *)v12 + 28) / *((float *)v16 + 28));
    }
    uint64_t v61 = [*(id *)(v7 + 144) newBufferWithBytes:a1 + 280 length:52 options:0];
    unint64_t v62 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v61;
  }
  if (!*(void *)(a1 + 368))
  {
    int v63 = (MTLFunctionConstantValues *)objc_opt_new();
    [(MTLFunctionConstantValues *)v63 setConstantValue:&v190 type:37 atIndex:0];
    id v64 = (void **)(a1 + 368);
    switch(*v60)
    {
      case 0:
        if (v170)
        {
          std::to_string(&v182, v190);
          int v65 = std::string::insert(&v182, 0, "ELEM_ADD-");
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          *(void *)v186 = *((void *)&v65->__r_.__value_.__l + 2);
          long long v185 = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
          uint64_t v67 = [v175 pixelFormat];
          if (v186[7] >= 0) {
            uint64_t v68 = (const char *)&v185;
          }
          else {
            uint64_t v68 = (const char *)v185;
          }
          if (v67 == 125) {
            unsigned int v69 = "elementwise_add_broadcast_f32_pack4";
          }
          else {
            unsigned int v69 = "elementwise_add_broadcast_f16_pack4";
          }
        }
        else
        {
          std::to_string(&v182, v190);
          int v129 = std::string::insert(&v182, 0, "ELEM_ADD-");
          long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          *(void *)v186 = *((void *)&v129->__r_.__value_.__l + 2);
          long long v185 = v130;
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
          uint64_t v131 = [v175 pixelFormat];
          if (v186[7] >= 0) {
            uint64_t v68 = (const char *)&v185;
          }
          else {
            uint64_t v68 = (const char *)v185;
          }
          if (v131 == 125) {
            unsigned int v69 = "elementwise_add_f32_pack4";
          }
          else {
            unsigned int v69 = "elementwise_add_f16_pack4";
          }
        }
        uint64_t v132 = Espresso::context_metal::kernel_for_function(*(Espresso::context_metal **)(v7 + 160), v69, v68, v63);
        double v133 = *v64;
        *id v64 = (void *)v132;

        if ((v186[7] & 0x80000000) != 0) {
          operator delete((void *)v185);
        }
        goto LABEL_242;
      case 1:
        if (v170)
        {
          uint64_t v95 = [v175 pixelFormat];
          int v96 = *(void **)(v7 + 160);
          if (v95 == 125) {
            [v96 kernelForFunction:"elementwise_mul_broadcast_f32_pack4" cacheString:0 withConstants:0];
          }
          else {
            [v96 kernelForFunction:"elementwise_mul_broadcast_f16_pack4" cacheString:0 withConstants:0];
          }
        }
        else
        {
          uint64_t v134 = [v175 pixelFormat];
          v135 = *(void **)(v7 + 160);
          if (v134 == 125) {
            [v135 kernelForFunction:"elementwise_mul_f32_pack4" cacheString:0 withConstants:0];
          }
          else {
            [v135 kernelForFunction:"elementwise_mul_f16_pack4" cacheString:0 withConstants:0];
          }
        }
        goto LABEL_211;
      case 2:
        uint64_t v101 = [v175 pixelFormat];
        int v102 = *(void **)(v7 + 160);
        if (v101 == 125) {
          [v102 kernelForFunction:"elementwise_addc_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v102 kernelForFunction:"elementwise_addc_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 3:
        uint64_t v113 = [v175 pixelFormat];
        int v114 = *(void **)(v7 + 160);
        if (v113 == 125) {
          [v114 kernelForFunction:"elementwise_mulc_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v114 kernelForFunction:"elementwise_mulc_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 4:
        uint64_t v105 = [v175 pixelFormat];
        int64x2_t v106 = *(void **)(v7 + 160);
        if (v105 == 125) {
          [v106 kernelForFunction:"elementwise_add_xy_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v106 kernelForFunction:"elementwise_add_xy_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 5:
        uint64_t v111 = [v175 pixelFormat];
        BOOL v112 = *(void **)(v7 + 160);
        if (v111 == 125) {
          [v112 kernelForFunction:"elementwise_add_k_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v112 kernelForFunction:"elementwise_add_k_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 6:
        uint64_t v109 = [v175 pixelFormat];
        uint64_t v110 = *(void **)(v7 + 160);
        if (v109 == 125) {
          [v110 kernelForFunction:"elementwise_add_xyk_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v110 kernelForFunction:"elementwise_add_xyk_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 7:
        uint64_t v107 = [v175 pixelFormat];
        uint64_t v108 = *(void **)(v7 + 160);
        if (v107 == 125) {
          [v108 kernelForFunction:"elementwise_mul_xy_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v108 kernelForFunction:"elementwise_mul_xy_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 8:
        uint64_t v93 = [v175 pixelFormat];
        uint64_t v94 = *(void **)(v7 + 160);
        if (v93 == 125) {
          [v94 kernelForFunction:"elementwise_mul_k_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v94 kernelForFunction:"elementwise_mul_k_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 9:
        uint64_t v89 = [v175 pixelFormat];
        int v90 = *(void **)(v7 + 160);
        if (v89 == 125) {
          [v90 kernelForFunction:"elementwise_mul_xyk_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v90 kernelForFunction:"elementwise_mul_xyk_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0xA:
        uint64_t v91 = [v175 pixelFormat];
        int v92 = *(void **)(v7 + 160);
        if (v91 == 125) {
          [v92 kernelForFunction:"elementwise_inverse_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v92 kernelForFunction:"elementwise_inverse_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0xB:
        uint64_t v85 = [v175 pixelFormat];
        int v86 = *(void **)(v7 + 160);
        if (v85 == 125) {
          [v86 kernelForFunction:"elementwise_sqrt_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v86 kernelForFunction:"elementwise_sqrt_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0xC:
        uint64_t v119 = [v175 pixelFormat];
        int v120 = *(void **)(v7 + 160);
        if (v119 == 125) {
          [v120 kernelForFunction:"elementwise_rsqrt_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v120 kernelForFunction:"elementwise_rsqrt_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0xD:
        uint64_t v99 = [v175 pixelFormat];
        uint64_t v100 = *(void **)(v7 + 160);
        if (v99 == 125) {
          [v100 kernelForFunction:"elementwise_pow_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v100 kernelForFunction:"elementwise_pow_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x1C:
        goto LABEL_242;
      case 0x16:
        uint64_t v77 = [v175 pixelFormat];
        int v78 = *(void **)(v7 + 160);
        if (v77 == 125) {
          [v78 kernelForFunction:"elementwise_min_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v78 kernelForFunction:"elementwise_min_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x17:
        uint64_t v83 = [v175 pixelFormat];
        int v84 = *(void **)(v7 + 160);
        if (v83 == 125) {
          [v84 kernelForFunction:"elementwise_max_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v84 kernelForFunction:"elementwise_max_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x18:
        uint64_t v97 = [v175 pixelFormat];
        int v98 = *(void **)(v7 + 160);
        if (v97 == 125) {
          [v98 kernelForFunction:"elementwise_abs_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v98 kernelForFunction:"elementwise_abs_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x19:
        uint64_t v115 = [v175 pixelFormat];
        int v116 = *(void **)(v7 + 160);
        if (v115 == 125) {
          [v116 kernelForFunction:"elementwise_threshold_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v116 kernelForFunction:"elementwise_threshold_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x1A:
        uint64_t v117 = [v175 pixelFormat];
        uint64_t v118 = *(void **)(v7 + 160);
        if (v117 == 125) {
          [v118 kernelForFunction:"elementwise_log_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v118 kernelForFunction:"elementwise_log_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x1B:
        uint64_t v103 = [v175 pixelFormat];
        size_t v104 = *(void **)(v7 + 160);
        if (v103 == 125) {
          [v104 kernelForFunction:"elementwise_exp_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v104 kernelForFunction:"elementwise_exp_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x1D:
        uint64_t v87 = [v175 pixelFormat];
        int v88 = *(void **)(v7 + 160);
        if (v87 == 125) {
          [v88 kernelForFunction:"elementwise_add_n_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v88 kernelForFunction:"elementwise_add_n_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x1E:
        uint64_t v75 = [v175 pixelFormat];
        uint64_t v76 = *(void **)(v7 + 160);
        if (v75 == 125) {
          [v76 kernelForFunction:"elementwise_mul_n_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v76 kernelForFunction:"elementwise_mul_n_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x1F:
        uint64_t v81 = [v175 pixelFormat];
        std::string v82 = *(void **)(v7 + 160);
        if (v81 == 125) {
          [v82 kernelForFunction:"elementwise_add_scalar_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v82 kernelForFunction:"elementwise_add_scalar_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      case 0x20:
        uint64_t v79 = [v175 pixelFormat];
        int v80 = *(void **)(v7 + 160);
        if (v79 == 125) {
          [v80 kernelForFunction:"elementwise_mul_scalar_f32_pack4" cacheString:0 withConstants:0];
        }
        else {
          [v80 kernelForFunction:"elementwise_mul_scalar_f16_pack4" cacheString:0 withConstants:0];
        }
        goto LABEL_211;
      default:
        switch(*v60)
        {
          case 'r':
            uint64_t v70 = [v175 pixelFormat];
            char v71 = *(void **)(v7 + 160);
            if (v70 == 125) {
              [v71 kernelForFunction:"elementwise_cos_f32_pack4" cacheString:0 withConstants:0];
            }
            else {
              [v71 kernelForFunction:"elementwise_cos_f16_pack4" cacheString:0 withConstants:0];
            }
            break;
          case 's':
            uint64_t v121 = [v175 pixelFormat];
            int64x2_t v122 = *(void **)(v7 + 160);
            if (v121 == 125) {
              [v122 kernelForFunction:"elementwise_sin_f32_pack4" cacheString:0 withConstants:0];
            }
            else {
              [v122 kernelForFunction:"elementwise_sin_f16_pack4" cacheString:0 withConstants:0];
            }
            break;
          case 't':
            goto LABEL_242;
          case 'u':
            uint64_t v125 = [v175 pixelFormat];
            BOOL v126 = *(void **)(v7 + 160);
            if (v125 == 125) {
              [v126 kernelForFunction:"elementwise_floor_f32_pack4" cacheString:0 withConstants:0];
            }
            else {
              [v126 kernelForFunction:"elementwise_floor_f16_pack4" cacheString:0 withConstants:0];
            }
            break;
          case 'v':
            uint64_t v123 = [v175 pixelFormat];
            uint64_t v124 = *(void **)(v7 + 160);
            if (v123 == 125) {
              [v124 kernelForFunction:"elementwise_ceil_f32_pack4" cacheString:0 withConstants:0];
            }
            else {
              [v124 kernelForFunction:"elementwise_ceil_f16_pack4" cacheString:0 withConstants:0];
            }
            break;
          case 'w':
            uint64_t v127 = [v175 pixelFormat];
            int v128 = *(void **)(v7 + 160);
            if (v127 == 125) {
              [v128 kernelForFunction:"elementwise_clip_f32_pack4" cacheString:0 withConstants:0];
            }
            else {
              [v128 kernelForFunction:"elementwise_clip_f16_pack4" cacheString:0 withConstants:0];
            }
            break;
          default:
            if (*v60 != 217) {
              goto LABEL_242;
            }
            uint64_t v72 = [v175 pixelFormat];
            int64x2_t v73 = *(void **)(v7 + 160);
            if (v72 == 125) {
              [v73 kernelForFunction:"elementwise_less_scalar_f32_pack4" cacheString:0 withConstants:0];
            }
            else {
              [v73 kernelForFunction:"elementwise_less_scalar_f16_pack4" cacheString:0 withConstants:0];
            }
            break;
        }
        uint64_t v136 = LABEL_211:;
        uint64_t v137 = *v64;
        *id v64 = (void *)v136;

LABEL_242:
        if (!*v64)
        {
          uint64_t v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v166, "Kernel not found");
          __cxa_throw(v166, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        return;
    }
  }
  objc_msgSend(v14, "setComputePipelineState:");
  [v14 setTexture:v175 atIndex:0];
  if (HIDWORD(v170))
  {
    int64x2_t v138 = *a4;
    int64x2_t v140 = (std::__shared_weak_count *)v138[3];
    if (v140)
    {
      atomic_fetch_add_explicit(&v140->__shared_owners_, 1uLL, memory_order_relaxed);
      id v141 = v139[21];
      nitro::nitro_function::nitro_function(v140);
    }
    else
    {
      id v141 = v139[21];
    }
    id v142 = v18;
    [v14 setTexture:v18 atIndex:2];
    [v14 setTexture:v141 atIndex:1];
  }
  else
  {
    [v14 setTexture:v18 atIndex:1];
    id v142 = v18;
    if (v190 >= 2)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 1;
      do
      {
        uint64_t v145 = a4;
        double v146 = &(*a4)[v143];
        v148 = (std::__shared_weak_count *)v146[3];
        if (v148)
        {
          atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
          id v149 = v147[21];
          nitro::nitro_function::nitro_function(v148);
        }
        else
        {
          id v149 = v147[21];
        }
        [v178 setTexture:v149 atIndex:++v144];
        a4 = v145;

        v143 += 2;
      }
      while (v144 < v190);
    }
  }
  uint64_t v150 = v178;
  uint64_t v151 = v142;
  [v178 setBuffer:*(void *)(a1 + 360) offset:0 atIndex:0];
  if (v170)
  {
    unint64_t v152 = *a4;
    uint64_t v154 = (char *)**a4;
    unint64_t v153 = (std::__shared_weak_count *)(*a4)[1];
    if (v153)
    {
      atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v155 = a4;
      unint64_t v152 = *a4;
    }
    else
    {
      uint64_t v155 = a4;
    }
    uint64_t v157 = (char *)v152[2];
    uint64_t v156 = (std::__shared_weak_count *)v152[3];
    if (v156) {
      atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (HIDWORD(v170))
    {
      BOOL v158 = v155;
      uint64_t v154 = (char *)(*v155)[2];
      uint64_t v159 = (std::__shared_weak_count *)(*v155)[3];
      if (v159) {
        atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v153) {
        nitro::nitro_function::nitro_function(v153);
      }
      uint64_t v157 = (char *)**v158;
      uint64_t v160 = (std::__shared_weak_count *)(*v158)[1];
      if (v160) {
        atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v156) {
        nitro::nitro_function::nitro_function(v156);
      }
      unint64_t v153 = v159;
      uint64_t v156 = v160;
    }
    long long v185 = *(_OWORD *)(v154 + 8);
    *(_DWORD *)v186 = *((_DWORD *)v154 + 6);
    *(_OWORD *)&v186[4] = *(_OWORD *)(v157 + 8);
    int v187 = *((_DWORD *)v157 + 6);
    uint64_t v150 = v178;
    [v178 setBytes:&v185 length:40 atIndex:1];
    if (v156) {
      nitro::nitro_function::nitro_function(v156);
    }
    if (v153) {
      nitro::nitro_function::nitro_function(v153);
    }
  }
  int v161 = v172 - 1;
  if (v172 < 1) {
    int v161 = v172 + 6;
  }
  uint64_t v162 = (v161 >> 3) + 1;
  int v163 = v174 - 1;
  if (v174 < 1) {
    int v163 = v174 + 6;
  }
  v181[0] = v162;
  v181[1] = (v163 >> 3) + 1;
  v181[2] = v177 * v171;
  int64x2_t v179 = vdupq_n_s64(8uLL);
  uint64_t v180 = 1;
  [v150 dispatchThreadgroups:v181 threadsPerThreadgroup:&v179];

  if (v168) {
    nitro::nitro_function::nitro_function(v168);
  }
  if (v169) {
    nitro::nitro_function::nitro_function(v169);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v191);
}

void sub_1926A0DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v34 - 104));
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
}

void Espresso::MetalLowmemEngine::elementwise_kernel::~elementwise_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[44];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[44];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::split_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_split_kernel::kernel_type_str(Espresso::generic_split_kernel *this)
{
  return "split";
}

uint64_t Espresso::MetalLowmemEngine::split_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 288)) {
    return 0;
  }
  if (*(void *)(a3 + 8) == *(void *)a3) {
    return 1;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v4, *(const Espresso::layer_shape **)a3, 0);
  uint64_t result = 0;
  if (v5 >= 4) {
    return 1;
  }
  return result;
}

uint64_t Espresso::generic_split_kernel::number_of_top_blobs(Espresso::generic_split_kernel *this)
{
  return *((unsigned int *)this + 70);
}

void Espresso::MetalLowmemEngine::split_kernel::__launch(uint64_t a1, uint64_t *a2, void *a3, const void ***a4)
{
  uint64_t v105 = 0;
  int64x2_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v5 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v5 + v6;
      unint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        id v11 = v9[21];
        nitro::nitro_function::nitro_function(v10);
      }
      else
      {
        id v11 = v9[21];
      }
      std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::push_back[abi:ne180100](&v105, v11);

      ++v7;
      uint64_t v5 = *a3;
      v6 += 16;
    }
    while (v7 < (uint64_t)(a3[1] - *a3) >> 4);
  }
  unint64_t v12 = *a4;
  int v14 = (std::__shared_weak_count *)v12[1];
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    id v15 = v13[21];
    nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    id v15 = v13[21];
  }
  uint64_t v84 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v104, *a2);
  id v16 = v104[0];
  int64x2_t v17 = **a4;
  int v18 = v17[2];
  int v19 = v17[3];
  int v21 = v17[5];
  int v20 = v17[6];
  if (v20 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v20;
  }
  BOOL v23 = v19 < 8 && v18 < 8;
  if (v23) {
    unsigned int v24 = 4;
  }
  else {
    unsigned int v24 = 16;
  }
  int v92 = v19;
  int v85 = v18;
  if (v19 < 4 && v18 < 4) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = v24;
  }
  if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1) + 16))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "legacy_cut_mode=1 deprecated");
    goto LABEL_85;
  }
  uint64_t v27 = (long long *)(a1 + 280);
  if (*(_DWORD *)(a1 + 284) == 3)
  {
    if ([v15 pixelFormat] == 125) {
      int v28 = "slice_n_f32_pack4";
    }
    else {
      int v28 = "slice_n_f16_pack4";
    }
    uint64_t v29 = [*(id *)(v84 + 160) kernelForFunction:v28 cacheString:0 withConstants:0];
    if (v29)
    {
      [v16 setComputePipelineState:v29];
      std::string v82 = (void *)v29;
      if (v106 != v105)
      {
        id v91 = v15;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = 0;
        uint64_t v33 = a1;
        uint64_t v34 = (uint64_t *)(a1 + 368);
        unint64_t v35 = 1;
        do
        {
          uint64_t v36 = *(void *)(v33 + 368);
          if (v35 - 1 >= (*(void *)(v33 + 376) - v36) >> 3)
          {
            std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize((uint64_t)v34, v35);
            uint64_t v36 = *v34;
          }
          id v37 = *(id *)(v36 + v31);
          uint64_t v38 = *(void *)(*a3 + v30);
          int v39 = *(_DWORD *)(v38 + 16);
          int v90 = *(_DWORD *)(v38 + 20);
          if (!v37 || *(_DWORD *)(v33 + 320) != v92 || *(_DWORD *)(v33 + 316) != v85)
          {
            int v40 = v39 - 1;
            if (v39 < 1) {
              int v40 = v39 + 2;
            }
            *(_DWORD *)(v33 + 304) = (v40 >> 2) + 1;
            *(_DWORD *)(v33 + 324) = v32;
            *(_DWORD *)(v33 + 316) = v85;
            *(_DWORD *)(v33 + 320) = v92;
            uint64_t v41 = objc_msgSend(*(id *)(v84 + 144), "newBufferWithBytes:length:options:", v27, 52, 0, v82);

            objc_storeStrong((id *)(*(void *)(a1 + 368) + v31), v41);
            id v37 = v41;
          }
          objc_msgSend(v16, "setTexture:atIndex:", *(void *)&v105[v31], 0, v82);
          [v16 setTexture:v91 atIndex:1];
          [v16 setBuffer:v37 offset:0 atIndex:0];
          int v42 = v39 - 1;
          if (v39 < 1) {
            int v42 = v39 + 2;
          }
          v103[0] = (v85 - 1) / (int)v26 + 1;
          v103[1] = (v92 - 1) / (int)v26 + 1;
          v103[2] = v90 + v90 * (v42 >> 2);
          v102[0] = v26;
          v102[1] = v26;
          v102[2] = 1;
          [v16 dispatchThreadgroups:v103 threadsPerThreadgroup:v102];
          v32 += v90;

          BOOL v43 = v35++ >= (v106 - v105) >> 3;
          v31 += 8;
          v30 += 16;
          uint64_t v33 = a1;
          uint64_t v34 = (uint64_t *)(a1 + 368);
        }
        while (!v43);
LABEL_81:
        id v15 = v91;
        goto LABEL_82;
      }
      goto LABEL_82;
    }
    goto LABEL_84;
  }
  uint64_t v88 = v22 * v21;
  if (((*((int *)**a4 + 4) / (unint64_t)((uint64_t)(a3[1] - *a3) >> 4)) & 3) == 0)
  {
    if ([v15 pixelFormat] == 125) {
      int v60 = "slice_f32_pack4";
    }
    else {
      int v60 = "slice_f16_pack4";
    }
    uint64_t v61 = [*(id *)(v84 + 160) kernelForFunction:v60 cacheString:0 withConstants:0];
    if (v61)
    {
      [v16 setComputePipelineState:v61];
      std::string v82 = (void *)v61;
      if (v106 != v105)
      {
        id v91 = v15;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        int v64 = 0;
        int v65 = (uint64_t *)(a1 + 368);
        unint64_t v66 = 1;
        do
        {
          uint64_t v67 = *(void *)(a1 + 368);
          if (v66 - 1 >= (*(void *)(a1 + 376) - v67) >> 3)
          {
            std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::resize((uint64_t)v65, v66);
            uint64_t v67 = *v65;
          }
          unint64_t v83 = v66;
          id v68 = *(id *)(v67 + v63);
          int v69 = *(_DWORD *)(*(void *)(*a3 + v62) + 16);
          id v70 = v68;
          if (v68 && *(_DWORD *)(a1 + 320) == v92 && *(_DWORD *)(a1 + 316) == v85)
          {
            int v71 = v64;
            int v72 = v69 - 1;
            BOOL v23 = v69 < 1;
            int v73 = v69 + 2;
            if (!v23) {
              int v73 = v72;
            }
            int v74 = (v73 >> 2) + 1;
          }
          else
          {
            int v75 = v69 - 1;
            BOOL v23 = v69 < 1;
            int v76 = v69 + 2;
            if (!v23) {
              int v76 = v75;
            }
            int v74 = (v76 >> 2) + 1;
            *(_DWORD *)(a1 + 304) = v74;
            int v71 = v64;
            *(_DWORD *)(a1 + 324) = v64;
            int v77 = *((_DWORD *)**a4 + 4);
            int v78 = v77 - 1;
            BOOL v23 = v77 < 1;
            int v79 = v77 + 2;
            if (!v23) {
              int v79 = v78;
            }
            *(_DWORD *)(a1 + 308) = (v79 >> 2) + 1;
            *(_DWORD *)(a1 + 316) = v85;
            *(_DWORD *)(a1 + 320) = v92;
            int v80 = objc_msgSend(*(id *)(v84 + 144), "newBufferWithBytes:length:options:", v27, 52, 0, v82);

            objc_storeStrong((id *)(*v65 + v63), v80);
            id v70 = v80;
          }
          objc_msgSend(v16, "setTexture:atIndex:", *(void *)&v105[v63], 0, v82);
          [v16 setTexture:v91 atIndex:1];
          [v16 setBuffer:v70 offset:0 atIndex:0];
          v95[0] = (v85 - 1) / (int)v26 + 1;
          v95[1] = (v92 - 1) / (int)v26 + 1;
          v95[2] = v74 * (int)v88;
          v94[0] = v26;
          v94[1] = v26;
          v94[2] = 1;
          [v16 dispatchThreadgroups:v95 threadsPerThreadgroup:v94];
          int v64 = v74 + v71;

          unint64_t v66 = v83 + 1;
          v63 += 8;
          v62 += 16;
        }
        while (v83 < (v106 - v105) >> 3);
        goto LABEL_81;
      }
      goto LABEL_82;
    }
LABEL_84:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_85:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v44 = [*(id *)(v84 + 160) kernelForFunction:"split_one_channel" cacheString:0 withConstants:0];
  [v16 setComputePipelineState:v44];
  std::string v82 = (void *)v44;
  unsigned int v46 = v105;
  int v45 = v106;
  if (v106 != v105)
  {
    id v91 = v15;
    unint64_t v47 = 0;
    int v48 = 0;
    uint64_t v49 = *a3;
    do
    {
      int v50 = *(_DWORD *)(*(void *)(v49 + 16 * v47) + 16);
      if (v50 >= -2)
      {
        int v51 = -1;
        int v87 = v48;
        do
        {
          objc_msgSend(v16, "setTexture:atIndex:", *(void *)&v105[8 * v47], 0, v82);
          [v16 setTexture:v91 atIndex:1];
          int v101 = *((_DWORD *)v27 + 12);
          long long v52 = v27[2];
          long long v99 = v27[1];
          long long v100 = v52;
          long long v98 = *v27;
          int v53 = *(_DWORD *)(*(void *)*a3 + 16);
          int v54 = v53 - 1;
          BOOL v23 = v53 < 1;
          int v55 = v53 + 2;
          if (!v23) {
            int v55 = v54;
          }
          DWORD2(v99) = (v55 >> 2) + 1;
          int v56 = *((_DWORD *)**a4 + 4);
          int v57 = v56 - 1;
          BOOL v23 = v56 < 1;
          int v58 = v56 + 2;
          if (!v23) {
            int v58 = v57;
          }
          HIDWORD(v100) = v51 + 1;
          int v101 = v48;
          HIDWORD(v99) = (v58 >> 2) + 1;
          *(void *)((char *)&v100 + 4) = __PAIR64__(v92, v85);
          [v16 setBytes:&v98 length:52 atIndex:0];
          v97[0] = (v85 - 1) / (int)v26 + 1;
          v97[1] = (v92 - 1) / (int)v26 + 1;
          v97[2] = v88;
          v96[0] = v26;
          v96[1] = v26;
          v96[2] = 1;
          [v16 dispatchThreadgroups:v97 threadsPerThreadgroup:v96];
          uint64_t v49 = *a3;
          int v50 = *(_DWORD *)(*(void *)(*a3 + 16 * v47) + 16);
          int v59 = v50 - 1;
          if (v50 < 1) {
            int v59 = v50 + 2;
          }
          ++v51;
          v48 += 4;
        }
        while (v51 < v59 >> 2);
        unsigned int v46 = v105;
        int v45 = v106;
        int v48 = v87;
      }
      v48 += v50;
      ++v47;
    }
    while (v47 < (v45 - v46) >> 3);
    goto LABEL_81;
  }
LABEL_82:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v104);
  *(void *)&long long v98 = &v105;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
}

void sub_1926A1B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  __cxa_free_exception(v34);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v35 - 128));
  a33 = v35 - 112;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::split_kernel::~split_kernel(id *this)
{
  *this = &unk_1EE348918;
  uint64_t v3 = this + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v3);

  uint64_t v2 = (std::__shared_weak_count *)this[44];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t vars8;

  *this = &unk_1EE348918;
  uint64_t v3 = this + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v3);

  uint64_t v2 = (std::__shared_weak_count *)this[44];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

const char *Espresso::generic_softmax_kernel::kernel_type_str(Espresso::generic_softmax_kernel *this)
{
  return "softmax";
}

uint64_t Espresso::generic_softmax_kernel::force_high_precision_output_f32(Espresso::generic_softmax_kernel *this)
{
  return 1;
}

void Espresso::MetalLowmemEngine::softmax_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v8 = **a4;
  if (v8) {
  else
  }
    unint64_t v9 = 0;
  unint64_t v10 = **a3;
  if (v10) {
  else
  }
    id v11 = 0;
  unint64_t v12 = *(id **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v67, *a2);
  id v13 = v67[0];
  int v14 = **a4;
  int v16 = v14[5];
  int v15 = v14[6];
  if (v15 <= 1) {
    int v15 = 1;
  }
  int v50 = v15 * v16;
  id v51 = *((id *)v9 + 21);
  id v17 = v11[21];
  int v18 = v17;
  int v19 = *((_DWORD *)v9 + 2);
  int v20 = *((_DWORD *)v9 + 3);
  int v21 = *((_DWORD *)v9 + 4);
  if (*(_DWORD *)(a1 + 300) == 1)
  {
    if ([v17 pixelFormat] == 125) {
      uint64_t v22 = "elementwise_sigmoid_f32_pack4";
    }
    else {
      uint64_t v22 = "elementwise_sigmoid_f16_pack4";
    }
    uint64_t v23 = [v12[20] kernelForFunction:v22 cacheString:0 withConstants:0];
    int v24 = v21 - 1;
    if (v21 < 1) {
      int v24 = v21 + 2;
    }
    int v25 = (v24 >> 2) + 1;
    if (v25 != *(_DWORD *)(a1 + 280)
      || !*(void *)(a1 + 344)
      || *(_DWORD *)(a1 + 292) != v20
      || *(_DWORD *)(a1 + 288) != v19)
    {
      v59[2] = 897988541;
      char v60 = 0;
      int v65 = 0;
      int v66 = 0;
      __asm { FMOV            V1.2S, #1.0 }
      v59[0] = 14;
      v59[1] = _D1;
      int v63 = v19;
      int v64 = v20;
      int v61 = (v24 >> 2) + 1;
      int v62 = v50;
      uint64_t v31 = [v12[18] newBufferWithBytes:v59 length:52 options:0];
      int v32 = *(void **)(a1 + 344);
      *(void *)(a1 + 344) = v31;
    }
    if (v23)
    {
      [v13 setComputePipelineState:v23];
      [v13 setTexture:v18 atIndex:0];
      [v13 setTexture:v51 atIndex:1];
      [v13 setBuffer:*(void *)(a1 + 344) offset:0 atIndex:0];
      int v33 = v19 - 1;
      if (v19 < 1) {
        int v33 = v19 + 6;
      }
      uint64_t v34 = (v33 >> 3) + 1;
      int v35 = v20 - 1;
      if (v20 < 1) {
        int v35 = v20 + 6;
      }
      v58[0] = v34;
      v58[1] = (v35 >> 3) + 1;
      v58[2] = v25 * v50;
      int64x2_t v56 = vdupq_n_s64(8uLL);
      uint64_t v57 = 1;
      uint64_t v36 = (void *)v23;
      [v13 dispatchThreadgroups:v58 threadsPerThreadgroup:&v56];
      goto LABEL_49;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_52:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ([v17 pixelFormat] == 115 && objc_msgSend(v51, "pixelFormat") == 115)
  {
    uint64_t v37 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v12, &cfstr_SoftmaxF16F16P.isa);
  }
  else
  {
    if ([v18 pixelFormat] == 125 && objc_msgSend(v51, "pixelFormat") == 115) {
      uint64_t v38 = "softmax_f16_packed";
    }
    else {
      uint64_t v38 = "softmax_f32_packed";
    }
    uint64_t v37 = [v12[20] kernelForFunction:v38 cacheString:0 withConstants:0];
  }
  uint64_t v36 = (void *)v37;
  if (*(_DWORD *)(a1 + 288) != v19
    || *(_DWORD *)(a1 + 292) != v20
    || *(_DWORD *)(a1 + 296) != v50
    || !*(void *)(a1 + 336))
  {
    *(_DWORD *)(a1 + 288) = v19;
    *(_DWORD *)(a1 + 292) = v20;
    *(_DWORD *)(a1 + 284) = v21;
    *(_DWORD *)(a1 + 296) = v50;
    *(_DWORD *)(a1 + 280) = ((v21 - 1) >> 2) + 1;
    uint64_t v39 = [v12[18] newBufferWithBytes:a1 + 280 length:28 options:0];
    int v40 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v39;
  }
  if (!v36)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    goto LABEL_52;
  }
  [v13 setComputePipelineState:v36];
  [v13 setTexture:v18 atIndex:0];
  [v13 setTexture:v51 atIndex:1];
  [v13 setBuffer:*(void *)(a1 + 336) offset:0 atIndex:0];
  if (v19 > 3 || v20 > 3)
  {
    int v45 = v19 - 1;
    if (v19 < 1) {
      int v45 = v19 + 14;
    }
    uint64_t v46 = (v45 >> 4) + 1;
    int v47 = v20 - 1;
    if (v20 < 1) {
      int v47 = v20 + 14;
    }
    uint64_t v48 = (int)(v50 + v50 * ((*(_DWORD *)(a1 + 284) - 1) >> 2));
    v53[0] = v46;
    v53[1] = (v47 >> 4) + 1;
    v53[2] = v48;
    uint64_t v42 = 16;
    uint64_t v52 = 16;
    BOOL v43 = v53;
    uint64_t v44 = &v52;
  }
  else
  {
    uint64_t v41 = (int)(v50 + v50 * ((*(_DWORD *)(a1 + 284) - 1) >> 2));
    v55[0] = v19;
    v55[1] = v20;
    v55[2] = v41;
    uint64_t v42 = 1;
    uint64_t v54 = 1;
    BOOL v43 = v55;
    uint64_t v44 = &v54;
  }
  v44[1] = v42;
  v44[2] = 1;
  objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", v43);
LABEL_49:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v67);
}

void sub_1926A2240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  __cxa_free_exception(v12);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v13 - 104));
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::softmax_kernel::~softmax_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[41];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[41];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::upsample_kernel_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_upsample_kernel::kernel_type_str(Espresso::generic_upsample_kernel *this)
{
  return "upsample";
}

BOOL Espresso::MetalLowmemEngine::upsample_kernel::is_valid_for_engine(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 300) || *(_DWORD *)(a1 + 292)) {
      return 0;
    }
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(a1 + 304) && !*(unsigned char *)(a1 + 316))
  {
    BOOL v4 = 0;
    if (!v3) {
      return v4;
    }
    goto LABEL_12;
  }
  BOOL v4 = *(_DWORD *)(a1 + 292) < 2u;
  if (v3) {
LABEL_12:
  }
    nitro::nitro_function::nitro_function(v3);
  return v4;
}

void Espresso::MetalLowmemEngine::upsample_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  unint64_t v7 = **a4;
  if (v7) {
  else
  }
    uint64_t v8 = 0;
  unint64_t v9 = **a3;
  if (v9) {
  else
  }
    unint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v41, *a2);
  id v12 = v41[0];
  int v13 = v10[4];
  int v14 = v13 - 1;
  if (v13 < 1) {
    int v14 = v13 + 2;
  }
  if (v13 != v8[4] || (int v15 = v10[5], v15 != v8[5]) || (v16 = v10[6], v16 != v8[6])) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid shape");
  }
  unsigned int v17 = (v14 >> 2) + 1;
  int v18 = v16 * v15;
  if (*(_DWORD *)(a1 + 320) != v10[2]
    || *(_DWORD *)(a1 + 324) != v10[3]
    || *(_DWORD *)(a1 + 336) != v17
    || *(_DWORD *)(a1 + 328) != v8[2]
    || *(_DWORD *)(a1 + 332) != v8[3]
    || *(_DWORD *)(a1 + 340) != v18)
  {
    int v19 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = 0;

    *(void *)&long long v20 = *((void *)v10 + 1);
    *((void *)&v20 + 1) = *((void *)v8 + 1);
    *(_OWORD *)(a1 + 320) = v20;
    *(_DWORD *)(a1 + 340) = v18;
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)(a1 + 344) = vdiv_f32(_D1, vcvt_f32_s32(*(int32x2_t *)(a1 + 284)));
    *(_DWORD *)(a1 + 336) = v17;
  }
  if (!*(void *)(a1 + 352))
  {
    uint64_t v26 = [*(id *)(v11 + 144) newBufferWithBytes:a1 + 280 length:72 options:0];
    uint64_t v27 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = v26;
  }
  int v28 = *(_DWORD *)(a1 + 292);
  if (v28 == 1)
  {
    int v32 = *(uint64_t (**)(_DWORD *))(*(void *)v10 + 32);
    if (*(_DWORD *)(a1 + 300))
    {
      int v29 = v32(v10);
      uint64_t v30 = "upsample_bilinear_f32";
      uint64_t v31 = "upsample_bilinear_f16";
    }
    else
    {
      int v29 = v32(v10);
      uint64_t v30 = "upsample_bilinear_nonlegacy_f32";
      uint64_t v31 = "upsample_bilinear_nonlegacy_f16";
    }
  }
  else
  {
    if (v28)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v39, *(_DWORD *)(a1 + 292));
      uint64_t v37 = std::string::insert(&v39, 0, "Mode not supported: ");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v40);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v29 = (*(uint64_t (**)(_DWORD *))(*(void *)v10 + 32))(v10);
    uint64_t v30 = "upsample_f32";
    uint64_t v31 = "upsample_f16";
  }
  if (v29 == 1) {
    int v33 = v31;
  }
  else {
    int v33 = v30;
  }
  uint64_t v34 = [*(id *)(v11 + 160) kernelForFunction:v33 cacheString:0 withConstants:0];
  if (!v34)
  {
    int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Kernel not found");
    __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v12 setComputePipelineState:v34];
  [v12 setTexture:*((void *)v10 + 21) atIndex:0];
  [v12 setTexture:*((void *)v8 + 21) atIndex:1];
  [v12 setBuffer:*(void *)(a1 + 352) offset:0 atIndex:0];
  dispatch_auto_threadgroupsize(v12, v10[2], v10[3], v17, v18);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v41);
}

void sub_1926A2864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,id a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v25 & 1) == 0)
    {
LABEL_8:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void dispatch_auto_threadgroupsize(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  id v9 = a1;
  unint64_t v10 = v9;
  if (a3 >= 8) {
    LODWORD(v11) = 8;
  }
  else {
    LODWORD(v11) = 4;
  }
  if (a3 < 4) {
    LODWORD(v11) = 2;
  }
  if (a3 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v11;
  }
  if (a2 >= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = 4;
  }
  if (a2 < 8) {
    char v13 = 2;
  }
  else {
    char v13 = 3;
  }
  if (a2 >= 4)
  {
    char v14 = v13;
  }
  else
  {
    uint64_t v12 = 2;
    char v14 = 1;
  }
  if (a2 <= 1)
  {
    uint64_t v12 = 1;
    char v14 = 0;
  }
  if (a4 >= 0x10) {
    int v15 = 16;
  }
  else {
    int v15 = 8;
  }
  if (a4 < 8) {
    int v15 = 4;
  }
  if (a4 < 4) {
    int v15 = 2;
  }
  if (a4 <= 1) {
    unsigned int v16 = 1;
  }
  else {
    unsigned int v16 = v15;
  }
  unsigned int v17 = 1;
  switch(v11 << v14)
  {
    case 1:
      unsigned int v17 = v16;
      break;
    case 2:
      BOOL v18 = v16 >= 8;
      unsigned int v17 = 8;
      goto LABEL_35;
    case 4:
      BOOL v18 = v16 >= 4;
      unsigned int v17 = 4;
      goto LABEL_35;
    case 8:
      BOOL v18 = v16 >= 2;
      unsigned int v17 = 2;
LABEL_35:
      if (!v18) {
        unsigned int v17 = v16;
      }
      break;
    default:
      break;
  }
  if (a3 < 8) {
    char v19 = 2;
  }
  else {
    char v19 = 3;
  }
  if (a3 < 4) {
    char v19 = 1;
  }
  if (a3 <= 1) {
    char v19 = 0;
  }
  v21[0] = (int)(((a2 - 1) >> v14) + 1);
  v21[1] = (int)(((a3 - 1) >> v19) + 1);
  uint64_t v21[2] = (int)((a5 * a4 - 1) / v17 + 1);
  v20[0] = v12;
  v20[1] = v11;
  uint64_t v20[2] = v17;
  [v9 dispatchThreadgroups:v21 threadsPerThreadgroup:v20];
}

{
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  void v20[3];
  void v21[3];

  id v9 = a1;
  unint64_t v10 = v9;
  if (a3 >= 8) {
    LODWORD(v11) = 8;
  }
  else {
    LODWORD(v11) = 4;
  }
  if (a3 < 4) {
    LODWORD(v11) = 2;
  }
  if (a3 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v11;
  }
  if (a2 >= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = 4;
  }
  if (a2 < 8) {
    char v13 = 2;
  }
  else {
    char v13 = 3;
  }
  if (a2 >= 4)
  {
    char v14 = v13;
  }
  else
  {
    uint64_t v12 = 2;
    char v14 = 1;
  }
  if (a2 <= 1)
  {
    uint64_t v12 = 1;
    char v14 = 0;
  }
  if (a4 >= 0x10) {
    int v15 = 16;
  }
  else {
    int v15 = 8;
  }
  if (a4 < 8) {
    int v15 = 4;
  }
  if (a4 < 4) {
    int v15 = 2;
  }
  if (a4 <= 1) {
    unsigned int v16 = 1;
  }
  else {
    unsigned int v16 = v15;
  }
  unsigned int v17 = 1;
  switch(v11 << v14)
  {
    case 1:
      unsigned int v17 = v16;
      break;
    case 2:
      BOOL v18 = v16 >= 8;
      unsigned int v17 = 8;
      goto LABEL_35;
    case 4:
      BOOL v18 = v16 >= 4;
      unsigned int v17 = 4;
      goto LABEL_35;
    case 8:
      BOOL v18 = v16 >= 2;
      unsigned int v17 = 2;
LABEL_35:
      if (!v18) {
        unsigned int v17 = v16;
      }
      break;
    default:
      break;
  }
  if (a3 < 8) {
    char v19 = 2;
  }
  else {
    char v19 = 3;
  }
  if (a3 < 4) {
    char v19 = 1;
  }
  if (a3 <= 1) {
    char v19 = 0;
  }
  v21[0] = (int)(((a2 - 1) >> v14) + 1);
  v21[1] = (int)(((a3 - 1) >> v19) + 1);
  uint64_t v21[2] = (int)((a5 * a4 - 1) / v17 + 1);
  v20[0] = v12;
  v20[1] = v11;
  uint64_t v20[2] = v17;
  [v9 dispatchThreadgroups:v21 threadsPerThreadgroup:v20];
}

void sub_1926A2A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::upsample_kernel::~upsample_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::crop_and_resize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_crop_and_resize_kernel::kernel_type_str(Espresso::generic_crop_and_resize_kernel *this)
{
  return "crop_and_resize";
}

BOOL Espresso::MetalLowmemEngine::crop_and_resize_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(unsigned char *)(a1 + 312) == 0;
}

void Espresso::MetalLowmemEngine::crop_and_resize_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  int v7 = *((_DWORD *)a4 + 2);
  uint64_t v8 = *a4;
  id v9 = **a4;
  if (v9) {
  else
  }
    unint64_t v10 = 0;
  int v11 = v7 - v8;
  uint64_t v12 = **a3;
  if (v12) {
  else
  }
    char v13 = 0;
  uint64_t v14 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v44, *a2);
  id v15 = v44[0];
  int v16 = v13[4];
  int v17 = v13[5];
  if (v16 >= 1) {
    int v18 = v16 - 1;
  }
  else {
    int v18 = v16 + 2;
  }
  uint64_t v19 = *((void *)v13 + 1);
  uint64_t v41 = v10[1];
  BOOL v43 = v10;
  int v20 = *((_DWORD *)v10 + 5);
  unsigned int v21 = (v11 << 12) & 0xFFFF0000;
  if (v21 != 0x10000 && v21 != 0x20000) {
    Espresso::throw_exception_selector<Espresso::generic_error>("crop_and_resize_metal_kernel: requires either one or two inputs");
  }
  uint64_t v40 = v14;
  uint64_t v42 = *((void *)v13 + 1);
  if (v21 != 0x10000)
  {
    int v25 = v24[4];
    if ((v25 & 0xFFFFFFFE) != 4)
    {
      uint64_t v26 = "crop_and_resize_metal_kernel: crop indices must be of size 4 or 5";
      goto LABEL_52;
    }
    int v23 = v24[6];
    int v22 = v25 == 5;
    if (v25 == 5)
    {
      uint64_t v19 = v42;
      if (v17 != 1)
      {
        uint64_t v26 = "crop_and_resize_metal_kernel: batch size of output must be 1";
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v19 = v42;
      if (v17 != v20)
      {
        uint64_t v26 = "crop_and_resize_metal_kernel: batch size of input and output does not match";
        goto LABEL_52;
      }
    }
    if (v23 == v13[6]) {
      goto LABEL_21;
    }
    uint64_t v26 = "crop_and_resize_metal_kernel: seq size of output does not match the number of RoIs";
LABEL_52:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v26);
  }
  if (v17 != v20)
  {
    uint64_t v37 = "crop_and_resize_metal_kernel: batch size of input and output does not match";
LABEL_48:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v37);
  }
  int v22 = 0;
  int v23 = 1;
LABEL_21:
  if (v16 != *((_DWORD *)v43 + 4))
  {
    uint64_t v37 = "crop_and_resize_metal_kernel: channel size of input and output does not match";
    goto LABEL_48;
  }
  int v27 = (v18 >> 2) + 1;
  if (*(_DWORD *)(a1 + 324) != v19
    || *(void *)(a1 + 328) != __PAIR64__(v41, HIDWORD(v19))
    || *(_DWORD *)(a1 + 336) != HIDWORD(v41)
    || *(_DWORD *)(a1 + 344) != v20
    || *(_DWORD *)(a1 + 348) != v17
    || *(_DWORD *)(a1 + 340) != v27
    || *(_DWORD *)(a1 + 352) != v23
    || *(unsigned __int8 *)(a1 + 356) != v22)
  {
    int v28 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = 0;

    *(void *)&long long v29 = v42;
    *((void *)&v29 + 1) = v41;
    *(_OWORD *)(a1 + 324) = v29;
    *(_DWORD *)(a1 + 344) = v20;
    *(_DWORD *)(a1 + 348) = v17;
    *(_DWORD *)(a1 + 340) = v27;
    *(_DWORD *)(a1 + 352) = v23;
    *(unsigned char *)(a1 + 356) = v22;
  }
  if (!*(void *)(a1 + 360))
  {
    uint64_t v30 = [*(id *)(v40 + 144) newBufferWithBytes:a1 + 280 length:80 options:0];
    uint64_t v31 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v30;
  }
  int v32 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 32))(v13);
  int v33 = "resize_bilinear_with_roi_f32";
  if (v21 == 0x10000) {
    int v33 = "resize_bilinear_full_image_f32";
  }
  uint64_t v34 = "resize_bilinear_with_roi_f16";
  if (v21 == 0x10000) {
    uint64_t v34 = "resize_bilinear_full_image_f16";
  }
  if (v32 == 1) {
    int v35 = v34;
  }
  else {
    int v35 = v33;
  }
  uint64_t v36 = objc_msgSend(*(id *)(v40 + 160), "kernelForFunction:cacheString:withConstants:", v35, 0, 0, a4);
  if (!v36) {
    Espresso::throw_exception_selector<Espresso::generic_error>("crop_and_resize_metal_kernel: kernel not found");
  }
  [v15 setComputePipelineState:v36];
  [v15 setTexture:*((void *)v13 + 21) atIndex:0];
  [v15 setTexture:v43[21] atIndex:1];
  if (v21 > 0x10000) {
  [v15 setBuffer:*(void *)(a1 + 360) offset:0 atIndex:0];
  }
  dispatch_auto_threadgroupsize(v15, v13[2], v13[3], (v18 >> 2) + 1, v13[6] * v13[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v44);
}

void sub_1926A3020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error>(const char *a1)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(const char *a1)
{
}

void Espresso::MetalLowmemEngine::crop_and_resize_kernel::~crop_and_resize_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_padding_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_general_padding_kernel::kernel_type_str(Espresso::generic_general_padding_kernel *this)
{
  return "general_padding";
}

void Espresso::MetalLowmemEngine::general_padding_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  int v7 = **a4;
  if (v7) {
  else
  }
    uint64_t v8 = 0;
  id v9 = **a3;
  if (v9) {
  else
  }
    unint64_t v10 = 0;
  int v11 = *(id **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v32, *a2);
  id v12 = v32[0];
  int v13 = v10[4];
  int v14 = v13 - 1;
  if (v13 < 1) {
    int v14 = v13 + 2;
  }
  if (v13 != v8[4] || (int v15 = v10[5], v15 != v8[5]) || (v16 = v10[6], v16 != v8[6])) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid shape");
  }
  unsigned int v17 = (v14 >> 2) + 1;
  int v18 = v16 * v15;
  if (*(_DWORD *)(a1 + 332) != v10[2]
    || *(_DWORD *)(a1 + 336) != v10[3]
    || *(_DWORD *)(a1 + 348) != v17
    || *(_DWORD *)(a1 + 340) != v8[2]
    || *(_DWORD *)(a1 + 344) != v8[3]
    || *(_DWORD *)(a1 + 352) != v18)
  {
    uint64_t v19 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = 0;

    *(void *)&long long v20 = *((void *)v10 + 1);
    *((void *)&v20 + 1) = *((void *)v8 + 1);
    *(_OWORD *)(a1 + 332) = v20;
    *(_DWORD *)(a1 + 352) = v18;
    *(_DWORD *)(a1 + 348) = v17;
  }
  if (!*(void *)(a1 + 360))
  {
    uint64_t v21 = [v11[18] newBufferWithBytes:a1 + 280 length:76 options:0];
    int v22 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v21;
  }
  if (!*(void *)(a1 + 368))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%d", *(__int16 *)(a1 + 282));
    int v23 = (NSString *)objc_claimAutoreleasedReturnValue();
    int v24 = (MTLFunctionConstantValues *)objc_opt_new();
    int v25 = *(unsigned __int16 *)(a1 + 282);
    BOOL v30 = v25 == 2;
    BOOL v31 = v25 == 1;
    [(MTLFunctionConstantValues *)v24 setConstantValue:&v31 type:29 atIndex:0];
    [(MTLFunctionConstantValues *)v24 setConstantValue:&v30 type:29 atIndex:1];
    if ((*(unsigned int (**)(_DWORD *))(*(void *)v10 + 32))(v10)) {
      uint64_t v26 = @"general_padding_padding_f16";
    }
    else {
      uint64_t v26 = @"general_padding_padding_f32";
    }
    uint64_t v27 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v11, &v26->isa, v23, v24);
    int v28 = *(void **)(a1 + 368);
    *(void *)(a1 + 368) = v27;

    if (!*(void *)(a1 + 368))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v12, "setComputePipelineState:");
  [v12 setTexture:*((void *)v10 + 21) atIndex:0];
  [v12 setTexture:*((void *)v8 + 21) atIndex:1];
  [v12 setBuffer:*(void *)(a1 + 360) offset:0 atIndex:0];
  dispatch_auto_threadgroupsize(v12, v10[2], v10[3], v17, v18);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v32);
}

void sub_1926A34A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  __cxa_free_exception(v12);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a11);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::general_padding_kernel::~general_padding_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::MetalLowmemEngine::batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 464);
  *a2 = *(void *)(this + 456);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MetalLowmemEngine::batchnorm_kernel::set_batchnorm_params(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 432);
  *(void *)(a1 + 432) = 0;

  if (*a2)
  {
    int v6 = *(_DWORD *)(a1 + 304);
    if ((v6 & 3) != 0)
    {
      int v8 = v6 - 1;
      BOOL v7 = v6 < 1;
      int v9 = v6 + 2;
      if (v7) {
        int v8 = v9;
      }
      int v10 = (v8 >> 2) + 1;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v25, 16 * v10, 1, 1, 1);
      uint64_t v11 = *(int *)(a1 + 304);
      uint64_t v12 = v25;
      int v13 = *(_DWORD **)(v25 + 16);
      if ((int)v11 < 4 * v10)
      {
        uint64_t v14 = 4 * v10 - v11;
        int v15 = 4 * v11;
        do
        {
          v13[v15] = 1065353216;
          v13[v15 + 1] = 0;
          v13[v15 + 2] = 0;
          v13[v15 + 3] = 1065353216;
          v15 += 4;
          --v14;
        }
        while (v14);
      }
      uint64_t v16 = *(int *)(*a2 + 8);
      if (4 * *(int *)(v12 + 8) >= (unint64_t)(4 * v16)) {
        size_t v17 = 4 * v16;
      }
      else {
        size_t v17 = 4 * *(int *)(v12 + 8);
      }
      memcpy(v13, *(const void **)(*a2 + 16), v17);
      uint64_t v18 = [*(id *)(v4 + 144) newBufferWithBytes:*(void *)(v12 + 16) length:4 * *(int *)(v12 + 8) options:0];
      uint64_t v19 = *(void **)(a1 + 432);
      *(void *)(a1 + 432) = v18;

      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
    }
    else
    {
      uint64_t v20 = [*(id *)(v4 + 144) newBufferWithBytes:*(void *)(*a2 + 16) length:4 * *(int *)(*a2 + 8) options:0];
      uint64_t v21 = *(void **)(a1 + 432);
      *(void *)(a1 + 432) = v20;
    }
  }
  uint64_t v23 = *a2;
  uint64_t v22 = a2[1];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  int v24 = *(std::__shared_weak_count **)(a1 + 464);
  *(void *)(a1 + 456) = v23;
  *(void *)(a1 + 464) = v22;
  if (v24)
  {
    nitro::nitro_function::nitro_function(v24);
  }
}

void sub_1926A3748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob<float,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BEB0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389920;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_batchnorm_kernel::kernel_type_str(Espresso::generic_batchnorm_kernel *this)
{
  return "batchnorm";
}

void Espresso::MetalLowmemEngine::batchnorm_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  if (*(_DWORD *)(a1 + 376) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Only BatchNorm2D is supported");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v7 = *a4;
  int v8 = **a4;
  if (v8)
  {
    if (v9)
    {
      int v10 = (std::__shared_weak_count *)v7[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = 0;
    int v9 = 0;
  }
  uint64_t v11 = *a3;
  uint64_t v12 = **a3;
  if (!v12)
  {
    int v13 = 0;
    goto LABEL_13;
  }
  if (!v13)
  {
LABEL_13:
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  uint64_t v14 = (std::__shared_weak_count *)v11[1];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v15 = *(void *)(a1 + 8);
  int v66 = v14;
  uint64_t v67 = v10;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v73, *a2);
  id v16 = v73[0];
  int v17 = *((_DWORD *)v13 + 4);
  if (v17 >= 1) {
    int v18 = v17 - 1;
  }
  else {
    int v18 = v17 + 2;
  }
  if (!*(void *)(a1 + 432))
  {
    if (!*(_DWORD *)(a1 + 308) || !*(_DWORD *)(a1 + 312))
    {
      int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Unexpected null pointer: bn_params");
LABEL_95:
      __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v71, 4 * v17, 1, 1, 1);
    uint64_t v19 = *((unsigned int *)v13 + 4);
    uint64_t v20 = v71;
    uint64_t v21 = *(void *)(v71 + 16);
    if ((int)v19 >= 1)
    {
      uint64_t v22 = *(_OWORD **)(v71 + 16);
      do
      {
        *v22++ = xmmword_192DCA1E0;
        --v19;
      }
      while (v19);
    }
    uint64_t v23 = [*(id *)(v15 + 144) newBufferWithBytes:v21 length:4 * *(int *)(v20 + 8) options:0];
    int v24 = *(void **)(a1 + 432);
    *(void *)(a1 + 432) = v23;

    if (v72) {
      nitro::nitro_function::nitro_function(v72);
    }
    int v17 = *((_DWORD *)v13 + 4);
  }
  if (v17 != v9[4])
  {
LABEL_90:
    int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Invalid shape (k)");
    goto LABEL_95;
  }
  unsigned int v25 = *((_DWORD *)v13 + 5);
  if (v25 != v9[5])
  {
    int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Invalid shape (n)");
    goto LABEL_95;
  }
  if (*((_DWORD *)v13 + 2) != v9[2])
  {
    int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Invalid shape (w)");
    goto LABEL_95;
  }
  if (*((_DWORD *)v13 + 3) != v9[3])
  {
    int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Invalid shape (h)");
    goto LABEL_95;
  }
  uint64_t v26 = (_DWORD *)(a1 + 304);
  int v27 = *(_DWORD *)(a1 + 312);
  if (!*(_DWORD *)(a1 + 308))
  {
    if (v27 || *v26 == v17) {
      goto LABEL_36;
    }
    goto LABEL_90;
  }
  if (v25 != 1 && !v27)
  {
    int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Not implemented: only instance norm was implemented");
    goto LABEL_95;
  }
LABEL_36:
  *(_DWORD *)(a1 + 448) = 1065353216;
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v9 + 32))(v9) == 4
    || (*(unsigned int (**)(_DWORD *))(*(void *)v9 + 32))(v9) == 2)
  {
    double v29 = 128.0;
    if (!*((_DWORD *)v13 + 29)) {
      double v29 = 256.0;
    }
    float v30 = v13[28] / v29;
    *(float *)(a1 + 448) = v30;
  }
  uint64_t v31 = ((uint64_t)v18 >> 2) + 1;
  if (*(_DWORD *)(a1 + 344) != *((_DWORD *)v13 + 2)
    || *(_DWORD *)(a1 + 348) != *((_DWORD *)v13 + 3)
    || *v26 != *((_DWORD *)v13 + 4)
    || *(_DWORD *)(a1 + 352) != v31)
  {
    goto LABEL_49;
  }
  int v32 = v9[6];
  if (v32 <= 1) {
    int v32 = 1;
  }
  if (*(_DWORD *)(a1 + 356) != v32 * v9[5] || *(float *)(a1 + 448) != *(float *)(a1 + 360))
  {
LABEL_49:
    int v33 = *(void **)(a1 + 424);
    *(void *)(a1 + 424) = 0;

    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a1 + 448);
    *(void *)(a1 + 344) = *((void *)v13 + 1);
    unsigned int v34 = *((_DWORD *)v13 + 4);
    *(_DWORD *)(a1 + 304) = v34;
    *(_DWORD *)(a1 + 352) = v31;
    int v35 = v9[6];
    if (v35 <= 1) {
      int v35 = 1;
    }
    *(_DWORD *)(a1 + 356) = v35 * v9[5];
    if (*(_DWORD *)(a1 + 308))
    {
      if (*(_DWORD *)(a1 + 312))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v71, 2 * v34 * *((_DWORD *)v13 + 5), 1, 1, 1);
        uint64_t v36 = [*(id *)(v15 + 144) newBufferWithBytes:*(void *)(v71 + 16) length:4 * *(int *)(v71 + 8) options:0];
        uint64_t v37 = *(void **)(a1 + 440);
        *(void *)(a1 + 440) = v36;

        if (v72) {
          nitro::nitro_function::nitro_function(v72);
        }
      }
    }
  }
  if (!*(void *)(a1 + 424))
  {
    uint64_t v38 = [*(id *)(v15 + 144) newBufferWithBytes:a1 + 304 length:76 options:0];
    uint64_t v39 = *(void **)(a1 + 424);
    *(void *)(a1 + 424) = v38;
  }
  uint64_t v40 = *(void **)(v15 + 160);
  if (*(_DWORD *)(a1 + 308))
  {
    uint64_t v41 = [v40 kernelForFunction:"batchnorm_training_kernel" cacheString:0 withConstants:0];
    int v42 = [v41 maxTotalThreadsPerThreadgroup];
    int v65 = a3;
    unsigned int v43 = [v41 threadExecutionWidth];
    if (v42 >= 256) {
      int v44 = 256;
    }
    else {
      int v44 = v42;
    }
    if (*(_DWORD *)(a1 + 344) >= v43) {
      int v45 = v43;
    }
    else {
      int v45 = *(_DWORD *)(a1 + 344);
    }
    unsigned int v46 = v44 / v45;
    if (v46 >= *(_DWORD *)(a1 + 348)) {
      signed int v47 = *(_DWORD *)(a1 + 348);
    }
    else {
      signed int v47 = v46;
    }
    if (!v41)
    {
      int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v62, "Kernel not found");
      __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v16 setComputePipelineState:v41];
    [v16 setTexture:*((void *)v9 + 21) atIndex:0];
    [v16 setBuffer:*(void *)(a1 + 424) offset:0 atIndex:0];
    [v16 setBuffer:*(void *)(a1 + 440) offset:0 atIndex:1];
    [v16 setThreadgroupMemoryLength:((4 * v47 * v45 - 1) & 0xFFFFFFFFFFFFFFF0) + 16 atIndex:0];
    uint64_t v48 = 16 * v47 * v45;
    [v16 setThreadgroupMemoryLength:v48 atIndex:1];
    [v16 setThreadgroupMemoryLength:v48 atIndex:2];
    uint64_t v49 = *((int *)v13 + 5) * (uint64_t)(int)v31;
    int64x2_t v69 = vdupq_n_s64(1uLL);
    uint64_t v70 = v49;
    v68[0] = v45;
    v68[1] = v47;
    v68[2] = 1;
    [v16 dispatchThreadgroups:&v69 threadsPerThreadgroup:v68];
    int v50 = [*(id *)(v15 + 160) kernelForFunction:"instancenorm_inference_kernel" cacheString:0 withConstants:0];
    if (!v50)
    {
      int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v63, "Kernel not found");
      __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v16 setComputePipelineState:v50];
    [v16 setTexture:*((void *)v13 + 21) atIndex:0];
    [v16 setTexture:*((void *)v9 + 21) atIndex:1];
    [v16 setBuffer:*(void *)(a1 + 424) offset:0 atIndex:0];
    [v16 setBuffer:*(void *)(a1 + 432) offset:0 atIndex:1];
    [v16 setBuffer:*(void *)(a1 + 440) offset:0 atIndex:2];
    dispatch_auto_threadgroupsize(v16, *((_DWORD *)v13 + 2), *((_DWORD *)v13 + 3), v31, *((_DWORD *)v13 + 6) * *((_DWORD *)v13 + 5));
    if (!*(_DWORD *)(a1 + 368) || *(_DWORD *)(a1 + 312) != 1) {
      goto LABEL_81;
    }
    id v51 = *v65;
    int v53 = (std::__shared_weak_count *)v51[3];
    if (v53)
    {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      id v54 = v52[21];
      nitro::nitro_function::nitro_function(v53);
    }
    else
    {
      id v54 = v52[21];
    }
    int v55 = *v65;
    uint64_t v57 = (std::__shared_weak_count *)v55[5];
    if (v57)
    {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      id v58 = v56[21];
      nitro::nitro_function::nitro_function(v57);
      if (v54)
      {
LABEL_78:
        if (v58)
        {
          int v59 = [*(id *)(v15 + 160) kernelForFunction:"bn_to_transplant_kernel" cacheString:0 withConstants:0];
          if (!v59) {
            Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found for mean/ivar output");
          }
          [v16 setComputePipelineState:v59];
          [v16 setTexture:v54 atIndex:0];
          [v16 setTexture:v58 atIndex:1];
          [v16 setBuffer:*(void *)(a1 + 440) offset:0 atIndex:0];
          [v16 setBuffer:*(void *)(a1 + 424) offset:0 atIndex:1];
          dispatch_auto_threadgroupsize(v16, *((_DWORD *)(*v65)[2] + 2), *((_DWORD *)(*v65)[2] + 3), v31, *((_DWORD *)(*v65)[2] + 6) * *((_DWORD *)(*v65)[2] + 5));

LABEL_81:
          goto LABEL_82;
        }
        char v60 = "Texture not found for ivar output";
LABEL_100:
        Espresso::throw_exception_selector<Espresso::generic_error>(v60);
      }
    }
    else
    {
      id v58 = v56[21];
      if (v54) {
        goto LABEL_78;
      }
    }
    char v60 = "Texture not found for mean output";
    goto LABEL_100;
  }
  uint64_t v41 = [v40 kernelForFunction:"batchnorm_inference_kernel" cacheString:0 withConstants:0];
  if (!v41)
  {
    int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v64, "Kernel not found");
    __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v16 setComputePipelineState:v41];
  [v16 setTexture:*((void *)v13 + 21) atIndex:0];
  [v16 setTexture:*((void *)v9 + 21) atIndex:1];
  [v16 setBuffer:*(void *)(a1 + 424) offset:0 atIndex:0];
  [v16 setBuffer:*(void *)(a1 + 432) offset:0 atIndex:1];
  dispatch_auto_threadgroupsize(v16, *((_DWORD *)v13 + 2), *((_DWORD *)v13 + 3), (v18 >> 2) + 1, *((_DWORD *)v13 + 5));
LABEL_82:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v73);
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
}

void sub_1926A4318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  __cxa_free_exception(v22);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a21);
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::MetalLowmemEngine::batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE348F58;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE348F58;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::flatten_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_flatten_kernel::kernel_type_str(Espresso::generic_flatten_kernel *this)
{
  return "flatten";
}

BOOL Espresso::MetalLowmemEngine::flatten_kernel_metal::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 != 64) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  return *(_DWORD *)(a1 + 280) != 2 && v7 < 5;
}

uint64_t Espresso::MetalLowmemEngine::flatten_kernel_metal::on_resized(uint64_t a1)
{
  *(void *)(a1 + 312) = 0;
  return MEMORY[0x1F41817F8]();
}

void Espresso::MetalLowmemEngine::flatten_kernel_metal::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  unsigned int v7 = **a4;
  if (v7) {
  else
  }
    int v8 = 0;
  int v9 = **a3;
  if (v9) {
  else
  }
    int v10 = 0;
  uint64_t v11 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v37, *a2);
  id v12 = v37[0];
  int v13 = v10[4] - 1;
  if (!*(void *)(a1 + 312))
  {
    int v14 = v8[4];
    int v15 = v8[5];
    int v16 = v14 - 1;
    if (v14 < 1) {
      int v16 = v14 + 2;
    }
    unsigned int v17 = v8[2];
    unsigned int v18 = v8[3];
    LODWORD(v33.__r_.__value_.__l.__data_) = v13 / 4 + 1;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = __PAIR64__(v18, v17);
    HIDWORD(v33.__r_.__value_.__r.__words[1]) = v14;
    LODWORD(v33.__r_.__value_.__r.__words[2]) = (v16 >> 2) + 1;
    HIDWORD(v33.__r_.__value_.__r.__words[2]) = v15;
    int v34 = v18 * v17;
    int v35 = v14 * v18 * v17;
    int v36 = v14 * v17;
    uint64_t v19 = [*(id *)(v11 + 144) newBufferWithBytes:&v33 length:36 options:0];
    uint64_t v20 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v19;
  }
  int v21 = *(_DWORD *)(a1 + 280);
  if (v21 == 1)
  {
    uint64_t v22 = "flatten_nhwc";
  }
  else
  {
    if (v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v32, *(_DWORD *)(a1 + 280));
      int v27 = std::string::insert(&v32, 0, "Invalid flatten mode: ");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v33);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v22 = "flatten_nchw";
  }
  uint64_t v23 = [*(id *)(v11 + 160) kernelForFunction:v22 cacheString:0 withConstants:0];
  if (!v23)
  {
    unsigned int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Kernel not found");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v12 setComputePipelineState:v23];
  [v12 setTexture:*((void *)v8 + 21) atIndex:0];
  [v12 setTexture:*((void *)v10 + 21) atIndex:1];
  [v12 setBuffer:*(void *)(a1 + 312) offset:0 atIndex:0];
  long long v30 = xmmword_192DCA1C0;
  uint64_t v31 = 1;
  uint64_t v24 = v10[5];
  v29[0] = v13 / 64 + 1;
  v29[1] = v24;
  v29[2] = 1;
  [v12 dispatchThreadgroups:&v30 threadsPerThreadgroup:v29];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v37);
}

void sub_1926A48FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v29 & 1) == 0)
    {
LABEL_8:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v30 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::flatten_kernel_metal::~flatten_kernel_metal(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[38];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[38];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::crop_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_crop_kernel::kernel_type_str(Espresso::generic_crop_kernel *this)
{
  return "crop";
}

void Espresso::MetalLowmemEngine::crop_kernel_metal::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  unsigned int v7 = **a4;
  if (v7) {
  else
  }
    int v8 = 0;
  int v9 = **a3;
  if (v9) {
  else
  }
    int v10 = 0;
  uint64_t v11 = *(id **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v28, *a2);
  id v12 = v28[0];
  int v13 = v10[4];
  int v14 = v13 - 1;
  if (v13 < 1) {
    int v14 = v13 + 2;
  }
  if (v13 != v8[4] || (int v15 = v10[5], v15 != v8[5]))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape");
    goto LABEL_29;
  }
  unsigned int v16 = (v14 >> 2) + 1;
  if (*(_DWORD *)(a1 + 364) != v10[2]
    || *(_DWORD *)(a1 + 368) != v10[3]
    || *(_DWORD *)(a1 + 380) != v16
    || *(_DWORD *)(a1 + 372) != v8[2]
    || *(_DWORD *)(a1 + 376) != v8[3]
    || *(_DWORD *)(a1 + 384) != v15)
  {
    unsigned int v17 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = 0;

    *(void *)&long long v18 = *((void *)v10 + 1);
    *((void *)&v18 + 1) = *((void *)v8 + 1);
    *(_OWORD *)(a1 + 364) = v18;
    *(_DWORD *)(a1 + 384) = v10[5];
    *(_DWORD *)(a1 + 380) = v16;
  }
  if (!*(void *)(a1 + 296))
  {
    uint64_t v19 = [v11[18] newBufferWithBytes:a1 + 312 length:76 options:0];
    uint64_t v20 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v19;
  }
  if (!*(void *)(a1 + 304))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%d", 0);
    int v21 = (NSString *)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = (MTLFunctionConstantValues *)objc_opt_new();
    uint64_t v27 = 0;
    [(MTLFunctionConstantValues *)v22 setConstantValue:(char *)&v27 + 4 type:29 atIndex:0];
    [(MTLFunctionConstantValues *)v22 setConstantValue:&v27 type:29 atIndex:1];
    uint64_t v23 = (*(unsigned int (**)(_DWORD *))(*(void *)v10 + 32))(v10)
        ? @"general_padding_padding_f16"
        : @"general_padding_padding_f32";
    uint64_t v24 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v11, &v23->isa, v21, v22);
    unsigned int v25 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = v24;

    if (!*(void *)(a1 + 304))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_29:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v12, "setComputePipelineState:");
  [v12 setTexture:*((void *)v10 + 21) atIndex:0];
  [v12 setTexture:*((void *)v8 + 21) atIndex:1];
  [v12 setBuffer:*(void *)(a1 + 296) offset:0 atIndex:0];
  dispatch_auto_threadgroupsize(v12, v10[2], v10[3], v16, v10[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v28);
}

void sub_1926A4DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  __cxa_free_exception(v12);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a11);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::crop_kernel_metal::~crop_kernel_metal(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

const char *Espresso::generic_activation_kernel::kernel_type_str(Espresso::generic_activation_kernel *this)
{
  return "activation";
}

BOOL Espresso::MetalLowmemEngine::activation_kernel::supports_weight_key(uint64_t a1, void *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (v6 == 12) {
      return *(void *)*a2 == 0x705F736D61726170 && *(_DWORD *)(*a2 + 8) == 1970038130;
    }
    if (v6 != 14)
    {
      if (v6 == 15) {
        return *(void *)*a2 == 0x73756C7074666F73 && *(void *)(*a2 + 7) == 0x736168706C615F73;
      }
      return 0;
    }
    a2 = (void *)*a2;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 == 12) {
      return *a2 == 0x705F736D61726170 && *((_DWORD *)a2 + 2) == 1970038130;
    }
    if (v2 != 14)
    {
      if (v2 == 15)
      {
        uint64_t v3 = *(void *)((char *)a2 + 7);
        BOOL v4 = *a2 == 0x73756C7074666F73;
        uint64_t v5 = 0x68706C615F73;
        goto LABEL_21;
      }
      return 0;
    }
  }
  uint64_t v3 = *(void *)((char *)a2 + 6);
  BOOL v4 = *a2 == 0x73756C7074666F73;
  uint64_t v5 = 0x7465625F7375;
LABEL_21:
  uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL | 0x7361000000000000;
  return v4 && v3 == v9;
}

BOOL Espresso::MetalLowmemEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  int v2 = *(const void **)(a1 + 8);
  if (v2
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v10 = 24;
    v9[1] = xmmword_192DCAC10;
    v9[2] = unk_192DCAC20;
    void v9[3] = xmmword_192DCAC30;
    long long v8 = xmmword_192DCABF0;
    v9[0] = unk_192DCAC00;
    std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__assign_unique<Espresso::activation_mode const*>((uint64_t)v6, (int *)&v8, &v11);
  }
  else
  {
    long long v8 = xmmword_192DCA1F0;
    std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__assign_unique<Espresso::activation_mode const*>((uint64_t)v6, (int *)&v8, (int *)v9);
    if (*(_DWORD *)(a1 + 392) != 1)
    {
      BOOL v4 = 0;
      goto LABEL_11;
    }
    uint64_t v3 = 0;
  }
  BOOL v4 = std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), *(_DWORD *)(a1 + 304)) != 0;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
LABEL_11:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v6);
  return v4;
}

void sub_1926A5170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__assign_unique<Espresso::activation_mode const*>(uint64_t a1, int *a2, int *a3)
{
  BOOL v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*(void *)a1 + 8 * i) = 0;
    long long v8 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      while (1)
      {
        unint64_t v11 = *v4;
        *((_DWORD *)v8 + 4) = v11;
        int v10 = (void *)*v8;
        v8[1] = v11;
        unint64_t v12 = *(void *)(a1 + 8);
        if (v12)
        {
          uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            unint64_t v14 = v11;
            if (v12 <= v11) {
              unint64_t v14 = v11 % v12;
            }
          }
          else
          {
            unint64_t v14 = (v12 - 1) & v11;
          }
          int v15 = *(uint64_t ***)(*(void *)a1 + 8 * v14);
          if (v15)
          {
            for (uint64_t j = *v15; j; uint64_t j = (uint64_t *)*j)
            {
              unint64_t v17 = j[1];
              if (v17 == v11)
              {
                if (*((_DWORD *)j + 4) == v11) {
                  goto LABEL_49;
                }
              }
              else
              {
                if (v13.u32[0] > 1uLL)
                {
                  if (v17 >= v12) {
                    v17 %= v12;
                  }
                }
                else
                {
                  v17 &= v12 - 1;
                }
                if (v17 != v14) {
                  break;
                }
              }
            }
          }
        }
        float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
        float v19 = *(float *)(a1 + 32);
        if (!v12 || (float)(v19 * (float)v12) < v18)
        {
          uint64_t v20 = 2 * v12;
          BOOL v21 = v12 < 3 || (v12 & (v12 - 1)) != 0;
          size_t v22 = v21 | v20;
          unint64_t v23 = vcvtps_u32_f32(v18 / v19);
          if (v22 <= v23) {
            size_t v24 = v23;
          }
          else {
            size_t v24 = v22;
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
          unint64_t v12 = *(void *)(a1 + 8);
          unint64_t v11 = v8[1];
        }
        uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v11 >= v12) {
            v11 %= v12;
          }
        }
        else
        {
          v11 &= v12 - 1;
        }
        uint64_t v26 = *(void **)(*(void *)a1 + 8 * v11);
        if (v26)
        {
          *long long v8 = *v26;
        }
        else
        {
          *long long v8 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v8;
          *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
          if (!*v8) {
            goto LABEL_48;
          }
          unint64_t v27 = *(void *)(*v8 + 8);
          if (v25.u32[0] > 1uLL)
          {
            if (v27 >= v12) {
              v27 %= v12;
            }
          }
          else
          {
            v27 &= v12 - 1;
          }
          uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
        }
        void *v26 = v8;
LABEL_48:
        ++*(void *)(a1 + 24);
LABEL_49:
        ++v4;
        if (v10)
        {
          long long v8 = v10;
          if (v4 != a3) {
            continue;
          }
        }
        goto LABEL_51;
      }
    }
    int v10 = v8;
LABEL_51:
    if (v10)
    {
      do
      {
        long long v28 = (void *)*v10;
        operator delete(v10);
        int v10 = v28;
      }
      while (v28);
    }
  }
  while (v4 != a3)
  {
    int v29 = *v4++;
    std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__emplace_unique_key_args<Espresso::activation_mode,Espresso::activation_mode const&>(a1, v29, v29);
  }
}

void sub_1926A5420(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1926A5440(_Unwind_Exception *a1)
{
}

uint64_t *std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__emplace_unique_key_args<Espresso::activation_mode,Espresso::activation_mode const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *unint64_t v12 = *v20;
LABEL_38:
    void *v20 = v12;
    goto LABEL_39;
  }
  *unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1926A56F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::activation_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v10 = a3[1];
    if (v10 != 12)
    {
      if (v10 != 14)
      {
        if (v10 != 15) {
          goto LABEL_43;
        }
        if (*(void *)*a3 != 0x73756C7074666F73 || *(void *)(*a3 + 7) != 0x736168706C615F73) {
          goto LABEL_43;
        }
LABEL_18:
        unint64_t v12 = (void **)(a1 + 424);
        goto LABEL_37;
      }
      a3 = (uint64_t *)*a3;
      goto LABEL_31;
    }
    if (*(void *)*a3 != 0x705F736D61726170 || *(_DWORD *)(*a3 + 8) != 1970038130) {
      goto LABEL_43;
    }
LABEL_29:
    unint64_t v12 = (void **)(a1 + 416);
    goto LABEL_37;
  }
  int v8 = *((unsigned __int8 *)a3 + 23);
  if (v8 == 12)
  {
    if (*a3 != 0x705F736D61726170 || *((_DWORD *)a3 + 2) != 1970038130) {
      goto LABEL_43;
    }
    goto LABEL_29;
  }
  if (v8 != 14)
  {
    if (v8 != 15
      || (*a3 == 0x73756C7074666F73 ? (BOOL v9 = *(uint64_t *)((char *)a3 + 7) == 0x736168706C615F73) : (BOOL v9 = 0), !v9))
    {
LABEL_43:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unknown weight name");
      goto LABEL_45;
    }
    goto LABEL_18;
  }
LABEL_31:
  if (*a3 != 0x73756C7074666F73 || *(uint64_t *)((char *)a3 + 6) != 0x73617465625F7375) {
    goto LABEL_43;
  }
  unint64_t v12 = (void **)(a1 + 432);
LABEL_37:
  int v16 = a5 - 1;
  if ((int)a5 < 1) {
    int v16 = a5 + 14;
  }
  size_t v17 = (int)((v16 & 0xFFFFFFF0) + 16);
  size_t v18 = malloc_type_calloc(v17, 1uLL, 0x5038B804uLL);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error allocating memory");
LABEL_45:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v19 = v18;
  memcpy(v18, a4, a5);
  uint64_t v20 = [*(id *)(v7 + 144) newBufferWithBytes:v19 length:v17 options:0];
  unint64_t v21 = *v12;
  *unint64_t v12 = (void *)v20;

  free(v19);
}

void sub_1926A5964(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::abstract_kernel_with_named_weights<Espresso::activation_params>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::MetalLowmemEngine::activation_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  uint64_t v7 = *a4;
  int v8 = **a4;
  if (v8)
  {
    if (v9)
    {
      uint64_t v10 = (std::__shared_weak_count *)v7[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    BOOL v9 = 0;
  }
  uint64_t v11 = *a3;
  if (!*(void *)v11)
  {
    unint64_t v12 = 0;
    goto LABEL_12;
  }
  if (!v12)
  {
LABEL_12:
    float v13 = 0;
    goto LABEL_13;
  }
  float v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v14 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v36, *a2);
  id v15 = v36[0];
  int v16 = v12[4];
  if (v16 >= 1) {
    int v17 = v16 - 1;
  }
  else {
    int v17 = v16 + 2;
  }
  int v18 = v12[2];
  if (v18 != v9[2]
    || (int v19 = v12[3], v19 != v9[3])
    || v16 != v9[4]
    || (int v20 = v12[5], v20 != v9[5])
    || (int v21 = v12[6], v21 != v9[6]))
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("shape mismatch");
  }
  int v22 = (v17 >> 2) + 1;
  if (*(_DWORD *)(a1 + 324) != v18
    || *(_DWORD *)(a1 + 328) != v19
    || *(_DWORD *)(a1 + 332) != v22
    || (v21 <= 1 ? (int v23 = 1) : (int v23 = v12[6]), *(_DWORD *)(a1 + 336) != v23 * v20))
  {
    size_t v24 = *(void **)(a1 + 408);
    *(void *)(a1 + 408) = 0;

    *(void *)(a1 + 324) = *((void *)v12 + 1);
    int v25 = v12[6];
    if (v25 <= 1) {
      int v25 = 1;
    }
    *(_DWORD *)(a1 + 336) = v25 * v12[5];
    *(_DWORD *)(a1 + 332) = v22;
  }
  if (!*(void *)(a1 + 408))
  {
    uint64_t v26 = [*(id *)(v14 + 144) newBufferWithBytes:a1 + 304 length:36 options:0];
    unint64_t v27 = *(void **)(a1 + 408);
    *(void *)(a1 + 408) = v26;
  }
  if (!*(void *)(a1 + 400))
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "activation_");
    uint64_t v28 = *(unsigned int *)(a1 + 304);
    if (v28 >= 0x19 || ((0x1F87FFFu >> v28) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported activation type");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::append(&v35, off_1E5746C98[v28]);
    std::string::append(&v35, "_f");
    if ((*(unsigned int (**)(_DWORD *))(*(void *)v12 + 32))(v12) == 1) {
      int v29 = "16";
    }
    else {
      int v29 = "32";
    }
    std::string::append(&v35, v29);
    std::string::append(&v35, "_pack4");
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v35;
    }
    else {
      uint64_t v30 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    uint64_t v31 = [*(id *)(v14 + 160) kernelForFunction:v30 cacheString:0 withConstants:0];
    std::string v32 = *(void **)(a1 + 400);
    *(void *)(a1 + 400) = v31;

    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (!*(void *)(a1 + 400))
    {
      int v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Kernel not found");
      __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v15, "setComputePipelineState:");
  [v15 setTexture:*((void *)v12 + 21) atIndex:0];
  [v15 setTexture:*((void *)v9 + 21) atIndex:1];
  [v15 setBuffer:*(void *)(a1 + 408) offset:0 atIndex:0];
  [v15 setBuffer:*(void *)(a1 + 416) offset:0 atIndex:1];
  [v15 setBuffer:*(void *)(a1 + 424) offset:0 atIndex:2];
  [v15 setBuffer:*(void *)(a1 + 432) offset:0 atIndex:3];
  dispatch_auto_threadgroupsize(v15, *(_DWORD *)(a1 + 324), *(_DWORD *)(a1 + 328), *(_DWORD *)(a1 + 332), *(_DWORD *)(a1 + 336));

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v36);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1926A5E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, id a16)
{
  __cxa_free_exception(v19);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a16);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::activation_kernel::~activation_kernel(id *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
}

uint64_t Espresso::generic_convolution_kernel::get_quantization_ranges_blob@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 512);
  *a2 = *(void *)(this + 504);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_quantization_ranges_blob()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Quantized weights are not supported with depthwise convolution.");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1926A5FE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_convolution_kernel::get_quantization_lut_blob@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 496);
  *a2 = *(void *)(this + 488);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::generic_convolution_kernel::set_quantization_lut_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 496);
  *(void *)(a1 + 488) = v3;
  *(void *)(a1 + 496) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::generic_convolution_kernel::get_quantized_weights_blob@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 528);
  *a2 = *(void *)(this + 520);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_quantized_weights_blob()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Quantized weights are not supported with depthwise convolution.");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1926A60A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_convolution_kernel::get_f16_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  Espresso::blob<unsigned short,4>::copy(&v4, *a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 576);
  *(_OWORD *)(a1 + 568) = v4;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate((Espresso::MetalLowmemEngine::depthwise_convolution_kernel *)a1);
}

void *Espresso::blob<unsigned short,4>::copy(void *a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(a1, a2 + 8);
  uint64_t v4 = 0;
  uint64_t v5 = *(void **)(*a1 + 24);
  unint64_t v6 = *(const void **)(a2 + 24);
  uint64_t v7 = *(int *)(a2 + 8);
  do
  {
    v7 *= *(int *)(a2 + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);

  return memcpy(v5, v6, 2 * v7);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *this)
{
  uint64_t v2 = (void *)*((void *)this + 85);
  *((void *)this + 85) = 0;

  uint64_t v3 = (void *)*((void *)this + 86);
  *((void *)this + 86) = 0;

  uint64_t v4 = (void *)*((void *)this + 88);
  *((void *)this + 88) = 0;

  uint64_t v5 = (void *)*((void *)this + 89);
  *((void *)this + 89) = 0;

  unint64_t v6 = (void *)*((void *)this + 90);
  *((void *)this + 90) = 0;

  *((unsigned char *)this + 676) = 0;
}

void Espresso::blob<unsigned short,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C130;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::generic_convolution_kernel::get_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_convolution_kernel::get_biases(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_convolution_kernel::get_shuffled_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 408))(a1, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 400))(a1, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_1926A6390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926A6420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 392))(a1, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_1926A64B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_weights()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob_f4::ptr blob_in)");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1926A6510(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_weights(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 73) = v4;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 74);
  *((void *)this + 74) = v3;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(this);
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v5, (int *)(*a2 + 8));
  memcpy(*(void **)(v5 + 16), *(const void **)(v3 + 16), 4 * *(int *)(v3 + 8));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 608);
  *(_OWORD *)(a1 + 600) = v5;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate((Espresso::MetalLowmemEngine::depthwise_convolution_kernel *)a1);
}

const char *Espresso::generic_convolution_kernel::kernel_type_str(Espresso::generic_convolution_kernel *this)
{
  return "convolution";
}

uint64_t Espresso::MetalLowmemEngine::depthwise_convolution_kernel::clear_weights(Espresso::MetalLowmemEngine::depthwise_convolution_kernel *this)
{
  uint64_t v2 = (char *)this + 568;
  Espresso::generic_convolution_kernel::clear_weights(this);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 72);
  *(_OWORD *)uint64_t v2 = 0u;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 74);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  long long v5 = (void *)*((void *)this + 89);

  return [v5 setPurgeableState:4];
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::__launch(uint64_t a1, uint64_t *a2, int32x2_t ***a3, int32x2_t ***a4)
{
  if (*(void *)(a1 + 688)) {
    goto LABEL_104;
  }
  if (*(_DWORD *)(a1 + 416))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Batch Norm is deprecated in layer definition.");
    goto LABEL_119;
  }
  if (*(_WORD *)(a1 + 428))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Input channel offset is deprecated.");
LABEL_119:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(_DWORD *)(a1 + 352) >> 15 || *(_DWORD *)(a1 + 356) >= 0x8000u)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel size is too large for depthwise convolution.");
    goto LABEL_119;
  }
  int v8 = *a3;
  BOOL v9 = **a3;
  *(int32x2_t *)(a1 + 616) = vrev64_s32(v9[1]);
  int v10 = *(_DWORD *)(a1 + 344);
  int v12 = v10 - 1;
  BOOL v11 = v10 < 1;
  int v13 = v10 + 2;
  if (!v11) {
    int v13 = v12;
  }
  *(_DWORD *)(a1 + 624) = (v13 >> 2) + 1;
  LODWORD(v14) = v9[3].i32[0];
  uint64_t v15 = v9[2].i32[1];
  if ((int)v14 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v14;
  }
  unint64_t v16 = v14 * v15;
  *(_WORD *)(a1 + 438) = v14 * v15;
  if (v17 && (int v18 = (std::__shared_weak_count *)v8[1]) != 0)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    id v19 = v17[21];
    nitro::nitro_function::nitro_function(v18);
  }
  else
  {
    id v19 = v17[21];
  }
  uint64_t v121 = v19;
  *(_DWORD *)(a1 + 628) = [v19 arrayLength] / v16;
  *(_DWORD *)(a1 + 632) = *(unsigned __int16 *)(a1 + 430) >> 2;
  int v20 = (const void **)*a4;
  int v22 = (std::__shared_weak_count *)v20[1];
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    id v23 = v21[21];
    nitro::nitro_function::nitro_function(v22);
  }
  else
  {
    id v23 = v21[21];
  }
  *(_DWORD *)(a1 + 636) = [v23 arrayLength] / v16;
  if ((*(unsigned char *)(a1 + 430) & 3) != 0)
  {
    int v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v116, "The output offset must be a multiple of 4.");
    __cxa_throw(v116, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v24.i16[0] = *(_WORD *)(a1 + 400);
  v24.i16[2] = *(_WORD *)(a1 + 402);
  int32x2_t v25 = (int32x2_t)0x100000001;
  int32x2_t v26 = vmax_s32(vshr_n_s32(vshl_n_s32(v24, 0x10uLL), 0x10uLL), (int32x2_t)0x100000001);
  int8x8_t v122 = (int8x8_t)v26;
  v26.i16[0] = *(_WORD *)(a1 + 396);
  *(_DWORD *)(a1 + 640) = v16;
  v26.i16[2] = *(_WORD *)(a1 + 398);
  int v27 = *(__int16 *)(a1 + 376);
  if (v27 != 4)
  {
    if (v27 == 2)
    {
      int32x2_t v30 = 0;
      goto LABEL_25;
    }
    if (v27 != 1)
    {
      v25.i16[0] = *(_WORD *)(a1 + 384);
      v25.i16[2] = *(_WORD *)(a1 + 388);
      int32x2_t v30 = vshr_n_s32(vshl_n_s32(v25, 0x10uLL), 0x10uLL);
      goto LABEL_25;
    }
  }
  int32x2_t v28 = vmax_s32(vsub_s32(vmla_s32(vneg_s32((int32x2_t)vmvn_s8((int8x8_t)vmul_s32(vadd_s32((**a3)[1], (int32x2_t)-1), vshr_n_s32(vshl_n_s32(v26, 0x10uLL), 0x10uLL)))), vadd_s32(*(int32x2_t *)(a1 + 352), (int32x2_t)-1), (int32x2_t)vand_s8(v122, (int8x8_t)0xFFFF0000FFFFLL)), (**a4)[1]), 0);
  int32x2_t v29 = (int32x2_t)vshr_n_u32((uint32x2_t)v28, 1uLL);
  int32x2_t v30 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 376) == 1), 0x1FuLL)), (int8x8_t)v29, (int8x8_t)vsub_s32(v28, v29));
LABEL_25:
  *(int32x2_t *)(a1 + 644) = v30;
  *(_WORD *)(a1 + 654) = *(_DWORD *)(a1 + 344) / *(_DWORD *)(a1 + 348);
  if (v26.i16[0] < 0 || v26.i16[2] < 0)
  {
    uint64_t v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v117, "Invalid stride for depthwise convolution.");
    __cxa_throw(v117, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_WORD *)(a1 + 656) = v26.i16[2];
  *(_WORD *)(a1 + 658) = v26.i16[0];
  *(_DWORD *)(a1 + 660) = *(_DWORD *)(a1 + 340);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a1 + 364);
  *(void *)(a1 + 668) = *(void *)(a1 + 368);
  unint64_t v31 = (*(_DWORD *)(a1 + 624) * v16);
  *(_OWORD *)(a1 + 728) = xmmword_192DCA200;
  unint64_t v32 = *(unsigned int *)(a1 + 616);
  unint64_t v33 = 128;
  unint64_t v34 = 1;
  if (v32 <= 0x7F && v31 >= 2)
  {
    unint64_t v33 = 128;
    unint64_t v34 = 1;
    do
    {
      v33 >>= 1;
      v34 *= 2;
    }
    while (v33 > v32 && v34 < v31);
    *(void *)(a1 + 736) = v33;
  }
  *(void *)(a1 + 744) = v34;
  uint64_t v36 = *(unsigned int *)(a1 + 620);
  int32x2_t v120 = v24;
  int v37 = 4;
  if (v36 <= 3)
  {
    do
      int v37 = (__int16)(v37 + ((unsigned __int16)(v37 & 0x8000) >> 15)) >> 1;
    while (v36 < v37);
  }
  *(_WORD *)(a1 + 652) = v37;
  *(void *)(a1 + 752) = (v36 - 1) / (unint64_t)v37 + 1;
  *(void *)(a1 + 760) = (v32 - 1) / v33 + 1;
  *(void *)(a1 + 768) = (v31 - 1) / v34 + 1;
  uint64_t v38 = *(id **)(a1 + 8);
  id v39 = v38[18];
  uint64_t v40 = [v39 newBufferWithBytes:a1 + 616 length:60 options:0];
  uint64_t v41 = *(void **)(a1 + 704);
  *(void *)(a1 + 704) = v40;

  int v42 = *(void **)(a1 + 680);
  *(void *)(a1 + 680) = @"depthwise_convolution_generic";

  int v43 = *(_DWORD *)(a1 + 560);
  if (!v43)
  {
    uint64_t v49 = @"_f32";
LABEL_50:
    uint64_t v48 = [*(id *)(a1 + 680) stringByAppendingString:v49];
    goto LABEL_52;
  }
  if (v43 != 1) {
    goto LABEL_53;
  }
  if (*(_WORD *)(a1 + 654) != 1)
  {
    uint64_t v49 = @"_f16";
    goto LABEL_50;
  }
  if (*(_DWORD *)(a1 + 352) != 3 || *(_DWORD *)(a1 + 356) != 3)
  {
    uint64_t v48 = @"depthwise_convolution_no_multiplier";
    goto LABEL_52;
  }
  *(unsigned char *)(a1 + 676) = 1;
  int v44 = *(void **)(a1 + 680);
  *(void *)(a1 + 680) = @"depthwise_convolution_3x3_no_multiplier";

  int v45 = *(unsigned __int16 *)(a1 + 658);
  if (*(_WORD *)(a1 + 656) == 1)
  {
    __int16 v46 = v120.i16[0];
    __int16 v47 = v120.i16[2];
    if (v45 == 1 && v120.i16[0] <= 1 && v120.i16[2] < 2)
    {
      uint64_t v48 = @"depthwise_convolution_3x3_no_stride_no_dilation_no_multiplier";
LABEL_52:
      int v50 = *(void **)(a1 + 680);
      *(void *)(a1 + 680) = v48;

      goto LABEL_53;
    }
  }
  else
  {
    __int16 v46 = v120.i16[0];
    __int16 v47 = v120.i16[2];
  }
  if (v45 == 2 && v46 <= 1 && v47 < 2)
  {
    uint64_t v48 = @"depthwise_convolution_3x3_2stridex_no_dilation_no_multiplier";
    goto LABEL_52;
  }
LABEL_53:
  id v51 = objc_opt_new();
  [v51 appendString:*(void *)(a1 + 680)];
  uint64_t v52 = (MTLFunctionConstantValues *)objc_opt_new();
  LOBYTE(v127) = *(_DWORD *)(a1 + 336) == 1;
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:53 atIndex:0];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 0, v127);
  LOBYTE(v127) = *(_DWORD *)(a1 + 328) == 1;
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:53 atIndex:1];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 1, v127);
  LOBYTE(v127) = *(_DWORD *)(a1 + 328) == 2;
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:53 atIndex:2];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 2, v127);
  LOBYTE(v127) = *(_DWORD *)(a1 + 332) == 1;
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:53 atIndex:3];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 3, v127);
  LOWORD(v127) = v122.i16[0];
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:37 atIndex:4];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 4, (__int16)v127);
  LOWORD(v127) = v122.i16[2];
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:37 atIndex:5];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 5, (__int16)v127);
  LOWORD(v127) = *(_DWORD *)(a1 + 356);
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:37 atIndex:6];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 6, (__int16)v127);
  LOWORD(v127) = *(_DWORD *)(a1 + 352);
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:37 atIndex:7];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 7, (__int16)v127);
  LOBYTE(v127) = *(_DWORD *)(a1 + 364) == 24;
  [(MTLFunctionConstantValues *)v52 setConstantValue:&v127 type:53 atIndex:8];
  objc_msgSend(v51, "appendFormat:", @"_%d:%d", 8, v127);
  uint64_t v53 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v38, *(NSString **)(a1 + 680), (NSString *)v51, v52);
  id v54 = *(void **)(a1 + 688);
  *(void *)(a1 + 688) = v53;

  int v55 = objc_opt_new();
  [v55 setNormalizedCoordinates:0];
  int v56 = *(__int16 *)(a1 + 378);
  if (!*(_WORD *)(a1 + 378))
  {
    if (fabsf(*(float *)(a1 + 380)) > 0.00001) {
      goto LABEL_122;
    }
    [v55 setRAddressMode:4];
    uint64_t v57 = 4;
    [v55 setSAddressMode:4];
    goto LABEL_60;
  }
  if (v56 == 1)
  {
    [v55 setRAddressMode:0];
    [v55 setSAddressMode:0];
    uint64_t v57 = 0;
LABEL_60:
    [v55 setTAddressMode:v57];
    goto LABEL_61;
  }
  if ((v56 - 2) < 2)
  {
LABEL_122:
    uint64_t v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v118, "Not supported by MPS");
    __cxa_throw(v118, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_61:
  uint64_t v58 = [v39 newSamplerStateWithDescriptor:v55];
  int v59 = *(void **)(a1 + 696);
  *(void *)(a1 + 696) = v58;

  int v60 = *(_DWORD *)(a1 + 560);
  if (!v60)
  {
    uint64_t v63 = *(void *)(a1 + 584);
    if (!v63) {
      Espresso::throw_exception_selector<Espresso::blob_not_found_error>("Missing float32 weights in depthwise convolution");
    }
    int v62 = *(std::__shared_weak_count **)(a1 + 592);
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(_DWORD *)(v63 + 16) != 1)
    {
      uint64_t v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v119, "Invalid kernel shape for depthwise convolution.");
      __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v64 = *(unsigned int *)(v63 + 20);
    int v65 = v64 - 1;
    if ((int)v64 < 1) {
      int v65 = v64 + 2;
    }
    int v66 = (v65 >> 2) + 1;
    uint64_t v67 = *(void *)(v63 + 24);
    id v68 = *(void **)(*(void *)(a1 + 8) + 144);
    if (*(unsigned char *)(a1 + 676))
    {
      uint64_t v69 = [v68 newBufferWithLength:144 * v66 options:0];
      uint64_t v70 = *(void **)(a1 + 712);
      *(void *)(a1 + 712) = v69;

      uint64_t v71 = [*(id *)(a1 + 712) contents];
      if ((int)v64 >= 1)
      {
        for (unint64_t i = 0; i != v64; ++i)
        {
          uint64_t v73 = 0;
          uint64_t v74 = v71 + 144 * (i >> 2) + 36 * (i & 3);
          uint64_t v75 = v67 + 36 * i;
          do
          {
            for (uint64_t j = 0; j != 12; j += 4)
              *(_DWORD *)(v74 + j) = *(_DWORD *)(v75 + j);
            ++v73;
            v74 += 12;
            v75 += 12;
          }
          while (v73 != 3);
        }
      }
    }
    else
    {
      uint64_t v90 = *(unsigned int *)(v63 + 8);
      uint64_t v91 = *(unsigned int *)(v63 + 12);
      uint64_t v92 = [v68 newBufferWithLength:16 * (int)v90 * (int)v91 * v66 options:0];
      uint64_t v93 = *(void **)(a1 + 712);
      *(void *)(a1 + 712) = v92;

      uint64_t v94 = [*(id *)(a1 + 712) contents];
      if ((int)v64 >= 1)
      {
        int v95 = 0;
        unsigned int v96 = 0;
        do
        {
          if ((int)v91 >= 1)
          {
            uint64_t v97 = 0;
            int v98 = (v96 & 3) + 4 * v91 * v90 * (v96 >> 2);
            int v99 = v95;
            do
            {
              if ((int)v90 >= 1)
              {
                long long v100 = (int *)(v67 + 4 * v99);
                int v101 = v98;
                uint64_t v102 = v90;
                do
                {
                  int v103 = *v100++;
                  *(_DWORD *)(v94 + 4 * v101) = v103;
                  v101 += 4;
                  --v102;
                }
                while (v102);
              }
              ++v97;
              v98 += 4 * v90;
              v99 += v90;
            }
            while (v97 != v91);
          }
          ++v96;
          v95 += v91 * v90;
        }
        while (v96 != v64);
      }
    }
LABEL_100:
    if (!v62) {
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  if (v60 != 1) {
    goto LABEL_102;
  }
  uint64_t v61 = *(void *)(a1 + 568);
  if (v61)
  {
    int v62 = *(std::__shared_weak_count **)(a1 + 576);
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::MetalLowmemEngine::depthwise_convolution_kernel::populate_weight_buffer<unsigned short>(a1, v61);
    goto LABEL_100;
  }
  uint64_t v77 = *(void *)(a1 + 584);
  if (!v77) {
    Espresso::throw_exception_selector<Espresso::blob_not_found_error>("Missing weights in depthwise convolution");
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v127, v77 + 8);
  uint64_t v78 = 0;
  uint64_t v79 = *(void *)(a1 + 584);
  int v80 = *(int **)(v79 + 24);
  uint64_t v81 = (uint64_t)v127;
  std::string v82 = (_WORD *)v127[3];
  uint64_t v83 = *(int *)(v79 + 8);
  uint64_t v84 = v79 + 12;
  do
  {
    v83 *= *(int *)(v84 + v78);
    v78 += 4;
  }
  while (v78 != 12);
  for (; v83; --v83)
  {
    int v85 = *v80++;
    _S0 = v85;
    __asm { FCVT            H0, S0 }
    *v82++ = _S0;
  }
  int v62 = v128;
  if (v128) {
    atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::populate_weight_buffer<unsigned short>(a1, v81);
  if (!v62) {
    goto LABEL_102;
  }
  nitro::nitro_function::nitro_function(v62);
LABEL_101:
  nitro::nitro_function::nitro_function(v62);
LABEL_102:
  if (*(_DWORD *)(a1 + 336))
  {
    uint64_t v104 = [*(id *)(*(void *)(a1 + 8) + 144) newBufferWithLength:((4 * *(int *)(*(void *)(a1 + 600) + 8) - 4) & 0xFFFFFFFFFFFFFFF0) + 16 options:0];
    uint64_t v105 = *(void **)(a1 + 720);
    *(void *)(a1 + 720) = v104;

    memcpy((void *)[*(id *)(a1 + 720) contents], *(const void **)(*(void *)(a1 + 600) + 16), 4 * *(int *)(*(void *)(a1 + 600) + 8));
  }
LABEL_104:
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v127, *a2);
  int64x2_t v106 = v127;
  [v106 setComputePipelineState:*(void *)(a1 + 688)];
  [v106 setLabel:*(void *)(a1 + 680)];
  [v106 setBuffer:*(void *)(a1 + 712) offset:0 atIndex:0];
  [v106 setBuffer:*(void *)(a1 + 720) offset:0 atIndex:1];
  [v106 setBuffer:*(void *)(a1 + 704) offset:0 atIndex:2];
  [v106 setSamplerState:*(void *)(a1 + 696) atIndex:0];
  uint64_t v107 = (const void **)*a4;
  uint64_t v109 = (std::__shared_weak_count *)v107[1];
  if (v109)
  {
    atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
    id v110 = v108[21];
    nitro::nitro_function::nitro_function(v109);
  }
  else
  {
    id v110 = v108[21];
  }
  [v106 setTexture:v110 atIndex:0];
  uint64_t v111 = *a3;
  uint64_t v113 = (std::__shared_weak_count *)v111[1];
  if (v113)
  {
    atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
    id v114 = v112[21];
    nitro::nitro_function::nitro_function(v113);
  }
  else
  {
    id v114 = v112[21];
  }
  [v106 setTexture:v114 atIndex:1];
  long long v125 = *(_OWORD *)(a1 + 752);
  uint64_t v126 = *(void *)(a1 + 768);
  uint64_t v124 = *(void *)(a1 + 744);
  long long v123 = *(_OWORD *)(a1 + 728);
  [v106 dispatchThreadgroups:&v125 threadsPerThreadgroup:&v123];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)&v127);
}

void sub_1926A752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14)
  {
    nitro::nitro_function::nitro_function(v14);
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MetalLowmemEngine::depthwise_convolution_kernel::populate_weight_buffer<unsigned short>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid kernel shape for depthwise convolution.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  int v4 = v3 - 1;
  if ((int)v3 < 1) {
    int v4 = v3 + 2;
  }
  int v5 = (v4 >> 2) + 1;
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 676);
  int v8 = *(void **)(*(void *)(a1 + 8) + 144);
  if (v7)
  {
    uint64_t v9 = [v8 newBufferWithLength:80 * v5 options:0];
    int v10 = *(void **)(a1 + 712);
    *(void *)(a1 + 712) = v9;

    uint64_t result = [*(id *)(a1 + 712) contents];
    if ((int)v3 >= 1)
    {
      for (unint64_t i = 0; i != v3; ++i)
      {
        uint64_t v13 = 0;
        uint64_t v14 = result + 80 * (i >> 2) + 18 * (i & 3);
        uint64_t v15 = v6 + 18 * i;
        do
        {
          for (uint64_t j = 0; j != 6; j += 2)
            *(_WORD *)(v14 + j) = *(_WORD *)(v15 + j);
          ++v13;
          v14 += 6;
          v15 += 6;
        }
        while (v13 != 3);
      }
    }
  }
  else
  {
    uint64_t v17 = *(unsigned int *)(a2 + 8);
    uint64_t v18 = *(unsigned int *)(a2 + 12);
    uint64_t v19 = [v8 newBufferWithLength:8 * (int)v17 * (int)v18 * v5 options:0];
    int v20 = *(void **)(a1 + 712);
    *(void *)(a1 + 712) = v19;

    uint64_t result = [*(id *)(a1 + 712) contents];
    if ((int)v3 >= 1)
    {
      int v21 = 0;
      unsigned int v22 = 0;
      do
      {
        if ((int)v18 >= 1)
        {
          uint64_t v23 = 0;
          int v24 = (v22 & 3) + 4 * v18 * v17 * (v22 >> 2);
          int v25 = v21;
          do
          {
            if ((int)v17 >= 1)
            {
              int32x2_t v26 = (__int16 *)(v6 + 2 * v25);
              int v27 = v24;
              uint64_t v28 = v17;
              do
              {
                __int16 v29 = *v26++;
                *(_WORD *)(result + 2 * v27) = v29;
                v27 += 4;
                --v28;
              }
              while (v28);
            }
            ++v23;
            v24 += 4 * v17;
            v25 += v17;
          }
          while (v23 != v18);
        }
        ++v22;
        v21 += v18 * v17;
      }
      while (v22 != v3);
    }
  }
  return result;
}

void sub_1926A7824(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::blob_not_found_error>(const char *a1)
{
}

void Espresso::MetalLowmemEngine::depthwise_convolution_kernel::~depthwise_convolution_kernel(id *this)
{
  Espresso::MetalLowmemEngine::depthwise_convolution_kernel::~depthwise_convolution_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *this = &unk_1EE34AD98;

  uint64_t v2 = (std::__shared_weak_count *)this[76];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[74];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)this[72];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::space_to_depth_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_space_to_depth_kernel::kernel_type_str(Espresso::generic_space_to_depth_kernel *this)
{
  return "space_to_depth";
}

BOOL Espresso::MetalLowmemEngine::space_to_depth_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284) != 0;
}

void Espresso::MetalLowmemEngine::space_to_depth_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  int v7 = **a4;
  if (v7) {
  else
  }
    int v8 = 0;
  uint64_t v9 = **a3;
  if (v9) {
  else
  }
    int v10 = 0;
  int v11 = v10[4];
  int v13 = v11 - 1;
  BOOL v12 = v11 < 1;
  int v14 = v11 + 2;
  if (!v12) {
    int v14 = v13;
  }
  if (v10[5] != v8[5])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v15 = (v14 >> 2) + 1;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v36, *a2);
  id v16 = v36[0];
  *(void *)&long long v17 = *((void *)v10 + 1);
  uint64_t v18 = *((void *)v8 + 1);
  int v19 = v10[5];
  unsigned int v31 = v15;
  int v32 = v19;
  int v20 = v8[4];
  int v21 = v20 - 1;
  if (v20 < 1) {
    int v21 = v20 + 2;
  }
  *((void *)&v17 + 1) = v18;
  long long v30 = v17;
  int v33 = v20;
  int v35 = (v21 >> 2) + 1;
  int v34 = v10[4];
  if (!*(void *)(a1 + 320))
  {
    unsigned int v22 = *(Espresso::context_metal **)(a1 + 8);
    objc_msgSend(NSString, "stringWithFormat:", @"%d", *(unsigned int *)(a1 + 280));
    uint64_t v23 = (NSString *)objc_claimAutoreleasedReturnValue();
    int v24 = (MTLFunctionConstantValues *)objc_opt_new();
    [(MTLFunctionConstantValues *)v24 setConstantValue:a1 + 280 type:29 atIndex:0];
    [(MTLFunctionConstantValues *)v24 setConstantValue:a1 + 288 type:29 atIndex:1];
    if (*(_DWORD *)(a1 + 284)) {
      int v25 = @"depth_to_space";
    }
    else {
      int v25 = @"space_to_depth";
    }
    uint64_t v26 = Espresso::context_metal::kernel_for_function(v22, &v25->isa, v23, v24);
    int v27 = *(void **)(a1 + 320);
    *(void *)(a1 + 320) = v26;

    if (!*(void *)(a1 + 320))
    {
      __int16 v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Kernel not found");
      __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v16, "setComputePipelineState:");
  [v16 setTexture:*((void *)v10 + 21) atIndex:0];
  [v16 setTexture:*((void *)v8 + 21) atIndex:1];
  [v16 setBytes:&v30 length:36 atIndex:0];
  dispatch_auto_threadgroupsize(v16, v10[2], v10[3], v15, v10[6] * v10[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v36);
}

void sub_1926A7C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  __cxa_free_exception(v18);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a17);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_slice_kernel::kernel_type_str(Espresso::generic_slice_kernel *this)
{
  return "slice";
}

BOOL Espresso::MetalLowmemEngine::slice_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 296) && *(_DWORD *)(a1 + 280) < 5;
}

void Espresso::MetalLowmemEngine::slice_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 296)) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Dynamic slice on metal");
  }
  int v7 = **a4;
  if (v7) {
  else
  }
    int v8 = 0;
  uint64_t v9 = **a3;
  if (v9) {
  else
  }
    int v10 = 0;
  int v11 = v10[4];
  int v13 = v11 - 1;
  BOOL v12 = v11 < 1;
  int v14 = v11 + 2;
  if (v12) {
    int v15 = v14;
  }
  else {
    int v15 = v13;
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v56, *a2);
  id v16 = v56[0];
  unint64_t v54 = 0xFFFFFFFF00000000;
  int v55 = 1;
  uint64_t v40 = *((void *)v10 + 1);
  int v17 = v10[4];
  int v18 = v17 - 1;
  if (v17 < 1) {
    int v18 = v17 + 2;
  }
  int v41 = v10[4];
  int v42 = (v18 >> 2) + 1;
  int v19 = v10[6];
  int v43 = v10[5];
  int v44 = v19;
  int v45 = v19 * v43;
  int v20 = v8[2];
  int v46 = v20;
  int v21 = v8[3];
  int v47 = v21;
  int v22 = v8[4];
  int v23 = v22 - 1;
  if (v22 < 1) {
    int v23 = v22 + 2;
  }
  int v48 = v8[4];
  int v49 = (v23 >> 2) + 1;
  int v50 = v8[5];
  int v51 = v8[6];
  int v52 = v51 * v20;
  uint64_t v24 = *(int *)(a1 + 280);
  int v53 = *(_DWORD *)(a1 + 280);
  signed int v25 = *(_DWORD *)(a1 + 284);
  v57[0] = v20;
  v57[1] = v21;
  v57[2] = v22;
  v57[3] = v50;
  v57[4] = v51;
  if (v25 < 0)
  {
    if ((int)v24 > 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid axis passed to slice kernel.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v25 += v57[v24];
  }
  int v26 = *(_DWORD *)(a1 + 292);
  if (v26 < 0)
  {
    int v27 = v57[v24];
    if (!v25) {
      signed int v25 = v27;
    }
    if (v25 >= v27) {
      signed int v25 = v27;
    }
    --v25;
  }
  unint64_t v54 = __PAIR64__(*(_DWORD *)(a1 + 288), v25);
  int v55 = v26;
  if (!*(void *)(a1 + 328))
  {
    uint64_t v28 = *(Espresso::context_metal **)(a1 + 8);
    objc_msgSend(NSString, "stringWithFormat:", @"%d", 0);
    __int16 v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    long long v30 = (MTLFunctionConstantValues *)objc_opt_new();
    unsigned int v31 = @"TARR_slice_y";
    switch(*(_DWORD *)(a1 + 280))
    {
      case 0:
        unsigned int v31 = @"TARR_slice_x";
        goto LABEL_32;
      case 1:
        goto LABEL_32;
      case 2:
        if (*(_DWORD *)(a1 + 292) == 1 && (*(unsigned char *)(a1 + 284) & 3) == 0) {
          unsigned int v31 = @"slice_k_fast";
        }
        else {
          unsigned int v31 = @"slice_k_slow";
        }
        goto LABEL_32;
      case 3:
        unsigned int v31 = @"TARR_slice_n";
        goto LABEL_32;
      case 4:
        unsigned int v31 = @"TARR_slice_seq";
LABEL_32:
        uint64_t v32 = Espresso::context_metal::kernel_for_function(v28, &v31->isa, v29, v30);
        int v33 = *(void **)(a1 + 328);
        *(void *)(a1 + 328) = v32;

        break;
      default:
        break;
    }

    if (!*(void *)(a1 + 328))
    {
      int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v38, *(_DWORD *)(a1 + 280));
      uint64_t v36 = std::string::insert(&v38, 0, "Slice kernel not found: ");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v35, &v39);
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v16, "setComputePipelineState:");
  [v16 setTexture:*((void *)v10 + 21) atIndex:0];
  [v16 setTexture:*((void *)v8 + 21) atIndex:1];
  [v16 setBytes:&v40 length:72 atIndex:0];
  dispatch_auto_threadgroupsize(v16, v10[2], v10[3], (v15 >> 2) + 1, v10[6] * v10[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v56);
}

void sub_1926A8130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v33 & 1) == 0)
    {
LABEL_8:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::slice_kernel::~slice_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[40];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[40];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::spatial_transformer_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_spatial_transformer_kernel::kernel_type_str(Espresso::generic_spatial_transformer_kernel *this)
{
  return "spatial_transformer";
}

BOOL Espresso::MetalLowmemEngine::spatial_transformer_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_DWORD *)(a1 + 300) == 0;
}

void Espresso::MetalLowmemEngine::spatial_transformer_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (((*((_DWORD *)a4 + 2) - *a4) & 0xFFFF0) != 0x20) {
    Espresso::throw_exception_selector<Espresso::generic_error>("spatial_transformer_kernel: requires two inputs");
  }
  if (*(void *)v4) {
  else
  }
    int v8 = 0;
  uint64_t v9 = *(const void **)(v4 + 16);
  if (v9) {
  else
  }
    int v10 = 0;
  int v11 = **a3;
  if (v11)
  {
    if (v8) {
      goto LABEL_10;
    }
LABEL_32:
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state in spatial_transformer_kernel: src_cpu_blob ptr is nil");
  }
  BOOL v12 = 0;
  if (!v8) {
    goto LABEL_32;
  }
LABEL_10:
  if (!v10) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state in spatial_transformer_kernel: theta_blob ptr is nil");
  }
  if (!v12) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state in spatial_transformer_kernel: dst_blob ptr is nil");
  }
  if (v12[1].i32[0] <= 1) {
    Espresso::throw_exception_selector<Espresso::generic_error>("spatial_transformer_kernel: dst width must be greater than 1");
  }
  if (v12[1].i32[1] <= 1) {
    Espresso::throw_exception_selector<Espresso::generic_error>("spatial_transformer_kernel: dst height must be greater than 1");
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v44, *a2);
  id v13 = v44[0];
  int v14 = v12[2].i32[0];
  __int32 v15 = v12[2].i32[1];
  int v17 = v14 - 1;
  BOOL v16 = v14 < 1;
  int v18 = v14 + 2;
  if (!v16) {
    int v18 = v17;
  }
  unsigned int v19 = (v18 >> 2) + 1;
  int32x2_t v20 = v12[1];
  unsigned int v40 = v19;
  uint64_t v21 = v8[1];
  v39[0] = v20;
  v39[1] = v21;
  __int32 v42 = v15;
  int v22 = v10[4];
  int v23 = v22 & 1;
  if (v22 < 0) {
    int v23 = -v23;
  }
  BOOL v43 = v23;
  int v24 = *(_DWORD *)(a1 + 280);
  if ((v24 & 0xFFFFFFFE) == 2) {
    BOOL v43 = (v22 & 1) == 0;
  }
  __asm { FMOV            V1.2S, #-1.0 }
  float32x2_t v30 = vadd_f32(vcvt_f32_s32(v20), _D1);
  __asm { FMOV            V1.2S, #1.0 }
  int32x2_t v41 = vrev64_s32((int32x2_t)vdiv_f32(_D1, v30));
  if (!*(void *)(a1 + 312))
  {
    if (v24 == 1)
    {
      uint64_t v32 = *(Espresso::context_metal **)(a1 + 8);
      if ((*(unsigned int (**)(int32x2_t *))(*(void *)v12 + 32))(v12)) {
        int v33 = @"general_spatial_transformer_affine_f16";
      }
      else {
        int v33 = @"general_spatial_transformer_affine_f32";
      }
      uint64_t v34 = Espresso::context_metal::kernel_for_function(v32, &v33->isa);
      int v35 = *(void **)(a1 + 312);
      *(void *)(a1 + 312) = v34;

      int v24 = *(_DWORD *)(a1 + 280);
    }
    if ((v24 & 0xFFFFFFFE) == 2) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Linear homography methods not implemented as metal kernel for spatial transformer.");
    }
    if (!*(void *)(a1 + 312)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Spatial transformer metal kernel not found");
    }
  }
  uint64_t v36 = [*(id *)(*(void *)(a1 + 8) + 144) newBufferWithBytes:v39 length:36 options:0];
  long long v37 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v36;

  [v13 setComputePipelineState:*(void *)(a1 + 312)];
  [v13 setTexture:*(void *)&v12[21] atIndex:0];
  [v13 setTexture:v8[21] atIndex:1];
  [v13 setTexture:*((void *)v10 + 21) atIndex:2];
  [v13 setBuffer:*(void *)(a1 + 304) offset:0 atIndex:0];
  int v38 = v12[3].i32[0];
  if (v38 <= 1) {
    int v38 = 1;
  }
  dispatch_auto_threadgroupsize(v13, v12[1].u32[0], v12[1].u32[1], v19, v38 * v12[2].i32[1]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v44);
}

void sub_1926A8648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::spatial_transformer_kernel::~spatial_transformer_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::generic_transplant_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 368);
  *a2 = *(void *)(this + 360);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::generic_transplant_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 352);
  *a2 = *(void *)(this + 344);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::transplant_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::generic_transplant_kernel::get_weights_blob(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

const char *Espresso::generic_transplant_kernel::kernel_type_str(Espresso::generic_transplant_kernel *this)
{
  return "transplant";
}

BOOL Espresso::MetalLowmemEngine::transplant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v4 = a2[1];
    if (v4 != 6)
    {
      if (v4 == 16) {
        return *(void *)*a2 == 0x726F6E6863746162 && *(void *)(*a2 + 8) == 0x736D617261705F6DLL;
      }
      return 0;
    }
    a2 = (uint64_t *)*a2;
    return *(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 6) {
    return *(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556;
  }
  if (v2 != 16) {
    return 0;
  }
  return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL;
}

void Espresso::MetalLowmemEngine::transplant_kernel::on_resized(Espresso::MetalLowmemEngine::transplant_kernel *this, uint64_t **a2, Espresso::layer_data *a3)
{
  if ((char *)a2[1] - (char *)*a2 != 32) {
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant kernel must have two outputs!");
  }
  if (*((void *)a3 + 1) - *(void *)a3 != 32) {
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant kernel must have two inputs!");
  }
  uint64_t v3 = **a2;
  if (*(int *)(v3 + 20) >= 2) {
    Espresso::throw_exception_selector<Espresso::generic_error>("transplant kernel does not support n > 1");
  }
  int v6 = *(_DWORD *)(v3 + 16);
  int v8 = v6 - 1;
  BOOL v7 = v6 < 1;
  int v9 = v6 + 2;
  if (!v7) {
    int v9 = v8;
  }
  *((_DWORD *)this + 78) = (v9 >> 2) + 1;
  if (!*((void *)this + 53))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_params");
    Espresso::MetalLowmemEngine::transplant_kernel::__set_weight_raw_blob((uint64_t)this, (uint64_t *)__p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!*((void *)this + 52))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "shifts");
    Espresso::MetalLowmemEngine::transplant_kernel::__set_weight_raw_blob((uint64_t)this, (uint64_t *)__p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!*((void *)this + 50))
  {
    int v10 = (const void **)*a2;
    if (*v10)
    {
      if (v11)
      {
        BOOL v12 = v11;
        id v13 = (std::__shared_weak_count *)v10[1];
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v14 = objc_opt_new();
        BOOL v21 = *((_DWORD *)this + 77) == 0;
        [v14 setConstantValue:&v21 type:29 atIndex:0];
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        if ((*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12)) {
          __int32 v15 = @"TARR_transplant_f16_pack4";
        }
        else {
          __int32 v15 = @"TARR_transplant_f32_pack4";
        }
        objc_storeStrong((id *)this + 51, v15);
        uint64_t v16 = *((void *)this + 1);
        uint64_t v17 = [*((id *)this + 51) UTF8String];
        if (v23 >= 0) {
          int v18 = __p;
        }
        else {
          int v18 = (void **)__p[0];
        }
        uint64_t v19 = [*(id *)(v16 + 160) kernelForFunction:v17 cacheString:v18 withConstants:v14];
        int32x2_t v20 = (void *)*((void *)this + 50);
        *((void *)this + 50) = v19;

        if (v23 < 0) {
          operator delete(__p[0]);
        }

        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
      }
    }
  }
}

void sub_1926A8A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::transplant_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (v6 != 6)
    {
      if (v6 == 16 && *(void *)*a2 == 0x726F6E6863746162 && *(void *)(*a2 + 8) == 0x736D617261705F6DLL) {
        goto LABEL_16;
      }
LABEL_54:
      Espresso::throw_exception_selector<Espresso::generic_error>("Invalid weights name found for transplant kernel.");
    }
    uint64_t v4 = (uint64_t *)*a2;
  }
  else
  {
    uint64_t v4 = a2;
    if (v3 != 6)
    {
      if (v3 != 16) {
        goto LABEL_54;
      }
      if (*a2 != 0x726F6E6863746162 || a2[1] != 0x736D617261705F6DLL) {
        goto LABEL_54;
      }
LABEL_16:
      int v8 = (void **)(a1 + 424);
      if ((v3 & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_26;
    }
  }
  int v12 = *(_DWORD *)v4;
  int v13 = *((unsigned __int16 *)v4 + 2);
  if (v12 != 1718184051 || v13 != 29556) {
    goto LABEL_54;
  }
  int v8 = (void **)(a1 + 416);
  if ((v3 & 0x80) == 0)
  {
LABEL_17:
    int v9 = a2;
    if (v3 != 16)
    {
      int v10 = 0;
      size_t v11 = 0;
      goto LABEL_33;
    }
    goto LABEL_28;
  }
LABEL_26:
  uint64_t v15 = a2[1];
  if (v15 != 16)
  {
    int v10 = 0;
    size_t v11 = 0;
    goto LABEL_39;
  }
  int v9 = (uint64_t *)*a2;
LABEL_28:
  uint64_t v17 = *v9;
  uint64_t v16 = v9[1];
  if (v17 == 0x726F6E6863746162 && v16 == 0x736D617261705F6DLL)
  {
    uint64_t v19 = *(void *)(a1 + 360);
    if (!v19) {
      Espresso::throw_exception_selector<Espresso::generic_error>("No batchnorm params in transplant kernel");
    }
    int v10 = *(const void **)(v19 + 16);
    size_t v11 = 4 * *(int *)(v19 + 8);
    if ((v3 & 0x80) == 0)
    {
LABEL_33:
      if (v3 != 6) {
        goto LABEL_48;
      }
      goto LABEL_41;
    }
  }
  else
  {
    size_t v11 = 0;
    int v10 = 0;
    if ((v3 & 0x80) == 0) {
      goto LABEL_33;
    }
  }
  uint64_t v15 = a2[1];
LABEL_39:
  if (v15 != 6) {
    goto LABEL_48;
  }
  a2 = (uint64_t *)*a2;
LABEL_41:
  if (*(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556)
  {
    uint64_t v21 = *(void *)(a1 + 344);
    if (!v21) {
      Espresso::throw_exception_selector<Espresso::generic_error>("No shifts data in transplant kernel");
    }
    int v10 = *(const void **)(v21 + 16);
    size_t v11 = 4 * *(int *)(v21 + 8);
  }
LABEL_48:
  size_t v22 = (uint64_t)*(int *)(a1 + 312) << 6;
  char v23 = (char *)malloc_type_calloc(v22, 1uLL, 0x5E841840uLL);
  if (!v23) {
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory.");
  }
  int v24 = v23;
  memcpy(v23, v10, v11);
  if ((int)(v11 >> 2) < (int)(v22 >> 2)) {
    memset_pattern16(&v24[4 * (int)(v11 >> 2)], &unk_192DCA930, 4 * ((v22 >> 2) + ~(v11 >> 2)) + 4);
  }
  uint64_t v25 = [*(id *)(v2 + 144) newBufferWithBytes:v24 length:v22 options:0];
  int v26 = *v8;
  *int v8 = (void *)v25;

  free(v24);
}

void Espresso::throw_exception_selector<Espresso::memory_error>(const char *a1)
{
}

void Espresso::abstract_kernel_with_weights<Espresso::transplant_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::MetalLowmemEngine::transplant_kernel::__launch(void *a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  if (!a1[53] || !a1[52] || !a1[50])
  {
    (*(void (**)(void *, const void ***, const void ***))(*a1 + 80))(a1, a3, a4);
    if (!a1[53]) {
      Espresso::throw_exception_selector<Espresso::generic_error>("batchnorm coefficients required for transplant kernel");
    }
    if (!a1[52]) {
      Espresso::throw_exception_selector<Espresso::generic_error>("shifts required for transplant kernel");
    }
  }
  if (!a1[50]) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("kernel not found in transplant_kernel");
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v33, *a2);
  id v8 = v33[0];
  int v9 = *a4;
  int v10 = **a4;
  if (v10)
  {
    if (v11)
    {
      int v12 = (std::__shared_weak_count *)v9[1];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        int v9 = *a4;
      }
    }
    else
    {
      int v12 = 0;
    }
  }
  else
  {
    int v12 = 0;
    size_t v11 = 0;
  }
  int v13 = v9[2];
  uint64_t v32 = v12;
  if (!v13)
  {
    int v14 = 0;
    goto LABEL_18;
  }
  if (!v14)
  {
LABEL_18:
    uint64_t v15 = 0;
    goto LABEL_19;
  }
  uint64_t v15 = (std::__shared_weak_count *)v9[3];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  uint64_t v16 = *a3;
  uint64_t v17 = **a3;
  if (!v17)
  {
    int v18 = 0;
    goto LABEL_24;
  }
  if (!v18)
  {
LABEL_24:
    uint64_t v19 = 0;
    goto LABEL_25;
  }
  uint64_t v19 = (std::__shared_weak_count *)v16[1];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *a3;
  }
LABEL_25:
  int32x2_t v20 = v16[2];
  if (!v20)
  {
    uint64_t v21 = 0;
    goto LABEL_30;
  }
  if (!v21)
  {
LABEL_30:
    size_t v22 = 0;
    goto LABEL_31;
  }
  size_t v22 = (std::__shared_weak_count *)v16[3];
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_31:
  [v8 setComputePipelineState:a1[50]];
  [v8 setTexture:v18[21] atIndex:0];
  [v8 setTexture:v21[21] atIndex:1];
  [v8 setTexture:v11[21] atIndex:2];
  [v8 setTexture:v14[21] atIndex:3];
  [v8 setBuffer:a1[53] offset:0 atIndex:0];
  [v8 setBuffer:a1[52] offset:0 atIndex:1];
  [v8 setBytes:a1 + 38 length:20 atIndex:2];
  char v23 = **a3;
  int v24 = v23[4];
  int v25 = v23[5];
  int v27 = v24 - 1;
  BOOL v26 = v24 < 1;
  int v28 = v24 + 2;
  if (!v26) {
    int v28 = v27;
  }
  unsigned int v29 = v23[2];
  unsigned int v30 = v23[3];
  int v31 = v23[6];
  if (v31 <= 1) {
    int v31 = 1;
  }
  dispatch_auto_threadgroupsize(v8, v29, v30, (v28 >> 2) + 1, v31 * v25);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v33);
}

void sub_1926A91C0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
    if (!v5)
    {
LABEL_3:
      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v5)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v5);
  if (!v4)
  {
LABEL_5:
    if (a3) {
      nitro::nitro_function::nitro_function(a3);
    }

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
    _Unwind_Resume(a1);
  }
LABEL_4:
  nitro::nitro_function::nitro_function(v4);
  goto LABEL_5;
}

void Espresso::MetalLowmemEngine::transplant_kernel::~transplant_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[49];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::generic_transplant_kernel::~generic_transplant_kernel((Espresso::generic_transplant_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[49];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_transplant_kernel::~generic_transplant_kernel((Espresso::generic_transplant_kernel *)this);
}

const char *Espresso::generic_transpose_kernel::kernel_type_str(Espresso::generic_transpose_kernel *this)
{
  return "transpose";
}

BOOL Espresso::MetalLowmemEngine::transpose_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    return 0;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a3;
  if (a3[1] - *a3 == 64)
  {
    *(_OWORD *)int v10 = *(_OWORD *)v7;
    *(_OWORD *)&v10[16] = *(_OWORD *)(v7 + 16);
    std::string __p = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v7 + 40), *(void *)(v7 + 48), (uint64_t)(*(void *)(v7 + 48) - *(void *)(v7 + 40)) >> 2);
    if (*(_DWORD *)(a1 + 292) == 3)
    {
      BOOL v8 = 0;
      if (*(_DWORD *)(a1 + 296) == 4) {
        BOOL v8 = *(void *)&v10[12] == 0x100000001;
      }
    }
    else
    {
      BOOL v8 = 0;
    }
    if (__p)
    {
      int v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v8;
}

void sub_1926A9438(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::transpose_kernel::on_resized(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] - *a3 != 16) {
    return;
  }
  uint64_t v5 = *a2;
  if (a2[1] - *a2 != 16) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)v3)
  {
    if (v8)
    {
      int v9 = *(std::__shared_weak_count **)(v3 + 8);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v5 = *a2;
      }
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  int v9 = 0;
LABEL_9:
  if (*(void *)v5)
  {
    if (v10)
    {
      size_t v11 = v10;
      int v12 = *(std::__shared_weak_count **)(v5 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7 && v8 && !*(void *)(a1 + 328))
      {
        if ((*(unsigned int (**)(void *))(*(void *)v10 + 32))(v10)
          || (*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8))
        {
          if ((*(unsigned int (**)(void *))(*(void *)v11 + 32))(v11) != 1
            || (*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8) != 1)
          {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("src, dst must have matching compute paths.");
          }
          uint64_t v13 = "TARR_transpose_kernel_f16_pack4";
        }
        else
        {
          uint64_t v13 = "TARR_transpose_kernel_f32_pack4";
        }
        uint64_t v14 = [*(id *)(v7 + 160) kernelForFunction:v13 cacheString:0 withConstants:0];
        uint64_t v15 = *(void **)(a1 + 328);
        *(void *)(a1 + 328) = v14;
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
    }
  }
  if (v9)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1926A96D0(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::transpose_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 328))
  {
    (*(void (**)(uint64_t, const void ***, uint64_t *))(*(void *)a1 + 80))(a1, a3, a4);
    if (!*(void *)(a1 + 328)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel in transpose");
    }
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v61, *a2);
  id v8 = v61[0];
  uint64_t v9 = *a4;
  if (*(void *)v9)
  {
    if (v10)
    {
      size_t v11 = *(std::__shared_weak_count **)(v9 + 8);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      size_t v11 = 0;
    }
  }
  else
  {
    size_t v11 = 0;
    int v10 = 0;
  }
  int v12 = *a3;
  uint64_t v13 = **a3;
  if (v13)
  {
    if (v14)
    {
      uint64_t v15 = (std::__shared_weak_count *)v12[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v58 = 0;
  long long v48 = *(_OWORD *)(a1 + 280);
  int v16 = *(_DWORD *)(a1 + 296);
  uint64_t v17 = (char *)operator new(0x14uLL);
  int v18 = v17;
  uint64_t v19 = 0;
  *(_OWORD *)uint64_t v17 = v48;
  *((_DWORD *)v17 + 4) = v16;
  int32x2_t v20 = v17 + 20;
  while (*(_DWORD *)&v17[4 * v19])
  {
    if (++v19 == 5)
    {
      uint64_t v21 = v17 + 20;
      goto LABEL_20;
    }
  }
  uint64_t v21 = &v17[4 * v19];
LABEL_20:
  uint64_t v22 = 0;
  unint64_t v23 = (unint64_t)(v21 - v17) >> 2;
  while (*(_DWORD *)&v17[4 * v22] != 1)
  {
    if (++v22 == 5)
    {
      int v24 = v17 + 20;
      goto LABEL_25;
    }
  }
  int v24 = &v17[4 * v22];
LABEL_25:
  uint64_t v25 = 0;
  unint64_t v26 = (unint64_t)(v24 - v17) >> 2;
  while (*(_DWORD *)&v17[4 * v25] != 2)
  {
    if (++v25 == 5)
    {
      int v27 = v17 + 20;
      goto LABEL_30;
    }
  }
  int v27 = &v17[4 * v25];
LABEL_30:
  uint64_t v28 = 0;
  unint64_t v29 = (unint64_t)(v27 - v17) >> 2;
  while (*(_DWORD *)&v17[4 * v28] != 3)
  {
    if (++v28 == 5)
    {
      unsigned int v30 = v17 + 20;
      goto LABEL_35;
    }
  }
  unsigned int v30 = &v17[4 * v28];
LABEL_35:
  uint64_t v31 = 0;
  unint64_t v32 = (unint64_t)(v30 - v17) >> 2;
  while (*(_DWORD *)&v17[4 * v31] != 4)
  {
    if (++v31 == 5) {
      goto LABEL_40;
    }
  }
  int32x2_t v20 = &v17[4 * v31];
LABEL_40:
  v49[0] = v23;
  v49[1] = v26;
  v49[2] = v29;
  v49[3] = v32;
  v49[4] = (unint64_t)(v20 - v17) >> 2;
  int32x4_t v33 = *(int32x4_t *)(v10 + 12);
  int8x16_t v34 = (int8x16_t)vrev64q_s32(v33);
  int8x16_t v50 = vextq_s8(v34, v34, 8uLL);
  int v51 = *((_DWORD *)v10 + 2);
  v34.i64[0] = *(void *)(v14 + 20);
  int32x2_t v52 = vrev64_s32(*(int32x2_t *)v34.i8);
  int v53 = *((_DWORD *)v14 + 4);
  int v54 = *((_DWORD *)v14 + 3);
  int v35 = v54 * v53 * *((_DWORD *)v14 + 2);
  int v55 = *((_DWORD *)v14 + 2);
  __int32 v56 = v35 * v34.i32[0];
  int v36 = v53 + 2;
  if (v53 >= 1) {
    int v36 = v53 - 1;
  }
  int v37 = (v36 >> 2) + 1;
  int v57 = v35;
  int v38 = v33.i32[1] + 2;
  if (v33.i32[1] >= 1) {
    int v38 = v33.i32[1] - 1;
  }
  int v59 = v37;
  int v60 = (v38 >> 2) + 1;
  objc_msgSend(v8, "setComputePipelineState:", *(void *)(a1 + 328), v48);
  [v8 setTexture:*((void *)v14 + 21) atIndex:0];
  [v8 setTexture:*((void *)v10 + 21) atIndex:1];
  [v8 setBytes:v49 length:84 atIndex:0];
  std::string v39 = **a3;
  int v40 = v39[4];
  int v41 = v39[5];
  int v43 = v40 - 1;
  BOOL v42 = v40 < 1;
  int v44 = v40 + 2;
  if (!v42) {
    int v44 = v43;
  }
  unsigned int v45 = v39[2];
  unsigned int v46 = v39[3];
  int v47 = v39[6];
  if (v47 <= 1) {
    int v47 = 1;
  }
  dispatch_auto_threadgroupsize(v8, v45, v46, (v44 >> 2) + 1, v47 * v41);
  operator delete(v18);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v61);
}

void sub_1926A9AF0(_Unwind_Exception *a1)
{
  operator delete(v4);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v5 - 96));
  _Unwind_Resume(a1);
}

const char *Espresso::generic_reshape_kernel::kernel_type_str(Espresso::generic_reshape_kernel *this)
{
  return "reshape";
}

uint64_t Espresso::MetalLowmemEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    return 0;
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = Espresso::DummyMPSEngine::mps_reshape_dispatch(a3, (unsigned int *)(a1 + 280));
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v9;
}

void sub_1926A9C18(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::reshape_kernel::on_resized(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] - *a3 != 16) {
    return;
  }
  uint64_t v5 = *a2;
  if (a2[1] - *a2 != 16) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)v3)
  {
    if (v8)
    {
      uint64_t v9 = *(std::__shared_weak_count **)(v3 + 8);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v5 = *a2;
      }
      goto LABEL_9;
    }
  }
  else
  {
    id v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_9:
  if (*(void *)v5)
  {
    if (v10)
    {
      size_t v11 = v10;
      int v12 = *(std::__shared_weak_count **)(v5 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7 && v8 && !*(void *)(a1 + 344))
      {
        if ((*(unsigned int (**)(void *))(*(void *)v10 + 32))(v10)
          || (*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8))
        {
          if ((*(unsigned int (**)(void *))(*(void *)v11 + 32))(v11) != 1
            || (*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8) != 1)
          {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("src, dst must have matching compute paths.");
          }
          uint64_t v13 = "TARR_reshape_kernel_f16_pack4";
        }
        else
        {
          uint64_t v13 = "TARR_reshape_kernel_f32_pack4";
        }
        uint64_t v14 = [*(id *)(v7 + 160) kernelForFunction:v13 cacheString:0 withConstants:0];
        uint64_t v15 = *(void **)(a1 + 344);
        *(void *)(a1 + 344) = v14;
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
    }
  }
  if (v9)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1926A9EBC(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::reshape_kernel::__launch(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  if (!a1[43])
  {
    (*(void (**)(void *, const void ***, uint64_t *))(*a1 + 80))(a1, a3, a4);
    if (!a1[43]) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel in transpose");
    }
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v48, *a2);
  id v8 = v48[0];
  uint64_t v9 = *a4;
  if (*(void *)v9)
  {
    if (v10)
    {
      size_t v11 = *(std::__shared_weak_count **)(v9 + 8);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      size_t v11 = 0;
    }
  }
  else
  {
    size_t v11 = 0;
    int v10 = 0;
  }
  int v12 = *a3;
  uint64_t v13 = **a3;
  if (!v13)
  {
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  if (!v14)
  {
LABEL_14:
    uint64_t v15 = 0;
    goto LABEL_15;
  }
  uint64_t v15 = (std::__shared_weak_count *)v12[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  long long v35 = xmmword_192DAF430;
  int v36 = 4;
  int32x2_t v16 = *(int32x2_t *)(v10 + 20);
  int32x2_t v37 = vrev64_s32(v16);
  int v17 = *((_DWORD *)v10 + 4);
  int v38 = v17;
  v18.i64[0] = *((void *)v10 + 1);
  uint64_t v19 = *(void *)(v14 + 20);
  v16.i32[0] *= v18.i32[1] * v17;
  v16.i32[1] = v18.i32[1] * v17;
  int32x2_t v20 = vmul_n_s32(v16, v18.i32[0]);
  v18.i64[1] = v19;
  int32x4_t v39 = vrev64q_s32(v18);
  int v40 = *((_DWORD *)v14 + 4);
  int v41 = *((_DWORD *)v14 + 3);
  int v21 = v41 * v40 * *((_DWORD *)v14 + 2);
  int v42 = *((_DWORD *)v14 + 2);
  int v43 = v21 * v19;
  int v44 = v21;
  int v22 = v40 + 2;
  if (v40 >= 1) {
    int v22 = v40 - 1;
  }
  int v23 = (v22 >> 2) + 1;
  int v25 = v17 - 1;
  BOOL v24 = v17 < 1;
  int v26 = v17 + 2;
  if (!v24) {
    int v26 = v25;
  }
  int v46 = v23;
  int v47 = (v26 >> 2) + 1;
  int32x2_t v45 = v20;
  objc_msgSend(v8, "setComputePipelineState:", a1[43], v35);
  [v8 setTexture:*((void *)v14 + 21) atIndex:0];
  [v8 setTexture:*((void *)v10 + 21) atIndex:1];
  [v8 setBytes:&v35 length:84 atIndex:0];
  int v27 = **a3;
  int v28 = v27[4];
  int v29 = v27[5];
  int v30 = v28 - 1;
  BOOL v24 = v28 < 1;
  int v31 = v28 + 2;
  if (!v24) {
    int v31 = v30;
  }
  unsigned int v32 = v27[2];
  unsigned int v33 = v27[3];
  int v34 = v27[6];
  if (v34 <= 1) {
    int v34 = 1;
  }
  dispatch_auto_threadgroupsize(v8, v32, v33, (v31 >> 2) + 1, v34 * v29);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v48);
}

void sub_1926AA1D4(_Unwind_Exception *a1)
{
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v4 - 80));
  _Unwind_Resume(a1);
}

const char *Espresso::base_kernel::kernel_type_str(Espresso::base_kernel *this)
{
  return "?";
}

__n128 Espresso::MetalLowmemEngine::upsample_kernel::upsample_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v4 + 280) = xmmword_192DCA210;
  *(void *)(v4 + 296) = 0x100000000;
  *(unsigned char *)(v4 + 304) = 0;
  *(void *)(v4 + 308) = 0x3F8000003F800000;
  *(unsigned char *)(v4 + 316) = 1;
  *(void *)(v4 + 320) = 0;
  *(void *)(v4 + 336) = 0;
  *(void *)(v4 + 328) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v4 + 344) = _D0;
  *(void *)uint64_t v4 = &unk_1EE348E00;
  *(void *)(v4 + 352) = 0;
  *(_OWORD *)(v4 + 280) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 16);
  long long v11 = *(_OWORD *)(a3 + 32);
  long long v12 = *(_OWORD *)(a3 + 48);
  *(void *)(v4 + 344) = *(void *)(a3 + 64);
  *(_OWORD *)(v4 + 312) = v11;
  *(_OWORD *)(v4 + 328) = v12;
  *(__n128 *)(v4 + 296) = result;
  return result;
}

void *Espresso::MetalLowmemEngine::activation_kernel::activation_kernel(void *a1, uint64_t *a2, int a3, long long *a4)
{
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *(void *)(v7 + 288) = 0;
  *(void *)(v7 + 296) = 0;
  *(void *)(v7 + 280) = v7 + 288;
  *(_DWORD *)(v7 + 304) = 0;
  *(void *)(v7 + 308) = 0x3F8000003F800000;
  *(void *)(v7 + 316) = 0;
  *(void *)(v7 + 332) = 0;
  *(void *)(v7 + 324) = 0;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(void *)uint64_t v7 = &unk_1EE349108;
  *(_DWORD *)(v7 + 392) = a3;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(void *)(v7 + 432) = 0;
  long long v8 = *a4;
  long long v9 = a4[1];
  *(_DWORD *)(v7 + 336) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(v7 + 304) = v8;
  *(_OWORD *)(v7 + 320) = v9;
  int v10 = (void *)a1[52];
  a1[52] = 0;

  long long v11 = (void *)a1[53];
  a1[53] = 0;

  long long v12 = (void *)a1[54];
  a1[54] = 0;

  return a1;
}

void Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

uint64_t Espresso::MetalLowmemEngine::transplant_kernel::transplant_kernel(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = v5 + 288;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 304) = 0;
  *(void *)(v5 + 312) = 0;
  *(void *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 320) = 0;
  *(void *)(v5 + 384) = 0;
  *(void *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(unsigned char *)(v5 + 376) = 0;
  *(void *)uint64_t v5 = &unk_1EE349400;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  long long v6 = *a3;
  *(_DWORD *)(v5 + 320) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(v5 + 304) = v6;
  uint64_t v7 = *(void **)(a1 + 416);
  *(void *)(a1 + 416) = 0;

  return a1;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_rnn_arch_kernel::kernel_type_str(Espresso::generic_rnn_arch_kernel *this)
{
  return "rnn_arch";
}

uint64_t Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  if (*(_DWORD *)(a1 + 440) != 1)
  {
    uint64_t v4 = a2[1];
    v29[0] = *a2;
    v29[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: RNN arch encoder expected");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v29, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 444))
  {
    uint64_t v4 = a2[1];
    v22[0] = *a2;
    v22[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: override eng is illegal");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v22, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
LABEL_9:
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    int v30 = (void **)&v27;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
    int v30 = (void **)&v26;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 456))
  {
    uint64_t v4 = a2[1];
    v21[0] = *a2;
    v21[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: nd_mode must be false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 457))
  {
    uint64_t v4 = a2[1];
    v20[0] = *a2;
    v20[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: dynamic length not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v20, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 416) != 1)
  {
    uint64_t v4 = a2[1];
    v19[0] = *a2;
    v19[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: max batch size > 1");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v19, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_35;
  }
  if (*(float *)(a1 + 420) != 1.0)
  {
    uint64_t v4 = a2[1];
    v18[0] = *a2;
    v18[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale x[0] must be 1.f");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v18, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
LABEL_35:
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
LABEL_13:
    if (v24 < 0) {
      operator delete(__p[0]);
    }
LABEL_15:
    if (v4) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
    }
    return 0;
  }
  if (*(float *)(a1 + 424) != 0.0)
  {
    uint64_t v4 = a2[1];
    v17[0] = *a2;
    v17[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale x[1] must be 0.f");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v17, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_35;
  }
  if (*(float *)(a1 + 428) != 1.0)
  {
    uint64_t v4 = a2[1];
    v16[0] = *a2;
    v16[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale h[0] must be 1.f");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v16, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_35;
  }
  if (*(float *)(a1 + 432) != 0.0)
  {
    uint64_t v4 = a2[1];
    v15[0] = *a2;
    v15[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization scale h[1] must be 0.f");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v15, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_35;
  }
  if (*(unsigned char *)(a1 + 436))
  {
    uint64_t v4 = a2[1];
    v14[0] = *a2;
    v14[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization simple mode must be false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 396))
  {
    uint64_t v4 = a2[1];
    v13[0] = *a2;
    v13[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: quantization mode != 0");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v25, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&v25);
    goto LABEL_35;
  }
  int v7 = *(_DWORD *)(a1 + 304);
  switch(v7)
  {
    case 0:
      long long v11 = *a2;
      uint64_t v4 = a2[1];
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_lstm((_DWORD *)a1, v11, v4, a3);
      goto LABEL_15;
    case 2:
      long long v12 = *a2;
      long long v9 = a2[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->i64[1], 1uLL, memory_order_relaxed);
      }
      uint64_t is_valid_gru = Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_gru(a1, v12, v9, a3);
      break;
    case 1:
      long long v8 = *a2;
      long long v9 = a2[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->i64[1], 1uLL, memory_order_relaxed);
      }
      uint64_t is_valid_gru = Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_rnn(a1, v8, v9, a3);
      break;
    default:
      return 0;
  }
  uint64_t v5 = is_valid_gru;
  if (v9) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v9);
  }
  return v5;
}

void sub_1926AA978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(Espresso::base_kernel::validate_for_engine_warning_t *this)
{
  uint64_t v2 = (void **)((char *)this + 24);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (void **)((char *)this + 48);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = v2;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_rnn(uint64_t a1, int64x2_t *a2, int64x2_t *a3, void *a4)
{
  if (a4[1] - *a4 != 128)
  {
    v21[0] = a2;
    v21[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 inputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (a4[4] - a4[3] != 128)
  {
    v14[0] = a2;
    v14[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 outputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (!*(_DWORD *)(a1 + 448))
  {
    v13[0] = a2;
    v13[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: encoder_output_sequence is false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (*(_DWORD *)(a1 + 452))
  {
    v12[0] = a2;
    v12[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(RNN_BIDIRECTIONAL_NONE) for encoder_bidirectional_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_21:
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    int v22 = (void **)&v19;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
    int v22 = (void **)&v18;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_25;
  }
  if (*(float *)(a1 + 388) != 1.0)
  {
    v11[0] = a2;
    v11[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(1.0f) for lstm_forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v10[0] = a2;
    v10[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for lstm_has_peepholes");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else if (*(_DWORD *)(a1 + 404))
  {
    v9[0] = a2;
    v9[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v9, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else if (*(_DWORD *)(a1 + 412))
  {
    v8[0] = a2;
    v8[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(1) for coupled_input_forget");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v8, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    if (*(float *)(a1 + 408) == 50.0) {
      return 1;
    }
    v7[0] = a2;
    v7[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(50.0f) for cell_clip_threshold");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v7, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_25:
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (a3) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a3);
  }
  return 0;
}

void sub_1926AAE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a31);
  if (a30 < 0) {
    operator delete(__p);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_lstm(_DWORD *a1, int64x2_t *a2, int64x2_t *a3, void *a4)
{
  uint64_t v6 = (uint64_t)(a4[1] - *a4) >> 6;
  if (v6 != 3 && v6 != 5)
  {
    v21[0] = a2;
    v21[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 3 or 5 inputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_21:
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    int v22 = (void **)&v19;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
    int v22 = (void **)&v18;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_25;
  }
  uint64_t v8 = (uint64_t)(a4[4] - a4[3]) >> 6;
  if (v8 != 3 && v8 != 5)
  {
    v14[0] = a2;
    v14[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 3 or 5 outputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (a1[103])
  {
    v13[0] = a2;
    v13[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: cell.coupled_input_forget not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (a1[113] != 1) {
    return;
  }
  if (a1[77] != a1[86])
  {
    v12[0] = a2;
    v12[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: For Bidirectional LSTM, expecting same nonlinearity for both direction.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (a1[80] != a1[89])
  {
    v11[0] = a2;
    v11[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: For Bidirectional LSTM, expecting same internal nonlinearity for both direction.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (a1[83] == a1[92]) {
    return;
  }
  v10[0] = a2;
  v10[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "For Bidirectional LSTM, expecting same second internal nonlinearity for both direction.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v15, (uint64_t)a4, 0);
  Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_25:
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (a3) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a3);
  }
}

void sub_1926AB1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::is_valid_gru(uint64_t a1, int64x2_t *a2, int64x2_t *a3, void *a4)
{
  if (a4[1] - *a4 != 128)
  {
    v20[0] = a2;
    v20[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 inputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v20, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_13;
  }
  if (a4[4] - a4[3] != 128)
  {
    v13[0] = a2;
    v13[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: expecting 2 outputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 452))
  {
    v12[0] = a2;
    v12[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(RNN_BIDIRECTIONAL_NONE) for encoder_bidirectional_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_13:
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    int v21 = (void **)&v18;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v21);
    int v21 = (void **)&v17;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_17;
  }
  if (*(float *)(a1 + 388) != 1.0)
  {
    v11[0] = a2;
    v11[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(1.0f) for lstm_forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v10[0] = a2;
    v10[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for lstm_has_peepholes");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 404))
  {
    v9[0] = a2;
    v9[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for forget_bias");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v9, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else if (*(_DWORD *)(a1 + 412))
  {
    v8[0] = a2;
    v8[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(0) for coupled_input_forget");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v8, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    if (*(float *)(a1 + 408) == 50.0) {
      return 1;
    }
    v7[0] = a2;
    v7[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit(&a3->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::rnn_arch_kernel] unsupported: Expecting default value(50.0f) for cell_clip_threshold");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a4, 0);
    Espresso::emit_kernel_validation_warning(v7, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_17:
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (a3) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a3);
  }
  return 0;
}

void sub_1926AB58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a29);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  if (*(_DWORD *)(a1 + 304) == 2)
  {
    if (a6)
    {
      uint64_t v46 = *a6;
      if (*a6)
      {
        int v10 = (std::__shared_weak_count *)a6[1];
        if (v10)
        {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          int v11 = *(_DWORD *)(a1 + 380);
          if (*(_DWORD *)(a1 + 304)) {
            int v12 = *(_DWORD *)(a1 + 380);
          }
          else {
            int v12 = 4 * v11;
          }
LABEL_13:
          int v13 = *(_DWORD *)(a1 + 384);
          v52[0] = 0;
          v52[1] = 0;
          int v51 = v52;
          int v47 = v10;
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_x");
          uint64_t v14 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v14 + 14) = v13;
          *((_DWORD *)v14 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_x_reverse");
          char v15 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v15 + 14) = v13;
          *((_DWORD *)v15 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_h");
          char v16 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v16 + 14) = v11;
          *((_DWORD *)v16 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_h_reverse");
          uint64_t v17 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v17 + 14) = v11;
          *((_DWORD *)v17 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_z");
          uint64_t v18 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v18 + 14) = v13;
          *((_DWORD *)v18 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_r");
          uint64_t v19 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v19 + 14) = v13;
          *((_DWORD *)v19 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_o");
          int32x2_t v20 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v20 + 14) = v13;
          *((_DWORD *)v20 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "R_z");
          int v21 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v21 + 14) = v11;
          *((_DWORD *)v21 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "R_r");
          int v22 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v22 + 14) = v11;
          *((_DWORD *)v22 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "R_o");
          int v23 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v23 + 14) = v11;
          *((_DWORD *)v23 + 15) = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "b");
          char v24 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v24 + 14) = v12;
          *((_DWORD *)v24 + 15) = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
          std::string v25 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v25 + 14) = v12;
          *((_DWORD *)v25 + 15) = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "p");
          uint64_t v26 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v26 + 14) = 3 * v11;
          *((_DWORD *)v26 + 15) = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
          uint64_t v27 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v27 + 14) = 3 * v11;
          *((_DWORD *)v27 + 15) = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "B_z");
          int v28 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v28 + 14) = v12;
          *((_DWORD *)v28 + 15) = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "B_r");
          int v29 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v29 + 14) = v12;
          *((_DWORD *)v29 + 15) = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "B_o");
          int v30 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v51, &__p, (uint64_t)&__p);
          *((_DWORD *)v30 + 14) = v12;
          *((_DWORD *)v30 + 15) = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v31 = (uint64_t *)v51;
          if (v51 == v52)
          {
LABEL_88:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          while (1)
          {
            if (*((char *)v31 + 55) < 0) {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v31[4], v31[5]);
            }
            else {
              std::string __p = *(std::string *)(v31 + 4);
            }
            uint64_t v32 = *(unsigned __int8 *)(a3 + 23);
            if ((v32 & 0x80u) == 0) {
              uint64_t v33 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              uint64_t v33 = *(void *)(a3 + 8);
            }
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            if (v33 != size) {
              goto LABEL_69;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v32 & 0x80) != 0)
            {
              if (memcmp(*(const void **)a3, p_p, *(void *)(a3 + 8))) {
                goto LABEL_69;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              int v36 = (unsigned __int8 *)a3;
              while (*v36 == p_p->__r_.__value_.__s.__data_[0])
              {
                ++v36;
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v32) {
                  goto LABEL_70;
                }
              }
LABEL_69:
              BOOL v37 = Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob((_DWORD *)a1, a2, (const std::string *)a3, a4, a5, (uint64_t)a6);
              goto LABEL_79;
            }
LABEL_70:
            int v38 = *((_DWORD *)v31 + 14);
            int v39 = *((_DWORD *)v31 + 15);
            v54[0] = v46;
            v54[1] = (uint64_t)v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v55, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v54, v38, v39, 1, 1, (a4 & 0x3F) == 0);
            if (v47) {
              nitro::nitro_function::nitro_function(v47);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v53, (void *)(a1 + 8), &v55);
            int v57 = (long long *)a3;
            int v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), (void *)a3, &v57);
            int v41 = (std::__shared_weak_count *)v40[8];
            *(_OWORD *)(v40 + 7) = v53;
            if (v41) {
              nitro::nitro_function::nitro_function(v41);
            }
            if (v56) {
              nitro::nitro_function::nitro_function(v56);
            }
            BOOL v37 = 1;
LABEL_79:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v37)
            {
              if (v47)
              {
                nitro::nitro_function::nitro_function(v47);
                std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v52[0]);
                nitro::nitro_function::nitro_function(v47);
              }
              else
              {
                std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v52[0]);
              }
              return;
            }
            int v42 = (char *)v31[1];
            if (v42)
            {
              do
              {
                int v43 = (char **)v42;
                int v42 = *(char **)v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                int v43 = (char **)v31[2];
                BOOL v44 = *v43 == (char *)v31;
                int v31 = (uint64_t *)v43;
              }
              while (!v44);
            }
            int v31 = (uint64_t *)v43;
            if (v43 == v52) {
              goto LABEL_88;
            }
          }
        }
      }
    }
    else
    {
      uint64_t v46 = 0;
    }
    int v10 = 0;
    int v11 = *(_DWORD *)(a1 + 380);
    int v12 = v11;
    goto LABEL_13;
  }

  Espresso::generic_rnn_arch_kernel_impl::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
}

void sub_1926ABD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a22);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        uint64_t v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v6;
        long long v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2)) {
        break;
      }
      long long v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_9:
    int v10 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v6[6] = *(uint64_t **)(a3 + 16);
    v6[7] = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    _OWORD v6[2] = v10;
    int64x2_t *v9 = (uint64_t *)v6;
    int v11 = (uint64_t *)**a1;
    int v12 = (uint64_t *)v6;
    if (v11)
    {
      *a1 = v11;
      int v12 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

void std::__shared_ptr_emplace<Espresso::blob_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C588;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::blob<float,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF10;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel::~rnn_arch_kernel(Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel *this)
{
  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(Espresso::generic_rnn_arch_kernel_impl *this)
{
  *(void *)this = &unk_1EE363410;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>>>::__deallocate_node(*((void **)this + 107));
  uint64_t v2 = (void *)*((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v2) {
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 800);
  for (uint64_t i = 792; i != 760; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)((char *)this + i);
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
  }
  do
  {
    uint64_t v5 = *(std::__shared_weak_count **)((char *)this + i);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
    i -= 16;
  }
  while (i != 728);
  do
  {
    uint64_t v6 = *(std::__shared_weak_count **)((char *)this + i);
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    i -= 16;
  }
  while (i != 696);
  int v7 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  for (uint64_t j = 680; j != 648; j -= 16)
  {
    long long v9 = *(std::__shared_weak_count **)((char *)this + j);
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  do
  {
    int v10 = *(std::__shared_weak_count **)((char *)this + j);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    j -= 16;
  }
  while (j != 616);
  for (uint64_t k = 608; k != 576; k -= 16)
  {
    int v12 = *(std::__shared_weak_count **)((char *)this + k);
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
  do
  {
    int v13 = *(std::__shared_weak_count **)((char *)this + k);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    k -= 16;
  }
  while (k != 544);
  do
  {
    uint64_t v14 = *(std::__shared_weak_count **)((char *)this + k);
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    k -= 16;
  }
  while (k != 512);
  do
  {
    char v15 = *(std::__shared_weak_count **)((char *)this + k);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    k -= 16;
  }
  while (k != 480);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 59));
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::layer_data>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::layer_data>>,0>(uint64_t a1)
{
  std::unique_ptr<Espresso::layer_data>::reset[abi:ne180100]((void ***)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void ***std::unique_ptr<Espresso::layer_data>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

double Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)(v2 + 280) = v2 + 288;
  *(void *)uint64_t v2 = &unk_1EE3558B0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v2 + 312) = _D0;
  *(void *)(v2 + 304) = 0;
  *(void *)(v2 + 324) = 0x3F8000003F800000;
  *(_DWORD *)(v2 + 320) = 2;
  *(void *)(v2 + 336) = _D0;
  *(_DWORD *)(v2 + 332) = 0;
  *(void *)(v2 + 348) = 0x3F8000003F800000;
  *(_DWORD *)(v2 + 344) = 0;
  *(void *)(v2 + 360) = _D0;
  *(_DWORD *)(v2 + 356) = 2;
  *(void *)(v2 + 372) = 0x3F8000003F800000;
  *(_DWORD *)(v2 + 368) = 0;
  *(void *)(v2 + 380) = 512;
  *(_DWORD *)(v2 + 388) = 1065353216;
  *(_OWORD *)(v2 + 392) = xmmword_192DBFE30;
  *(void *)(v2 + 408) = 1112014848;
  *(void *)(v2 + 416) = 0x3F80000000000001;
  double result = 0.0078125;
  *(void *)(v2 + 424) = 0x3F80000000000000;
  *(void *)(v2 + 432) = 0;
  *(void *)(v2 + 440) = 0;
  *(_WORD *)(v2 + 456) = 0;
  *(void *)(v2 + 448) = 0;
  return result;
}

void Espresso::DummyMPSEngine::slice_kernel::~slice_kernel(Espresso::DummyMPSEngine::slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

const char *Espresso::generic_reduce_kernel::kernel_type_str(Espresso::generic_reduce_kernel *this)
{
  return "reduce";
}

BOOL Espresso::DummyMPSEngine::reduce_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 280) - 11) <= 1 && *(_DWORD *)(a1 + 288) == 4;
}

uint64_t Espresso::generic_reduce_kernel::number_of_top_blobs(Espresso::generic_reduce_kernel *this)
{
  if ((*((_DWORD *)this + 70) & 0xFFFFFFFE) == 6) {
    return 2;
  }
  else {
    return 1;
  }
}

void Espresso::DummyMPSEngine::reduce_kernel::~reduce_kernel(Espresso::DummyMPSEngine::reduce_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyMPSEngine::concat_kernel::~concat_kernel(Espresso::DummyMPSEngine::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 == a3[1])
  {
    BOOL v5 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1) {
        int v4 = 4;
      }
      else {
        int v4 = 5;
      }
    }
    BOOL v5 = v4 > 3;
  }
  return !*(unsigned char *)(a1 + 307) && v5;
}

void Espresso::DummyMPSEngine::softmax_kernel::~softmax_kernel(Espresso::DummyMPSEngine::softmax_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::generic_inner_product_kernel::dequantized_weights_from_ranges(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_inner_product_kernel::set_quantization_lut_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 488);
  *(void *)(a1 + 480) = v3;
  *(void *)(a1 + 488) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::generic_inner_product_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 472);
  *(void *)(a1 + 464) = v3;
  *(void *)(a1 + 472) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::generic_inner_product_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 504);
  *(void *)(a1 + 496) = v3;
  *(void *)(a1 + 504) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::generic_inner_product_kernel::get_f16_biases(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_inner_product_kernel::get_f16_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  int v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 400))(a1, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_1926AC750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_inner_product_kernel::get_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_inner_product_kernel::get_biases(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

const char *Espresso::generic_inner_product_kernel::kernel_type_str(Espresso::generic_inner_product_kernel *this)
{
  return "inner_product";
}

void Espresso::DummyMPSEngine::inner_product_kernel::~inner_product_kernel(Espresso::DummyMPSEngine::inner_product_kernel *this)
{
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSEngine::flatten_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 != 64) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  return *(_DWORD *)(a1 + 280) != 2 && v7 < 5;
}

void Espresso::DummyMPSEngine::flatten_kernel::~flatten_kernel(Espresso::DummyMPSEngine::flatten_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyMPSEngine::split_kernel::~split_kernel(Espresso::DummyMPSEngine::split_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyMPSEngine::activation_kernel::~activation_kernel(Espresso::DummyMPSEngine::activation_kernel *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::grid_sampling_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_grid_sampling_kernel::kernel_type_str(Espresso::generic_grid_sampling_kernel *this)
{
  return "grid_sampling";
}

BOOL Espresso::DummyMPSEngine::grid_sampling_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(unsigned char *)(a1 + 285) == 0;
}

void Espresso::DummyMPSEngine::grid_sampling_kernel::~grid_sampling_kernel(Espresso::DummyMPSEngine::grid_sampling_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::local_correlation_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_local_correlation_kernel::kernel_type_str(Espresso::generic_local_correlation_kernel *this)
{
  return "local_correlation";
}

uint64_t Espresso::DummyMPSEngine::local_correlation_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::DummyMPSEngine::local_correlation_kernel::~local_correlation_kernel(Espresso::DummyMPSEngine::local_correlation_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyMPSEngine::elementwise_kernel::~elementwise_kernel(Espresso::DummyMPSEngine::elementwise_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSEngine::space_to_depth_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284) != 0;
}

void Espresso::DummyMPSEngine::space_to_depth_kernel::~space_to_depth_kernel(Espresso::DummyMPSEngine::space_to_depth_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::softmax_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_softmax_nd_kernel::kernel_type_str(Espresso::generic_softmax_nd_kernel *this)
{
  return "softmax_nd";
}

BOOL Espresso::DummyMPSEngine::softmax_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 != 64) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  BOOL result = 0;
  int v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
  if (v5 >= 0 && v5 < v8) {
    return v8 + ~v5 == 2 && v8 > 3;
  }
  return result;
}

void Espresso::DummyMPSEngine::softmax_nd_kernel::~softmax_nd_kernel(Espresso::DummyMPSEngine::softmax_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSEngine::transpose_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] - *a3 != 64) {
    return 0;
  }
  *(_OWORD *)unsigned int v7 = *(_OWORD *)v3;
  *(_OWORD *)&v7[16] = *(_OWORD *)(v3 + 16);
  std::string __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v3 + 40), *(void *)(v3 + 48), (uint64_t)(*(void *)(v3 + 48) - *(void *)(v3 + 40)) >> 2);
  if (*(_DWORD *)(a1 + 292) == 3)
  {
    BOOL v5 = 0;
    if (*(_DWORD *)(a1 + 296) == 4) {
      BOOL v5 = *(void *)&v7[12] == 0x100000001;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  if (__p)
  {
    long long v9 = __p;
    operator delete(__p);
  }
  return v5;
}

void Espresso::DummyMPSEngine::transpose_kernel::~transpose_kernel(Espresso::DummyMPSEngine::transpose_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::DummyMPSEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = Espresso::DummyMPSEngine::mps_reshape_dispatch(a3, (unsigned int *)(a1 + 280));
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v4;
}

void sub_1926ACC6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::DummyMPSEngine::mps_reshape_dispatch(long long **a1, unsigned int *a2)
{
  uint64_t v2 = *a1;
  if ((char *)a1[1] - (char *)*a1 != 64) {
    return 0;
  }
  long long v5 = v2[1];
  uint64_t v6 = *((void *)v2 + 4);
  v75[0] = *v2;
  v75[1] = v5;
  uint64_t v76 = v6;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, *((const void **)v2 + 5), *((void *)v2 + 6), (uint64_t)(*((void *)v2 + 6) - *((void *)v2 + 5)) >> 2);
  if (a2[6])
  {
    BOOL v7 = 0;
    int v8 = *a1;
    long long v9 = a1[1];
  }
  else
  {
    int v8 = *a1;
    long long v9 = a1[1];
    if (*((unsigned char *)a2 + 32)) {
      BOOL v7 = (char *)v9 - (char *)*a1 == 64;
    }
    else {
      BOOL v7 = 1;
    }
  }
  memset(v74, 0, sizeof(v74));
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v74, v8, v9, ((char *)v9 - (char *)v8) >> 6);
  uint64_t v73 = 0;
  long long v72 = 0u;
  *(_OWORD *)&v71[24] = 0u;
  *(_OWORD *)uint64_t v71 = xmmword_192DC3600;
  *(void *)&v71[16] = 0xFFFFFFFF00000001;
  long long v65 = v75[0];
  long long v66 = v75[1];
  uint64_t v67 = v76;
  id v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v77, (uint64_t)v78, (v78 - (unsigned char *)v77) >> 2);
  int v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v65);
  if (*((unsigned char *)a2 + 33))
  {
    int v12 = DWORD1(v66);
    if (v66 == 1) {
      int v13 = 4;
    }
    else {
      int v13 = 5;
    }
    if (DWORD1(v66) == -1) {
      int v12 = v13;
    }
    if (v12 != a2[5]) {
      goto LABEL_85;
    }
  }
  if (!a2[7] || (int)a2[9] < 2)
  {
    unsigned int v33 = *a2;
    unsigned int v32 = a2[1];
    unsigned int v35 = a2[2];
    unsigned int v34 = a2[3];
    *(_OWORD *)&v56[8] = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v58 = 0;
    *(void *)&long long __dst = __PAIR64__(v32, v33);
    *((void *)&__dst + 1) = __PAIR64__(v34, v35);
    unsigned int v36 = a2[4];
    int v37 = a2[5];
    if (v37 == -1) {
      int v37 = 5;
    }
    *(_DWORD *)__int32 v56 = a2[4];
    *(_DWORD *)&v56[4] = -1;
    if (v33)
    {
      if (v32) {
        goto LABEL_53;
      }
    }
    else
    {
      LODWORD(__dst) = v65;
      if (v32)
      {
LABEL_53:
        if (v35) {
          goto LABEL_54;
        }
        goto LABEL_72;
      }
    }
    int v46 = DWORD1(v65);
    if (v37 <= 1) {
      int v46 = 1;
    }
    DWORD1(__dst) = v46;
    if (v35)
    {
LABEL_54:
      if (v34) {
        goto LABEL_55;
      }
      goto LABEL_75;
    }
LABEL_72:
    int v47 = DWORD2(v65);
    if (v37 <= 2) {
      int v47 = 1;
    }
    DWORD2(__dst) = v47;
    if (v34)
    {
LABEL_55:
      if (v36) {
        goto LABEL_56;
      }
      goto LABEL_78;
    }
LABEL_75:
    int v48 = HIDWORD(v65);
    if (v37 <= 3) {
      int v48 = 1;
    }
    HIDWORD(__dst) = v48;
    if (v36)
    {
LABEL_56:
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v63, (const Espresso::layer_shape *)&__dst, 0);
      uint64_t v38 = v64;
      if (v64)
      {
        unsigned int v39 = 0;
        int v40 = 1;
        int v41 = v63;
        do
        {
          int v43 = *v41++;
          int v42 = v43;
          BOOL v44 = v43 < 1;
          if (v43 <= 1) {
            int v42 = 1;
          }
          v40 *= v42;
          if (v44) {
            ++v39;
          }
          --v38;
        }
        while (v38);
        if (v39 <= 1) {
          int v45 = v40;
        }
        else {
          int v45 = 0x7FFFFFFF;
        }
        if (!v11) {
          goto LABEL_86;
        }
      }
      else
      {
        int v45 = 1;
        if (!v11) {
          goto LABEL_86;
        }
      }
      if (v45 > v11)
      {
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_85;
      }
LABEL_86:
      if (__dst == -1) {
        LODWORD(__dst) = v11 / v45;
      }
      if (DWORD1(__dst) == -1) {
        DWORD1(__dst) = v11 / v45;
      }
      if (DWORD2(__dst) == -1) {
        DWORD2(__dst) = v11 / v45;
      }
      if (HIDWORD(__dst) == -1) {
        HIDWORD(__dst) = v11 / v45;
      }
      if (*(_DWORD *)v56 == -1) {
        *(_DWORD *)__int32 v56 = v11 / v45;
      }
      if ((a2[5] & 0x80000000) == 0) {
        *(_DWORD *)&v56[4] = a2[5];
      }
      *(_OWORD *)uint64_t v71 = __dst;
      *(_OWORD *)&v71[16] = *(_OWORD *)v56;
      *(void *)&v71[32] = *(void *)&v56[16];
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v72, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
LABEL_104:
      v50.i64[0] = *(void *)((char *)v75 + 12);
      v50.i64[1] = *(void *)&v71[12];
      v51.i64[0] = 0x100000001;
      v51.i64[1] = 0x100000001;
      *(int16x4_t *)v51.i8 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v50, v51)));
      v51.i16[0] = vmaxv_u16(*(uint16x4_t *)v51.i8);
      __int32 v52 = (*(_DWORD *)&v71[8] <= 0x2000) & ~v51.i32[0];
      if (*(int *)&v71[4] > 0x4000 || *(_DWORD *)v71 > 0x4000) {
        __int32 v52 = 0;
      }
      uint64_t v10 = v52 & v7;
      goto LABEL_110;
    }
LABEL_78:
    int v49 = v66;
    if (v37 <= 4) {
      int v49 = 1;
    }
    *(_DWORD *)__int32 v56 = v49;
    goto LABEL_56;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v63, (const Espresso::layer_shape *)&v65, 0);
  int v14 = *a2;
  int8x16_t v15 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(a2 + 1));
  int8x16_t v60 = vextq_s8(v15, v15, 8uLL);
  int v61 = v14;
  int v62 = 5;
  if ((a2[5] & 0x80000000) == 0) {
    unint64_t v16 = a2[5];
  }
  else {
    unint64_t v16 = v64;
  }
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)&v60, v16);
  int v17 = v62;
  if (v62)
  {
    unint64_t v18 = 0;
    do
    {
      if (!v60.i32[v18])
      {
        v60.i32[v18] = v63[v18];
        int v17 = v62;
      }
      ++v18;
    }
    while (v18 < v17);
  }
  Espresso::layer_nd_shape::shape_vector(&v59, (uint64_t)&v60);
  long long __dst = 0uLL;
  *(_DWORD *)__int32 v56 = 0;
  begin = v59.__begin_;
  unint64_t v20 = (char *)v59.__end_ - (char *)v59.__begin_;
  unint64_t v21 = v59.__end_ - v59.__begin_;
  if (v59.__end_ != v59.__begin_)
  {
    if (v21 <= 1) {
      int64_t v22 = 1;
    }
    else {
      int64_t v22 = v59.__end_ - v59.__begin_;
    }
    memcpy(&__dst, v59.__begin_, 4 * v22);
  }
  *(_DWORD *)&v56[4] = v20 >> 2;
  if (!*(_DWORD *)&v56[4])
  {
    int v30 = 1;
    if (!begin) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  unsigned int v23 = 0;
  uint64_t v24 = (int)v21;
  int v25 = 1;
  p_dst = (int *)&__dst;
  do
  {
    int v28 = *p_dst++;
    int v27 = v28;
    BOOL v29 = v28 < 1;
    if (v28 <= 1) {
      int v27 = 1;
    }
    v25 *= v27;
    if (v29) {
      ++v23;
    }
    --v24;
  }
  while (v24);
  if (v23 <= 1) {
    int v30 = v25;
  }
  else {
    int v30 = 0x7FFFFFFF;
  }
  if (begin)
  {
LABEL_41:
    v59.__end_ = begin;
    operator delete(begin);
  }
LABEL_42:
  if (!v11 || v30 <= v11)
  {
    if (v17)
    {
      uint64_t v31 = 0;
      while (v60.i32[v31] != -1)
      {
        if (v17 == ++v31) {
          goto LABEL_103;
        }
      }
      v60.i32[v31] = v11 / v30;
    }
LABEL_103:
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *(_OWORD *)uint64_t v71 = __dst;
    *(_OWORD *)&v71[16] = *(_OWORD *)v56;
    long long v72 = *(_OWORD *)__p;
    *(void *)&v71[32] = *(void *)&v56[16];
    uint64_t v73 = v58;
    goto LABEL_104;
  }
LABEL_85:
  uint64_t v10 = 0;
LABEL_110:
  if (v68)
  {
    uint64_t v69 = v68;
    operator delete(v68);
  }
  if ((void)v72)
  {
    *((void *)&v72 + 1) = v72;
    operator delete((void *)v72);
  }
  *(void *)uint64_t v71 = v74;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  if (v77)
  {
    uint64_t v78 = v77;
    operator delete(v77);
  }
  return v10;
}

void sub_1926AD1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  a35 = v41 - 152;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  int v43 = *(void **)(v41 - 88);
  if (v43)
  {
    *(void *)(v41 - 80) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void Espresso::layer_nd_shape::set_rank(Espresso::layer_nd_shape *this, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = *((int *)this + 5);
  if (v4 < a2)
  {
    unint64_t v5 = a2;
    if (!v4) {
      goto LABEL_6;
    }
    unint64_t v5 = a2;
    do
      *((_DWORD *)this + --v5) = *((_DWORD *)this + --v4);
    while (v4);
    if (v5) {
LABEL_6:
    }
      memset_pattern16(this, &xmmword_192DCA970, 4 * v5);
  }
  *((_DWORD *)this + 5) = v2;
}

void Espresso::DummyMPSEngine::reshape_kernel::~reshape_kernel(Espresso::DummyMPSEngine::reshape_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_concat_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_general_concat_kernel::kernel_type_str(Espresso::generic_general_concat_kernel *this)
{
  return "general_concat";
}

void Espresso::DummyMPSEngine::general_concat_kernel::~general_concat_kernel(Espresso::DummyMPSEngine::general_concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::split_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_split_nd_kernel::kernel_type_str(Espresso::generic_split_nd_kernel *this)
{
  return "split_nd";
}

uint64_t Espresso::DummyMPSEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::DummyMPSEngine::mps_split_nd_dispatch(*(const Espresso::layer_shape **)a3, *(void *)(a3 + 8), a1 + 280);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return 0;
}

void sub_1926AD3D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

const Espresso::layer_shape *Espresso::DummyMPSEngine::mps_split_nd_dispatch(const Espresso::layer_shape *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  while (!*(_DWORD *)(a3 + 8 + v3))
  {
    v3 += 4;
    if (v3 == 512)
    {
      if (a2 - (void)result == 64) {
        return (const Espresso::layer_shape *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v4, result, 0);
      }
      return result;
    }
  }
  return result;
}

void Espresso::DummyMPSEngine::split_nd_kernel::~split_nd_kernel(Espresso::DummyMPSEngine::split_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::abstract_blob_container::try_external_storage()
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::__copy_to()
{
  return 0;
}

BOOL Espresso::dummy_blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v7, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v7);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v5 != 0;
}

void sub_1926AD524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::abstract_blob_container::__copy_from_vimage_buffers()
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::raw_size(Espresso::abstract_blob_container *this)
{
  return 0;
}

void Espresso::abstract_blob_container::__copy_from_raw(uint64_t a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::to_string(&v6, v3);
  unint64_t v4 = std::string::insert(&v6, 0, "__copy_from_raw not defined for platform ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v7);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1926AD608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void Espresso::abstract_blob_container::__copy_to_raw(uint64_t a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::to_string(&v6, v3);
  unint64_t v4 = std::string::insert(&v6, 0, "__copy_from_raw not defined for platform ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v7);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1926AD724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::blob_cpu::unsafe_opaque_raw_pointer(Espresso::blob_cpu *this)
{
  return *((void *)this + 20);
}

uint64_t Espresso::blob_cpu::can_arbitrarily_resize(Espresso::blob_cpu *this)
{
  return 1;
}

uint64_t Espresso::abstract_blob_container::sync_raw_pointer_access(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, 0);
}

void Espresso::dummy_blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 160))
  {
    Espresso::abstract_blob_container::shape(v7, a1);
    long long v5 = *(std::__shared_weak_count **)(a1 + 272);
    v6[0] = *(std::__shared_weak_count **)(a1 + 264);
    v6[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::blob_cpu::resize((int *)a1, (const Espresso::layer_shape *)v7, v6);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
    if (__p)
    {
      long long v9 = __p;
      operator delete(__p);
    }
  }
  Espresso::blob_cpu::__copy_from_host(a1, a2, a3);
}

void sub_1926AD840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dummy_blob_container::__copy_to_host(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 160)) {
    Espresso::blob_cpu::__copy_to_host(a1, a2, a3);
  }
}

uint64_t Espresso::dummy_blob_container::compute_path(Espresso::dummy_blob_container *this)
{
  return *((unsigned int *)this + 64);
}

uint64_t Espresso::dummy_blob_container::platform(Espresso::dummy_blob_container *this)
{
  return (***(uint64_t (****)(void))(*((void *)this + 9) + 8))(*(void *)(*((void *)this + 9) + 8));
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::batch_matmul_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_batch_matmul_kernel::kernel_type_str(Espresso::generic_batch_matmul_kernel *this)
{
  return "batch_matmul";
}

BOOL Espresso::DummyMPSBuffersEngine::batch_matmul_kernel::is_valid_for_engine(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(const Espresso::layer_shape **)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 < 0x80uLL) {
    return 0;
  }
  std::string v6 = (int *)((char *)v3 + 64);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, *(const Espresso::layer_shape **)a3, 0);
  unsigned int v7 = v25;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, (const Espresso::layer_shape *)((char *)v3 + 64), 0);
  BOOL v8 = 0;
  int v9 = *((_DWORD *)v3 + 2);
  int v10 = *((_DWORD *)v3 + 18);
  if (v10 == 1 || v9 == 1 || v9 == v10)
  {
    int v13 = *((_DWORD *)v3 + 3);
    int v14 = *((_DWORD *)v3 + 19);
    if (v14 != 1 && v13 != 1 && v13 != v14) {
      goto LABEL_37;
    }
    int v17 = *((_DWORD *)v3 + 4);
    int v18 = *((_DWORD *)v3 + 20);
    BOOL v19 = v18 == 1 || v17 == 1;
    if (!v19 && v17 != v18) {
      goto LABEL_37;
    }
    if (a1[281])
    {
      if (a1[282]) {
        int v21 = *v6;
      }
      else {
        int v21 = *((_DWORD *)v3 + 17);
      }
      BOOL v8 = *((_DWORD *)v3 + 1) == v21;
      goto LABEL_38;
    }
    int v22 = a1[282] ? *v6 : *((_DWORD *)v3 + 17);
    if (*(_DWORD *)v3 == v22) {
      BOOL v8 = 1;
    }
    else {
LABEL_37:
    }
      BOOL v8 = 0;
  }
LABEL_38:
  if (v7 >= 5) {
    BOOL v8 = 0;
  }
  BOOL v23 = v25 < 5 && v8;
  return !a1[280] && v23;
}

void Espresso::DummyMPSBuffersEngine::batch_matmul_kernel::~batch_matmul_kernel(Espresso::DummyMPSBuffersEngine::batch_matmul_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSBuffersEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(unsigned char *)(a1 + 285) == 0;
}

void Espresso::DummyMPSBuffersEngine::general_concat_kernel::~general_concat_kernel(Espresso::DummyMPSBuffersEngine::general_concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSBuffersEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return !*(_DWORD *)(a1 + 304) && (!*(unsigned char *)(a1 + 312) || a3[1] - *a3 == 64);
}

void Espresso::DummyMPSBuffersEngine::reshape_kernel::~reshape_kernel(Espresso::DummyMPSBuffersEngine::reshape_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSBuffersEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 424) > 0 || *(_DWORD *)(a1 + 404)) {
    return 0;
  }
  BOOL result = 0;
  std::string v6 = *(const Espresso::layer_shape **)a3;
  unint64_t v7 = *(void *)(a3 + 8) - *(void *)a3;
  if (v7 && v7 <= 0x80)
  {
    if (*(_DWORD *)(a1 + 332)) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 316) == 2) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 340)) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 348)) {
      return 0;
    }
    int v8 = *(_DWORD *)(a1 + 336);
    if (!v8)
    {
      if (*(_DWORD *)(a3 + 64)) {
        return 0;
      }
    }
    if (!v8)
    {
      if (v7 != 128) {
        return 1;
      }
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
      BOOL result = 0;
      if (v12 <= 3)
      {
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, (const Espresso::layer_shape *)(*(void *)a3 + 64), 0);
        BOOL result = 0;
        if (v12 <= 3) {
          return 1;
        }
      }
      return result;
    }
    if (v7 != 64) {
      return 0;
    }
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
    int v9 = *(unsigned __int8 *)(a1 + 344);
    int v10 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)v11, v9);
    BOOL result = 0;
    if (v10 >= 20)
    {
      if ((unint64_t)Espresso::layer_nd_shape::matrix_cols((Espresso::layer_nd_shape *)v11, v9 != 0) <= 1
        && *(void *)(a3 + 8) - *(void *)a3 == 64)
      {
        return v12 > 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t Espresso::layer_nd_shape::matrix_rows(Espresso::layer_nd_shape *this, char a2)
{
  unsigned int v2 = *((_DWORD *)this + 5);
  if ((a2 & 1) != 0 || v2 <= 3)
  {
    switch(v2)
    {
      case 1u:
        uint64_t result = 1;
        break;
      case 2u:
        return *(int *)this;
      case 3u:
        return *((int *)this + 1) * (uint64_t)*(int *)this;
      case 4u:
        uint64_t result = *((int *)this + 1) * (uint64_t)*(int *)this * *((int *)this + 2);
        break;
      case 5u:
        uint64_t result = *((int *)this + 1) * (uint64_t)*(int *)this * *((int *)this + 2) * *((int *)this + 3);
        break;
      default:
        return 0;
    }
  }
  else if (v2 == 5)
  {
    return *((int *)this + 1) * (uint64_t)*(int *)this;
  }
  else if (v2 == 4)
  {
    return *(int *)this;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t Espresso::layer_nd_shape::matrix_cols(Espresso::layer_nd_shape *this, char a2)
{
  unsigned int v2 = *((_DWORD *)this + 5);
  if ((a2 & 1) != 0 || v2 <= 3)
  {
    if (*((_DWORD *)this + 5)) {
      return *((int *)this + (int)v2 - 1);
    }
    return 0;
  }
  if (v2 == 5)
  {
    int v4 = *((_DWORD *)this + 3);
    int v3 = *((_DWORD *)this + 4);
    uint64_t v5 = *((int *)this + 2);
    return v4 * (uint64_t)v3 * v5;
  }
  if (v2 != 4) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 2);
  int v3 = *((_DWORD *)this + 3);
  uint64_t v5 = *((int *)this + 1);
  return v4 * (uint64_t)v3 * v5;
}

void Espresso::DummyMPSBuffersEngine::inner_product_kernel::~inner_product_kernel(Espresso::DummyMPSBuffersEngine::inner_product_kernel *this)
{
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::DummyMPSBuffersEngine::reduce_kernel::is_valid_for_engine(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 280);
  if (*(unsigned char *)(a1 + 320))
  {
    BOOL v2 = v1 >= 0xD;
    unsigned int v3 = 7683;
  }
  else
  {
    BOOL v2 = v1 >= 0xC;
    BOOL v5 = v1 == 12;
    int v4 = (1 << v1) & 0x1E03;
    BOOL v5 = !v5 && v2 || v4 == 0;
    if (v5) {
      return 0;
    }
    unsigned int v1 = *(_DWORD *)(a1 + 288);
    BOOL v2 = v1 >= 0x11;
    unsigned int v3 = 65814;
  }
  unsigned int v6 = (v3 >> v1) & 1;
  if (v2) {
    return 0;
  }
  else {
    return v6;
  }
}

void Espresso::DummyMPSBuffersEngine::reduce_kernel::~reduce_kernel(Espresso::DummyMPSBuffersEngine::reduce_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSBuffersEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == *(void *)a3) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  BOOL result = 0;
  if (*(unsigned char *)(a1 + 340)) {
    BOOL v5 = v7 > 3;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return *(_WORD *)(a1 + 320) == 0;
  }
  return result;
}

void Espresso::DummyMPSBuffersEngine::concat_kernel::~concat_kernel(Espresso::DummyMPSBuffersEngine::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::DummyMPSBuffersEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 304) < 0x18u) & (0xF87FFFu >> *(_DWORD *)(a1 + 304));
}

void Espresso::DummyMPSBuffersEngine::activation_kernel::~activation_kernel(Espresso::DummyMPSBuffersEngine::activation_kernel *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::DummyMPSBuffersEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v5 = (void *)*a3;
  uint64_t v6 = a3[1] - *a3;
  unsigned int v7 = *(_DWORD *)(a1 + 280);
  if (v6 == 192 && v7 == 101)
  {
    long long v8 = *((_OWORD *)v5 + 1);
    uint64_t v9 = v5[4];
    long long v58 = *(_OWORD *)v5;
    long long v59 = v8;
    uint64_t v60 = v9;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    int v10 = (void *)*a3;
    long long v11 = *(_OWORD *)(*a3 + 80);
    long long v53 = *(_OWORD *)(*a3 + 64);
    long long v54 = v11;
    unsigned int v12 = (const void *)v10[13];
    uint64_t v55 = v10[12];
    v56[0] = 0;
    v56[1] = 0;
    uint64_t v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v12, v10[14], (uint64_t)(v10[14] - (void)v12) >> 2);
    int v13 = (void *)*a3;
    long long v14 = *(_OWORD *)(*a3 + 144);
    long long v47 = *(_OWORD *)(*a3 + 128);
    long long v48 = v14;
    int8x16_t v15 = (const void *)v13[21];
    uint64_t v49 = v13[20];
    std::string __p = 0;
    int32x4_t v51 = 0;
    uint64_t v52 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, v13[22], (uint64_t)(v13[22] - (void)v15) >> 2);
    BOOL v16 = Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v53);
    int v17 = v16 & Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v47);
    if (*(_DWORD *)(a1 + 284)) {
      char v18 = 0;
    }
    else {
      char v18 = v17;
    }
    if (__p)
    {
      int32x4_t v51 = __p;
      operator delete(__p);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    if ((void)v61)
    {
      *((void *)&v61 + 1) = v61;
      operator delete((void *)v61);
    }
    return v18 & 1;
  }
  if (v6 >> 6)
  {
    if (v6 >> 6 == 1)
    {
      unsigned int v19 = *(_DWORD *)(a1 + 280);
      if (v7 < 2) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    long long v20 = *((_OWORD *)v5 + 1);
    uint64_t v21 = v5[4];
    long long v58 = *(_OWORD *)v5;
    long long v59 = v20;
    uint64_t v60 = v21;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    int v22 = (void *)*a3;
    long long v23 = *(_OWORD *)(*a3 + 80);
    long long v53 = *(_OWORD *)(*a3 + 64);
    long long v54 = v23;
    uint64_t v24 = (const void *)v22[13];
    uint64_t v55 = v22[12];
    v56[0] = 0;
    v56[1] = 0;
    uint64_t v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v24, v22[14], (uint64_t)(v22[14] - (void)v24) >> 2);
    if (v6 == 128 && (v7 < 0xA || v7 - 29 <= 3))
    {
      uint64_t v25 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v58);
      if (v25 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v53))
      {
        int v27 = (void *)v61;
        uint64_t v49 = v60;
        uint64_t v26 = v60;
        long long v47 = v58;
        long long v28 = v58;
        long long v48 = v59;
        uint64_t v29 = v62;
        long long v58 = v53;
        long long v59 = v54;
        uint64_t v60 = v55;
        long long v61 = *(_OWORD *)v56;
        uint64_t v62 = v57;
        long long v53 = v28;
        long long v54 = v48;
        uint64_t v55 = v26;
        v56[0] = v27;
        uint64_t v57 = v29;
      }
    }
    char v18 = 0;
    if (v7 - 25 < 2 || v7 == 119)
    {
      unsigned int v19 = v7;
      char v30 = 0;
      goto LABEL_25;
    }
    if (v7 > 1)
    {
      char v30 = 0;
      unsigned int v35 = *(_DWORD *)(a1 + 280);
      char v18 = 1;
      if ((v35 - 100 > 0xD || ((1 << (v35 - 100)) & 0x2CFD) == 0)
        && (v35 > 0x24 || ((1 << v35) & 0x1200C02000) == 0))
      {
        char v18 = 0;
        char v30 = 0;
      }
    }
    else
    {
      if (DWORD2(v53) == 1)
      {
        int v32 = v54;
        if ((int)v54 <= 1) {
          int v33 = 1;
        }
        else {
          int v33 = v54;
        }
        unsigned int v34 = v53;
        if (v33 * HIDWORD(v53) == 1 && (void)v53 == (void)v58)
        {
          if (v7)
          {
            if (*(_DWORD *)(a1 + 280) == 1) {
              unsigned int v19 = 7;
            }
            else {
              unsigned int v19 = 1;
            }
LABEL_100:
            char v30 = 1;
            goto LABEL_25;
          }
          char v30 = 1;
          unsigned int v19 = 4;
LABEL_25:
          if (v56[0])
          {
            v56[1] = v56[0];
            operator delete(v56[0]);
          }
          if ((void)v61)
          {
            *((void *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
          if ((v30 & 1) == 0) {
            return v18 & 1;
          }
          goto LABEL_30;
        }
      }
      else
      {
        unsigned int v34 = v53;
        int v32 = v54;
      }
      BOOL v36 = v34 == 1 && DWORD1(v53) == 1;
      int v37 = v36;
      if (!v36)
      {
        int v39 = HIDWORD(v53);
        int v40 = DWORD2(v58);
        if (v32 <= 1) {
          int v38 = 1;
        }
        else {
          int v38 = v32;
        }
        goto LABEL_74;
      }
      if (v32 <= 1) {
        int v38 = 1;
      }
      else {
        int v38 = v32;
      }
      int v39 = HIDWORD(v53);
      int v40 = DWORD2(v58);
      if (v38 * HIDWORD(v53) != 1 || DWORD2(v53) != DWORD2(v58))
      {
LABEL_74:
        if (v38 * v39 == 1 && __PAIR64__(DWORD1(v53), v34) == (void)v58 && DWORD2(v53) == v40)
        {
          if (!v7)
          {
            char v30 = 1;
            unsigned int v19 = 6;
            goto LABEL_25;
          }
          BOOL v42 = *(_DWORD *)(a1 + 280) == 1;
          int v43 = 9;
        }
        else
        {
          if (DWORD2(v53) == 1) {
            int v44 = v37;
          }
          else {
            int v44 = 0;
          }
          if (v44 == 1 && v39 * v32 == v59 * HIDWORD(v58))
          {
            if (!v7)
            {
              char v30 = 1;
              unsigned int v19 = 29;
              goto LABEL_25;
            }
            BOOL v42 = *(_DWORD *)(a1 + 280) == 1;
            int v43 = 30;
          }
          else
          {
            int v45 = v44 ^ 1;
            if (v39 != 1) {
              int v45 = 1;
            }
            if (v32 == 1) {
              int v46 = v45;
            }
            else {
              int v46 = 1;
            }
            if (v46) {
              unsigned int v19 = v7;
            }
            else {
              unsigned int v19 = 31;
            }
            char v30 = v46 ^ 1;
            char v18 = 1;
            if ((v46 & 1) != 0 || !v7) {
              goto LABEL_25;
            }
            BOOL v42 = *(_DWORD *)(a1 + 280) == 1;
            int v43 = 32;
          }
        }
        if (v42) {
          unsigned int v19 = v43;
        }
        else {
          unsigned int v19 = v7;
        }
        goto LABEL_100;
      }
      int v41 = *(_DWORD *)(a1 + 280);
      if (!v41)
      {
        char v30 = 1;
        unsigned int v19 = 5;
        goto LABEL_25;
      }
      char v30 = 1;
      if (v41 == 1)
      {
        unsigned int v19 = 8;
        goto LABEL_25;
      }
    }
    unsigned int v19 = v7;
    goto LABEL_25;
  }
  unsigned int v19 = *(_DWORD *)(a1 + 280);
LABEL_30:
  if (v19 < 0xE)
  {
LABEL_31:
    char v18 = 1;
    return v18 & 1;
  }
  char v18 = 1;
  if ((v19 > 0x20 || ((1 << v19) & 0x1EFC00000) == 0) && (v19 - 103 > 0x10 || ((1 << (v19 - 103)) & 0x1D801) == 0)) {
    char v18 = 0;
  }
  return v18 & 1;
}

void sub_1926AE488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v25 = *(void **)(v23 - 72);
  if (v25)
  {
    *(void *)(v23 - 64) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::DummyMPSBuffersEngine::elementwise_kernel::~elementwise_kernel(Espresso::DummyMPSBuffersEngine::elementwise_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSBuffersEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, const Espresso::layer_shape **a3)
{
  BOOL v3 = !*(_DWORD *)(a1 + 300) && !*(unsigned char *)(a1 + 307) && !*(unsigned char *)(a1 + 306) && *(unsigned char *)(a1 + 304) == 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v5, *a3, 0);
  return v6 < 4 && v3;
}

void Espresso::DummyMPSBuffersEngine::softmax_kernel::~softmax_kernel(Espresso::DummyMPSBuffersEngine::softmax_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

const char *Espresso::generic_general_slice_kernel::kernel_type_str(Espresso::generic_general_slice_kernel *this)
{
  return "general_slice";
}

BOOL Espresso::DummyMPSBuffersEngine::general_slice_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return a3[1] - *a3 == 64;
}

void Espresso::DummyMPSBuffersEngine::general_slice_kernel::~general_slice_kernel(Espresso::DummyMPSBuffersEngine::general_slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::DummyMPSBuffersEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(int *)(a1 + 288) < 1 || *(_DWORD *)(a1 + 292) < 1;
}

void Espresso::DummyMPSBuffersEngine::split_nd_kernel::~split_nd_kernel(Espresso::DummyMPSBuffersEngine::split_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tile_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_tile_kernel::kernel_type_str(Espresso::generic_tile_kernel *this)
{
  return "tile";
}

BOOL Espresso::generic_tile_kernel::has_dynamic_top_shape(Espresso::generic_tile_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

BOOL Espresso::DummyMPSBuffersEngine::tile_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return a3[1] - *a3 < 0x80uLL;
}

void Espresso::DummyMPSBuffersEngine::tile_kernel::~tile_kernel(Espresso::DummyMPSBuffersEngine::tile_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

const char *Espresso::generic_gather_nd_kernel::kernel_type_str(Espresso::generic_gather_nd_kernel *this)
{
  return "gather_nd";
}

BOOL Espresso::DummyMPSBuffersEngine::gather_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, long long **a3)
{
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v27, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  if ((unint64_t)(v28 - (void)v27) < 0x80) {
    goto LABEL_19;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v25, v27, 0);
  unsigned int v4 = v26;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v23, (const Espresso::layer_shape *)((char *)v27 + 64), 0);
  int v5 = *(_DWORD *)(a1 + 284);
  int v6 = v4 & (v5 >> 31);
  int v7 = v6 + v5;
  if (v6 + v5 < 0 != __OFADD__(v6, v5)) {
    uint64_t v8 = v26;
  }
  else {
    uint64_t v8 = v7;
  }
  int v9 = 1;
  if ((int)v8 >= 1)
  {
    int v10 = v25;
    do
    {
      int v11 = *(_DWORD *)v10;
      int v10 = (void ***)((char *)v10 + 4);
      v9 *= v11;
      --v8;
    }
    while (v8);
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  unsigned int v12 = v7 + 1;
  if (v7 + 1 >= (int)v26)
  {
    int v15 = 1;
  }
  else
  {
    unint64_t v13 = v26 - (unint64_t)v12;
    long long v14 = (int *)v25 + v12;
    int v15 = 1;
    do
    {
      int v16 = *v14++;
      v15 *= v16;
      --v13;
    }
    while (v13);
  }
  uint64_t v17 = v24;
  int v18 = 1;
  if (v24 >= 1)
  {
    unsigned int v19 = (int *)v23;
    do
    {
      int v20 = *v19++;
      v18 *= v20;
      --v17;
    }
    while (v17);
  }
  if (v15 * v9 * v18 <= 250000) {
    BOOL v21 = *(_DWORD *)(a1 + 280) == 0;
  }
  else {
LABEL_19:
  }
    BOOL v21 = 0;
  v25[0] = (void **)&v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v25);
  return v21;
}

void sub_1926AE844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void Espresso::DummyMPSBuffersEngine::gather_nd_kernel::~gather_nd_kernel(Espresso::DummyMPSBuffersEngine::gather_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::fill_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_fill_kernel::kernel_type_str(Espresso::generic_fill_kernel *this)
{
  return "fill";
}

BOOL Espresso::DummyMPSBuffersEngine::fill_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return a3[1] == *a3 || *(unsigned char *)(a1 + 312) == 0;
}

void Espresso::DummyMPSBuffersEngine::fill_kernel::~fill_kernel(Espresso::DummyMPSBuffersEngine::fill_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

const char *Espresso::generic_dev_op_kernel::kernel_type_str(Espresso::generic_dev_op_kernel *this)
{
  return "dev_op";
}

BOOL Espresso::DummyMPSBuffersEngine::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  if (*(char *)(a1 + 367) < 0)
  {
    if (*(void *)(a1 + 352)) {
      return *(_DWORD *)(a1 + 280) == 50002;
    }
  }
  else if (*(unsigned char *)(a1 + 367))
  {
    return *(_DWORD *)(a1 + 280) == 50002;
  }
  return 0;
}

void Espresso::DummyMPSBuffersEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::l2_norm_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_l2_normalize_kernel::kernel_type_str(Espresso::generic_l2_normalize_kernel *this)
{
  return "l2_normalize";
}

BOOL Espresso::DummyMPSBuffersEngine::l2_normalize_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 288) - 1) <= 1 && *(_DWORD *)(a1 + 284) != 0;
}

void Espresso::DummyMPSBuffersEngine::l2_normalize_kernel::~l2_normalize_kernel(Espresso::DummyMPSBuffersEngine::l2_normalize_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::IREngine::blob_container::~blob_container(Espresso::IREngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyMPSEngine::blob_container::~blob_container(Espresso::DummyMPSEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyBNNSEngine::blob_container::~blob_container(Espresso::DummyBNNSEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyMPSBuffersEngine::blob_container::~blob_container(Espresso::DummyMPSBuffersEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::DummyMPSGraphEngine::blob_container::~blob_container(Espresso::DummyMPSGraphEngine::blob_container *this)
{
  Espresso::dummy_blob_container::~dummy_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x340uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE381FF0;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32C5B8;
  *((_DWORD *)v8 + 206) = a3;
  memcpy(v8 + 38, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AEBF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x160uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE381F80;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32C308;
  *((_DWORD *)v8 + 86) = a3;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  v8[42] = *(void *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AED34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reshape_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381F80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE382028;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32C710;
  *((_DWORD *)v8 + 81) = a3;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AEE78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382028;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x138uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE382098;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32CA08;
  *((_DWORD *)v8 + 77) = a3;
  *((_DWORD *)v8 + 76) = *a2;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AEFB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382098;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE3821E8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32D2E0;
  *((_DWORD *)v8 + 80) = a3;
  *((_OWORD *)v8 + 19) = *a2;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AF0F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::local_correlation_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::local_correlation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3821E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::local_correlation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3821E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE382108;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32CCB8;
  *((_DWORD *)v8 + 78) = a3;
  *((_DWORD *)v8 + 76) = *(_DWORD *)a2;
  *((_WORD *)v8 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AF234(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::grid_sampling_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::grid_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::grid_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::transplant_kernel_cpu,std::allocator<Espresso::transplant_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transplant_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::transplant_kernel_cpu,std::allocator<Espresso::transplant_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transplant_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (char *)operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE387540;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((void *)v6 + 3) = &unk_1EE357220;
  *((_DWORD *)v6 + 86) = a3[1].n128_u32[0];
  __n128 result = *a3;
  *(__n128 *)(v6 + 328) = *a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926AF3B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::transplant_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::transplant_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387540;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::transplant_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x160uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE381ED8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE32BF78;
  *((_DWORD *)v8 + 87) = a3;
  long long v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *(_OWORD *)(v8 + 329) = *(_OWORD *)((char *)a2 + 25);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AF518(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reduce_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381E30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE3821B0;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32D188;
  *((_DWORD *)v8 + 79) = a3;
  v8[38] = *(void *)a2;
  *((_DWORD *)v8 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AF6D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3821B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3821B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382178;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3820D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3820D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE381F48;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32C1B0;
  *((_DWORD *)v8 + 78) = a3;
  v8[38] = *a2;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926AF968(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::flatten_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381F48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::batchnorm_kernel_cpu,std::allocator<Espresso::batchnorm_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::batchnorm_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::batchnorm_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386C80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::batchnorm_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381E68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::crop_kernel_cpu,std::allocator<Espresso::crop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::crop_kernel_cpu,std::allocator<Espresso::crop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x140uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE383058;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE3328B8;
  __n128 result = *a3;
  v6[19] = *a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926AFC0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::crop_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::crop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383058;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::crop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE388500;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE35E258;
  long long v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)(a3 + 60);
  __n128 result = *(__n128 *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((__n128 *)v6 + 20) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926AFD98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::general_padding_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::general_padding_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388500;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::general_padding_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::deconvolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387F18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::deconvolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::generic_context_transfer_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389450;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::generic_context_transfer_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::generic_load_constant_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389220;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::generic_load_constant_kernel_impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::activation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387428;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::activation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382060;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382140;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x158uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE381FB8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_DWORD *)v8 + 83) = 0;
  *((void *)v8 + 3) = &unk_1EE32C460;
  *((_DWORD *)v8 + 84) = a3;
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B02DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::lrn_kernel_cpu,std::allocator<Espresso::lrn_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::lrn_kernel_cpu,std::allocator<Espresso::lrn_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x150uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382E28;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE331CB0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 12);
  *(__n128 *)(v6 + 316) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B0444(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::lrn_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382E28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pool_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383170;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pool_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::convolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387770;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::convolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::DummyMPSEngine::engine::~engine(Espresso::DummyMPSEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::DummyMPSEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x130uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE381F10;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  *((_DWORD *)v6 + 70) = a2;
  *((void *)v6 + 36) = 0;
  *((void *)v6 + 37) = 0;
  *((void *)v6 + 3) = &unk_1EE32C0D0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381F10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *Espresso::engine_cpu::available_compute_paths@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  BOOL v3 = operator new(8uLL);
  *a1 = v3;
  void *v3 = 0x100000000;
  __n128 result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Espresso::DummyBNNSEngine::engine::~engine(Espresso::DummyBNNSEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::DummyBNNSEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x130uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382F08;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  *((_DWORD *)v6 + 70) = a2;
  *((void *)v6 + 36) = 0;
  *((void *)v6 + 37) = 0;
  *((void *)v6 + 3) = &unk_1EE332158;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382F08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyBNNSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::IREngine::engine::~engine(Espresso::IREngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void std::__shared_ptr_emplace<Espresso::IREngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C048;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::IREngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x1C0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE3870E0;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[38] = 0;
  *((_DWORD *)v8 + 78) = 0;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  v8[54] = 0;
  v8[3] = &unk_1EE352A98;
  *((_DWORD *)v8 + 110) = a3;
  Espresso::dev_op_params_t::operator=((uint64_t)(v8 + 38), a2);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B0C2C(_Unwind_Exception *a1)
{
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3870E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3870E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE3873B8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE353CA8;
  *((_DWORD *)v8 + 78) = a3;
  *((_DWORD *)v8 + 76) = *(_DWORD *)a2;
  *((_WORD *)v8 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B0D80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3873B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3873B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x158uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE387038;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE352690;
  *((_DWORD *)v8 + 85) = a3;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((unsigned char *)v8 + 336) = *(unsigned char *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B0EC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::fill_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387038;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE387230;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE353230;
  *((_DWORD *)v8 + 80) = a3;
  v8[38] = *a2;
  *(void *)((char *)v8 + 310) = *(void *)((char *)a2 + 6);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B100C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387230;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x148uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE387070;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE3527E8;
  *((_DWORD *)v8 + 81) = a3;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B1150(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::tile_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387070;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::instancenorm_1d_kernel_cpu,std::allocator<Espresso::instancenorm_1d_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::instancenorm_1d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::instancenorm_1d_kernel_cpu,std::allocator<Espresso::instancenorm_1d_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::instancenorm_1d_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE388570;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE35F0F0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  __n128 result = *a3;
  *((__n128 *)v6 + 19) = *a3;
  *((_DWORD *)v6 + 80) = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B12C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::instancenorm_1d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::instancenorm_1d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388570;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::instancenorm_1d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x340uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE3871F8;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE3530D8;
  *((_DWORD *)v8 + 206) = a3;
  memcpy(v8 + 38, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B1428(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3871F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3871F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x198uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE387348;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE353930;
  *((_DWORD *)v8 + 101) = a3;
  long long v10 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 24) = v10;
  *((_DWORD *)v8 + 100) = *(_DWORD *)(a2 + 96);
  long long v11 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v11;
  long long v12 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 22) = v12;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B157C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387348;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::softmax_nd_kernel_cpu,std::allocator<Espresso::softmax_nd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::softmax_nd_kernel_cpu,std::allocator<Espresso::softmax_nd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  int v6 = operator new(0x150uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE387508;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE3570C8;
  v6[40] = 0;
  v6[41] = 0;
  v6[39] = 0;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B16E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::softmax_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::softmax_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387508;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::softmax_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::range_kernel_cpu,std::allocator<Espresso::range_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::range_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::range_kernel_cpu,std::allocator<Espresso::range_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::range_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = operator new(0x140uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE384948;
  uint64_t v7 = *a3;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE33E010;
  v6[38] = v7;
  *((_DWORD *)v6 + 78) = v8;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B1868(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::range_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::range_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384948;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::range_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::sgd_kernel_cpu,std::allocator<Espresso::sgd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::sgd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::sgd_kernel_cpu,std::allocator<Espresso::sgd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::sgd_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x140uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382E98;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE332000;
  v6[38] = *(void *)a3;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a3 + 8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B19E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::sgd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::sgd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382E98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::sgd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::expand_dims_kernel_cpu,std::allocator<Espresso::expand_dims_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::expand_dims_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387818;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::expand_dims_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v8 = operator new(0x160uLL);
  v8[1] = 0;
  v8[2] = 0;
  *int v8 = &unk_1EE387188;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE352E28;
  *((_DWORD *)v8 + 86) = a3;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  v8[42] = *(void *)(a2 + 32);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B1BF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reshape_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387188;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v8 = operator new(0x138uLL);
  v8[1] = 0;
  v8[2] = 0;
  *int v8 = &unk_1EE3872D8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE353680;
  *((_DWORD *)v8 + 77) = a3;
  *((_WORD *)v8 + 152) = *(_WORD *)a2;
  *((unsigned char *)v8 + 306) = *(unsigned char *)(a2 + 2);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B1D38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3872D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3872D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x168uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE387E38;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  long long v8 = *(_OWORD *)(a3 + 24);
  long long v9 = *(_OWORD *)(a3 + 40);
  Espresso::store_global_kernel_cpu::store_global_kernel_cpu((uint64_t)(v6 + 3), a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1926B1ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::store_global_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::store_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387E38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::store_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x178uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE387888;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  long long v8 = *(_OWORD *)(a3 + 24);
  long long v9 = *(_OWORD *)(a3 + 40);
  Espresso::load_global_kernel_cpu::load_global_kernel_cpu((uint64_t)(v6 + 3), a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1926B20A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::load_global_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::load_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::load_global_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>((uint64_t *)&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>(uint64_t *a1, uint64_t *a2)
{
  long long v4 = operator new(0x150uLL);
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = &unk_1EE388538;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a2);
  v4[3] = &unk_1EE35EE40;
  v4[40] = 0;
  v4[41] = 0;
  v4[39] = 0;
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1926B2230(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::generic_phi_virtual_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::generic_phi_virtual_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388538;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::generic_phi_virtual_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::squeeze_kernel_cpu,std::allocator<Espresso::squeeze_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::squeeze_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::squeeze_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::transpose_kernel_cpu,std::allocator<Espresso::transpose_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::transpose_kernel_cpu,std::allocator<Espresso::transpose_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE387000;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE352538;
  __n128 result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B245C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::transpose_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::transpose_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::transpose_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE387310;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE3537D8;
  *((_DWORD *)v8 + 79) = a3;
  v8[38] = *(void *)a2;
  *((_DWORD *)v8 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B25BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::matrix_band_part_kernel_cpu,std::allocator<Espresso::matrix_band_part_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::matrix_band_part_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::matrix_band_part_kernel_cpu,std::allocator<Espresso::matrix_band_part_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::matrix_band_part_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE388960;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE361200;
  __n128 result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B2720(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::matrix_band_part_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::matrix_band_part_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388960;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::matrix_band_part_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x160uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE387118;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE352BF0;
  *((_DWORD *)v8 + 87) = a3;
  long long v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *(_OWORD *)(v8 + 329) = *(_OWORD *)((char *)a2 + 25);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B28BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reduce_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387118;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::split_kernel_cpu,std::allocator<Espresso::split_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::split_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3849B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3849B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x178uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE3870A8;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE352940;
  *((_DWORD *)v8 + 92) = a3;
  long long v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = a2[2];
  *(_OWORD *)(v8 + 349) = *(_OWORD *)((char *)a2 + 45);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B2AE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3870A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3870A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x1A8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE387268;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 39) = 0;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((void *)v8 + 3) = &unk_1EE353388;
  *((_DWORD *)v8 + 104) = a3;
  *((_DWORD *)v8 + 90) = *(_DWORD *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v10;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B2C40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387268;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::copy_kernel_cpu,std::allocator<Espresso::copy_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::copy_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::copy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383020;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::copy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x168uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE3872A0;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE353528;
  *((_DWORD *)v8 + 89) = a3;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B2E98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3872A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3872A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x240uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE387380;
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE353A88;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *((void *)v8 + 58) = 0;
  *((void *)v8 + 59) = 0;
  v8[480] = 0;
  *((_DWORD *)v8 + 142) = a3;
  *((_DWORD *)v8 + 114) = *(_DWORD *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 440) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 376) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 408) = v11;
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v12;
  result.n128_u64[0] = v13;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B3010(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387380;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso21DummyMPSBuffersEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x158uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE3871C0;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_DWORD *)v8 + 83) = 0;
  *((void *)v8 + 3) = &unk_1EE352F80;
  *((_DWORD *)v8 + 84) = a3;
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1926B315C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3871C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3871C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::DummyMPSBuffersEngine::engine::~engine(Espresso::DummyMPSBuffersEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::DummyMPSBuffersEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x130uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE387150;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  *((_DWORD *)v6 + 70) = a2;
  *((void *)v6 + 36) = 0;
  *((void *)v6 + 37) = 0;
  *((void *)v6 + 3) = &unk_1EE352D48;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387150;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSBuffersEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x178uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE382840;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32F780;
  __n128 v8 = a3[3];
  v6[21] = a3[2];
  v6[22] = v8;
  v6[23].n128_u64[0] = a3[4].n128_u64[0];
  __n128 result = a3[1];
  v6[19] = *a3;
  unsigned char v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B34D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382840;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3828E8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32FBE0;
  __n128 result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B3650(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3828E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3828E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v6 = operator new(0x140uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382488;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32DF90;
  v6[38] = *a3;
  *(void *)((char *)v6 + 311) = *(void *)((char *)a3 + 7);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B37D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::topk_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382488;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE382450;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32DE38;
  __n128 result = *a3;
  v6[19] = *a3;
  v6[20].n128_u32[0] = a3[1].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B3954(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382450;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<D0>(uint64_t *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(void *a1, uint64_t *a2, const void *a3)
{
  int v6 = operator new(0x240uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382CD8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE331770;
  double result = memcpy(v6 + 38, a3, 0x109uLL);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_1926B3AE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382808;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32F628;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B3C5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x1C0uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE382760;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32F190;
  __n128 v8 = a3[7];
  v6[25] = a3[6];
  v6[26] = v8;
  v6[27] = a3[8];
  __n128 v9 = a3[3];
  v6[21] = a3[2];
  v6[22] = v9;
  __n128 v10 = a3[5];
  v6[23] = a3[4];
  v6[24] = v10;
  __n128 result = a3[1];
  v6[19] = *a3;
  unsigned char v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B3DF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382760;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<D0>(uint64_t *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void *std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(void *a1, uint64_t *a2, const void *a3)
{
  int v6 = operator new(0x338uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE3827D0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32F4D0;
  double result = memcpy(v6 + 38, a3, 0x208uLL);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_1926B3F84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3827D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3827D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3824F8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32E240;
  __n128 v8 = a3[1];
  v6[19] = *a3;
  unsigned char v6[20] = v8;
  __n128 result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B410C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3824F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3824F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x140uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382C30;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE331368;
  v6[38] = *(void *)a3;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a3 + 8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B428C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382C30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382990;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE330030;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B4404(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382990;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x150uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382728;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_DWORD *)v6 + 83) = 0;
  *((void *)v6 + 3) = &unk_1EE32F038;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 12);
  *(__n128 *)(v6 + 316) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B458C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382728;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x148uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3824C0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32E0E8;
  __n128 result = *a3;
  v6[19] = *a3;
  v6[20].n128_u64[0] = a3[1].n128_u64[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B470C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3824C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3824C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v6 = operator new(0x140uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382958;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32FED8;
  v6[38] = *a3;
  *(void *)((char *)v6 + 310) = *(void *)((char *)a3 + 6);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B4890(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(void *a1, uint64_t *a2, long long *a3)
{
  int v6 = operator new(0x388uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382798;
  Espresso::kernel_with_uniforms_<Espresso::rnn_arch_params,Espresso::abstract_kernel_with_named_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 3), a2);
  v6[62] = 0;
  v6[63] = 0;
  v6[61] = v6 + 62;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  *((_DWORD *)v6 + 160) = 0;
  *(_OWORD *)(v7 + 624) = 0u;
  *(_OWORD *)(v7 + 640) = 0u;
  *(_OWORD *)(v7 + 656) = 0u;
  *(_OWORD *)(v7 + 672) = 0u;
  *(_OWORD *)(v7 + 688) = 0u;
  *(_OWORD *)(v7 + 704) = 0u;
  *(_OWORD *)(v7 + 720) = 0u;
  *(_OWORD *)(v7 + 736) = 0u;
  *(_OWORD *)(v7 + 752) = 0u;
  *(_OWORD *)(v7 + 768) = 0u;
  *(_OWORD *)(v7 + 784) = 0u;
  *(_OWORD *)(v7 + 800) = 0u;
  *(_OWORD *)(v7 + 816) = 0u;
  *((_DWORD *)v6 + 214) = 1065353216;
  *((_OWORD *)v6 + 54) = 0u;
  *((_OWORD *)v6 + 55) = 0u;
  *((_DWORD *)v6 + 224) = 1065353216;
  v6[3] = &unk_1EE32F2E8;
  *(_OWORD *)(v7 + 442) = *(long long *)((char *)a3 + 138);
  long long v8 = a3[8];
  long long v9 = a3[6];
  *(_OWORD *)(v7 + 416) = a3[7];
  *(_OWORD *)(v7 + 432) = v8;
  long long v10 = a3[4];
  *(_OWORD *)(v7 + 384) = a3[5];
  *(_OWORD *)(v7 + 400) = v9;
  long long v11 = a3[2];
  *(_OWORD *)(v7 + 352) = a3[3];
  *(_OWORD *)(v7 + 368) = v10;
  long long v13 = *a3;
  __n128 result = (__n128)a3[1];
  *(__n128 *)(v7 + 320) = result;
  *(_OWORD *)(v7 + 336) = v11;
  *(_OWORD *)(v7 + 304) = v13;
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_1926B4A84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382B18;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE330AC0;
  long long v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  __n128 result = *(__n128 *)(a3 + 29);
  *(__n128 *)(v6 + 333) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B4C08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382B18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x158uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE3826F0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32EEE0;
  __n128 result = *(__n128 *)a3;
  long long v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  v6[42] = *(void *)(a3 + 32);
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B4D88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3826F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3826F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382648;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE32EAD8;
  long long v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  __n128 result = *(__n128 *)(a3 + 25);
  *(__n128 *)(v6 + 329) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B4F0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382648;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::reduce_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x170uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382610;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE32E980;
  long long v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  __n128 result = *(__n128 *)(a3 + 44);
  *(__n128 *)(v6 + 348) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B5098(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382610;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x1C8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382418;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 56) = 0;
  *((void *)v6 + 3) = &unk_1EE32DCA0;
  long long v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v8;
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v9;
  __n128 result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B523C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382418;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x140uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3826B8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32ED88;
  __n128 result = *a3;
  v6[19] = *a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B53B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3826B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3826B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x150uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382300;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE32D5E8;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 12);
  *(__n128 *)(v6 + 316) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B5538(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::lrn_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382300;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382A70;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE3306B8;
  long long v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  __n128 result = *(__n128 *)(a3 + 30);
  *(__n128 *)(v6 + 334) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B56BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::load_random_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::load_random_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382A70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::load_random_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x140uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382AE0;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE330968;
  v6[38] = *(void *)a3;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a3 + 8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B583C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x268uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382BC0;
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE330FF0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *((void *)v6 + 58) = 0;
  *((void *)v6 + 59) = 0;
  v6[480] = 0;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *((_DWORD *)v6 + 114) = *(_DWORD *)(a3 + 128);
  long long v7 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v7;
  long long v8 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 376) = v8;
  long long v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  __n128 result = *(__n128 *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(__n128 *)(v6 + 344) = result;
  *a1 = v11;
  a1[1] = v6;
  return result;
}

void sub_1926B59F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x198uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE382B88;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE330E98;
  __n128 v8 = a3[5];
  v6[23] = a3[4];
  v6[24] = v8;
  v6[25].n128_u32[0] = a3[6].n128_u32[0];
  __n128 v9 = a3[1];
  v6[19] = *a3;
  unsigned char v6[20] = v9;
  __n128 result = a3[3];
  v6[21] = a3[2];
  v6[22] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B5B84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382B88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382CA0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE331618;
  long long v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)(a3 + 60);
  __n128 result = *(__n128 *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((__n128 *)v6 + 20) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B5D10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382BF8;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE331210;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a3;
  *((_WORD *)v6 + 154) = *(_WORD *)(a3 + 4);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B5E90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v6 = operator new(0x140uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE3828B0;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32FA88;
  v6[38] = *a3;
  *(void *)((char *)v6 + 310) = *(void *)((char *)a3 + 6);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B6014(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3828B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3828B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382680;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32EC30;
  v6[38] = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B618C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382680;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x158uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE3823E0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32DB48;
  __n128 result = *(__n128 *)a3;
  long long v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  *((unsigned char *)v6 + 336) = *(unsigned char *)(a3 + 32);
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B630C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3823E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3823E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x1B8uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE382A38;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE330560;
  __n128 v8 = a3[7];
  v6[25] = a3[6];
  v6[26] = v8;
  v6[27].n128_u64[0] = a3[8].n128_u64[0];
  __n128 v9 = a3[3];
  v6[21] = a3[2];
  v6[22] = v9;
  __n128 v10 = a3[5];
  v6[23] = a3[4];
  v6[24] = v10;
  __n128 result = a3[1];
  v6[19] = *a3;
  unsigned char v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B64A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382A38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE382A00;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE330408;
  __n128 v8 = a3[1];
  v6[19] = *a3;
  unsigned char v6[20] = v8;
  __n128 result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B662C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382A00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(uint64_t *a1@<X1>, const std::string *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

std::string *std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(void *a1, uint64_t *a2, const std::string *a3)
{
  int v6 = (char *)operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE3825D8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((void *)v6 + 3) = &unk_1EE32E828;
  double result = std::string::operator=((std::string *)(v6 + 304), a3);
  if (v6 + 304 != (char *)a3)
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 328, a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_, (uint64_t)(a3[1].__r_.__value_.__l.__size_ - a3[1].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 352, a3[2].__r_.__value_.__l.__data_, a3[2].__r_.__value_.__l.__size_, (uint64_t)(a3[2].__r_.__value_.__l.__size_ - a3[2].__r_.__value_.__r.__words[0]) >> 2);
    double result = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 376, a3[3].__r_.__value_.__l.__data_, a3[3].__r_.__value_.__l.__size_, (uint64_t)(a3[3].__r_.__value_.__l.__size_ - a3[3].__r_.__value_.__r.__words[0]) >> 2);
  }
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_1926B6810(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::einsum_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3825D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3825D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(void *a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = operator new(0x1B8uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE3825A0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[38] = 0;
  *((_DWORD *)v6 + 78) = 0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  v6[54] = 0;
  v6[3] = &unk_1EE32E6D0;
  uint64_t result = Espresso::dev_op_params_t::operator=((uint64_t)(v6 + 38), a3);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_1926B69CC(_Unwind_Exception *a1)
{
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3825A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3825A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x278uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382B50;
  uint64_t v7 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a2);
  *((void *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((void *)v6 + 3) = &unk_1EE330C18;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  long long v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 472) = v8;
  long long v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  long long v10 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v10;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v11;
  __n128 result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *(void *)(v6 + 485) = *(void *)(a3 + 157);
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_1926B6B9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382B50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382C68;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE3314C0;
  long long v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 365) = *(_OWORD *)(a3 + 61);
  __n128 result = *(__n128 *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((__n128 *)v6 + 20) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B6D28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382C68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x140uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3823A8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE32D9F0;
  __n128 result = *a3;
  v6[19] = *a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B6EA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3823A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3823A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382370;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32D898;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B7018(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382370;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x1E0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382568;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 3) = &unk_1EE32E4F0;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a3 + 96);
  long long v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v8;
  __n128 result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *a1 = v10;
  a1[1] = v6;
  return result;
}

void sub_1926B71B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382568;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x278uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE3829C8;
  long long v7 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a2);
  *((void *)v6 + 3) = &unk_1EE330188;
  *((void *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  long long v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 472) = v8;
  long long v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  long long v10 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v10;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v11;
  __n128 result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  *(void *)(v6 + 485) = *(void *)(a3 + 157);
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_1926B7378(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3829C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3829C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x170uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382530;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE32E398;
  long long v8 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a3 + 32);
  __n128 result = *(__n128 *)(a3 + 45);
  *(__n128 *)(v6 + 349) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B7504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382530;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382338;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE32D740;
  v6[38] = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B767C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::cast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382338;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x1B8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382878;
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 51) = 0;
  *((void *)v6 + 52) = 0;
  *((void *)v6 + 3) = &unk_1EE32F8D8;
  *((void *)v6 + 53) = 0;
  *((void *)v6 + 54) = 0;
  long long v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 376) = v7;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v8;
  __n128 result = *(__n128 *)(a3 + 60);
  *(__n128 *)(v6 + 388) = result;
  *a1 = v10;
  a1[1] = v6;
  return result;
}

void sub_1926B7814(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382878;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = &unk_1EE382AA8;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &unk_1EE330810;
  *((_WORD *)v6 + 152) = *(_WORD *)a3;
  *((unsigned char *)v6 + 306) = *(unsigned char *)(a3 + 2);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B7994(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x1A0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE382920;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((void *)v6 + 3) = &unk_1EE32FD38;
  *((_DWORD *)v6 + 90) = *(_DWORD *)(a3 + 32);
  __n128 result = *(__n128 *)a3;
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v9;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1926B7B30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382920;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::Kernels::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso19DummyMPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void Espresso::DummyMPSGraphEngine::engine::~engine(Espresso::DummyMPSGraphEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::DummyMPSGraphEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x130uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE3869A8;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  *((_DWORD *)v6 + 70) = a2;
  *((void *)v6 + 36) = 0;
  *((void *)v6 + 37) = 0;
  *((void *)v6 + 3) = &unk_1EE34EFB8;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3869A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3869A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::analysis_result::deserialize()
{
  return 0;
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>(uint64_t **a1, void *a2)
{
  BOOL v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    long long v4 = v3;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void Espresso::unpack_options::~unpack_options(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  BOOL v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  BOOL v3 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  BOOL v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      BOOL v3 = v2;
      BOOL v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    long long v4 = a2;
    do
    {
      BOOL v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      long long v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3887D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_pass_unpack_layers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3887D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL Espresso::run_pass_on_network<Espresso::pass_compress_segments>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  BOOL v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)BOOL v2 = &unk_1EE387930;
  BOOL v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE359C20;
  BOOL v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v10 = (unint64_t)"N8Espresso22pass_compress_segmentsE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v8 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v8);
  if (v8)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v10 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso26analysis_compress_segmentsE");
    }
  }
  int v6 = buf[0];
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
  return v6 != 0;
}

void sub_1926B83A0(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_compress_segments::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v83, *(void *)a1, *((std::__shared_weak_count **)a1 + 1));
  unsigned int v4 = (***(uint64_t (****)(void))(*(void *)(v83 + 16) + 8))();
  uint64_t v5 = v83;
  int v6 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v83 + 528), v4);
  if (v6)
  {
    uint64_t v7 = v6;
    char v8 = (const void *)v6[3];
    long long v9 = (std::__shared_weak_count *)v7[4];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8
    {
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v71 = v9;
      }
      else
      {
        uint64_t v71 = 0;
      }
      goto LABEL_15;
    }
    uint64_t v71 = v9;
  }
  else
  {
    uint64_t v71 = 0;
  }
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v81 = v5;
  std::string v82 = v84;
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 88))(v10, &v81);
  if (v82) {
    nitro::nitro_function::nitro_function(v82);
  }
  long long v9 = 0;
LABEL_15:
  long long v11 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v83 + 528), v4);
  if (!v11)
  {
    long long v72 = 0;
    goto LABEL_30;
  }
  uint64_t v12 = v11;
  long long v13 = (const void *)v11[3];
  long long v14 = (std::__shared_weak_count *)v12[4];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v72 = v14;
  if (!v13)
  {
LABEL_30:
    uint64_t v77 = 0;
    uint64_t v70 = 0;
    if (!v9) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v77 = v15;
  if (v15) {
    int v16 = 0;
  }
  else {
    int v16 = v72;
  }
  if (v15) {
    BOOL v17 = v72 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v70 = 0;
    long long v72 = v16;
    if (!v9) {
      goto LABEL_32;
    }
LABEL_31:
    nitro::nitro_function::nitro_function(v9);
    goto LABEL_32;
  }
  atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v70 = v72;
  if (v9) {
    goto LABEL_31;
  }
LABEL_32:
  if (!v77) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Cannot run pass. No compiler found.");
  }
  uint64_t v79 = v83;
  int v80 = v84;
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*v77 + 88))(v77, &v79);
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
  unsigned int v19 = (Espresso::net *)v83;
  int v18 = v84;
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v68 = a2;
  uint64_t v69 = v18;
  int v86 = 0;
  int v87 = 0;
  unint64_t v88 = 0;
  uint64_t v20 = *((void *)v19 + 4);
  if (*((void *)v19 + 5) == v20)
  {
    BOOL v36 = 0;
    uint64_t v55 = 0;
  }
  else
  {
    BOOL v21 = 0;
    unint64_t v22 = 0;
    uint64_t v74 = v19;
    uint64_t v75 = 0;
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = *(void *)(v20 + 16 * v23);
      uint64_t v25 = *(const void **)(v24 + 64);
      unsigned int v26 = *(std::__shared_weak_count **)(v24 + 72);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25
      {
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          nitro::nitro_function::nitro_function(v26);
        }
        if ((unint64_t)v75 >= v22)
        {
          uint64_t v28 = v75 - v21;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v22 - (void)v21) >> 2 > v29) {
            unint64_t v29 = (uint64_t)(v22 - (void)v21) >> 2;
          }
          if (v22 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
          }
          else {
            uint64_t v31 = 0;
          }
          int v32 = v75;
          int v33 = (unint64_t *)(v30 + 8 * v28);
          *int v33 = v23;
          int v27 = v33 + 1;
          while (v32 != v21)
          {
            unint64_t v34 = *--v32;
            *--int v33 = v34;
          }
          unint64_t v22 = v30 + 8 * v31;
          int v86 = v33;
          int v87 = v27;
          unint64_t v88 = v22;
          if (v21) {
            operator delete(v21);
          }
          BOOL v21 = v33;
        }
        else
        {
          *uint64_t v75 = v23;
          int v27 = v75 + 1;
        }
        int v87 = v27;
        uint64_t v75 = v27;
        unsigned int v19 = v74;
      }
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      ++v23;
      uint64_t v20 = *((void *)v19 + 4);
    }
    while (v23 < (*((void *)v19 + 5) - v20) >> 4);
    unsigned int v35 = v86;
    BOOL v36 = v75;
    if (v86 == v75)
    {
      uint64_t v55 = v75;
    }
    else
    {
      uint64_t v37 = (uint64_t)v19 + 56;
      uint64_t v76 = (uint64_t)v19 + 96;
      do
      {
        unint64_t v38 = *v35;
        unint64_t v85 = *v35;
        uint64_t v39 = v77[4];
        if (v77[5] != v39)
        {
          uint64_t v73 = v35;
          unint64_t v40 = 0;
          do
          {
            v89[0] = (uint64_t *)&v85;
            int v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v37, &v85, (uint64_t)&std::piecewise_construct, v89);
            v89[0] = (uint64_t *)&v85;
            BOOL v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v76, &v85, (uint64_t)&std::piecewise_construct, v89);
            uint64_t v43 = v37;
            uint64_t v44 = v41[4] - v41[3];
            if (v44)
            {
              int v45 = v42;
              uint64_t v46 = 0;
              unint64_t v47 = v44 / 24;
              long long v48 = (void *)(v39 + 120 * (int)v40 + 16);
              if (v47 <= 1) {
                uint64_t v49 = 1;
              }
              else {
                uint64_t v49 = v47;
              }
              do
              {
                uint64_t v50 = v41[3];
                uint64_t v51 = v45[3] + v46;
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v48, v51))
                {
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(v48, v51);
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v48, v50 + v46, v50 + v46);
                }
                v46 += 24;
                --v49;
              }
              while (v49);
            }
            ++v40;
            uint64_t v39 = v77[4];
            uint64_t v37 = v43;
          }
          while (v40 < 0xEEEEEEEEEEEEEEEFLL * ((v77[5] - v39) >> 3));
          unint64_t v38 = v85;
          unsigned int v35 = v73;
          unsigned int v19 = v74;
        }
        uint64_t v52 = v75;
        if (v38 && v38 != ((uint64_t)(*((void *)v19 + 5) - *((void *)v19 + 4)) >> 4) - 1)
        {
          v89[0] = (uint64_t *)&v85;
          long long v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v37, &v85, (uint64_t)&std::piecewise_construct, v89);
          v89[0] = (uint64_t *)(v85 + 1);
          long long v54 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v85 + 1, v89);
          std::vector<std::string>::__vdeallocate(v54 + 1);
          *(_OWORD *)&v54[1].__begin_ = *(_OWORD *)(v53 + 3);
          v54[1].__end_cap_.__value_ = (std::string *)v53[5];
          void v53[3] = 0;
          v53[4] = 0;
          v53[5] = 0;
          uint64_t v52 = v75;
        }
        ++v35;
      }
      while (v35 != v52);
      BOOL v36 = v86;
      uint64_t v55 = v87;
    }
  }
  for (uint64_t i = v55; i != v36; --i)
  {
    int v57 = *((_DWORD *)i - 2);
    Espresso::net::remove_layer(v19, v57);
  }
  uint64_t v58 = v77[4];
  uint64_t v59 = v77[5];
  uint64_t v60 = v59 - v58;
  if (v59 != v58)
  {
    uint64_t v61 = 0;
    unint64_t v62 = v60 / 120;
    if (v62 <= 1) {
      unint64_t v62 = 1;
    }
    do
    {
      uint64_t v63 = (unint64_t *)(v58 + 120 * (int)v61);
      unint64_t v64 = *v63;
      if (v36 == v55)
      {
        uint64_t v65 = 0;
      }
      else
      {
        uint64_t v65 = 0;
        long long v66 = v36;
        do
        {
          if (*v66 >= v64) {
            break;
          }
          ++v65;
          ++v66;
        }
        while (v66 != v55);
      }
      *uint64_t v63 = v64 - v65;
      *(void *)(v58 + 120 * (int)v61++ + 8) -= v65;
    }
    while (v61 != v62);
  }
  if (v36)
  {
    int v87 = v36;
    operator delete(v36);
  }
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  uint64_t v67 = v84;
  v78[0] = v83;
  v78[1] = (uint64_t)v84;
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v86 = 0;
  int v87 = 0;
  unint64_t v88 = 0;
  Espresso::compress_segments_to_dev_ops(v78, (uint64_t *)&v86);
  v89[0] = (uint64_t *)&v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  *(void *)(v68 + 8) = 0;
  *(void *)(v68 + 16) = 0;
  *(unsigned char *)uint64_t v68 = 1;
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  if (v84) {
    nitro::nitro_function::nitro_function(v84);
  }
}

void sub_1926B8B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27)
{
  uint64_t v28 = a13;
  if (a25)
  {
    nitro::nitro_function::nitro_function(a25);
    uint64_t v28 = a13;
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(void *a1, uint64_t a2)
{
  BOOL v3 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    uint64_t v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      char v8 = v7;
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }
    *char v8 = v11;
    uint64_t *v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, (void **)v3);
  }
}

void Espresso::compress_segments_to_dev_ops(uint64_t *a1, uint64_t *a2)
{
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  BOOL v3 = *(uint64_t (****)(void))(*(void *)(*a1 + 16) + 8);
  unsigned int v4 = (**v3)(v3);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*a1 + 528), v4);
  if (!v5) {
    goto LABEL_173;
  }
  uint8x8_t v6 = v5;
  uint64_t v7 = (const void *)v5[3];
  char v8 = (std::__shared_weak_count *)v6[4];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v177 = v8;
  if (!v7
  {
LABEL_173:
    Espresso::throw_exception_selector<Espresso::generic_error>("Error casting net_compiler to segment based compiler");
  }
  if (v177) {
    atomic_fetch_add_explicit(&v177->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v179[4];
  if (v179[5] != v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = (uint64_t *)(v9 + 120 * (int)v11);
      uint64_t v191 = v9;
      uint64_t v192 = *v12;
      uint64_t v190 = v12[1];
      uint64_t v14 = *(void *)(*a1 + 32);
      uint64_t v13 = *(void *)(*a1 + 40);
      int v15 = (char *)operator new(0xF8uLL);
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *(void *)int v15 = &unk_1EE389DF0;
      std::string::size_type v186 = (std::string::size_type)(v15 + 24);
      *((void *)v15 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v15 + 40) = 0u;
      int v16 = (void **)(v15 + 40);
      *(_OWORD *)(v15 + 56) = 0u;
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 88) = 0u;
      *(_OWORD *)(v15 + 104) = 0u;
      *(_OWORD *)(v15 + 120) = 0u;
      *(_OWORD *)(v15 + 136) = 0u;
      *(_OWORD *)(v15 + 152) = 0u;
      *(_OWORD *)(v15 + 161) = 0u;
      *((_OWORD *)v15 + 13) = 0u;
      *((_OWORD *)v15 + 14) = 0u;
      *((void *)v15 + 30) = 0;
      v202[0] = 0;
      LODWORD(v202[1]) = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v204 = 0u;
      long long v205 = 0u;
      memset(v206, 0, sizeof(v206));
      long long v207 = 0u;
      uint64_t v17 = *a2;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      uint64_t v208 = 0;
      std::string::size_type v193 = (std::string::size_type)v15;
      if (v11 < v18) {
        std::string::operator=(v206, (const std::string *)(v17 + 24 * v11));
      }
      uint64_t v187 = (uint64_t)(v15 + 64);
      MEMORY[0x192FF0F50]();
      Espresso::abstract_engine_factory::shared(&v200);
      long long v185 = (void **)(v192 - v10);
      uint64_t v180 = 16 * (v192 - v10);
      *((void *)v15 + 4) = *(void *)(*(void *)(*(void *)(*a1 + 32) + v180) + 8);
      uint64_t v189 = (int *)(v15 + 32);
      std::to_string(&v197, v11);
      uint64_t v183 = v14;
      uint64_t v184 = v13;
      unsigned int v19 = std::string::insert(&v197, 0, "dev_op__");
      std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
      v211.__begin_ = (std::vector<std::string>::pointer)v19->__r_.__value_.__l.__size_;
      *(std::vector<std::string>::pointer *)((char *)&v211.__begin_ + 7) = *(std::vector<std::string>::pointer *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v193 + 63) < 0) {
        operator delete(*v16);
      }
      std::vector<std::string>::pointer begin = v211.__begin_;
      *(void *)(v193 + 40) = v20;
      *(void *)(v193 + 48) = begin;
      *(void *)(v193 + 55) = *(std::vector<std::string>::pointer *)((char *)&v211.__begin_ + 7);
      *(unsigned char *)(v193 + 63) = v21;
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v197.__r_.__value_.__l.__data_);
      }
      HIDWORD(v202[0]) = v11;
      uint64_t v181 = v10;
      if (*(unsigned char *)(*(void *)(*a1 + 16) + 127)) {
        int v23 = *v189;
      }
      else {
        int v23 = 10007;
      }
      unint64_t v182 = v11;
      LODWORD(v202[0]) = v23;
      memset(&v211, 0, sizeof(v211));
      int v188 = v11;
      for (uint64_t i = *(uint64_t **)(v191 + 120 * (int)v11 + 32); i; uint64_t i = (uint64_t *)*i)
      {
        uint64_t v25 = (uint64_t **)(*a1 + 184);
        v197.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
        unsigned int v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, i + 2, (long long **)&v197);
        int v28 = *((_DWORD *)v26 + 14);
        int v27 = *((_DWORD *)v26 + 15);
        int v30 = *((_DWORD *)v26 + 16);
        int v29 = *((_DWORD *)v26 + 17);
        int v32 = *((_DWORD *)v26 + 18);
        int v31 = *((_DWORD *)v26 + 19);
        int v33 = __p[1];
        if (__p[1] >= (void *)v204)
        {
          unsigned int v35 = __p[0];
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v204 - (unint64_t)__p[0]) >> 3) > v37) {
            unint64_t v37 = 0x5555555555555556 * ((uint64_t)(v204 - (unint64_t)__p[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v204 - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
            unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v38);
            unsigned int v35 = __p[0];
            int v33 = __p[1];
          }
          else
          {
            uint64_t v39 = 0;
          }
          unint64_t v40 = (char *)(v38 + 24 * v36);
          *(_DWORD *)unint64_t v40 = v32;
          *((_DWORD *)v40 + 1) = v29;
          *((_DWORD *)v40 + 2) = v30;
          *((_DWORD *)v40 + 3) = v27;
          *((_DWORD *)v40 + 4) = v28;
          *((_DWORD *)v40 + 5) = v31;
          int v41 = v40;
          if (v33 != v35)
          {
            do
            {
              long long v42 = *(_OWORD *)(v33 - 6);
              *((void *)v41 - 1) = *((void *)v33 - 1);
              *(_OWORD *)(v41 - 24) = v42;
              v41 -= 24;
              v33 -= 6;
            }
            while (v33 != v35);
            unsigned int v35 = __p[0];
          }
          unint64_t v34 = v40 + 24;
          __p[0] = v41;
          __p[1] = v40 + 24;
          *(void *)&long long v204 = v38 + 24 * v39;
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(_DWORD *)__p[1] = v32;
          v33[1] = v29;
          id v33[2] = v30;
          v33[3] = v27;
          unint64_t v34 = v33 + 6;
          v33[4] = v28;
          v33[5] = v31;
        }
        __p[1] = v34;
        std::vector<std::string>::pointer end = v211.__end_;
        if (v211.__end_ >= v211.__end_cap_.__value_)
        {
          int v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v211, (uint64_t)(i + 2));
        }
        else
        {
          if (*((char *)i + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v211.__end_, (const std::string::value_type *)i[2], i[3]);
          }
          else
          {
            long long v44 = *((_OWORD *)i + 1);
            v211.__end_->__r_.__value_.__r.__words[2] = i[4];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v44;
          }
          int v45 = end + 1;
        }
        v211.__end_ = v45;
      }
      memset(&v199, 0, sizeof(v199));
      for (uint64_t j = *(uint64_t **)(v191 + 120 * v188 + 72); j; uint64_t j = (uint64_t *)*j)
      {
        unint64_t v47 = (uint64_t **)(*a1 + 184);
        v197.__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 2);
        long long v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, j + 2, (long long **)&v197);
        int v49 = *((_DWORD *)v48 + 14);
        int v50 = *((_DWORD *)v48 + 15);
        int v52 = *((_DWORD *)v48 + 16);
        int v51 = *((_DWORD *)v48 + 17);
        int v54 = *((_DWORD *)v48 + 18);
        int v53 = *((_DWORD *)v48 + 19);
        uint64_t v55 = (_DWORD *)v205;
        if ((unint64_t)v205 >= *((void *)&v205 + 1))
        {
          int v57 = (_DWORD *)*((void *)&v204 + 1);
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v205 - *((void *)&v204 + 1)) >> 3);
          unint64_t v59 = v58 + 1;
          if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*((void *)&v205 + 1) - *((void *)&v204 + 1)) >> 3) > v59) {
            unint64_t v59 = 0x5555555555555556 * ((uint64_t)(*((void *)&v205 + 1) - *((void *)&v204 + 1)) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v205 + 1) - *((void *)&v204 + 1)) >> 3) >= 0x555555555555555) {
            unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v60 = v59;
          }
          if (v60)
          {
            unint64_t v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v60);
            int v57 = (_DWORD *)*((void *)&v204 + 1);
            uint64_t v55 = (_DWORD *)v205;
          }
          else
          {
            uint64_t v61 = 0;
          }
          unint64_t v62 = (_DWORD *)(v60 + 24 * v58);
          *unint64_t v62 = v54;
          v62[1] = v51;
          v62[2] = v52;
          v62[3] = v50;
          v62[4] = v49;
          v62[5] = v53;
          uint64_t v63 = v62;
          if (v55 != v57)
          {
            do
            {
              long long v64 = *(_OWORD *)(v55 - 6);
              *((void *)v63 - 1) = *((void *)v55 - 1);
              *(_OWORD *)(v63 - 6) = v64;
              v63 -= 6;
              v55 -= 6;
            }
            while (v55 != v57);
            int v57 = (_DWORD *)*((void *)&v204 + 1);
          }
          __int32 v56 = v62 + 6;
          *((void *)&v204 + 1) = v63;
          *(void *)&long long v205 = v62 + 6;
          *((void *)&v205 + 1) = v60 + 24 * v61;
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          *(_DWORD *)long long v205 = v54;
          v55[1] = v51;
          v55[2] = v52;
          void v55[3] = v50;
          __int32 v56 = v55 + 6;
          v55[4] = v49;
          v55[5] = v53;
        }
        *(void *)&long long v205 = v56;
        std::vector<std::string>::pointer v65 = v199.__end_;
        if (v199.__end_ >= v199.__end_cap_.__value_)
        {
          uint64_t v67 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v199, (uint64_t)(j + 2));
        }
        else
        {
          if (*((char *)j + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v199.__end_, (const std::string::value_type *)j[2], j[3]);
          }
          else
          {
            long long v66 = *((_OWORD *)j + 1);
            v199.__end_->__r_.__value_.__r.__words[2] = j[4];
            *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
          }
          uint64_t v67 = v65 + 1;
        }
        v199.__end_ = v67;
      }
      uint64_t v68 = v190 - v192;
      if (v190 - v192 == 1)
      {
        uint64_t v69 = *(const void **)(*(void *)(*(void *)(*a1 + 32) + v180) + 64);
        if (v69)
        {
          if (v70)
          {
            uint64_t v71 = v70;
            if (&v206[1] != (std::string *)(v70 + 58)) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v206[1], v70[58], v70[59], 0xAAAAAAAAAAAAAAABLL * (((char *)v70[59] - (char *)v70[58]) >> 3));
            }
            if (&v207 != (long long *)(v71 + 61)) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v207, v71[61], v71[62], 0xAAAAAAAAAAAAAAABLL * (((char *)v71[62] - (char *)v71[61]) >> 3));
            }
          }
        }
      }
      Espresso::abstract_engine_factory::make_kernel_priv(v200, *a1 + 16, v187, (uint64_t)v202, v189);
      long long v72 = *(_OWORD *)&v197.__r_.__value_.__l.__data_;
      *(_OWORD *)&v197.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v73 = *(std::__shared_weak_count **)(v193 + 96);
      *(_OWORD *)(v193 + 88) = v72;
      if (v73)
      {
        nitro::nitro_function::nitro_function(v73);
        if (v197.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v197.__r_.__value_.__l.__size_);
        }
      }
      std::vector<std::string>::pointer v75 = v211.__end_;
      std::vector<std::string>::pointer v74 = v211.__begin_;
      if (v211.__begin_ != v211.__end_)
      {
        uint64_t v76 = (void *)(v193 + 104);
        do
        {
          uint64_t v77 = *a1 + 136;
          v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
          uint64_t v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v77, (unsigned __int8 *)v74, (long long **)&v197);
          uint64_t v79 = v78;
          int v80 = *(void **)(v193 + 112);
          unint64_t v81 = *(void *)(v193 + 120);
          if ((unint64_t)v80 >= v81)
          {
            uint64_t v85 = ((uint64_t)v80 - *v76) >> 4;
            unint64_t v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v87 = v81 - *v76;
            if (v87 >> 3 > v86) {
              unint64_t v86 = v87 >> 3;
            }
            if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v88 = v86;
            }
            v198[0].__end_ = (std::vector<std::string>::pointer)(v193 + 120);
            uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v88);
            uint64_t v90 = &v89[16 * v85];
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
            v197.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
            v198[0].__begin_ = (std::vector<std::string>::pointer)&v89[16 * v91];
            long long v92 = *(_OWORD *)(v79 + 40);
            *(_OWORD *)uint64_t v90 = v92;
            if (*((void *)&v92 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v92 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            v197.__r_.__value_.__r.__words[2] = (std::string::size_type)(v90 + 16);
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v76, &v197);
            std::string::size_type v84 = v193;
            uint64_t v83 = *(void **)(v193 + 112);
            std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v197);
          }
          else
          {
            *int v80 = *((void *)v78 + 5);
            uint64_t v82 = *((void *)v78 + 6);
            v80[1] = v82;
            if (v82) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v83 = v80 + 2;
            std::string::size_type v84 = v193;
            *(void *)(v193 + 112) = v80 + 2;
          }
          *(void *)(v84 + 112) = v83;
          ++v74;
        }
        while (v74 != v75);
      }
      std::vector<std::string>::pointer v94 = v199.__end_;
      std::vector<std::string>::pointer v93 = v199.__begin_;
      if (v199.__begin_ != v199.__end_)
      {
        int v95 = (void *)(v193 + 128);
        do
        {
          uint64_t v96 = *a1 + 136;
          v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
          uint64_t v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v96, (unsigned __int8 *)v93, (long long **)&v197);
          int v98 = v97;
          int v99 = *(void **)(v193 + 136);
          unint64_t v100 = *(void *)(v193 + 144);
          if ((unint64_t)v99 >= v100)
          {
            uint64_t v104 = ((uint64_t)v99 - *v95) >> 4;
            unint64_t v105 = v104 + 1;
            if ((unint64_t)(v104 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v106 = v100 - *v95;
            if (v106 >> 3 > v105) {
              unint64_t v105 = v106 >> 3;
            }
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v107 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v107 = v105;
            }
            v198[0].__end_ = (std::vector<std::string>::pointer)(v193 + 144);
            uint64_t v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v107);
            uint64_t v109 = &v108[16 * v104];
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
            v197.__r_.__value_.__l.__size_ = (std::string::size_type)v109;
            v198[0].__begin_ = (std::vector<std::string>::pointer)&v108[16 * v110];
            long long v111 = *(_OWORD *)(v98 + 40);
            *(_OWORD *)uint64_t v109 = v111;
            if (*((void *)&v111 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v111 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            v197.__r_.__value_.__r.__words[2] = (std::string::size_type)(v109 + 16);
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v95, &v197);
            std::string::size_type v103 = v193;
            uint64_t v102 = *(void **)(v193 + 136);
            std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v197);
          }
          else
          {
            void *v99 = *((void *)v97 + 5);
            uint64_t v101 = *((void *)v97 + 6);
            v99[1] = v101;
            if (v101) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v102 = v99 + 2;
            std::string::size_type v103 = v193;
            *(void *)(v193 + 136) = v99 + 2;
          }
          *(void *)(v103 + 136) = v102;
          ++v93;
        }
        while (v93 != v94);
      }
      memset(v198, 0, sizeof(v198));
      BOOL v112 = v185;
      LODWORD(v197.__r_.__value_.__l.__data_) = v185 - 1;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v193 + 8), 1uLL, memory_order_relaxed);
      v197.__r_.__value_.__l.__size_ = v186;
      v197.__r_.__value_.__r.__words[2] = v193;
      std::vector<std::string>::__vdeallocate(v198);
      v198[0] = v211;
      memset(&v211, 0, sizeof(v211));
      std::vector<std::string>::__vdeallocate(&v198[1]);
      v198[1] = v199;
      memset(&v199, 0, sizeof(v199));
      int64x2_t v195 = 0uLL;
      uint64_t v196 = 0;
      uint64_t v113 = (v184 - v183) >> 4;
      v195.i64[1] = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v195, (uint64_t)&v197);
      while (1)
      {
        v210 = (int64x2_t *)v112;
        if ((unint64_t)v112 >= v113 - v68) {
          break;
        }
        uint64_t v114 = *a1 + 56;
        v194 = (char *)v112 + v68;
        uint64_t v115 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v114, (unint64_t)v112 + v68, &v194);
        uint64_t v116 = *a1 + 56;
        v209 = (void ***)&v210;
        uint64_t v117 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v116, (unint64_t *)&v210, (uint64_t)&std::piecewise_construct, (uint64_t **)&v209);
        std::vector<std::string>::__vdeallocate(v117 + 1);
        *(_OWORD *)&v117[1].__begin_ = *(_OWORD *)(v115 + 3);
        v117[1].__end_cap_.__value_ = (std::string *)v115[5];
        v115[3] = 0;
        v115[4] = 0;
        v115[5] = 0;
        uint64_t v118 = *a1 + 96;
        v194 = &v210->i8[v68];
        uint64_t v119 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v118, (unint64_t)v210->u64 + v68, &v194);
        uint64_t v120 = *a1 + 96;
        v209 = (void ***)&v210;
        uint64_t v121 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v120, (unint64_t *)&v210, (uint64_t)&std::piecewise_construct, (uint64_t **)&v209);
        std::vector<std::string>::__vdeallocate(v121 + 1);
        *(_OWORD *)&v121[1].__begin_ = *(_OWORD *)(v119 + 3);
        v121[1].__end_cap_.__value_ = (std::string *)v119[5];
        v119[3] = 0;
        v119[4] = 0;
        v119[5] = 0;
        int8x8_t v122 = v210;
        uint64_t v123 = *(void *)(*a1 + 32);
        long long v124 = *(_OWORD *)(v123 + 16 * ((void)v210 + v68));
        uint64_t v125 = *(void *)(v123 + 16 * ((void)v210 + v68) + 8);
        if (v125) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v125 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v126 = v123 + 16 * (void)v122;
        uint64_t v127 = *(std::__shared_weak_count **)(v126 + 8);
        *(_OWORD *)uint64_t v126 = v124;
        if (v127)
        {
          nitro::nitro_function::nitro_function(v127);
          int8x8_t v122 = v210;
        }
        BOOL v112 = (void **)((char *)v122->i64 + 1);
      }
      if (v190 != v192)
      {
        uint64_t v128 = v192 - v190;
        do
        {
          std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((void *)(*a1 + 56), v113 + v128);
          std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((void *)(*a1 + 96), v113 + v128);
          uint64_t v129 = *a1;
          uint64_t v130 = *(void *)(*a1 + 40);
          uint64_t v131 = *(std::__shared_weak_count **)(v130 - 8);
          if (v131) {
            nitro::nitro_function::nitro_function(v131);
          }
          *(void *)(v129 + 40) = v130 - 16;
        }
        while (!__CFADD__(v128++, 1));
      }
      Espresso::net::insert_layers(*a1, (uint64_t **)&v195);
      v210 = &v195;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
      v195.i64[0] = (uint64_t)&v198[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
      v195.i64[0] = (uint64_t)v198;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
      if (v197.__r_.__value_.__r.__words[2]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v197.__r_.__value_.__r.__words[2]);
      }
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      if (v201) {
        nitro::nitro_function::nitro_function(v201);
      }
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      if (SHIBYTE(v206[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v206[0].__r_.__value_.__l.__data_);
      }
      if (*((void *)&v204 + 1))
      {
        *(void *)&long long v205 = *((void *)&v204 + 1);
        operator delete(*((void **)&v204 + 1));
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v10 = v181 + v68 - 1;
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v193);
      unint64_t v11 = v182 + 1;
      uint64_t v9 = v179[4];
    }
    while (v182 + 1 < 0xEEEEEEEEEEEEEEEFLL * ((v179[5] - v9) >> 3));
  }
  *(_OWORD *)&v197.__r_.__value_.__r.__words[1] = 0uLL;
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197.__r_.__value_.__l.__size_;
  *(_OWORD *)v202 = 0u;
  *(_OWORD *)std::string __p = 0u;
  LODWORD(v204) = 1065353216;
  v199.__begin_ = 0;
  uint64_t v133 = *a1;
  if (*(void *)(*a1 + 40) != *(void *)(*a1 + 32))
  {
    do
    {
      v211.__begin_ = (std::vector<std::string>::pointer)&v199;
      uint64_t v134 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v133 + 56, (unint64_t *)&v199, (uint64_t)&std::piecewise_construct, (uint64_t **)&v211);
      v135 = (std::string *)v134[3];
      uint64_t v136 = (std::string *)v134[4];
      while (v135 != v136)
      {
        uint64_t v137 = *a1 + 136;
        v211.__begin_ = v135;
        int64x2_t v138 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v137, (unsigned __int8 *)v135, (long long **)&v211);
        v211.__begin_ = v135;
        uint64_t v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v202, (unsigned __int8 *)v135, (long long **)&v211);
        uint64_t v141 = *((void *)v138 + 5);
        uint64_t v140 = *((void *)v138 + 6);
        if (v140) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v140 + 8), 1uLL, memory_order_relaxed);
        }
        id v142 = (std::__shared_weak_count *)*((void *)v139 + 6);
        *((void *)v139 + 5) = v141;
        *((void *)v139 + 6) = v140;
        if (v142) {
          nitro::nitro_function::nitro_function(v142);
        }
        uint64_t v143 = (uint64_t **)(*a1 + 184);
        v211.__begin_ = v135;
        uint64_t v144 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v135, (long long **)&v211);
        v211.__begin_ = v135;
        uint64_t v145 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v197, v135, (long long **)&v211);
        long long v146 = *(_OWORD *)(v144 + 56);
        long long v147 = *(_OWORD *)(v144 + 72);
        *((void *)v145 + 11) = *((void *)v144 + 11);
        *(_OWORD *)(v145 + 72) = v147;
        *(_OWORD *)(v145 + 56) = v146;
        if (v145 != v144) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v145 + 96, *((char **)v144 + 12), *((void *)v144 + 13), (uint64_t)(*((void *)v144 + 13) - *((void *)v144 + 12)) >> 2);
        }
        ++v135;
      }
      uint64_t v148 = *a1 + 96;
      v211.__begin_ = (std::vector<std::string>::pointer)&v199;
      id v149 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v148, (unint64_t *)&v199, (uint64_t)&std::piecewise_construct, (uint64_t **)&v211);
      uint64_t v150 = (std::string *)v149[3];
      uint64_t v151 = (std::string *)v149[4];
      while (v150 != v151)
      {
        uint64_t v152 = *a1 + 136;
        v211.__begin_ = v150;
        unint64_t v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v152, (unsigned __int8 *)v150, (long long **)&v211);
        v211.__begin_ = v150;
        uint64_t v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v202, (unsigned __int8 *)v150, (long long **)&v211);
        uint64_t v156 = *((void *)v153 + 5);
        uint64_t v155 = *((void *)v153 + 6);
        if (v155) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v155 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v157 = (std::__shared_weak_count *)*((void *)v154 + 6);
        *((void *)v154 + 5) = v156;
        *((void *)v154 + 6) = v155;
        if (v157) {
          nitro::nitro_function::nitro_function(v157);
        }
        BOOL v158 = (uint64_t **)(*a1 + 184);
        v211.__begin_ = v150;
        uint64_t v159 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v158, v150, (long long **)&v211);
        v211.__begin_ = v150;
        uint64_t v160 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v197, v150, (long long **)&v211);
        long long v161 = *(_OWORD *)(v159 + 56);
        long long v162 = *(_OWORD *)(v159 + 72);
        *((void *)v160 + 11) = *((void *)v159 + 11);
        *(_OWORD *)(v160 + 72) = v162;
        *(_OWORD *)(v160 + 56) = v161;
        if (v160 != v159) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v160 + 96, *((char **)v159 + 12), *((void *)v159 + 13), (uint64_t)(*((void *)v159 + 13) - *((void *)v159 + 12)) >> 2);
        }
        ++v150;
      }
      ++v199.__begin_;
      uint64_t v133 = *a1;
    }
    while (v199.__begin_ < (std::vector<std::string>::pointer)((uint64_t)(*(void *)(*a1 + 40) - *(void *)(*a1 + 32)) >> 4));
  }
  uint64_t v164 = *(char **)(v133 + 192);
  int v163 = (std::string::size_type *)(v133 + 192);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(v163 - 1), v164);
  std::string::size_type size = v197.__r_.__value_.__l.__size_;
  *(v163 - 1) = v197.__r_.__value_.__r.__words[0];
  *int v163 = size;
  std::string::size_type v166 = v197.__r_.__value_.__r.__words[2];
  v163[1] = v197.__r_.__value_.__r.__words[2];
  if (v166)
  {
    *(void *)(size + 16) = v163;
    v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197.__r_.__value_.__l.__size_;
    *(_OWORD *)&v197.__r_.__value_.__r.__words[1] = 0uLL;
  }
  else
  {
    *(v163 - 1) = (std::string::size_type)v163;
  }
  uint64_t v167 = *a1;
  uint64_t v168 = (void *)(v167 + 136);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(v167 + 136);
  uint64_t v169 = v202[0];
  v202[0] = 0;
  uint64_t v170 = *(void **)(v167 + 136);
  *(void *)(v167 + 136) = v169;
  if (v170) {
    operator delete(v170);
  }
  unint64_t v172 = (unint64_t)v202[1];
  int v171 = __p[0];
  *(void **)(v167 + 152) = __p[0];
  uint64_t v173 = v167 + 152;
  *(void *)(v173 - 8) = v172;
  v202[1] = 0;
  int v174 = __p[1];
  *(void **)(v173 + 8) = __p[1];
  *(_DWORD *)(v173 + 16) = v204;
  if (v174)
  {
    unint64_t v175 = v171[1];
    if ((v172 & (v172 - 1)) != 0)
    {
      if (v175 >= v172) {
        v175 %= v172;
      }
    }
    else
    {
      v175 &= v172 - 1;
    }
    int v171 = 0;
    *(void *)(*v168 + 8 * v175) = v173;
    __p[0] = 0;
    __p[1] = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v171);
  uint64_t v176 = v202[0];
  v202[0] = 0;
  if (v176) {
    operator delete(v176);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v197, (char *)v197.__r_.__value_.__l.__size_);
  if (v177)
  {
    nitro::nitro_function::nitro_function(v177);
    nitro::nitro_function::nitro_function(v177);
  }
}

void sub_1926B9E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::new_layer_info::~new_layer_info(Espresso::net::new_layer_info *this)
{
  BOOL v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::dev_op_params_t::~dev_op_params_t(void **this)
{
  unsigned int v4 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  unsigned int v4 = this + 11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  BOOL v2 = this[5];
  if (v2)
  {
    this[6] = v2;
    operator delete(v2);
  }
  BOOL v3 = this[2];
  if (v3)
  {
    this[3] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<Espresso::layer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::layer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_compress_segments::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_compress_segments::~pass_compress_segments(Espresso::pass_compress_segments *this)
{
  *(void *)this = &unk_1EE3719B0;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_compress_segments>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_compress_segments>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387930;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_compress_segments>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1926BA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EspressoDataFrameMappedFile;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1926BA444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error,char const*>(char *a1, uint64_t a2)
{
}

void sub_1926BA5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>(char *a1, uint64_t a2)
{
}

void sub_1926BAA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1926BABF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>(char *a1, void *a2)
{
}

void sub_1926BB02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error>(const char *a1)
{
}

void sub_1926BB7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926BBA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926BBE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  __cxa_free_exception(v23);
  if (a2 == 1)
  {
    unsigned int v26 = __cxa_begin_catch(a1);
    if (a11 && !*a11)
    {
      int v27 = (void *)MEMORY[0x1E4F28C58];
      a21 = *MEMORY[0x1E4F28568];
      int v28 = [NSString stringWithUTF8String:(*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26)];
      a22 = (uint64_t)v28;
      int v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a22 forKeys:&a21 count:1];
      *a11 = [v27 errorWithDomain:*MEMORY[0x1E4F281F8] code:1 userInfo:v29];
    }
    __cxa_end_catch();
    JUMPOUT(0x1926BBD5CLL);
  }

  _Unwind_Resume(a1);
}

void sub_1926BC27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EspressoDataFrameExecutor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1926BCD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1926BD2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1926BE284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,Espresso::layer_shape>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(i + 16));
    unint64_t v7 = v6;
    unint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v2 = v6;
        if (v6 >= v8) {
          unint64_t v2 = v6 % v8;
        }
      }
      else
      {
        unint64_t v2 = (v8 - 1) & v6;
      }
      unint64_t v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
      if (v11)
      {
        for (uint64_t j = *v11; j; uint64_t j = *(unsigned __int8 **)j)
        {
          unint64_t v13 = *((void *)j + 1);
          if (v13 == v7)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, i + 16)) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v2) {
              break;
            }
          }
        }
      }
    }
    uint64_t v14 = (char *)operator new(0x68uLL);
    v25[0] = v14;
    v25[1] = a1 + 16;
    char v26 = 0;
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + 1) = v7;
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]((std::string *)(v14 + 16), (long long *)i + 1);
    char v26 = 1;
    float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v16 = *(float *)(a1 + 32);
    if (!v8 || (float)(v16 * (float)v8) < v15)
    {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v17 = 1;
      }
      unint64_t v18 = v17 | (2 * v8);
      unint64_t v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = v18;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v20);
      unint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8) {
          unint64_t v2 = v7 % v8;
        }
        else {
          unint64_t v2 = v7;
        }
      }
      else
      {
        unint64_t v2 = (v8 - 1) & v7;
      }
    }
    char v21 = *(void **)(*(void *)a1 + 8 * v2);
    uint64_t v22 = v25[0];
    if (v21)
    {
      *(void *)v25[0] = *v21;
    }
    else
    {
      *(void *)v25[0] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v22;
      *(void *)(*(void *)a1 + 8 * v2) = a1 + 16;
      if (!*(void *)v22) {
        goto LABEL_39;
      }
      unint64_t v23 = *(void *)(*(void *)v22 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      char v21 = (void *)(*(void *)a1 + 8 * v23);
    }
    *char v21 = v22;
LABEL_39:
    v25[0] = 0;
    ++*(void *)(a1 + 24);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
LABEL_40:
    ;
  }
  return a1;
}

void sub_1926BE634(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(*(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1926BEA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926BEF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v17 - 88);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v16) {
    free(v16);
  }

  _Unwind_Resume(a1);
}

void sub_1926BF3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926BF7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::layer::clear_weights(Espresso::layer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 8) + 56))();
}

uint64_t Espresso::layer::share_weights(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 64) + 48))(*(void *)(a1 + 64), *a2 + 64);
}

uint64_t Espresso::layer::syntetic_description(Espresso::layer *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  if (*((void *)this + 11) != *((void *)this + 10))
  {
    unint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
    BOOL v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
    unsigned int v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
    std::ostream::operator<<();
  }
  if (*((void *)this + 14) != *((void *)this + 13))
  {
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" -> ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
    unint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    unint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
    std::ostream::operator<<();
  }
  uint8x8_t v9 = (void *)((char *)this + 40);
  int v10 = *((char *)this + 63);
  if (v10 < 0)
  {
    if (*((void *)this + 6) != 11) {
      goto LABEL_16;
    }
    uint8x8_t v9 = (void *)*v9;
  }
  else if (v10 != 11)
  {
    goto LABEL_16;
  }
  unint64_t v11 = (void *)*v9;
  uint64_t v12 = *(void *)((char *)v9 + 3);
  if (v11 == (void *)0x74756C6F766E6F63 && v12 == 0x6E6F6974756C6F76)
  {
    uint64_t v14 = *((void *)this + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" (kx=", 5);
    (*(void (**)(uint64_t))(*(void *)v14 + 384))(v14);
    float v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ky=", 4);
    (*(void (**)(uint64_t))(*(void *)v14 + 384))(v14);
    float v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ng=", 4);
    (*(void (**)(uint64_t))(*(void *)v14 + 384))(v14);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  }
LABEL_16:
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FF15B0](&v21);
}

void sub_1926BFC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::layer::layer_training_transform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  a5[1] = 0u;
  a5[2] = 0u;
  *a5 = 0u;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, _OWORD *))(**(void **)(a1 + 64) + 232))(*(void *)(a1 + 64), a2, a3, a4, a5);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, _OWORD *))(**(void **)(a1 + 64) + 224))(*(void *)(a1 + 64), a2, a3, a4, a5);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, _OWORD *))(**(void **)(a1 + 64) + 216))(*(void *)(a1 + 64), a2, a3, a4, a5);
}

void sub_1926BFD68(_Unwind_Exception *a1)
{
  Espresso::layer_training_transform_info::~layer_training_transform_info(v1);
  _Unwind_Resume(a1);
}

void Espresso::layer_training_transform_info::~layer_training_transform_info(void **this)
{
  unint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t Espresso::layer::transform_transfer_global_parameters(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 240))();
}

std::string *Espresso::layer::set_debug_name(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 200), a2);
}

void Espresso::layer::debug_name(Espresso::layer *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

void Espresso::get_layer_parameter_name(const void **a1@<X1>, int a2@<W2>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  unint64_t v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 11);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v8 = a1;
    }
    else {
      unint64_t v8 = *a1;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ":blob_type(");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v11 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v16, ")");
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1926BFF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::make_new_kernel(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  size_t v6 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v11, (uint64_t)v6, (void *)(*(void *)a1 + 40));
  uint64_t v7 = v11;
  if (!v11)
  {
    uint8x8_t v9 = (void *)(*(void *)a1 + 40);
    if (*(char *)(*(void *)a1 + 63) < 0) {
      uint8x8_t v9 = (void *)*v9;
    }
    *(void *)&long long v10 = v9;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("layer_io not found for %s", &v10);
  }
  *a3 = 0;
  a3[1] = 0;
  Espresso::abstract_engine_factory::shared(&v10);
  int is_kernel_supported = Espresso::abstract_engine_factory::is_kernel_supported(v10, a2, *(void *)a1 + 40);
  if (*((void *)&v10 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (is_kernel_supported)
  {
    (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t, void))(*(void *)v7 + 40))(&v10, v7, *(void *)(*(void *)a1 + 64), a2, *(unsigned int *)(*(void *)a1 + 12));
    *(_OWORD *)a3 = v10;
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1926C00D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::factory_t<Espresso::SerDes::layer_io_base>::~factory_t(Espresso::generic_factory_t *a1)
{
  Espresso::generic_factory_t::~generic_factory_t(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::layer_io_base>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::layer_io_base>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::layer_io_base>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::clone_kernel(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  size_t v6 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  uint64_t v7 = (char *)(*(uint64_t (**)(void))(*(void *)*a1 + 272))(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v16, (uint64_t)v6, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = v16;
  if (!v16)
  {
    __p[0] = (void *)(*(uint64_t (**)(void))(*(void *)*a1 + 272))(*a1);
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("layer_io not found for %s", __p);
  }
  *a3 = 0;
  a3[1] = 0;
  if (!*a2)
  {
    (*(void (**)(void **__return_ptr, uint64_t, void, uint64_t, void))(*(void *)v8 + 40))(__p, v8, *a1, *a1 + 8, 0);
    goto LABEL_12;
  }
  Espresso::abstract_engine_factory::shared(&v12);
  uint64_t v9 = v12;
  long long v10 = (char *)(*(uint64_t (**)(void))(*(void *)*a1 + 272))(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  int is_kernel_supported = Espresso::abstract_engine_factory::is_kernel_supported(v9, (uint64_t)a2, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (is_kernel_supported)
  {
    (*(void (**)(void **__return_ptr, uint64_t, void, void *, void))(*(void *)v8 + 40))(__p, v8, *a1, a2, 0);
LABEL_12:
    *(_OWORD *)a3 = *(_OWORD *)__p;
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_1926C03E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fuse_biases(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unsigned int v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v3 + 24);
  uint64_t v14 = *(void *)(v3 + 16);
  char v15 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(_DWORD *)(**(void **)(v3 + 32) + 12);
  uint64_t v12 = v3;
  unint64_t v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimize_network(&v14, v6, (uint64_t)&v12, &__block_literal_global_79, a2);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  uint64_t v14 = *(void *)(v7 + 16);
  char v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *(_DWORD *)(**(void **)(v7 + 32) + 12);
  uint64_t v12 = v7;
  unint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimize_network(&v14, v10, (uint64_t)&v12, &__block_literal_global_97, &v11);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  *(_OWORD *)a2 = v11;
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1926C0674(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      nitro::nitro_function::nitro_function(v1);
      nitro::nitro_function::nitro_function(v1);
      goto LABEL_8;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void Espresso::fuse_batchnorm(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v4 = *(std::__shared_weak_count **)(v2 + 24);
  v7[0] = *(void *)(v2 + 16);
  v7[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *(_DWORD *)(**(void **)(v2 + 32) + 12);
  v6[0] = v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimize_network(v7, v5, (uint64_t)v6, &__block_literal_global_116_479, a2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1926C07B8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

uint64_t *std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t *result, int a2, int a3)
{
  unsigned int v4 = (uint64_t **)result;
  int v6 = (uint64_t **)(result + 1);
  int v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void Espresso::network_shape::~network_shape(char **this)
{
}

void Espresso::network_optimization_graph::~network_optimization_graph(Espresso::network_optimization_graph *this)
{
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)this + 6));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)this + 3));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::fold_batchnorm(const Espresso::net **a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)*a1 + 3);
  v114[0] = *((void *)*a1 + 2);
  v114[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v113[0] = 0;
  v113[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v115, v114, 0, v113);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *a1;
  uint64_t v6 = *((void *)*a1 + 4);
  if (*((void *)*a1 + 5) != v6)
  {
    uint64_t v106 = a2;
    unint64_t v7 = 0;
    while (1)
    {
      int v8 = (uint64_t *)(v6 + 16 * v7);
      uint64_t v10 = *v8;
      uint64_t v9 = (std::__shared_weak_count *)v8[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(v10 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(v10 + 40), *(void *)(v10 + 48));
      }
      else {
        std::string v112 = *(std::string *)(v10 + 40);
      }
      if (*(char *)(v10 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v10 + 200), *(void *)(v10 + 208));
      }
      else
      {
        *(_OWORD *)std::string __str = *(_OWORD *)(v10 + 200);
        *(void *)&__str[16] = *(void *)(v10 + 216);
      }
      std::string::operator=(&__p, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if ((*((unsigned char *)&v112.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v112.__r_.__value_.__l.__size_ == 11)
        {
          if (*(void *)v112.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
            || *(void *)(v112.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
          {
LABEL_42:
            uint64_t v16 = *(std::__shared_weak_count **)(v10 + 72);
            v111[0] = *(void *)(v10 + 64);
            v111[1] = v16;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v22 = (uint64_t)*a1 + 56;
            v152.__r_.__value_.__r.__words[0] = v7;
            unint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v7, &v152);
            memset(v110, 0, sizeof(v110));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v110, v23[3], v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
            uint64_t v24 = (uint64_t)*a1 + 96;
            uint64_t v137 = (std::string *)v7;
            uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v7, &v137);
            memset(v109, 0, sizeof(v109));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v109, v25[3], v25[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[4] - v25[3]) >> 3));
            Espresso::sequential_builder::add_kernel((uint64_t)&v115, v111, v10 + 40, v10 + 16, v110, v109);
            *(void *)std::string __str = v109;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            *(void *)std::string __str = v110;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
            goto LABEL_45;
          }
LABEL_62:
          int v27 = *(_DWORD *)(v10 + 8);
          if (v27 && v27 != 80000 && v27 != 100) {
            goto LABEL_47;
          }
          uint64_t v17 = *a1;
          uint64_t v16 = (std::__shared_weak_count *)a1[1];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v28 = (uint64_t *)(*((void *)v17 + 4) + 16 * (int)v7);
          uint64_t v20 = *v28;
          int v29 = (std::__shared_weak_count *)v28[1];
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v108 = v29;
          if (*(char *)(v20 + 63) < 0) {
            std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v20 + 40), *(void *)(v20 + 48));
          }
          else {
            std::string v152 = *(std::string *)(v20 + 40);
          }
          unsigned int v35 = *(const void **)(v20 + 64);
          if (v35)
          {
            unint64_t v37 = v36;
            if (v36)
            {
              unint64_t v38 = *(std::__shared_weak_count **)(v20 + 72);
              if (v38) {
                atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v107 = v38;
              BOOL v39 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v36 + 384))(v36) + 112) != 0;
LABEL_99:
              if (*(char *)(v20 + 223) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v20 + 200), *(void *)(v20 + 208));
              }
              else
              {
                *(_OWORD *)std::string __str = *(_OWORD *)(v20 + 200);
                *(void *)&__str[16] = *(void *)(v20 + 216);
              }
              std::string::operator=(&__p, (const std::string *)__str);
              if ((__str[23] & 0x80000000) != 0) {
                operator delete(*(void **)__str);
              }
              if (v39)
              {
                if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                {
                  if (v152.__r_.__value_.__l.__size_ == 11)
                  {
                    if (*(void *)v152.__r_.__value_.__l.__data_ == 0x74756C6F766E6F63
                      && *(void *)(v152.__r_.__value_.__r.__words[0] + 3) == 0x6E6F6974756C6F76)
                    {
LABEL_131:
                      uint64_t v61 = (*(uint64_t (**)(void *))(*(void *)v37 + 384))(v37);
                      long long v63 = *(_OWORD *)(v61 + 128);
                      long long v62 = *(_OWORD *)(v61 + 144);
                      uint64_t v64 = *(void *)(v61 + 160);
                      long long v148 = *(_OWORD *)(v61 + 112);
                      long long v65 = *(_OWORD *)v61;
                      long long v66 = *(_OWORD *)(v61 + 32);
                      *(_OWORD *)&__str[16] = *(_OWORD *)(v61 + 16);
                      *(_OWORD *)uint64_t v143 = v66;
                      *(_OWORD *)std::string __str = v65;
                      long long v67 = *(_OWORD *)(v61 + 48);
                      long long v68 = *(_OWORD *)(v61 + 64);
                      long long v69 = *(_OWORD *)(v61 + 96);
                      long long v146 = *(_OWORD *)(v61 + 80);
                      long long v147 = v69;
                      long long v144 = v67;
                      long long v145 = v68;
                      uint64_t v151 = v64;
                      long long v149 = v63;
                      long long v150 = v62;
                      LODWORD(v148) = 0;
                      uint64_t v130 = (int)v7;
                      uint64_t v70 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v17 + 56, (int)v7, &v130);
                      uint64_t v137 = 0;
                      uint64_t v138 = 0;
                      uint64_t v139 = 0;
                      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v137, v70[3], v70[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70[4] - v70[3]) >> 3));
                      uint64_t v128 = (int)v7;
                      uint64_t v71 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v17 + 96, (int)v7, &v128);
                      uint64_t v134 = 0;
                      v135 = 0;
                      uint64_t v136 = 0;
                      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v134, v71[3], v71[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71[4] - v71[3]) >> 3));
                      Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, &v115, (uint64_t)&v152, v20 + 16, (uint64_t)__str, (uint64_t)v137, v138, &v134);
                      if (lpsrc)
                      {
                        if (v56)
                        {
                          int v57 = v141;
                          if (v141)
                          {
                            atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_184:
                            if (v141) {
                              nitro::nitro_function::nitro_function(v141);
                            }
                          }
                          uint64_t v132 = (uint64_t)&v134;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
                          uint64_t v132 = (uint64_t)&v137;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
                          (*(void (**)(void **__return_ptr, void *))(*(void *)v56 + 488))(&lpsrc, v56);
                          (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v37 + 456))(&v132, v37);
                          (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v37 + 448))(&v130, v37);
                          Espresso::blob<float,4>::copy(&v128, v132);
                          uint64_t v84 = 0;
                          uint64_t v85 = v128;
                          uint64_t v86 = *(int *)(v132 + 8);
                          do
                          {
                            v86 *= *(int *)(v132 + 12 + v84);
                            v84 += 4;
                          }
                          while (v84 != 12);
                          memcpy(*(void **)(v128 + 24), *(const void **)(v132 + 24), 4 * v86);
                          if ((*((unsigned char *)&v152.__r_.__value_.__s + 23) & 0x80) == 0)
                          {
                            if (HIBYTE(v152.__r_.__value_.__r.__words[2]) != 11)
                            {
                              if (HIBYTE(v152.__r_.__value_.__r.__words[2]) == 13)
                              {
                                unint64_t v88 = &v152;
                                goto LABEL_204;
                              }
                              goto LABEL_243;
                            }
                            if (v152.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
                              || *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
                            {
                              goto LABEL_243;
                            }
LABEL_241:
                            uint64_t v98 = LODWORD(v143[1]);
                            int v99 = *(_DWORD *)(v85 + 12) * *(_DWORD *)(v85 + 8) * *(_DWORD *)(v85 + 16);
                            int v100 = 1;
LABEL_242:
                            Espresso::util_bake_batchnorm_generic(v98, v99, v100, *(void *)(v85 + 24), *(const float **)(v85 + 24), *(float **)(v130 + 16), *((const float **)lpsrc + 2), v87);
                            goto LABEL_243;
                          }
                          if (v152.__r_.__value_.__l.__size_ == 11)
                          {
                            if (*(void *)v152.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
                              || *(void *)(v152.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
                            {
                              goto LABEL_243;
                            }
                            goto LABEL_241;
                          }
                          if (v152.__r_.__value_.__l.__size_ == 13)
                          {
                            unint64_t v88 = (std::string *)v152.__r_.__value_.__r.__words[0];
LABEL_204:
                            std::string::size_type v95 = v88->__r_.__value_.__r.__words[0];
                            uint64_t v96 = *(std::string::size_type *)((char *)v88->__r_.__value_.__r.__words + 5);
                            if (v95 == 0x6C6F766E6F636564 && v96 == 0x6E6F6974756C6F76)
                            {
                              uint64_t v98 = LODWORD(v143[1]);
                              int v99 = *(_DWORD *)(v85 + 12) * *(_DWORD *)(v85 + 8);
                              int v100 = *(_DWORD *)(v85 + 20);
                              goto LABEL_242;
                            }
                          }
LABEL_243:
                          uint64_t v126 = lpsrc;
                          uint64_t v127 = v141;
                          if (v141) {
                            atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          (*(void (**)(void *, void **))(*(void *)v56 + 392))(v56, &v126);
                          if (v127) {
                            nitro::nitro_function::nitro_function(v127);
                          }
                          uint64_t v104 = v129;
                          uint64_t v124 = v85;
                          uint64_t v125 = v129;
                          if (v129) {
                            atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
LABEL_249:
                          (*(void (**)(void *, uint64_t *))(*(void *)v56 + 400))(v56, &v124);
                          if (v125) {
                            nitro::nitro_function::nitro_function(v125);
                          }
                          if (v104) {
                            nitro::nitro_function::nitro_function(v104);
                          }
                          if (v131) {
                            nitro::nitro_function::nitro_function(v131);
                          }
                          if (v133) {
                            nitro::nitro_function::nitro_function(v133);
                          }
                          if (v141) {
                            nitro::nitro_function::nitro_function(v141);
                          }
                          if (v57) {
                            nitro::nitro_function::nitro_function(v57);
                          }
                          goto LABEL_150;
                        }
                      }
                      else
                      {
                        __int32 v56 = 0;
                      }
                      int v57 = 0;
                      goto LABEL_184;
                    }
                  }
                  else if (v152.__r_.__value_.__l.__size_ == 13)
                  {
                    int v41 = (std::string *)v152.__r_.__value_.__r.__words[0];
                    goto LABEL_125;
                  }
                }
                else if (HIBYTE(v152.__r_.__value_.__r.__words[2]) == 11)
                {
                  if (v152.__r_.__value_.__r.__words[0] == 0x74756C6F766E6F63
                    && *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 3) == 0x6E6F6974756C6F76)
                  {
                    goto LABEL_131;
                  }
                }
                else if (HIBYTE(v152.__r_.__value_.__r.__words[2]) == 13)
                {
                  int v41 = &v152;
LABEL_125:
                  std::string::size_type v58 = v41->__r_.__value_.__r.__words[0];
                  uint64_t v59 = *(std::string::size_type *)((char *)v41->__r_.__value_.__r.__words + 5);
                  BOOL v60 = v58 == 0x6C6F766E6F636564 && v59 == 0x6E6F6974756C6F76;
                  if (v60 && *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v37 + 384))(v37) + 116) == 1) {
                    goto LABEL_131;
                  }
                }
              }
              uint64_t v73 = *(std::__shared_weak_count **)(v20 + 72);
              uint64_t v134 = *(void *)(v20 + 64);
              v135 = v73;
              if (v73) {
                atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              goto LABEL_148;
            }
            unint64_t v107 = 0;
          }
          else
          {
            unint64_t v107 = 0;
            unint64_t v37 = 0;
          }
          BOOL v39 = 0;
          goto LABEL_99;
        }
        if (v112.__r_.__value_.__l.__size_ != 13) {
          goto LABEL_42;
        }
        long long v11 = (std::string *)v112.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(v112.__r_.__value_.__r.__words[2]) == 11)
        {
          if (v112.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
            || *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
          {
            goto LABEL_42;
          }
          goto LABEL_62;
        }
        if (HIBYTE(v112.__r_.__value_.__r.__words[2]) != 13) {
          goto LABEL_42;
        }
        long long v11 = &v112;
      }
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
      uint64_t v13 = *(std::string::size_type *)((char *)v11->__r_.__value_.__r.__words + 5);
      if (v12 != 0x6C6F766E6F636564 || v13 != 0x6E6F6974756C6F76) {
        goto LABEL_42;
      }
      int v15 = *(_DWORD *)(v10 + 8);
      if (v15 && v15 != 80000 && v15 != 100) {
        goto LABEL_47;
      }
      uint64_t v17 = *a1;
      uint64_t v16 = (std::__shared_weak_count *)a1[1];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v18 = (uint64_t *)(*((void *)v17 + 4) + 16 * (int)v7);
      uint64_t v20 = *v18;
      unint64_t v19 = (std::__shared_weak_count *)v18[1];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v108 = v19;
      if (*(char *)(v20 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v20 + 40), *(void *)(v20 + 48));
      }
      else {
        std::string v152 = *(std::string *)(v20 + 40);
      }
      int v30 = *(const void **)(v20 + 64);
      if (!v30) {
        break;
      }
      int v32 = v31;
      if (!v31)
      {
        unint64_t v107 = 0;
        goto LABEL_86;
      }
      int v33 = *(std::__shared_weak_count **)(v20 + 72);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v107 = v33;
      BOOL v34 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v31 + 384))(v31) + 112) != 0;
LABEL_87:
      if (*(char *)(v20 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v20 + 200), *(void *)(v20 + 208));
      }
      else
      {
        *(_OWORD *)std::string __str = *(_OWORD *)(v20 + 200);
        *(void *)&__str[16] = *(void *)(v20 + 216);
      }
      std::string::operator=(&__p, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (v34)
      {
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v152.__r_.__value_.__l.__size_ == 11)
          {
            if (*(void *)v152.__r_.__value_.__l.__data_ == 0x74756C6F766E6F63
              && *(void *)(v152.__r_.__value_.__r.__words[0] + 3) == 0x6E6F6974756C6F76)
            {
LABEL_118:
              uint64_t v45 = (*(uint64_t (**)(void *))(*(void *)v32 + 384))(v32);
              long long v47 = *(_OWORD *)(v45 + 128);
              long long v46 = *(_OWORD *)(v45 + 144);
              uint64_t v48 = *(void *)(v45 + 160);
              long long v148 = *(_OWORD *)(v45 + 112);
              long long v49 = *(_OWORD *)v45;
              long long v50 = *(_OWORD *)(v45 + 32);
              *(_OWORD *)&__str[16] = *(_OWORD *)(v45 + 16);
              *(_OWORD *)uint64_t v143 = v50;
              *(_OWORD *)std::string __str = v49;
              long long v51 = *(_OWORD *)(v45 + 48);
              long long v52 = *(_OWORD *)(v45 + 64);
              long long v53 = *(_OWORD *)(v45 + 96);
              long long v146 = *(_OWORD *)(v45 + 80);
              long long v147 = v53;
              long long v144 = v51;
              long long v145 = v52;
              uint64_t v151 = v48;
              long long v149 = v47;
              long long v150 = v46;
              LODWORD(v148) = 0;
              uint64_t v130 = (int)v7;
              int v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v17 + 56, (int)v7, &v130);
              uint64_t v137 = 0;
              uint64_t v138 = 0;
              uint64_t v139 = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v137, v54[3], v54[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54[4] - v54[3]) >> 3));
              uint64_t v128 = (int)v7;
              uint64_t v55 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v17 + 96, (int)v7, &v128);
              uint64_t v134 = 0;
              v135 = 0;
              uint64_t v136 = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v134, v55[3], v55[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55[4] - v55[3]) >> 3));
              Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, &v115, (uint64_t)&v152, v20 + 16, (uint64_t)__str, (uint64_t)v137, v138, &v134);
              if (lpsrc)
              {
                if (v56)
                {
                  int v57 = v141;
                  if (v141)
                  {
                    atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_174:
                    if (v141) {
                      nitro::nitro_function::nitro_function(v141);
                    }
                  }
                  uint64_t v132 = (uint64_t)&v134;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
                  uint64_t v132 = (uint64_t)&v137;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
                  (*(void (**)(void **__return_ptr, void *))(*(void *)v56 + 488))(&lpsrc, v56);
                  (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v32 + 456))(&v132, v32);
                  (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v32 + 448))(&v130, v32);
                  Espresso::blob<float,4>::copy(&v128, v132);
                  uint64_t v79 = 0;
                  uint64_t v80 = v128;
                  uint64_t v81 = *(int *)(v132 + 8);
                  do
                  {
                    v81 *= *(int *)(v132 + 12 + v79);
                    v79 += 4;
                  }
                  while (v79 != 12);
                  memcpy(*(void **)(v128 + 24), *(const void **)(v132 + 24), 4 * v81);
                  if ((*((unsigned char *)&v152.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    if (v152.__r_.__value_.__l.__size_ == 11)
                    {
                      if (*(void *)v152.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
                        || *(void *)(v152.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
                      {
                        goto LABEL_229;
                      }
                      goto LABEL_227;
                    }
                    if (v152.__r_.__value_.__l.__size_ != 13) {
                      goto LABEL_229;
                    }
                    uint64_t v83 = (std::string *)v152.__r_.__value_.__r.__words[0];
LABEL_195:
                    std::string::size_type v89 = v83->__r_.__value_.__r.__words[0];
                    uint64_t v90 = *(std::string::size_type *)((char *)v83->__r_.__value_.__r.__words + 5);
                    if (v89 != 0x6C6F766E6F636564 || v90 != 0x6E6F6974756C6F76)
                    {
LABEL_229:
                      uint64_t v126 = lpsrc;
                      uint64_t v127 = v141;
                      if (v141) {
                        atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      (*(void (**)(void *, void **))(*(void *)v56 + 392))(v56, &v126);
                      if (v127) {
                        nitro::nitro_function::nitro_function(v127);
                      }
                      uint64_t v104 = v129;
                      uint64_t v124 = v80;
                      uint64_t v125 = v129;
                      if (v129) {
                        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      goto LABEL_249;
                    }
                    uint64_t v92 = LODWORD(v143[1]);
                    int v93 = *(_DWORD *)(v80 + 12) * *(_DWORD *)(v80 + 8);
                    int v94 = *(_DWORD *)(v80 + 20);
                  }
                  else
                  {
                    if (HIBYTE(v152.__r_.__value_.__r.__words[2]) != 11)
                    {
                      if (HIBYTE(v152.__r_.__value_.__r.__words[2]) == 13)
                      {
                        uint64_t v83 = &v152;
                        goto LABEL_195;
                      }
                      goto LABEL_229;
                    }
                    if (v152.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
                      || *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
                    {
                      goto LABEL_229;
                    }
LABEL_227:
                    uint64_t v92 = LODWORD(v143[1]);
                    int v93 = *(_DWORD *)(v80 + 12) * *(_DWORD *)(v80 + 8) * *(_DWORD *)(v80 + 16);
                    int v94 = 1;
                  }
                  Espresso::util_bake_batchnorm_generic(v92, v93, v94, *(void *)(v80 + 24), *(const float **)(v80 + 24), *(float **)(v130 + 16), *((const float **)lpsrc + 2), v82);
                  goto LABEL_229;
                }
              }
              else
              {
                __int32 v56 = 0;
              }
              int v57 = 0;
              goto LABEL_174;
            }
            goto LABEL_139;
          }
          if (v152.__r_.__value_.__l.__size_ == 13)
          {
            unint64_t v40 = (std::string *)v152.__r_.__value_.__r.__words[0];
LABEL_112:
            std::string::size_type v42 = v40->__r_.__value_.__r.__words[0];
            uint64_t v43 = *(std::string::size_type *)((char *)v40->__r_.__value_.__r.__words + 5);
            BOOL v44 = v42 == 0x6C6F766E6F636564 && v43 == 0x6E6F6974756C6F76;
            if (v44 && *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v32 + 384))(v32) + 116) == 1) {
              goto LABEL_118;
            }
          }
        }
        else
        {
          if (HIBYTE(v152.__r_.__value_.__r.__words[2]) == 11)
          {
            if (v152.__r_.__value_.__r.__words[0] == 0x74756C6F766E6F63
              && *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 3) == 0x6E6F6974756C6F76)
            {
              goto LABEL_118;
            }
            goto LABEL_139;
          }
          if (HIBYTE(v152.__r_.__value_.__r.__words[2]) == 13)
          {
            unint64_t v40 = &v152;
            goto LABEL_112;
          }
        }
      }
LABEL_139:
      uint64_t v73 = *(std::__shared_weak_count **)(v20 + 72);
      uint64_t v134 = *(void *)(v20 + 64);
      v135 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_148:
      uint64_t v132 = (int)v7;
      std::vector<std::string>::pointer v75 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v17 + 56, (int)v7, &v132);
      memset(__str, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, v75[3], v75[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75[4] - v75[3]) >> 3));
      uint64_t v130 = (int)v7;
      uint64_t v76 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v17 + 96, (int)v7, &v130);
      uint64_t v137 = 0;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v137, v76[3], v76[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76[4] - v76[3]) >> 3));
      Espresso::sequential_builder::add_kernel((uint64_t)&v115, &v134, v20 + 40, v20 + 16, (std::string **)__str, &v137);
      lpvImage_Buffer src = &v137;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
      lpvImage_Buffer src = __str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
LABEL_150:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      }
      if (v107) {
        nitro::nitro_function::nitro_function(v107);
      }
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v152.__r_.__value_.__l.__data_);
        if (!v108) {
          goto LABEL_45;
        }
LABEL_159:
        nitro::nitro_function::nitro_function(v108);
        goto LABEL_45;
      }
      if (v108) {
        goto LABEL_159;
      }
LABEL_45:
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
LABEL_47:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v112.__r_.__value_.__l.__data_);
        if (!v9) {
          goto LABEL_53;
        }
LABEL_52:
        nitro::nitro_function::nitro_function(v9);
        goto LABEL_53;
      }
      if (v9) {
        goto LABEL_52;
      }
LABEL_53:
      ++v7;
      int v5 = *a1;
      uint64_t v6 = *((void *)*a1 + 4);
      if (v7 >= (*((void *)*a1 + 5) - v6) >> 4)
      {
        a2 = v106;
        goto LABEL_262;
      }
    }
    unint64_t v107 = 0;
    int v32 = 0;
LABEL_86:
    BOOL v34 = 0;
    goto LABEL_87;
  }
LABEL_262:
  Espresso::net::copy_parameters_from(v119, v5);
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)&v115, (const Espresso::net *)((char *)*a1 + 184), a2);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v123);
  if (v122) {
    nitro::nitro_function::nitro_function(v122);
  }
  if (v121) {
    nitro::nitro_function::nitro_function(v121);
  }
  if (v120) {
    nitro::nitro_function::nitro_function(v120);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v117, v117[1]);
  if (v116) {
    nitro::nitro_function::nitro_function(v116);
  }
}

void sub_1926C1CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a57) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a57);
  }
  if (a61) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a61);
  }
  if (a63) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a63);
  }
  if (a65) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a65);
  }
  if (a72) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a72);
  }
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (*(char *)(v75 - 105) < 0) {
    operator delete(*(void **)(v75 - 128));
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a31);
  _Unwind_Resume(a1);
}

void Espresso::fuse_scale(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v4 = *(std::__shared_weak_count **)(v2 + 24);
  v7[0] = *(void *)(v2 + 16);
  v7[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *(_DWORD *)(**(void **)(v2 + 32) + 12);
  v6[0] = v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimize_network(v7, v5, (uint64_t)v6, &__block_literal_global_106_470, a2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1926C1FF4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::add_context_transfer_algos_hints(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)a1 + 32);
  long long v68 = *(uint64_t **)(*(void *)a1 + 40);
  if (v1 != v68)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v5 = *v1;
      unsigned int v4 = (std::__shared_weak_count *)v1[1];
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = *(void *)a1 + 96;
      *(void *)&long long v69 = v3;
      unint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v3, &v69);
      uint64_t v9 = (long long *)v7[3];
      int v8 = (long long *)v7[4];
      if (v9 == v8)
      {
        int v10 = 0;
      }
      else
      {
        int v10 = 0;
        do
        {
          if (*((char *)v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v9, *((void *)v9 + 1));
          }
          else
          {
            long long v11 = *v9;
            v75.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
            *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v11;
          }
          std::string::size_type v12 = (uint64_t **)(*(void *)a1 + 184);
          uint64_t v76 = &v75;
          uint64_t v13 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, &v75, (long long **)&v76);
          long long v14 = *(_OWORD *)(v13 + 72);
          long long v69 = *(_OWORD *)(v13 + 56);
          long long v70 = v14;
          int v15 = (const void *)*((void *)v13 + 12);
          uint64_t v71 = *((void *)v13 + 11);
          std::string __p = 0;
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, *((void *)v13 + 13), (uint64_t)(*((void *)v13 + 13) - (void)v15) >> 2);
          int v16 = HIDWORD(v69);
          if (SHIDWORD(v69) <= 1) {
            int v16 = 1;
          }
          int v17 = v70;
          if ((int)v70 <= 1) {
            int v17 = 1;
          }
          int v18 = v17 * v16 * DWORD2(v69);
          if (v18 > v10) {
            int v10 = v18;
          }
          if (__p)
          {
            uint64_t v73 = __p;
            operator delete(__p);
          }
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v75.__r_.__value_.__l.__data_);
          }
          uint64_t v9 = (long long *)((char *)v9 + 24);
        }
        while (v9 != v8);
      }
      uint64_t v19 = *(void *)a1 + 56;
      *(void *)&long long v69 = v3;
      uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19, v3, &v69);
      uint64_t v21 = (long long *)v20[3];
      uint64_t v22 = (long long *)v20[4];
      while (v21 != v22)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v21, *((void *)v21 + 1));
        }
        else
        {
          long long v23 = *v21;
          v75.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
          *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v23;
        }
        uint64_t v24 = (uint64_t **)(*(void *)a1 + 184);
        uint64_t v76 = &v75;
        uint64_t v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, &v75, (long long **)&v76);
        long long v26 = *(_OWORD *)(v25 + 72);
        long long v69 = *(_OWORD *)(v25 + 56);
        long long v70 = v26;
        int v27 = (const void *)*((void *)v25 + 12);
        uint64_t v71 = *((void *)v25 + 11);
        std::string __p = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v27, *((void *)v25 + 13), (uint64_t)(*((void *)v25 + 13) - (void)v27) >> 2);
        int v28 = HIDWORD(v69);
        if (SHIDWORD(v69) <= 1) {
          int v28 = 1;
        }
        int v29 = v70;
        if ((int)v70 <= 1) {
          int v29 = 1;
        }
        int v30 = v29 * v28 * DWORD2(v69);
        if (v30 > v10) {
          int v10 = v30;
        }
        if (__p)
        {
          uint64_t v73 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        uint64_t v21 = (long long *)((char *)v21 + 24);
      }
      *(_DWORD *)(*(void *)(v5 + 64) + 136) = v10 > 0x2000;
      if (v4) {
        nitro::nitro_function::nitro_function(v4);
      }
      ++v3;
      v1 += 2;
    }
    while (v1 != v68);
    int v31 = *(uint64_t **)(*(void *)a1 + 32);
    int v32 = *(uint64_t **)(*(void *)a1 + 40);
    if (v31 != v32)
    {
      while (1)
      {
        uint64_t v34 = *v31;
        int v33 = (std::__shared_weak_count *)v31[1];
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v35 = *(const void **)(v34 + 64);
        if (!v35) {
          goto LABEL_99;
        }
        if (v36)
        {
          unint64_t v37 = v36;
          unint64_t v38 = *(std::__shared_weak_count **)(v34 + 72);
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v39 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v36 + 384))(v36);
          int v40 = v39[8];
          int v41 = v39[11];
          int v42 = v39[25];
          if (v39[9]) {
            v37[34] = 1;
          }
          if (v40) {
            v37[34] = 1;
          }
          if (v41) {
            v37[34] = 1;
          }
          if (v42) {
            v37[34] = 1;
          }
          if (v38) {
            nitro::nitro_function::nitro_function(v38);
          }
        }
        uint64_t v43 = *(const void **)(v34 + 64);
        if (!v43) {
          goto LABEL_99;
        }
        if (v44) {
          break;
        }
LABEL_72:
        long long v52 = *(const void **)(v34 + 64);
        if (v52)
        {
          if (v53)
          {
            int v54 = v53;
            uint64_t v55 = *(std::__shared_weak_count **)(v34 + 72);
            if (v55) {
              atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            __int32 v56 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v53 + 384))(v53);
            int v57 = v56[29];
            if (v57 <= 1) {
              int v58 = 1;
            }
            else {
              int v58 = v56[29];
            }
            if (v57 >= 2)
            {
              int v59 = v56[11] / v58;
              int v60 = (v59 | (v56[10] / v58)) & 3;
              if (v59 == 1 || v60 != 0) {
                v54[34] = 1;
              }
            }
            if (v55) {
              nitro::nitro_function::nitro_function(v55);
            }
          }
          long long v62 = *(const void **)(v34 + 64);
          if (v62)
          {
            if (v63)
            {
              uint64_t v64 = v63;
              long long v65 = *(std::__shared_weak_count **)(v34 + 72);
              if (v65) {
                atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v66 = *(_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v63 + 320))(v63);
              if (v66 == 28 || v66 == 21) {
                v64[34] = 1;
              }
              if (v65) {
                nitro::nitro_function::nitro_function(v65);
              }
            }
          }
        }
LABEL_99:
        if (v33) {
          nitro::nitro_function::nitro_function(v33);
        }
        v31 += 2;
        if (v31 == v32) {
          return;
        }
      }
      uint64_t v45 = v44;
      long long v46 = *(std::__shared_weak_count **)(v34 + 72);
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v47 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v44 + 384))(v44);
      int v48 = v47[29];
      if (v48 <= 1) {
        int v49 = 1;
      }
      else {
        int v49 = v47[29];
      }
      if (v48 >= 2)
      {
        int v50 = v47[10];
        int v51 = v47[11];
        if (v51 / v49 == 1)
        {
          if (!(v50 % v51)) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }
        if ((((v51 / v49) | (v50 / v49)) & 3) != 0) {
LABEL_69:
        }
          v45[34] = 1;
      }
LABEL_70:
      if (v46) {
        nitro::nitro_function::nitro_function(v46);
      }
      goto LABEL_72;
    }
  }
}

void sub_1926C2628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convert_weights_to_fp16(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 32);
  uint64_t v1 = *(uint64_t **)(*(void *)a1 + 40);
  if (v2 != v1)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      unint64_t v3 = (std::__shared_weak_count *)v2[1];
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = *(const void **)(v4 + 64);
      if (!v5) {
        goto LABEL_16;
      }
      if (v6) {
        break;
      }
      if (v8)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v4 + 72);
        v30[0] = (uint64_t)v8;
        v30[1] = (uint64_t)v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quantize_to_fp16<Espresso::generic_inner_product_kernel,2>(v30);
        goto LABEL_14;
      }
      if (v9)
      {
        int v10 = v9;
        unint64_t v7 = *(std::__shared_weak_count **)(v4 + 72);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v9 + 416))(&v38, v9);
        uint64_t v11 = v38;
        if (v38)
        {
          std::string::size_type v12 = (char *)operator new(0x68uLL);
          uint64_t v13 = (std::__shared_weak_count *)v12;
          uint64_t v14 = 0;
          *((void *)v12 + 1) = 0;
          *((void *)v12 + 2) = 0;
          *(void *)std::string::size_type v12 = &unk_1EE389DB8;
          *((void *)v12 + 3) = &unk_1EE36C150;
          *(_OWORD *)(v12 + 72) = 0u;
          *(_OWORD *)(v12 + 88) = 0u;
          uint64_t v15 = 1;
          do
          {
            uint64_t v16 = *(int *)(v11 + 8 + v14);
            *(_DWORD *)&v12[v14 + 32] = v16;
            v15 *= v16;
            v14 += 4;
          }
          while (v14 != 20);
          size_t v17 = 2 * v15;
          int v18 = Espresso::kern_alloc_uninitialized((Espresso *)(2 * v15));
          bzero(v18, v17);
          uint64_t v19 = 0;
          v13[2].__shared_owners_ = (uint64_t)v18;
          LOBYTE(v13[2].__shared_weak_owners_) = 1;
          uint64_t v20 = *(int **)(v38 + 32);
          uint64_t v21 = *(int *)(v38 + 8);
          do
          {
            v21 *= *(int *)(v38 + 12 + v19);
            v19 += 4;
          }
          while (v19 != 16);
          for (; v21; --v21)
          {
            int v22 = *v20++;
            _S0 = v22;
            __asm { FCVT            H0, S0 }
            *v18++ = _S0;
          }
          uint64_t v36 = 0;
          unint64_t v37 = 0;
          (*(void (**)(void *, uint64_t *))(*(void *)v10 + 400))(v10, &v36);
          if (v37) {
            nitro::nitro_function::nitro_function(v37);
          }
          uint64_t v34 = 0;
          unsigned int v35 = 0;
          std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
          uint64_t shared_owners_low = SLODWORD(v13[1].__shared_owners_);
          for (uint64_t i = 36; i != 52; i += 4)
            shared_owners_low *= *(int *)((char *)&v13->__vftable + i);
          (*(void (**)(void *, uint64_t *, void **, uint64_t, uint64_t, void))(*(void *)v10 + 160))(v10, &v34, __p, v13[2].__shared_owners_, 2 * shared_owners_low, 0);
          if (v33 < 0) {
            operator delete(__p[0]);
          }
          if (v35) {
            nitro::nitro_function::nitro_function(v35);
          }
          nitro::nitro_function::nitro_function(v13);
        }
        if (v39) {
          nitro::nitro_function::nitro_function(v39);
        }
        goto LABEL_14;
      }
LABEL_16:
      if (v3) {
        nitro::nitro_function::nitro_function(v3);
      }
      v2 += 2;
      if (v2 == v1) {
        return;
      }
    }
    unint64_t v7 = *(std::__shared_weak_count **)(v4 + 72);
    v31[0] = (uint64_t)v6;
    v31[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v6[65]) {
      quantize_to_fp16<Espresso::generic_convolution_kernel,4>(v31);
    }
LABEL_14:
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    goto LABEL_16;
  }
}

void sub_1926C2A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  nitro::nitro_function::nitro_function(v27);
  if (a25)
  {
    nitro::nitro_function::nitro_function(a25);
    if (!v26)
    {
LABEL_7:
      if (!v25) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!v26)
  {
    goto LABEL_7;
  }
  nitro::nitro_function::nitro_function(v26);
  if (!v25) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  nitro::nitro_function::nitro_function(v25);
  goto LABEL_9;
}

void Espresso::fuse_transpose_chain(Espresso::net **a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  id v3 = &__block_literal_global_34;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v49, v2);
  char v33 = a1;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  v48[0] = 0;
  v48[1] = v2;
  LODWORD(v55[0]) = 0;
  uint64_t v4 = *((void *)v2 + 4);
  if (*((void *)v2 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v48[0]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      int v8 = (std::__shared_weak_count *)*((void *)&v43 + 1);
      long long v43 = v6;
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      uint64_t v9 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v51, v5, v55);
      if ((char *)v9[6] - (char *)v9[5] == 4)
      {
        HIDWORD(v48[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v51, v48[0], v48)[5];
        int v10 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v52, SHIDWORD(v48[0]), (_DWORD *)v48 + 1);
        if ((char *)v10[6] - (char *)v10[5] == 4)
        {
          uint64_t v11 = *((void *)v2 + 4);
          long long v12 = *(_OWORD *)(v11 + 16 * SHIDWORD(v48[0]));
          uint64_t v13 = *(void *)(v11 + 16 * SHIDWORD(v48[0]) + 8);
          if (v13) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v14 = (std::__shared_weak_count *)*((void *)&v44 + 1);
          long long v44 = v12;
          if (v14) {
            nitro::nitro_function::nitro_function(v14);
          }
          uint64_t v15 = v43;
          uint64_t v16 = *(void **)(v43 + 64);
          if (v16
          {
            uint64_t v17 = *(void *)(v15 + 72);
            if (v17) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v17 = 0;
          }
          int v18 = (std::__shared_weak_count *)*((void *)&v41 + 1);
          *(void *)&long long v41 = v16;
          *((void *)&v41 + 1) = v17;
          if (v18) {
            nitro::nitro_function::nitro_function(v18);
          }
          uint64_t v19 = v44;
          uint64_t v20 = *(void **)(v44 + 64);
          if (v20
          {
            uint64_t v21 = *(void *)(v19 + 72);
            if (v21) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          int v22 = (std::__shared_weak_count *)*((void *)&v42 + 1);
          *(void *)&long long v42 = v20;
          *((void *)&v42 + 1) = v21;
          if (v22)
          {
            nitro::nitro_function::nitro_function(v22);
            uint64_t v20 = (void *)v42;
          }
          if ((void)v41 && v20) {
            ___ZN8Espresso20fuse_transpose_chainENSt3__110shared_ptrINS_3netEEE_block_invoke((uint64_t)&__block_literal_global_34, &v41);
          }
        }
      }
      LODWORD(v55[0]) = ++v5;
      uint64_t v4 = *((void *)v2 + 4);
    }
    while (v5 < (*((void *)v2 + 5) - v4) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  long long v23 = __p[0];
  uint64_t v24 = __p[1];
  if (__p[0] != __p[1])
  {
    int v25 = 0;
    do
    {
      Espresso::net::remove_layer(v2, v25 + *v23++);
      --v25;
    }
    while (v23 != v24);
  }
  long long v26 = (int *)*((void *)&v46 + 1);
  int v27 = (int *)v47;
  if (*((void *)&v46 + 1) != (void)v47)
  {
    int v28 = 0;
    do
    {
      int v29 = *v26;
      int v40 = v28 + *v26;
      LODWORD(v55[0]) = v29;
      v55[1] = *((void ***)v26 + 1);
      int v30 = (std::__shared_weak_count *)*((void *)v26 + 2);
      __int32 v56 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(v57, 0, sizeof(v57));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v57, *((void *)v26 + 3), *((void *)v26 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v26 + 4) - *((void *)v26 + 3)) >> 3));
      memset(v58, 0, sizeof(v58));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v58, *((void *)v26 + 6), *((void *)v26 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v26 + 7) - *((void *)v26 + 6)) >> 3));
      unint64_t v37 = 0;
      uint64_t v38 = 0;
      BOOL v39 = 0;
      long long v53 = &v37;
      char v54 = 0;
      unint64_t v37 = (char *)operator new(0x48uLL);
      uint64_t v38 = (uint64_t)v37;
      BOOL v39 = v37 + 72;
      uint64_t v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v39, (uint64_t)v55, (uint64_t)&v59, (uint64_t)v37);
      Espresso::net::insert_layers((uint64_t)v2, &v40, (uint64_t *)&v37);
      long long v53 = &v37;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      long long v53 = (char **)v58;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      long long v53 = (char **)v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      ++v28;
      v26 += 18;
    }
    while (v26 != v27);
  }
  v55[0] = (void **)&v46 + 1;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v55);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*((void *)&v44 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v44 + 1));
  }
  if (*((void *)&v43 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v43 + 1));
  }
  if (*((void *)&v42 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v42 + 1));
  }
  if (*((void *)&v41 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v41 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v52[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v51[1]);
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }

  int v32 = *v33;
  int v31 = (atomic_ullong *)v33[1];
  v36[0] = *v33;
  v36[1] = (Espresso *)v31;
  if (v31)
  {
    atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
    int v32 = *v33;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v34, (long long **)v32 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v35, (long long **)v32 + 26);
  reshape_network(v36, v34);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v35, v35[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v34, (char *)v34[1]);
  if (v31) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v31);
  }
}

void sub_1926C2FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Espresso::network_shape::~network_shape((char **)va);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(a1);
}

void Espresso::transform_dequantize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(8uLL);
  std::string __p = v4;
  *uint64_t v4 = 100;
  uint64_t v15 = v4 + 1;
  uint64_t v16 = v4 + 1;
  unint64_t v5 = *(Espresso::net **)a1;
  long long v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = MEMORY[0x1E4F143A8];
  uint64_t v18 = 3321888768;
  uint64_t v19 = ___Z15dequantize_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke;
  uint64_t v20 = &__block_descriptor_64_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  p_p = &__p;
  int v22 = v5;
  long long v23 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a2;
  Espresso::single_match_replace<Espresso::generic_convolution_kernel>(v5, &v17);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = *(Espresso::net **)a1;
  int v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = MEMORY[0x1E4F143A8];
  uint64_t v18 = 3321888768;
  uint64_t v19 = ___Z15dequantize_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke;
  uint64_t v20 = &__block_descriptor_64_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  p_p = &__p;
  int v22 = v7;
  long long v23 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a2;
  Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(v7, &v17);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  v11[2] = ___ZN8Espresso20transform_dequantizeENSt3__110shared_ptrINS_3netEEERKNS0_13unordered_setINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_4hashISA_EENS0_8equal_toISA_EENS8_ISA_EEEE_block_invoke;
  v11[3] = &__block_descriptor_56_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  uint64_t v9 = *(Espresso::net **)a1;
  int v10 = *(std::__shared_weak_count **)(a1 + 8);
  v11[4] = *(void *)a1;
  long long v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a2;
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(v9, v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_1926C32B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fuse_transpose_inner_product(uint64_t a1)
{
  uint64_t v2 = *(Espresso **)a1;
  id v3 = &__block_literal_global_36;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v51, v2);
  int v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  int v50 = v2;
  int v40 = 0;
  if (*((void *)v2 + 5) != *((void *)v2 + 4))
  {
    unint64_t v4 = 0;
    do
    {
      DWORD2(v48) = v4;
      unint64_t v5 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v53, v4, &v40);
      if ((char *)v5[6] - (char *)v5[5] == 4)
      {
        HIDWORD(v48) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v53, SDWORD2(v48), (_DWORD *)&v48 + 2)[5];
        long long v6 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v53, SHIDWORD(v48), (_DWORD *)&v48 + 3);
        if ((char *)v6[6] - (char *)v6[5] == 4)
        {
          int v49 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v53, SHIDWORD(v48), (_DWORD *)&v48 + 3)[5];
          uint64_t v7 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v54, SHIDWORD(v48), (_DWORD *)&v48 + 3);
          if ((char *)v7[6] - (char *)v7[5] == 4)
          {
            int v8 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v54, v49, &v49);
            if ((char *)v8[6] - (char *)v8[5] == 4)
            {
              long long v9 = *(_OWORD *)(*((void *)v2 + 4) + 16 * v4);
              uint64_t v10 = *(void *)(*((void *)v2 + 4) + 16 * v4 + 8);
              if (v10) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v11 = (std::__shared_weak_count *)*((void *)&v44 + 1);
              long long v44 = v9;
              if (v11) {
                nitro::nitro_function::nitro_function(v11);
              }
              uint64_t v12 = *((void *)v2 + 4);
              long long v13 = *(_OWORD *)(v12 + 16 * SHIDWORD(v48));
              uint64_t v14 = *(void *)(v12 + 16 * SHIDWORD(v48) + 8);
              if (v14) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v15 = (std::__shared_weak_count *)*((void *)&v45 + 1);
              long long v45 = v13;
              if (v15) {
                nitro::nitro_function::nitro_function(v15);
              }
              uint64_t v16 = *((void *)v2 + 4);
              long long v17 = *(_OWORD *)(v16 + 16 * v49);
              uint64_t v18 = *(void *)(v16 + 16 * v49 + 8);
              if (v18) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v19 = (std::__shared_weak_count *)*((void *)&v46 + 1);
              long long v46 = v17;
              if (v19) {
                nitro::nitro_function::nitro_function(v19);
              }
              uint64_t v20 = v44;
              uint64_t v21 = *(void **)(v44 + 64);
              if (v21
              {
                uint64_t v22 = *(void *)(v20 + 72);
                if (v22) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v22 = 0;
              }
              long long v23 = (std::__shared_weak_count *)*((void *)&v41 + 1);
              *(void *)&long long v41 = v21;
              *((void *)&v41 + 1) = v22;
              if (v23)
              {
                nitro::nitro_function::nitro_function(v23);
                uint64_t v21 = (void *)v41;
              }
              if (v21)
              {
                uint64_t v24 = v45;
                int v25 = *(void **)(v45 + 64);
                if (v25
                {
                  uint64_t v26 = *(void *)(v24 + 72);
                  if (v26) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  uint64_t v26 = 0;
                }
                int v27 = (std::__shared_weak_count *)*((void *)&v42 + 1);
                *(void *)&long long v42 = v25;
                *((void *)&v42 + 1) = v26;
                if (v27)
                {
                  nitro::nitro_function::nitro_function(v27);
                  int v25 = (void *)v42;
                }
                if (v25)
                {
                  uint64_t v28 = v46;
                  int v29 = *(void **)(v46 + 64);
                  if (v29
                  {
                    uint64_t v30 = *(void *)(v28 + 72);
                    if (v30) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
                    }
                  }
                  else
                  {
                    uint64_t v30 = 0;
                  }
                  int v31 = (std::__shared_weak_count *)*((void *)&v43 + 1);
                  *(void *)&long long v43 = v29;
                  *((void *)&v43 + 1) = v30;
                  if (v31)
                  {
                    nitro::nitro_function::nitro_function(v31);
                    int v29 = (void *)v43;
                  }
                  if (v29) {
                    ___ZN8Espresso28fuse_transpose_inner_productENSt3__110shared_ptrINS_3netEEE_block_invoke((uint64_t)&__block_literal_global_36, &v41);
                  }
                }
              }
            }
          }
        }
      }
      int v40 = ++v4;
    }
    while (v4 < (uint64_t)(*((void *)v2 + 5) - *((void *)v2 + 4)) >> 4);
    char v33 = (_DWORD *)*((void *)&v47 + 1);
    int v32 = (_DWORD *)v47;
    if ((void)v47 != *((void *)&v47 + 1))
    {
      int v34 = 0;
      do
      {
        Espresso::net::remove_layer(v2, v34 + *v32++);
        --v34;
      }
      while (v32 != v33);
      int v32 = (_DWORD *)v47;
    }
    if (v32)
    {
      *((void *)&v47 + 1) = v32;
      operator delete(v32);
    }
  }
  if (*((void *)&v46 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v46 + 1));
  }
  if (*((void *)&v45 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v45 + 1));
  }
  if (*((void *)&v44 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v44 + 1));
  }
  if (*((void *)&v43 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v43 + 1));
  }
  if (*((void *)&v42 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v42 + 1));
  }
  if (*((void *)&v41 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v41 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v54[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v53[1]);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }

  uint64_t v36 = *(Espresso **)a1;
  unsigned int v35 = *(atomic_ullong **)(a1 + 8);
  v39[0] = *(Espresso **)a1;
  v39[1] = (Espresso *)v35;
  if (v35)
  {
    atomic_fetch_add_explicit(v35 + 1, 1uLL, memory_order_relaxed);
    uint64_t v36 = *(Espresso **)a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v37, (long long **)v36 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v38, (long long **)v36 + 26);
  reshape_network(v39, v37);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v38, v38[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v37, (char *)v37[1]);
  if (v35) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v35);
  }
}

void sub_1926C37D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Espresso::network_shape::~network_shape((char **)va);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  _Unwind_Resume(a1);
}

void Espresso::fuse_eltwise_mulc_max_to_leaky_relu(uint64_t a1)
{
  v137[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(Espresso::net **)a1;
  memset(v118, 0, 32);
  *(_DWORD *)&v118[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(v2, v118, (uint64_t)v130);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v118);
  unint64_t v129 = 0;
  id v3 = *(Espresso::net **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  if (*(void *)(*(void *)a1 + 40) - v4 != 16)
  {
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 16 * v7);
      long long v9 = *(const void **)(v8 + 64);
      if (!v9) {
        break;
      }
      if (!v10) {
        goto LABEL_15;
      }
      uint64_t v11 = *(std::__shared_weak_count **)(v8 + 72);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        id v3 = *(Espresso::net **)a1;
      }
LABEL_16:
      uint64_t v12 = *(void *)(*((void *)v3 + 4) + 16 * v7 + 16);
      long long v13 = *(const void **)(v12 + 64);
      if (v13)
      {
        if (v14)
        {
          uint64_t v16 = v14;
          long long v17 = *(std::__shared_weak_count **)(v12 + 72);
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v10) {
            goto LABEL_147;
          }
          if (Espresso::is_kernel_generating_output(v10, v15)) {
            goto LABEL_147;
          }
          uint64_t v18 = (*(uint64_t (**)(Espresso *))(*(void *)v10 + 320))(v10);
          uint64_t v19 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v16 + 320))(v16);
          if ((*(_DWORD *)v18 | 2) != 3) {
            goto LABEL_147;
          }
          if (*v19 != 23) {
            goto LABEL_147;
          }
          uint64_t v20 = *(void *)a1 + 56;
          *(void *)uint64_t v118 = &v129;
          uint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v20, &v129, (uint64_t)&std::piecewise_construct, (uint64_t **)v118);
          if (v21[4] - v21[3] != 24) {
            goto LABEL_147;
          }
          uint64_t v22 = *(void *)a1 + 96;
          *(void *)uint64_t v118 = &v129;
          long long v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v22, &v129, (uint64_t)&std::piecewise_construct, (uint64_t **)v118);
          if (v23[4] - v23[3] != 24) {
            goto LABEL_147;
          }
          uint64_t v24 = *(void *)a1 + 56;
          *(void *)uint64_t v118 = v129 + 1;
          int v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v129 + 1, v118);
          if (v25[4] - v25[3] != 48) {
            goto LABEL_147;
          }
          uint64_t v26 = *(void *)a1 + 96;
          *(void *)uint64_t v118 = v129 + 1;
          int v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v129 + 1, v118);
          if (v27[4] - v27[3] != 24) {
            goto LABEL_147;
          }
          uint64_t v28 = *(void *)a1 + 56;
          *(void *)uint64_t v118 = &v129;
          int v29 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v28, &v129, (uint64_t)&std::piecewise_construct, (uint64_t **)v118)[3];
          if (*((char *)v29 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)v29, *((void *)v29 + 1));
          }
          else
          {
            long long v30 = *v29;
            v128.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
            *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v30;
          }
          uint64_t v31 = *(void *)a1 + 96;
          *(void *)uint64_t v118 = &v129;
          int v32 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v31, &v129, (uint64_t)&std::piecewise_construct, (uint64_t **)v118)[3];
          if (*((char *)v32 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)v32, *((void *)v32 + 1));
          }
          else
          {
            long long v33 = *v32;
            v127.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
            *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v33;
          }
          uint64_t v34 = *(void *)a1 + 56;
          *(void *)uint64_t v118 = v129 + 1;
          unsigned int v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34, v129 + 1, v118);
          memset(v126, 0, sizeof(v126));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v126, v35[3], v35[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[4] - v35[3]) >> 3));
          uint64_t v36 = *(void *)a1 + 96;
          *(void *)uint64_t v118 = v129 + 1;
          unint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v36, v129 + 1, v118);
          long long v38 = 0uLL;
          BOOL v39 = (long long *)v37[3];
          if (*((char *)v39 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v39, *((void *)v39 + 1));
            long long v38 = 0uLL;
          }
          else
          {
            long long v40 = *v39;
            v125.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
            *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v40;
          }
          long long v41 = (unsigned __int8 *)v126[0];
          uint64_t v42 = *(unsigned __int8 *)(v126[0] + 23);
          size_t v43 = *(void *)(v126[0] + 8);
          if ((v42 & 0x80u) == 0) {
            uint64_t v44 = *(unsigned __int8 *)(v126[0] + 23);
          }
          else {
            uint64_t v44 = *(void *)(v126[0] + 8);
          }
          int v45 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
          if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v128.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v128.__r_.__value_.__l.__size_;
          }
          if (v44 != size) {
            goto LABEL_73;
          }
          if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v47 = &v128;
          }
          else {
            long long v47 = (std::string *)v128.__r_.__value_.__r.__words[0];
          }
          if ((v42 & 0x80) != 0)
          {
            size_t v106 = *(void *)(v126[0] + 8);
            uint64_t v109 = *(unsigned __int8 *)(v126[0] + 23);
            uint64_t v103 = v44;
            int v100 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
            std::string::size_type v98 = size;
            int v50 = memcmp(*(const void **)v126[0], v47, v106);
            std::string::size_type size = v98;
            int v45 = v100;
            uint64_t v44 = v103;
            size_t v43 = v106;
            uint64_t v42 = v109;
            long long v38 = 0uLL;
            if (v50) {
              goto LABEL_73;
            }
          }
          else if (*(unsigned char *)(v126[0] + 23))
          {
            long long v48 = (unsigned __int8 *)v126[0];
            uint64_t v49 = *(unsigned __int8 *)(v126[0] + 23);
            while (*v48 == v47->__r_.__value_.__s.__data_[0])
            {
              ++v48;
              long long v47 = (std::string *)((char *)v47 + 1);
              if (!--v49) {
                goto LABEL_54;
              }
            }
LABEL_73:
            BOOL v64 = 0;
            goto LABEL_74;
          }
LABEL_54:
          uint64_t v51 = v41[47];
          if ((v51 & 0x80u) == 0) {
            uint64_t v52 = v41[47];
          }
          else {
            uint64_t v52 = *((void *)v41 + 4);
          }
          std::string::size_type v53 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v53 = v127.__r_.__value_.__l.__size_;
          }
          if (v52 != v53) {
            goto LABEL_73;
          }
          char v54 = (const void **)(v41 + 24);
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v55 = &v127;
          }
          else {
            uint64_t v55 = (std::string *)v127.__r_.__value_.__r.__words[0];
          }
          if ((v51 & 0x80) != 0)
          {
            size_t v108 = v43;
            uint64_t v111 = v42;
            uint64_t v105 = v44;
            int v102 = v45;
            std::string::size_type v99 = size;
            int v94 = memcmp(*v54, v55, *((void *)v41 + 4));
            std::string::size_type size = v99;
            int v45 = v102;
            uint64_t v44 = v105;
            size_t v43 = v108;
            uint64_t v42 = v111;
            long long v38 = 0uLL;
            BOOL v64 = v94 == 0;
          }
          else if (v41[47])
          {
            uint64_t v56 = v51 - 1;
            do
            {
              int v58 = *(unsigned __int8 *)v54;
              char v54 = (const void **)((char *)v54 + 1);
              int v57 = v58;
              int v60 = v55->__r_.__value_.__s.__data_[0];
              uint64_t v55 = (std::string *)((char *)v55 + 1);
              int v59 = v60;
              BOOL v62 = v56-- != 0;
              BOOL v63 = v57 == v59;
              BOOL v64 = v57 == v59;
            }
            while (v63 && v62);
          }
          else
          {
            BOOL v64 = 1;
          }
LABEL_74:
          uint64_t v65 = v41[47];
          if ((v65 & 0x80u) == 0) {
            uint64_t v66 = v41[47];
          }
          else {
            uint64_t v66 = *((void *)v41 + 4);
          }
          if (v66 == size)
          {
            long long v67 = (const void **)(v41 + 24);
            if (v45 >= 0) {
              long long v68 = &v128;
            }
            else {
              long long v68 = (std::string *)v128.__r_.__value_.__r.__words[0];
            }
            if ((v65 & 0x80) != 0)
            {
              size_t v107 = v43;
              uint64_t v110 = v42;
              uint64_t v104 = v44;
              BOOL v101 = v64;
              int v69 = memcmp(*v67, v68, *((void *)v41 + 4));
              BOOL v64 = v101;
              uint64_t v44 = v104;
              size_t v43 = v107;
              uint64_t v42 = v110;
              long long v38 = 0uLL;
              if (v69) {
                goto LABEL_98;
              }
            }
            else if (v41[47])
            {
              while (*(unsigned __int8 *)v67 == v68->__r_.__value_.__s.__data_[0])
              {
                long long v67 = (const void **)((char *)v67 + 1);
                long long v68 = (std::string *)((char *)v68 + 1);
                if (!--v65) {
                  goto LABEL_87;
                }
              }
              goto LABEL_98;
            }
LABEL_87:
            std::string::size_type v70 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
            if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v70 = v127.__r_.__value_.__l.__size_;
            }
            if (v44 != v70) {
              goto LABEL_98;
            }
            if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v71 = &v127;
            }
            else {
              uint64_t v71 = (std::string *)v127.__r_.__value_.__r.__words[0];
            }
            if ((v42 & 0x80) == 0)
            {
              if (v42)
              {
                while (*v41 == v71->__r_.__value_.__s.__data_[0])
                {
                  ++v41;
                  uint64_t v71 = (std::string *)((char *)v71 + 1);
                  if (!--v42) {
                    goto LABEL_100;
                  }
                }
                goto LABEL_98;
              }
LABEL_100:
              float v73 = *(float *)(v18 + 8);
              if (v73 > 0.0 && v73 <= 1.0)
              {
                v121[2] = 1065353216;
                uint64_t v123 = 0;
                uint64_t v124 = 0;
                uint64_t v122 = 0;
                v121[0] = 2;
                *(float *)&v121[1] = v73;
                *(_DWORD *)uint64_t v118 = 0;
                *(_OWORD *)&v118[8] = v38;
                *(_OWORD *)&v118[24] = v38;
                long long v119 = v38;
                long long v120 = v38;
                std::string v75 = (char *)operator new(0xF8uLL);
                *((void *)v75 + 1) = 0;
                *((void *)v75 + 2) = 0;
                *(void *)std::string v75 = &unk_1EE389DF0;
                *((void *)v75 + 3) = &unk_1EE36C758;
                *(_OWORD *)(v75 + 40) = 0u;
                *(_OWORD *)(v75 + 56) = 0u;
                *(_OWORD *)(v75 + 72) = 0u;
                *(_OWORD *)(v75 + 88) = 0u;
                *(_OWORD *)(v75 + 104) = 0u;
                *(_OWORD *)(v75 + 120) = 0u;
                *(_OWORD *)(v75 + 136) = 0u;
                *(_OWORD *)(v75 + 152) = 0u;
                *(_OWORD *)(v75 + 161) = 0u;
                *((_OWORD *)v75 + 13) = 0u;
                *((_OWORD *)v75 + 14) = 0u;
                *((void *)v75 + 30) = 0;
                *(void *)&v118[8] = v75 + 24;
                *(void *)&v118[16] = v75;
                uint64_t v76 = *(void *)(*(void *)(*(void *)a1 + 32) + 16 * v129);
                if (*(char *)(v76 + 39) >= 0) {
                  size_t v77 = *(unsigned __int8 *)(v76 + 39);
                }
                else {
                  size_t v77 = *(void *)(v76 + 24);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&__str, v77 + 6);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_str = &__str;
                }
                else {
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                if (v77)
                {
                  if (*(char *)(v76 + 39) >= 0) {
                    uint64_t v79 = (const void *)(v76 + 16);
                  }
                  else {
                    uint64_t v79 = *(const void **)(v76 + 16);
                  }
                  uint64_t v80 = p_str;
                  memmove(p_str, v79, v77);
                  p_str = v80;
                }
                strcpy((char *)p_str + v77, "@lrelu");
                uint64_t v81 = *(void *)&v118[8];
                uint64_t v82 = *(void *)&v118[8] + 16;
                if (*(char *)(*(void *)&v118[8] + 39) < 0)
                {
                  operator delete(*(void **)v82);
                  uint64_t v81 = *(void *)&v118[8];
                }
                std::string::size_type v83 = __str.__r_.__value_.__r.__words[2];
                *(_OWORD *)uint64_t v82 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                *(void *)(v82 + 16) = v83;
                MEMORY[0x192FF0F50](v81 + 40, "activation");
                uint64_t v84 = *(uint64_t (****)(void))(*(void *)(*(void *)a1 + 16) + 8);
                int v85 = (**v84)(v84);
                uint64_t v86 = *(void *)&v118[8];
                *(_DWORD *)(*(void *)&v118[8] + 8) = v85;
                *(_DWORD *)(v86 + 12) = *(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 32) + 16 * v129) + 12);
                if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&__str, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
                }
                else {
                  std::string __str = v128;
                }
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v118[24], &__str, &v134, 1uLL);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&__str, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
                }
                else {
                  std::string __str = v125;
                }
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&v119 + 8), &__str, &v134, 1uLL);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                Espresso::abstract_engine_factory::shared(&v131);
                uint64_t v87 = v131;
                unint64_t v88 = *(Espresso::net **)a1;
                std::string::basic_string[abi:ne180100]<0>(&__str, "activation");
                Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v87, (uint64_t)v88 + 16, (uint64_t)&__str, (uint64_t)v121, (int *)(*(void *)&v118[8] + 8));
                long long v89 = v115;
                long long v115 = 0uLL;
                uint64_t v90 = *(std::__shared_weak_count **)(*(void *)&v118[8] + 72);
                *(_OWORD *)(*(void *)&v118[8] + 64) = v89;
                if (v90)
                {
                  nitro::nitro_function::nitro_function(v90);
                  if (*((void *)&v115 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v115 + 1));
                  }
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (v132) {
                  nitro::nitro_function::nitro_function(v132);
                }
                *(_DWORD *)uint64_t v118 = v129;
                uint64_t v91 = *(char **)(*(void *)&v118[8] + 64);
                uint64_t v92 = operator new(0x10uLL);
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v92 + 2);
                __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v92 + 2);
                *uint64_t v92 = v10;
                v92[1] = v16;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
                Espresso::merge_kernel_attributes(v91, (uint64_t *)&__str);
                operator delete(v92);
                Espresso::net::remove_layer(*(Espresso::net **)a1, v129);
                Espresso::net::remove_layer(*(Espresso::net **)a1, v129);
                int v93 = *(Espresso::net **)a1;
                int v117 = v129;
                LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v118;
                *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v118[8];
                if (*(void *)&v118[16]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v118[16] + 8), 1uLL, memory_order_relaxed);
                }
                long long v134 = 0uLL;
                uint64_t v135 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v134, *(uint64_t *)&v118[24], *(uint64_t *)&v118[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v118[32] - *(void *)&v118[24]) >> 3));
                memset(v136, 0, sizeof(v136));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v136, *((uint64_t *)&v119 + 1), v120, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - *((void *)&v119 + 1)) >> 3));
                long long v115 = 0uLL;
                uint64_t v116 = 0;
                uint64_t v131 = (void **)&v115;
                LOBYTE(v132) = 0;
                *(void *)&long long v115 = operator new(0x48uLL);
                *((void *)&v115 + 1) = v115;
                uint64_t v116 = v115 + 72;
                *((void *)&v115 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v116, (uint64_t)&__str, (uint64_t)v137, v115);
                Espresso::net::insert_layers((uint64_t)v93, &v117, (uint64_t *)&v115);
                uint64_t v131 = (void **)&v115;
                std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v131);
                uint64_t v131 = (void **)v136;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v131);
                uint64_t v131 = (void **)&v134;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v131);
                if (__str.__r_.__value_.__r.__words[2]) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2]);
                }
                ++v129;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119 + 8;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118[24];
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                if (*(void *)&v118[16]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v118[16]);
                }
              }
LABEL_141:
              if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v125.__r_.__value_.__l.__data_);
              }
              *(void *)uint64_t v118 = v126;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v118);
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v127.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v128.__r_.__value_.__l.__data_);
              }
LABEL_147:
              if (v17) {
                nitro::nitro_function::nitro_function(v17);
              }
              goto LABEL_149;
            }
            std::string::size_type v95 = *(const void **)v41;
            BOOL v96 = v64;
            int v97 = memcmp(v95, v71, v43);
            BOOL v64 = v96;
            long long v38 = 0uLL;
            BOOL v72 = v97 == 0;
          }
          else
          {
LABEL_98:
            BOOL v72 = 0;
          }
          if (v64 || v72) {
            goto LABEL_100;
          }
          goto LABEL_141;
        }
      }
LABEL_149:
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      unint64_t v7 = v129 + 1;
      unint64_t v129 = v7;
      id v3 = *(Espresso::net **)a1;
      uint64_t v4 = *(void *)(*(void *)a1 + 32);
      if (v7 >= ((*(void *)(*(void *)a1 + 40) - v4) >> 4) - 1) {
        goto LABEL_2;
      }
    }
    uint64_t v10 = 0;
LABEL_15:
    uint64_t v11 = 0;
    goto LABEL_16;
  }
LABEL_2:
  unint64_t v5 = *(atomic_ullong **)(a1 + 8);
  v114[0] = v3;
  v114[1] = (Espresso *)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    id v3 = *(Espresso::net **)a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v112, (long long **)v3 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v113, (long long **)v3 + 26);
  reshape_network(v114, v112);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v113, v113[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v112, (char *)v112[1]);
  if (v5) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v130[2]);
  long long v6 = (void *)v130[0];
  v130[0] = 0;
  if (v6) {
    operator delete(v6);
  }
}

void sub_1926C44BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a35);
  if (a54 < 0) {
    operator delete(__p);
  }
  a35 = (uint64_t)&a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a70 < 0)
  {
    operator delete(a65);
    if (v71)
    {
LABEL_12:
      nitro::nitro_function::nitro_function(v71);
      if (!v70)
      {
LABEL_11:
        std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v72 - 248);
        _Unwind_Resume(a1);
      }
LABEL_10:
      nitro::nitro_function::nitro_function(v70);
      goto LABEL_11;
    }
  }
  else if (v71)
  {
    goto LABEL_12;
  }
  if (!v70) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

void Espresso::transformer_optimization(Espresso::net **a1)
{
  v272[1] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_templates/tf_normalization_transformer/model.espresso.net");
  uint64_t v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v270, "json");
  Espresso::load_network_layers((std::string *)__p, (void *)v2 + 2, 1u, v270, (uint64_t *)&v253);
  if ((v270[23] & 0x80000000) != 0) {
    operator delete(*(void **)v270);
  }
  if (SBYTE7(v238) < 0) {
    operator delete(__p[0]);
  }
  id v3 = *a1;
  std::vector<std::string> v211 = a1;
  if (*((void *)*a1 + 5) != *((void *)*a1 + 4))
  {
    unint64_t v212 = 0;
    long long v4 = 0uLL;
    while (1)
    {
      *(_OWORD *)std::string __p = v4;
      long long v238 = v4;
      *(_OWORD *)((char *)v239 + 8) = v4;
      *(_OWORD *)((char *)&v239[1] + 8) = v4;
      LODWORD(v239[0]) = 1065353216;
      DWORD2(v239[2]) = 1065353216;
      long long v240 = v4;
      *(_OWORD *)v241 = v4;
      *(_OWORD *)&v242[8] = v4;
      long long v243 = v4;
      *(_DWORD *)v242 = 1065353216;
      int v244 = 1065353216;
      v245[0] = v4;
      v245[1] = v4;
      v247[0] = v4;
      v247[1] = v4;
      int v246 = 1065353216;
      int v248 = 1065353216;
      v249[0] = v4;
      v249[1] = v4;
      int v250 = 1065353216;
      *(_OWORD *)v252 = v4;
      long long v251 = v4;
      v252[2] = 0;
      v252[3] = 0;
      unint64_t v5 = v253;
      long long v6 = (Espresso::net *)v254;
      if (v254)
      {
        atomic_fetch_add_explicit(&v254->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v7 = (std::__shared_weak_count *)v252[1];
        v252[0] = v5;
        v252[1] = v6;
        if (v7)
        {
          nitro::nitro_function::nitro_function(v7);
          long long v4 = 0uLL;
        }
      }
      else
      {
        v252[0] = v253;
        v252[1] = 0;
      }
      long long v9 = *a1;
      uint64_t v8 = a1[1];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&v251 + 1);
      *(void *)&long long v251 = v9;
      *((void *)&v251 + 1) = v8;
      if (v10)
      {
        nitro::nitro_function::nitro_function(v10);
        long long v4 = 0uLL;
      }
      if (!v253) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid template net");
      }
      long long v264 = v4;
      long long v265 = v4;
      LODWORD(v266) = 1065353216;
      Espresso::net::get_consumers_of_blobs((void *)v251, &v264, (uint64_t)v270);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign((uint64_t)&v242[8], (uint64_t *)v270);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)&v270[16]);
      uint64_t v11 = *(void **)v270;
      *(void *)v270 = 0;
      if (v11) {
        operator delete(v11);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v264);
      long long v264 = 0u;
      long long v265 = 0u;
      LODWORD(v266) = 1065353216;
      Espresso::net::get_consumers_of_blobs((void *)v252[0], &v264, (uint64_t)v270);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign((uint64_t)v245, (uint64_t *)v270);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)&v270[16]);
      uint64_t v12 = *(void **)v270;
      *(void *)v270 = 0;
      if (v12) {
        operator delete(v12);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v264);
      Espresso::net::get_producers_of_blobs((Espresso::net *)v251, (uint64_t)v270);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)v247, (uint64_t *)v270);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&v270[16]);
      long long v13 = *(void **)v270;
      *(void *)v270 = 0;
      if (v13) {
        operator delete(v13);
      }
      Espresso::net::get_producers_of_blobs(v252[0], (uint64_t)v270);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)v249, (uint64_t *)v270);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&v270[16]);
      uint64_t v14 = *(void **)v270;
      *(void *)v270 = 0;
      if (v14) {
        operator delete(v14);
      }
      if (v212 < (uint64_t)(*(void *)(v251 + 40) - *(void *)(v251 + 32)) >> 4) {
        break;
      }
LABEL_115:
      uint64_t v86 = *a1;
      if (v212 >= (uint64_t)(*((void *)*a1 + 5) - *((void *)*a1 + 4)) >> 4)
      {
        pattern_matcher::~pattern_matcher((pattern_matcher *)__p);
        id v3 = *a1;
        goto LABEL_214;
      }
      uint64_t v87 = v241[0];
      if (v241[0])
      {
        do
        {
          uint64_t v88 = *(void *)(*((void *)*a1 + 4) + 16 * v87[3]);
          long long v89 = (const char *)(v88 + 40);
          if (*(char *)(v88 + 63) < 0) {
            long long v89 = *(const char **)v89;
          }
          printf("src=%d target=%d type=%s\n", *((_DWORD *)v87 + 4), v87[3], v89);
          uint64_t v87 = (void *)*v87;
        }
        while (v87);
        uint64_t v86 = *a1;
      }
      *(void *)v270 = 5;
      uint64_t v90 = *(void *)(*((void *)v86 + 4)
                      + 16
                      * std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v240, 5uLL, v270)[3]);
      uint64_t v91 = *(const void **)(v90 + 64);
      if (v91)
      {
        if (v92)
        {
          int v93 = *(std::__shared_weak_count **)(v90 + 72);
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          int v93 = 0;
        }
      }
      else
      {
        int v93 = 0;
        uint64_t v92 = 0;
      }
      int v94 = *a1;
      *(void *)v270 = 8;
      uint64_t v95 = *(void *)(*((void *)v94 + 4)
                      + 16
                      * std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v240, 8uLL, v270)[3]);
      BOOL v96 = *(const void **)(v95 + 64);
      if (v96)
      {
        if (v97 && (uint64_t v98 = *(void *)(v95 + 72)) != 0)
        {
          v209 = *(std::__shared_weak_count **)(v95 + 72);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v98 + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          v209 = 0;
        }
      }
      else
      {
        v209 = 0;
        int v97 = 0;
      }
      v210 = v93;
      std::string::size_type v99 = *a1;
      *(void *)v270 = 12;
      uint64_t v100 = *(void *)(*((void *)v99 + 4)
                       + 16
                       * std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v240, 0xCuLL, v270)[3]);
      BOOL v101 = *(const void **)(v100 + 64);
      if (v101)
      {
        if (v102)
        {
          uint64_t v103 = v102;
          uint64_t v104 = *(std::__shared_weak_count **)(v100 + 72);
          if (v104) {
            atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v92 && v97)
          {
            uint64_t v208 = v104;
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v235, v92 + 43);
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v233, v97 + 43);
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v231, v103 + 43);
            unint64_t v230 = 0;
            *(void *)v270 = 0;
            unint64_t v230 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v240, 0, v270)[3];
            uint64_t v105 = (uint64_t)*a1 + 56;
            *(void *)v270 = &v230;
            size_t v106 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v105, &v230, (uint64_t)&std::piecewise_construct, (uint64_t **)v270);
            v263 = 0;
            v261 = 0;
            *(void *)v262 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v261, v106[3], v106[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106[4] - v106[3]) >> 3));
            size_t v107 = *a1;
            *(void *)v270 = ((uint64_t)(*((void *)v253 + 5) - *((void *)v253 + 4)) >> 4) - 1;
            *(void *)&long long v264 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v240, *(unint64_t *)v270, v270)+ 3;
            size_t v108 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v107 + 96, (unint64_t *)v264, (uint64_t)&std::piecewise_construct, (uint64_t **)&v264);
            uint64_t v260 = 0;
            v258 = 0;
            *(void *)v259 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v258, v108[3], v108[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108[4] - v108[3]) >> 3));
            uint64_t v109 = *(void *)(*((void *)*a1 + 4) + 16 * v230);
            if (*(char *)(v109 + 39) < 0) {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v109 + 16), *(void *)(v109 + 24));
            }
            else {
              std::string __str = *(std::string *)(v109 + 16);
            }
            memset(v270, 0, 24);
            uint64_t v110 = v241[0];
            if (v241[0])
            {
              uint64_t v111 = 0;
              unint64_t v112 = 0;
              uint64_t v113 = 0;
              do
              {
                unint64_t v114 = v110[3];
                printf("%d %d\n", v110[2], v114);
                if ((unint64_t)v113 >= v112)
                {
                  uint64_t v115 = v113 - v111;
                  unint64_t v116 = v115 + 1;
                  if ((unint64_t)(v115 + 1) >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v112 - (void)v111) >> 2 > v116) {
                    unint64_t v116 = (uint64_t)(v112 - (void)v111) >> 2;
                  }
                  if (v112 - (unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v117 = v116;
                  }
                  if (v117) {
                    unint64_t v117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v117);
                  }
                  else {
                    uint64_t v118 = 0;
                  }
                  long long v119 = (unint64_t *)(v117 + 8 * v115);
                  *long long v119 = v114;
                  long long v120 = v119 + 1;
                  while (v113 != v111)
                  {
                    unint64_t v121 = *--v113;
                    *--long long v119 = v121;
                  }
                  unint64_t v112 = v117 + 8 * v118;
                  *(void *)v270 = v119;
                  *(void *)&v270[8] = v120;
                  *(void *)&v270[16] = v112;
                  if (v111) {
                    operator delete(v111);
                  }
                  uint64_t v111 = v119;
                  uint64_t v113 = v120;
                }
                else
                {
                  *v113++ = v114;
                }
                *(void *)&v270[8] = v113;
                uint64_t v110 = (void *)*v110;
              }
              while (v110);
              uint64_t v122 = *(unint64_t **)v270;
            }
            else
            {
              uint64_t v113 = 0;
              uint64_t v122 = 0;
            }
            unint64_t v123 = 126 - 2 * __clz(v113 - v122);
            if (v113 == v122) {
              uint64_t v124 = 0;
            }
            else {
              uint64_t v124 = v123;
            }
            std::__introsort<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *,false>(v122, v113, v124, 1);
            long long v125 = *(_OWORD *)v270;
            uint64_t v126 = *(int **)v270;
            if (*(void *)v270 != *(void *)&v270[8])
            {
              do
              {
                Espresso::net::remove_layer(*a1, *v126);
                v126 += 2;
              }
              while (v126 != *((int **)&v125 + 1));
            }
            if ((void)v125) {
              operator delete((void *)v125);
            }
            v228[0] = (uint64_t *)0x358637BD00000000;
            v228[1] = 0;
            int v229 = 0;
            *(_DWORD *)v270 = 0;
            memset(&v270[8], 0, 48);
            long long v271 = 0u;
            std::string v127 = (char *)operator new(0xF8uLL);
            *((void *)v127 + 1) = 0;
            *((void *)v127 + 2) = 0;
            *(void *)std::string v127 = &unk_1EE389DF0;
            *((void *)v127 + 3) = &unk_1EE36C758;
            *(_OWORD *)(v127 + 56) = 0u;
            *(_OWORD *)(v127 + 72) = 0u;
            *(_OWORD *)(v127 + 88) = 0u;
            *(_OWORD *)(v127 + 104) = 0u;
            *(_OWORD *)(v127 + 120) = 0u;
            *(_OWORD *)(v127 + 136) = 0u;
            *(_OWORD *)(v127 + 152) = 0u;
            *(_OWORD *)(v127 + 40) = 0u;
            *(_OWORD *)(v127 + 161) = 0u;
            *((_OWORD *)v127 + 13) = 0u;
            *((_OWORD *)v127 + 14) = 0u;
            *((void *)v127 + 30) = 0;
            *(void *)&v270[8] = v127 + 24;
            *(void *)&v270[16] = v127;
            std::string::operator=((std::string *)(v127 + 40), &__str);
            MEMORY[0x192FF0F50](*(void *)&v270[8] + 40, "instancenorm_1d");
            std::string v128 = *(uint64_t (****)(void))(*((void *)*a1 + 2) + 8);
            int v129 = (**v128)(v128);
            uint64_t v130 = *(void *)&v270[8];
            *(_DWORD *)(*(void *)&v270[8] + 8) = v129;
            *(_DWORD *)(v130 + 12) = *(_DWORD *)(*(void *)(*((void *)*a1 + 4) + 16 * v230) + 12);
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v270[24], v261, *(std::string **)v262, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v262 - (void)v261) >> 3));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v270[48], v258, *(std::string **)v259, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v259 - (void)v258) >> 3));
            Espresso::abstract_engine_factory::shared(&v255);
            uint64_t v131 = v255;
            uint64_t v132 = *a1;
            std::string::basic_string[abi:ne180100]<0>(&v264, "instancenorm_1d");
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v131, (uint64_t)v132 + 16, (uint64_t)&v264, (uint64_t)v228, (int *)(*(void *)&v270[8] + 8));
            long long v133 = v225;
            long long v225 = 0uLL;
            long long v134 = *(std::__shared_weak_count **)(*(void *)&v270[8] + 72);
            *(_OWORD *)(*(void *)&v270[8] + 64) = v133;
            if (v134)
            {
              nitro::nitro_function::nitro_function(v134);
              if (*((void *)&v225 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v225 + 1));
              }
            }
            if (SBYTE7(v265) < 0) {
              operator delete((void *)v264);
            }
            if (v256) {
              nitro::nitro_function::nitro_function(v256);
            }
            uint64_t v135 = *(void *)(*(void *)&v270[8] + 64);
            long long v225 = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(&v264, "wGamma");
            uint64_t v136 = 0;
            uint64_t v137 = *(int *)(v233 + 8);
            do
            {
              v137 *= *(int *)(v233 + 12 + v136);
              v136 += 4;
            }
            while (v136 != 12);
            (*(void (**)(uint64_t, long long *, long long *, void, uint64_t, void))(*(void *)v135 + 168))(v135, &v225, &v264, *(void *)(v233 + 24), 4 * v137, 0);
            if (SBYTE7(v265) < 0) {
              operator delete((void *)v264);
            }
            if (*((void *)&v225 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v225 + 1));
            }
            uint64_t v138 = *(void *)(*(void *)&v270[8] + 64);
            long long v225 = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(&v264, "wBeta");
            uint64_t v139 = 0;
            uint64_t v140 = *(int *)(v231 + 8);
            do
            {
              v140 *= *(int *)(v231 + 12 + v139);
              v139 += 4;
            }
            while (v139 != 12);
            (*(void (**)(uint64_t, long long *, long long *, void, uint64_t, void))(*(void *)v138 + 168))(v138, &v225, &v264, *(void *)(v231 + 24), 4 * v140, 0);
            if (SBYTE7(v265) < 0) {
              operator delete((void *)v264);
            }
            if (*((void *)&v225 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v225 + 1));
            }
            *(_DWORD *)v270 = v230;
            uint64_t v141 = *a1;
            int v227 = v230;
            LODWORD(v264) = v230;
            *((void *)&v264 + 1) = *(void *)&v270[8];
            *(void *)&long long v265 = *(void *)&v270[16];
            if (*(void *)&v270[16]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v270[16] + 8), 1uLL, memory_order_relaxed);
            }
            *((void *)&v265 + 1) = 0;
            uint64_t v266 = 0;
            v267 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v265 + 1, *(uint64_t *)&v270[24], *(uint64_t *)&v270[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v270[32] - *(void *)&v270[24]) >> 3));
            memset(v268, 0, sizeof(v268));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v268, *(uint64_t *)&v270[48], v271, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271 - *(void *)&v270[48]) >> 3));
            long long v225 = 0uLL;
            uint64_t v226 = 0;
            v255 = (void **)&v225;
            LOBYTE(v256) = 0;
            *(void *)&long long v225 = operator new(0x48uLL);
            *((void *)&v225 + 1) = v225;
            uint64_t v226 = v225 + 72;
            *((void *)&v225 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v226, (uint64_t)&v264, (uint64_t)&v269, v225);
            Espresso::net::insert_layers((uint64_t)v141, &v227, (uint64_t *)&v225);
            v255 = (void **)&v225;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v255);
            v255 = (void **)v268;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v255);
            v255 = (void **)&v265 + 1;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v255);
            if ((void)v265) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v265);
            }
            *(void *)&long long v264 = &v270[48];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v264);
            *(void *)&long long v264 = &v270[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v264);
            if (*(void *)&v270[16]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v270[16]);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            *(void *)v270 = &v258;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v270);
            *(void *)v270 = &v261;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v270);
            if (v232) {
              nitro::nitro_function::nitro_function(v232);
            }
            if (v234) {
              nitro::nitro_function::nitro_function(v234);
            }
            if (v236) {
              nitro::nitro_function::nitro_function(v236);
            }
            uint64_t v104 = v208;
          }
          if (v104) {
            nitro::nitro_function::nitro_function(v104);
          }
        }
      }
      if (v209) {
        nitro::nitro_function::nitro_function(v209);
      }
      if (v210) {
        nitro::nitro_function::nitro_function(v210);
      }
      pattern_matcher::~pattern_matcher((pattern_matcher *)__p);
      id v3 = *a1;
      ++v212;
      long long v4 = 0uLL;
      if (v212 >= (uint64_t)(*((void *)*a1 + 5) - *((void *)*a1 + 4)) >> 4) {
        goto LABEL_214;
      }
    }
    long long v15 = 0uLL;
LABEL_26:
    *(_OWORD *)&v270[16] = v15;
    *(_OWORD *)&v270[32] = v15;
    *(_OWORD *)v270 = v15;
    uint64_t v17 = *((void *)v252[0] + 4);
    uint64_t v16 = *((void *)v252[0] + 5);
    std::deque<pattern_matcher::match_at(unsigned long)::state_t,std::allocator<pattern_matcher::match_at(unsigned long)::state_t>>::__add_back_capacity((uint64_t)v270);
    uint64_t v18 = *(void *)&v270[40];
    uint64_t v19 = *(void *)&v270[32];
    uint64_t v20 = *(void ***)&v270[16];
    uint64_t v21 = *(void ***)&v270[8];
    uint64_t v22 = (unint64_t *)(*(void *)(*(void *)&v270[8]
                                         + (((*(void *)&v270[40] + *(void *)&v270[32]) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v270[40] + v270[32]));
    *uint64_t v22 = v212;
    v22[1] = ((v16 - v17) >> 4) - 1;
    uint64_t v23 = v18 + 1;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear((void *)v239 + 1);
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear(&v240);
    while (1)
    {
      BOOL v24 = v23 == 0;
      if (!v23)
      {
LABEL_106:
        unint64_t v83 = (char *)v20 - (char *)v21;
        if ((unint64_t)((char *)v20 - (char *)v21) >= 0x11)
        {
          do
          {
            uint64_t v84 = *v21++;
            operator delete(v84);
            *(void *)&v270[8] = v21;
            v83 -= 8;
          }
          while (v83 > 0x10);
        }
        while (v21 != v20)
        {
          int v85 = *v21++;
          operator delete(v85);
        }
        if (*(void *)v270) {
          operator delete(*(void **)v270);
        }
        a1 = v211;
        if (v24) {
          goto LABEL_115;
        }
        ++v212;
        long long v15 = 0uLL;
        if (v212 >= (uint64_t)(*(void *)(v251 + 40) - *(void *)(v251 + 32)) >> 4) {
          goto LABEL_115;
        }
        goto LABEL_26;
      }
      uint64_t v25 = 32 * ((char *)v20 - (char *)v21) - 1;
      if (v20 == v21) {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v23 - 1;
      long long v225 = (*(_OWORD **)((char *)v21 + (((unint64_t)(v19 + v23 - 1) >> 5) & 0x7FFFFFFFFFFFFF8)))[(v19 + v23 - 1)];
      *(void *)&v270[40] = v23 - 1;
      if ((unint64_t)(v25 - (v23 + v19) - 511) <= 0xFFFFFFFFFFFFFDFFLL)
      {
        int v27 = *--v20;
        operator delete(v27);
        *(void *)&v270[16] = v20;
      }
      unint64_t v235 = *((void *)&v225 + 1);
      v255 = (void **)v225;
      v261 = (std::string *)&v255;
      uint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v251 + 96, (unint64_t *)&v255, (uint64_t)&std::piecewise_construct, (uint64_t **)&v261);
      *(void *)&long long v265 = 0;
      long long v264 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v264, v28[3], v28[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[4] - v28[3]) >> 3));
      v258 = (std::string *)&v235;
      int v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v252[0] + 96, &v235, (uint64_t)&std::piecewise_construct, (uint64_t **)&v258);
      v263 = 0;
      v261 = 0;
      *(void *)v262 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v261, v29[3], v29[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[4] - v29[3]) >> 3));
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
      long long v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v251 + 56, (unint64_t *)&v255, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
      uint64_t v260 = 0;
      v258 = 0;
      *(void *)v259 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v258, v30[3], v30[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[4] - v30[3]) >> 3));
      v228[0] = (uint64_t *)&v235;
      uint64_t v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v252[0] + 56, &v235, (uint64_t)&std::piecewise_construct, v228);
      memset(&__str, 0, sizeof(__str));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v31[3], v31[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31[4] - v31[3]) >> 3));
      if (*((void *)&v264 + 1) - (void)v264 != *(void *)v262 - (void)v261) {
        goto LABEL_72;
      }
      if (*(void *)v259 - (void)v258 != __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) {
        goto LABEL_72;
      }
      int v32 = *(const void **)(*(void *)(*(void *)(v251 + 32) + 16 * (void)v255) + 64);
      long long v33 = *(const void **)(*(void *)(*((void *)v252[0] + 4) + 16 * v235) + 64);
      if ((pattern_matcher::match_blob_names(__p, (uint64_t *)&v264, &v261) & 1) == 0
        || !pattern_matcher::match_blob_names(__p, (uint64_t *)&v258, &__str))
      {
        goto LABEL_72;
      }
      uint64_t v34 = *(void *)(*(void *)(v251 + 32) + 16 * (void)v255);
      uint64_t v35 = *(void *)(*((void *)v252[0] + 4) + 16 * v235);
      uint64_t v36 = *(unsigned __int8 *)(v34 + 63);
      size_t v37 = *(void *)(v34 + 48);
      if ((v36 & 0x80u) == 0) {
        uint64_t v38 = *(unsigned __int8 *)(v34 + 63);
      }
      else {
        uint64_t v38 = *(void *)(v34 + 48);
      }
      uint64_t v39 = *(unsigned __int8 *)(v35 + 63);
      int v40 = (char)v39;
      if ((v39 & 0x80u) != 0) {
        uint64_t v39 = *(void *)(v35 + 48);
      }
      if (v38 != v39) {
        goto LABEL_72;
      }
      long long v41 = (const void **)(v34 + 40);
      uint64_t v44 = *(void *)(v35 + 40);
      uint64_t v42 = v35 + 40;
      uint64_t v43 = v44;
      int v45 = (unsigned __int8 *)(v40 >= 0 ? v42 : v43);
      if ((v36 & 0x80) == 0) {
        break;
      }
      char v46 = 0;
      if (!memcmp(*v41, v45, v37) && v32) {
        goto LABEL_53;
      }
LABEL_73:
      v228[0] = (uint64_t *)&__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v228);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v258;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      v258 = (std::string *)&v261;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
      v261 = (std::string *)&v264;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v261);
      if ((v46 & 1) == 0) {
        goto LABEL_105;
      }
      v261 = (std::string *)((char *)&v225 + 8);
      uint64_t v65 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v252[0] + 56, (unint64_t *)&v225 + 1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v261);
      *(void *)&long long v265 = 0;
      long long v264 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v264, v65[3], v65[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65[4] - v65[3]) >> 3));
      v258 = (std::string *)&v225;
      uint64_t v66 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v251 + 56, (unint64_t *)&v225, (uint64_t)&std::piecewise_construct, (uint64_t **)&v258);
      v263 = 0;
      v261 = 0;
      *(void *)v262 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v261, v66[3], v66[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66[4] - v66[3]) >> 3));
      pattern_matcher::producers_of_layer((uint64_t **)&v258, (uint64_t)&v251, v247, v225);
      pattern_matcher::producers_of_layer((uint64_t **)&__str, (uint64_t)v252, v249, *((unint64_t *)&v225 + 1));
      long long v67 = v258;
      uint64_t v68 = *(void *)v259 - (void)v258;
      std::string::size_type v69 = __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0];
      if (*(void *)v259 - (void)v258 == __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0])
      {
        uint64_t v70 = *((void *)&v225 + 1);
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v239 + 8, v225, &v225)[3] = v70;
        uint64_t v71 = v225;
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v240, *((unint64_t *)&v225 + 1), (void *)&v225 + 1)[3] = v71;
        uint64_t v72 = *(std::string **)v259;
        long long v67 = v258;
        if (*(std::string **)v259 != v258)
        {
          unint64_t v73 = 0;
          uint64_t v23 = v26;
          do
          {
            unint64_t v74 = v67->__r_.__value_.__r.__words[v73];
            if (v74 < (uint64_t)(*(void *)(v251 + 40) - *(void *)(v251 + 32)) >> 4)
            {
              unint64_t v75 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8 * v73);
              if (v75 < (uint64_t)(*((void *)v252[0] + 5) - *((void *)v252[0] + 4)) >> 4)
              {
                if (v20 == v21) {
                  uint64_t v76 = 0;
                }
                else {
                  uint64_t v76 = 32 * ((char *)v20 - (char *)v21) - 1;
                }
                unint64_t v77 = v23 + v19;
                if (v76 == v23 + v19)
                {
                  std::deque<pattern_matcher::match_at(unsigned long)::state_t,std::allocator<pattern_matcher::match_at(unsigned long)::state_t>>::__add_back_capacity((uint64_t)v270);
                  uint64_t v21 = *(void ***)&v270[8];
                  uint64_t v20 = *(void ***)&v270[16];
                  uint64_t v23 = *(void *)&v270[40];
                  uint64_t v19 = *(void *)&v270[32];
                  unint64_t v77 = *(void *)&v270[40] + *(void *)&v270[32];
                  uint64_t v72 = *(std::string **)v259;
                  long long v67 = v258;
                }
                uint64_t v78 = (unint64_t *)(*(char **)((char *)v21 + ((v77 >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * v77);
                *uint64_t v78 = v74;
                v78[1] = v75;
                *(void *)&v270[40] = ++v23;
              }
            }
            ++v73;
          }
          while (v73 < ((char *)v72 - (char *)v67) >> 3);
          goto LABEL_89;
        }
        long long v67 = *(std::string **)v259;
      }
      uint64_t v23 = v26;
LABEL_89:
      if (__str.__r_.__value_.__r.__words[0])
      {
        __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
        operator delete(__str.__r_.__value_.__l.__data_);
        long long v67 = v258;
      }
      if (v67)
      {
        *(void *)v259 = v67;
        operator delete(v67);
      }
      v258 = (std::string *)&v261;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
      v261 = (std::string *)&v264;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v261);
      if (v68 != v69)
      {
LABEL_105:
        BOOL v24 = 0;
        goto LABEL_106;
      }
    }
    if (v36)
    {
      while (*(unsigned __int8 *)v41 == *v45)
      {
        long long v41 = (const void **)((char *)v41 + 1);
        ++v45;
        if (!--v36) {
          goto LABEL_49;
        }
      }
LABEL_72:
      char v46 = 0;
      goto LABEL_73;
    }
LABEL_49:
    if (!v32) {
      goto LABEL_72;
    }
LABEL_53:
    if (v47)
    {
      long long v48 = v47;
      if (v33) {
      else
      }
        uint64_t v49 = 0;
      uint64_t v53 = (*(uint64_t (**)(void *))(*(void *)v48 + 320))(v48);
      char v54 = (const void *)(*(uint64_t (**)(void *))(*(void *)v49 + 320))(v49);
      uint64_t v55 = (const void *)v53;
      size_t v56 = 52;
    }
    else
    {
      if (v50)
      {
        uint64_t v51 = v50;
        if (v33) {
        else
        }
          uint64_t v52 = 0;
        uint64_t v60 = (*(uint64_t (**)(void *))(*(void *)v51 + 384))(v51);
        char v54 = (const void *)(*(uint64_t (**)(void *))(*(void *)v52 + 384))(v52);
        uint64_t v55 = (const void *)v60;
        size_t v56 = 36;
      }
      else
      {
        if (!v57)
        {
          if (!v61) {
            goto LABEL_72;
          }
          BOOL v62 = v61;
          BOOL v63 = v33
          uint64_t v79 = (void *)(*(uint64_t (**)(void *))(*(void *)v62 + 384))(v62);
          uint64_t v80 = (void *)(*(uint64_t (**)(void *))(*(void *)v63 + 384))(v63);
          BOOL v81 = *v79 == *v80 && v79[1] == v80[1];
          if (!v81 || v79[2] != v80[2]) {
            goto LABEL_72;
          }
          goto LABEL_104;
        }
        int v58 = v57;
        if (v33) {
        else
        }
          int v59 = 0;
        uint64_t v64 = (*(uint64_t (**)(void *))(*(void *)v58 + 320))(v58);
        char v54 = (const void *)(*(uint64_t (**)(void *))(*(void *)v59 + 320))(v59);
        uint64_t v55 = (const void *)v64;
        size_t v56 = 44;
      }
    }
    if (memcmp(v55, v54, v56)) {
      goto LABEL_72;
    }
LABEL_104:
    char v46 = 1;
    goto LABEL_73;
  }
LABEL_214:
  id v142 = (atomic_ullong *)a1[1];
  v224[0] = v3;
  v224[1] = (Espresso *)v142;
  if (v142)
  {
    atomic_fetch_add_explicit(v142 + 1, 1uLL, memory_order_relaxed);
    id v3 = *a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v222, (long long **)v3 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v223, (long long **)v3 + 26);
  reshape_network(v224, v222);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v223, v223[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v222, (char *)v222[1]);
  if (v142) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v142);
  }
  v217[0] = MEMORY[0x1E4F143A8];
  v217[1] = 3321888768;
  v218 = ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v219 = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  long long v144 = *a1;
  uint64_t v143 = (std::__shared_weak_count *)a1[1];
  v220 = *a1;
  v221 = v143;
  if (v143) {
    atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v145 = v217;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v270, v144);
  *(_OWORD *)v241 = 0u;
  memset(v242, 0, 20);
  long long v240 = 0u;
  memset(v239, 0, sizeof(v239));
  *(_OWORD *)std::string __p = 0u;
  long long v238 = 0u;
  *(void *)&long long v243 = v144;
  LODWORD(v264) = 0;
  if (*((void *)v144 + 5) != *((void *)v144 + 4))
  {
    v213 = v145;
    unint64_t v146 = 0;
    do
    {
      *(_DWORD *)&v242[8] = v146;
      long long v147 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v270[16], v146, &v264);
      if ((char *)v147[6] - (char *)v147[5] == 4)
      {
        *(_DWORD *)&v242[12] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v270[16], *(int *)&v242[8], &v242[8])[5];
        long long v148 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v270[16], *(int *)&v242[12], &v242[12]);
        if ((char *)v148[6] - (char *)v148[5] == 4)
        {
          *(_DWORD *)&v242[16] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v270[16], *(int *)&v242[12], &v242[12])[5];
          long long v149 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v270[40], *(int *)&v242[12], &v242[12]);
          if ((char *)v149[6] - (char *)v149[5] == 4)
          {
            long long v150 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v270[40], *(int *)&v242[16], &v242[16]);
            if ((char *)v150[6] - (char *)v150[5] == 4)
            {
              long long v151 = *(_OWORD *)(*((void *)v144 + 4) + 16 * v146);
              uint64_t v152 = *(void *)(*((void *)v144 + 4) + 16 * v146 + 8);
              if (v152) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v152 + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v153 = (std::__shared_weak_count *)*((void *)&v239[1] + 1);
              v239[1] = v151;
              if (v153) {
                nitro::nitro_function::nitro_function(v153);
              }
              uint64_t v154 = *((void *)v144 + 4);
              long long v155 = *(_OWORD *)(v154 + 16 * *(int *)&v242[12]);
              uint64_t v156 = *(void *)(v154 + 16 * *(int *)&v242[12] + 8);
              if (v156) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v156 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v157 = (std::__shared_weak_count *)*((void *)&v239[2] + 1);
              v239[2] = v155;
              if (v157) {
                nitro::nitro_function::nitro_function(v157);
              }
              uint64_t v158 = *((void *)v144 + 4);
              long long v159 = *(_OWORD *)(v158 + 16 * *(int *)&v242[16]);
              uint64_t v160 = *(void *)(v158 + 16 * *(int *)&v242[16] + 8);
              if (v160) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v160 + 8), 1uLL, memory_order_relaxed);
              }
              long long v161 = (std::__shared_weak_count *)*((void *)&v240 + 1);
              long long v240 = v159;
              if (v161) {
                nitro::nitro_function::nitro_function(v161);
              }
              uint64_t v162 = *(void *)&v239[1];
              int v163 = *(void **)(*(void *)&v239[1] + 64);
              if (v163
              {
                uint64_t v164 = *(atomic_ullong **)(v162 + 72);
                if (v164) {
                  atomic_fetch_add_explicit(v164 + 1, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v164 = 0;
              }
              uint64_t v165 = (std::__shared_weak_count *)__p[1];
              __p[0] = v163;
              __p[1] = v164;
              if (v165)
              {
                nitro::nitro_function::nitro_function(v165);
                int v163 = __p[0];
              }
              if (v163)
              {
                uint64_t v166 = *(void *)&v239[2];
                uint64_t v167 = *(void **)(*(void *)&v239[2] + 64);
                if (v167
                {
                  uint64_t v168 = *(void *)(v166 + 72);
                  if (v168) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v168 + 8), 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  uint64_t v168 = 0;
                }
                uint64_t v169 = (std::__shared_weak_count *)*((void *)&v238 + 1);
                *(void *)&long long v238 = v167;
                *((void *)&v238 + 1) = v168;
                if (v169)
                {
                  nitro::nitro_function::nitro_function(v169);
                  uint64_t v167 = (void *)v238;
                }
                if (v167)
                {
                  uint64_t v170 = v240;
                  int v171 = *(void **)(v240 + 64);
                  if (v171
                  {
                    uint64_t v172 = *(void *)(v170 + 72);
                    if (v172) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v172 + 8), 1uLL, memory_order_relaxed);
                    }
                  }
                  else
                  {
                    uint64_t v172 = 0;
                  }
                  uint64_t v173 = (std::__shared_weak_count *)*((void *)&v239[0] + 1);
                  *(void *)&v239[0] = v171;
                  *((void *)&v239[0] + 1) = v172;
                  if (v173)
                  {
                    nitro::nitro_function::nitro_function(v173);
                    int v171 = *(void **)&v239[0];
                  }
                  if (v171) {
                    v218((uint64_t)v213, (uint64_t)__p);
                  }
                }
              }
            }
          }
        }
      }
      LODWORD(v264) = ++v146;
    }
    while (v146 < (uint64_t)(*((void *)v144 + 5) - *((void *)v144 + 4)) >> 4);
    int v174 = v241[0];
    unint64_t v175 = v241[1];
    if (v241[0] == v241[1])
    {
      a1 = v211;
    }
    else
    {
      int v176 = 0;
      a1 = v211;
      do
      {
        Espresso::net::remove_layer(v144, v176 + *v174++);
        --v176;
      }
      while (v174 != v175);
      int v174 = v241[0];
    }
    long long v145 = v213;
    if (v174)
    {
      v241[1] = v174;
      operator delete(v174);
    }
  }
  if (*((void *)&v240 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v240 + 1));
  }
  if (*((void *)&v239[2] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v239[2] + 1));
  }
  if (*((void *)&v239[1] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v239[1] + 1));
  }
  if (*((void *)&v239[0] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v239[0] + 1));
  }
  if (*((void *)&v238 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v238 + 1));
  }
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&v270[48]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&v270[24]);
  if (*(void *)&v270[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v270[8]);
  }

  int v177 = *a1;
  id v178 = &__block_literal_global_52;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v264, v177);
  long long v240 = 0u;
  *(_OWORD *)v241 = 0u;
  long long v238 = 0u;
  memset(v239, 0, sizeof(v239));
  *(_OWORD *)std::string __p = 0u;
  *(void *)v242 = 0;
  *(void *)&v242[8] = v177;
  *(_DWORD *)v270 = 0;
  uint64_t v179 = *((void *)v177 + 4);
  if (*((void *)v177 + 5) != v179)
  {
    unint64_t v180 = 0;
    do
    {
      *(_DWORD *)v242 = v180;
      long long v181 = *(_OWORD *)(v179 + 16 * v180);
      uint64_t v182 = *(void *)(v179 + 16 * v180 + 8);
      if (v182) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v182 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v183 = (std::__shared_weak_count *)*((void *)&v239[0] + 1);
      v239[0] = v181;
      if (v183) {
        nitro::nitro_function::nitro_function(v183);
      }
      uint64_t v184 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v265, v180, v270);
      if ((char *)v184[6] - (char *)v184[5] == 4)
      {
        *(_DWORD *)&v242[4] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v265, *(int *)v242, v242)[5];
        long long v185 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v267, *(int *)&v242[4], &v242[4]);
        if ((char *)v185[6] - (char *)v185[5] == 4)
        {
          uint64_t v186 = *((void *)v177 + 4);
          long long v187 = *(_OWORD *)(v186 + 16 * *(int *)&v242[4]);
          uint64_t v188 = *(void *)(v186 + 16 * *(int *)&v242[4] + 8);
          if (v188) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v188 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v189 = (std::__shared_weak_count *)*((void *)&v239[1] + 1);
          v239[1] = v187;
          if (v189) {
            nitro::nitro_function::nitro_function(v189);
          }
          uint64_t v190 = *(void *)&v239[0];
          uint64_t v191 = *(void **)(*(void *)&v239[0] + 64);
          if (v191
          {
            uint64_t v192 = *(atomic_ullong **)(v190 + 72);
            if (v192) {
              atomic_fetch_add_explicit(v192 + 1, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v192 = 0;
          }
          std::string::size_type v193 = (std::__shared_weak_count *)__p[1];
          __p[0] = v191;
          __p[1] = v192;
          if (v193) {
            nitro::nitro_function::nitro_function(v193);
          }
          uint64_t v194 = *(void *)&v239[1];
          int64x2_t v195 = *(void **)(*(void *)&v239[1] + 64);
          if (v195
          {
            uint64_t v196 = *(void *)(v194 + 72);
            if (v196) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v196 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v196 = 0;
          }
          std::string v197 = (std::__shared_weak_count *)*((void *)&v238 + 1);
          *(void *)&long long v238 = v195;
          *((void *)&v238 + 1) = v196;
          if (v197)
          {
            nitro::nitro_function::nitro_function(v197);
            int64x2_t v195 = (void *)v238;
          }
          if (__p[0] && v195) {
            ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke_50((uint64_t)&__block_literal_global_52, (uint64_t)__p);
          }
        }
      }
      *(_DWORD *)v270 = ++v180;
      uint64_t v179 = *((void *)v177 + 4);
    }
    while (v180 < (*((void *)v177 + 5) - v179) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  std::vector<std::string> v199 = (_DWORD *)*((void *)&v239[2] + 1);
  v198 = *(_DWORD **)&v239[2];
  if (*(void *)&v239[2] != *((void *)&v239[2] + 1))
  {
    int v200 = 0;
    do
    {
      Espresso::net::remove_layer(v177, v200 + *v198++);
      --v200;
    }
    while (v198 != v199);
  }
  v201 = (void *)*((void *)&v240 + 1);
  v202 = v241[0];
  if (*((void **)&v240 + 1) != v241[0])
  {
    int v203 = 0;
    do
    {
      int v204 = *(_DWORD *)v201;
      LODWORD(__str.__r_.__value_.__l.__data_) = v203 + *(_DWORD *)v201;
      *(_DWORD *)v270 = v204;
      *(void *)&v270[8] = v201[1];
      uint64_t v205 = v201[2];
      *(void *)&v270[16] = v205;
      if (v205) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v205 + 8), 1uLL, memory_order_relaxed);
      }
      memset(&v270[24], 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v270[24], v201[3], v201[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v201[4] - v201[3]) >> 3));
      *(void *)&v270[48] = 0;
      long long v271 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v270[48], v201[6], v201[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v201[7] - v201[6]) >> 3));
      *(void *)v262 = 0;
      v261 = 0;
      v263 = 0;
      v258 = (std::string *)&v261;
      LOBYTE(v259[0]) = 0;
      v261 = (std::string *)operator new(0x48uLL);
      *(void *)v262 = v261;
      v263 = v261 + 3;
      *(void *)v262 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v263, (uint64_t)v270, (uint64_t)v272, (uint64_t)v261);
      Espresso::net::insert_layers((uint64_t)v177, (int *)&__str, (uint64_t *)&v261);
      v258 = (std::string *)&v261;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
      v258 = (std::string *)&v270[48];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
      v258 = (std::string *)&v270[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v258);
      if (*(void *)&v270[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v270[16]);
      }
      ++v203;
      v201 += 9;
    }
    while (v201 != v202);
  }
  *(void *)v270 = (char *)&v240 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v270);
  if (*(void *)&v239[2])
  {
    *((void *)&v239[2] + 1) = *(void *)&v239[2];
    operator delete(*(void **)&v239[2]);
  }
  if (*((void *)&v239[1] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v239[1] + 1));
  }
  if (*((void *)&v239[0] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v239[0] + 1));
  }
  if (*((void *)&v238 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v238 + 1));
  }
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v268[0]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v265 + 1));
  if (*((void *)&v264 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v264 + 1));
  }

  long long v207 = *v211;
  v206 = (atomic_ullong *)v211[1];
  v216[0] = *v211;
  v216[1] = (Espresso *)v206;
  if (v206)
  {
    atomic_fetch_add_explicit(v206 + 1, 1uLL, memory_order_relaxed);
    long long v207 = *v211;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v214, (long long **)v207 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v215, (long long **)v207 + 26);
  reshape_network(v216, v214);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v215, v215[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v214, (char *)v214[1]);
  if (v206) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v206);
  }
  if (v221) {
    nitro::nitro_function::nitro_function(v221);
  }
  if (v254) {
    nitro::nitro_function::nitro_function(v254);
  }
}

void sub_1926C678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v71 - 176) = &STACK[0x380];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 176));
  *(void *)(v71 - 176) = &STACK[0x398];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 176));
  if (a66) {
    nitro::nitro_function::nitro_function(a66);
  }
  if (a68) {
    nitro::nitro_function::nitro_function(a68);
  }
  if (a70) {
    nitro::nitro_function::nitro_function(a70);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  pattern_matcher::~pattern_matcher((pattern_matcher *)&__p);
  if (STACK[0x348]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x348]);
  }
  _Unwind_Resume(a1);
}

void Espresso::fuse_log_softmax_multinomial_to_gumbel_max(uint64_t a1)
{
  v89[1] = *MEMORY[0x1E4F143B8];
  unint64_t v82 = 0;
  uint64_t v2 = *(Espresso::net **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  if (*(void *)(*(void *)a1 + 40) - v3 != 16)
  {
    unint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(v3 + 16 * v4);
      long long v6 = *(const void **)(v5 + 64);
      if (!v6) {
        break;
      }
      if (!v7) {
        goto LABEL_8;
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v5 + 72);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v2 = *(Espresso::net **)a1;
      }
LABEL_9:
      uint64_t v9 = *(void *)(*((void *)v2 + 4) + 16 * v4 + 16);
      uint64_t v10 = *(const void **)(v9 + 64);
      if (v10)
      {
        if (v11)
        {
          long long v13 = v11;
          uint64_t v14 = *(std::__shared_weak_count **)(v9 + 72);
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v7) {
            goto LABEL_86;
          }
          if (Espresso::is_kernel_generating_output(v7, v12)) {
            goto LABEL_86;
          }
          uint64_t v15 = (*(uint64_t (**)(Espresso *))(*(void *)v7 + 320))(v7);
          uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v13 + 320))(v13);
          if (!*(unsigned char *)(v15 + 26)) {
            goto LABEL_86;
          }
          uint64_t v17 = (uint64_t *)v16;
          uint64_t v18 = *(void *)a1 + 56;
          uint64_t v68 = &v82;
          uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, &v82, (uint64_t)&std::piecewise_construct, (uint64_t **)&v68);
          if (v19[4] - v19[3] != 24) {
            goto LABEL_86;
          }
          uint64_t v20 = *(void *)a1 + 96;
          uint64_t v68 = &v82;
          uint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v20, &v82, (uint64_t)&std::piecewise_construct, (uint64_t **)&v68);
          if (v21[4] - v21[3] != 24) {
            goto LABEL_86;
          }
          uint64_t v22 = *(void *)a1 + 56;
          uint64_t v68 = (unint64_t *)(v82 + 1);
          uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v82 + 1, &v68);
          if (v23[4] - v23[3] != 24) {
            goto LABEL_86;
          }
          uint64_t v24 = *(void *)a1 + 96;
          uint64_t v68 = (unint64_t *)(v82 + 1);
          uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v82 + 1, &v68);
          if (v25[4] - v25[3] != 24) {
            goto LABEL_86;
          }
          uint64_t v26 = *(void *)a1 + 56;
          uint64_t v68 = &v82;
          int v27 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, &v82, (uint64_t)&std::piecewise_construct, (uint64_t **)&v68)[3];
          if (*((char *)v27 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v27, *((void *)v27 + 1));
          }
          else
          {
            long long v28 = *v27;
            v81.__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v28;
          }
          uint64_t v29 = *(void *)a1 + 96;
          uint64_t v68 = &v82;
          long long v30 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v29, &v82, (uint64_t)&std::piecewise_construct, (uint64_t **)&v68)[3];
          if (*((char *)v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)v30, *((void *)v30 + 1));
          }
          else
          {
            long long v31 = *v30;
            v80.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
            *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v31;
          }
          uint64_t v32 = *(void *)a1 + 56;
          uint64_t v68 = (unint64_t *)(v82 + 1);
          long long v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32, v82 + 1, &v68);
          memset(v79, 0, sizeof(v79));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v79, v33[3], v33[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33[4] - v33[3]) >> 3));
          uint64_t v34 = *(void *)a1 + 96;
          uint64_t v68 = (unint64_t *)(v82 + 1);
          uint64_t v35 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34, v82 + 1, &v68)[3];
          if (*((char *)v35 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v35, *((void *)v35 + 1));
          }
          else
          {
            long long v36 = *v35;
            v78.__r_.__value_.__r.__words[2] = *((void *)v35 + 2);
            *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v36;
          }
          size_t v37 = (unsigned __int8 *)v79[0];
          uint64_t v38 = *(unsigned __int8 *)(v79[0] + 23);
          if ((v38 & 0x80u) == 0) {
            uint64_t v39 = *(unsigned __int8 *)(v79[0] + 23);
          }
          else {
            uint64_t v39 = *(void *)(v79[0] + 8);
          }
          std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
          if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v80.__r_.__value_.__l.__size_;
          }
          if (v39 != size) {
            goto LABEL_80;
          }
          if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v41 = &v80;
          }
          else {
            long long v41 = (std::string *)v80.__r_.__value_.__r.__words[0];
          }
          if ((v38 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v79[0], v41, *(void *)(v79[0] + 8))) {
              goto LABEL_80;
            }
          }
          else if (*(unsigned char *)(v79[0] + 23))
          {
            while (*v37 == v41->__r_.__value_.__s.__data_[0])
            {
              ++v37;
              long long v41 = (std::string *)((char *)v41 + 1);
              if (!--v38) {
                goto LABEL_44;
              }
            }
LABEL_80:
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
            uint64_t v68 = v79;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
LABEL_86:
            if (v14) {
              nitro::nitro_function::nitro_function(v14);
            }
            goto LABEL_88;
          }
LABEL_44:
          __int16 v74 = 0;
          long long v75 = xmmword_192DCA260;
          int v77 = 0;
          uint64_t v73 = *v17;
          char v76 = 1;
          LODWORD(v68) = 0;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          uint64_t v42 = (char *)operator new(0xF8uLL);
          *((void *)v42 + 1) = 0;
          *((void *)v42 + 2) = 0;
          *(void *)uint64_t v42 = &unk_1EE389DF0;
          *((void *)v42 + 3) = &unk_1EE36C758;
          *(_OWORD *)(v42 + 40) = 0u;
          *(_OWORD *)(v42 + 56) = 0u;
          *(_OWORD *)(v42 + 72) = 0u;
          *(_OWORD *)(v42 + 88) = 0u;
          *(_OWORD *)(v42 + 104) = 0u;
          *(_OWORD *)(v42 + 120) = 0u;
          *(_OWORD *)(v42 + 136) = 0u;
          *(_OWORD *)(v42 + 152) = 0u;
          *(_OWORD *)(v42 + 161) = 0u;
          *((_OWORD *)v42 + 13) = 0u;
          *((_OWORD *)v42 + 14) = 0u;
          *((void *)v42 + 30) = 0;
          *(void *)&long long v69 = v42 + 24;
          *((void *)&v69 + 1) = v42;
          uint64_t v43 = *(void *)(*(void *)(*(void *)a1 + 32) + 16 * v82);
          if (*(char *)(v43 + 39) >= 0) {
            size_t v44 = *(unsigned __int8 *)(v43 + 39);
          }
          else {
            size_t v44 = *(void *)(v43 + 24);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v44 + 11);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v44)
          {
            if (*(char *)(v43 + 39) >= 0) {
              char v46 = (const void *)(v43 + 16);
            }
            else {
              char v46 = *(const void **)(v43 + 16);
            }
            long long v47 = p_str;
            memmove(p_str, v46, v44);
            p_str = v47;
          }
          strcpy((char *)p_str + v44, "@gumbel_max");
          uint64_t v48 = v69;
          uint64_t v49 = v69 + 16;
          if (*(char *)(v69 + 39) < 0)
          {
            operator delete(*(void **)v49);
            uint64_t v48 = v69;
          }
          std::string::size_type v50 = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v49 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(void *)(v49 + 16) = v50;
          MEMORY[0x192FF0F50](v48 + 40, "gumbel_max");
          uint64_t v51 = *(uint64_t (****)(void))(*(void *)(*(void *)a1 + 16) + 8);
          int v52 = (**v51)(v51);
          uint64_t v53 = v69;
          *(_DWORD *)(v69 + 8) = v52;
          *(_DWORD *)(v53 + 12) = *(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 32) + 16 * v82) + 12);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = v81;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v70, &__str, &v86, 1uLL);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = v78;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&v71 + 8), &__str, &v86, 1uLL);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          Espresso::abstract_engine_factory::shared(&v83);
          char v54 = v83;
          uint64_t v55 = *(Espresso::net **)a1;
          std::string::basic_string[abi:ne180100]<0>(&__str, "gumbel_max");
          Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v54, (uint64_t)v55 + 16, (uint64_t)&__str, (uint64_t)&v73, (int *)(v69 + 8));
          long long v56 = v65;
          long long v65 = 0uLL;
          int v57 = *(std::__shared_weak_count **)(v69 + 72);
          *(_OWORD *)(v69 + 64) = v56;
          if (v57)
          {
            nitro::nitro_function::nitro_function(v57);
            if (*((void *)&v65 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v65 + 1));
            }
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v84) {
            nitro::nitro_function::nitro_function(v84);
          }
          LODWORD(v68) = v82;
          int v58 = *(char **)(v69 + 64);
          int v59 = operator new(0x10uLL);
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v59 + 2);
          __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v59 + 2);
          void *v59 = v7;
          v59[1] = v13;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          Espresso::merge_kernel_attributes(v58, (uint64_t *)&__str);
          operator delete(v59);
          Espresso::net::remove_layer(*(Espresso::net **)a1, v82);
          Espresso::net::remove_layer(*(Espresso::net **)a1, v82);
          uint64_t v60 = *(Espresso::net **)a1;
          int v67 = v82;
          LODWORD(__str.__r_.__value_.__l.__data_) = v68;
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v69;
          if (*((void *)&v69 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v86 = 0uLL;
          uint64_t v87 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v86, v70, *((uint64_t *)&v70 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v70 + 1) - v70) >> 3));
          memset(v88, 0, sizeof(v88));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v88, *((uint64_t *)&v71 + 1), v72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *((void *)&v71 + 1)) >> 3));
          long long v65 = 0uLL;
          uint64_t v66 = 0;
          unint64_t v83 = (void **)&v65;
          LOBYTE(v84) = 0;
          *(void *)&long long v65 = operator new(0x48uLL);
          *((void *)&v65 + 1) = v65;
          uint64_t v66 = v65 + 72;
          *((void *)&v65 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v66, (uint64_t)&__str, (uint64_t)v89, v65);
          Espresso::net::insert_layers((uint64_t)v60, &v67, (uint64_t *)&v65);
          unint64_t v83 = (void **)&v65;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v83);
          unint64_t v83 = (void **)v88;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v83);
          unint64_t v83 = (void **)&v86;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v83);
          if (__str.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2]);
          }
          ++v82;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (*((void *)&v69 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v69 + 1));
          }
          goto LABEL_80;
        }
      }
LABEL_88:
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      unint64_t v4 = v82 + 1;
      unint64_t v82 = v4;
      uint64_t v2 = *(Espresso::net **)a1;
      uint64_t v3 = *(void *)(*(void *)a1 + 32);
      if (v4 >= ((*(void *)(*(void *)a1 + 40) - v3) >> 4) - 1) {
        goto LABEL_91;
      }
    }
    unint64_t v7 = 0;
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
LABEL_91:
  uint64_t v61 = *(atomic_ullong **)(a1 + 8);
  v64[0] = v2;
  v64[1] = (Espresso *)v61;
  if (v61)
  {
    atomic_fetch_add_explicit(v61 + 1, 1uLL, memory_order_relaxed);
    uint64_t v2 = *(Espresso::net **)a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v62, (long long **)v2 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v63, (long long **)v2 + 26);
  reshape_network(v64, v62);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v63, v63[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v62, (char *)v62[1]);
  if (v61) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v61);
  }
}

void sub_1926C7680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a31);
  if (a50 < 0) {
    operator delete(__p);
  }
  a31 = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (*(char *)(v53 - 233) < 0) {
    operator delete(*(void **)(v53 - 256));
  }
  if (*(char *)(v53 - 201) < 0)
  {
    operator delete(*(void **)(v53 - 224));
    if (v52)
    {
LABEL_12:
      nitro::nitro_function::nitro_function(v52);
      if (!v51) {
LABEL_11:
      }
        _Unwind_Resume(a1);
LABEL_10:
      nitro::nitro_function::nitro_function(v51);
      goto LABEL_11;
    }
  }
  else if (v52)
  {
    goto LABEL_12;
  }
  if (!v51) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

void Espresso::low_precision_accumulation_fc(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)a1 + 32);
  for (uint64_t i = *(uint64_t **)(*(void *)a1 + 40); v1 != i; v1 += 2)
  {
    uint64_t v4 = *v1;
    uint64_t v3 = (std::__shared_weak_count *)v1[1];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = *(const void **)(v4 + 64);
    if (v5)
    {
      if (v6)
      {
        unint64_t v7 = v6;
        uint64_t v8 = *(std::__shared_weak_count **)(v4 + 72);
        v20[0] = (uint64_t)v6;
        v20[1] = (uint64_t)v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v6 + 384))(v6) + 32))
        {
          *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v7 + 384))(v7) + 116) = 1;
          quantize_to_fp16<Espresso::generic_inner_product_kernel,2>(v20);
          (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v7 + 472))(&v18, v7);
          if (v18)
          {
            Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v16, &v18);
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p, "w_f16_t");
            (*(void (**)(void *, uint64_t *, void **, void, uint64_t, void))(*(void *)v7 + 160))(v7, &v14, &__p, *(void *)(v16 + 16), 2 * *(int *)(v16 + 8) * (uint64_t)*(int *)(v16 + 12), 0);
            if (v13 < 0) {
              operator delete(__p);
            }
            if (v15) {
              nitro::nitro_function::nitro_function(v15);
            }
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            std::string __p = 0;
            uint64_t v12 = 0;
            (*(void (**)(void *, uint64_t *, void **))(*(void *)v7 + 464))(v7, &v9, &__p);
            if (v12) {
              nitro::nitro_function::nitro_function(v12);
            }
            if (v10) {
              nitro::nitro_function::nitro_function(v10);
            }
            if (v17) {
              nitro::nitro_function::nitro_function(v17);
            }
          }
          if (v19) {
            nitro::nitro_function::nitro_function(v19);
          }
        }
        if (v8) {
          nitro::nitro_function::nitro_function(v8);
        }
      }
    }
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

void sub_1926C7ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, std::__shared_weak_count *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23)
  {
    nitro::nitro_function::nitro_function(a23);
    if (!v24)
    {
LABEL_9:
      if (!v23) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if (!v24)
  {
    goto LABEL_9;
  }
  nitro::nitro_function::nitro_function(v24);
  if (!v23) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_10:
  nitro::nitro_function::nitro_function(v23);
  goto LABEL_11;
}

void Espresso::low_precision_accumulation_conv(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)a1 + 32);
  for (uint64_t i = *(uint64_t **)(*(void *)a1 + 40); v1 != i; v1 += 2)
  {
    uint64_t v4 = *v1;
    uint64_t v3 = (std::__shared_weak_count *)v1[1];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = *(const void **)(v4 + 64);
    if (v5)
    {
      if (v6)
      {
        unint64_t v7 = v6;
        uint64_t v8 = *(std::__shared_weak_count **)(v4 + 72);
        v15[0] = (uint64_t)v6;
        v15[1] = (uint64_t)v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v6 + 384))(v6) + 144) = 1;
        quantize_to_fp16<Espresso::generic_convolution_kernel,4>(v15);
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v7 + 552))(&v13, v7);
        if (v13)
        {
          uint64_t v11 = v13;
          uint64_t v12 = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          (*(void (**)(void *, uint64_t *, uint64_t *))(*(void *)v7 + 544))(v7, &v11, &v9);
          if (v10) {
            nitro::nitro_function::nitro_function(v10);
          }
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
        }
        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
        if (v8) {
          nitro::nitro_function::nitro_function(v8);
        }
      }
    }
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

void sub_1926C7D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14)
  {
    nitro::nitro_function::nitro_function(a14);
    if (!v15)
    {
LABEL_7:
      if (!v14) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!v15)
  {
    goto LABEL_7;
  }
  nitro::nitro_function::nitro_function(v15);
  if (!v14) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_8:
  nitro::nitro_function::nitro_function(v14);
  goto LABEL_9;
}

void quantize_to_fp16<Espresso::generic_convolution_kernel,4>(uint64_t *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 456))(&v25);
  if (v25)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v23, v25 + 8);
    uint64_t v2 = 0;
    uint64_t v3 = *(int **)(v25 + 24);
    uint64_t v4 = v23;
    uint64_t v5 = *(_WORD **)(v23 + 24);
    uint64_t v6 = *(int *)(v25 + 8);
    do
    {
      v6 *= *(int *)(v25 + 12 + v2);
      v2 += 4;
    }
    while (v2 != 12);
    for (; v6; --v6)
    {
      int v7 = *v3++;
      _S0 = v7;
      __asm { FCVT            H0, S0 }
      *v5++ = _S0;
    }
    uint64_t v13 = *a1;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 400))(v13, &v21);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    uint64_t v14 = *a1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
    uint64_t v15 = 0;
    uint64_t v16 = *(int *)(v4 + 8);
    do
    {
      v16 *= *(int *)(v4 + 12 + v15);
      v15 += 4;
    }
    while (v15 != 12);
    (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v14 + 160))(v14, &v19, __p, *(void *)(v4 + 24), 2 * v16, 0);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_1926C7F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 40);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v19 - 24);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(exception_object);
}

void quantize_to_fp16<Espresso::generic_inner_product_kernel,2>(uint64_t *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 416))(&v22);
  if (v22)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v20, (int *)(v22 + 8));
    uint64_t v2 = v20;
    uint64_t v3 = *(int *)(v22 + 12) * (uint64_t)*(int *)(v22 + 8);
    if (v3)
    {
      uint64_t v4 = *(int **)(v22 + 16);
      uint64_t v5 = *(_WORD **)(v20 + 16);
      do
      {
        int v6 = *v4++;
        _S0 = v6;
        __asm { FCVT            H0, S0 }
        *v5++ = _S0;
        --v3;
      }
      while (v3);
    }
    uint64_t v12 = *a1;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 400))(v12, &v18);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    uint64_t v13 = *a1;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "W_f16");
    (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v13 + 160))(v13, &v16, __p, *(void *)(v2 + 16), 2 * *(int *)(v2 + 8) * (uint64_t)*(int *)(v2 + 12), 0);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
}

void sub_1926C8124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 40);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v19 - 24);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(void *a1, uint64_t *a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(a1, *(_DWORD *)(*a2 + 12), *(_DWORD *)(*a2 + 8), 1, 1);
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 12);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(unsigned int *)(v4 + 8);
    uint64_t v10 = *a2;
    do
    {
      if ((int)v9 >= 1)
      {
        uint64_t v11 = (_WORD *)(*(void *)(v4 + 16) + v7);
        uint64_t v12 = (_WORD *)(*(void *)(v10 + 16) + v6);
        uint64_t v13 = v9;
        do
        {
          *v11++ = *v12;
          v12 += v5;
          --v13;
        }
        while (v13);
      }
      ++v8;
      v7 += 2 * (int)v9;
      v6 += 2;
    }
    while (v8 != v5);
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389D10;
  *((void *)v10 + 3) = &unk_1EE36C0F0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  uint64_t v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  uint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1926C8310(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<unsigned short,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C0F0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned short,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C0F0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(void *a1, int *a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389D10;
  *((void *)v4 + 3) = &unk_1EE36C0F0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  int v5 = *a2;
  int v6 = a2[1];
  *((_DWORD *)v4 + 8) = *a2;
  *((_DWORD *)v4 + 9) = v6;
  uint64_t v7 = (Espresso *)(2 * v5 * (uint64_t)v6);
  uint64_t v8 = Espresso::kern_alloc_uninitialized(v7);
  bzero(v8, (size_t)v7);
  *((void *)v4 + 5) = v8;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1926C85B4(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  int v6 = (long long *)__str;
  uint64_t p_end_cap = (uint64_t)&a1->__end_cap_;
  std::vector<std::string>::pointer begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_14:
    a1->__end_ = v12;
    return;
  }
  std::vector<std::string>::pointer end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    uint64_t v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        int v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      std::vector<std::string>::pointer begin = a1->__end_;
    }
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_14;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      int v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    std::vector<std::string>::pointer end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_1926C876C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *Espresso::merge_kernel_attributes(char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result + 240;
    do
    {
      for (uint64_t i = *(unsigned __int8 **)(*(void *)v2 + 256); i; uint64_t i = *(unsigned __int8 **)i)
      {
        __n128 result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v4, i + 16);
        if (!result)
        {
          int v6 = *((_DWORD *)i + 10);
          uint64_t v7 = (long long *)(i + 16);
          __n128 result = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, i + 16, (uint64_t)&std::piecewise_construct, &v7);
          *((_DWORD *)result + 10) = v6;
        }
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

void pattern_matcher::~pattern_matcher(pattern_matcher *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 200);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)this + 120);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 80);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 40);

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1926C8AA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *,false>(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = a2 - 1;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v40 = *v11;
                if (*v10 > *v11)
                {
                  *unint64_t v11 = *v10;
                  unint64_t *v10 = v40;
                }
                break;
              case 3uLL:
                __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                long long v41 = v11 + 1;
                uint64_t v42 = v11 + 2;
                uint64_t v43 = v11 + 3;
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, v11 + 3);
                unint64_t v44 = v11[3];
                if (*v10 > v44)
                {
                  unint64_t *v43 = *v10;
                  unint64_t *v10 = v44;
                  unint64_t v45 = *v43;
                  unint64_t v46 = *v42;
                  if (*v43 > *v42)
                  {
                    unint64_t *v42 = v45;
                    unint64_t *v43 = v46;
                    unint64_t v47 = *v41;
                    if (v45 > *v41)
                    {
                      v11[1] = v45;
                      v11[2] = v47;
                      unint64_t v48 = *v11;
                      if (v45 > *v11)
                      {
                        *unint64_t v11 = v45;
                        v11[1] = v48;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v49 = v11 + 1;
            BOOL v51 = v11 == a2 || v49 == a2;
            if (a4)
            {
              if (!v51)
              {
                uint64_t v52 = 8;
                uint64_t v53 = v11;
                do
                {
                  unint64_t v55 = *v53;
                  unint64_t v54 = v53[1];
                  uint64_t v53 = v49;
                  if (v54 > v55)
                  {
                    uint64_t v56 = v52;
                    do
                    {
                      *(unint64_t *)((char *)v11 + v56) = v55;
                      uint64_t v57 = v56 - 8;
                      if (v56 == 8)
                      {
                        int v58 = v11;
                        goto LABEL_81;
                      }
                      unint64_t v55 = *(unint64_t *)((char *)v11 + v56 - 16);
                      v56 -= 8;
                    }
                    while (v54 > v55);
                    int v58 = (unint64_t *)((char *)v11 + v57);
LABEL_81:
                    *int v58 = v54;
                  }
                  uint64_t v49 = v53 + 1;
                  v52 += 8;
                }
                while (v53 + 1 != a2);
              }
            }
            else if (!v51)
            {
              do
              {
                unint64_t v85 = *v9;
                unint64_t v84 = v9[1];
                uint64_t v9 = v49;
                if (v84 > v85)
                {
                  do
                  {
                    *uint64_t v49 = v85;
                    unint64_t v85 = *(v49 - 2);
                    --v49;
                  }
                  while (v84 > v85);
                  *uint64_t v49 = v84;
                }
                uint64_t v49 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v59 = (v13 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  BOOL v63 = &v11[v62];
                  if (2 * v61 + 2 < (uint64_t)v13)
                  {
                    unint64_t v65 = v63[1];
                    BOOL v64 = *v63 > v65;
                    if (*v63 < v65) {
                      unint64_t v65 = *v63;
                    }
                    if (v64)
                    {
                      ++v63;
                      uint64_t v62 = 2 * v61 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v65 = *v63;
                  }
                  uint64_t v66 = &v11[v61];
                  unint64_t v67 = *v66;
                  if (v65 <= *v66)
                  {
                    do
                    {
                      *uint64_t v66 = v65;
                      uint64_t v66 = v63;
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v68 = (2 * v62) | 1;
                      BOOL v63 = &v11[v68];
                      uint64_t v62 = 2 * v62 + 2;
                      if (v62 < (uint64_t)v13)
                      {
                        unint64_t v65 = *v63;
                        __n128 result = v63 + 1;
                        unint64_t v69 = v63[1];
                        BOOL v70 = *v63 > v69;
                        if (*v63 >= v69) {
                          unint64_t v65 = v63[1];
                        }
                        if (*v63 > v69) {
                          ++v63;
                        }
                        if (!v70) {
                          uint64_t v62 = v68;
                        }
                      }
                      else
                      {
                        unint64_t v65 = *v63;
                        uint64_t v62 = v68;
                      }
                    }
                    while (v65 <= v67);
                    *uint64_t v66 = v67;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v71 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v72 = 0;
                unint64_t v73 = *v11;
                __int16 v74 = v11;
                do
                {
                  long long v75 = &v74[v72 + 1];
                  uint64_t v76 = (2 * v72) | 1;
                  uint64_t v72 = 2 * v72 + 2;
                  if (v72 < v71)
                  {
                    unint64_t v78 = *v75;
                    unint64_t v77 = v75[1];
                    if (*v75 >= v77) {
                      unint64_t v78 = v75[1];
                    }
                    if (*v75 <= v77) {
                      uint64_t v72 = v76;
                    }
                    else {
                      ++v75;
                    }
                  }
                  else
                  {
                    unint64_t v78 = *v75;
                    uint64_t v72 = v76;
                  }
                  unint64_t *v74 = v78;
                  __int16 v74 = v75;
                }
                while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
                if (v75 == --a2)
                {
                  *long long v75 = v73;
                }
                else
                {
                  *long long v75 = *a2;
                  *a2 = v73;
                  uint64_t v79 = (char *)v75 - (char *)v11 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                    std::string v81 = &v11[v80];
                    unint64_t v82 = *v81;
                    unint64_t v83 = *v75;
                    if (*v81 > *v75)
                    {
                      do
                      {
                        *long long v75 = v82;
                        long long v75 = v81;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        std::string v81 = &v11[v80];
                        unint64_t v82 = *v81;
                      }
                      while (*v81 > v83);
                      *long long v75 = v83;
                    }
                  }
                }
                BOOL v64 = v71-- <= 2;
              }
              while (!v64);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v15 - 1, v15, &v9[v14 + 1]);
            unint64_t v16 = *v9;
            unint64_t *v9 = *v15;
            *unint64_t v15 = v16;
          }
          else
          {
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          unint64_t v17 = *v9;
          uint64_t v18 = v9;
          if (a4) {
            break;
          }
          uint64_t v18 = v9;
          if (*(v9 - 1) > v17) {
            break;
          }
          if (v17 <= *v10)
          {
            uint64_t v32 = v9 + 1;
            do
            {
              unint64_t v11 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 <= *v11);
          }
          else
          {
            unint64_t v11 = v9;
            do
            {
              unint64_t v31 = v11[1];
              ++v11;
            }
            while (v17 <= v31);
          }
          long long v33 = a2;
          if (v11 < a2)
          {
            long long v33 = a2;
            do
              unint64_t v34 = *--v33;
            while (v17 > v34);
          }
          if (v11 < v33)
          {
            unint64_t v35 = *v11;
            unint64_t v36 = *v33;
            do
            {
              *unint64_t v11 = v36;
              *long long v33 = v35;
              do
              {
                unint64_t v37 = v11[1];
                ++v11;
                unint64_t v35 = v37;
              }
              while (v17 <= v37);
              do
              {
                unint64_t v38 = *--v33;
                unint64_t v36 = v38;
              }
              while (v17 > v38);
            }
            while (v11 < v33);
          }
          uint64_t v39 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            unint64_t *v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v17;
        }
        do
        {
          uint64_t v19 = v18;
          unint64_t v21 = v18[1];
          ++v18;
          unint64_t v20 = v21;
        }
        while (v21 > v17);
        uint64_t v22 = a2;
        if (v19 == v9)
        {
          uint64_t v22 = a2;
          do
          {
            if (v18 >= v22) {
              break;
            }
            unint64_t v24 = *--v22;
          }
          while (v24 <= v17);
        }
        else
        {
          do
            unint64_t v23 = *--v22;
          while (v23 <= v17);
        }
        if (v18 < v22)
        {
          unint64_t v25 = *v22;
          uint64_t v26 = v18;
          int v27 = v22;
          do
          {
            unint64_t *v26 = v25;
            unint64_t *v27 = v20;
            do
            {
              uint64_t v19 = v26;
              unint64_t v28 = v26[1];
              ++v26;
              unint64_t v20 = v28;
            }
            while (v28 > v17);
            do
            {
              unint64_t v29 = *--v27;
              unint64_t v25 = v29;
            }
            while (v29 <= v17);
          }
          while (v26 < v27);
        }
        if (v19 != v9) {
          unint64_t *v9 = *v19;
        }
        *uint64_t v19 = v17;
        if (v18 >= v22) {
          break;
        }
LABEL_30:
        __n128 result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *,false>(v9, v19, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v19 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v9, v19);
      unint64_t v11 = v19 + 1;
      __n128 result = (unint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(v19 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v19;
    if (!v30) {
      continue;
    }
    return result;
  }
}

void ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32) + 96;
  *(void *)&v51[0] = *(int *)(a2 + 128);
  BOOL v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, *(unint64_t *)&v51[0], v51);
  uint64_t v6 = *(void *)(a1 + 32) + 56;
  unint64_t v7 = *(int *)(a2 + 120);
  *(void *)&v51[0] = v7;
  uint8x8_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v51);
  uint64_t v9 = (void *)v5[3];
  if (v5[4] - (void)v9 != 24) {
    return;
  }
  unint64_t v10 = v8;
  if (v8[4] - v8[3] != 24) {
    return;
  }
  unint64_t v11 = (uint64_t **)(*(void *)(a1 + 32) + 184);
  *(void *)&v46[0] = v5[3];
  uint64_t v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v9, (long long **)v46);
  long long v13 = *(_OWORD *)(v12 + 72);
  v51[0] = *(_OWORD *)(v12 + 56);
  v51[1] = v13;
  unint64_t v14 = (const void *)*((void *)v12 + 12);
  uint64_t v52 = *((void *)v12 + 11);
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v53, v14, *((void *)v12 + 13), (uint64_t)(*((void *)v12 + 13) - (void)v14) >> 2);
  unint64_t v15 = (uint64_t **)(*(void *)(a1 + 32) + 184);
  unint64_t v56 = v10[3];
  unint64_t v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (void *)v56, (long long **)&v56);
  long long v17 = *(_OWORD *)(v16 + 72);
  v46[0] = *(_OWORD *)(v16 + 56);
  v46[1] = v17;
  uint64_t v18 = (const void *)*((void *)v16 + 12);
  uint64_t v47 = *((void *)v16 + 11);
  std::string __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18, *((void *)v16 + 13), (uint64_t)(*((void *)v16 + 13) - (void)v18) >> 2);
  if (Espresso::layer_shape::operator==((uint64_t)v51, (uint64_t)v46))
  {
    uint64_t v19 = *(void *)(a1 + 32) + 96;
    unint64_t v56 = *(int *)(a2 + 124);
    unint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19, v56, &v56);
    if (v20 != v5) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v20 + 3), (std::string *)v5[3], (std::string *)v5[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 3));
    }
    uint64_t v21 = *(void *)(a1 + 32) + 56;
    unint64_t v56 = *(int *)(a2 + 124);
    uint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v56, &v56);
    if (v22 != v10) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v22 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    }
    unint64_t v23 = (void **)(a2 + 96);
    unint64_t v25 = *(char **)(a2 + 104);
    unint64_t v24 = *(void *)(a2 + 112);
    if ((unint64_t)v25 >= v24)
    {
      int v27 = (char *)*v23;
      uint64_t v28 = (v25 - (unsigned char *)*v23) >> 2;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        goto LABEL_44;
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      BOOL v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v32 = v29;
      }
      if (v32)
      {
        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v32);
        int v27 = *(char **)(a2 + 96);
        unint64_t v25 = *(char **)(a2 + 104);
      }
      else
      {
        uint64_t v33 = 0;
      }
      unint64_t v34 = (_DWORD *)(v32 + 4 * v28);
      unint64_t v24 = v32 + 4 * v33;
      *unint64_t v34 = *(_DWORD *)(a2 + 120);
      uint64_t v26 = (char *)(v34 + 1);
      while (v25 != v27)
      {
        int v35 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--unint64_t v34 = v35;
      }
      *(void *)(a2 + 96) = v34;
      *(void *)(a2 + 104) = v26;
      *(void *)(a2 + 112) = v24;
      if (v27)
      {
        operator delete(v27);
        unint64_t v24 = *(void *)(a2 + 112);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *(_DWORD *)(a2 + 120);
      uint64_t v26 = v25 + 4;
    }
    *(void *)(a2 + 104) = v26;
    if ((unint64_t)v26 < v24)
    {
      *(_DWORD *)uint64_t v26 = *(_DWORD *)(a2 + 128);
      unint64_t v36 = v26 + 4;
LABEL_38:
      *(void *)(a2 + 104) = v36;
      goto LABEL_39;
    }
    unint64_t v37 = (char *)*v23;
    uint64_t v38 = (v26 - (unsigned char *)*v23) >> 2;
    unint64_t v39 = v38 + 1;
    if (!((unint64_t)(v38 + 1) >> 62))
    {
      uint64_t v40 = v24 - (void)v37;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      BOOL v31 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
        unint64_t v37 = *(char **)(a2 + 96);
        uint64_t v26 = *(char **)(a2 + 104);
      }
      else
      {
        uint64_t v42 = 0;
      }
      uint64_t v43 = (_DWORD *)(v41 + 4 * v38);
      unint64_t v44 = v41 + 4 * v42;
      _DWORD *v43 = *(_DWORD *)(a2 + 128);
      unint64_t v36 = v43 + 1;
      while (v26 != v37)
      {
        int v45 = *((_DWORD *)v26 - 1);
        v26 -= 4;
        *--uint64_t v43 = v45;
      }
      *(void *)(a2 + 96) = v43;
      *(void *)(a2 + 104) = v36;
      *(void *)(a2 + 112) = v44;
      if (v37) {
        operator delete(v37);
      }
      goto LABEL_38;
    }
LABEL_44:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_39:
  if (__p)
  {
    uint64_t v49 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    unint64_t v54 = v53;
    operator delete(v53);
  }
}

void sub_1926C9498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::fuse_vertical_state<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>::~fuse_vertical_state(uint64_t a1)
{
  uint8x8_t v8 = (void **)(a1 + 88);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return a1;
}

void ___ZN8Espresso24transformer_optimizationENSt3__110shared_ptrINS_3netEEE_block_invoke_50(uint64_t a1, uint64_t a2)
{
  if (!Espresso::is_kernel_generating_output(*(Espresso **)a2, (const Espresso::base_kernel *)a2))
  {
    unint64_t v3 = *(void **)(*(void *)(a2 + 32) + 64);
    if (v3) {
    uint64_t v4 = (int32x4_t *)(*(uint64_t (**)(void *))(*(void *)v3 + 320))(v3);
    }
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(*v4, v5))) & 1) == 0 && v4[1].i32[0] != -1)
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 120) + 32);
      unint64_t v7 = *(char **)(*(void *)(v6 + 16 * *(int *)(a2 + 116)) + 64);
      uint64_t v8 = *(void *)(*(void *)(v6 + 16 * *(int *)(a2 + 112)) + 64);
      uint64_t v9 = operator new(8uLL);
      void *v9 = v8;
      v30[1] = (uint64_t)(v9 + 1);
      uint64_t v30[2] = (uint64_t)(v9 + 1);
      v30[0] = (uint64_t)v9;
      Espresso::merge_kernel_attributes(v7, v30);
      operator delete(v9);
      uint64_t v10 = *(void *)(a2 + 120) + 56;
      unint64_t v11 = *(int *)(a2 + 112);
      v30[0] = v11;
      uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, v30);
      uint64_t v13 = *(void *)(a2 + 120) + 56;
      unint64_t v14 = *(int *)(a2 + 116);
      unint64_t v29 = v14;
      unint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, &v29);
      if (v15 != v12) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v15 + 3), (std::string *)v12[3], (std::string *)v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
      }
      unint64_t v16 = *(char **)(a2 + 72);
      unint64_t v17 = *(void *)(a2 + 80);
      if ((unint64_t)v16 >= v17)
      {
        uint64_t v19 = *(char **)(a2 + 64);
        uint64_t v20 = (v16 - v19) >> 2;
        if ((unint64_t)(v20 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = v17 - (void)v19;
        unint64_t v22 = (uint64_t)(v17 - (void)v19) >> 1;
        if (v22 <= v20 + 1) {
          unint64_t v22 = v20 + 1;
        }
        BOOL v23 = v21 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v23) {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v24);
          uint64_t v19 = *(char **)(a2 + 64);
          unint64_t v16 = *(char **)(a2 + 72);
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = (_DWORD *)(v24 + 4 * v20);
        unint64_t v27 = v24 + 4 * v25;
        _DWORD *v26 = *(_DWORD *)(a2 + 112);
        uint64_t v18 = v26 + 1;
        while (v16 != v19)
        {
          int v28 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--uint64_t v26 = v28;
        }
        *(void *)(a2 + 64) = v26;
        *(void *)(a2 + 72) = v18;
        *(void *)(a2 + 80) = v27;
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v16 = *(_DWORD *)(a2 + 112);
        uint64_t v18 = v16 + 4;
      }
      *(void *)(a2 + 72) = v18;
    }
  }
}

void sub_1926C9794(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *Espresso::fuse_vertical_3_state<Espresso::generic_reshape_kernel,Espresso::generic_activation_kernel,Espresso::generic_reshape_kernel>::~fuse_vertical_3_state(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int32x4_t v5 = (std::__shared_weak_count *)a1[7];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[5];
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[3];
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return a1;
}

void __destroy_helper_block_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      unint64_t v6 = *result;
      if (*a2 > *result)
      {
        *__n128 result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *__n128 result = v3;
      *a2 = v4;
      if (*a3 <= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *__n128 result = v5;
    }
    *a3 = v4;
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      unint64_t v11 = *a1;
      if (*a2 > *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 > *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unint64_t v17 = a1 + 1;
      uint64_t v18 = a1 + 2;
      uint64_t v19 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3);
      unint64_t v20 = *(a2 - 1);
      unint64_t v21 = a1[3];
      if (v20 > v21)
      {
        *uint64_t v19 = v20;
        *(a2 - 1) = v21;
        unint64_t v22 = *v19;
        unint64_t v23 = *v18;
        if (*v19 > *v18)
        {
          unint64_t *v18 = v22;
          *uint64_t v19 = v23;
          unint64_t v24 = *v17;
          if (v22 > *v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            unint64_t v25 = *a1;
            if (v22 > *a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::transformer_optimization(std::shared_ptr<Espresso::net>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 > *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 <= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      unint64_t v16 = a1;
LABEL_13:
      *unint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::deque<pattern_matcher::match_at(unsigned long)::state_t,std::allocator<pattern_matcher::match_at(unsigned long)::state_t>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v5 = *(void **)(a1 + 8);
    unint64_t v6 = *(char **)(a1 + 16);
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    *(void *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_74:
      *(void *)unint64_t v6 = v8;
      goto LABEL_75;
    }
    int v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      if (v6 == v10) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = (v6 - v10) >> 2;
      }
      if (!(v34 >> 61))
      {
        int v35 = (char *)operator new(8 * v34);
        unint64_t v36 = &v35[8 * (v34 >> 2)];
        unint64_t v37 = &v35[8 * v34];
        uint64_t v39 = v6 - v7;
        BOOL v38 = v6 == v7;
        unint64_t v6 = v36;
        if (!v38)
        {
          unint64_t v6 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v40 = 8 * (v39 >> 3);
          unint64_t v41 = &v35[8 * (v34 >> 2)];
          do
          {
            uint64_t v42 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v41 = v42;
            v41 += 8;
            v40 -= 8;
          }
          while (v40);
        }
        goto LABEL_30;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v12 = v11 >> 3;
    if (v12 >= -1) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = v12 + 2;
    }
    uint64_t v14 = -(v13 >> 1);
    uint64_t v15 = v13 >> 1;
    unint64_t v16 = &v7[-8 * v15];
    size_t v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v6 = &v16[v17];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = v6;
    goto LABEL_74;
  }
  uint64_t v19 = *(char **)(a1 + 16);
  uint64_t v18 = *(char **)(a1 + 24);
  unint64_t v21 = *(char **)a1;
  unint64_t v20 = *(char **)(a1 + 8);
  uint64_t v22 = v19 - v20;
  uint64_t v23 = (v19 - v20) >> 3;
  uint64_t v24 = (uint64_t)&v18[-*(void *)a1];
  if (v23 < (unint64_t)(v24 >> 3))
  {
    unint64_t v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v18 != v19)
    {
      *(void *)uint64_t v19 = v25;
LABEL_75:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v20 == v21)
    {
      if (v19 == v20) {
        unint64_t v60 = 1;
      }
      else {
        unint64_t v60 = (v18 - v20) >> 2;
      }
      if (v60 >> 61) {
        goto LABEL_87;
      }
      int64_t v61 = (char *)operator new(8 * v60);
      uint64_t v43 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v62 = v43;
      if (v19 != v20)
      {
        uint64_t v63 = 8 * v23;
        BOOL v64 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
        unint64_t v65 = v20;
        uint64_t v62 = &v43[8 * v23];
        do
        {
          uint64_t v66 = *(void *)v65;
          v65 += 8;
          *(void *)BOOL v64 = v66;
          v64 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      *(void *)a1 = v61;
      *(void *)(a1 + 8) = v43;
      *(void *)(a1 + 16) = v62;
      *(void *)(a1 + 24) = &v61[8 * v60];
      if (v20)
      {
        operator delete(v20);
        uint64_t v43 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v43 = v20;
    }
    *((void *)v43 - 1) = v26;
    unint64_t v7 = *(char **)(a1 + 8);
    unint64_t v6 = *(char **)(a1 + 16);
    *(void *)(a1 + 8) = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    *(void *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24)) {
      goto LABEL_74;
    }
    int v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      if (v6 == v10) {
        unint64_t v67 = 1;
      }
      else {
        unint64_t v67 = (v6 - v10) >> 2;
      }
      if (!(v67 >> 61))
      {
        int v35 = (char *)operator new(8 * v67);
        unint64_t v36 = &v35[8 * (v67 >> 2)];
        unint64_t v37 = &v35[8 * v67];
        uint64_t v68 = v6 - v7;
        BOOL v38 = v6 == v7;
        unint64_t v6 = v36;
        if (!v38)
        {
          unint64_t v6 = &v36[v68 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v69 = 8 * (v68 >> 3);
          BOOL v70 = &v35[8 * (v67 >> 2)];
          do
          {
            uint64_t v71 = *(void *)v7;
            v7 += 8;
            *(void *)BOOL v70 = v71;
            v70 += 8;
            v69 -= 8;
          }
          while (v69);
        }
LABEL_30:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v6;
        *(void *)(a1 + 24) = v37;
        if (v10)
        {
          operator delete(v10);
          unint64_t v6 = *(char **)(a1 + 16);
        }
        goto LABEL_74;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v18 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28 >> 61) {
    goto LABEL_87;
  }
  unint64_t v29 = (char *)operator new(8 * v28);
  uint64_t v30 = operator new(0x1000uLL);
  BOOL v31 = &v29[8 * v23];
  unint64_t v32 = &v29[8 * v28];
  if (v23 == v28)
  {
    if (v22 < 1)
    {
      if (v19 == v20) {
        unint64_t v44 = 1;
      }
      else {
        unint64_t v44 = v22 >> 2;
      }
      if (v44 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v31 = (char *)operator new(8 * v44);
      unint64_t v32 = &v31[8 * v44];
      operator delete(v29);
      unint64_t v20 = *(char **)(a1 + 8);
      uint64_t v19 = *(char **)(a1 + 16);
      unint64_t v29 = v31;
    }
    else
    {
      unint64_t v33 = v23 + 2;
      if (v23 >= -1) {
        unint64_t v33 = v23 + 1;
      }
      v31 -= 8 * (v33 >> 1);
    }
  }
  *(void *)BOOL v31 = v30;
  int v45 = v31 + 8;
  if (v19 == v20)
  {
    int v58 = v31;
    uint64_t v47 = v31 + 8;
  }
  else
  {
    do
    {
      if (v31 == v29)
      {
        if (v45 >= v32)
        {
          if (v32 == v31) {
            unint64_t v50 = 1;
          }
          else {
            unint64_t v50 = (v32 - v31) >> 2;
          }
          if (v50 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v51 = (char *)operator new(8 * v50);
          unint64_t v29 = v51;
          unint64_t v46 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v47 = v46;
          uint64_t v52 = v45 - v31;
          if (v45 != v31)
          {
            uint64_t v47 = &v46[v52 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v53 = 8 * (v52 >> 3);
            unint64_t v54 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v55 = v31;
            do
            {
              uint64_t v56 = *(void *)v55;
              v55 += 8;
              *(void *)unint64_t v54 = v56;
              v54 += 8;
              v53 -= 8;
            }
            while (v53);
          }
          unint64_t v32 = &v51[8 * v50];
          operator delete(v31);
        }
        else
        {
          uint64_t v48 = (v32 - v45) >> 3;
          if (v48 >= -1) {
            unint64_t v49 = v48 + 1;
          }
          else {
            unint64_t v49 = v48 + 2;
          }
          uint64_t v47 = &v45[8 * (v49 >> 1)];
          unint64_t v46 = &v31[8 * (v49 >> 1)];
          if (v45 == v31)
          {
            unint64_t v29 = v45;
          }
          else
          {
            memmove(&v31[8 * (v49 >> 1)], v31, v45 - v31);
            unint64_t v29 = v31;
          }
        }
      }
      else
      {
        unint64_t v46 = v31;
        uint64_t v47 = v45;
      }
      uint64_t v57 = *((void *)v19 - 1);
      v19 -= 8;
      *((void *)v46 - 1) = v57;
      int v58 = v46 - 8;
      int v45 = v47;
      BOOL v31 = v58;
    }
    while (v19 != *(char **)(a1 + 8));
  }
  int64_t v59 = *(char **)a1;
  *(void *)a1 = v29;
  *(void *)(a1 + 8) = v58;
  *(void *)(a1 + 16) = v47;
  *(void *)(a1 + 24) = v32;
  if (v59)
  {
    operator delete(v59);
  }
}

void sub_1926CA02C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    BOOL result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        BOOL result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void pattern_matcher::producers_of_layer(uint64_t **a1, uint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v35 = a4;
  uint64_t v7 = *(void *)a2 + 56;
  unint64_t v36 = &v35;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v7, &v35, (uint64_t)&std::piecewise_construct, (uint64_t **)&v36);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, v8[3], v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v9 = v32;
  for (uint64_t i = v33; v9 != i; v9 += 24)
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a3, v9);
    uint64_t v12 = v11;
    if (v11)
    {
      uint64_t v14 = a1[1];
      unint64_t v13 = (unint64_t)a1[2];
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v20 = *a1;
        uint64_t v21 = v14 - *a1;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v13 - (void)v20;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
          unint64_t v20 = *a1;
          uint64_t v14 = a1[1];
        }
        else
        {
          uint64_t v25 = 0;
        }
        unint64_t v29 = (uint64_t *)(v24 + 8 * v21);
        *unint64_t v29 = v12[5];
        uint64_t v19 = v29 + 1;
        while (v14 != v20)
        {
          uint64_t v30 = *--v14;
          *--unint64_t v29 = v30;
        }
LABEL_32:
        *a1 = v29;
        a1[1] = v19;
        a1[2] = (uint64_t *)(v24 + 8 * v25);
        if (v20) {
          operator delete(v20);
        }
        goto LABEL_34;
      }
      *uint64_t v14 = v11[5];
      uint64_t v15 = v14 + 1;
    }
    else
    {
      uint64_t v16 = (uint64_t)(*(void *)(*(void *)a2 + 40) - *(void *)(*(void *)a2 + 32)) >> 4;
      uint64_t v18 = a1[1];
      unint64_t v17 = (unint64_t)a1[2];
      if ((unint64_t)v18 >= v17)
      {
        unint64_t v20 = *a1;
        uint64_t v26 = v18 - *a1;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v17 - (void)v20;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v27;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v24);
          unint64_t v20 = *a1;
          uint64_t v18 = a1[1];
        }
        else
        {
          uint64_t v25 = 0;
        }
        unint64_t v29 = (uint64_t *)(v24 + 8 * v26);
        *unint64_t v29 = v16;
        uint64_t v19 = v29 + 1;
        while (v18 != v20)
        {
          uint64_t v31 = *--v18;
          *--unint64_t v29 = v31;
        }
        goto LABEL_32;
      }
      uint64_t *v18 = v16;
      uint64_t v15 = v18 + 1;
    }
    uint64_t v19 = v15;
LABEL_34:
    a1[1] = v19;
  }
  unint64_t v36 = (unint64_t *)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_1926CA35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1926CA590(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pattern_matcher::match_blob_names(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] == *a2) {
    return 1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint8x8_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1, v3 + 24 * v7);
    if (!v8)
    {
      unint64_t v16 = (const std::string *)(*a3 + 24 * v7);
      uint64_t v19 = (long long *)(*a2 + 24 * v7);
      size_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (uint64_t)v19, (uint64_t)&std::piecewise_construct, &v19);
      std::string::operator=((std::string *)(v17 + 5), v16);
      goto LABEL_20;
    }
    uint64_t v9 = *a3 + 24 * v7;
    uint64_t v10 = *((unsigned __int8 *)v8 + 63);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = *((unsigned __int8 *)v8 + 63);
    }
    else {
      uint64_t v11 = v8[6];
    }
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
    int v13 = (char)v12;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(v9 + 8);
    }
    if (v11 != v12) {
      return 0;
    }
    BOOL v14 = (const void **)(v8 + 5);
    unint64_t v15 = v13 >= 0 ? (unsigned __int8 *)(*a3 + 24 * v7) : *(unsigned __int8 **)v9;
    if ((v10 & 0x80) == 0) {
      break;
    }
    if (memcmp(*v14, v15, v8[6])) {
      return 0;
    }
LABEL_20:
    ++v7;
    uint64_t v3 = *a2;
    if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)) {
      return 1;
    }
  }
  if (!*((unsigned char *)v8 + 63)) {
    goto LABEL_20;
  }
  while (*(unsigned __int8 *)v14 == *v15)
  {
    BOOL v14 = (const void **)((char *)v14 + 1);
    ++v15;
    if (!--v10) {
      goto LABEL_20;
    }
  }
  return 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  unint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

void ___ZN8Espresso28fuse_transpose_inner_productENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (int32x4_t *)(*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2);
  uint64_t v4 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)a2[2] + 320))();
  (*(void (**)(void))(*(void *)a2[4] + 384))();
  if (Espresso::is_kernel_generating_output((Espresso *)*a2, v5)) {
    return;
  }
  uint64_t v6 = *(unsigned int (****)(void))(*(void *)(a2[4] + 8) + 8);
  if ((**v6)(v6) == 100)
  {
    if (*v4 != 1) {
      return;
    }
  }
  else
  {
    unint64_t v7 = *(unsigned int (****)(void))(*(void *)(a2[4] + 8) + 8);
    if ((**v7)(v7)) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = *v4 == 1;
    }
    if (!v8) {
      return;
    }
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v3, (int32x4_t)xmmword_192DCA270)))) & 1) == 0
    && v3[1].i32[0] == 1)
  {
    uint64_t v9 = *(void *)(a2[17] + 32);
    uint64_t v10 = *(char **)(*(void *)(v9 + 16 * *((int *)a2 + 31)) + 64);
    uint64_t v11 = *(void *)(*(void *)(v9 + 16 * *((int *)a2 + 30)) + 64);
    uint64_t v12 = operator new(8uLL);
    *uint64_t v12 = v11;
    v33[1] = (uint64_t)(v12 + 1);
    id v33[2] = (uint64_t)(v12 + 1);
    v33[0] = (uint64_t)v12;
    Espresso::merge_kernel_attributes(v10, v33);
    operator delete(v12);
    uint64_t v13 = a2[17] + 56;
    unint64_t v14 = *((int *)a2 + 30);
    v33[0] = v14;
    unint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, v33);
    uint64_t v16 = a2[17] + 56;
    unint64_t v17 = *((int *)a2 + 31);
    unint64_t v32 = v17;
    uint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, v17, &v32);
    if (v18 != v15) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v18 + 3), (std::string *)v15[3], (std::string *)v15[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[4] - v15[3]) >> 3));
    }
    uint64_t v19 = (char *)a2[13];
    unint64_t v20 = a2[14];
    if ((unint64_t)v19 >= v20)
    {
      unint64_t v22 = (char *)a2[12];
      uint64_t v23 = (v19 - v22) >> 2;
      if ((unint64_t)(v23 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v24 = v20 - (void)v22;
      unint64_t v25 = (uint64_t)(v20 - (void)v22) >> 1;
      if (v25 <= v23 + 1) {
        unint64_t v25 = v23 + 1;
      }
      BOOL v26 = v24 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v26) {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
        unint64_t v22 = (char *)a2[12];
        uint64_t v19 = (char *)a2[13];
      }
      else
      {
        uint64_t v28 = 0;
      }
      unint64_t v29 = (_DWORD *)(v27 + 4 * v23);
      unint64_t v30 = v27 + 4 * v28;
      *unint64_t v29 = *((_DWORD *)a2 + 30);
      uint64_t v21 = v29 + 1;
      while (v19 != v22)
      {
        int v31 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--unint64_t v29 = v31;
      }
      a2[12] = v29;
      a2[13] = v21;
      a2[14] = v30;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v19 = *((_DWORD *)a2 + 30);
      uint64_t v21 = v19 + 4;
    }
    a2[13] = v21;
  }
}

void sub_1926CAB40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso20transform_dequantizeENSt3__110shared_ptrINS_3netEEERKNS0_13unordered_setINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_4hashISA_EENS0_8equal_toISA_EENS8_ISA_EEEE_block_invoke(uint64_t a1, int *a2)
{
  uint64_t v4 = *(unsigned int (****)(void))(*(void *)(*(void *)a2 + 8) + 8);
  if (!(**v4)(v4)
    || (unint64_t v5 = *(unsigned int (****)(void))(*(void *)(*(void *)a2 + 8) + 8), (**v5)(v5) == 100))
  {
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 32) + 32) + 16 * a2[14]) + 16))
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 472))(&src);
      data = src.data;
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
      if (data)
      {
        (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 416))(&src);
        unint64_t v7 = src.data;
        if (src.height) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
        }
        if (!v7)
        {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 424))(&v31);
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 472))(&v29);
          BOOL v8 = *(void **)(v31 + 16);
          vImagePixelCount v9 = *(int *)(v31 + 12) * (uint64_t)*(int *)(v31 + 8);
          src.data = *(void **)(v29 + 16);
          src.height = 1;
          src.width = v9;
          src.rowBytes = 2 * v9;
          dest.data = v8;
          dest.height = 1;
          dest.width = v9;
          dest.rowBytes = 4 * v9;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          if (v30) {
            nitro::nitro_function::nitro_function(v30);
          }
          uint64_t v10 = *(void *)a2;
          uint64_t v27 = v31;
          uint64_t v28 = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 400))(v10, &v27);
          if (v28) {
            nitro::nitro_function::nitro_function(v28);
          }
          if (v32) {
            nitro::nitro_function::nitro_function(v32);
          }
        }
        uint64_t v11 = *(void *)a2;
        uint64_t v25 = 0;
        BOOL v26 = 0;
        src.data = 0;
        src.height = 0;
        (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(void *)v11 + 464))(v11, &v25, &src);
        if (src.height) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
        }
        if (v26) {
          nitro::nitro_function::nitro_function(v26);
        }
      }
      uint64_t v12 = *(void **)(*(void *)a2 + 440);
      if (v12 && *v12 && (v12[4] || v12[6] || v12[8] || v12[10]))
      {
        (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 416))(&src);
        uint64_t v13 = src.data;
        if (src.height) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
        }
        if (!v13)
        {
          (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 424))(&src);
          Espresso::quantized_weights_helper::dequantize_to_float32_2d(*(Espresso::quantized_weights_helper **)(*(void *)a2 + 440), (uint64_t *)&dest);
          unint64_t v15 = dest.data;
          height = (std::__shared_weak_count *)dest.height;
          uint64_t v16 = (std::__shared_weak_count *)src.height;
          src.data = dest.data;
          src.height = dest.height;
          if (v16)
          {
            nitro::nitro_function::nitro_function(v16);
            unint64_t v15 = src.data;
            height = (std::__shared_weak_count *)src.height;
          }
          uint64_t v17 = *(void *)a2;
          uint64_t v23 = v15;
          unint64_t v24 = height;
          if (height) {
            atomic_fetch_add_explicit(&height->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void **))(*(void *)v17 + 400))(v17, &v23);
          if (v24) {
            nitro::nitro_function::nitro_function(v24);
          }
          if (src.height) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
          }
        }
        uint64_t v18 = *(void *)a2;
        uint64_t v19 = *(std::__shared_weak_count **)(*(void *)a2 + 448);
        *(void *)(v18 + 440) = 0;
        *(void *)(v18 + 448) = 0;
        if (v19) {
          nitro::nitro_function::nitro_function(v19);
        }
      }
      (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 416))(&src);
      unint64_t v20 = src.data;
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
      if (v20)
      {
        uint64_t v21 = *(void **)a2;
        unint64_t v22 = (void *)v21[20];
        v21 += 20;
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v22);
        *(v21 - 1) = v21;
        *uint64_t v21 = 0;
        v21[1] = 0;
      }
    }
  }
}

void sub_1926CAFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  unint64_t v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926CB014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(std::__shared_weak_count **)(v12 - 40);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (!a12) {
    JUMPOUT(0x1926CB00CLL);
  }
  JUMPOUT(0x1926CB008);
}

void Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      uint64_t v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        uint64_t v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    uint64_t v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      unint64_t v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        uint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          uint64_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v31 = (void **)&v21;
          char v32 = 0;
          uint64_t v21 = (uint64_t *)operator new(0x48uLL);
          unint64_t v22 = v21;
          uint64_t v23 = v21 + 9;
          unint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          uint64_t v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1926CB378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::single_match_state<Espresso::generic_inner_product_kernel>::~single_match_state(uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 32);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return a1;
}

void ___Z15dequantize_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke(uint64_t a1, int *a2)
{
  uint64_t v2 = *(int ***)(a1 + 32);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return;
  }
  char v7 = 0;
  do
  {
    BOOL v8 = *(uint64_t (****)(void))(*(void *)(*(void *)a2 + 8) + 8);
    int v9 = (**v8)(v8);
    int v10 = *v3++;
    v7 |= v9 == v10;
  }
  while (v3 != v4);
  if ((v7 & 1) == 0
    || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a1 + 56), *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[14]) + 16))
  {
    return;
  }
  (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 552))(&src);
  data = src.data;
  if (src.height) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
  }
  if (data)
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 456))(&src);
    uint64_t v12 = src.data;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (!v12)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 472))(&v57);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 552))(&v55);
      uint64_t v13 = 0;
      int v14 = *(void **)(v57 + 24);
      vImagePixelCount v15 = *(int *)(v57 + 8);
      do
      {
        v15 *= *(int *)(v57 + 12 + v13);
        v13 += 4;
      }
      while (v13 != 12);
      src.data = *(void **)(v55 + 24);
      src.height = 1;
      src.width = v15;
      src.rowBytes = 2 * v15;
      dest.data = v14;
      dest.height = 1;
      dest.width = v15;
      dest.rowBytes = 4 * v15;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      uint64_t v16 = *(void *)a2;
      uint64_t v53 = v57;
      unint64_t v54 = v58;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 400))(v16, &v53);
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      if (v58) {
        nitro::nitro_function::nitro_function(v58);
      }
    }
    uint64_t v17 = *(void *)a2;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    src.data = 0;
    src.height = 0;
    (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(void *)v17 + 544))(v17, &v51, &src);
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
  }
  uint64_t v18 = *(void **)a2;
  uint64_t v19 = *(void **)(*(void *)a2 + 472);
  if (v19 && *v19 && (v19[4] || v19[6] || v19[8] || v19[10]))
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(*v18 + 456))(&src);
    int v20 = src.data;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (!v20)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 472))(&src);
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(*(Espresso::quantized_weights_helper **)(*(void *)a2 + 472), (uint64_t *)&dest);
      unint64_t v22 = dest.data;
      height = (std::__shared_weak_count *)dest.height;
      uint64_t v23 = (std::__shared_weak_count *)src.height;
      src.data = dest.data;
      src.height = dest.height;
      if (v23)
      {
        nitro::nitro_function::nitro_function(v23);
        unint64_t v22 = src.data;
        height = (std::__shared_weak_count *)src.height;
      }
      uint64_t v24 = *(void *)a2;
      unint64_t v49 = v22;
      unint64_t v50 = height;
      if (height) {
        atomic_fetch_add_explicit(&height->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v24 + 400))(v24, &v49);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
    }
    uint64_t v25 = *(void *)a2;
    BOOL v26 = *(std::__shared_weak_count **)(*(void *)a2 + 480);
    *(void *)(v25 + 472) = 0;
    *(void *)(v25 + 480) = 0;
    if (!v26) {
      goto LABEL_67;
    }
  }
  else
  {
    if (!v18[63]) {
      goto LABEL_67;
    }
    (*(void (**)(vImage_Buffer *__return_ptr))(*v18 + 456))(&src);
    uint64_t v27 = src.data;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (!v27)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 608))(&src);
      uint64_t v28 = *(void *)a2;
      uint64_t v47 = src.data;
      uint64_t v48 = (std::__shared_weak_count *)src.height;
      if (src.height) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v28 + 400))(v28, &v47);
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
    }
    uint64_t v29 = *(void *)a2;
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v29 + 576))(v29, &v45, &v43);
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    uint64_t v30 = *(void *)a2;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v30 + 560))(v30, &v41, &v39);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    uint64_t v31 = *(void *)a2;
    uint64_t v37 = 0;
    BOOL v38 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v31 + 592))(v31, &v37, &v35);
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    BOOL v26 = v38;
    if (!v38) {
      goto LABEL_67;
    }
  }
  nitro::nitro_function::nitro_function(v26);
LABEL_67:
  (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 456))(&src);
  char v32 = src.data;
  if (src.height) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
  }
  if (v32)
  {
    uint64_t v33 = *(void **)a2;
    uint64_t v34 = (void *)v33[20];
    v33 += 20;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v34);
    *(v33 - 1) = v33;
    *uint64_t v33 = 0;
    v33[1] = 0;
  }
}

void sub_1926CBAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 72);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926CBB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (!a12) {
    JUMPOUT(0x1926CBB28);
  }
  JUMPOUT(0x1926CBB24);
}

void sub_1926CBB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (!a16) {
    JUMPOUT(0x1926CBB28);
  }
  JUMPOUT(0x1926CBB24);
}

void sub_1926CBB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (!a20) {
    JUMPOUT(0x1926CBB28);
  }
  JUMPOUT(0x1926CBB24);
}

void sub_1926CBB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v27 = *(std::__shared_weak_count **)(v26 - 72);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (!a26) {
    JUMPOUT(0x1926CBB28);
  }
  JUMPOUT(0x1926CBB24);
}

void Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      int v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        int v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    uint64_t v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      vImagePixelCount v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        uint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          uint64_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v31 = (void **)&v21;
          char v32 = 0;
          uint64_t v21 = (uint64_t *)operator new(0x48uLL);
          unint64_t v22 = v21;
          uint64_t v23 = v21 + 9;
          unint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          uint64_t v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1926CBEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___Z15dequantize_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERNS2_6vectorIiNS2_9allocatorIiEEEERKNS2_13unordered_setINS2_12basic_stringIcNS2_11char_traitsIcEENS7_IcEEEENS2_4hashISG_EENS2_8equal_toISG_EENS7_ISG_EEEE_block_invoke(uint64_t a1, int *a2)
{
  uint64_t v2 = *(int ***)(a1 + 32);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return;
  }
  char v7 = 0;
  do
  {
    BOOL v8 = *(uint64_t (****)(void))(*(void *)(*(void *)a2 + 8) + 8);
    int v9 = (**v8)(v8);
    int v10 = *v3++;
    v7 |= v9 == v10;
  }
  while (v3 != v4);
  if ((v7 & 1) == 0
    || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a1 + 56), *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[14]) + 16))
  {
    return;
  }
  (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 552))(&src);
  data = src.data;
  if (src.height) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
  }
  if (data)
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 456))(&src);
    uint64_t v12 = src.data;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (!v12)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 472))(&v57);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 552))(&v55);
      uint64_t v13 = 0;
      int v14 = *(void **)(v57 + 24);
      vImagePixelCount v15 = *(int *)(v57 + 8);
      do
      {
        v15 *= *(int *)(v57 + 12 + v13);
        v13 += 4;
      }
      while (v13 != 12);
      src.data = *(void **)(v55 + 24);
      src.height = 1;
      src.width = v15;
      src.rowBytes = 2 * v15;
      dest.data = v14;
      dest.height = 1;
      dest.width = v15;
      dest.rowBytes = 4 * v15;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      uint64_t v16 = *(void *)a2;
      uint64_t v53 = v57;
      unint64_t v54 = v58;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 400))(v16, &v53);
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      if (v58) {
        nitro::nitro_function::nitro_function(v58);
      }
    }
    uint64_t v17 = *(void *)a2;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    src.data = 0;
    src.height = 0;
    (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(void *)v17 + 544))(v17, &v51, &src);
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
  }
  uint64_t v18 = *(void **)a2;
  uint64_t v19 = *(void **)(*(void *)a2 + 472);
  if (v19 && *v19 && (v19[4] || v19[6] || v19[8] || v19[10]))
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(*v18 + 456))(&src);
    int v20 = src.data;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (!v20)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 472))(&src);
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(*(Espresso::quantized_weights_helper **)(*(void *)a2 + 472), (uint64_t *)&dest);
      unint64_t v22 = dest.data;
      height = (std::__shared_weak_count *)dest.height;
      uint64_t v23 = (std::__shared_weak_count *)src.height;
      src.data = dest.data;
      src.height = dest.height;
      if (v23)
      {
        nitro::nitro_function::nitro_function(v23);
        unint64_t v22 = src.data;
        height = (std::__shared_weak_count *)src.height;
      }
      uint64_t v24 = *(void *)a2;
      unint64_t v49 = v22;
      unint64_t v50 = height;
      if (height) {
        atomic_fetch_add_explicit(&height->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v24 + 400))(v24, &v49);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
    }
    uint64_t v25 = *(void *)a2;
    uint64_t v26 = *(std::__shared_weak_count **)(*(void *)a2 + 480);
    *(void *)(v25 + 472) = 0;
    *(void *)(v25 + 480) = 0;
    if (!v26) {
      goto LABEL_67;
    }
  }
  else
  {
    if (!v18[63]) {
      goto LABEL_67;
    }
    (*(void (**)(vImage_Buffer *__return_ptr))(*v18 + 456))(&src);
    uint64_t v27 = src.data;
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (!v27)
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 608))(&src);
      uint64_t v28 = *(void *)a2;
      uint64_t v47 = src.data;
      uint64_t v48 = (std::__shared_weak_count *)src.height;
      if (src.height) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v28 + 400))(v28, &v47);
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
    }
    uint64_t v29 = *(void *)a2;
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v29 + 576))(v29, &v45, &v43);
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    uint64_t v30 = *(void *)a2;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v30 + 560))(v30, &v41, &v39);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    uint64_t v31 = *(void *)a2;
    uint64_t v37 = 0;
    BOOL v38 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v31 + 592))(v31, &v37, &v35);
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    uint64_t v26 = v38;
    if (!v38) {
      goto LABEL_67;
    }
  }
  nitro::nitro_function::nitro_function(v26);
LABEL_67:
  (*(void (**)(vImage_Buffer *__return_ptr))(**(void **)a2 + 456))(&src);
  char v32 = src.data;
  if (src.height) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
  }
  if (v32)
  {
    uint64_t v33 = *(void **)a2;
    uint64_t v34 = (void *)v33[20];
    v33 += 20;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v34);
    *(v33 - 1) = v33;
    *uint64_t v33 = 0;
    v33[1] = 0;
  }
}

void sub_1926CC608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 72);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926CC678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (!a12) {
    JUMPOUT(0x1926CC670);
  }
  JUMPOUT(0x1926CC66CLL);
}

void sub_1926CC694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (!a16) {
    JUMPOUT(0x1926CC670);
  }
  JUMPOUT(0x1926CC66CLL);
}

void sub_1926CC6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (!a20) {
    JUMPOUT(0x1926CC670);
  }
  JUMPOUT(0x1926CC66CLL);
}

void sub_1926CC6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v27 = *(std::__shared_weak_count **)(v26 - 72);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (!a26) {
    JUMPOUT(0x1926CC670);
  }
  JUMPOUT(0x1926CC66CLL);
}

void ___ZN8Espresso20fuse_transpose_chainENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2);
  uint64_t v4 = (int *)(*(uint64_t (**)(void))(*(void *)a2[2] + 320))();
  long long v30 = *(_OWORD *)v3;
  int v31 = *(_DWORD *)(v3 + 16);
  *(_DWORD *)uint64_t v3 = *((_DWORD *)&v30 + *v4);
  *(_DWORD *)(v3 + 4) = *((_DWORD *)&v30 + v4[1]);
  *(_DWORD *)(v3 + 8) = *((_DWORD *)&v30 + v4[2]);
  *(_DWORD *)(v3 + 12) = *((_DWORD *)&v30 + v4[3]);
  *(_DWORD *)(v3 + 16) = *((_DWORD *)&v30 + v4[4]);
  uint64_t v5 = *(void *)(a2[15] + 32);
  long long v6 = *(char **)(*(void *)(v5 + 16 * *((int *)a2 + 28)) + 64);
  uint64_t v7 = *(void *)(*(void *)(v5 + 16 * *((int *)a2 + 29)) + 64);
  BOOL v8 = operator new(8uLL);
  *BOOL v8 = v7;
  v29[1] = (uint64_t)(v8 + 1);
  v29[2] = (uint64_t)(v8 + 1);
  v29[0] = (uint64_t)v8;
  Espresso::merge_kernel_attributes(v6, v29);
  operator delete(v8);
  uint64_t v9 = a2[15] + 96;
  unint64_t v10 = *((int *)a2 + 29);
  v29[0] = v10;
  uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v29);
  uint64_t v12 = a2[15] + 96;
  unint64_t v13 = *((int *)a2 + 28);
  unint64_t v28 = v13;
  int v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v13, &v28);
  if (v14 != v11) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v14 + 3), (std::string *)v11[3], (std::string *)v11[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[4] - v11[3]) >> 3));
  }
  vImagePixelCount v15 = (char *)a2[9];
  unint64_t v16 = a2[10];
  if ((unint64_t)v15 >= v16)
  {
    uint64_t v18 = (char *)a2[8];
    uint64_t v19 = (v15 - v18) >> 2;
    if ((unint64_t)(v19 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = v16 - (void)v18;
    unint64_t v21 = (uint64_t)(v16 - (void)v18) >> 1;
    if (v21 <= v19 + 1) {
      unint64_t v21 = v19 + 1;
    }
    BOOL v22 = v20 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
      uint64_t v18 = (char *)a2[8];
      vImagePixelCount v15 = (char *)a2[9];
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = (_DWORD *)(v23 + 4 * v19);
    unint64_t v26 = v23 + 4 * v24;
    _DWORD *v25 = *((_DWORD *)a2 + 29);
    uint64_t v17 = v25 + 1;
    while (v15 != v18)
    {
      int v27 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *--uint64_t v25 = v27;
    }
    a2[8] = v25;
    a2[9] = v17;
    a2[10] = v26;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *(_DWORD *)vImagePixelCount v15 = *((_DWORD *)a2 + 29);
    uint64_t v17 = v15 + 4;
  }
  a2[9] = v17;
}

void sub_1926CC974(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388998;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::blob<unsigned short,5>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C150;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned short,5>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C150;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,5>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,5>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,5>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso26optimize_network_with_ruleINS_23rule_convolution_groupsEEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE387DC8;
  long long v6 = v4 + 3;
  uint64_t v7 = *(void ***)a1;
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v23 = v7;
  uint64_t v24 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::rule_convolution_groups::rule_convolution_groups(v4 + 3, (uint64_t)&v23);
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    Espresso::rule_convolution_groups::rule_convolution_groups(v4 + 3, (uint64_t)&v23);
  }
  uint64_t v9 = v21;
  if ((unint64_t)v21 >= v22)
  {
    uint64_t v11 = ((uint64_t)v21 - v20) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v22 - v20;
    if ((uint64_t)(v22 - v20) >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    int v27 = &v22;
    vImagePixelCount v15 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v14);
    *(void *)&long long v16 = v6;
    *((void *)&v16 + 1) = v5;
    uint64_t v17 = &v15[2 * v11];
    unint64_t v23 = v15;
    uint64_t v24 = (std::__shared_weak_count *)v17;
    unint64_t v26 = &v15[2 * v18];
    *(_OWORD *)uint64_t v17 = v16;
    uint64_t v25 = v17 + 2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v20, &v23);
    unint64_t v10 = v21;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    *unint64_t v21 = v6;
    v9[1] = v5;
    unint64_t v10 = v9 + 2;
  }
  unint64_t v19 = v22;
  *a2 = v20;
  a2[1] = v10;
  a2[2] = v19;
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v20 = 0;
  unint64_t v23 = (void **)&v20;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v23);
}

void sub_1926CCD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  nitro::nitro_function::nitro_function(v10);
  *(void *)(v11 - 40) = &a10;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_convolution_groups>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

int *Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(int *a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a1 + 6) = 0u;
  long long v6 = (std::string *)(a1 + 6);
  *(_OWORD *)(a1 + 18) = 0u;
  uint64_t v7 = (uint64_t)(a1 + 18);
  uint64_t v8 = (uint64_t)(a1 + 24);
  *(_OWORD *)(a1 + 30) = 0u;
  uint64_t v9 = (void **)(a1 + 30);
  *((void *)a1 + 17) = 0;
  *(_OWORD *)(a1 + 26) = 0u;
  *(_OWORD *)(a1 + 22) = 0u;
  *(_OWORD *)(a1 + 14) = 0u;
  *(_OWORD *)(a1 + 10) = 0u;
  *(_OWORD *)(a1 + 2) = 0u;
  *a1 = a3;
  uint64_t v10 = *(void *)(*(void *)(*(void *)a2 + 32) + 16 * a3);
  uint64_t v11 = *(void *)(v10 + 64);
  if (v11 && (uint64_t v12 = *(void *)(v10 + 72)) != 0)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 2);
    *((void *)a1 + 1) = v11;
    *((void *)a1 + 2) = v12;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  else
  {
    *((void *)a1 + 2) = 0;
    *((void *)a1 + 1) = v11;
  }
  std::string::operator=(v6, (const std::string *)(*(void *)(*(void *)(*(void *)a2 + 32) + 16 * *a1) + 16));
  uint64_t v14 = *(void *)a2 + 96;
  unint64_t v15 = *a1;
  v22.__r_.__value_.__r.__words[0] = v15;
  long long v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, &v22);
  if ((void *)v7 != v16 + 3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7, (std::string *)v16[3], (std::string *)v16[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[4] - v16[3]) >> 3));
  }
  uint64_t v17 = *(void *)a2 + 56;
  unint64_t v18 = *a1;
  v22.__r_.__value_.__r.__words[0] = v18;
  unint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, &v22);
  if ((void *)v8 != v19 + 3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v8, (std::string *)v19[3], (std::string *)v19[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[4] - v19[3]) >> 3));
  }
  std::string::operator=((std::string *)a1 + 2, (const std::string *)(*(void *)(*(void *)(*(void *)a2 + 32) + 16 * *a1) + 40));
  *a1 = a3;
  uint64_t v20 = *(void *)(*(void *)(*(void *)a2 + 32) + 16 * a3);
  if (*(char *)(v20 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v20 + 200), *(void *)(v20 + 208));
  }
  else {
    std::string v22 = *(std::string *)(v20 + 200);
  }
  if (*((char *)a1 + 143) < 0) {
    operator delete(*v9);
  }
  *(std::string *)uint64_t v9 = v22;
  return a1;
}

void sub_1926CCFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v9[143] < 0) {
    operator delete(*v12);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (v9[71] < 0) {
    operator delete(*v11);
  }
  if (v9[47] < 0) {
    operator delete(*v10);
  }
  if (*v13) {
    nitro::nitro_function::nitro_function(*v13);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2)) {
        return v7;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v11 = (char *)operator new(0xC8uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    uint64_t v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v11 + 6) = *(void *)(a3 + 16);
    }
    *((_DWORD *)v11 + 14) = 0;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 11) = 0u;
    *((void *)v11 + 24) = 0;
    char v17 = 1;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v7;
    *uint64_t v8 = (uint64_t *)v11;
    uint64_t v13 = (uint64_t *)v11;
    uint64_t v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      uint64_t v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1926CD1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::graph_node_t<Espresso::base_kernel>::~graph_node_t(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  uint64_t v4 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((unsigned char *)v9 + 32) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<std::string const,Espresso::graph_node_t<Espresso::base_kernel>>::~pair((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::pair<std::string const,Espresso::graph_node_t<Espresso::base_kernel>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v4 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void rule_input_underflow::transform(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    long long v6 = (std::__shared_weak_count *)a3[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v6 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v57, v5, &__p);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  uint64_t v7 = v57;
  uint64_t v9 = *(void *)(v57 + 8);
  int v8 = *(std::__shared_weak_count **)(v57 + 16);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 456))(&v55, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 472))(&v53, v9);
  uint64_t v10 = 0;
  if ((float)(0.0039062 / *(float *)(a1 + 40)) <= 64.0) {
    float v11 = 0.0039062 / *(float *)(a1 + 40);
  }
  else {
    float v11 = 64.0;
  }
  float __B = v11;
  vDSP_Length v12 = *(int *)(v55 + 8);
  do
  {
    v12 *= *(int *)(v55 + 12 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  vDSP_vsmul(*(const float **)(v55 + 24), 1, &__B, *(float **)(v53 + 24), 1, v12);
  uint64_t v50 = v53;
  uint64_t v51 = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 400))(v9, &v50);
  float v13 = 1.0 / v11;
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  uint64_t v45 = 0x358637BD00000000;
  int v46 = 0;
  char v47 = 0;
  int v49 = 0;
  int v48 = 0;
  std::string __p = (void *)3;
  float v44 = v13;
  std::string::basic_string[abi:ne180100]<0>(v41, "__fix__underflow___");
  BOOL v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, *(void *)(v7 + 96), *(void *)(v7 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 104) - *(void *)(v7 + 96)) >> 3));
  if ((v42 & 0x80u) == 0) {
    size_t v14 = v42;
  }
  else {
    size_t v14 = (size_t)v41[1];
  }
  unint64_t v15 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v14 + 2);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if ((v42 & 0x80u) == 0) {
      long long v16 = v41;
    }
    else {
      long long v16 = (void **)v41[0];
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "__");
  int v17 = *(char *)(v7 + 47);
  if (v17 >= 0) {
    unint64_t v18 = (const std::string::value_type *)(v7 + 24);
  }
  else {
    unint64_t v18 = *(const std::string::value_type **)(v7 + 24);
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(v7 + 47);
  }
  else {
    std::string::size_type v19 = *(void *)(v7 + 32);
  }
  uint64_t v20 = std::string::append(&v35, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t v37 = v20->__r_.__value_.__r.__words[2];
  long long v36 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v37 >= 0) {
    std::string v22 = (const std::string::value_type *)&v36;
  }
  else {
    std::string v22 = (const std::string::value_type *)v36;
  }
  if (v37 >= 0) {
    std::string::size_type v23 = HIBYTE(v37);
  }
  else {
    std::string::size_type v23 = *((void *)&v36 + 1);
  }
  std::string::append(v38, v22, v23);
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v36, "elementwise");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v7 + 24), (const void **)v41, (uint64_t)&v35);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, *(void *)(v7 + 96), *(void *)(v7 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 104) - *(void *)(v7 + 96)) >> 3));
  memset(v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v29, (uint64_t)v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v38) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v33, v24, (uint64_t)&v36, (uint64_t)&v35, (uint64_t)&__p, v30, v31, v29);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  int64_t v59 = (void **)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v59);
  int64_t v59 = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v59);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  uint64_t v25 = (uint64_t)*a2;
  v28[0] = v9;
  v28[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v38) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, *(void *)(v7 + 72), *(void *)(v7 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 80) - *(void *)(v7 + 72)) >> 3));
  Espresso::sequential_builder::add_kernel(v25, v28, v7 + 48, v7 + 24, v27, v26);
  *(void *)&long long v36 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  *(void *)&long long v36 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  *(void *)&long long v36 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if ((char)v42 < 0) {
    operator delete(v41[0]);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1926CD908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  a32 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a46 < 0) {
    operator delete(__p);
  }
  uint64_t v50 = *(std::__shared_weak_count **)(v48 - 144);
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  uint64_t v51 = *(std::__shared_weak_count **)(v48 - 128);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  uint64_t v52 = *(std::__shared_weak_count **)(v48 - 112);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  _Unwind_Resume(a1);
}

void sub_1926CDA64()
{
}

void sub_1926CDA6C()
{
  if (!v0) {
    JUMPOUT(0x1926CDA44);
  }
  JUMPOUT(0x1926CDA3CLL);
}

void sub_1926CDA78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1926CDA50);
}

void sub_1926CDA90()
{
}

void Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 40, a3);
  if ((void *)(a2 + 48) != v5 {
    && (long long v6 = v5, (v7 = (const void *)v5[8]) != 0)
  }
  {
    std::string::size_type v9 = (std::string::size_type)v8;
    uint64_t v10 = (std::__shared_weak_count *)v6[9];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v11 = (std::string *)operator new(0xA8uLL);
    vDSP_Length v12 = v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE381998;
    LODWORD(v11[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v11[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v11[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v11[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v11[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v11[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[6].__r_.__value_.__l.__data_ = 0u;
    v11[6].__r_.__value_.__r.__words[2] = 0;
    *a1 = v11 + 1;
    a1[1] = v11;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v11[1].__r_.__value_.__l.__size_ = v9;
    v11[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
    std::string::operator=(v11 + 2, (const std::string *)(v6 + 10));
    if (v12 != (std::string *)(v6 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v12[4], (std::string *)v6[16], (std::string *)v6[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[17] - v6[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v12[5], (std::string *)v6[19], (std::string *)v6[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[20] - v6[19]) >> 3));
    }
    std::string::operator=(v12 + 3, (const std::string *)(v6 + 13));
    LODWORD(v12[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 14);
    std::string::operator=(v12 + 6, (const std::string *)(v6 + 22));
    if (v10)
    {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1926CDC60(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_convolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381998;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void rule_input_underflow::~rule_input_underflow(rule_input_underflow *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_input_underflow>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380540;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_input_underflow>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso13auto_optimizeENSt3__110shared_ptrINS_3netEEENS_21auto_optimize_optionsE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(Espresso **)a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 24);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!Espresso::is_kernel_generating_output(*(Espresso **)a2, (const Espresso::base_kernel *)a2))
  {
    uint64_t v7 = (*(uint64_t (**)(Espresso *))(*(void *)v4 + 320))(v4);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 384))(v6);
    uint64_t v9 = v8;
    uint64_t v11 = v8 + 36;
    int v10 = *(unsigned __int16 *)(v8 + 36);
    if (*(_WORD *)(v8 + 36)) {
      BOOL v12 = (v10 & 0xFFFE) == 2;
    }
    else {
      BOOL v12 = 1;
    }
    int v14 = v12 && (*(unsigned __int16 *)(v8 + 38) | *(unsigned __int16 *)(v7 + 2)) == 0;
    if (*(_DWORD *)(v8 + 28)) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v10 == 0;
    }
    if (!v15)
    {
      if (!v14) {
        goto LABEL_43;
      }
      goto LABEL_25;
    }
    if (*(unsigned __int16 *)(v8 + 46) | *(unsigned __int16 *)(v8 + 44) | *(unsigned __int16 *)(v8 + 48) | *(unsigned __int16 *)(v8 + 50)) {
      LOBYTE(v14) = 0;
    }
    if (v14)
    {
LABEL_25:
      uint64_t v16 = *(void *)(*(void *)(a2 + 120) + 32);
      int v17 = *(char **)(*(void *)(v16 + 16 * *(int *)(a2 + 116)) + 64);
      uint64_t v18 = *(void *)(*(void *)(v16 + 16 * *(int *)(a2 + 112)) + 64);
      std::string::size_type v19 = operator new(8uLL);
      *std::string::size_type v19 = v18;
      v41[1] = (uint64_t)(v19 + 1);
      id v41[2] = (uint64_t)(v19 + 1);
      v41[0] = (uint64_t)v19;
      Espresso::merge_kernel_attributes(v17, v41);
      operator delete(v19);
      uint64_t v20 = *(void *)(a2 + 120) + 56;
      unint64_t v21 = *(int *)(a2 + 112);
      v41[0] = v21;
      std::string v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, v21, v41);
      uint64_t v23 = *(void *)(a2 + 120) + 56;
      unint64_t v24 = *(int *)(a2 + 116);
      unint64_t v40 = v24;
      uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23, v24, &v40);
      if (v25 != v22) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v25 + 3), (std::string *)v22[3], (std::string *)v22[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[4] - v22[3]) >> 3));
      }
      unint64_t v26 = *(char **)(a2 + 72);
      unint64_t v27 = *(void *)(a2 + 80);
      if ((unint64_t)v26 >= v27)
      {
        uint64_t v29 = *(char **)(a2 + 64);
        uint64_t v30 = (v26 - v29) >> 2;
        if ((unint64_t)(v30 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v31 = v27 - (void)v29;
        unint64_t v32 = (uint64_t)(v27 - (void)v29) >> 1;
        if (v32 <= v30 + 1) {
          unint64_t v32 = v30 + 1;
        }
        BOOL v33 = v31 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v33) {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v34);
          uint64_t v29 = *(char **)(a2 + 64);
          unint64_t v26 = *(char **)(a2 + 72);
        }
        else
        {
          uint64_t v35 = 0;
        }
        long long v36 = (_DWORD *)(v34 + 4 * v30);
        unint64_t v37 = v34 + 4 * v35;
        _DWORD *v36 = *(_DWORD *)(a2 + 112);
        unint64_t v28 = v36 + 1;
        while (v26 != v29)
        {
          int v38 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *--long long v36 = v38;
        }
        *(void *)(a2 + 64) = v36;
        *(void *)(a2 + 72) = v28;
        *(void *)(a2 + 80) = v37;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v26 = *(_DWORD *)(a2 + 112);
        unint64_t v28 = v26 + 4;
      }
      *(void *)(a2 + 72) = v28;
      long long v39 = *(_OWORD *)v7;
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(v7 + 16);
      *(_OWORD *)uint64_t v11 = v39;
      *(_DWORD *)(v9 + 28) = 0;
    }
  }
LABEL_43:
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1926CE160(_Unwind_Exception *a1)
{
  operator delete(v3);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso13auto_optimizeENSt3__110shared_ptrINS_3netEEENS_21auto_optimize_optionsE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(Espresso **)a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(const void **)(a2 + 16);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 24);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (Espresso::is_kernel_generating_output(*(Espresso **)a2, (const Espresso::base_kernel *)a2)) {
    goto LABEL_26;
  }
  if (!v6
  {
    uint64_t v7 = (*(uint64_t (**)(Espresso *))(*(void *)v4 + 320))(v4);
    uint64_t v8 = (_WORD *)(*(uint64_t (**)(const void *))(*(void *)v6 + 384))(v6);
    uint64_t v9 = v8 + 36;
    if (v8[36]) {
      BOOL v10 = (v8[36] & 0xFFFE) == 2;
    }
    else {
      BOOL v10 = 1;
    }
    int v12 = v10 && ((unsigned __int16)v8[37] | *(unsigned __int16 *)(v7 + 2)) == 0;
    if (v8[36])
    {
      if (!v12) {
        goto LABEL_26;
      }
LABEL_25:
      Espresso::fuse_vertical_state<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>::remove_first_layer(a2);
      long long v13 = *(_OWORD *)v7;
      *((_DWORD *)v9 + 4) = *(_DWORD *)(v7 + 16);
      *(_OWORD *)uint64_t v9 = v13;
      goto LABEL_26;
    }
    if ((unsigned __int16)v8[41] | (unsigned __int16)v8[40] | (unsigned __int16)v8[42] | (unsigned __int16)v8[43]) {
      LOBYTE(v12) = 0;
    }
    if (v12) {
      goto LABEL_25;
    }
LABEL_26:
    if (!v5) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (!v5) {
    goto LABEL_28;
  }
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function(v5);
LABEL_27:
  nitro::nitro_function::nitro_function(v5);
LABEL_28:
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1926CE37C(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fuse_vertical_state<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>::remove_first_layer(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 120) + 32);
  uint64_t v3 = *(char **)(*(void *)(v2 + 16 * *(int *)(a1 + 116)) + 64);
  uint64_t v4 = *(void *)(*(void *)(v2 + 16 * *(int *)(a1 + 112)) + 64);
  uint64_t v5 = operator new(8uLL);
  void *v5 = v4;
  v26[1] = (uint64_t)(v5 + 1);
  v26[2] = (uint64_t)(v5 + 1);
  v26[0] = (uint64_t)v5;
  Espresso::merge_kernel_attributes(v3, v26);
  operator delete(v5);
  uint64_t v6 = *(void *)(a1 + 120) + 56;
  unint64_t v7 = *(int *)(a1 + 112);
  v26[0] = v7;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v26);
  uint64_t v9 = *(void *)(a1 + 120) + 56;
  unint64_t v10 = *(int *)(a1 + 116);
  unint64_t v25 = v10;
  uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v25);
  if (v11 != v8) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v11 + 3), (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  }
  int v12 = *(char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if ((unint64_t)v12 >= v13)
  {
    BOOL v15 = *(char **)(a1 + 64);
    uint64_t v16 = (v12 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = v13 - (void)v15;
    unint64_t v18 = (uint64_t)(v13 - (void)v15) >> 1;
    if (v18 <= v16 + 1) {
      unint64_t v18 = v16 + 1;
    }
    BOOL v19 = v17 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v19) {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
      BOOL v15 = *(char **)(a1 + 64);
      int v12 = *(char **)(a1 + 72);
    }
    else
    {
      uint64_t v21 = 0;
    }
    std::string v22 = (_DWORD *)(v20 + 4 * v16);
    unint64_t v23 = v20 + 4 * v21;
    *std::string v22 = *(_DWORD *)(a1 + 112);
    int v14 = v22 + 1;
    while (v12 != v15)
    {
      int v24 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--std::string v22 = v24;
    }
    *(void *)(a1 + 64) = v22;
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v23;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(_DWORD *)int v12 = *(_DWORD *)(a1 + 112);
    int v14 = v12 + 4;
  }
  *(void *)(a1 + 72) = v14;
}

void sub_1926CE544(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso26optimize_network_with_ruleI20rule_fuse_scale_convEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE380508;
  uint64_t v6 = v4 + 3;
  unint64_t v7 = *(void **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
    nitro::nitro_function::nitro_function(v8);
    *uint64_t v6 = &unk_1EE3218A8;
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, 0);
    *uint64_t v6 = &unk_1EE3218A8;
  }
  uint64_t v9 = v19;
  if (v19 >= (unint64_t)v20)
  {
    unint64_t v12 = (v19 >> 4) + 1;
    if (v12 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v20 >> 3 > v12) {
      unint64_t v12 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v21[4] = (void **)&v20;
    int v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    *(void *)&long long v15 = v6;
    *((void *)&v15 + 1) = v5;
    uint64_t v16 = &v14[2 * (v19 >> 4)];
    v21[0] = v14;
    v21[1] = v16;
    void v21[3] = &v14[2 * v17];
    *(_OWORD *)uint64_t v16 = v15;
    uint64_t v21[2] = v16 + 2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v18, v21);
    uint64_t v11 = v19;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v21);
    uint64_t v19 = v11;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)uint64_t v19 = v6;
    *(void *)(v9 + 8) = v5;
    uint64_t v11 = v9 + 16;
    uint64_t v19 = v9 + 16;
  }
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  v21[0] = (void **)&v18;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](v21);
}

void sub_1926CE708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  nitro::nitro_function::nitro_function(v10);
  *(void *)(v11 - 40) = &a10;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

void rule_fuse_scale_conv::match(void *a1, int a2, uint64_t *a3)
{
  int v42 = a2;
  uint64_t v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  unint64_t v7 = (std::__shared_weak_count *)a1[4];
  v36[0] = a1[3];
  v36[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>(&v40, v6, &__p, v36, a2);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v39 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = v40;
  if (!v40
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v40 + 384))(v40) + 24)
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 28)
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 60) != -1
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 112))
  {
    goto LABEL_12;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 456))(&__p, v8);
  uint64_t v10 = __p;
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (!v10
    || (uint64_t v11 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v42), (char *)v11[6] - (char *)v11[5] != 4))
  {
LABEL_12:
    uint64_t v9 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  int v12 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v42)[5];
  int v35 = v12;
  uint64_t v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  int v14 = (std::__shared_weak_count *)a1[4];
  v32[0] = a1[3];
  v32[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(&v33, v13, &__p, v32, v12, &__block_literal_global_114_473);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v39 < 0) {
    operator delete(__p);
  }
  if (!v33
    || (long long v15 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v12, &v35), (char *)v15[6] - (char *)v15[5] != 8)|| *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v12, &v35)[5] != a2)
  {
    unint64_t v28 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v28) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  int v16 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v12, &v35)[5]+ 1);
  uint64_t v17 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "const");
  uint64_t v18 = a1[3];
  uint64_t v19 = (std::__shared_weak_count *)a1[4];
  v29[0] = v18;
  v29[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>(&v30, v17, &__p, v29, v16);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v39 < 0) {
    operator delete(__p);
  }
  if (!v30) {
    goto LABEL_49;
  }
  uint64_t v20 = (uint64_t *)(v30 + 344);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__p, (uint64_t *)(v30 + 344));
  uint64_t v21 = __p;
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (!v21) {
    goto LABEL_49;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__p, v20);
  uint64_t v22 = 0;
  uint64_t v23 = *((int *)__p + 2);
  do
  {
    v23 *= *(int *)((char *)__p + v22 + 12);
    v22 += 4;
  }
  while (v22 != 12);
  uint64_t v24 = *(int *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 40);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v23 != v24) {
    goto LABEL_49;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__p, v20);
  int v25 = *((_DWORD *)__p + 4);
  int v26 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 40);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v25 != v26 || *(void *)(*a3 + 56) != 3)
  {
LABEL_49:
    unint64_t v27 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
  }
  unint64_t v28 = v31;
  if (v31) {
LABEL_54:
  }
    nitro::nitro_function::nitro_function(v28);
LABEL_55:
  uint64_t v9 = v34;
  if (v34) {
LABEL_13:
  }
    nitro::nitro_function::nitro_function(v9);
LABEL_14:
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
}

void sub_1926CEBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  unint64_t v28 = *(std::__shared_weak_count **)(v26 - 80);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(void *a1, uint64_t a2, void *a3, void *a4, int a5, void *a6)
{
  int v39 = a5;
  uint64_t v11 = a6;
  uint64_t v12 = *(void *)(*(void *)(*a4 + 32) + 16 * a5);
  uint64_t v13 = *(const void **)(v12 + 64);
  if (v13
  {
    long long v15 = v14;
    int v16 = *(std::__shared_weak_count **)(v12 + 72);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v11 && (v11[2](v11, v14) & 1) == 0)
    {
      *a1 = 0;
      a1[1] = 0;
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
    }
    else
    {
      uint64_t v17 = *a4;
      uint64_t v18 = (std::__shared_weak_count *)a4[1];
      v26[0] = v17;
      v26[1] = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v16;
      Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(&v27, (uint64_t)v26, a5);
      uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
      *((_DWORD *)v19 + 14) = v27;
      long long v20 = v28;
      long long v28 = 0uLL;
      uint64_t v21 = (std::__shared_weak_count *)v19[9];
      *((_OWORD *)v19 + 4) = v20;
      if (v21) {
        nitro::nitro_function::nitro_function(v21);
      }
      uint64_t v22 = (void **)(v19 + 10);
      if (*((char *)v19 + 103) < 0) {
        operator delete(*v22);
      }
      v19[12] = v30;
      *(_OWORD *)uint64_t v22 = v29;
      HIBYTE(v30) = 0;
      LOBYTE(v29) = 0;
      uint64_t v23 = (void **)(v19 + 13);
      if (*((char *)v19 + 127) < 0) {
        operator delete(*v23);
      }
      *(_OWORD *)uint64_t v23 = __p;
      v19[15] = v32;
      HIBYTE(v32) = 0;
      LOBYTE(__p) = 0;
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v19 + 16));
      *((_OWORD *)v19 + 8) = v33;
      v19[18] = v34;
      unint64_t v34 = 0;
      long long v33 = 0uLL;
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v19 + 19));
      *(_OWORD *)(v19 + 19) = v35;
      v19[21] = v36;
      long long v36 = 0;
      long long v35 = 0uLL;
      uint64_t v24 = (void **)(v19 + 22);
      if (*((char *)v19 + 199) < 0) {
        operator delete(*v24);
      }
      *(_OWORD *)uint64_t v24 = v37;
      v19[24] = v38;
      HIBYTE(v38) = 0;
      LOBYTE(v37) = 0;
      v40[0] = (void **)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
      v40[0] = (void **)&v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete((void *)v29);
      }
      if (*((void *)&v28 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v28 + 1));
      }
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      if (a5 == -1) {
        *(_DWORD *)(a2 + 8) = -1;
      }
      *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), a5, &v39)+ 32) = 1;
      *a1 = v15;
      a1[1] = v25;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1926CEF98(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  _Unwind_Resume(a1);
}

unsigned char *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v35 = a5;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*(void *)(*a4 + 32) + 16 * a5);
  BOOL result = *(unsigned char **)(v11 + 64);
  if (result
  {
    uint64_t v13 = result;
    uint64_t v14 = *(void *)(v11 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *a4;
    }
    long long v15 = (std::__shared_weak_count *)a4[1];
    v22[0] = v10;
    v22[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(&v23, (uint64_t)v22, a5);
    int v16 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    *((_DWORD *)v16 + 14) = v23;
    long long v17 = v24;
    long long v24 = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)v16[9];
    *((_OWORD *)v16 + 4) = v17;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v19 = (void **)(v16 + 10);
    if (*((char *)v16 + 103) < 0) {
      operator delete(*v19);
    }
    v16[12] = v26;
    *(_OWORD *)uint64_t v19 = v25;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    long long v20 = (void **)(v16 + 13);
    if (*((char *)v16 + 127) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)long long v20 = __p;
    v16[15] = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__p) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 16));
    *((_OWORD *)v16 + 8) = v29;
    v16[18] = v30;
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 19));
    *(_OWORD *)(v16 + 19) = v31;
    v16[21] = v32;
    unint64_t v32 = 0;
    long long v31 = 0uLL;
    uint64_t v21 = (void **)(v16 + 22);
    if (*((char *)v16 + 199) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)uint64_t v21 = v33;
    v16[24] = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    v36[0] = (void **)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    v36[0] = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (*((void *)&v24 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (a5 == -1) {
      *(_DWORD *)(a2 + 8) = -1;
    }
    BOOL result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), a5, &v35);
    result[32] = 1;
    *a1 = v13;
    a1[1] = v14;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1926CF274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL ___ZN20rule_fuse_scale_conv5matchEiRNSt3__110shared_ptrIN8Espresso30graph_optimization_rule_statusEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(a2) == 8
      || *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(a2) == 1;
}

void rule_fuse_scale_conv::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = (std::__shared_weak_count *)a3[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v66, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v68, v4, &v66);
  if (v67 < 0) {
    operator delete((void *)v66);
  }
  std::string::basic_string[abi:ne180100]<0>(&v66, "scale");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(&v64, v4, &v66);
  if (v67 < 0) {
    operator delete((void *)v66);
  }
  std::string::basic_string[abi:ne180100]<0>(&v66, "const");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(&v62, v4, &v66);
  if (v67 < 0) {
    operator delete((void *)v66);
  }
  uint64_t v6 = v68;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v68 + 8) + 456))(&v60);
  (*(void (**)(long long *__return_ptr))(**(void **)(v6 + 8) + 448))(&v59);
  if (!(void)v59)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(v6 + 8) + 488))(&v66);
    long long v7 = v66;
    long long v66 = 0uLL;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&v59 + 1);
    long long v59 = v7;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      if (*((void *)&v66 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v66 + 1));
      }
    }
    uint64_t v9 = *(int *)(v59 + 8);
    if (v9) {
      bzero(*(void **)(v59 + 16), 4 * v9);
    }
  }
  std::string::operator=((std::string *)(*a2 + 56), (const std::string *)(v6 + 120));
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v57, (int *)(v59 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v55, (uint64_t *)(*(void *)(v62 + 8) + 344));
  std::string::basic_string[abi:ne180100]<0>(&v66, "convolution");
  uint64_t v10 = *(const void **)(v6 + 8);
  if (v10
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(std::__shared_weak_count **)(v6 + 16);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MEMORY[0x192FF0F50](&v66, "deconvolution");
    v54[0] = v12;
    v54[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = v55;
    uint64_t v14 = v56;
    v53[0] = v55;
    v53[1] = v56;
    if (v56) {
      atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v16 = v61;
    v52[0] = v60;
    v52[1] = v61;
    if (v61) {
      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    scale_deconv_weights((uint64_t *)&__p, v54, (uint64_t)v53, (uint64_t)v52);
    uint64_t v18 = __p;
    long long v17 = v45;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    uint64_t v19 = 0;
    uint64_t v20 = v57;
    while (v19 < *(int *)((*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12) + 40))
    {
      *(float *)(*(void *)(v20 + 16) + 4 * v19) = *(float *)(*(void *)(v15 + 24) + 4 * v19)
                                                  * *(float *)(*(void *)(v59 + 16) + 4 * v19);
      ++v19;
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&__p, v60 + 8);
    uint64_t v18 = __p;
    long long v17 = v45;
    uint64_t v21 = *(unsigned int *)(v60 + 20);
    if ((int)v21 >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = (*(_DWORD *)(v60 + 12) * *(_DWORD *)(v60 + 8) * *(_DWORD *)(v60 + 16));
      long long v24 = (float *)*((void *)__p + 3);
      long long v25 = *(float **)(v60 + 24);
      uint64_t v26 = *(void *)(v55 + 24);
      uint64_t v27 = *(void *)(v59 + 16);
      uint64_t v28 = *(void *)(v57 + 16);
      uint64_t v29 = 4 * (int)v23;
      do
      {
        float v30 = *(float *)(v26 + 4 * v22);
        long long v31 = v25;
        unint64_t v32 = v24;
        uint64_t v33 = v23;
        if ((int)v23 >= 1)
        {
          do
          {
            float v34 = *v31++;
            *v32++ = v30 * v34;
            --v33;
          }
          while (v33);
        }
        *(float *)(v28 + 4 * v22) = v30 * *(float *)(v27 + 4 * v22);
        ++v22;
        long long v24 = (float *)((char *)v24 + v29);
        long long v25 = (float *)((char *)v25 + v29);
      }
      while (v22 != v21);
    }
  }
  uint64_t v35 = *(void *)(v6 + 8);
  uint64_t v50 = v18;
  uint64_t v51 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v35 + 400))(v35, &v50);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  uint64_t v36 = *(void *)(v6 + 8);
  long long v37 = v58;
  uint64_t v48 = v57;
  int v49 = v58;
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v36 + 392))(v36, &v48);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  uint64_t v38 = *a2;
  int v39 = *(std::__shared_weak_count **)(v6 + 16);
  v47[0] = *(void *)(v6 + 8);
  v47[1] = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v67 >= 0) {
    uint64_t v40 = (char *)&v66;
  }
  else {
    uint64_t v40 = (char *)v66;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v40);
  memset(v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v43, *(void *)(v6 + 96), *(void *)(v6 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 104) - *(void *)(v6 + 96)) >> 3));
  memset(v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v42, *(void *)(v64 + 72), *(void *)(v64 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v64 + 80) - *(void *)(v64 + 72)) >> 3));
  Espresso::sequential_builder::add_kernel(v38, v47, (uint64_t)&__p, v6 + 24, v43, v42);
  v70[0] = (void **)v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v70);
  v70[0] = (void **)v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v70);
  if (v46 < 0) {
    operator delete(__p);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  uint64_t v41 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(unsigned char **)(v41 + 56) = 0;
    *(void *)(v41 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(v41 + 56) = 0;
    *(unsigned char *)(v41 + 79) = 0;
  }
  if (v67 < 0) {
    operator delete((void *)v66);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (*((void *)&v59 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1926CF9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (a39) {
    nitro::nitro_function::nitro_function(a39);
  }
  int v42 = *(std::__shared_weak_count **)(v40 - 184);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  uint64_t v43 = *(std::__shared_weak_count **)(v40 - 168);
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  float v44 = *(std::__shared_weak_count **)(v40 - 152);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v40 - 112);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 40, a3);
  if ((void *)(a2 + 48) != v5 {
    && (uint64_t v6 = v5, (v7 = (const void *)v5[8]) != 0)
  }
  {
    std::string::size_type v9 = (std::string::size_type)v8;
    uint64_t v10 = (std::__shared_weak_count *)v6[9];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::string *)operator new(0xA8uLL);
    uint64_t v12 = v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE3819D0;
    LODWORD(v11[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v11[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v11[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v11[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v11[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v11[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[6].__r_.__value_.__l.__data_ = 0u;
    v11[6].__r_.__value_.__r.__words[2] = 0;
    *a1 = v11 + 1;
    a1[1] = v11;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v11[1].__r_.__value_.__l.__size_ = v9;
    v11[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
    std::string::operator=(v11 + 2, (const std::string *)(v6 + 10));
    if (v12 != (std::string *)(v6 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v12[4], (std::string *)v6[16], (std::string *)v6[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[17] - v6[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v12[5], (std::string *)v6[19], (std::string *)v6[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[20] - v6[19]) >> 3));
    }
    std::string::operator=(v12 + 3, (const std::string *)(v6 + 13));
    LODWORD(v12[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 14);
    std::string::operator=(v12 + 6, (const std::string *)(v6 + 22));
    if (v10)
    {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1926CFD70(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 40, a3);
  if ((void *)(a2 + 48) != v5 {
    && (uint64_t v6 = v5, (v7 = (const void *)v5[8]) != 0)
  }
  {
    std::string::size_type v9 = (std::string::size_type)v8;
    uint64_t v10 = (std::__shared_weak_count *)v6[9];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::string *)operator new(0xA8uLL);
    uint64_t v12 = v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE381A40;
    LODWORD(v11[1].__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v11[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v11[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v11[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v11[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v11[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v11[6].__r_.__value_.__l.__data_ = 0u;
    v11[6].__r_.__value_.__r.__words[2] = 0;
    *a1 = v11 + 1;
    a1[1] = v11;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v11[1].__r_.__value_.__l.__size_ = v9;
    v11[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
    std::string::operator=(v11 + 2, (const std::string *)(v6 + 10));
    if (v12 != (std::string *)(v6 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v12[4], (std::string *)v6[16], (std::string *)v6[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[17] - v6[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v12[5], (std::string *)v6[19], (std::string *)v6[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[20] - v6[19]) >> 3));
    }
    std::string::operator=(v12 + 3, (const std::string *)(v6 + 13));
    LODWORD(v12[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 14);
    std::string::operator=(v12 + 6, (const std::string *)(v6 + 22));
    if (v10)
    {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1926CFF60(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void scale_deconv_weights(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2) + 40);
  int v9 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2) + 116);
  if (v9 <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  int v11 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 44);
  int v12 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 48);
  int v13 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 52);
  int v14 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 116);
  if (v14 <= 1) {
    unsigned int v15 = 1;
  }
  else {
    unsigned int v15 = v14;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(a1, *(void *)a4 + 8);
  if (v11 >= 1)
  {
    int v16 = 0;
    LODWORD(v17) = 0;
    uint64_t v18 = (v8 / v10);
    do
    {
      if ((int)v18 >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(*(void *)a3 + 24);
        do
        {
          if (v13 >= 1)
          {
            int v21 = 0;
            float v22 = *(float *)(v20 + 4 * (v19 + v16 / (int)(v11 / v15) * (int)v18));
            uint64_t v23 = *a1;
            do
            {
              if (v12 >= 1)
              {
                uint64_t v24 = *(void *)(*(void *)a4 + 24);
                uint64_t v25 = *(void *)(v23 + 24);
                uint64_t v17 = (int)v17;
                int v26 = v12;
                do
                {
                  *(float *)(v25 + 4 * v17) = v22 * *(float *)(v24 + 4 * v17);
                  ++v17;
                  --v26;
                }
                while (v26);
              }
              ++v21;
            }
            while (v21 != v13);
          }
          ++v19;
        }
        while (v19 != v18);
      }
      ++v16;
    }
    while (v16 != v11);
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x60uLL);
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE3899C8;
  long long v7 = (char *)(v4 + 3);
  v4[3] = &unk_1EE36BF10;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  uint64_t v8 = 1;
  do
  {
    uint64_t v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  size_t v10 = 4 * v8;
  int v11 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v8));
  bzero(v11, v10);
  v5[6] = v11;
  *((unsigned char *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_1926D02D8(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_load_constant_kernel>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381A40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_elementwise_kernel>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3819D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3819D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void rule_fuse_scale_conv::~rule_fuse_scale_conv(rule_fuse_scale_conv *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_scale_conv>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<rule_fuse_scale_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380508;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_scale_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::sequential_builder::add<Espresso::convolution_uniforms>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unsigned int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926D07D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void *Espresso::blob<float,4>::copy(void *a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(a1, a2 + 8);
  uint64_t v4 = 0;
  uint64_t v5 = *(void **)(*a1 + 24);
  uint64_t v6 = *(const void **)(a2 + 24);
  uint64_t v7 = *(int *)(a2 + 8);
  do
  {
    v7 *= *(int *)(a2 + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);

  return memcpy(v5, v6, 4 * v7);
}

void ___ZN8Espresso26optimize_network_with_ruleI17rule_fuse_bn_convEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE3803B8;
  uint64_t v6 = v4 + 3;
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
    nitro::nitro_function::nitro_function(v8);
    *uint64_t v6 = &unk_1EE321178;
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, 0);
    *uint64_t v6 = &unk_1EE321178;
  }
  uint64_t v9 = v19;
  if (v19 >= (unint64_t)v20)
  {
    unint64_t v12 = (v19 >> 4) + 1;
    if (v12 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v20 >> 3 > v12) {
      unint64_t v12 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v21[4] = (void **)&v20;
    uint64_t v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    *(void *)&long long v15 = v6;
    *((void *)&v15 + 1) = v5;
    uint64_t v16 = &v14[2 * (v19 >> 4)];
    v21[0] = v14;
    v21[1] = v16;
    void v21[3] = &v14[2 * v17];
    *(_OWORD *)uint64_t v16 = v15;
    uint64_t v21[2] = v16 + 2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v18, v21);
    uint64_t v11 = v19;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v21);
    uint64_t v19 = v11;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)uint64_t v19 = v6;
    *(void *)(v9 + 8) = v5;
    uint64_t v11 = v9 + 16;
    uint64_t v19 = v9 + 16;
  }
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  v21[0] = (void **)&v18;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](v21);
}

void sub_1926D0A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  nitro::nitro_function::nitro_function(v10);
  *(void *)(v11 - 40) = &a10;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

void rule_fuse_bn_conv::match(void *a1, int a2, uint64_t *a3)
{
  int v30 = a2;
  uint64_t v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  uint64_t v7 = (std::__shared_weak_count *)a1[4];
  v24[0] = a1[3];
  v24[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>(&v28, v6, &__p, v24, a2);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v27 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = v28;
  if (!v28
    || *(_DWORD *)((*(uint64_t (**)(void *))(*v28 + 384))(v28) + 24)
    || *(_DWORD *)((*(uint64_t (**)(void *))(*v8 + 384))(v8) + 28)
    || *(_DWORD *)((*(uint64_t (**)(void *))(*v8 + 384))(v8) + 60) != -1
    || *(_DWORD *)((*(uint64_t (**)(void *))(*v8 + 384))(v8) + 112))
  {
    goto LABEL_12;
  }
  (*(void (**)(void **__return_ptr, void *))(*v8 + 456))(&__p, v8);
  uint64_t v10 = __p;
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (!v10) {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "is_output");
  uint64_t v11 = v8 + 30;
  if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v11, (unsigned __int8 *)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "is_output");
    long long v31 = &v21;
    BOOL v12 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)&v21, (uint64_t)&std::piecewise_construct, (long long **)&v31)+ 10) != 0;
    if (v23 < 0) {
      operator delete(v21);
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v12
    || (unint64_t v13 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v30), (char *)v13[6] - (char *)v13[5] != 4))
  {
LABEL_12:
    uint64_t v9 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  int v14 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v30)[5];
  uint64_t v15 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bn");
  uint64_t v16 = a1[3];
  uint64_t v17 = (std::__shared_weak_count *)a1[4];
  v20[0] = v16;
  v20[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_batchnorm_kernel>(&v21, v15, &__p, v20, v14);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v27 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = v21;
  if (!v21
    || *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v21 + 384))(v21) + 4)
    || *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v18 + 384))(v18) + 8))
  {
    uint64_t v19 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  uint64_t v9 = v22;
  if (v22) {
LABEL_13:
  }
    nitro::nitro_function::nitro_function(v9);
LABEL_14:
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
}

void sub_1926D0E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_batchnorm_kernel>(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v35 = a5;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*(void *)(*a4 + 32) + 16 * a5);
  BOOL result = *(unsigned char **)(v11 + 64);
  if (result
  {
    unint64_t v13 = result;
    uint64_t v14 = *(void *)(v11 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *a4;
    }
    uint64_t v15 = (std::__shared_weak_count *)a4[1];
    v22[0] = v10;
    v22[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(&v23, (uint64_t)v22, a5);
    uint64_t v16 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    *((_DWORD *)v16 + 14) = v23;
    long long v17 = v24;
    long long v24 = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)v16[9];
    *((_OWORD *)v16 + 4) = v17;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v19 = (void **)(v16 + 10);
    if (*((char *)v16 + 103) < 0) {
      operator delete(*v19);
    }
    v16[12] = v26;
    *(_OWORD *)uint64_t v19 = v25;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    uint64_t v20 = (void **)(v16 + 13);
    if (*((char *)v16 + 127) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)uint64_t v20 = __p;
    v16[15] = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__p) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 16));
    *((_OWORD *)v16 + 8) = v29;
    v16[18] = v30;
    int v30 = 0;
    long long v29 = 0uLL;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 19));
    *(_OWORD *)(v16 + 19) = v31;
    v16[21] = v32;
    unint64_t v32 = 0;
    long long v31 = 0uLL;
    uint64_t v21 = (void **)(v16 + 22);
    if (*((char *)v16 + 199) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)uint64_t v21 = v33;
    v16[24] = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    v36[0] = (void **)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    v36[0] = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (*((void *)&v24 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (a5 == -1) {
      *(_DWORD *)(a2 + 8) = -1;
    }
    BOOL result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), a5, &v35);
    result[32] = 1;
    *a1 = v13;
    a1[1] = v14;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1926D1190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

void rule_fuse_bn_conv::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = (std::__shared_weak_count *)a3[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v105, v4, __p);
  if (SBYTE3(v73) < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bn");
  uint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 40, __p);
  if ((void *)(v4 + 48) != v6 {
    && (uint64_t v7 = v6, (v8 = (const void *)v6[8]) != 0)
  }
  {
    std::string::size_type v10 = (std::string::size_type)v9;
    uint64_t v11 = (std::__shared_weak_count *)v7[9];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v12 = (std::string *)operator new(0xA8uLL);
    unint64_t v13 = v12;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE381960;
    LODWORD(v12[1].__r_.__value_.__l.__data_) = 0;
    uint64_t v14 = v12 + 1;
    *(_OWORD *)&v12[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v12[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v12[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v12[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v12[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v12[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v12[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v12[6].__r_.__value_.__l.__data_ = 0u;
    v12[6].__r_.__value_.__r.__words[2] = 0;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v12[1].__r_.__value_.__l.__size_ = v10;
    v12[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
    std::string::operator=(v12 + 2, (const std::string *)(v7 + 10));
    if (v13 != (std::string *)(v7 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v13[4], (std::string *)v7[16], (std::string *)v7[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[17] - v7[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v13[5], (std::string *)v7[19], (std::string *)v7[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[20] - v7[19]) >> 3));
    }
    std::string::operator=(v13 + 3, (const std::string *)(v7 + 13));
    LODWORD(v13[1].__r_.__value_.__l.__data_) = *((_DWORD *)v7 + 14);
    std::string::operator=(v13 + 6, (const std::string *)(v7 + 22));
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v13 = 0;
  }
  if (SBYTE3(v73) < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v60 = (std::__shared_weak_count *)v13;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v14->__r_.__value_.__l.__size_ + 408))(&v103);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v101, *(_DWORD *)(v103 + 8), 1, 1, 1);
  uint64_t v15 = v101;
  memcpy(*(void **)(v101 + 16), *(const void **)(v103 + 16), 4 * *(int *)(v103 + 8));
  uint64_t v16 = v105;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v105 + 8) + 448))(&v99);
  if (*(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(void *)v14->__r_.__value_.__l.__size_ + 384))(v14->__r_.__value_.__l.__size_)
                 + 28))
    BOOL v17 = 1;
  else {
    BOOL v17 = *(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(void *)v14->__r_.__value_.__l.__size_
  }
                                                                        + 384))(v14->__r_.__value_.__l.__size_)
                    + 24) != 0;
  BOOL v96 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, (uint64_t)v14[3].__r_.__value_.__l.__data_, v14[3].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[3].__r_.__value_.__l.__size_ - v14[3].__r_.__value_.__r.__words[0]) >> 3));
  if (v17) {
    uint64_t v18 = "_pre_act";
  }
  else {
    uint64_t v18 = "";
  }
  std::string::append(v96, v18);
  std::string::operator=((std::string *)(*a2 + 56), (const std::string *)(v16 + 120));
  uint64_t v19 = *(const void **)(v16 + 8);
  if (v19
  {
    uint64_t v21 = v20;
    float v22 = *(std::__shared_weak_count **)(v16 + 16);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v58 = v5;
    (*(void (**)(void **__return_ptr, void *))(*(void *)v20 + 456))(&v67, v20);
    (*(void (**)(void **__return_ptr, void *))(*(void *)v21 + 448))(v65, v21);
    if (!v65[0])
    {
      (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v21 + 488))(__p, v21);
      long long v23 = *(_OWORD *)__p;
      *(void *)long long __p = 0;
      *(void *)&__p[8] = 0;
      long long v24 = (std::__shared_weak_count *)v65[1];
      *(_OWORD *)unint64_t v65 = v23;
      if (v24)
      {
        nitro::nitro_function::nitro_function(v24);
        if (*(void *)&__p[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
        }
      }
      uint64_t v25 = *((int *)v65[0] + 2);
      if (v25) {
        bzero(*((void **)v65[0] + 2), 4 * v25);
      }
    }
    uint64_t v26 = *(unsigned int *)((*(uint64_t (**)(void))(**(void **)(v16 + 8) + 384))(*(void *)(v16 + 8))
                          + 40);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v94, v26, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v92, (int *)v65[0] + 2);
    if ((int)v26 >= 1)
    {
      char v27 = (float *)*((void *)v65[0] + 2);
      uint64_t v28 = *(_DWORD **)(v92 + 16);
      long long v29 = (float *)v94[3];
      int v30 = (float *)(*(void *)(v15 + 16) + 8);
      do
      {
        float v31 = *(v30 - 2);
        float v32 = *v27++;
        double v33 = *(v30 - 1);
        float v34 = *v30;
        float v35 = v30[1];
        v30 += 4;
        *(float *)&double v33 = v33 - v31 * (float)(v34 - v32) / v35;
        *v28++ = LODWORD(v33);
        *v29++ = v31 / v35;
        --v26;
      }
      while (v26);
    }
    v89[0] = v21;
    v89[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = v95;
    v88[0] = v94;
    v88[1] = v95;
    if (v95) {
      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v59 = v36;
    long long v37 = v68;
    v87[0] = v67;
    v87[1] = v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    scale_deconv_weights(&v90, v89, (uint64_t)v88, (uint64_t)v87);
    if (v37) {
      nitro::nitro_function::nitro_function(v37);
    }
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    uint64_t v38 = v91;
    uint64_t v85 = v90;
    long long v86 = v91;
    if (v91) {
      atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v21 + 400))(v21, &v85);
    if (v86) {
      nitro::nitro_function::nitro_function(v86);
    }
    int v39 = v93;
    uint64_t v83 = v92;
    unint64_t v84 = v93;
    if (v93) {
      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v21 + 392))(v21, &v83);
    if (v84) {
      nitro::nitro_function::nitro_function(v84);
    }
    uint64_t v40 = *a2;
    uint64_t v41 = *(std::__shared_weak_count **)(v16 + 16);
    v82[0] = *(void *)(v16 + 8);
    v82[1] = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
    memset(v81, 0, sizeof(v81));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v81, *(void *)(v16 + 96), *(void *)(v16 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 104) - *(void *)(v16 + 96)) >> 3));
    memset(v80, 0, sizeof(v80));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v80, (uint64_t)v96, v97, 0xAAAAAAAAAAAAAAABLL * ((v97 - (uint64_t)v96) >> 3));
    Espresso::sequential_builder::add_kernel(v40, v82, (uint64_t)__p, v16 + 24, v81, v80);
    v107[0] = (void **)v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v107);
    v107[0] = (void **)v81;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v107);
    if (SBYTE3(v73) < 0) {
      operator delete(*(void **)__p);
    }
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    int v42 = v60;
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    uint64_t v5 = v58;
    if (v65[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v65[1]);
    }
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
  }
  else
  {
    if (v99)
    {
      uint64_t v43 = 0;
      for (uint64_t i = 0; i < *(int *)((*(uint64_t (**)(const void *))(*(void *)v19 + 384))(v19) + 40); ++i)
      {
        unint64_t v45 = (16 * (((unint64_t)(v43 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
        *(float *)(*(void *)(v15 + 16) + v45) = *(float *)(*(void *)(v103 + 16) + v45)
                                                - *(float *)(*(void *)(v99 + 16) + v43);
        uint64_t v19 = *(const void **)(v16 + 8);
        v43 += 4;
      }
      uint64_t v19 = *(const void **)(v16 + 8);
    }
    *(_DWORD *)((*(uint64_t (**)(const void *))(*(void *)v19 + 384))(v19) + 112) = 1;
    uint64_t v46 = *(void *)(v16 + 8);
    uint64_t v78 = v15;
    uint64_t v79 = v102;
    if (v102) {
      atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v42 = v60;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 392))(v46, &v78);
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
    uint64_t v47 = *a2;
    float v22 = *(std::__shared_weak_count **)(v16 + 16);
    v77[0] = *(void *)(v16 + 8);
    v77[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
    memset(v76, 0, sizeof(v76));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v76, *(void *)(v16 + 96), *(void *)(v16 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 104) - *(void *)(v16 + 96)) >> 3));
    memset(v75, 0, sizeof(v75));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v75, (uint64_t)v96, v97, 0xAAAAAAAAAAAAAAABLL * ((v97 - (uint64_t)v96) >> 3));
    Espresso::sequential_builder::add_kernel(v47, v77, (uint64_t)__p, v16 + 24, v76, v75);
    char v67 = v75;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    char v67 = v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (SBYTE3(v73) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (v17)
  {
    *(_DWORD *)long long __p = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_OWORD *)&__p[4] = _D0;
    uint64_t v74 = 0;
    uint64_t v73 = 0;
    if (*(_DWORD *)((*(uint64_t (**)(void))(*(void *)v14->__r_.__value_.__l.__size_ + 384))() + 28) == 1)
    {
      *(_DWORD *)long long __p = 0;
    }
    else if (*(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(void *)v14->__r_.__value_.__l.__size_ {
                                                                            + 384))(v14->__r_.__value_.__l.__size_)
    }
                        + 28) == 2)
    {
      *(_DWORD *)long long __p = 2;
      *(_DWORD *)&__p[4] = *(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(void *)v14->__r_.__value_.__l.__size_
                                                                                         + 384))(v14->__r_.__value_.__l.__size_)
                                     + 36);
    }
    else if (*(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(void *)v14->__r_.__value_.__l.__size_ {
                                                                            + 384))(v14->__r_.__value_.__l.__size_)
    }
                        + 24))
    {
      *(_DWORD *)long long __p = 1;
    }
    uint64_t v53 = (uint64_t *)*a2;
    std::string::basic_string[abi:ne180100]<0>(&v67, "activation");
    if (*(char *)(v16 + 47) >= 0) {
      size_t v54 = *(unsigned __int8 *)(v16 + 47);
    }
    else {
      size_t v54 = *(void *)(v16 + 32);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v65, v54 + 4);
    if (v66 >= 0) {
      uint64_t v55 = v65;
    }
    else {
      uint64_t v55 = (void **)v65[0];
    }
    if (v54)
    {
      if (*(char *)(v16 + 47) >= 0) {
        uint64_t v56 = (const void *)(v16 + 24);
      }
      else {
        uint64_t v56 = *(const void **)(v16 + 24);
      }
      memmove(v55, v56, v54);
    }
    strcpy((char *)v55 + v54, "_act");
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, (uint64_t)v96, v97, 0xAAAAAAAAAAAAAAABLL * ((v97 - (uint64_t)v96) >> 3));
    memset(v61, 0, sizeof(v61));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v61, (uint64_t)v14[3].__r_.__value_.__l.__data_, v14[3].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[3].__r_.__value_.__l.__size_ - v14[3].__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::activation_params>(&v70, v53, (uint64_t)&v67, (uint64_t)v65, (uint64_t)__p, v62, v63, v61);
    if (v71) {
      nitro::nitro_function::nitro_function(v71);
    }
    int v94 = (void **)v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v94);
    int v94 = (void **)&v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v94);
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v69 < 0) {
      operator delete(v67);
    }
  }
  uint64_t v57 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(unsigned char **)(v57 + 56) = 0;
    *(void *)(v57 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(v57 + 56) = 0;
    *(unsigned char *)(v57 + 79) = 0;
  }
  *(void *)long long __p = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v100) {
    nitro::nitro_function::nitro_function(v100);
  }
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
  if (v104) {
    nitro::nitro_function::nitro_function(v104);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (v106) {
    nitro::nitro_function::nitro_function(v106);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1926D1ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24,void *a25,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  long long __p = (void *)(v64 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  char v66 = *(std::__shared_weak_count **)(v64 - 160);
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  char v67 = *(std::__shared_weak_count **)(v64 - 144);
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  uint64_t v68 = *(std::__shared_weak_count **)(v64 - 128);
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  char v69 = *(std::__shared_weak_count **)(v64 - 112);
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_batchnorm_kernel>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381960;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void rule_fuse_bn_conv::~rule_fuse_bn_conv(rule_fuse_bn_conv *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_bn_conv>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<rule_fuse_bn_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3803B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_bn_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3803B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso26optimize_network_with_ruleI28rule_fuse_bias_inner_productEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE3805B0;
  uint64_t v6 = v4 + 3;
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
    nitro::nitro_function::nitro_function(v8);
    *uint64_t v6 = &unk_1EE322488;
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, 0);
    *uint64_t v6 = &unk_1EE322488;
  }
  uint64_t v9 = v19;
  if (v19 >= (unint64_t)v20)
  {
    unint64_t v12 = (v19 >> 4) + 1;
    if (v12 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v20 >> 3 > v12) {
      unint64_t v12 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v21[4] = (void **)&v20;
    uint64_t v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    *(void *)&long long v15 = v6;
    *((void *)&v15 + 1) = v5;
    uint64_t v16 = &v14[2 * (v19 >> 4)];
    v21[0] = v14;
    v21[1] = v16;
    void v21[3] = &v14[2 * v17];
    *(_OWORD *)uint64_t v16 = v15;
    uint64_t v21[2] = v16 + 2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v18, v21);
    uint64_t v11 = v19;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v21);
    uint64_t v19 = v11;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)uint64_t v19 = v6;
    *(void *)(v9 + 8) = v5;
    uint64_t v11 = v9 + 16;
    uint64_t v19 = v9 + 16;
  }
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  v21[0] = (void **)&v18;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](v21);
}

void sub_1926D257C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  nitro::nitro_function::nitro_function(v10);
  *(void *)(v11 - 40) = &a10;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

void rule_fuse_bias_inner_product::match(void *a1, int a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  int v46 = a2;
  uint64_t v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v43, "inner_product");
  uint64_t v8 = a1[3];
  uint64_t v7 = (std::__shared_weak_count *)a1[4];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v61 = a2;
  uint64_t v9 = *(void *)(*(void *)(v8 + 32) + 16 * a2);
  uint64_t v10 = *(const void **)(v9 + 64);
  if (!v10)
  {
    uint64_t v19 = 0;
    uint64_t v11 = 0;
    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (!v11)
  {
    uint64_t v19 = 0;
    if (!v7) {
      goto LABEL_29;
    }
LABEL_28:
    nitro::nitro_function::nitro_function(v7);
    goto LABEL_29;
  }
  unint64_t v12 = *(std::__shared_weak_count **)(v9 + 72);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v47 = v8;
  uint64_t v48 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v49, (uint64_t)&v47, a2);
  unint64_t v13 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 40), &v43, (uint64_t)&v43);
  uint64_t v40 = v3;
  *((_DWORD *)v13 + 14) = v49;
  long long v14 = v50;
  long long v50 = 0uLL;
  long long v15 = (std::__shared_weak_count *)v13[9];
  *((_OWORD *)v13 + 4) = v14;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  uint64_t v16 = (void **)(v13 + 10);
  if (*((char *)v13 + 103) < 0) {
    operator delete(*v16);
  }
  v13[12] = v52;
  *(_OWORD *)uint64_t v16 = v51;
  HIBYTE(v52) = 0;
  LOBYTE(v51) = 0;
  uint64_t v17 = (void **)(v13 + 13);
  if (*((char *)v13 + 127) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)uint64_t v17 = __p;
  v13[15] = v54;
  HIBYTE(v54) = 0;
  LOBYTE(__p) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v13 + 16));
  *((_OWORD *)v13 + 8) = v55;
  v13[18] = v56;
  uint64_t v56 = 0;
  long long v55 = 0uLL;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v13 + 19));
  *(_OWORD *)(v13 + 19) = v57;
  v13[21] = v58;
  int v58 = 0;
  long long v57 = 0uLL;
  uint64_t v18 = (void **)(v13 + 22);
  if (*((char *)v13 + 199) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = v59;
  v13[24] = v60;
  HIBYTE(v60) = 0;
  LOBYTE(v59) = 0;
  v62[0] = (void **)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v62);
  v62[0] = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v62);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v3 = v40;
  uint64_t v19 = v12;
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  if (*((void *)&v50 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v50 + 1));
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (a2 == -1) {
    *(_DWORD *)(v6 + 8) = -1;
  }
  *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v6 + 16), a2, &v61)+ 32) = 1;
  if (v7) {
    goto LABEL_28;
  }
LABEL_29:
  if (v45 < 0)
  {
    operator delete(v43);
    if (!v11) {
      goto LABEL_39;
    }
  }
  else if (!v11)
  {
    goto LABEL_39;
  }
  uint64_t v20 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v46);
  if ((char *)v20[6] - (char *)v20[5] != 4) {
    goto LABEL_39;
  }
  int v21 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v46)[5];
  LODWORD(v62[0]) = v21;
  if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v11 + 384))(v11) + 16)
    || *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v11 + 384))(v11) + 12)
    || *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v11 + 384))(v11) + 52) != -1)
  {
    goto LABEL_39;
  }
  (*(void (**)(void **__return_ptr, void *))(*(void *)v11 + 416))(&v49, v11);
  long long v23 = v49;
  if ((void)v50) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v50);
  }
  if (!v23)
  {
LABEL_39:
    float v22 = (std::__shared_weak_count *)v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    if (!v22) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  uint64_t v24 = *v3;
  std::string::basic_string[abi:ne180100]<0>(&v49, "bias");
  uint64_t v25 = (std::__shared_weak_count *)a1[4];
  v42[0] = a1[3];
  v42[1] = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(&v43, v24, &v49, v42, v21, &__block_literal_global_104_485);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49);
  }
  if (!v43
    || (uint64_t v26 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v21, v62), (char *)v26[6] - (char *)v26[5] != 8)|| *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v21, v62)[5] != a2)
  {
    int v39 = (std::__shared_weak_count *)v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    if (!v39) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  int v27 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v21, v62)[5]+ 1);
  uint64_t v28 = *v3;
  std::string::basic_string[abi:ne180100]<0>(&v49, "const");
  uint64_t v29 = a1[3];
  int v30 = (std::__shared_weak_count *)a1[4];
  v41[0] = v29;
  v41[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>(&v47, v28, &v49, v41, v27);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v49);
  }
  if (!v47) {
    goto LABEL_77;
  }
  float v31 = (uint64_t *)(v47 + 344);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v49, (uint64_t *)(v47 + 344));
  float v32 = v49;
  if ((void)v50) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v50);
  }
  if (!v32) {
    goto LABEL_77;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v49, v31);
  uint64_t v33 = 0;
  uint64_t v34 = *((int *)v49 + 2);
  do
  {
    v34 *= *(int *)((char *)v49 + v33 + 12);
    v33 += 4;
  }
  while (v33 != 12);
  uint64_t v35 = *(unsigned int *)(*(uint64_t (**)(void *))(*(void *)v11 + 384))(v11);
  if ((void)v50) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v50);
  }
  if (v34 != v35) {
    goto LABEL_77;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v49, v31);
  int v36 = *((_DWORD *)v49 + 4);
  int v37 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v11 + 384))(v11);
  if ((void)v50) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v50);
  }
  if (v36 != v37 || *(void *)(*v3 + 56) != 3)
  {
LABEL_77:
    uint64_t v38 = (std::__shared_weak_count *)v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
  }
  int v39 = v48;
  if (v48) {
LABEL_82:
  }
    nitro::nitro_function::nitro_function(v39);
LABEL_83:
  float v22 = v44;
  if (v44) {
LABEL_40:
  }
    nitro::nitro_function::nitro_function(v22);
LABEL_41:
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
}

void sub_1926D2C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *__p,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30)
{
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(exception_object);
}

BOOL ___ZN28rule_fuse_bias_inner_product5matchEiRNSt3__110shared_ptrIN8Espresso30graph_optimization_rule_statusEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(a2) == 5
      || *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(a2) == 0;
}

void rule_fuse_bias_inner_product::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = (std::__shared_weak_count *)a3[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "inner_product");
  uint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 40, &v40);
  if ((void *)(v4 + 48) != v6 {
    && (uint64_t v7 = v6, (v8 = (const void *)v6[8]) != 0)
  }
  {
    std::string::size_type v10 = (std::string::size_type)v9;
    uint64_t v11 = (std::__shared_weak_count *)v7[9];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v12 = (std::string *)operator new(0xA8uLL);
    unint64_t v13 = v12;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE381A08;
    LODWORD(v12[1].__r_.__value_.__l.__data_) = 0;
    long long v14 = v12 + 1;
    *(_OWORD *)&v12[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v12[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v12[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v12[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v12[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v12[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v12[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v12[6].__r_.__value_.__l.__data_ = 0u;
    v12[6].__r_.__value_.__r.__words[2] = 0;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v12[1].__r_.__value_.__l.__size_ = v10;
    v12[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
    std::string::operator=(v12 + 2, (const std::string *)(v7 + 10));
    if (v13 != (std::string *)(v7 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v13[4], (std::string *)v7[16], (std::string *)v7[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[17] - v7[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v13[5], (std::string *)v7[19], (std::string *)v7[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[20] - v7[19]) >> 3));
    }
    std::string::operator=(v13 + 3, (const std::string *)(v7 + 13));
    LODWORD(v13[1].__r_.__value_.__l.__data_) = *((_DWORD *)v7 + 14);
    std::string::operator=(v13 + 6, (const std::string *)(v7 + 22));
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    long long v14 = 0;
    unint64_t v13 = 0;
  }
  if (v41 < 0) {
    operator delete((void *)v40);
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "bias");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(&v38, v4, &v40);
  if (v41 < 0) {
    operator delete((void *)v40);
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "const");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(&v36, v4, &v40);
  if (v41 < 0) {
    operator delete((void *)v40);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v14->__r_.__value_.__l.__size_ + 408))(&v35);
  if (!(void)v35)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v14->__r_.__value_.__l.__size_ + 432))(&v40);
    long long v15 = v40;
    long long v40 = 0uLL;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    long long v35 = v15;
    if (v16)
    {
      nitro::nitro_function::nitro_function(v16);
      if (*((void *)&v40 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v40 + 1));
      }
    }
    uint64_t v17 = *(int *)(v35 + 8);
    if (v17) {
      bzero(*(void **)(v35 + 16), 4 * v17);
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v33, (uint64_t *)(*(void *)(v36 + 8) + 344));
  uint64_t v18 = v35;
  uint64_t v19 = *(unsigned int *)(v35 + 8);
  if (v19)
  {
    uint64_t v20 = *(float **)(v33 + 24);
    int v21 = *(float **)(v35 + 16);
    do
    {
      float v22 = *v20++;
      *int v21 = v22 + *v21;
      ++v21;
      --v19;
    }
    while (v19);
  }
  std::string::size_type size = v14->__r_.__value_.__l.__size_;
  uint64_t v31 = v18;
  float v32 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  if (*((void *)&v35 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string::size_type, uint64_t *))(*(void *)size + 392))(size, &v31);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  std::string::operator=((std::string *)(*a2 + 56), v14 + 5);
  uint64_t v24 = *a2;
  uint64_t v25 = (std::__shared_weak_count *)v14->__r_.__value_.__r.__words[2];
  std::string::size_type v29 = v14->__r_.__value_.__l.__size_;
  int v30 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "inner_product");
  memset(v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v28, (uint64_t)v14[4].__r_.__value_.__l.__data_, v14[4].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[4].__r_.__value_.__l.__size_ - v14[4].__r_.__value_.__r.__words[0]) >> 3));
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, *(void *)(v38 + 72), *(void *)(v38 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v38 + 80) - *(void *)(v38 + 72)) >> 3));
  Espresso::sequential_builder::add_kernel(v24, &v29, (uint64_t)&v40, (uint64_t)&v14[1], v28, v27);
  int v42 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  int v42 = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (v41 < 0) {
    operator delete((void *)v40);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  uint64_t v26 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(unsigned char **)(v26 + 56) = 0;
    *(void *)(v26 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(v26 + 56) = 0;
    *(unsigned char *)(v26 + 79) = 0;
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (*((void *)&v35 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (v13) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1926D330C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (*(char *)(v28 - 89) < 0) {
    operator delete(*(void **)(v28 - 112));
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381A08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void rule_fuse_bias_inner_product::~rule_fuse_bias_inner_product(rule_fuse_bias_inner_product *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_bias_inner_product>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<rule_fuse_bias_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3805B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_bias_inner_product>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3805B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso26optimize_network_with_ruleI19rule_fuse_bias_convEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE380498;
  uint64_t v6 = v4 + 3;
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
    nitro::nitro_function::nitro_function(v8);
    *uint64_t v6 = &unk_1EE321868;
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, 0);
    *uint64_t v6 = &unk_1EE321868;
  }
  uint64_t v9 = v19;
  if (v19 >= (unint64_t)v20)
  {
    unint64_t v12 = (v19 >> 4) + 1;
    if (v12 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v20 >> 3 > v12) {
      unint64_t v12 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v21[4] = (void **)&v20;
    long long v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    *(void *)&long long v15 = v6;
    *((void *)&v15 + 1) = v5;
    uint64_t v16 = &v14[2 * (v19 >> 4)];
    v21[0] = v14;
    v21[1] = v16;
    void v21[3] = &v14[2 * v17];
    *(_OWORD *)uint64_t v16 = v15;
    uint64_t v21[2] = v16 + 2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v18, v21);
    uint64_t v11 = v19;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v21);
    uint64_t v19 = v11;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)uint64_t v19 = v6;
    *(void *)(v9 + 8) = v5;
    uint64_t v11 = v9 + 16;
    uint64_t v19 = v9 + 16;
  }
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  v21[0] = (void **)&v18;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](v21);
}

void sub_1926D37DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  nitro::nitro_function::nitro_function(v10);
  *(void *)(v11 - 40) = &a10;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

void rule_fuse_bias_conv::match(void *a1, int a2, uint64_t *a3)
{
  int v42 = a2;
  uint64_t v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  uint64_t v7 = (std::__shared_weak_count *)a1[4];
  v36[0] = a1[3];
  v36[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>(&v40, v6, &__p, v36, a2);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v39 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = v40;
  if (!v40
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v40 + 384))(v40) + 24)
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 28)
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 60) != -1
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 112))
  {
    goto LABEL_12;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 456))(&__p, v8);
  uint64_t v10 = __p;
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (!v10
    || (uint64_t v11 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v42), (char *)v11[6] - (char *)v11[5] != 4))
  {
LABEL_12:
    uint64_t v9 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  int v12 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 16), a2, &v42)[5];
  int v35 = v12;
  uint64_t v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
  long long v14 = (std::__shared_weak_count *)a1[4];
  v32[0] = a1[3];
  v32[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_elementwise_kernel>(&v33, v13, &__p, v32, v12, &__block_literal_global_95_487);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v39 < 0) {
    operator delete(__p);
  }
  if (!v33
    || (long long v15 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v12, &v35), (char *)v15[6] - (char *)v15[5] != 8)|| *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v12, &v35)[5] != a2)
  {
    uint64_t v28 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v28) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  int v16 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1[1] + 40), v12, &v35)[5]+ 1);
  uint64_t v17 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "const");
  uint64_t v18 = a1[3];
  uint64_t v19 = (std::__shared_weak_count *)a1[4];
  v29[0] = v18;
  v29[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_load_constant_kernel>(&v30, v17, &__p, v29, v16);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v39 < 0) {
    operator delete(__p);
  }
  if (!v30) {
    goto LABEL_49;
  }
  uint64_t v20 = (uint64_t *)(v30 + 344);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__p, (uint64_t *)(v30 + 344));
  int v21 = __p;
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (!v21) {
    goto LABEL_49;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__p, v20);
  uint64_t v22 = 0;
  uint64_t v23 = *((int *)__p + 2);
  do
  {
    v23 *= *(int *)((char *)__p + v22 + 12);
    v22 += 4;
  }
  while (v22 != 12);
  uint64_t v24 = *(int *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 40);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v23 != v24) {
    goto LABEL_49;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__p, v20);
  int v25 = *((_DWORD *)__p + 4);
  int v26 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8) + 40);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v25 != v26 || *(void *)(*a3 + 56) != 3)
  {
LABEL_49:
    int v27 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
  }
  uint64_t v28 = v31;
  if (v31) {
LABEL_54:
  }
    nitro::nitro_function::nitro_function(v28);
LABEL_55:
  uint64_t v9 = v34;
  if (v34) {
LABEL_13:
  }
    nitro::nitro_function::nitro_function(v9);
LABEL_14:
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
}

void sub_1926D3CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 80);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  _Unwind_Resume(exception_object);
}

BOOL ___ZN19rule_fuse_bias_conv5matchEiRNSt3__110shared_ptrIN8Espresso30graph_optimization_rule_statusEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(a2) == 5
      || *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(a2) == 0;
}

void rule_fuse_bias_conv::transform(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = (std::__shared_weak_count *)a3[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "conv");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_convolution_kernel>(&v46, v4, &v44);
  if (v45 < 0) {
    operator delete((void *)v44);
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "bias");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_elementwise_kernel>(&v42, v4, &v44);
  if (v45 < 0) {
    operator delete((void *)v44);
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "const");
  Espresso::graph_optimization_rule_status::get_match<Espresso::generic_load_constant_kernel>(&v40, v4, &v44);
  if (v45 < 0) {
    operator delete((void *)v44);
  }
  uint64_t v6 = v46;
  (*(void (**)(long long *__return_ptr))(**(void **)(v46 + 8) + 448))(&v39);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 8) + 488))(&v37);
  if (!(void)v39)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(v6 + 8) + 488))(&v44);
    long long v7 = v44;
    long long v44 = 0uLL;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&v39 + 1);
    long long v39 = v7;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      if (*((void *)&v44 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v44 + 1));
      }
    }
    uint64_t v9 = *(int *)(v39 + 8);
    if (v9) {
      bzero(*(void **)(v39 + 16), 4 * v9);
    }
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v35, (uint64_t *)(*(void *)(v40 + 8) + 344));
  uint64_t v10 = *(unsigned int *)(v39 + 8);
  uint64_t v11 = v37;
  if (v10)
  {
    int v12 = *(float **)(v39 + 16);
    uint64_t v13 = *(float **)(v35 + 24);
    long long v14 = *(float **)(v37 + 16);
    do
    {
      float v15 = *v12++;
      float v16 = v15;
      float v17 = *v13++;
      *v14++ = v16 + v17;
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = *(void *)(v6 + 8);
  uint64_t v33 = v11;
  uint64_t v34 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 392))(v18, &v33);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  std::string::operator=((std::string *)(*a2 + 56), (const std::string *)(v6 + 120));
  uint64_t v19 = *(const void **)(v6 + 8);
  if (v19
  {
    uint64_t v20 = *(std::__shared_weak_count **)(v6 + 16);
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v20);
      int v21 = *(std::__shared_weak_count **)(v6 + 16);
      uint64_t v22 = *a2;
      uint64_t v31 = *(const void **)(v6 + 8);
      float v32 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v22 = *a2;
      uint64_t v31 = v19;
      float v32 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v44, "deconvolution");
    memset(v30, 0, sizeof(v30));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *(void *)(v6 + 96), *(void *)(v6 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 104) - *(void *)(v6 + 96)) >> 3));
    memset(v29, 0, sizeof(v29));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v29, *(void *)(v42 + 72), *(void *)(v42 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v42 + 80) - *(void *)(v42 + 72)) >> 3));
    Espresso::sequential_builder::add_kernel(v22, &v31, (uint64_t)&v44, v6 + 24, v30, v29);
    uint64_t v48 = v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    uint64_t v48 = v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    if (v45 < 0) {
      operator delete((void *)v44);
    }
    uint64_t v24 = v32;
  }
  else
  {
    uint64_t v23 = *a2;
    uint64_t v24 = *(std::__shared_weak_count **)(v6 + 16);
    v28[0] = v19;
    v28[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v44, "convolution");
    memset(v27, 0, sizeof(v27));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, *(void *)(v6 + 96), *(void *)(v6 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 104) - *(void *)(v6 + 96)) >> 3));
    memset(v26, 0, sizeof(v26));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, *(void *)(v42 + 72), *(void *)(v42 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v42 + 80) - *(void *)(v42 + 72)) >> 3));
    Espresso::sequential_builder::add_kernel(v23, v28, (uint64_t)&v44, v6 + 24, v27, v26);
    uint64_t v48 = v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    uint64_t v48 = v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    if (v45 < 0) {
      operator delete((void *)v44);
    }
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  uint64_t v25 = *a2;
  if (*(char *)(*a2 + 79) < 0)
  {
    **(unsigned char **)(v25 + 56) = 0;
    *(void *)(v25 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(v25 + 56) = 0;
    *(unsigned char *)(v25 + 79) = 0;
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (*((void *)&v39 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v39 + 1));
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1926D4350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30)
{
  *(void *)(v32 - 72) = v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 72));
  *(void *)(v32 - 72) = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 72));
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  if (a30) {
    nitro::nitro_function::nitro_function(a30);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 152);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v32 - 136);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v32 - 120);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v32 - 80);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1926D4480()
{
}

void sub_1926D4488()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x1926D4454);
}

void sub_1926D44A0()
{
}

void sub_1926D44A8()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x1926D4460);
}

void sub_1926D44C0()
{
}

void sub_1926D44C8()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x1926D446CLL);
}

void sub_1926D44E0()
{
}

void rule_fuse_bias_conv::~rule_fuse_bias_conv(rule_fuse_bias_conv *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_bias_conv>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<rule_fuse_bias_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380498;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_fuse_bias_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::optimize_mlkit(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v9 = *a1;
  uint64_t v10 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  *(void *)((char *)v3 + 4) = 1109393408;
  *(_DWORD *)((char *)v3 + 11) = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)__p_8 = 0u;
  uint64_t v8 = 4096;
  Espresso::auto_optimize((uint64_t)&v9, (uint64_t)v3, a2);
  if (SHIBYTE(__p_8[1]) < 0) {
    operator delete(*((void **)&v6 + 1));
  }
  uint64_t v11 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1926D4654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  Espresso::auto_optimize_options::~auto_optimize_options(&a9);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 - 32);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  _Unwind_Resume(a1);
}

void Espresso::auto_optimize_options::~auto_optimize_options(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void Espresso::add_auto_context_transfers(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  v7[0] = *(void *)(v2 + 16);
  v7[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *(_DWORD *)(**(void **)(v2 + 32) + 12);
  v6[0] = v2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimize_network(v7, v5, (uint64_t)v6, &__block_literal_global_125_489, a2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1926D4790(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void ___ZN8Espresso26optimize_network_with_ruleI31rule_add_auto_context_transfersEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = operator new(0x40uLL);
  int v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE3805E8;
  long long v6 = v4 + 3;
  long long v7 = *(void **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
    nitro::nitro_function::nitro_function(v8);
    *long long v6 = &unk_1EE3224C8;
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, 0);
    *long long v6 = &unk_1EE3224C8;
  }
  uint64_t v9 = v19;
  if (v19 >= (unint64_t)v20)
  {
    unint64_t v12 = (v19 >> 4) + 1;
    if (v12 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v20 >> 3 > v12) {
      unint64_t v12 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v21[4] = (void **)&v20;
    long long v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    *(void *)&long long v15 = v6;
    *((void *)&v15 + 1) = v5;
    float v16 = &v14[2 * (v19 >> 4)];
    v21[0] = v14;
    v21[1] = v16;
    void v21[3] = &v14[2 * v17];
    *(_OWORD *)float v16 = v15;
    uint64_t v21[2] = v16 + 2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v18, v21);
    uint64_t v11 = v19;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v21);
    uint64_t v19 = v11;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)uint64_t v19 = v6;
    *(void *)(v9 + 8) = v5;
    uint64_t v11 = v9 + 16;
    uint64_t v19 = v9 + 16;
  }
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  v21[0] = (void **)&v18;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](v21);
}

void sub_1926D497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  nitro::nitro_function::nitro_function(v10);
  *(void *)(v11 - 40) = &a10;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

void rule_add_auto_context_transfers::match(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v74, "any");
  uint64_t v8 = *(void *)(a1 + 24);
  long long v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v91 = a2;
  uint64_t v9 = *(void *)(*(void *)(v8 + 32) + 16 * a2);
  uint64_t v10 = *(const void **)(v9 + 64);
  if (!v10)
  {
    uint64_t v19 = 0;
    uint64_t v11 = 0;
    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (!v11)
  {
    uint64_t v19 = 0;
    if (!v7) {
      goto LABEL_29;
    }
LABEL_28:
    nitro::nitro_function::nitro_function(v7);
    goto LABEL_29;
  }
  uint64_t v67 = a1;
  unint64_t v12 = *(std::__shared_weak_count **)(v9 + 72);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = v8;
  uint64_t v78 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v79, (uint64_t)&v77, a2);
  unint64_t v13 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 40), &v74, (uint64_t)&v74);
  *((_DWORD *)v13 + 14) = v79;
  long long v14 = v80;
  long long v80 = 0uLL;
  long long v15 = (std::__shared_weak_count *)v13[9];
  *((_OWORD *)v13 + 4) = v14;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  float v16 = (void **)(v13 + 10);
  if (*((char *)v13 + 103) < 0) {
    operator delete(*v16);
  }
  v13[12] = v82;
  *(_OWORD *)float v16 = v81;
  HIBYTE(v82) = 0;
  LOBYTE(v81) = 0;
  uint64_t v17 = (void **)(v13 + 13);
  if (*((char *)v13 + 127) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)uint64_t v17 = __p;
  v13[15] = v84;
  HIBYTE(v84) = 0;
  LOBYTE(__p) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v13 + 16));
  *((_OWORD *)v13 + 8) = v85;
  v13[18] = v86;
  long long v86 = 0;
  long long v85 = 0uLL;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v13 + 19));
  *(_OWORD *)(v13 + 19) = v87;
  v13[21] = v88;
  uint64_t v88 = 0;
  long long v87 = 0uLL;
  uint64_t v18 = (void **)(v13 + 22);
  if (*((char *)v13 + 199) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = v89;
  v13[24] = v90;
  HIBYTE(v90) = 0;
  LOBYTE(v89) = 0;
  v92[0] = (void **)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
  v92[0] = (void **)&v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v19 = v12;
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (*((void *)&v80 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v80 + 1));
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (a2 == -1) {
    *(_DWORD *)(v6 + 8) = -1;
  }
  *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v6 + 16), a2, &v91)+ 32) = 1;
  a1 = v67;
  if (v7) {
    goto LABEL_28;
  }
LABEL_29:
  if (v76 < 0) {
    operator delete(v74);
  }
  uint64_t v20 = *a3;
  if (v11) {
    goto LABEL_157;
  }
  std::string::basic_string[abi:ne180100]<0>(&v74, "any");
  uint64_t v22 = *(void *)(a1 + 24);
  int v21 = *(std::__shared_weak_count **)(a1 + 32);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v91 = a2;
  uint64_t v23 = 16 * a2;
  uint64_t v24 = *(void *)(*(void *)(v22 + 32) + v23);
  uint64_t v25 = *(const void **)(v24 + 64);
  if (!v25)
  {
    int v27 = 0;
    uint64_t v26 = 0;
    if (!v19) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (!v26)
  {
    int v27 = 0;
    if (!v19) {
      goto LABEL_60;
    }
LABEL_59:
    nitro::nitro_function::nitro_function(v19);
    goto LABEL_60;
  }
  int v27 = *(std::__shared_weak_count **)(v24 + 72);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = v22;
  uint64_t v78 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v68 = v19;
  Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v79, (uint64_t)&v77, a2);
  uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v20 + 40), &v74, (uint64_t)&v74);
  *((_DWORD *)v28 + 14) = v79;
  long long v29 = v80;
  long long v80 = 0uLL;
  uint64_t v30 = (std::__shared_weak_count *)v28[9];
  *((_OWORD *)v28 + 4) = v29;
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  uint64_t v31 = (void **)(v28 + 10);
  if (*((char *)v28 + 103) < 0) {
    operator delete(*v31);
  }
  v28[12] = v82;
  *(_OWORD *)uint64_t v31 = v81;
  HIBYTE(v82) = 0;
  LOBYTE(v81) = 0;
  uint64_t v32 = (void **)(v28 + 13);
  if (*((char *)v28 + 127) < 0) {
    operator delete(*v32);
  }
  *(_OWORD *)uint64_t v32 = __p;
  v28[15] = v84;
  HIBYTE(v84) = 0;
  LOBYTE(__p) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v28 + 16));
  *((_OWORD *)v28 + 8) = v85;
  v28[18] = v86;
  long long v86 = 0;
  long long v85 = 0uLL;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v28 + 19));
  *(_OWORD *)(v28 + 19) = v87;
  v28[21] = v88;
  uint64_t v88 = 0;
  long long v87 = 0uLL;
  uint64_t v33 = (void **)(v28 + 22);
  if (*((char *)v28 + 199) < 0) {
    operator delete(*v33);
  }
  *(_OWORD *)uint64_t v33 = v89;
  v28[24] = v90;
  HIBYTE(v90) = 0;
  LOBYTE(v89) = 0;
  v92[0] = (void **)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
  v92[0] = (void **)&v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v19 = v68;
  uint64_t v23 = 16 * a2;
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (*((void *)&v80 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v80 + 1));
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (a2 == -1) {
    *(_DWORD *)(v20 + 8) = -1;
  }
  *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v20 + 16), a2, &v91)+ 32) = 1;
  if (v68) {
    goto LABEL_59;
  }
LABEL_60:
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v76 < 0) {
    operator delete(v74);
  }
  uint64_t v20 = *a3;
  if (v26) {
    goto LABEL_65;
  }
  std::string::basic_string[abi:ne180100]<0>(&v74, "any");
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 32);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v91 = a2;
  uint64_t v36 = *(void *)(*(void *)(v35 + 32) + v23);
  uint64_t v37 = *(const void **)(v36 + 64);
  if (v37)
  {
    if (v38)
    {
      long long v39 = *(std::__shared_weak_count **)(v36 + 72);
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v77 = v35;
      uint64_t v78 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v69 = v39;
      Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v79, (uint64_t)&v77, a2);
      uint64_t v40 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v20 + 40), &v74, (uint64_t)&v74);
      uint64_t v66 = v23;
      *((_DWORD *)v40 + 14) = v79;
      long long v41 = v80;
      long long v80 = 0uLL;
      uint64_t v42 = (std::__shared_weak_count *)v40[9];
      *((_OWORD *)v40 + 4) = v41;
      if (v42) {
        nitro::nitro_function::nitro_function(v42);
      }
      uint64_t v43 = (void **)(v40 + 10);
      if (*((char *)v40 + 103) < 0) {
        operator delete(*v43);
      }
      v40[12] = v82;
      *(_OWORD *)uint64_t v43 = v81;
      HIBYTE(v82) = 0;
      LOBYTE(v81) = 0;
      long long v44 = (void **)(v40 + 13);
      if (*((char *)v40 + 127) < 0) {
        operator delete(*v44);
      }
      *(_OWORD *)long long v44 = __p;
      v40[15] = v84;
      HIBYTE(v84) = 0;
      LOBYTE(__p) = 0;
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v40 + 16));
      *((_OWORD *)v40 + 8) = v85;
      v40[18] = v86;
      long long v86 = 0;
      long long v85 = 0uLL;
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v40 + 19));
      *(_OWORD *)(v40 + 19) = v87;
      v40[21] = v88;
      uint64_t v88 = 0;
      long long v87 = 0uLL;
      char v45 = (void **)(v40 + 22);
      if (*((char *)v40 + 199) < 0) {
        operator delete(*v45);
      }
      *(_OWORD *)char v45 = v89;
      v40[24] = v90;
      HIBYTE(v90) = 0;
      LOBYTE(v89) = 0;
      v92[0] = (void **)&v87;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
      v92[0] = (void **)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
      if (SHIBYTE(v84) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v19 = v69;
      uint64_t v23 = v66;
      if (SHIBYTE(v82) < 0) {
        operator delete((void *)v81);
      }
      if (*((void *)&v80 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v80 + 1));
      }
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (a2 == -1) {
        *(_DWORD *)(v20 + 8) = -1;
      }
      *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v20 + 16), a2, &v91)+ 32) = 1;
      if (!v27) {
        goto LABEL_100;
      }
    }
    else
    {
      uint64_t v19 = 0;
      if (!v27) {
        goto LABEL_100;
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v38 = 0;
    if (!v27) {
      goto LABEL_100;
    }
  }
  nitro::nitro_function::nitro_function(v27);
LABEL_100:
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v76 < 0) {
    operator delete(v74);
  }
  uint64_t v20 = *a3;
  if (!v38)
  {
    std::string::basic_string[abi:ne180100]<0>(&v74, "any");
    uint64_t v47 = *(void *)(a1 + 24);
    uint64_t v46 = *(std::__shared_weak_count **)(a1 + 32);
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v91 = a2;
    uint64_t v48 = *(void *)(*(void *)(v47 + 32) + v23);
    int v49 = *(const void **)(v48 + 64);
    if (v49)
    {
      if (v50)
      {
        long long v51 = *(std::__shared_weak_count **)(v48 + 72);
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v77 = v47;
        uint64_t v78 = v46;
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v70 = v19;
        Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t((int *)&v79, (uint64_t)&v77, a2);
        uint64_t v52 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v20 + 40), &v74, (uint64_t)&v74);
        *((_DWORD *)v52 + 14) = v79;
        long long v53 = v80;
        long long v80 = 0uLL;
        size_t v54 = (std::__shared_weak_count *)v52[9];
        *((_OWORD *)v52 + 4) = v53;
        if (v54) {
          nitro::nitro_function::nitro_function(v54);
        }
        long long v55 = (void **)(v52 + 10);
        if (*((char *)v52 + 103) < 0) {
          operator delete(*v55);
        }
        v52[12] = v82;
        *(_OWORD *)long long v55 = v81;
        HIBYTE(v82) = 0;
        LOBYTE(v81) = 0;
        uint64_t v56 = (void **)(v52 + 13);
        if (*((char *)v52 + 127) < 0) {
          operator delete(*v56);
        }
        *(_OWORD *)uint64_t v56 = __p;
        v52[15] = v84;
        HIBYTE(v84) = 0;
        LOBYTE(__p) = 0;
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v52 + 16));
        *((_OWORD *)v52 + 8) = v85;
        v52[18] = v86;
        long long v86 = 0;
        long long v85 = 0uLL;
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v52 + 19));
        *(_OWORD *)(v52 + 19) = v87;
        v52[21] = v88;
        uint64_t v88 = 0;
        long long v87 = 0uLL;
        long long v57 = (void **)(v52 + 22);
        if (*((char *)v52 + 199) < 0) {
          operator delete(*v57);
        }
        *(_OWORD *)long long v57 = v89;
        v52[24] = v90;
        HIBYTE(v90) = 0;
        LOBYTE(v89) = 0;
        v92[0] = (void **)&v87;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
        v92[0] = (void **)&v85;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v92);
        if (SHIBYTE(v84) < 0) {
          operator delete((void *)__p);
        }
        int v58 = v51;
        uint64_t v19 = v70;
        if (SHIBYTE(v82) < 0) {
          operator delete((void *)v81);
        }
        if (*((void *)&v80 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v80 + 1));
        }
        if (v46) {
          nitro::nitro_function::nitro_function(v46);
        }
        if (a2 == -1) {
          *(_DWORD *)(v20 + 8) = -1;
        }
        *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v20 + 16), a2, &v91)+ 32) = 1;
      }
      else
      {
        int v58 = 0;
      }
    }
    else
    {
      int v58 = 0;
      long long v50 = 0;
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    if (v76 < 0) {
      operator delete(v74);
    }
    uint64_t v20 = *a3;
    if (v50)
    {
      uint64_t v19 = v58;
      goto LABEL_157;
    }
    std::string::basic_string[abi:ne180100]<0>(&v79, "any");
    long long v59 = *(std::__shared_weak_count **)(a1 + 32);
    v73[0] = *(void *)(a1 + 24);
    v73[1] = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_reduce_kernel>(&v74, v20, &v79, v73, a2);
    uint64_t v60 = v74;
    uint64_t v19 = v75;
    if (v58) {
      nitro::nitro_function::nitro_function(v58);
    }
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    if (SHIBYTE(v80) < 0) {
      operator delete(v79);
    }
    uint64_t v20 = *a3;
    if (!v60)
    {
      std::string::basic_string[abi:ne180100]<0>(&v79, "any");
      uint64_t v62 = *(std::__shared_weak_count **)(a1 + 32);
      v72[0] = *(void *)(a1 + 24);
      v72[1] = v62;
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_axpby_kernel>(&v74, v20, &v79, v72, a2);
      uint64_t v63 = v74;
      int v27 = v75;
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      if (v62) {
        nitro::nitro_function::nitro_function(v62);
      }
      if (SHIBYTE(v80) < 0) {
        operator delete(v79);
      }
      uint64_t v20 = *a3;
      if (v63)
      {
LABEL_65:
        uint64_t v19 = v27;
        goto LABEL_157;
      }
      std::string::basic_string[abi:ne180100]<0>(&v79, "any");
      uint64_t v64 = *(void *)(a1 + 24);
      unint64_t v65 = *(std::__shared_weak_count **)(a1 + 32);
      v71[0] = v64;
      v71[1] = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_l2_normalize_kernel>(&v74, v20, &v79, v71, a2);
      uint64_t v19 = v75;
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
      if (v65) {
        nitro::nitro_function::nitro_function(v65);
      }
      if (SHIBYTE(v80) < 0) {
        operator delete(v79);
      }
      uint64_t v20 = *a3;
    }
  }
LABEL_157:
  if (*(void *)(v20 + 56) != 1)
  {
    int v61 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (v61) {
      nitro::nitro_function::nitro_function(v61);
    }
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
}

void sub_1926D561C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_reduce_kernel>(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v35 = a5;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*(void *)(*a4 + 32) + 16 * a5);
  BOOL result = *(unsigned char **)(v11 + 64);
  if (result
  {
    unint64_t v13 = result;
    uint64_t v14 = *(void *)(v11 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *a4;
    }
    long long v15 = (std::__shared_weak_count *)a4[1];
    v22[0] = v10;
    v22[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(&v23, (uint64_t)v22, a5);
    float v16 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    *((_DWORD *)v16 + 14) = v23;
    long long v17 = v24;
    long long v24 = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)v16[9];
    *((_OWORD *)v16 + 4) = v17;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v19 = (void **)(v16 + 10);
    if (*((char *)v16 + 103) < 0) {
      operator delete(*v19);
    }
    v16[12] = v26;
    *(_OWORD *)uint64_t v19 = v25;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    uint64_t v20 = (void **)(v16 + 13);
    if (*((char *)v16 + 127) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)uint64_t v20 = __p;
    v16[15] = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__p) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 16));
    *((_OWORD *)v16 + 8) = v29;
    v16[18] = v30;
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 19));
    *(_OWORD *)(v16 + 19) = v31;
    v16[21] = v32;
    uint64_t v32 = 0;
    long long v31 = 0uLL;
    int v21 = (void **)(v16 + 22);
    if (*((char *)v16 + 199) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)int v21 = v33;
    v16[24] = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    v36[0] = (void **)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    v36[0] = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (*((void *)&v24 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (a5 == -1) {
      *(_DWORD *)(a2 + 8) = -1;
    }
    BOOL result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), a5, &v35);
    result[32] = 1;
    *a1 = v13;
    a1[1] = v14;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1926D5A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_axpby_kernel>(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v35 = a5;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*(void *)(*a4 + 32) + 16 * a5);
  BOOL result = *(unsigned char **)(v11 + 64);
  if (result
  {
    unint64_t v13 = result;
    uint64_t v14 = *(void *)(v11 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *a4;
    }
    long long v15 = (std::__shared_weak_count *)a4[1];
    v22[0] = v10;
    v22[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(&v23, (uint64_t)v22, a5);
    float v16 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    *((_DWORD *)v16 + 14) = v23;
    long long v17 = v24;
    long long v24 = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)v16[9];
    *((_OWORD *)v16 + 4) = v17;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v19 = (void **)(v16 + 10);
    if (*((char *)v16 + 103) < 0) {
      operator delete(*v19);
    }
    v16[12] = v26;
    *(_OWORD *)uint64_t v19 = v25;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    uint64_t v20 = (void **)(v16 + 13);
    if (*((char *)v16 + 127) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)uint64_t v20 = __p;
    v16[15] = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__p) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 16));
    *((_OWORD *)v16 + 8) = v29;
    v16[18] = v30;
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 19));
    *(_OWORD *)(v16 + 19) = v31;
    v16[21] = v32;
    uint64_t v32 = 0;
    long long v31 = 0uLL;
    int v21 = (void **)(v16 + 22);
    if (*((char *)v16 + 199) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)int v21 = v33;
    v16[24] = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    v36[0] = (void **)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    v36[0] = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (*((void *)&v24 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (a5 == -1) {
      *(_DWORD *)(a2 + 8) = -1;
    }
    BOOL result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), a5, &v35);
    result[32] = 1;
    *a1 = v13;
    a1[1] = v14;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1926D5D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_l2_normalize_kernel>(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v35 = a5;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*(void *)(*a4 + 32) + 16 * a5);
  BOOL result = *(unsigned char **)(v11 + 64);
  if (result
  {
    unint64_t v13 = result;
    uint64_t v14 = *(void *)(v11 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *a4;
    }
    long long v15 = (std::__shared_weak_count *)a4[1];
    v22[0] = v10;
    v22[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(&v23, (uint64_t)v22, a5);
    float v16 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    *((_DWORD *)v16 + 14) = v23;
    long long v17 = v24;
    long long v24 = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)v16[9];
    *((_OWORD *)v16 + 4) = v17;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v19 = (void **)(v16 + 10);
    if (*((char *)v16 + 103) < 0) {
      operator delete(*v19);
    }
    v16[12] = v26;
    *(_OWORD *)uint64_t v19 = v25;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    uint64_t v20 = (void **)(v16 + 13);
    if (*((char *)v16 + 127) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)uint64_t v20 = __p;
    v16[15] = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__p) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 16));
    *((_OWORD *)v16 + 8) = v29;
    v16[18] = v30;
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 19));
    *(_OWORD *)(v16 + 19) = v31;
    v16[21] = v32;
    uint64_t v32 = 0;
    long long v31 = 0uLL;
    int v21 = (void **)(v16 + 22);
    if (*((char *)v16 + 199) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)int v21 = v33;
    v16[24] = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    v36[0] = (void **)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    v36[0] = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (*((void *)&v24 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (a5 == -1) {
      *(_DWORD *)(a2 + 8) = -1;
    }
    BOOL result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), a5, &v35);
    result[32] = 1;
    *a1 = v13;
    a1[1] = v14;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1926D602C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

void rule_add_auto_context_transfers::transform(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *(void *)&long long v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  if (*a3)
  {
    int v5 = (std::__shared_weak_count *)a3[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "any");
  uint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 40, &__p);
  if ((void *)(v4 + 48) == v6 || (long long v7 = v6, (v8 = v6[8]) == 0))
  {
    unint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v9 = (std::__shared_weak_count *)v6[9];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (std::string *)operator new(0xA8uLL);
    uint64_t v11 = v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE381928;
    LODWORD(v10[1].__r_.__value_.__l.__data_) = 0;
    unint64_t v12 = v10 + 1;
    *(_OWORD *)&v10[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v10[2].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v10[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v10[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v10[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v10[4].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v10[5].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v10[6].__r_.__value_.__l.__data_ = 0u;
    v10[6].__r_.__value_.__r.__words[2] = 0;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[1].__r_.__value_.__l.__size_ = v8;
    v10[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    std::string::operator=(v10 + 2, (const std::string *)(v7 + 10));
    if (v11 != (std::string *)(v7 + 4))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v11[4], (std::string *)v7[16], (std::string *)v7[17], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[17] - v7[16]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v11[5], (std::string *)v7[19], (std::string *)v7[20], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[20] - v7[19]) >> 3));
    }
    std::string::operator=(v11 + 3, (const std::string *)(v7 + 13));
    LODWORD(v11[1].__r_.__value_.__l.__data_) = *((_DWORD *)v7 + 14);
    std::string::operator=(v11 + 6, (const std::string *)(v7 + 22));
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  if (SBYTE7(v48) < 0)
  {
    operator delete((void *)__p);
    if (!v12) {
      goto LABEL_70;
    }
  }
  else if (!v12)
  {
    goto LABEL_70;
  }
  std::string::size_type size = v12->__r_.__value_.__l.__size_;
  unint64_t v13 = (std::__shared_weak_count *)v12->__r_.__value_.__r.__words[2];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long __p = 0u;
  long long v48 = 0u;
  long long v29 = v5;
  std::string::operator=((std::string *)(*a2 + 7), v12 + 5);
  long long v15 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v53, "context_transfer");
  if ((v12[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v16 = HIBYTE(v12[1].__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v16 = v12[1].__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v42, v16 + 4);
  if (v44 >= 0) {
    long long v17 = &v42;
  }
  else {
    long long v17 = v42;
  }
  if (v16)
  {
    if ((v12[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      data = v12 + 1;
    }
    else {
      data = (std::string *)v12[1].__r_.__value_.__l.__data_;
    }
    memmove(v17, data, v16);
  }
  strcpy((char *)v17 + v16, "_ctx");
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (uint64_t)v12[4].__r_.__value_.__l.__data_, v12[4].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4].__r_.__value_.__l.__size_ - v12[4].__r_.__value_.__r.__words[0]) >> 3));
  uint64_t v19 = (const void **)v12[3].__r_.__value_.__l.__data_;
  if (*((char *)v19 + 23) >= 0) {
    size_t v20 = *((unsigned __int8 *)v19 + 23);
  }
  else {
    size_t v20 = (size_t)v19[1];
  }
  int v21 = &v51;
  std::string::basic_string[abi:ne180100]((uint64_t)&v51, v20 + 4);
  if (v52 < 0) {
    int v21 = (long long *)v51;
  }
  if (v20)
  {
    if (*((char *)v19 + 23) >= 0) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = *v19;
    }
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, "_ctx");
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v49 = &v36;
  char v50 = 0;
  uint64_t v36 = (std::string *)operator new(0x18uLL);
  uint64_t v37 = v36;
  uint64_t v38 = v36 + 1;
  uint64_t v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, &v51, &v53, v36);
  Espresso::sequential_builder::add<Espresso::context_transfer_params>(&v45, v15, (uint64_t)&v53, (uint64_t)&v42, (uint64_t)&__p, v39, v40, (uint64_t *)&v36);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  int v49 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  if (v52 < 0) {
    operator delete((void *)v51);
  }
  *(void *)&long long v51 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if (v44 < 0) {
    operator delete(v42);
  }
  if (v54 < 0) {
    operator delete((void *)v53);
  }
  uint64_t v23 = (uint64_t)*a2;
  std::string::size_type v34 = size;
  int v35 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = (const void **)v12[3].__r_.__value_.__l.__data_;
  if (*((char *)v24 + 23) >= 0) {
    size_t v25 = *((unsigned __int8 *)v24 + 23);
  }
  else {
    size_t v25 = (size_t)v24[1];
  }
  uint64_t v26 = &v53;
  std::string::basic_string[abi:ne180100]((uint64_t)&v53, v25 + 4);
  if (v54 < 0) {
    uint64_t v26 = (long long *)v53;
  }
  if (v25)
  {
    if (*((char *)v24 + 23) >= 0) {
      int v27 = v24;
    }
    else {
      int v27 = *v24;
    }
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "_ctx");
  long long v31 = 0;
  uint64_t v32 = 0;
  long long v33 = 0;
  uint64_t v42 = &v31;
  char v43 = 0;
  long long v31 = (std::string *)operator new(0x18uLL);
  uint64_t v32 = v31;
  long long v33 = v31 + 1;
  uint64_t v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, &v53, &v55, v31);
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, (uint64_t)v12[3].__r_.__value_.__l.__data_, v12[3].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[3].__r_.__value_.__l.__size_ - v12[3].__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel(v23, &v34, (uint64_t)&v12[2], (uint64_t)&v12[1], &v31, v30);
  uint64_t v42 = v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  uint64_t v42 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (v54 < 0) {
    operator delete((void *)v53);
  }
  int v5 = v29;
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  uint64_t v28 = *a2;
  if ((*((char *)*a2 + 79) & 0x80000000) == 0)
  {
    *((unsigned char *)v28 + 56) = 0;
    *((unsigned char *)v28 + 79) = 0;
    if (!v13) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  *(unsigned char *)v28[7] = 0;
  v28[8] = 0;
  if (v13) {
LABEL_69:
  }
    nitro::nitro_function::nitro_function(v13);
LABEL_70:
  if (v11) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1926D6600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add<Espresso::context_transfer_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  long long v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  size_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  size_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926D694C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::base_kernel>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::base_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::graph_node_t<Espresso::base_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void rule_add_auto_context_transfers::~rule_add_auto_context_transfers(rule_add_auto_context_transfers *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_add_auto_context_transfers>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<rule_add_auto_context_transfers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3805E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<rule_add_auto_context_transfers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3805E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::net_number_of_bits(uint64_t a1)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 32;
  uint64_t v2 = operator new(8uLL);
  long long __p = v2;
  void *v2 = 100;
  uint64_t v13 = v2 + 1;
  uint64_t v14 = v2 + 1;
  uint64_t v3 = *(Espresso::net **)a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v5 = v16;
  }
  else
  {
    int v5 = &v15;
  }
  uint64_t v19 = MEMORY[0x1E4F143A8];
  uint64_t v20 = 3221225472;
  uint64_t v21 = ___Z26update_number_of_bits_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke;
  uint64_t v22 = &__block_descriptor_48_e9_v16__0_v8l;
  p_p = &__p;
  long long v24 = v5 + 3;
  Espresso::single_match_replace<Espresso::generic_convolution_kernel>(v3, &v19);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v6 = *(Espresso::net **)a1;
  long long v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = MEMORY[0x1E4F143A8];
  uint64_t v20 = 3221225472;
  uint64_t v21 = ___Z26update_number_of_bits_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke;
  uint64_t v22 = &__block_descriptor_48_e9_v16__0_v8l;
  p_p = &__p;
  long long v24 = v16 + 3;
  Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(v6, &v19);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  std::string::size_type v8 = *(Espresso::net **)a1;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___ZN8Espresso18net_number_of_bitsENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v11[3] = &unk_1E5746D68;
  v11[4] = &v15;
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(v8, v11);
  uint64_t v9 = *((unsigned int *)v16 + 6);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v15, 8);
  return v9;
}

void sub_1926D6D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___Z26update_number_of_bits_convIN8Espresso26generic_convolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int ***)(a1 + 32);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 != v4)
  {
    char v7 = 0;
    do
    {
      std::string::size_type v8 = *(uint64_t (****)(void))(*(void *)(*(void *)a2 + 8) + 8);
      int v9 = (**v8)(v8);
      int v10 = *v3++;
      v7 |= v9 == v10;
    }
    while (v3 != v4);
    if (v7)
    {
      uint64_t v11 = *(void **)a2;
      uint64_t v12 = *(void *)(*(void *)a2 + 472);
      if (v12
        && *(void *)v12
        && (*(void *)(v12 + 32) || *(void *)(v12 + 48) || *(void *)(v12 + 64) || *(void *)(v12 + 80)))
      {
        int v13 = *(_DWORD *)(v12 + 156);
        uint64_t v14 = *(int **)(a1 + 40);
        if (*v14 < v13) {
          int v13 = *v14;
        }
        *uint64_t v14 = v13;
      }
      if (v11[63])
      {
        uint64_t v15 = *(int **)(a1 + 40);
        int v16 = *v15;
        if (*v15 >= 8) {
          int v16 = 8;
        }
        *uint64_t v15 = v16;
      }
      (*(void (**)(uint64_t *__return_ptr))(*v11 + 552))(&v20);
      uint64_t v17 = v20;
      if (v21) {
        nitro::nitro_function::nitro_function(v21);
      }
      if (v17)
      {
        int v18 = *(int **)(a1 + 40);
        int v19 = *v18;
        if (*v18 >= 16) {
          int v19 = 16;
        }
        int *v18 = v19;
      }
    }
  }
}

void ___Z26update_number_of_bits_convIN8Espresso28generic_deconvolution_kernelEEvNSt3__110shared_ptrINS0_3netEEERiRNS2_6vectorIiNS2_9allocatorIiEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int ***)(a1 + 32);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 != v4)
  {
    char v7 = 0;
    do
    {
      std::string::size_type v8 = *(uint64_t (****)(void))(*(void *)(*(void *)a2 + 8) + 8);
      int v9 = (**v8)(v8);
      int v10 = *v3++;
      v7 |= v9 == v10;
    }
    while (v3 != v4);
    if (v7)
    {
      uint64_t v11 = *(void **)a2;
      uint64_t v12 = *(void *)(*(void *)a2 + 472);
      if (v12
        && *(void *)v12
        && (*(void *)(v12 + 32) || *(void *)(v12 + 48) || *(void *)(v12 + 64) || *(void *)(v12 + 80)))
      {
        int v13 = *(_DWORD *)(v12 + 156);
        uint64_t v14 = *(int **)(a1 + 40);
        if (*v14 < v13) {
          int v13 = *v14;
        }
        *uint64_t v14 = v13;
      }
      if (v11[63])
      {
        uint64_t v15 = *(int **)(a1 + 40);
        int v16 = *v15;
        if (*v15 >= 8) {
          int v16 = 8;
        }
        *uint64_t v15 = v16;
      }
      (*(void (**)(uint64_t *__return_ptr))(*v11 + 552))(&v20);
      uint64_t v17 = v20;
      if (v21) {
        nitro::nitro_function::nitro_function(v21);
      }
      if (v17)
      {
        int v18 = *(int **)(a1 + 40);
        int v19 = *v18;
        if (*v18 >= 16) {
          int v19 = 16;
        }
        int *v18 = v19;
      }
    }
  }
}

void ___ZN8Espresso18net_number_of_bitsENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int (****)(void))(*(void *)(*a2 + 8) + 8);
  if (!(**v4)(v4) || (int v5 = *(unsigned int (****)(void))(*(void *)(*a2 + 8) + 8), (**v5)(v5) == 100))
  {
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)(*a2 + 440);
    if (v7
      && *(void *)v7
      && (*(void *)(v7 + 32) || *(void *)(v7 + 48) || *(void *)(v7 + 64) || *(void *)(v7 + 80)))
    {
      int v8 = *(_DWORD *)(v7 + 156);
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
      if (*(_DWORD *)(v9 + 24) < v8) {
        int v8 = *(_DWORD *)(v9 + 24);
      }
      *(_DWORD *)(v9 + 24) = v8;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 472))(&v13);
    uint64_t v10 = v13;
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      int v12 = *(_DWORD *)(v11 + 24);
      if (v12 >= 16) {
        int v12 = 16;
      }
      *(_DWORD *)(v11 + 24) = v12;
    }
  }
}

void ___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke(uint64_t a1)
{
  v2[0] = 1;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  int v3 = 723714176;
  kdebug_trace();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v2);
}

void sub_1926D724C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso20espresso_async_cache8retrieveEU13block_pointerFvRNS_4blobIfLi4EEEENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke_2(uint64_t a1)
{
  v2[0] = 1;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  int v3 = 723714176;
  kdebug_trace();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v2);
}

void sub_1926D72E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1926D741C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926D76D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ETImagePreprocessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1926D7824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926D79C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926D7CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v22 = v20;

  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,void>(uint64_t *a1, void *a2, int a3)
{
  long long v6 = (char *)operator new(0x118uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE38C588;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE3718A0;
  *((void *)v6 + 34) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = a3;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, void *a2)
{
  uint64_t result = a2[1];
  uint64_t v5 = result - *a2;
  if (result != *a2)
  {
    unint64_t v6 = v5 + 1;
    if (v5 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, 0x40uLL);
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v6);
      uint64_t v8 = 63;
      if (((v6 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v6);
      return *a2 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(void *)(result + 32) = v3 - a3 + (v3 << 6);
      *(void *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(void *)(result + 48) = 0;
    unsigned int v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(void *)(result + 48) = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  unsigned int v6 = -1;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E) {
    unsigned int v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
        unint64_t v12 = v6 - 1;
      }
      while (*(void *)(a1 + 40) <= v12);
      uint64_t v13 = result << v5;
      if (v5 >= 0x40) {
        uint64_t v13 = 0;
      }
      uint64_t result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v14 = *(void *)(a1 + 24);
  if (v2 < v14)
  {
    uint64_t v15 = *(unsigned int **)a1;
    unint64_t v16 = *(void *)(a1 + 48);
    unint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(a1 + 60);
    unsigned int v19 = *v15;
    while (1)
    {
      unsigned int v20 = v19 / 0xADC8;
      unsigned int v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      BOOL v9 = v21 >= v20;
      unsigned int v22 = v21 - v20;
      if (v9) {
        int v23 = 0;
      }
      else {
        int v23 = 0x7FFFFFFF;
      }
      unsigned int v19 = v23 + v22;
      unint64_t v24 = v19 - 1;
      if (v16 > v24)
      {
        uint64_t v25 = result << (v17 + 1);
        if (v17 >= 0x3F) {
          uint64_t v25 = 0;
        }
        uint64_t result = v25 + (v18 & v24);
        if (++v2 == v14) {
          break;
        }
      }
    }
    *uint64_t v15 = v19;
  }
  return result;
}

void sub_1926D83E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926D8BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  _Unwind_Resume(a1);
}

void Espresso::analysis_make_ssa::serialize(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::analysis_make_ssa::deserialize()
{
  return 0;
}

void Espresso::analysis_make_ssa::~analysis_make_ssa(Espresso::analysis_make_ssa *this)
{
  Espresso::analysis_make_ssa::~analysis_make_ssa(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE34C1A8;
  unint64_t v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)v2);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void Espresso::pass_make_ssa::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v265 = *MEMORY[0x1E4F143B8];
  v221 = Espresso::net::get_analysis<Espresso::control_flow_graph>((uint64_t)a1);
  uint64_t v4 = (char *)operator new(0x98uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE386120;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((void *)v4 + 18) = 0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  unint64_t v5 = v4 + 112;
  v214 = v4 + 24;
  *((void *)v4 + 3) = &unk_1EE34C1A8;
  *((_OWORD *)v4 + 2) = 0u;
  uint64_t v239 = (uint64_t)(v4 + 32);
  *((_OWORD *)v4 + 3) = 0u;
  *((_DWORD *)v4 + 16) = 1065353216;
  *(_OWORD *)(v4 + 72) = 0u;
  uint64_t v217 = (uint64_t)(v4 + 72);
  *(_OWORD *)(v4 + 88) = 0u;
  *((_DWORD *)v4 + 26) = 1065353216;
  v219 = v4;
  *((_DWORD *)v4 + 36) = 1065353216;
  long long v260 = 0u;
  long long v261 = 0u;
  int v262 = 1065353216;
  long long v257 = 0u;
  long long v258 = 0u;
  int v259 = 1065353216;
  long long v254 = 0u;
  long long v255 = 0u;
  int v256 = 1065353216;
  uint64_t v6 = *((void *)a1 + 80);
  long long v240 = a1;
  for (uint64_t i = *((void *)a1 + 81); v6 != i; v6 += 24)
  {
    v264[0].__r_.__value_.__r.__words[0] = v6;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v260, v6, (uint64_t)&std::piecewise_construct, (long long **)v264)[5] = 1;
  }
  uint64_t v216 = (uint64_t)v5;
  unsigned int v8 = (uint64_t *)*((void *)v221 + 1);
  int v227 = (uint64_t *)*((void *)v221 + 2);
  if (v8 != v227)
  {
    BOOL v9 = (uint64_t **)((char *)a1 + 352);
    unsigned int v10 = (void *)((char *)v240 + 408);
    do
    {
      unint64_t v230 = v8;
      uint64_t v11 = *v8;
      uint64_t v12 = *(void *)(*v8 + 8);
      uint64_t v233 = v11;
      while (v12 != v11)
      {
        uint64_t v236 = v12;
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v14 = *(void *)(v13 + 16);
        uint64_t v15 = *(void *)(v13 + 24);
        while (v14 != v15)
        {
          v264[0].__r_.__value_.__r.__words[0] = v14;
          unint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v260, v14, (uint64_t)&std::piecewise_construct, (long long **)v264);
          std::string::size_type v17 = v16[5];
          if (v17)
          {
            v264[0].__r_.__value_.__s.__data_[0] = 1;
            if (*(char *)(v14 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v264[0].__r_.__value_.__r.__words[1], *(const std::string::value_type **)v14, *(void *)(v14 + 8));
            }
            else
            {
              long long v18 = *(_OWORD *)v14;
              v264[1].__r_.__value_.__r.__words[0] = *(void *)(v14 + 16);
              *(_OWORD *)&v264[0].__r_.__value_.__r.__words[1] = v18;
            }
            v264[1].__r_.__value_.__l.__size_ = v17;
            Espresso::ssa_blob_name::repr(&__str, (uint64_t)v264);
            if (v264[1].__r_.__value_.__s.__data_[7] < 0) {
              operator delete((void *)v264[0].__r_.__value_.__l.__size_);
            }
            v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            unsigned int v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v257, (uint64_t)&__str, (uint64_t)&std::piecewise_construct, (long long **)v264);
            std::string::operator=((std::string *)(v20 + 5), (const std::string *)v14);
            v264[0].__r_.__value_.__r.__words[0] = v14;
            unsigned int v21 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v257, v14, (uint64_t)&std::piecewise_construct, (long long **)v264);
            std::string::operator=((std::string *)(v21 + 5), (const std::string *)v14);
            uint64_t v22 = v16[5];
            v264[0].__r_.__value_.__r.__words[0] = v14;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v239, v14, (uint64_t)&std::piecewise_construct, (long long **)v264)[5] = v22 + 1;
            v264[0].__r_.__value_.__r.__words[0] = v14;
            int v23 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v254, (unsigned __int8 *)v14, (long long **)v264);
            if (*((void *)v23 + 5) == *((void *)v23 + 6))
            {
              v264[0].__r_.__value_.__r.__words[0] = v14;
              unint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v254, (unsigned __int8 *)v14, (long long **)v264);
              Espresso::unique_vector<std::string>::push_back_if_not_present((uint64_t)(v24 + 40), (long long *)v14);
            }
            v264[0].__r_.__value_.__r.__words[0] = v14;
            uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v254, (unsigned __int8 *)v14, (long long **)v264);
            Espresso::unique_vector<std::string>::push_back_if_not_present((uint64_t)(v25 + 40), (long long *)&__str);
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v240 + 45), (void *)v14))
            {
              v264[0].__r_.__value_.__r.__words[0] = v14;
              uint64_t v26 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void *)v14, (uint64_t)&std::piecewise_construct, (long long **)v264);
              v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              int v27 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, &__str, (uint64_t)&std::piecewise_construct, (long long **)v264);
              *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
              if (v27 != v26) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v27 + 72, *((char **)v26 + 9), *((void *)v26 + 10), (uint64_t)(*((void *)v26 + 10) - *((void *)v26 + 9)) >> 2);
              }
            }
            uint64_t v28 = (void *)*((void *)v240 + 50);
            if (v28 != v10)
            {
              do
              {
                LODWORD(v264[0].__r_.__value_.__l.__data_) = *((_DWORD *)v28 + 8);
                std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100]((uint64_t)&v264[0].__r_.__value_.__l.__size_, v28 + 5);
                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((void *)v264[0].__r_.__value_.__r.__words[2], (void *)v14))
                {
                  *(void *)&long long v248 = v14;
                  long long v29 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v264[0].__r_.__value_.__l.__size_, (void *)v14, (uint64_t)&std::piecewise_construct, (long long **)&v248);
                  *(void *)&long long v248 = &__str;
                  uint64_t v30 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v264[0].__r_.__value_.__l.__size_, &__str, (uint64_t)&std::piecewise_construct, (long long **)&v248);
                  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v29 + 56);
                  if (v30 != v29) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 72, *((char **)v29 + 9), *((void *)v29 + 10), (uint64_t)(*((void *)v29 + 10) - *((void *)v29 + 9)) >> 2);
                  }
                }
                std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy((void *)v264[0].__r_.__value_.__r.__words[2]);
                long long v31 = (void *)v28[1];
                if (v31)
                {
                  do
                  {
                    uint64_t v32 = v31;
                    long long v31 = (void *)*v31;
                  }
                  while (v31);
                }
                else
                {
                  do
                  {
                    uint64_t v32 = (void *)v28[2];
                    BOOL v202 = *v32 == (void)v28;
                    uint64_t v28 = v32;
                  }
                  while (!v202);
                }
                uint64_t v28 = v32;
              }
              while (v32 != v10);
            }
            std::string::operator=((std::string *)v14, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            uint64_t v19 = v16[5];
          }
          else
          {
            uint64_t v19 = 0;
          }
          v16[5] = v19 + 1;
          v14 += 24;
        }
        uint64_t v11 = v233;
        uint64_t v12 = *(void *)(v236 + 8);
      }
      unsigned int v8 = v230 + 2;
    }
    while (v230 + 2 != v227);
  }
  long long v33 = (Espresso *)Espresso::control_flow_graph::blob_defined_in_block((char *)&__str, (uint64_t)v221);
  int v35 = (void *)v239;
  uint64_t v36 = *((void *)v240 + 121);
  uint64_t v37 = (std::__shared_weak_count *)*((void *)v240 + 122);
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v218 = v37;
  if (!v36) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot do pass_make_ssa without an interpreter");
  }
  uint64_t v38 = (uint64_t *)*((void *)v221 + 1);
  v220 = (uint64_t *)*((void *)v221 + 2);
  uint64_t v213 = v36;
  if (v38 == v220)
  {
    long long v248 = 0u;
    long long v249 = 0u;
    int v250 = 1065353216;
  }
  else
  {
    uint64_t v223 = v36 + 144;
    long long v225 = (uint64_t **)((char *)v240 + 352);
    uint64_t v39 = (void *)((char *)v240 + 408);
    do
    {
      long long v248 = 0u;
      long long v249 = 0u;
      int v250 = 1065353216;
      long long v245 = 0u;
      long long v246 = 0u;
      int v247 = 1065353216;
      v224 = v38;
      uint64_t v40 = *(void *)(*v38 + 8);
      for (j = *v38; v40 != j; int v35 = (void *)v239)
      {
        uint64_t v41 = *(void **)(v40 + 16);
        uint64_t v43 = v41[5];
        uint64_t v42 = v41[6];
        uint64_t v226 = v40;
        if (v43 != v42)
        {
          do
          {
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v35, v43)&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v248, v43)&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v245, v43))
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v248, v43, v43);
              v264[0].__r_.__value_.__r.__words[0] = v43;
              v237 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v260, v43, (uint64_t)&std::piecewise_construct, (long long **)v264);
              uint64_t v44 = **(void **)(v40 + 16);
              int v234 = *(_DWORD *)(v44 + 12);
              uint64_t v45 = *(void **)(v44 + 64);
              unint64_t v46 = v45[1];
              uint64_t v47 = (std::__shared_weak_count *)v45[2];
              unint64_t v243 = v46;
              int v244 = v47;
              if ((!v47 {
                 || (atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed),
              }
                     long long v48 = *(uint64_t **)(v40 + 16),
                     uint64_t v44 = *v48,
                     (uint64_t v45 = *(void **)(*v48 + 64)) != 0))
              {
                char v50 = *(std::__shared_weak_count **)(v44 + 72);
                if (v50) {
                  atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                unint64_t v46 = v49[41];
                long long v51 = (std::__shared_weak_count *)v49[42];
                if (v51) {
                  atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                unint64_t v243 = v46;
                int v244 = v51;
                uint64_t v231 = v51;
                if (v47) {
                  nitro::nitro_function::nitro_function(v47);
                }
                BOOL v52 = !(***(unsigned int (****)(void))(v46 + 8))(*(void *)(v46 + 8))
                   || (***(unsigned int (****)(void))(v46 + 8))(*(void *)(v46 + 8)) == 100
                   || (***(uint64_t (****)(void))(v46 + 8))(*(void *)(v46 + 8)) == 50002;
                int v234 = !v52;
                if (v50) {
                  nitro::nitro_function::nitro_function(v50);
                }
              }
              else
              {
                uint64_t v231 = v47;
              }
              long long v53 = (std::string *)operator new(0x150uLL);
              v53->__r_.__value_.__l.__size_ = 0;
              v53->__r_.__value_.__r.__words[2] = 0;
              v53->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE388538;
              Espresso::base_kernel::base_kernel((uint64_t)&v53[1], (uint64_t *)&v243);
              v53[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE35EE40;
              v53[13].__r_.__value_.__l.__size_ = 0;
              v53[13].__r_.__value_.__r.__words[2] = 0;
              v53[13].__r_.__value_.__r.__words[0] = 0;
              char v54 = (char *)operator new(0x58uLL);
              unint64_t v228 = v46;
              *((void *)v54 + 1) = 0;
              *((void *)v54 + 2) = 0;
              *(void *)char v54 = &unk_1EE3817A0;
              *(_OWORD *)(v54 + 24) = 0u;
              long long v55 = v54 + 24;
              *(_OWORD *)(v54 + 40) = 0u;
              *(_OWORD *)(v54 + 56) = 0u;
              *(_OWORD *)(v54 + 72) = 0u;
              std::string::size_type v56 = v237[5];
              v264[0].__r_.__value_.__s.__data_[0] = 1;
              if (*(char *)(v43 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v264[0].__r_.__value_.__r.__words[1], *(const std::string::value_type **)v43, *(void *)(v43 + 8));
              }
              else
              {
                long long v57 = *(_OWORD *)v43;
                v264[1].__r_.__value_.__r.__words[0] = *(void *)(v43 + 16);
                *(_OWORD *)&v264[0].__r_.__value_.__r.__words[1] = v57;
              }
              v264[1].__r_.__value_.__l.__size_ = v56;
              Espresso::ssa_blob_name::repr(&__p, (uint64_t)v264);
              if (v264[1].__r_.__value_.__s.__data_[7] < 0) {
                operator delete((void *)v264[0].__r_.__value_.__l.__size_);
              }
              int v58 = (std::string::__raw *)&v53[13];
              std::string::operator=(v53 + 13, (const std::string *)v43);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(v264, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else {
                v264[0] = __p;
              }
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(v54 + 40), v264, (long long *)&v264[1], 1uLL);
              if (SHIBYTE(v264[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v264[0].__r_.__value_.__l.__data_);
              }
              long long v59 = (char *)operator new(0xF8uLL);
              *((void *)v59 + 1) = 0;
              *((void *)v59 + 2) = 0;
              *(void *)long long v59 = &unk_1EE389DF0;
              uint64_t v60 = v59 + 24;
              *((void *)v59 + 3) = &unk_1EE36C758;
              *(_OWORD *)(v59 + 40) = 0u;
              *(_OWORD *)(v59 + 56) = 0u;
              *(_OWORD *)(v59 + 72) = 0u;
              *(_OWORD *)(v59 + 88) = 0u;
              *(_OWORD *)(v59 + 104) = 0u;
              *(_OWORD *)(v59 + 120) = 0u;
              *(_OWORD *)(v59 + 136) = 0u;
              *(_OWORD *)(v59 + 152) = 0u;
              *(_OWORD *)(v59 + 161) = 0u;
              *((_OWORD *)v59 + 13) = 0u;
              *((_OWORD *)v59 + 14) = 0u;
              *((void *)v59 + 30) = 0;
              int v61 = (std::__shared_weak_count *)*((void *)v54 + 4);
              *((void *)v54 + 3) = v59 + 24;
              *((void *)v54 + 4) = v59;
              if (v61)
              {
                nitro::nitro_function::nitro_function(v61);
                uint64_t v60 = *(char **)v55;
              }
              atomic_fetch_add_explicit((atomic_ullong *volatile)&v53->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
              uint64_t v62 = (std::__shared_weak_count *)*((void *)v60 + 9);
              *((void *)v60 + 8) = v53 + 1;
              *((void *)v60 + 9) = v53;
              if (v62) {
                nitro::nitro_function::nitro_function(v62);
              }
              MEMORY[0x192FF0F50](*(void *)v55 + 40, "phi_virtual");
              std::operator+<char>();
              uint64_t v63 = *(void *)v55 + 16;
              if (*(char *)(*(void *)v55 + 39) < 0) {
                operator delete(*(void **)v63);
              }
              std::string::size_type v64 = v264[0].__r_.__value_.__r.__words[2];
              *(_OWORD *)uint64_t v63 = *(_OWORD *)&v264[0].__r_.__value_.__l.__data_;
              *(void *)(v63 + 16) = v64;
              unint64_t v65 = (Espresso *)(***(uint64_t (****)(void))(v228 + 8))(*(void *)(v228 + 8));
              uint64_t v66 = *(void *)v55;
              *(_DWORD *)(v66 + 8) = v65;
              *(_DWORD *)(v66 + 12) = v234;
              uint64_t v68 = Espresso::espresso_os_log_subsystem(v65, v67);
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v83 = **(void **)(v226 + 16);
                unint64_t v84 = (void *)(v83 + 40);
                if (*(char *)(v83 + 63) < 0) {
                  unint64_t v84 = (void *)*v84;
                }
                long long v85 = (void *)(v83 + 16);
                if (*(char *)(v83 + 39) < 0) {
                  long long v85 = (void *)*v85;
                }
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if (SHIBYTE(v53[13].__r_.__value_.__r.__words[2]) < 0) {
                  int v58 = (std::string::__raw *)v58->__words[0];
                }
                int v87 = *(_DWORD *)(*(void *)v55 + 8);
                LODWORD(v264[0].__r_.__value_.__l.__data_) = 67110146;
                HIDWORD(v264[0].__r_.__value_.__r.__words[0]) = v87;
                LOWORD(v264[0].__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v264[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v84;
                WORD1(v264[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v264[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v85;
                WORD2(v264[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)v264[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)p_p;
                HIWORD(v264[1].__r_.__value_.__r.__words[1]) = 2080;
                v264[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v58;
                _os_log_debug_impl(&dword_1920CB000, v68, OS_LOG_TYPE_DEBUG, "adding phi: pl=%d kernel_type=%s kernel_name=%s top=%s k->original_blob_name=%s\n", (uint8_t *)v264, 0x30u);
              }

              uint64_t v69 = *v224;
              uint64_t v70 = *(uint64_t **)(*v224 + 8);
              uint64_t v71 = operator new(0x20uLL);
              void v71[2] = v55;
              void v71[3] = v54;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 1, 1uLL, memory_order_relaxed);
              uint64_t v72 = *v70;
              *(void *)(v72 + 8) = v71;
              *uint64_t v71 = v72;
              *uint64_t v70 = (uint64_t)v71;
              v71[1] = v70;
              ++*(void *)(v69 + 16);
              uint64_t v73 = v237[5] + 1;
              v237[5] = v73;
              v264[0].__r_.__value_.__r.__words[0] = v43;
              std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v223, v43, (uint64_t)&std::piecewise_construct, (long long **)v264)[5] = v73;
              v264[0].__r_.__value_.__r.__words[0] = v43;
              uint64_t v74 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v254, (unsigned __int8 *)v43, (long long **)v264);
              Espresso::unique_vector<std::string>::push_back_if_not_present((uint64_t)(v74 + 40), (long long *)&__p);
              v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              long long v75 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v257, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (long long **)v264);
              std::string::operator=((std::string *)(v75 + 5), (const std::string *)v43);
              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v240 + 45), (void *)v43))
              {
                v264[0].__r_.__value_.__r.__words[0] = v43;
                char v76 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v225, (void *)v43, (uint64_t)&std::piecewise_construct, (long long **)v264);
                v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                uint64_t v77 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v225, &__p, (uint64_t)&std::piecewise_construct, (long long **)v264);
                *(_OWORD *)(v77 + 56) = *(_OWORD *)(v76 + 56);
                if (v77 != v76) {
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v77 + 72, *((char **)v76 + 9), *((void *)v76 + 10), (uint64_t)(*((void *)v76 + 10) - *((void *)v76 + 9)) >> 2);
                }
              }
              uint64_t v78 = (void *)*((void *)v240 + 50);
              if (v78 != v39)
              {
                do
                {
                  LODWORD(v264[0].__r_.__value_.__l.__data_) = *((_DWORD *)v78 + 8);
                  std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100]((uint64_t)&v264[0].__r_.__value_.__l.__size_, v78 + 5);
                  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((void *)v264[0].__r_.__value_.__r.__words[2], (void *)v43))
                  {
                    v263 = (std::string *)v43;
                    uint64_t v79 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v264[0].__r_.__value_.__l.__size_, (void *)v43, (uint64_t)&std::piecewise_construct, (long long **)&v263);
                    v263 = &__p;
                    long long v80 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v264[0].__r_.__value_.__l.__size_, &__p, (uint64_t)&std::piecewise_construct, (long long **)&v263);
                    *(_OWORD *)(v80 + 56) = *(_OWORD *)(v79 + 56);
                    if (v80 != v79) {
                      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v80 + 72, *((char **)v79 + 9), *((void *)v79 + 10), (uint64_t)(*((void *)v79 + 10) - *((void *)v79 + 9)) >> 2);
                    }
                  }
                  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy((void *)v264[0].__r_.__value_.__r.__words[2]);
                  long long v81 = (void *)v78[1];
                  if (v81)
                  {
                    do
                    {
                      unint64_t v82 = v81;
                      long long v81 = (void *)*v81;
                    }
                    while (v81);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v82 = (void *)v78[2];
                      BOOL v202 = *v82 == (void)v78;
                      uint64_t v78 = v82;
                    }
                    while (!v202);
                  }
                  uint64_t v78 = v82;
                }
                while (v82 != v39);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v54);
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v53);
              int v35 = (void *)v239;
              if (v231) {
                nitro::nitro_function::nitro_function(v231);
              }
              uint64_t v40 = v226;
            }
            v43 += 24;
          }
          while (v43 != v42);
          uint64_t v41 = *(void **)(v40 + 16);
        }
        uint64_t v88 = v41[2];
        uint64_t v89 = v41[3];
        while (v88 != v89)
        {
          Espresso::map_const_get<std::unordered_map<std::string,std::string>>(v264, &v257, v88, v88);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v245, (uint64_t)v264, (uint64_t)v264);
          if (SHIBYTE(v264[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v264[0].__r_.__value_.__l.__data_);
          }
          v88 += 24;
        }
        uint64_t v40 = *(void *)(v40 + 8);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v245);
      long long v33 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v248);
      uint64_t v38 = v224 + 2;
    }
    while (v224 + 2 != v220);
    uint64_t v91 = *((void *)v221 + 1);
    uint64_t v90 = *((void *)v221 + 2);
    long long v248 = 0u;
    long long v249 = 0u;
    int v250 = 1065353216;
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v90 != v91)
    {
      unint64_t v92 = 0;
      do
      {
        uint64_t v93 = *(void *)(v91 + 16 * v92);
        uint64_t v94 = *(void *)(v93 + 8);
        if (v94 != v93)
        {
          do
          {
            uint64_t v95 = *(void *)(v94 + 16);
            BOOL v96 = *(const std::string **)(v95 + 16);
            uint64_t v97 = *(const std::string **)(v95 + 24);
            while (v96 != v97)
            {
              long long v33 = (Espresso *)Espresso::ssa_blob_name::ssa_blob_name((uint64_t)v264, (uint64_t)v96);
              if (v264[0].__r_.__value_.__s.__data_[0])
              {
                *(void *)&long long v245 = &v264[0].__r_.__value_.__l.__size_;
                uint64_t v98 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v248, (unsigned __int8 *)&v264[0].__r_.__value_.__s.__data_[8], (uint64_t)&std::piecewise_construct, (long long **)&v245);
                *(void *)&long long v245 = &__p;
                uint64_t v99 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v98 + 40, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v245);
                long long v33 = (Espresso *)std::string::operator=(v99 + 1, v96);
              }
              if (v264[1].__r_.__value_.__s.__data_[7] < 0) {
                operator delete((void *)v264[0].__r_.__value_.__l.__size_);
              }
              ++v96;
            }
            uint64_t v94 = *(void *)(v94 + 8);
          }
          while (v94 != v93);
          unint64_t v92 = __p.__r_.__value_.__r.__words[0];
          uint64_t v91 = *((void *)v221 + 1);
          uint64_t v90 = *((void *)v221 + 2);
        }
        __p.__r_.__value_.__r.__words[0] = ++v92;
      }
      while (v92 < (v90 - v91) >> 4);
    }
  }
  long long v245 = 0u;
  long long v246 = 0u;
  int v247 = 1065353216;
  LODWORD(v263) = 1;
  do
  {
    uint64_t v100 = Espresso::espresso_os_log_subsystem(v33, v34);
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v264[0].__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_1920CB000, v100, OS_LOG_TYPE_DEBUG, "pass_make_ssa: phi simplify iteration", (uint8_t *)v264, 2u);
    }

    Espresso::control_flow_graph::blob_defined_in_block((char *)v264, (uint64_t)v221);
    if (data)
    {
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__str.__r_.__value_.__r.__words[2]);
      __str.__r_.__value_.__r.__words[2] = 0;
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        uint64_t v102 = 0;
        do
          *(void *)(__str.__r_.__value_.__r.__words[0] + 8 * v102++) = 0;
        while (size != v102);
      }
      std::string::pointer data = 0;
    }
    std::string::size_type v103 = v264[0].__r_.__value_.__r.__words[0];
    v264[0].__r_.__value_.__r.__words[0] = 0;
    uint64_t v104 = (void *)__str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = v103;
    if (v104) {
      operator delete(v104);
    }
    uint64_t v105 = (void **)v264[0].__r_.__value_.__r.__words[2];
    std::string::size_type v106 = v264[0].__r_.__value_.__l.__size_;
    v264[0].__r_.__value_.__l.__size_ = 0;
    __str.__r_.__value_.__r.__words[2] = v264[0].__r_.__value_.__r.__words[2];
    std::string::pointer data = v264[1].__r_.__value_.__l.__data_;
    int v253 = v264[1].__r_.__value_.__r.__words[1];
    __str.__r_.__value_.__l.__size_ = v106;
    if (v264[1].__r_.__value_.__r.__words[0])
    {
      std::string::size_type v107 = *(void *)(v264[0].__r_.__value_.__r.__words[2] + 8);
      if ((v106 & (v106 - 1)) != 0)
      {
        if (v107 >= v106) {
          v107 %= v106;
        }
      }
      else
      {
        v107 &= v106 - 1;
      }
      uint64_t v105 = 0;
      *(void *)(__str.__r_.__value_.__r.__words[0] + 8 * v107) = (char *)&__str.__r_.__value_.__l + 16;
      v264[0].__r_.__value_.__r.__words[2] = 0;
      v264[1].__r_.__value_.__r.__words[0] = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v105);
    long long v33 = (Espresso *)v264[0].__r_.__value_.__r.__words[0];
    v264[0].__r_.__value_.__r.__words[0] = 0;
    if (v33) {
      operator delete(v33);
    }
    LODWORD(v263) = 0;
    unint64_t v243 = 0;
    uint64_t v109 = (std::string **)*((void *)v221 + 1);
    size_t v108 = (std::string **)*((void *)v221 + 2);
    if (v108 == v109) {
      continue;
    }
    unint64_t v110 = 0;
    do
    {
      uint64_t v111 = (uint64_t *)&v109[2 * v110];
      uint64_t v112 = *v111;
      uint64_t v113 = *(void *)(*v111 + 8);
      if (v113 == *v111) {
        goto LABEL_212;
      }
      uint64_t v235 = *v111;
      do
      {
        uint64_t v115 = v113 + 16;
        unint64_t v114 = *(void **)(v113 + 16);
        uint64_t v116 = *v114;
        long long v33 = *(Espresso **)(*v114 + 64);
        if (!v33) {
          goto LABEL_202;
        }
        if (!v33) {
          goto LABEL_202;
        }
        unint64_t v117 = *(std::__shared_weak_count **)(v116 + 72);
        long long v238 = v117;
        if (v117)
        {
          atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v114 = *(void **)v115;
        }
        int v229 = v33;
        std::string::size_type v232 = v114[2];
        uint64_t v118 = (unsigned __int8 *)v33 + 288;
        unint64_t v119 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v33 + 288);
        unint64_t v120 = *((void *)&v254 + 1);
        if (!*((void *)&v254 + 1)) {
          goto LABEL_342;
        }
        unint64_t v121 = v119;
        uint8x8_t v122 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v254 + 8));
        v122.i16[0] = vaddlv_u8(v122);
        unint64_t v123 = v122.u32[0];
        if (v122.u32[0] > 1uLL)
        {
          unint64_t v124 = v119;
          if (v119 >= *((void *)&v254 + 1)) {
            unint64_t v124 = v119 % *((void *)&v254 + 1);
          }
        }
        else
        {
          unint64_t v124 = (*((void *)&v254 + 1) - 1) & v119;
        }
        long long v125 = *(unsigned __int8 ***)(v254 + 8 * v124);
        if (!v125 || (uint64_t v126 = *v125) == 0) {
LABEL_342:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        while (1)
        {
          unint64_t v127 = *((void *)v126 + 1);
          if (v127 == v121) {
            break;
          }
          if (v123 > 1)
          {
            if (v127 >= v120) {
              v127 %= v120;
            }
          }
          else
          {
            v127 &= v120 - 1;
          }
          if (v127 != v124) {
            goto LABEL_342;
          }
LABEL_172:
          uint64_t v126 = *(unsigned __int8 **)v126;
          if (!v126) {
            goto LABEL_342;
          }
        }
        BOOL v128 = std::equal_to<std::string>::operator()[abi:ne180100](v126 + 16, v118);
        if (!v128) {
          goto LABEL_172;
        }
        uint64_t v130 = Espresso::espresso_os_log_subsystem((Espresso *)v128, v129);
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
        {
          Espresso::basic_block::debug_name((Espresso::basic_block *)&__p, *v111);
          long long v144 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v144 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v145 = (std::string::size_type)v118;
          if (*((char *)v229 + 311) < 0) {
            std::string::size_type v145 = *(void *)v118;
          }
          std::string::size_type v146 = v232;
          if (*(char *)(v232 + 23) < 0) {
            std::string::size_type v146 = *(void *)v232;
          }
          unint64_t v147 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v126 + 6) - *((void *)v126 + 5)) >> 3);
          LODWORD(v264[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)v264[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v144;
          WORD2(v264[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v264[0].__r_.__value_.__r.__words[1] + 6) = v145;
          HIWORD(v264[0].__r_.__value_.__r.__words[2]) = 2080;
          v264[1].__r_.__value_.__r.__words[0] = v146;
          LOWORD(v264[1].__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v264[1].__r_.__value_.__r.__words[1] + 2) = v147;
          _os_log_debug_impl(&dword_1920CB000, v130, OS_LOG_TYPE_DEBUG, "\tpass_make_ssa: block=%s original_blob=%s phi=%s versions=%zu", (uint8_t *)v264, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }

        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*(void *)v115 + 40));
        std::vector<std::string>::reserve((std::vector<std::string> *)(*(void *)v115 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v126 + 6) - *((void *)v126 + 5)) >> 3));
        check_and_insert_phi_bottom((uint64_t *)(v113 + 16), (uint64_t)v118, (uint64_t *)v118, (unint64_t *)v111, (uint64_t)&__str);
        v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
        for (uint64_t k = (void *)(std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v248, v118, (uint64_t)&std::piecewise_construct, (long long **)v264)+ 56);
              ;
              check_and_insert_phi_bottom((uint64_t *)(v113 + 16), (uint64_t)(k + 3), (uint64_t *)v118, (unint64_t *)v111, (uint64_t)&__str))
        {
          uint64_t k = (void *)*k;
          if (!k) {
            break;
          }
        }
        uint64_t v133 = *(void *)(*(void *)v115 + 40);
        if (*(void *)(*(void *)v115 + 48) - v133 == 24)
        {
          uint64_t v134 = *((void *)v126 + 5);
          if (*((void *)v126 + 6) != v134)
          {
            for (unint64_t m = 0; m < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v126 + 6) - v134) >> 3); ++m)
            {
              uint64_t v136 = v134 + 24 * m;
              uint64_t v137 = *(unsigned __int8 *)(v136 + 23);
              if ((v137 & 0x80u) == 0) {
                uint64_t v138 = *(unsigned __int8 *)(v136 + 23);
              }
              else {
                uint64_t v138 = *(void *)(v136 + 8);
              }
              uint64_t v139 = *(unsigned __int8 *)(v133 + 23);
              int v140 = (char)v139;
              if ((v139 & 0x80u) != 0) {
                uint64_t v139 = *(void *)(v133 + 8);
              }
              if (v138 != v139) {
                goto LABEL_197;
              }
              if (v140 >= 0) {
                std::string::size_type v34 = (const char *)v133;
              }
              else {
                std::string::size_type v34 = *(const char **)v133;
              }
              if ((v137 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v136, v34, *(void *)(v136 + 8))) {
                  goto LABEL_197;
                }
              }
              else if (*(unsigned char *)(v136 + 23))
              {
                uint64_t v141 = (unsigned __int8 *)v136;
                while (*v141 == *(unsigned __int8 *)v34)
                {
                  ++v141;
                  ++v34;
                  if (!--v137) {
                    goto LABEL_199;
                  }
                }
LABEL_197:
                if (Espresso::basic_block::is_blob_defined_in_predecessors(*v111, (void *)v136, (uint64_t)&__str))
                {
                  id v142 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v245, v243, &v243);
                  v264[0].__r_.__value_.__r.__words[0] = v136;
                  uint64_t v143 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v142 + 3), v136, (uint64_t)&std::piecewise_construct, (long long **)v264);
                  std::string::operator=((std::string *)(v143 + 5), (const std::string *)v133);
                }
              }
LABEL_199:
              uint64_t v134 = *((void *)v126 + 5);
            }
          }
        }
        uint64_t v112 = v235;
        long long v33 = (Espresso *)v238;
        if (v238) {
          nitro::nitro_function::nitro_function(v238);
        }
LABEL_202:
        uint64_t v113 = *(void *)(v113 + 8);
      }
      while (v113 != v112);
      unint64_t v110 = v243;
      uint64_t v109 = (std::string **)*((void *)v221 + 1);
      size_t v108 = (std::string **)*((void *)v221 + 2);
LABEL_212:
      unint64_t v243 = ++v110;
    }
    while (v110 < ((char *)v108 - (char *)v109) >> 4);
    while (v109 != v108)
    {
      long long v148 = *v109;
      v241[0] = &v254;
      v241[1] = &v257;
      v241[2] = &v263;
      v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
      v264[0].__r_.__value_.__l.__size_ = (std::string::size_type)v264;
      v264[0].__r_.__value_.__r.__words[2] = 0;
      std::string::size_type v149 = v148->__r_.__value_.__l.__size_;
      if ((std::string *)v149 != v148)
      {
        do
        {
          BOOL v150 = Espresso::pass_make_ssa::run_on_network(Espresso::net &)::$_0::operator()((uint64_t)v241, (uint64_t **)(v149 + 16));
          long long v151 = *(std::string **)(v149 + 8);
          if (v150)
          {
            if (v151 == v148)
            {
              LOBYTE(v152) = 1;
LABEL_221:
              long long v151 = v148;
            }
            else
            {
              while (1)
              {
                BOOL v152 = Espresso::pass_make_ssa::run_on_network(Espresso::net &)::$_0::operator()((uint64_t)v241, (uint64_t **)&v151->__r_.__value_.__r.__words[2]);
                if (!v152) {
                  break;
                }
                long long v151 = (std::string *)v151->__r_.__value_.__l.__size_;
                if (v151 == v148) {
                  goto LABEL_221;
                }
              }
            }
            if ((std::string *)v149 != v151)
            {
              std::string::size_type v153 = v151->__r_.__value_.__r.__words[0];
              if (v264 != v148)
              {
                if (v153 == v149)
                {
                  uint64_t v156 = 1;
                }
                else
                {
                  uint64_t v154 = -1;
                  std::string::size_type v155 = v149;
                  do
                  {
                    std::string::size_type v155 = *(void *)(v155 + 8);
                    ++v154;
                  }
                  while (v155 != v153);
                  uint64_t v156 = v154 + 2;
                }
                v148->__r_.__value_.__r.__words[2] -= v156;
                v264[0].__r_.__value_.__r.__words[2] += v156;
              }
              uint64_t v157 = *(void *)v149;
              *(void *)(v157 + 8) = *(void *)(v153 + 8);
              **(void **)(v153 + 8) = v157;
              std::string::size_type v158 = v264[0].__r_.__value_.__r.__words[0];
              *(void *)(v264[0].__r_.__value_.__r.__words[0] + 8) = v149;
              *(void *)std::string::size_type v149 = v158;
              v264[0].__r_.__value_.__r.__words[0] = v153;
              *(void *)(v153 + 8) = v264;
            }
            if (!v152) {
              long long v151 = (std::string *)v151->__r_.__value_.__l.__size_;
            }
          }
          std::string::size_type v149 = (std::string::size_type)v151;
        }
        while (v151 != v148);
      }
      std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear((uint64_t *)v264);
      v109 += 2;
    }
  }
  while (v263);
  unint64_t v243 = 0;
  uint64_t v159 = *((void *)v221 + 1);
  if (*((void *)v221 + 2) != v159)
  {
    unint64_t v160 = 0;
    do
    {
      memset(v264, 0, 32);
      LODWORD(v264[1].__r_.__value_.__r.__words[1]) = 1065353216;
      uint64_t v161 = *(void *)(v159 + 16 * v160);
      for (uint64_t n = *(void *)(v161 + 8); n != v161; uint64_t n = *(void *)(n + 8))
      {
        int v163 = *(void **)(n + 16);
        uint64_t v164 = *v163;
        uint64_t v165 = *(const void **)(*v163 + 64);
        if (!v165
        {
          uint64_t v173 = (std::string *)v163[5];
          uint64_t v172 = (std::string *)v163[6];
          while (1)
          {
            if (v173 == v172) {
              goto LABEL_245;
            }
            int v174 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v264, (uint64_t)v173);
            if (v174) {
              goto LABEL_254;
            }
            if (!*((void *)&v245 + 1)) {
              goto LABEL_255;
            }
            uint8x8_t v175 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v245 + 8));
            v175.i16[0] = vaddlv_u8(v175);
            if (v175.u32[0] > 1uLL)
            {
              unint64_t v176 = v160;
              if (v160 >= *((void *)&v245 + 1)) {
                unint64_t v176 = v160 % *((void *)&v245 + 1);
              }
            }
            else
            {
              unint64_t v176 = (*((void *)&v245 + 1) - 1) & v160;
            }
            int v177 = *(void **)(v245 + 8 * v176);
            if (!v177) {
              goto LABEL_255;
            }
            id v178 = (void *)*v177;
            if (!v178) {
              goto LABEL_255;
            }
            while (1)
            {
              unint64_t v179 = v178[1];
              if (v179 == v160) {
                break;
              }
              if (v175.u32[0] > 1uLL)
              {
                if (v179 >= *((void *)&v245 + 1)) {
                  v179 %= *((void *)&v245 + 1);
                }
              }
              else
              {
                v179 &= *((void *)&v245 + 1) - 1;
              }
              if (v179 != v176) {
                goto LABEL_255;
              }
LABEL_271:
              id v178 = (void *)*v178;
              if (!v178) {
                goto LABEL_255;
              }
            }
            if (v178[2] != v160) {
              goto LABEL_271;
            }
            unint64_t v180 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v245, v160, &v243);
            long long v181 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v180 + 3, (uint64_t)v173);
            std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v245, v160, &v243);
            if (v181)
            {
              uint64_t v182 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v245, v160, &v243);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
              int v174 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v182 + 3), (uint64_t)v173, (uint64_t)&std::piecewise_construct, (long long **)&__p);
LABEL_254:
              std::string::operator=(v173, (const std::string *)(v174 + 5));
            }
LABEL_255:
            ++v173;
          }
        }
        uint64_t v166 = *(std::__shared_weak_count **)(v164 + 72);
        if (v166)
        {
          atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
          nitro::nitro_function::nitro_function(v166);
        }
LABEL_245:
        uint64_t v167 = *(void *)(n + 16);
        uint64_t v169 = *(const std::string **)(v167 + 16);
        uint64_t v168 = *(const std::string **)(v167 + 24);
        while (v169 != v168)
        {
          uint64_t v170 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v257, (uint64_t)v169);
          if (v170)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v170 + 5);
            int v171 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v264, (uint64_t)(v170 + 5), (uint64_t)&std::piecewise_construct, (long long **)&__p);
            std::string::operator=((std::string *)(v171 + 5), v169);
          }
          ++v169;
        }
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v264);
      unint64_t v243 = ++v160;
      uint64_t v159 = *((void *)v221 + 1);
    }
    while (v160 < (*((void *)v221 + 2) - v159) >> 4);
  }
  uint64_t v183 = (long long *)v255;
  if ((void)v255)
  {
    while (2)
    {
      uint64_t v184 = *(long long **)v183;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v183 + 6) - *((void *)v183 + 5)) >> 3) <= 1)
      {
        unint64_t v185 = *((void *)&v254 + 1);
        unint64_t v186 = *((void *)v183 + 1);
        uint8x8_t v187 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v254 + 8));
        v187.i16[0] = vaddlv_u8(v187);
        if (v187.u32[0] > 1uLL)
        {
          if (v186 >= *((void *)&v254 + 1)) {
            v186 %= *((void *)&v254 + 1);
          }
        }
        else
        {
          v186 &= *((void *)&v254 + 1) - 1;
        }
        uint64_t v188 = *(long long **)(v254 + 8 * v186);
        do
        {
          uint64_t v189 = v188;
          uint64_t v188 = *(long long **)v188;
        }
        while (v188 != v183);
        if (v189 == &v255) {
          goto LABEL_346;
        }
        unint64_t v190 = *((void *)v189 + 1);
        if (v187.u32[0] > 1uLL)
        {
          if (v190 >= *((void *)&v254 + 1)) {
            v190 %= *((void *)&v254 + 1);
          }
        }
        else
        {
          v190 &= *((void *)&v254 + 1) - 1;
        }
        uint64_t v191 = *(long long **)v183;
        if (v190 == v186)
        {
LABEL_297:
          if (v191) {
            goto LABEL_298;
          }
        }
        else
        {
LABEL_346:
          if (!v184) {
            goto LABEL_296;
          }
          unint64_t v192 = *((void *)v184 + 1);
          if (v187.u32[0] > 1uLL)
          {
            if (v192 >= *((void *)&v254 + 1)) {
              v192 %= *((void *)&v254 + 1);
            }
          }
          else
          {
            v192 &= *((void *)&v254 + 1) - 1;
          }
          uint64_t v191 = *(long long **)v183;
          if (v192 != v186)
          {
LABEL_296:
            *(void *)(v254 + 8 * v186) = 0;
            uint64_t v191 = *(long long **)v183;
            goto LABEL_297;
          }
LABEL_298:
          unint64_t v193 = *((void *)v191 + 1);
          if (v187.u32[0] > 1uLL)
          {
            if (v193 >= v185) {
              v193 %= v185;
            }
          }
          else
          {
            v193 &= v185 - 1;
          }
          if (v193 != v186)
          {
            *(void *)(v254 + 8 * v193) = v189;
            uint64_t v191 = *(long long **)v183;
          }
        }
        *(void *)uint64_t v189 = v191;
        *(void *)uint64_t v183 = 0;
        --*((void *)&v255 + 1);
        v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
        v264[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v255;
        v264[0].__r_.__value_.__s.__data_[16] = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v264);
      }
      uint64_t v183 = v184;
      if (!v184) {
        break;
      }
      continue;
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear(v239);
  for (iuint64_t i = (void *)v255; ii; iuint64_t i = (void *)*ii)
  {
    uint64_t v196 = ii[5];
    uint64_t v195 = ii[6];
    v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(ii + 2);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v239, (uint64_t)(ii + 2), (uint64_t)&std::piecewise_construct, (long long **)v264)[5] = 0xAAAAAAAAAAAAAAABLL * ((v195 - v196) >> 3);
  }
  if ((long long *)(v213 + 184) != &v257)
  {
    *(_DWORD *)(v213 + 216) = v259;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(v213 + 184), (uint64_t *)v258, 0);
  }
  std::string v197 = (void *)(v213 + 144);
  if (v213 + 144 != v239)
  {
    *(_DWORD *)(v213 + 176) = *((_DWORD *)v219 + 16);
    v198 = (uint64_t *)*((void *)v219 + 6);
    uint64_t v199 = *(void *)(v213 + 152);
    if (v199)
    {
      for (juint64_t j = 0; jj != v199; ++jj)
        *(void *)(*v197 + 8 * jj) = 0;
      uint64_t v201 = *(void *)(v213 + 160);
      *(void *)(v213 + 160) = 0;
      *(void *)(v213 + 168) = 0;
      if (v201) {
        BOOL v202 = v198 == 0;
      }
      else {
        BOOL v202 = 1;
      }
      if (v202)
      {
        int v203 = (void **)v201;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v201 + 16), (const std::string *)(v198 + 2));
          *(void *)(v201 + 40) = v198[5];
          int v203 = *(void ***)v201;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)v197, v201);
          v198 = (uint64_t *)*v198;
          if (v203) {
            BOOL v204 = v198 == 0;
          }
          else {
            BOOL v204 = 1;
          }
          uint64_t v201 = (uint64_t)v203;
        }
        while (!v204);
      }
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v203);
    }
    for (; v198; v198 = (uint64_t *)*v198)
    {
      uint64_t v205 = (char *)operator new(0x30uLL);
      uint64_t v206 = (uint64_t)v205;
      long long v207 = v205 + 16;
      *(void *)uint64_t v205 = 0;
      *((void *)v205 + 1) = 0;
      if (*((char *)v198 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v205 + 16), (const std::string::value_type *)v198[2], v198[3]);
      }
      else
      {
        long long v208 = *((_OWORD *)v198 + 1);
        *((void *)v205 + 4) = v198[4];
        *long long v207 = v208;
      }
      *(void *)(v206 + 40) = v198[5];
      *(void *)(v206 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v207);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)v197, v206);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(v217, (uint64_t *)&v257);
  for (kuint64_t k = (unsigned __int8 *)v255; kk; kuint64_t k = *(unsigned __int8 **)kk)
  {
    v264[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(kk + 16);
    v210 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v216, kk + 16, (uint64_t)&std::piecewise_construct, (long long **)v264)+ 40;
    if (v210 != (char *)(kk + 40)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v210, *((std::string **)kk + 5), *((std::string **)kk + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)kk + 6) - *((void *)kk + 5)) >> 3));
    }
  }
  Espresso::net::_tag_inputs_and_outputs(v240);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v219 + 1, 1uLL, memory_order_relaxed);
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = v214;
  *(void *)(a2 + 16) = v219;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v219 + 1, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v219);
  std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)&v245);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&v248);
  if (v218) {
    nitro::nitro_function::nitro_function(v218);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__str.__r_.__value_.__r.__words[2]);
  std::vector<std::string> v211 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v211) {
    operator delete(v211);
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::~__hash_table((uint64_t)&v254);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v257);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v261);
  unint64_t v212 = (void *)v260;
  *(void *)&long long v260 = 0;
  if (v212) {
    operator delete(v212);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v219);
}

void sub_1926DAA60()
{
}

void sub_1926DAA6C()
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v0);
  JUMPOUT(0x1926DACC0);
}

void sub_1926DAA78(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1926DAD24);
}

void sub_1926DAA9C()
{
}

void sub_1926DAAA8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1926DAD24);
}

void sub_1926DAABC()
{
}

void sub_1926DAAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)&a41);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a47);
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)a54);
  unint64_t v65 = __p;
  std::string __p = 0;
  if (v65) {
    operator delete(v65);
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::~__hash_table((uint64_t)&a57);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a63);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(v63 - 208));
  uint64_t v66 = *(void **)(v63 - 224);
  *(void *)(v63 - 224) = 0;
  if (v66) {
    operator delete(v66);
  }
  nitro::nitro_function::nitro_function(a15);
  _Unwind_Resume(a1);
}

void *Espresso::net::get_analysis<Espresso::control_flow_graph>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a1 + 1120), (uint64_t)&v15);
  if (!v1) {
    goto LABEL_9;
  }
  unint64_t v2 = v1;
  unint64_t v3 = (const void *)v1[3];
  uint64_t v4 = (std::__shared_weak_count *)v2[4];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3)
  {
LABEL_9:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Analysis missing: ");
    BOOL v9 = std::string::append(&v14, (const std::string::value_type *)((unint64_t)"N8Espresso18control_flow_graphE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v5)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Analysis mismatch: ");
    uint64_t v12 = std::string::append(&v14, (const std::string::value_type *)((unint64_t)"N8Espresso18control_flow_graphE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v11, &v15);
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = v5;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v4);
    nitro::nitro_function::nitro_function(v4);
  }
  return v6;
}

void sub_1926DAF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v23) {
    __cxa_free_exception(v22);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string v15 = (void *)(a1 + 16);
  unint64_t v16 = (char *)operator new(0x68uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  std::string::size_type v17 = (std::string *)(v16 + 16);
  long long v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 24) = 1065353216;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          int v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          long long v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            int v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *long long v29 = *v35;
                  *int v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  int v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                long long v29 = v35;
                int v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *uint64_t v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    uint64_t v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_1926DB3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *Espresso::unique_vector<std::string>::push_back_if_not_present(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 24;
  uint64_t result = (std::string *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 24), (uint64_t)a2);
  if (!result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v4, (uint64_t)a2, (uint64_t)a2);
    uint64_t v6 = *(std::string **)(a1 + 8);
    if ((unint64_t)v6 >= *(void *)(a1 + 16))
    {
      uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, (uint64_t)a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1, a2);
      uint64_t result = v6 + 1;
    }
    *(void *)(a1 + 8) = result;
  }
  return result;
}

uint64_t std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      unint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      unint64_t v8 = *(void **)(a1 + 8);
      unint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          unint64_t v7 = v8;
          unint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          unint64_t v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          unint64_t v16 = (void *)v3;
          unint64_t v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__construct_node<std::pair<std::string const,Espresso::blob_numerical_properties> const&>((uint64_t)v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        unint64_t v16 = v7;
        unint64_t v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        unint64_t v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          unint64_t v5 = v13;
        }
        while (!v10);
      }
      unint64_t v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_1926DB5B4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void check_and_insert_phi_bottom(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  BOOL v10 = *(unsigned __int8 ***)(*a1 + 16);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  size_t v12 = *(void *)(a2 + 8);
  if ((v11 & 0x80u) == 0) {
    long long v13 = (unsigned __int8 *)*(unsigned __int8 *)(a2 + 23);
  }
  else {
    long long v13 = *(unsigned __int8 **)(a2 + 8);
  }
  unint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v10 + 23);
  int v15 = (char)v14;
  if ((char)v14 < 0) {
    unint64_t v14 = v10[1];
  }
  if (v13 == v14)
  {
    if (v15 >= 0) {
      unint64_t v16 = *(unsigned __int8 ***)(*a1 + 16);
    }
    else {
      unint64_t v16 = (unsigned __int8 **)*v10;
    }
    if ((v11 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v16, v12)) {
        return;
      }
    }
    else
    {
      if (!v11) {
        return;
      }
      for (uint64_t i = (unsigned __int8 *)a2; *i == *(unsigned __int8 *)v16; ++i)
      {
        unint64_t v16 = (unsigned __int8 **)((char *)v16 + 1);
        if (!--v11) {
          return;
        }
      }
    }
  }
  is_blob_defined_in_predecessors = (Espresso *)Espresso::basic_block::is_blob_defined_in_predecessors(*a4, (void *)a2, a5);
  if (is_blob_defined_in_predecessors)
  {
    uint64_t v20 = *a1;
    float v21 = (char **)(*a1 + 40);
    BOOL v22 = *(std::string **)(*a1 + 48);
    if ((unint64_t)v22 >= *(void *)(*a1 + 56))
    {
      unint64_t v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v21, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v21, (long long *)a2);
      unint64_t v23 = v22 + 1;
    }
    *(void *)(v20 + 48) = v23;
  }
  else
  {
    unint64_t v24 = Espresso::espresso_os_log_subsystem(is_blob_defined_in_predecessors, v19);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      Espresso::basic_block::debug_name((Espresso::basic_block *)__p, *a4);
      if (v29 >= 0) {
        uint64_t v25 = __p;
      }
      else {
        uint64_t v25 = (void **)__p[0];
      }
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v26 = a3;
      }
      else {
        uint64_t v26 = (uint64_t *)*a3;
      }
      if (*(char *)(a2 + 23) >= 0) {
        int v27 = (const void *)a2;
      }
      else {
        int v27 = *(const void **)a2;
      }
      if (*((char *)v10 + 23) < 0) {
        BOOL v10 = (unsigned __int8 **)*v10;
      }
      *(_DWORD *)buf = 136315906;
      uint8x8_t v31 = v25;
      __int16 v32 = 2080;
      uint8x8_t v33 = v26;
      __int16 v34 = 2080;
      int v35 = v27;
      __int16 v36 = 2080;
      uint64_t v37 = v10;
      _os_log_debug_impl(&dword_1920CB000, v24, OS_LOG_TYPE_DEBUG, "\t\tpass_make_ssa: block=%s original_blob=%s version=%s not reachable from phi=%s", buf, 0x2Au);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1926DB7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t v12 = (void *)(a1 + 16);
  long long v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = v5;
  *((void *)v13 + 2) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      __int16 v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v20 = operator new(8 * *(void *)&prime);
  float v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  unint64_t v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v12;
    char v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *unint64_t v23 = *v29;
          *char v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          char v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        unint64_t v23 = v29;
        char v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint8x8_t v31 = *(void **)(*(void *)a1 + 8 * v5);
  uint64_t i = (void *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    *uint8x8_t v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint8x8_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1926DBBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::pass_make_ssa::run_on_network(Espresso::net &)::$_0::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a2;
  uint64_t v4 = **a2;
  unint64_t v5 = *(const void **)(v4 + 64);
  if (!v5) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  unint64_t v9 = v7;
  BOOL v10 = *(std::__shared_weak_count **)(v4 + 72);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v3 = *a2;
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v3[6] - v3[5]) >> 3);
  BOOL v12 = v11 < 2;
  if (v11 <= 1)
  {
    uint64_t v13 = v3[2];
    float v14 = Espresso::espresso_os_log_subsystem(v7, v8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = (const void *)v13;
      if (*(char *)(v13 + 23) < 0) {
        uint64_t v39 = *(const void **)v13;
      }
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (((*a2)[6] - (*a2)[5]) >> 3);
      *(_DWORD *)uint64_t v41 = 136315394;
      *(void *)&v41[4] = v39;
      __int16 v42 = 2048;
      unint64_t v43 = v40;
      _os_log_debug_impl(&dword_1920CB000, v14, OS_LOG_TYPE_DEBUG, "\tpass_make_ssa: removing phi=%s bottom_names.size()=%zu", v41, 0x16u);
    }

    uint64_t v15 = *(void *)a1;
    *(void *)uint64_t v41 = (char *)v9 + 288;
    BOOL v16 = std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)v9 + 288, (long long **)v41);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v16 + 8, v13);
    unint64_t v18 = (unsigned __int8 *)*((void *)v16 + 5);
    unint64_t v17 = (unsigned __int8 *)*((void *)v16 + 6);
    if (v18 == v17)
    {
      unint64_t v17 = (unsigned __int8 *)*((void *)v16 + 5);
    }
    else
    {
      uint64_t v19 = *(unsigned __int8 *)(v13 + 23);
      size_t v20 = *(void *)(v13 + 8);
      if ((v19 & 0x80u) == 0) {
        uint64_t v21 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        uint64_t v21 = *(void *)(v13 + 8);
      }
      while (1)
      {
        uint64_t v22 = v18[23];
        int v23 = (char)v22;
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *((void *)v18 + 1);
        }
        if (v21 == v22)
        {
          if (v23 >= 0) {
            unint64_t v24 = v18;
          }
          else {
            unint64_t v24 = *(unsigned __int8 **)v18;
          }
          if ((v19 & 0x80) == 0)
          {
            if (!v19) {
              break;
            }
            uint8x8_t v25 = (unsigned __int8 *)v13;
            uint64_t v26 = v19;
            while (*v25 == *v24)
            {
              ++v25;
              ++v24;
              if (!--v26) {
                goto LABEL_27;
              }
            }
            goto LABEL_24;
          }
          if (!memcmp(*(const void **)v13, v24, v20)) {
            break;
          }
        }
LABEL_24:
        v18 += 24;
        if (v18 == v17) {
          goto LABEL_53;
        }
      }
LABEL_27:
      if (v18 == v17)
      {
LABEL_53:
        uint64_t v28 = v17;
        goto LABEL_54;
      }
      uint8x8_t v27 = v18 + 24;
      if (v18 + 24 != v17)
      {
        uint64_t v28 = v18;
        while (1)
        {
          char v29 = v18;
          unint64_t v18 = v27;
          uint64_t v30 = *(unsigned __int8 *)(v13 + 23);
          if ((v30 & 0x80u) == 0) {
            uint64_t v31 = *(unsigned __int8 *)(v13 + 23);
          }
          else {
            uint64_t v31 = *(void *)(v13 + 8);
          }
          uint64_t v32 = v29[47];
          int v33 = (char)v32;
          if ((v32 & 0x80u) != 0) {
            uint64_t v32 = *((void *)v29 + 4);
          }
          if (v31 != v32) {
            goto LABEL_46;
          }
          if (v33 >= 0) {
            __int16 v34 = v18;
          }
          else {
            __int16 v34 = *(unsigned __int8 **)v18;
          }
          if ((v30 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v13, v34, *(void *)(v13 + 8))) {
              goto LABEL_46;
            }
          }
          else if (*(unsigned char *)(v13 + 23))
          {
            int v35 = (unsigned __int8 *)v13;
            while (*v35 == *v34)
            {
              ++v35;
              ++v34;
              if (!--v30) {
                goto LABEL_49;
              }
            }
LABEL_46:
            if ((char)v28[23] < 0) {
              operator delete(*(void **)v28);
            }
            long long v36 = *(_OWORD *)v18;
            *((void *)v28 + 2) = *((void *)v18 + 2);
            *(_OWORD *)uint64_t v28 = v36;
            v28 += 24;
            v29[47] = 0;
            unsigned __int8 *v18 = 0;
          }
LABEL_49:
          uint8x8_t v27 = v18 + 24;
          if (v18 + 24 == v17)
          {
            unint64_t v17 = (unsigned __int8 *)*((void *)v16 + 6);
            goto LABEL_54;
          }
        }
      }
    }
    uint64_t v28 = v18;
LABEL_54:
    if (v28 + 24 != v17)
    {
      do
      {
        if ((char)v28[23] < 0) {
          operator delete(*(void **)v28);
        }
        *(_OWORD *)uint64_t v28 = *(_OWORD *)(v28 + 24);
        *((void *)v28 + 2) = *((void *)v28 + 5);
        v28[47] = 0;
        uint64_t v37 = v28 + 48;
        v28[24] = 0;
        v28 += 24;
      }
      while (v37 != v17);
      unint64_t v17 = (unsigned __int8 *)*((void *)v16 + 6);
    }
    while (v17 != v28)
    {
      if ((char)*(v17 - 1) < 0) {
        operator delete(*((void **)v17 - 3));
      }
      v17 -= 24;
    }
    *((void *)v16 + 6) = v28;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(*(void **)(a1 + 8), v13);
    ++**(_DWORD **)(a1 + 16);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  return v12;
}

void sub_1926DBFF0(_Unwind_Exception *exception_object)
{
}

void std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          nitro::nitro_function::nitro_function(v6);
        }
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::unique_vector<std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      float v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          float v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  BOOL v16 = (void *)(a1 + 16);
  float v14 = (char *)operator new(0x40uLL);
  v30[0] = v14;
  v30[1] = a1 + 16;
  char v31 = 0;
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v9;
  unint64_t v17 = (std::string *)(v14 + 16);
  unint64_t v18 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v14 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 6) = 0;
  *((void *)v14 + 7) = 0;
  char v31 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint8x8_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)float v14 = *v27;
LABEL_41:
    void *v27 = v14;
    goto LABEL_42;
  }
  *(void *)float v14 = *v16;
  *BOOL v16 = v14;
  *(void *)(v26 + 8 * v4) = v16;
  if (*(void *)v14)
  {
    unint64_t v28 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    uint8x8_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v30[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return v14;
}

void sub_1926DC354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::unique_vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::unique_vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::unique_vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 48);
  unint64_t v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  unint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1926DC56C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(void *a1, uint64_t a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    unint64_t v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      unint64_t v8 = v7;
      unint64_t v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_19;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3) {
        goto LABEL_20;
      }
      unint64_t v10 = *(void *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_20:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }
    *unint64_t v8 = v11;
    uint64_t *v3 = 0;
    --a1[3];
    v13[0] = v3;
    v13[1] = a1 + 2;
    char v14 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      a3 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)unint64_t v5 = 0;
      unint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return a3;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__shared_ptr_emplace<Espresso::basic_block::instruction>::__on_zero_shared(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::basic_block::instruction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3817A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::basic_block::instruction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3817A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__construct_node<std::pair<std::string const,Espresso::blob_numerical_properties> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint8x8_t v6 = (char *)operator new(0x60uLL);
  uint64_t v7 = v6;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  long long v8 = *(_OWORD *)(a3 + 24);
  *((void *)v7 + 9) = 0;
  *(_OWORD *)(v7 + 56) = v8;
  *((void *)v7 + 10) = 0;
  *((void *)v7 + 11) = 0;
  uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v7 + 9, *(const void **)(a3 + 40), *(void *)(a3 + 48), (uint64_t)(*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 2);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1926DCAE0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_make_ssa>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386120;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_make_ssa::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::pass_make_ssa::~pass_make_ssa(Espresso::pass_make_ssa *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void sub_1926DCE3C(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_wavernn_ane::run_on_network(Espresso::pass_wavernn_ane *this@<X0>, Espresso::net *a2@<X1>, Espresso::pass_wavernn_ane *a3@<X8>)
{
}

void Espresso::pass_wavernn_ane::run_v3(Espresso::pass_wavernn_ane *this, Espresso::net *a2, uint64_t a3)
{
  *(void *)&long long v288 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v214, "/tmp/");
  std::string::basic_string[abi:ne180100]<0>(__p, "hidden_state");
  v259[0] = __p;
  *((_DWORD *)a2 + 6) = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3 + 136, (unsigned __int8 *)__p, (long long **)v259)+ 5)+ 8);
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v259[0] = __p;
  *((_DWORD *)a2 + 7) = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3 + 136, (unsigned __int8 *)__p, (long long **)v259)+ 5)+ 8);
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::string>::destroy(a3 + 280, *(char **)(a3 + 288));
  *(void *)(a3 + 288) = 0;
  *(void *)(a3 + 296) = 0;
  *(void *)(a3 + 280) = a3 + 288;
  std::__tree<std::string>::destroy(a3 + 304, *(char **)(a3 + 312));
  *(void *)(a3 + 312) = 0;
  *(void *)(a3 + 320) = 0;
  *(void *)(a3 + 304) = a3 + 312;
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 24);
  *(void *)&long long v285 = *(void *)(a3 + 16);
  *((void *)&v285 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v243 = 0;
  v242 = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)__p, (uint64_t *)&v285, 0, (uint64_t *)&v242);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  WORD2(v276) = 0;
  LODWORD(v276) = 0;
  std::string::basic_string[abi:ne180100]<0>(v266, "general_concat");
  std::string::basic_string[abi:ne180100]<0>(&v220, "input_concat");
  std::string::basic_string[abi:ne180100]<0>(v259, "mel");
  std::string::basic_string[abi:ne180100]<0>((void *)&v260 + 1, "in_fine_bit_scaled");
  std::string::basic_string[abi:ne180100]<0>(&v262[1], "in_coarse_bit_scaled");
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  v219[0] = 0;
  *(void *)&long long v278 = &v217;
  BYTE8(v278) = 0;
  uint64_t v217 = (std::string *)operator new(0x48uLL);
  uint64_t v218 = (uint64_t)v217;
  v219[0] = v217 + 3;
  uint64_t v218 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v219, (long long *)v259, (long long *)&v265, v217);
  std::string::basic_string[abi:ne180100]<0>(v287, "input");
  long long v278 = 0uLL;
  *(void *)&long long v279 = 0;
  long long v245 = &v278;
  LOBYTE(v246) = 0;
  *(void *)&long long v278 = operator new(0x18uLL);
  *((void *)&v278 + 1) = v278;
  *(void *)&long long v279 = v278 + 24;
  *((void *)&v278 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v279, (long long *)v287, &v288, (std::string *)v278);
  Espresso::sequential_builder::add<Espresso::general_concat_params_t>((uint64_t *)&v283, (uint64_t *)__p, (uint64_t)v266, (uint64_t)&v220, (uint64_t)&v276, (uint64_t)v217, v218, (uint64_t *)&v278);
  if (*((void *)&v283 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v283 + 1));
  }
  uint64_t v183 = a3 + 136;
  long long v245 = &v278;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
  if ((v287[23] & 0x80000000) != 0) {
    operator delete(*(void **)v287);
  }
  *(void *)v287 = &v217;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v287);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v264[i]) < 0) {
      operator delete(v262[i + 1]);
    }
  }
  if (SBYTE7(v221) < 0) {
    operator delete((void *)v220);
  }
  if (SBYTE7(v267) < 0) {
    operator delete(v266[0]);
  }
  *(_OWORD *)int v259 = 0u;
  long long v260 = 0u;
  LODWORD(v261) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)__p, (long long **)a3, 0, (uint64_t)v259);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::string::basic_string[abi:ne180100]<0>(v259, "");
  *((void *)&v267 + 1) = 0;
  Espresso::net::pprint(a3, (uint64_t)v259, (uint64_t)v266);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v266);
  if (SBYTE7(v260) < 0) {
    operator delete(v259[0]);
  }
  *((void *)&v220 + 1) = 0;
  *(void *)&long long v221 = 0;
  *(void *)&long long v220 = (char *)&v220 + 8;
  int v7 = *((_DWORD *)a2 + 7) - 2;
  *(_OWORD *)&v287[4] = 0uLL;
  *(_DWORD *)v287 = v7;
  *(_DWORD *)&v287[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v287, 0, (uint64_t)v259);
  std::string::basic_string[abi:ne180100]<0>(&v245, "mel");
  *(void *)&long long v281 = &v245;
  long long v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v220, &v245, (_OWORD **)&v281);
  unint64_t v9 = (void *)*((void *)v8 + 12);
  long long v10 = v260;
  *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)v259;
  *(_OWORD *)((char *)v8 + 72) = v10;
  *((void *)v8 + 11) = v261;
  if (v9)
  {
    *((void *)v8 + 13) = v9;
    operator delete(v9);
    *((void *)v8 + 12) = 0;
    *((void *)v8 + 13) = 0;
    *((void *)v8 + 14) = 0;
  }
  v8[6] = *(_OWORD *)v262;
  *((void *)v8 + 14) = v263;
  uint64_t v263 = 0;
  *(_OWORD *)int v262 = 0uLL;
  if (SHIBYTE(v247) < 0)
  {
    operator delete(v245);
    if (v262[0])
    {
      v262[1] = v262[0];
      operator delete(v262[0]);
    }
  }
  *(void *)&v287[12] = 0;
  *(void *)&v287[4] = 0;
  *(_DWORD *)v287 = 1;
  *(_DWORD *)&v287[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v287, 0, (uint64_t)v259);
  std::string::basic_string[abi:ne180100]<0>(&v245, "in_coarse_bit_scaled");
  *(void *)&long long v281 = &v245;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v220, &v245, (_OWORD **)&v281);
  unint64_t v12 = (void *)*((void *)v11 + 12);
  long long v13 = v260;
  *(_OWORD *)((char *)v11 + 56) = *(_OWORD *)v259;
  *(_OWORD *)((char *)v11 + 72) = v13;
  *((void *)v11 + 11) = v261;
  if (v12)
  {
    *((void *)v11 + 13) = v12;
    operator delete(v12);
    *((void *)v11 + 12) = 0;
    *((void *)v11 + 13) = 0;
    *((void *)v11 + 14) = 0;
  }
  v11[6] = *(_OWORD *)v262;
  *((void *)v11 + 14) = v263;
  uint64_t v263 = 0;
  *(_OWORD *)int v262 = 0uLL;
  if (SHIBYTE(v247) < 0)
  {
    operator delete(v245);
    if (v262[0])
    {
      v262[1] = v262[0];
      operator delete(v262[0]);
    }
  }
  *(void *)&v287[12] = 0;
  *(void *)&v287[4] = 0;
  *(_DWORD *)v287 = 1;
  *(_DWORD *)&v287[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v287, 0, (uint64_t)v259);
  std::string::basic_string[abi:ne180100]<0>(&v245, "in_fine_bit_scaled");
  *(void *)&long long v281 = &v245;
  char v14 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v220, &v245, (_OWORD **)&v281);
  unint64_t v15 = (void *)*((void *)v14 + 12);
  long long v16 = v260;
  *(_OWORD *)((char *)v14 + 56) = *(_OWORD *)v259;
  *(_OWORD *)((char *)v14 + 72) = v16;
  *((void *)v14 + 11) = v261;
  if (v15)
  {
    *((void *)v14 + 13) = v15;
    operator delete(v15);
    *((void *)v14 + 12) = 0;
    *((void *)v14 + 13) = 0;
    *((void *)v14 + 14) = 0;
  }
  v14[6] = *(_OWORD *)v262;
  *((void *)v14 + 14) = v263;
  uint64_t v263 = 0;
  *(_OWORD *)int v262 = 0uLL;
  if (SHIBYTE(v247) < 0)
  {
    operator delete(v245);
    if (v262[0])
    {
      v262[1] = v262[0];
      operator delete(v262[0]);
    }
  }
  int v17 = *((_DWORD *)a2 + 7);
  *(void *)&v287[12] = 0;
  *(void *)&v287[4] = 0;
  *(_DWORD *)v287 = v17;
  *(_DWORD *)&v287[20] = 1;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v287, 0, (uint64_t)v259);
  std::string::basic_string[abi:ne180100]<0>(&v245, "input");
  *(void *)&long long v281 = &v245;
  unint64_t v18 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v220, &v245, (_OWORD **)&v281);
  long long v19 = (void *)*((void *)v18 + 12);
  long long v20 = v260;
  *(_OWORD *)((char *)v18 + 56) = *(_OWORD *)v259;
  *(_OWORD *)((char *)v18 + 72) = v20;
  *((void *)v18 + 11) = v261;
  if (v19)
  {
    *((void *)v18 + 13) = v19;
    operator delete(v19);
    *((void *)v18 + 12) = 0;
    *((void *)v18 + 13) = 0;
    *((void *)v18 + 14) = 0;
  }
  v18[6] = *(_OWORD *)v262;
  *((void *)v18 + 14) = v263;
  uint64_t v263 = 0;
  *(_OWORD *)int v262 = 0uLL;
  if (SHIBYTE(v247) < 0)
  {
    operator delete(v245);
    if (v262[0])
    {
      v262[1] = v262[0];
      operator delete(v262[0]);
    }
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v259, (long long **)&v220);
  reshape_network_with_additional_inputs(a3, (uint64_t **)v259);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v259, (char *)v259[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v220, *((char **)&v220 + 1));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v256);
  if (v255) {
    nitro::nitro_function::nitro_function(v255);
  }
  if (v254) {
    nitro::nitro_function::nitro_function(v254);
  }
  if (v253) {
    nitro::nitro_function::nitro_function(v253);
  }
  if (v252 < 0) {
    operator delete(*(void **)&v250[24]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v249, *((void **)&v249 + 1));
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  v266[0] = 0;
  v266[1] = v266;
  *(void *)&long long v267 = 0x4812000000;
  *((void *)&v267 + 1) = __Block_byref_object_copy_;
  v268 = __Block_byref_object_dispose_;
  uint64_t v269 = "";
  uint64_t v272 = 0;
  long long v271 = 0;
  v270 = &v271;
  uint64_t v217 = (std::string *)MEMORY[0x1E4F143A8];
  uint64_t v218 = 3221225472;
  v219[0] = ___ZN8Espresso16pass_wavernn_ane13gumbal_to_aneERNS_3netE_block_invoke;
  v219[1] = &unk_1E5746D90;
  v219[2] = v266;
  v219[3] = a3;
  unint64_t v185 = &v217;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v220, (Espresso::net *)a3);
  long long v249 = 0u;
  memset(v250, 0, 28);
  *(_OWORD *)std::string __p = 0u;
  uint64_t v251 = a3;
  uint64_t v21 = *(void *)(a3 + 32);
  uint64_t v184 = (Espresso::net *)a3;
  if (*(void *)(a3 + 40) != v21)
  {
    unint64_t v22 = 0;
    do
    {
      *(_DWORD *)&v250[24] = v22;
      long long v23 = *(_OWORD *)(v21 + 16 * v22);
      uint64_t v24 = *(void *)(v21 + 16 * v22 + 8);
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      size_t v25 = (std::__shared_weak_count *)*((void *)&v249 + 1);
      long long v249 = v23;
      if (v25)
      {
        nitro::nitro_function::nitro_function(v25);
        uint64_t v26 = v249;
      }
      else
      {
        uint64_t v26 = v23;
      }
      uint8x8_t v27 = *(void **)(v26 + 64);
      if (v27
      {
        unint64_t v28 = *(atomic_ullong **)(v26 + 72);
        if (v28) {
          atomic_fetch_add_explicit(v28 + 1, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        unint64_t v28 = 0;
      }
      char v29 = (std::__shared_weak_count *)__p[1];
      __p[0] = v27;
      __p[1] = v28;
      if (v29)
      {
        nitro::nitro_function::nitro_function(v29);
        uint8x8_t v27 = __p[0];
      }
      if (v27) {
        ((void (*)(std::string **, void **))v219[0])(v185, __p);
      }
      ++v22;
      uint64_t v21 = *(void *)(a3 + 32);
    }
    while (v22 < (*(void *)(a3 + 40) - v21) >> 4);
    uint64_t v30 = *(uint64_t **)&v250[8];
    if (*(void *)v250 != *(void *)&v250[8])
    {
      int v31 = 0;
      uint64_t v32 = (uint64_t *)(*(void *)v250 + 32);
      do
      {
        int v33 = v32 - 4;
        int v34 = *((_DWORD *)v32 - 8) + v31;
        *((_DWORD *)v32 - 8) = v34;
        int v35 = (void *)*(v32 - 3);
        if (v35)
        {
          LODWORD(v259[0]) = v34;
          v259[1] = v35;
          uint64_t v36 = *(v32 - 2);
          *(void *)&long long v260 = v36;
          if (v36) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v260 + 1) = 0;
          uint64_t v261 = 0;
          v262[0] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v260 + 1, *(v32 - 1), *v32, 0xAAAAAAAAAAAAAAABLL * ((*v32 - *(v32 - 1)) >> 3));
          v262[1] = 0;
          uint64_t v263 = 0;
          v264[0] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v262[1], v32[2], v32[3], 0xAAAAAAAAAAAAAAABLL * ((v32[3] - v32[2]) >> 3));
          long long v278 = 0uLL;
          *(void *)&long long v279 = 0;
          *(void *)v287 = &v278;
          v287[8] = 0;
          *(void *)&long long v278 = operator new(0x48uLL);
          *((void *)&v278 + 1) = v278;
          *(void *)&long long v279 = v278 + 72;
          *((void *)&v278 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v279, (uint64_t)v259, (uint64_t)&v265, v278);
          Espresso::net::insert_layers(a3, (uint64_t **)&v278);
          *(void *)v287 = &v278;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v287);
          *(void *)v287 = &v262[1];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v287);
          *(void *)v287 = (char *)&v260 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v287);
          if ((void)v260) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v260);
          }
          int v37 = 1;
        }
        else
        {
          Espresso::net::remove_layer((Espresso::net *)a3, v34);
          int v37 = -1;
        }
        v31 += v37;
        v32 += 9;
      }
      while (v33 + 9 != v30);
    }
  }
  v259[0] = v250;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v259);
  if (*((void *)&v249 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v249 + 1));
  }
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v226);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v221 + 1));
  if (*((void *)&v220 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v220 + 1));
  }

  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)__p, (long long **)v266[1] + 6);
  reshape_network_with_additional_inputs(a3, (uint64_t **)__p);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
  _Block_object_dispose(v266, 8);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v270, v271);
  if ((v216 & 0x80u) == 0) {
    size_t v38 = v216;
  }
  else {
    size_t v38 = v215;
  }
  uint64_t v39 = v210;
  std::string::basic_string[abi:ne180100]((uint64_t)v210, v38 + 23);
  if (v211 < 0) {
    uint64_t v39 = (void **)v210[0];
  }
  if (v38)
  {
    if ((v216 & 0x80u) == 0) {
      unint64_t v40 = &v214;
    }
    else {
      unint64_t v40 = v214;
    }
    memmove(v39, v40, v38);
  }
  strcpy((char *)v39 + v38, "/new_input.espresso.net");
  checkpoint_net(&v212, a3, (uint64_t)v210);
  if (v211 < 0) {
    operator delete(v210[0]);
  }
  Espresso::pass_wavernn_ane::initial_inner_product_to_add(a2, (Espresso::net *)a3);
  if ((v216 & 0x80u) == 0) {
    size_t v41 = v216;
  }
  else {
    size_t v41 = v215;
  }
  __int16 v42 = v206;
  std::string::basic_string[abi:ne180100]((uint64_t)v206, v41 + 17);
  if (v207 < 0) {
    __int16 v42 = (void **)v206[0];
  }
  if (v41)
  {
    if ((v216 & 0x80u) == 0) {
      unint64_t v43 = &v214;
    }
    else {
      unint64_t v43 = v214;
    }
    memmove(v42, v43, v41);
  }
  strcpy((char *)v42 + v41, "/tmp.espresso.net");
  checkpoint_net(&v208, a3, (uint64_t)v206);
  if (v207 < 0) {
    operator delete(v206[0]);
  }
  uint64_t v44 = v208;
  uint64_t v45 = v209;
  v205[0] = v208;
  v205[1] = v209;
  if (v209) {
    atomic_fetch_add_explicit(&v209->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v46 = v213;
  v204[0] = v212;
  v204[1] = v213;
  if (v213) {
    atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v47 = util_compare(v205, v204);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if ((v47 & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("validation_failed after splitting inner product");
  }
  *(_OWORD *)std::string __p = 0u;
  long long v249 = 0u;
  *(_DWORD *)int v250 = 1065353216;
  Espresso::net::get_consumers_of_blobs((void *)a3, __p, (uint64_t)&v278);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  v259[0] = (void *)MEMORY[0x1E4F143A8];
  v259[1] = (void *)3321888768;
  *(void *)&long long v260 = ___ZN8Espresso16pass_wavernn_ane14split_to_sliceERNS_3netE_block_invoke;
  *((void *)&v260 + 1) = &__block_descriptor_80_ea8_40c166_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorImNS4_ImEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S9_EEEEEE_e9_v16__0_v8l;
  uint64_t v261 = a3;
  std::unordered_map<std::string,std::vector<unsigned long>>::unordered_map((uint64_t)v262, (uint64_t)&v278);
  long long v48 = v259;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v220, (Espresso::net *)a3);
  long long v249 = 0u;
  memset(v250, 0, 28);
  *(_OWORD *)std::string __p = 0u;
  uint64_t v251 = a3;
  uint64_t v49 = *(void *)(a3 + 32);
  if (*(void *)(a3 + 40) != v49)
  {
    uint64_t v186 = v44;
    unint64_t v50 = 0;
    do
    {
      *(_DWORD *)&v250[24] = v50;
      long long v51 = *(_OWORD *)(v49 + 16 * v50);
      uint64_t v52 = *(void *)(v49 + 16 * v50 + 8);
      if (v52) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
      }
      long long v53 = (std::__shared_weak_count *)*((void *)&v249 + 1);
      long long v249 = v51;
      if (v53)
      {
        nitro::nitro_function::nitro_function(v53);
        uint64_t v54 = v249;
      }
      else
      {
        uint64_t v54 = v51;
      }
      long long v55 = *(void **)(v54 + 64);
      if (v55
      {
        std::string::size_type v56 = *(atomic_ullong **)(v54 + 72);
        if (v56) {
          atomic_fetch_add_explicit(v56 + 1, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string::size_type v56 = 0;
      }
      long long v57 = (std::__shared_weak_count *)__p[1];
      __p[0] = v55;
      __p[1] = v56;
      if (v57)
      {
        nitro::nitro_function::nitro_function(v57);
        long long v55 = __p[0];
      }
      if (v55) {
        ((void (*)(void **, void **))v260)(v48, __p);
      }
      ++v50;
      uint64_t v49 = *(void *)(a3 + 32);
    }
    while (v50 < (*(void *)(a3 + 40) - v49) >> 4);
    int v58 = *(uint64_t **)&v250[8];
    if (*(void *)v250 == *(void *)&v250[8])
    {
      uint64_t v44 = v186;
    }
    else
    {
      int v59 = 0;
      uint64_t v60 = (uint64_t *)(*(void *)v250 + 32);
      do
      {
        int v61 = v60 - 4;
        int v62 = *((_DWORD *)v60 - 8) + v59;
        *((_DWORD *)v60 - 8) = v62;
        uint64_t v63 = (void *)*(v60 - 3);
        if (v63)
        {
          LODWORD(v266[0]) = v62;
          v266[1] = v63;
          uint64_t v64 = *(v60 - 2);
          *(void *)&long long v267 = v64;
          if (v64) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v267 + 1) = 0;
          v268 = 0;
          uint64_t v269 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v267 + 1, *(v60 - 1), *v60, 0xAAAAAAAAAAAAAAABLL * ((*v60 - *(v60 - 1)) >> 3));
          v270 = 0;
          long long v271 = 0;
          uint64_t v272 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v270, v60[2], v60[3], 0xAAAAAAAAAAAAAAABLL * ((v60[3] - v60[2]) >> 3));
          memset(v287, 0, sizeof(v287));
          long long v245 = v287;
          LOBYTE(v246) = 0;
          *(void *)v287 = operator new(0x48uLL);
          *(void *)&v287[8] = *(void *)v287;
          *(void *)&v287[16] = *(void *)v287 + 72;
          *(void *)&v287[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v287[16], (uint64_t)v266, (uint64_t)v273, *(uint64_t *)v287);
          Espresso::net::insert_layers((uint64_t)v184, (uint64_t **)v287);
          long long v245 = v287;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
          long long v245 = &v270;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
          long long v245 = (char *)&v267 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
          if ((void)v267) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v267);
          }
          int v65 = 1;
        }
        else
        {
          Espresso::net::remove_layer(v184, v62);
          int v65 = -1;
        }
        v59 += v65;
        v60 += 9;
      }
      while (v61 + 9 != v58);
      a3 = (uint64_t)v184;
      uint64_t v44 = v186;
    }
  }
  v266[0] = v250;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v266);
  if (*((void *)&v249 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v249 + 1));
  }
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v226);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v221 + 1));
  if (*((void *)&v220 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v220 + 1));
  }

  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(v48[7]);
  uint64_t v66 = v262[0];
  v262[0] = 0;
  if (v66) {
    operator delete(v66);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v279);
  uint64_t v67 = (void *)v278;
  *(void *)&long long v278 = 0;
  if (v67) {
    operator delete(v67);
  }
  if ((v216 & 0x80u) == 0) {
    size_t v68 = v216;
  }
  else {
    size_t v68 = v215;
  }
  uint64_t v69 = v200;
  std::string::basic_string[abi:ne180100]((uint64_t)v200, v68 + 22);
  if (v201 < 0) {
    uint64_t v69 = (void **)v200[0];
  }
  if (v68)
  {
    if ((v216 & 0x80u) == 0) {
      uint64_t v70 = &v214;
    }
    else {
      uint64_t v70 = v214;
    }
    memmove(v69, v70, v68);
  }
  strcpy((char *)v69 + v68, "/pre_loop.espresso.net");
  checkpoint_net(&v202, a3, (uint64_t)v200);
  if (v201 < 0) {
    operator delete(v200[0]);
  }
  uint64_t v71 = v203;
  v199[0] = v202;
  v199[1] = v203;
  if (v203) {
    atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v72 = v209;
  v198[0] = v44;
  v198[1] = v209;
  if (v209) {
    atomic_fetch_add_explicit(&v209->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v73 = util_compare(v199, v198);
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  if ((v73 & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("validation_failed after split to slice");
  }
  Espresso::pass_wavernn_ane::create_loop(a2, (Espresso::net *)a3);
  v266[0] = 0;
  if (*(void *)(a3 + 40) != *(void *)(a3 + 32))
  {
LABEL_181:
    __p[0] = v266;
    uint64_t v74 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v184 + 56, (unint64_t *)v266, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    long long v75 = (uint64_t *)v74[3];
    char v76 = (uint64_t *)v74[4];
    while (v75 != v76)
    {
      int v77 = *((unsigned __int8 *)v75 + 23);
      if (*((char *)v75 + 23) < 0)
      {
        uint64_t v79 = v75[1];
        if (v79 != 17) {
          goto LABEL_200;
        }
        uint64_t v78 = (uint64_t *)*v75;
      }
      else
      {
        uint64_t v78 = v75;
        if (v77 != 17) {
          goto LABEL_196;
        }
      }
      uint64_t v80 = *v78;
      uint64_t v81 = v78[1];
      int v82 = *((unsigned __int8 *)v78 + 16);
      if (v80 == 0x6E5F74757074756FLL && v81 == 0x65646469685F7765 && v82 == 110)
      {
        MEMORY[0x192FF0F50](v75, "hidden_state");
        int v77 = *((unsigned __int8 *)v75 + 23);
        if ((v77 & 0x80) == 0)
        {
LABEL_196:
          long long v85 = v75;
          if (v77 != 18) {
            goto LABEL_211;
          }
          goto LABEL_202;
        }
      }
      else if ((v77 & 0x80) == 0)
      {
        goto LABEL_196;
      }
      uint64_t v79 = v75[1];
LABEL_200:
      if (v79 != 18) {
        goto LABEL_211;
      }
      long long v85 = (uint64_t *)*v75;
LABEL_202:
      uint64_t v86 = *v85;
      uint64_t v87 = v85[1];
      int v88 = *((unsigned __int16 *)v85 + 8);
      if (v86 == 0x5F656E69665F6E69 && v87 == 0x6C6163735F746962 && v88 == 25701) {
        MEMORY[0x192FF0F50](v75, "fine_bit_scaled");
      }
LABEL_211:
      v75 += 3;
    }
    __p[0] = v266;
    uint64_t v91 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v184 + 96, (unint64_t *)v266, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    unint64_t v92 = (uint64_t *)v91[3];
    uint64_t v93 = (uint64_t *)v91[4];
    while (1)
    {
      if (v92 == v93)
      {
        if (++v266[0] >= (void *)((uint64_t)(*((void *)v184 + 5) - *((void *)v184 + 4)) >> 4)) {
          break;
        }
        goto LABEL_181;
      }
      int v94 = *((unsigned __int8 *)v92 + 23);
      if (*((char *)v92 + 23) < 0)
      {
        uint64_t v96 = v92[1];
        if (v96 != 17) {
          goto LABEL_231;
        }
        uint64_t v95 = (uint64_t *)*v92;
      }
      else
      {
        uint64_t v95 = v92;
        if (v94 != 17) {
          goto LABEL_227;
        }
      }
      uint64_t v97 = *v95;
      uint64_t v98 = v95[1];
      int v99 = *((unsigned __int8 *)v95 + 16);
      if (v97 == 0x6E5F74757074756FLL && v98 == 0x65646469685F7765 && v99 == 110)
      {
        MEMORY[0x192FF0F50](v92, "hidden_state");
        int v94 = *((unsigned __int8 *)v92 + 23);
        if ((v94 & 0x80) == 0)
        {
LABEL_227:
          if (v94 != 18) {
            goto LABEL_241;
          }
          uint64_t v102 = v92;
          goto LABEL_233;
        }
      }
      else if ((v94 & 0x80) == 0)
      {
        goto LABEL_227;
      }
      uint64_t v96 = v92[1];
LABEL_231:
      if (v96 != 18) {
        goto LABEL_245;
      }
      uint64_t v102 = (uint64_t *)*v92;
LABEL_233:
      uint64_t v103 = *v102;
      uint64_t v104 = v102[1];
      int v105 = *((unsigned __int16 *)v102 + 8);
      if (v103 == 0x5F656E69665F6E69 && v104 == 0x6C6163735F746962 && v105 == 25701)
      {
        MEMORY[0x192FF0F50](v92, "fine_bit_scaled");
        int v94 = *((unsigned __int8 *)v92 + 23);
        if ((v94 & 0x80) == 0)
        {
LABEL_241:
          size_t v108 = v92;
          if (v94 != 20) {
            goto LABEL_256;
          }
          goto LABEL_247;
        }
      }
      else if ((v94 & 0x80) == 0)
      {
        goto LABEL_241;
      }
      uint64_t v96 = v92[1];
LABEL_245:
      if (v96 != 20) {
        goto LABEL_256;
      }
      size_t v108 = (uint64_t *)*v92;
LABEL_247:
      uint64_t v109 = *v108;
      uint64_t v110 = v108[1];
      int v111 = *((_DWORD *)v108 + 4);
      if (v109 == 0x7372616F635F6E69 && v110 == 0x63735F7469625F65 && v111 == 1684368481) {
        MEMORY[0x192FF0F50](v92, "coarse_bit_scaled");
      }
LABEL_256:
      v92 += 3;
    }
  }
  uint64_t v114 = (uint64_t)v184;
  recompile(v184);
  if ((v216 & 0x80u) == 0) {
    size_t v115 = v216;
  }
  else {
    size_t v115 = v215;
  }
  uint64_t v116 = v194;
  std::string::basic_string[abi:ne180100]((uint64_t)v194, v115 + 22);
  if (v195 < 0) {
    uint64_t v116 = (void **)v194[0];
  }
  if (v115)
  {
    if ((v216 & 0x80u) == 0) {
      unint64_t v117 = &v214;
    }
    else {
      unint64_t v117 = v214;
    }
    memmove(v116, v117, v115);
  }
  strcpy((char *)v116 + v115, "/loop_net.espresso.net");
  checkpoint_net(&v196, (uint64_t)v184, (uint64_t)v194);
  if (v195 < 0) {
    operator delete(v194[0]);
  }
  Espresso::util_unroll_loop(v184, v118);
  std::string::basic_string[abi:ne180100]<0>(__p, "unroll_loop");
  v258[3] = 0;
  Espresso::net::pprint((uint64_t)v184, (uint64_t)__p, (uint64_t)v258);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v258);
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  if ((v216 & 0x80u) == 0) {
    size_t v119 = v216;
  }
  else {
    size_t v119 = v215;
  }
  unint64_t v120 = v190;
  std::string::basic_string[abi:ne180100]((uint64_t)v190, v119 + 26);
  if (v191 < 0) {
    unint64_t v120 = (void **)v190[0];
  }
  if (v119)
  {
    if ((v216 & 0x80u) == 0) {
      unint64_t v121 = &v214;
    }
    else {
      unint64_t v121 = v214;
    }
    memmove(v120, v121, v119);
  }
  strcpy((char *)v120 + v119, "/unrolled_net.espresso.net");
  checkpoint_net(&v192, (uint64_t)v184, (uint64_t)v190);
  if (v191 < 0) {
    operator delete(v190[0]);
  }
  uint64_t v122 = v192;
  std::string::basic_string[abi:ne180100]<0>(__p, "unrolled");
  v257[3] = 0;
  Espresso::net::pprint(v122, (uint64_t)__p, (uint64_t)v257);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v257);
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v123 = v193;
  v189[0] = v122;
  v189[1] = v193;
  if (v193) {
    atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v124 = v197;
  v188[0] = v196;
  v188[1] = v197;
  if (v197) {
    atomic_fetch_add_explicit(&v197->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v125 = util_compare(v189, v188);
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  if (v123) {
    nitro::nitro_function::nitro_function(v123);
  }
  if ((v125 & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("validation_failed after loop unroll");
  }
  uint64_t v126 = (std::__shared_weak_count *)*((void *)v184 + 3);
  v238[0] = *((void *)v184 + 2);
  v238[1] = (uint64_t)v126;
  if (v126) {
    atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v237[1] = 0;
  v237[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)__p, v238, 0, v237);
  if (v126) {
    nitro::nitro_function::nitro_function(v126);
  }
  long long v220 = 0uLL;
  *(void *)&long long v221 = 0;
  long long v278 = 0uLL;
  *(void *)&long long v279 = 0;
  memset(v287, 0, sizeof(v287));
  long long v245 = 0;
  if (*((void *)v184 + 5) == *((void *)v184 + 4))
  {
    uint64_t v163 = 0;
    uint64_t v162 = 0;
  }
  else
  {
    do
    {
      v266[0] = &v245;
      unint64_t v127 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v184 + 96, (unint64_t *)&v245, (uint64_t)&std::piecewise_construct, (uint64_t **)v266);
      uint64_t v129 = v127[3];
      uint64_t v128 = v127[4];
      uint64_t v187 = v128;
      while (v129 != v128)
      {
        int v130 = *(char *)(v129 + 23);
        uint64_t v131 = *(unsigned __int8 *)(v129 + 23);
        if (v130 < 0)
        {
          uint64_t v132 = *(const std::string::value_type **)v129;
          uint64_t v133 = *(void *)(v129 + 8);
        }
        else
        {
          uint64_t v132 = (const std::string::value_type *)v129;
          uint64_t v133 = *(unsigned __int8 *)(v129 + 23);
        }
        if (v133 >= 17)
        {
          uint64_t v134 = &v132[v133];
          uint64_t v135 = (std::string::value_type *)v132;
          do
          {
            uint64_t v136 = (const std::string::value_type *)memchr(v135, 99, v133 - 16);
            if (!v136) {
              break;
            }
            if (*(void *)v136 == 0x625F657372616F63
              && *((void *)v136 + 1) == 0x656C6163735F7469
              && v136[16] == 100)
            {
              if (v136 != v134 && v136 == v132)
              {
                uint64_t v139 = (_OWORD *)*((void *)&v278 + 1);
                if (*((void *)&v278 + 1) >= (unint64_t)v279)
                {
                  uint64_t v159 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v278, v129);
                }
                else
                {
                  if (v130 < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v278 + 1), *(const std::string::value_type **)v129, *(void *)(v129 + 8));
                  }
                  else
                  {
                    long long v140 = *(_OWORD *)v129;
                    *(void *)(*((void *)&v278 + 1) + 16) = *(void *)(v129 + 16);
                    _OWORD *v139 = v140;
                  }
                  uint64_t v159 = (std::string *)((char *)v139 + 24);
                }
                *((void *)&v278 + 1) = v159;
                uint64_t v131 = *(unsigned __int8 *)(v129 + 23);
              }
              break;
            }
            uint64_t v135 = (std::string::value_type *)(v136 + 1);
            uint64_t v133 = v134 - v135;
          }
          while (v134 - v135 >= 17);
        }
        uint64_t v141 = (const std::string::value_type *)v129;
        uint64_t v142 = v131;
        if ((v131 & 0x80) != 0)
        {
          uint64_t v141 = *(const std::string::value_type **)v129;
          uint64_t v142 = *(void *)(v129 + 8);
        }
        if (v142 >= 15)
        {
          int v143 = (char)v131;
          long long v144 = &v141[v142];
          std::string::size_type v145 = (std::string::value_type *)v141;
          do
          {
            std::string::size_type v146 = (const std::string::value_type *)memchr(v145, 102, v142 - 14);
            if (!v146) {
              break;
            }
            if (*(void *)v146 == 0x7469625F656E6966 && *(void *)(v146 + 7) == 0x64656C6163735F74)
            {
              if (v146 != v144 && v146 == v141)
              {
                long long v148 = (_OWORD *)*((void *)&v220 + 1);
                if (*((void *)&v220 + 1) >= (unint64_t)v221)
                {
                  unint64_t v160 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v220, v129);
                }
                else
                {
                  if (v143 < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v220 + 1), *(const std::string::value_type **)v129, *(void *)(v129 + 8));
                  }
                  else
                  {
                    long long v149 = *(_OWORD *)v129;
                    *(void *)(*((void *)&v220 + 1) + 16) = *(void *)(v129 + 16);
                    _OWORD *v148 = v149;
                  }
                  unint64_t v160 = (std::string *)((char *)v148 + 24);
                }
                *((void *)&v220 + 1) = v160;
                uint64_t v131 = *(unsigned __int8 *)(v129 + 23);
              }
              break;
            }
            std::string::size_type v145 = (std::string::value_type *)(v146 + 1);
            uint64_t v142 = v144 - v145;
          }
          while (v144 - v145 >= 15);
        }
        BOOL v150 = (const std::string::value_type *)v129;
        uint64_t v151 = v131;
        if ((v131 & 0x80) != 0)
        {
          BOOL v150 = *(const std::string::value_type **)v129;
          uint64_t v151 = *(void *)(v129 + 8);
        }
        if (v151 >= 12)
        {
          int v152 = (char)v131;
          std::string::size_type v153 = &v150[v151];
          uint64_t v154 = (std::string::value_type *)v150;
          do
          {
            std::string::size_type v155 = (const std::string::value_type *)memchr(v154, 104, v151 - 11);
            if (!v155) {
              break;
            }
            if (*(void *)v155 == 0x735F6E6564646968 && *((_DWORD *)v155 + 2) == 1702125940)
            {
              if (v155 != v153 && v155 == v150)
              {
                uint64_t v157 = *(_OWORD **)&v287[8];
                if (*(void *)&v287[8] >= *(void *)&v287[16])
                {
                  uint64_t v161 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v287, v129);
                }
                else
                {
                  if (v152 < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)&v287[8], *(const std::string::value_type **)v129, *(void *)(v129 + 8));
                  }
                  else
                  {
                    long long v158 = *(_OWORD *)v129;
                    *(void *)(*(void *)&v287[8] + 16) = *(void *)(v129 + 16);
                    *uint64_t v157 = v158;
                  }
                  uint64_t v161 = (std::string *)((char *)v157 + 24);
                }
                *(void *)&v287[8] = v161;
              }
              break;
            }
            uint64_t v154 = (std::string::value_type *)(v155 + 1);
            uint64_t v151 = v153 - v154;
          }
          while (v153 - v154 >= 12);
        }
        v129 += 24;
        uint64_t v128 = v187;
      }
      long long v245 = (char *)v245 + 1;
      uint64_t v114 = (uint64_t)v184;
    }
    while ((unint64_t)v245 < (uint64_t)(*((void *)v184 + 5) - *((void *)v184 + 4)) >> 4);
    uint64_t v162 = *((void *)&v220 + 1);
    uint64_t v163 = v220;
  }
  __int16 v236 = 0;
  int v235 = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v162 - v163) >> 3) <= 1) {
    uint64_t v164 = "copy";
  }
  else {
    uint64_t v164 = "general_concat";
  }
  std::string::basic_string[abi:ne180100]<0>(v266, v164);
  std::string::basic_string[abi:ne180100]<0>(&v245, "coarse_bit_scaled_concat");
  long long v285 = 0uLL;
  uint64_t v286 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v285, v278, *((uint64_t *)&v278 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v278 + 1) - v278) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v283, "out_coarse_bit_scaled");
  unint64_t v243 = 0;
  v242 = 0;
  p_std::string::pointer data = 0;
  *(void *)&long long v281 = &v242;
  BYTE8(v281) = 0;
  v242 = (std::string *)operator new(0x18uLL);
  unint64_t v243 = v242;
  p_std::string::pointer data = (void **)&v242[1].__r_.__value_.__l.__data_;
  unint64_t v243 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v283, &v285, v242);
  Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v233, (uint64_t *)__p, (uint64_t)v266, (uint64_t)&v245, (uint64_t)&v235, v285, *((uint64_t *)&v285 + 1), (uint64_t *)&v242);
  if (v234) {
    nitro::nitro_function::nitro_function(v234);
  }
  *(void *)&long long v281 = &v242;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v281);
  if (SHIBYTE(v284) < 0) {
    operator delete((void *)v283);
  }
  *(void *)&long long v283 = &v285;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v283);
  if (SHIBYTE(v247) < 0) {
    operator delete(v245);
  }
  if (SBYTE7(v267) < 0) {
    operator delete(v266[0]);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v220 + 1) - v220) >> 3) <= 1) {
    uint64_t v165 = "copy";
  }
  else {
    uint64_t v165 = "general_concat";
  }
  std::string::basic_string[abi:ne180100]<0>(v266, v165);
  std::string::basic_string[abi:ne180100]<0>(&v245, "fine_bit_scaled_concat");
  long long v283 = 0uLL;
  uint64_t v284 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v283, v220, *((uint64_t *)&v220 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v220 + 1) - v220) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v276, "out_fine_bit_scaled");
  long long v281 = 0uLL;
  uint64_t v282 = 0;
  v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281;
  v275.__r_.__value_.__s.__data_[8] = 0;
  *(void *)&long long v281 = operator new(0x18uLL);
  *((void *)&v281 + 1) = v281;
  uint64_t v282 = v281 + 24;
  *((void *)&v281 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v282, &v276, &v278, (std::string *)v281);
  Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v231, (uint64_t *)__p, (uint64_t)v266, (uint64_t)&v245, (uint64_t)&v235, v283, *((uint64_t *)&v283 + 1), (uint64_t *)&v281);
  if (v232) {
    nitro::nitro_function::nitro_function(v232);
  }
  v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
  if (SHIBYTE(v277) < 0) {
    operator delete((void *)v276);
  }
  *(void *)&long long v276 = &v283;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  if (SHIBYTE(v247) < 0) {
    operator delete(v245);
  }
  if (SBYTE7(v267) < 0) {
    operator delete(v266[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v266, "copy");
  std::string::basic_string[abi:ne180100]<0>(&v245, "hidden_state_out");
  int v230 = 0;
  uint64_t v166 = (const std::string::value_type **)(*(void *)&v287[8] - 24);
  if (*(char *)(*(void *)&v287[8] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(&v275, *v166, *(void *)(*(void *)&v287[8] - 16));
  }
  else
  {
    long long v167 = *(_OWORD *)v166;
    v275.__r_.__value_.__r.__words[2] = *(void *)(*(void *)&v287[8] - 8);
    *(_OWORD *)&v275.__r_.__value_.__l.__data_ = v167;
  }
  long long v276 = 0uLL;
  uint64_t v277 = 0;
  int v227 = (std::string *)&v276;
  LOBYTE(v228) = 0;
  *(void *)&long long v276 = operator new(0x18uLL);
  *((void *)&v276 + 1) = v276;
  uint64_t v277 = v276 + 24;
  *((void *)&v276 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v277, (long long *)&v275, &v276, (std::string *)v276);
  std::string::basic_string[abi:ne180100]<0>(v273, "out_hidden_state");
  int v227 = 0;
  unint64_t v228 = 0;
  int v229 = 0;
  uint64_t v239 = (void **)&v227;
  LOBYTE(v240) = 0;
  int v227 = (std::string *)operator new(0x18uLL);
  unint64_t v228 = v227;
  int v229 = v227 + 1;
  unint64_t v228 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v229, (long long *)v273, (long long *)&v275, v227);
  Espresso::sequential_builder::add<Espresso::copy_params_t>((uint64_t *)&v239, (uint64_t *)__p, (uint64_t)v266, (uint64_t)&v245, (uint64_t)&v230, v276, *((uint64_t *)&v276 + 1), (uint64_t *)&v227);
  if (v240) {
    nitro::nitro_function::nitro_function(v240);
  }
  v241 = &v227;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
  if (v274 < 0) {
    operator delete(v273[0]);
  }
  v273[0] = &v276;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v273);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v275.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v247) < 0) {
    operator delete(v245);
  }
  if (SBYTE7(v267) < 0) {
    operator delete(v266[0]);
  }
  uint64_t v168 = (uint64_t)(*(void *)(v114 + 40) - *(void *)(v114 + 32)) >> 4;
  long long v267 = 0u;
  *(_OWORD *)uint64_t v266 = 0u;
  LODWORD(v268) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)__p, (long long **)v114, v168, (uint64_t)v266);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  recompile((Espresso::net *)v114);
  std::string::basic_string[abi:ne180100]<0>(&v245, "");
  *((void *)&v267 + 1) = 0;
  Espresso::net::pprint(v114, (uint64_t)&v245, (uint64_t)v266);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v266);
  if (SHIBYTE(v247) < 0) {
    operator delete(v245);
  }
  long long v245 = v287;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
  *(void *)v287 = &v278;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v287);
  *(void *)&long long v278 = &v220;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v256);
  if (v255) {
    nitro::nitro_function::nitro_function(v255);
  }
  if (v254) {
    nitro::nitro_function::nitro_function(v254);
  }
  if (v253) {
    nitro::nitro_function::nitro_function(v253);
  }
  if (v252 < 0) {
    operator delete(*(void **)&v250[24]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v249, *((void **)&v249 + 1));
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "find_shared_weights");
  Espresso::run_custom_pass_on_network((uint64_t *)__p, v114);
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  if (v123) {
    nitro::nitro_function::nitro_function(v123);
  }
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  if (!getenv("ESPRESSO_PASS_WAVERNN_NORANDOM"))
  {
    uint64_t v169 = *(std::__shared_weak_count **)(v114 + 24);
    v275.__r_.__value_.__r.__words[0] = *(void *)(v114 + 16);
    v275.__r_.__value_.__l.__size_ = (std::string::size_type)v169;
    if (v169) {
      atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v227 = 0;
    unint64_t v228 = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)__p, (uint64_t *)&v275, 0, (uint64_t *)&v227);
    if (v169) {
      nitro::nitro_function::nitro_function(v169);
    }
    std::string::basic_string[abi:ne180100]<0>(v266, "O2__rand_v");
    *(void *)&long long v220 = v266;
    uint64_t v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v183, (unsigned __int8 *)v266, (long long **)&v220);
    uint64_t v171 = *((void *)v170 + 5);
    uint64_t v172 = (std::__shared_weak_count *)*((void *)v170 + 6);
    if (v172) {
      atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SBYTE7(v267) < 0) {
      operator delete(v266[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v266, "O4__rand_v");
    *(void *)&long long v220 = v266;
    uint64_t v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v183, (unsigned __int8 *)v266, (long long **)&v220);
    uint64_t v174 = *((void *)v173 + 5);
    uint8x8_t v175 = (std::__shared_weak_count *)*((void *)v173 + 6);
    if (v175) {
      atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SBYTE7(v267) < 0) {
      operator delete(v266[0]);
    }
    HIDWORD(v268) = 1;
    WORD2(v269) = 0;
    HIDWORD(v266[1]) = -1;
    LODWORD(v266[0]) = 3;
    *(void **)((char *)v266 + 4) = (void *)0x3C23D70A3F800000;
    long long v267 = *(_OWORD *)(v171 + 8);
    LODWORD(v268) = *(_DWORD *)(v171 + 24);
    LODWORD(v269) = *(_DWORD *)(v171 + 28);
    std::string::basic_string[abi:ne180100]<0>(&v220, "load_random");
    std::string::basic_string[abi:ne180100]<0>(&v278, "gumbel_noise_2");
    memset(v287, 0, sizeof(v287));
    std::string::basic_string[abi:ne180100]<0>(&v285, "O2__rand_v");
    long long v246 = 0;
    long long v245 = 0;
    int v247 = 0;
    v242 = (std::string *)&v245;
    LOBYTE(v243) = 0;
    long long v245 = operator new(0x18uLL);
    long long v246 = v245;
    int v247 = (char *)v245 + 24;
    long long v246 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v247, &v285, (long long *)v287, (std::string *)v245);
    Espresso::sequential_builder::add<Espresso::load_random_params_t>((uint64_t *)v273, (uint64_t *)__p, (uint64_t)&v220, (uint64_t)&v278, (uint64_t)v266, *(uint64_t *)v287, *(uint64_t *)&v287[8], (uint64_t *)&v245);
    if (v273[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v273[1]);
    }
    v242 = (std::string *)&v245;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
    if (SHIBYTE(v286) < 0) {
      operator delete((void *)v285);
    }
    *(void *)&long long v285 = v287;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v285);
    if (SBYTE7(v279) < 0) {
      operator delete((void *)v278);
    }
    if (SBYTE7(v221) < 0) {
      operator delete((void *)v220);
    }
    HIDWORD(v220) = -1;
    int v223 = 1;
    __int16 v225 = 0;
    LODWORD(v220) = 3;
    *(void *)((char *)&v220 + 4) = 0x3C23D70A3F800000;
    long long v221 = *(_OWORD *)(v174 + 8);
    int v222 = *(_DWORD *)(v174 + 24);
    int v224 = *(_DWORD *)(v174 + 28);
    std::string::basic_string[abi:ne180100]<0>(&v278, "load_random");
    std::string::basic_string[abi:ne180100]<0>(&v285, "gumbel_noise_4");
    unint64_t v243 = 0;
    v242 = 0;
    p_std::string::pointer data = 0;
    std::string::basic_string[abi:ne180100]<0>(&v281, "O4__rand_v");
    long long v283 = 0uLL;
    uint64_t v284 = 0;
    *(void *)&long long v276 = &v283;
    BYTE8(v276) = 0;
    *(void *)&long long v283 = operator new(0x18uLL);
    *((void *)&v283 + 1) = v283;
    uint64_t v284 = v283 + 24;
    *((void *)&v283 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v284, &v281, &v283, (std::string *)v283);
    Espresso::sequential_builder::add<Espresso::load_random_params_t>((uint64_t *)&v276, (uint64_t *)__p, (uint64_t)&v278, (uint64_t)&v285, (uint64_t)&v220, (uint64_t)v242, (uint64_t)v243, (uint64_t *)&v283);
    if (*((void *)&v276 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v276 + 1));
    }
    uint64_t v239 = (void **)&v283;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v239);
    if (SHIBYTE(v282) < 0) {
      operator delete((void *)v281);
    }
    *(void *)&long long v281 = &v242;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v281);
    if (SHIBYTE(v286) < 0) {
      operator delete((void *)v285);
    }
    if (SBYTE7(v279) < 0) {
      operator delete((void *)v278);
    }
    long long v278 = 0u;
    long long v279 = 0u;
    int v280 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)__p, (long long **)v114, 0, (uint64_t)&v278);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    std::string::basic_string[abi:ne180100]<0>(&v285, "");
    *((void *)&v279 + 1) = 0;
    Espresso::net::pprint(v114, (uint64_t)&v285, (uint64_t)&v278);
    std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](&v278);
    if (SHIBYTE(v286) < 0) {
      operator delete((void *)v285);
    }
    if (v175) {
      nitro::nitro_function::nitro_function(v175);
    }
    if (v172) {
      nitro::nitro_function::nitro_function(v172);
    }
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v256);
    if (v255) {
      nitro::nitro_function::nitro_function(v255);
    }
    if (v254) {
      nitro::nitro_function::nitro_function(v254);
    }
    if (v253) {
      nitro::nitro_function::nitro_function(v253);
    }
    if (v252 < 0) {
      operator delete(*(void **)&v250[24]);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v249, *((void **)&v249 + 1));
    if (__p[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "anec_flags");
  v266[0] = __p;
  unint64_t v176 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v114 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v266);
  MEMORY[0x192FF0F50]((char *)v176 + 56, "EnableSingleChannelEWOpCopyRemoval,EnableAggressiveTensorCaching");
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "hint_no_mutable_weights");
  v266[0] = __p;
  int v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v114 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v266);
  MEMORY[0x192FF0F50]((char *)v177 + 56, "1");
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.use_faux_dispatch");
  v266[0] = __p;
  id v178 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v114 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v266);
  MEMORY[0x192FF0F50]((char *)v178 + 56, "1");
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.skip_network_transform_pre_allocation");
  v266[0] = __p;
  unint64_t v179 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v114 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v266);
  MEMORY[0x192FF0F50]((char *)v179 + 56, "1");
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.use_high_precision_activations");
  v266[0] = __p;
  unint64_t v180 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v114 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)v266);
  MEMORY[0x192FF0F50]((char *)v180 + 56, "1");
  if (SBYTE7(v249) < 0) {
    operator delete(__p[0]);
  }
  long long v181 = *(std::__shared_weak_count **)(v114 + 976);
  *(_OWORD *)(v114 + 968) = 0u;
  if (v181) {
    nitro::nitro_function::nitro_function(v181);
  }
  *(unsigned char *)this = 1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (v203) {
    nitro::nitro_function::nitro_function(v203);
  }
  if (v209) {
    nitro::nitro_function::nitro_function(v209);
  }
  if (v213) {
    nitro::nitro_function::nitro_function(v213);
  }
  if ((char)v216 < 0) {
    operator delete(v214);
  }
}

void sub_1926DF494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100]((void *)(v61 - 256));
  if (*(char *)(v61 - 145) < 0) {
    operator delete(*(void **)(v61 - 168));
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x2A0]);
  if (a39) {
    nitro::nitro_function::nitro_function(a39);
  }
  if (a48) {
    nitro::nitro_function::nitro_function(a48);
  }
  if (a53) {
    nitro::nitro_function::nitro_function(a53);
  }
  if (a59 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  long long v16 = *a3;
  long long v17 = **a3;
  *((void *)i + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)long long v16 = 0;
  *((void *)i + 5) = 0;
  *((void *)i + 6) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  size_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  *unint64_t v15 = i;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    size_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_1926E0054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void checkpoint_net(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  void v13[3] = 0;
  Espresso::net::pprint(a2, a3, (uint64_t)v13);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v13);
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v11, *(void *)a2, *(std::__shared_weak_count **)(a2 + 8));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __str = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::dump_network(&v11, &__str, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  Espresso::load_network(a3, (void *)(a2 + 16), 0, 0, a1);
}

void sub_1926E01A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_wavernn_ane::initial_inner_product_to_add(Espresso::pass_wavernn_ane *this, Espresso::net *a2)
{
  *(void *)&long long v202 = *MEMORY[0x1E4F143B8];
  Espresso::net::get_producers_of_blobs(a2, (uint64_t)v187);
  *(void *)uint64_t v186 = 0;
  uint64_t v4 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v4)
  {
    unint64_t v5 = 0;
    uint8x8_t v6 = (char *)a2 + 96;
    char v7 = (char *)a2 + 56;
    unint64_t v8 = v179;
    do
    {
      uint64_t v9 = *(void *)(v4 + 16 * v5);
      uint8x8_t v10 = *(const void **)(v9 + 64);
      if (v10)
      {
        if (v11)
        {
          unint64_t v12 = v11;
          long long v13 = *(std::__shared_weak_count **)(v9 + 72);
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((!(***(unsigned int (****)(void))(v11[1] + 8))(*(void *)(v11[1] + 8))
             || (***(unsigned int (****)(void))(v12[1] + 8))(*(void *)(v12[1] + 8)) == 100)
            && *(_DWORD *)((*(uint64_t (**)(void *))(*v12 + 384))(v12) + 4) == *((_DWORD *)this + 7)
            && !*(_DWORD *)((*(uint64_t (**)(void *))(*v12 + 384))(v12) + 12)
            && !*(_DWORD *)((*(uint64_t (**)(void *))(*v12 + 384))(v12) + 16))
          {
            int v14 = *(_DWORD *)((*(uint64_t (**)(void *))(*v12 + 384))(v12) + 4);
            (*(void (**)(uint64_t *__return_ptr, void *))(*v12 + 416))(&v184, v12);
            v171[0] = v186;
            unint64_t v15 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, (unint64_t *)v186, (uint64_t)&std::piecewise_construct, (uint64_t **)v171)[3];
            if (*((char *)v15 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)v15, *((void *)v15 + 1));
            }
            else
            {
              long long v16 = *v15;
              v138.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
              *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v16;
            }
            v171[0] = v186;
            long long v17 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, (unint64_t *)v186, (uint64_t)&std::piecewise_construct, (uint64_t **)v171)[3];
            if (*((char *)v17 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)v17, *((void *)v17 + 1));
            }
            else
            {
              long long v18 = *v17;
              v201.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
              *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v18;
            }
            uint64_t v19 = *(void *)(*((void *)a2 + 4) + 16 * *(void *)v186);
            if (*(char *)(v19 + 39) < 0) {
              std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)(v19 + 16), *(void *)(v19 + 24));
            }
            else {
              std::string v183 = *(std::string *)(v19 + 16);
            }
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v187, (uint64_t)&v201))
            {
              v171[0] = &v201;
              BOOL v20 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v187, (uint64_t)&v201, (uint64_t)&std::piecewise_construct, (long long **)v171);
              if (v20[5] == *(void *)v186 - 1)
              {
                v171[0] = &v201;
                v171[0] = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v187, (uint64_t)&v201, (uint64_t)&std::piecewise_construct, (long long **)v171)+ 5;
                unint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, (unint64_t *)v171[0], (uint64_t)&std::piecewise_construct, (uint64_t **)v171);
                uint64_t v182 = 0;
                lpvImage_Buffer src = 0;
                long long v181 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&lpsrc, v21[3], v21[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[4] - v21[3]) >> 3));
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v181 - (unsigned char *)lpsrc) >> 3) >= 2)
                {
                  Espresso::net::remove_layer(a2, v186[0]);
                  Espresso::net::remove_layer(a2, v186[0] - 1);
                  unint64_t v22 = (std::__shared_weak_count *)*((void *)a2 + 3);
                  v170[0] = *((void *)a2 + 2);
                  v170[1] = (uint64_t)v22;
                  if (v22) {
                    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v169[1] = 0;
                  v169[0] = 0;
                  Espresso::sequential_builder::sequential_builder((uint64_t)v171, v170, 0, v169);
                  uint64_t v123 = (uint64_t)v8;
                  if (v22) {
                    nitro::nitro_function::nitro_function(v22);
                  }
                  unint64_t v124 = v7;
                  char v125 = v6;
                  long long v167 = 0;
                  *(void *)uint64_t v166 = 0;
                  unint64_t v168 = 0;
                  size_t v23 = (std::__shared_weak_count *)lpsrc;
                  uint64_t v126 = v181;
                  if (lpsrc == v181)
                  {
                    uint64_t v69 = 0;
                  }
                  else
                  {
                    uint64_t v122 = this;
                    int v24 = 0;
                    int v25 = 0;
                    do
                    {
                      uint64_t v26 = (*(uint64_t (**)(void *))(*v12 + 384))(v12);
                      long long v160 = *(_OWORD *)v26;
                      long long v27 = *(_OWORD *)(v26 + 16);
                      long long v28 = *(_OWORD *)(v26 + 32);
                      long long v29 = *(_OWORD *)(v26 + 64);
                      *(_OWORD *)&v161[32] = *(_OWORD *)(v26 + 48);
                      long long v162 = v29;
                      *(_OWORD *)uint64_t v161 = v27;
                      *(_OWORD *)&v161[16] = v28;
                      long long v30 = *(_OWORD *)(v26 + 80);
                      long long v31 = *(_OWORD *)(v26 + 96);
                      long long v32 = *(_OWORD *)(v26 + 112);
                      *(_DWORD *)&v165[16] = *(_DWORD *)(v26 + 128);
                      long long v164 = v31;
                      *(_OWORD *)uint64_t v165 = v32;
                      long long v163 = v30;
                      __sz[0] = (std::string::size_type)v23;
                      DWORD1(v160) = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)v23, (long long **)__sz)+ 5)+ 8);
                      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t size = HIBYTE(v138.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        size_t size = v138.__r_.__value_.__l.__size_;
                      }
                      std::string::basic_string[abi:ne180100]((uint64_t)&v159, size + 2);
                      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        int v34 = &v159;
                      }
                      else {
                        int v34 = (std::string *)v159.__r_.__value_.__r.__words[0];
                      }
                      if (size)
                      {
                        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          int v35 = &v138;
                        }
                        else {
                          int v35 = (std::string *)v138.__r_.__value_.__r.__words[0];
                        }
                        memmove(v34, v35, size);
                      }
                      strcpy((char *)v34 + size, "__");
                      std::to_string(&__str, v25);
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        p_str = &__str;
                      }
                      else {
                        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                      }
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v37 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v37 = __str.__r_.__value_.__l.__size_;
                      }
                      size_t v38 = std::string::append(&v159, (const std::string::value_type *)p_str, v37);
                      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
                      *(void *)uint64_t v192 = *((void *)&v38->__r_.__value_.__l + 2);
                      *(_OWORD *)__sz = v39;
                      v38->__r_.__value_.__l.__size_ = 0;
                      v38->__r_.__value_.__r.__words[2] = 0;
                      v38->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v159.__r_.__value_.__l.__data_);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v159, "inner_product");
                      if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v40 = HIBYTE(v183.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        size_t v40 = v183.__r_.__value_.__l.__size_;
                      }
                      std::string::basic_string[abi:ne180100]((uint64_t)&v157, v40 + 2);
                      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v41 = &v157;
                      }
                      else {
                        size_t v41 = (std::string *)v157.__r_.__value_.__r.__words[0];
                      }
                      if (v40)
                      {
                        if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          __int16 v42 = &v183;
                        }
                        else {
                          __int16 v42 = (std::string *)v183.__r_.__value_.__r.__words[0];
                        }
                        memmove(v41, v42, v40);
                      }
                      strcpy((char *)v41 + v40, "__");
                      std::to_string(&v156, v25);
                      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        unint64_t v43 = &v156;
                      }
                      else {
                        unint64_t v43 = (std::string *)v156.__r_.__value_.__r.__words[0];
                      }
                      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v44 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v44 = v156.__r_.__value_.__l.__size_;
                      }
                      uint64_t v45 = std::string::append(&v157, (const std::string::value_type *)v43, v44);
                      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
                      __str.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v46;
                      v45->__r_.__value_.__l.__size_ = 0;
                      v45->__r_.__value_.__r.__words[2] = 0;
                      v45->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v23->__shared_weak_owners_) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v199, (const std::string::value_type *)v23->__vftable, v23->__shared_owners_);
                      }
                      else
                      {
                        std::__shared_count v47 = v23->std::__shared_count;
                        v199.__r_.__value_.__r.__words[2] = v23->__shared_weak_owners_;
                        *(std::__shared_count *)&v199.__r_.__value_.__l.__data_ = v47;
                      }
                      std::string::size_type v153 = 0;
                      uint64_t v154 = 0;
                      std::string::size_type v155 = 0;
                      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
                      v197.__r_.__value_.__s.__data_[8] = 0;
                      std::string::size_type v153 = (std::string *)operator new(0x18uLL);
                      uint64_t v154 = v153;
                      std::string::size_type v155 = v153 + 1;
                      uint64_t v154 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v155, (long long *)&v199, (long long *)&v200, v153);
                      if ((v192[7] & 0x80000000) != 0)
                      {
                        std::string::__init_copy_ctor_external(&v197, (const std::string::value_type *)__sz[0], __sz[1]);
                      }
                      else
                      {
                        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = *(_OWORD *)__sz;
                        v197.__r_.__value_.__r.__words[2] = *(void *)v192;
                      }
                      BOOL v150 = 0;
                      uint64_t v151 = 0;
                      int v152 = 0;
                      v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
                      v195.__r_.__value_.__s.__data_[8] = 0;
                      BOOL v150 = (std::string *)operator new(0x18uLL);
                      uint64_t v151 = v150;
                      int v152 = v150 + 1;
                      uint64_t v151 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v152, (long long *)&v197, (long long *)&v198, v150);
                      Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v188, (uint64_t *)v171, (uint64_t)&v159, (uint64_t)&__str, (uint64_t)&v160, (uint64_t *)&v153, (uint64_t *)&v150);
                      v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
                      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v197.__r_.__value_.__l.__data_);
                      }
                      v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
                      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v199.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v156.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v157.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v159.__r_.__value_.__l.__data_);
                      }
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v159, SDWORD1(v160), v160, 1, 1);
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__str, v160, 1, 1, 1);
                      printf("initial_inner_product_to_add: i=%d start_ch=%d nB=%d nC=%d\n", v25, v24, DWORD1(v160), v160);
                      if (!v25)
                      {
                        (*(void (**)(std::string *__return_ptr, void *))(*v12 + 408))(&v157, v12);
                        long long v66 = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
                        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
                        uint64_t v67 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
                        if (v67)
                        {
                          nitro::nitro_function::nitro_function(v67);
                          if (v157.__r_.__value_.__l.__size_) {
                            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v157.__r_.__value_.__l.__size_);
                          }
                        }
                      }
                      int v48 = v160;
                      std::string::size_type v49 = v159.__r_.__value_.__r.__words[0];
                      if (v160)
                      {
                        unsigned int v50 = 0;
                        int v51 = 0;
                        uint64_t v52 = DWORD1(v160);
                        uint64_t v53 = v184;
                        int v54 = v24;
                        do
                        {
                          if (v52)
                          {
                            uint64_t v55 = *(void *)(v53 + 16);
                            uint64_t v56 = *(void *)(v49 + 16);
                            int v57 = v54;
                            unsigned int v58 = v50;
                            uint64_t v59 = v52;
                            do
                            {
                              *(_DWORD *)(v56 + 4 * v58++) = *(_DWORD *)(v55 + 4 * v57++);
                              --v59;
                            }
                            while (v59);
                          }
                          ++v51;
                          v50 += v52;
                          v54 += v14;
                        }
                        while (v51 != v48);
                      }
                      uint64_t v60 = (void **)v188;
                      uint64_t v61 = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
                      std::string::size_type v148 = v49;
                      long long v149 = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
                      if (v159.__r_.__value_.__l.__size_) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v159.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                      }
                      (*((void (**)(void **, std::string::size_type *))*v60 + 50))(v60, &v148);
                      if (v149) {
                        nitro::nitro_function::nitro_function(v149);
                      }
                      int v62 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                      long long v147 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                      if (__str.__r_.__value_.__l.__size_) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                      }
                      (*((void (**)(void **, long long *))*v60 + 49))(v60, &v147);
                      if (*((void *)&v147 + 1)) {
                        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v147 + 1));
                      }
                      uint64_t v63 = v167;
                      if ((unint64_t)v167 >= v168)
                      {
                        int v65 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v166, (uint64_t)__sz);
                      }
                      else
                      {
                        if ((v192[7] & 0x80000000) != 0)
                        {
                          std::string::__init_copy_ctor_external(v167, (const std::string::value_type *)__sz[0], __sz[1]);
                        }
                        else
                        {
                          long long v64 = *(_OWORD *)__sz;
                          v167->__r_.__value_.__r.__words[2] = *(void *)v192;
                          *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
                        }
                        int v65 = v63 + 1;
                      }
                      long long v167 = v65;
                      int v68 = DWORD1(v160);
                      if (v62) {
                        nitro::nitro_function::nitro_function(v62);
                      }
                      if (v61) {
                        nitro::nitro_function::nitro_function(v61);
                      }
                      if (v189) {
                        nitro::nitro_function::nitro_function(v189);
                      }
                      if ((v192[7] & 0x80000000) != 0) {
                        operator delete((void *)__sz[0]);
                      }
                      v24 += v68;
                      ++v25;
                      ++v23;
                    }
                    while (v23 != v126);
                    uint64_t v69 = *(long long **)v166;
                    this = v122;
                  }
                  if (*((char *)v69 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)v69, *((void *)v69 + 1));
                    uint64_t v69 = *(long long **)v166;
                  }
                  else
                  {
                    long long v70 = *v69;
                    v159.__r_.__value_.__r.__words[2] = *((void *)v69 + 2);
                    *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v70;
                  }
                  uint64_t v71 = v167;
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v69) >> 3) >= 2)
                  {
                    unint64_t v72 = 1;
                    do
                    {
                      *(void *)&long long v160 = 0;
                      *((void *)&v160 + 1) = 1065353216;
                      *(void *)uint64_t v161 = 897988541;
                      v161[8] = 0;
                      *(void *)&v161[28] = 0;
                      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
                      {
                        std::string::__init_copy_ctor_external(&__str, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
                        uint64_t v71 = v167;
                        uint64_t v69 = *(long long **)v166;
                      }
                      else
                      {
                        std::string __str = v138;
                      }
                      if (-1 - 0x5555555555555555 * (((char *)v71 - (char *)v69) >> 3) > v72)
                      {
                        std::to_string(&v157, v72);
                        char v73 = std::string::insert(&v157, 0, "__tmp_");
                        long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
                        *(void *)uint64_t v192 = *((void *)&v73->__r_.__value_.__l + 2);
                        *(_OWORD *)__sz = v74;
                        v73->__r_.__value_.__l.__size_ = 0;
                        v73->__r_.__value_.__r.__words[2] = 0;
                        v73->__r_.__value_.__r.__words[0] = 0;
                        if (v192[7] >= 0) {
                          long long v75 = __sz;
                        }
                        else {
                          long long v75 = (std::string::size_type *)__sz[0];
                        }
                        if (v192[7] >= 0) {
                          std::string::size_type v76 = v192[7];
                        }
                        else {
                          std::string::size_type v76 = __sz[1];
                        }
                        std::string::append(&__str, (const std::string::value_type *)v75, v76);
                        if ((v192[7] & 0x80000000) != 0) {
                          operator delete((void *)__sz[0]);
                        }
                        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v157.__r_.__value_.__l.__data_);
                        }
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v157, "elementwise");
                      if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v77 = HIBYTE(v183.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        size_t v77 = v183.__r_.__value_.__l.__size_;
                      }
                      std::string::basic_string[abi:ne180100]((uint64_t)&v199, v77 + 5);
                      if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v78 = &v199;
                      }
                      else {
                        uint64_t v78 = (std::string *)v199.__r_.__value_.__r.__words[0];
                      }
                      if (v77)
                      {
                        if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v79 = &v183;
                        }
                        else {
                          uint64_t v79 = (std::string *)v183.__r_.__value_.__r.__words[0];
                        }
                        memmove(v78, v79, v77);
                      }
                      strcpy((char *)v78 + v77, "__add");
                      std::to_string(&v197, v72);
                      if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v80 = &v197;
                      }
                      else {
                        uint64_t v80 = (std::string *)v197.__r_.__value_.__r.__words[0];
                      }
                      if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v81 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v81 = v197.__r_.__value_.__l.__size_;
                      }
                      int v82 = std::string::append(&v199, (const std::string::value_type *)v80, v81);
                      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                      v156.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v83;
                      v82->__r_.__value_.__l.__size_ = 0;
                      v82->__r_.__value_.__r.__words[2] = 0;
                      v82->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)__sz, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
                      }
                      else
                      {
                        *(_OWORD *)__sz = *(_OWORD *)&v159.__r_.__value_.__l.__data_;
                        *(void *)uint64_t v192 = *((void *)&v159.__r_.__value_.__l + 2);
                      }
                      uint64_t v84 = *(void *)v166 + 24 * v72;
                      if (*(char *)(v84 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)&v192[8], *(const std::string::value_type **)v84, *(void *)(v84 + 8));
                      }
                      else
                      {
                        long long v85 = *(_OWORD *)v84;
                        unint64_t v193 = *(void **)(v84 + 16);
                        *(_OWORD *)&v192[8] = v85;
                      }
                      uint64_t v142 = 0;
                      int v143 = 0;
                      long long v144 = 0;
                      v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
                      v195.__r_.__value_.__s.__data_[8] = 0;
                      uint64_t v142 = (std::string *)operator new(0x30uLL);
                      int v143 = v142;
                      long long v144 = v142 + 2;
                      int v143 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v144, (long long *)__sz, &v194, v142);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external(&v195, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                      }
                      else {
                        std::string v195 = __str;
                      }
                      uint64_t v139 = 0;
                      long long v140 = 0;
                      uint64_t v141 = 0;
                      uint64_t v188 = &v139;
                      LOBYTE(v189) = 0;
                      uint64_t v139 = (std::string *)operator new(0x18uLL);
                      long long v140 = v139;
                      uint64_t v141 = v139 + 1;
                      long long v140 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v141, (long long *)&v195, (long long *)&v196, v139);
                      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v145, (uint64_t *)v171, (uint64_t)&v157, (uint64_t)&v156, (uint64_t)&v160, (uint64_t)v142, (uint64_t)v143, (uint64_t *)&v139);
                      if (v146) {
                        nitro::nitro_function::nitro_function(v146);
                      }
                      uint64_t v188 = &v139;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
                      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v195.__r_.__value_.__l.__data_);
                      }
                      v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
                      for (uint64_t i = 0; i != -48; i -= 24)
                      {
                        if (*((char *)&v193 + i + 7) < 0) {
                          operator delete(*(void **)&v192[i + 8]);
                        }
                      }
                      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v156.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v197.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v199.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v157.__r_.__value_.__l.__data_);
                      }
                      std::string::operator=(&v159, &__str);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      ++v72;
                      uint64_t v71 = v167;
                      uint64_t v69 = *(long long **)v166;
                    }
                    while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v167 - *(void *)v166) >> 3) > v72);
                  }
                  long long v160 = 0u;
                  *(_OWORD *)uint64_t v161 = 0u;
                  *(_DWORD *)&v161[16] = 1065353216;
                  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v171, (long long **)a2, v186[0] - 1, (uint64_t)&v160);
                  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
                  char v7 = v124;
                  uint8x8_t v6 = v125;
                  unint64_t v8 = (unsigned char *)v123;
                  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v159.__r_.__value_.__l.__data_);
                  }
                  *(void *)&long long v160 = v166;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
                  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](v123);
                  if (v178) {
                    nitro::nitro_function::nitro_function(v178);
                  }
                  if (v177) {
                    nitro::nitro_function::nitro_function(v177);
                  }
                  if (v176) {
                    nitro::nitro_function::nitro_function(v176);
                  }
                  if (v175 < 0) {
                    operator delete(__p);
                  }
                  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v172, *((void **)&v172 + 1));
                  if (v171[1]) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v171[1]);
                  }
                }
                v171[0] = &lpsrc;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
              }
            }
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v183.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v201.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v138.__r_.__value_.__l.__data_);
            }
            if (v185) {
              nitro::nitro_function::nitro_function(v185);
            }
          }
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
        }
      }
      unint64_t v5 = *(void *)v186 + 1;
      *(void *)uint64_t v186 = v5;
      uint64_t v4 = *((void *)a2 + 4);
    }
    while (v5 < (*((void *)a2 + 5) - v4) >> 4);
  }
  *(_OWORD *)uint64_t v171 = 0u;
  long long v172 = 0u;
  int v173 = 1065353216;
  Espresso::net::get_consumers_of_blobs(a2, v171, (uint64_t)&v138);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v171);
  *(void *)uint64_t v166 = 0;
  uint64_t v87 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) - v87 != 16)
  {
    unint64_t v88 = 0;
    uint64_t v89 = (void *)((char *)&v164 + 4);
    uint64_t v90 = (char *)a2 + 136;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      uint64_t v96 = *(void *)(v87 + 16 * v88);
      uint64_t v97 = *(const void **)(v96 + 64);
      if (!v97) {
        break;
      }
      if (!v98) {
        goto LABEL_216;
      }
      int v99 = *(std::__shared_weak_count **)(v96 + 72);
      if (v99)
      {
        atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v87 = *((void *)a2 + 4);
      }
LABEL_217:
      uint64_t v100 = *(void *)(v87 + 16 * v88 + 16);
      uint64_t v101 = *(const void **)(v100 + 64);
      if (v101)
      {
        if (v102)
        {
          uint64_t v103 = *(std::__shared_weak_count **)(v100 + 72);
          if (v103) {
            atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v98) {
            goto LABEL_278;
          }
          if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v102 + 320))(v102) != 1) {
            goto LABEL_278;
          }
          v171[0] = v166;
          v171[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)v166, (uint64_t)&std::piecewise_construct, (uint64_t **)v171)+ 3);
          uint64_t v104 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v138, (unsigned __int8 *)v171[0], (long long **)v171);
          if (*((void *)v104 + 6) - *((void *)v104 + 5) != 8) {
            goto LABEL_278;
          }
          v171[0] = v166;
          int v105 = (const char *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)v166, (uint64_t)&std::piecewise_construct, (uint64_t **)v171)[3];
          if (v105[23] < 0) {
            int v105 = *(const char **)v105;
          }
          v171[0] = v166;
          v171[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)v166, (uint64_t)&std::piecewise_construct, (uint64_t **)v171)+ 3);
          std::string::size_type v106 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v138, (unsigned __int8 *)v171[0], (long long **)v171);
          printf("consumer k=%s consumer_of_constant=%zu ilayer=%zu\n", v105, **((void **)v106 + 5), *(size_t *)v166);
          v171[0] = v166;
          v171[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)v166, (uint64_t)&std::piecewise_construct, (uint64_t **)v171)+ 3);
          std::string::size_type v107 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v138, (unsigned __int8 *)v171[0], (long long **)v171);
          if (**((void **)v107 + 5) != *(void *)v166 + 1) {
            goto LABEL_278;
          }
          size_t v108 = (std::__shared_weak_count *)*((void *)a2 + 3);
          v137[0] = *((void *)a2 + 2);
          v137[1] = (uint64_t)v108;
          if (v108) {
            atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v136[0] = 0;
          v136[1] = 0;
          Espresso::sequential_builder::sequential_builder((uint64_t)v171, v137, 0, v136);
          if (v108) {
            nitro::nitro_function::nitro_function(v108);
          }
          v161[24] = 0;
          *(_DWORD *)&v161[36] = -1;
          *(void *)&v161[40] = _D8;
          *(void *)&v165[12] = 0;
          *(void *)&v161[4] = _D8;
          *(void *)((char *)&v163 + 4) = 0;
          *(void *)&v161[12] = 0;
          *(void *)&v161[28] = 0;
          *(_DWORD *)uint64_t v161 = 0;
          *(_DWORD *)&v161[20] = 0;
          v89[1] = 0;
          void v89[2] = 0;
          *uint64_t v89 = 0;
          long long v160 = xmmword_192DCA240;
          v183.__r_.__value_.__r.__words[0] = *(void *)v166 + 1;
          v201.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 96, *(void *)v166 + 1, &v183)[3];
          uint64_t v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (unsigned __int8 *)v201.__r_.__value_.__l.__data_, (long long **)&v201);
          Espresso::abstract_blob_container::shape((char *)__sz, *((void *)v109 + 5));
          LODWORD(v160) = __sz[0];
          if (v193)
          {
            *(void *)&long long v194 = v193;
            operator delete(v193);
          }
          __sz[0] = *(void *)v166 + 1;
          uint64_t v110 = (const char *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 96, *(void *)v166 + 1, __sz)[3];
          unint64_t v127 = v90;
          if (v110[23] < 0) {
            uint64_t v110 = *(const char **)v110;
          }
          int v111 = v89;
          printf("%s %d\n", v110, v160);
          *((void *)&v160 + 1) = 0;
          std::string::basic_string[abi:ne180100]<0>(__sz, "inner_product");
          uint64_t v112 = *(void *)(*((void *)a2 + 4) + 16 * (*(void *)v166 + 1));
          v159.__r_.__value_.__r.__words[0] = *(void *)v166 + 1;
          uint64_t v113 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, *(void *)v166 + 1, &v159)[3];
          if (*((char *)v113 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)v113, *((void *)v113 + 1));
          }
          else
          {
            long long v114 = *v113;
            v201.__r_.__value_.__r.__words[2] = *((void *)v113 + 2);
            *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v114;
          }
          uint64_t v133 = 0;
          uint64_t v134 = 0;
          uint64_t v135 = 0;
          v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
          v183.__r_.__value_.__s.__data_[8] = 0;
          uint64_t v133 = (std::string *)operator new(0x18uLL);
          uint64_t v134 = v133;
          uint64_t v135 = v133 + 1;
          uint64_t v134 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v135, (long long *)&v201, &v202, v133);
          __str.__r_.__value_.__r.__words[0] = *(void *)v166 + 1;
          size_t v115 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 96, *(void *)v166 + 1, &__str);
          memset(v132, 0, sizeof(v132));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v132, v115[3], v115[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115[4] - v115[3]) >> 3));
          Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&lpsrc, (uint64_t *)v171, (uint64_t)__sz, v112 + 16, (uint64_t)&v160, (uint64_t)v133, (uint64_t)v134, v132);
          if (lpsrc)
          {
            if (v116)
            {
              if (v181)
              {
                uint64_t v128 = v181;
                atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_244:
                if (v181) {
                  nitro::nitro_function::nitro_function(v181);
                }
              }
              else
              {
                uint64_t v128 = 0;
              }
              v183.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
              v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v201.__r_.__value_.__l.__data_);
              }
              if ((v192[7] & 0x80000000) != 0) {
                operator delete((void *)__sz[0]);
              }
              if (!v116)
              {
                exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Cannot insert inner_product kernel");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v201, SDWORD1(v160), v160, 1, 1);
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v183, v160, 1, 1, 1);
              std::string::size_type v117 = v201.__r_.__value_.__r.__words[0];
              uint64_t v118 = *(void **)(v201.__r_.__value_.__r.__words[0] + 16);
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(__sz, v98 + 43);
              memcpy(v118, *(const void **)(__sz[0] + 24), 4 * *(int *)(v117 + 8) * (uint64_t)*(int *)(v117 + 12));
              if (__sz[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)__sz[1]);
              }
              std::string::size_type v130 = v117;
              uint64_t v131 = (std::__shared_weak_count *)v201.__r_.__value_.__l.__size_;
              uint64_t v89 = v111;
              if (v201.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v201.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void *, std::string::size_type *))(*(void *)v116 + 400))(v116, &v130);
              uint64_t v90 = v127;
              if (v131) {
                nitro::nitro_function::nitro_function(v131);
              }
              long long v129 = *(_OWORD *)&v183.__r_.__value_.__l.__data_;
              if (v183.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void *, long long *))(*(void *)v116 + 392))(v116, &v129);
              if (*((void *)&v129 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v129 + 1));
              }
              Espresso::net::remove_layer(a2, v166[0] + 1);
              Espresso::net::remove_layer(a2, v166[0]);
              *(_OWORD *)uint64_t v192 = 0u;
              *(_OWORD *)__sz = 0u;
              *(_DWORD *)&v192[16] = 1065353216;
              Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v171, (long long **)a2, v166[0], (uint64_t)__sz);
              std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
              if (v183.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v183.__r_.__value_.__l.__size_);
              }
              if (v201.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
              }
              if (v128) {
                nitro::nitro_function::nitro_function(v128);
              }
              std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v179);
              if (v178) {
                nitro::nitro_function::nitro_function(v178);
              }
              if (v177) {
                nitro::nitro_function::nitro_function(v177);
              }
              if (v176) {
                nitro::nitro_function::nitro_function(v176);
              }
              if (v175 < 0) {
                operator delete(__p);
              }
              std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v172, *((void **)&v172 + 1));
              if (v171[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v171[1]);
              }
LABEL_278:
              if (v103) {
                nitro::nitro_function::nitro_function(v103);
              }
              goto LABEL_280;
            }
          }
          else
          {
            uint64_t v116 = 0;
          }
          uint64_t v128 = 0;
          goto LABEL_244;
        }
      }
LABEL_280:
      if (v99) {
        nitro::nitro_function::nitro_function(v99);
      }
      unint64_t v88 = *(void *)v166 + 1;
      *(void *)uint64_t v166 = v88;
      uint64_t v87 = *((void *)a2 + 4);
      if (v88 >= ((*((void *)a2 + 5) - v87) >> 4) - 1) {
        goto LABEL_283;
      }
    }
    uint64_t v98 = 0;
LABEL_216:
    int v99 = 0;
    goto LABEL_217;
  }
LABEL_283:
  std::string::basic_string[abi:ne180100]<0>(v171, "xxx");
  v190[3] = 0;
  Espresso::net::pprint((uint64_t)a2, (uint64_t)v171, (uint64_t)v190);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v190);
  if (SBYTE7(v172) < 0) {
    operator delete(v171[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v138.__r_.__value_.__r.__words[2]);
  size_t v119 = (void *)v138.__r_.__value_.__r.__words[0];
  v138.__r_.__value_.__r.__words[0] = 0;
  if (v119) {
    operator delete(v119);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v187[2]);
  unint64_t v120 = v187[0];
  v187[0] = 0;
  if (v120) {
    operator delete(v120);
  }
}

void sub_1926E1B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  STACK[0x260] = (unint64_t)&STACK[0x2E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x3E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (STACK[0x428]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x428]);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&STACK[0x438]);
  _Unwind_Resume(a1);
}

uint64_t util_compare(void *a1, void *a2)
{
  void (***v5)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  char *v12;
  std::__shared_weak_count *v13;
  char *v14;
  std::__shared_weak_count *v15;
  void *v16;
  void *v17;
  BOOL v18;
  void *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::string::size_type v22;
  uint64_t v23;
  float v24;
  char v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  long long *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float *v41;
  float *v42;
  float v43;
  float v44;
  const char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  float *v50;
  float *v51;
  float v52;
  float v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  unint64_t v68;
  double v69;
  double v70;
  double v71;
  float v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float v78;
  float v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  double v83;
  const char *v84;
  uint64_t v85;
  float v86;
  float v87;
  unint64_t v88;
  float *v89;
  float v90;
  float v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  unint64_t v97;
  float v98;
  float v99;
  double v100;
  uint64_t i;
  void *v103;
  std::__shared_weak_count *v104;
  void v106[2];
  void v107[2];
  void v108[5];
  std::__shared_weak_count *v109;
  void v110[5];
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  int v116;
  char v117;
  int v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, void *);
  void *v123;
  uint64_t *v124;
  std::string __p;
  char v126;
  int v127;
  uint64_t v128;
  void v129[2];
  long long *v130;
  uint64_t v131;
  void (*v132)(uint64_t, void *);
  void *v133;
  uint64_t *v134;
  std::string v135;
  char v136;
  int v137;
  int v138;
  void v139[2];
  std::string v140;
  char v141;
  long long *v142[2];

  uint64_t v3 = *a1;
  unint64_t v5 = *(void (****)(uint64_t *__return_ptr, void))(*a1 + 16);
  uint64_t v4 = *(std::__shared_weak_count **)(*a1 + 24);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *a1;
  }
  uint8x8_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *a2;
  char v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v112 = v3;
  uint64_t v113 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v114 = v8;
  size_t v115 = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v116 = 1;
    std::string::size_type v117 = 0;
    uint64_t v118 = -887581056;
    size_t v119 = 0;
    nitro::nitro_function::nitro_function(v7);
  }
  else
  {
    uint64_t v116 = 1;
    std::string::size_type v117 = 0;
    uint64_t v118 = -887581056;
    size_t v119 = 0;
  }
  uint64_t v103 = a2;
  uint64_t v104 = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v9 = *(void **)(v114 + 232);
  uint8x8_t v10 = (void *)(v114 + 240);
  if (v9 != (void *)(v114 + 240))
  {
    uint64_t v11 = 0;
    do
    {
      if (*((char *)v9 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v140, (const std::string::value_type *)v9[4], v9[5]);
      }
      else {
        long long v140 = *(std::string *)(v9 + 4);
      }
      uint64_t v141 = *((unsigned char *)v9 + 56);
      v142[0] = (long long *)&v140;
      unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114 + 136, (unsigned __int8 *)&v140, v142);
      long long v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
      v139[0] = *((void *)v12 + 5);
      v139[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v130 = (long long *)MEMORY[0x1E4F143A8];
      uint64_t v131 = 3321888768;
      uint64_t v132 = ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke;
      uint64_t v133 = &__block_descriptor_80_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE_e70_v24__0_shared_ptr_Espresso::blob_float__4____v____shared_weak_count__8l;
      uint64_t v134 = &v112;
      uint64_t v137 = v11;
      std::string v138 = 1065353216;
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v135, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
      }
      else {
        uint64_t v135 = v140;
      }
      uint64_t v136 = v141;
      Espresso::sync_copy_from_host(v139, &v130);
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v112 + 136), (unsigned __int8 *)&v140))
      {
        v142[0] = (long long *)&v140;
        int v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v112 + 136, (unsigned __int8 *)&v140, v142);
        unint64_t v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
        v129[0] = *((void *)v14 + 5);
        v129[1] = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v120 = MEMORY[0x1E4F143A8];
        unint64_t v121 = 3321888768;
        uint64_t v122 = ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke_140;
        uint64_t v123 = &__block_descriptor_84_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE_e70_v24__0_shared_ptr_Espresso::blob_float__4____v____shared_weak_count__8l;
        unint64_t v124 = &v112;
        unint64_t v127 = v11;
        uint64_t v128 = 1065353216;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v140;
        }
        uint64_t v126 = v141;
        Espresso::sync_copy_from_host(v129, &v120);
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
        ++v11;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v140.__r_.__value_.__l.__data_);
      }
      long long v16 = (void *)v9[1];
      if (v16)
      {
        do
        {
          long long v17 = v16;
          long long v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (void *)v9[2];
          long long v18 = *v17 == (void)v9;
          uint64_t v9 = v17;
        }
        while (!v18);
      }
      uint64_t v9 = v17;
    }
    while (v17 != v10);
  }
  std::string::size_type v117 = 1;
  v110[0] = MEMORY[0x1E4F143A8];
  v110[1] = 3321888768;
  _OWORD v110[2] = ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke;
  v110[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  uint64_t v19 = a1;
  BOOL v20 = (std::__shared_weak_count *)a1[1];
  v110[4] = *a1;
  int v111 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v5, v110);
  v108[0] = MEMORY[0x1E4F143A8];
  v108[1] = 3321888768;
  uint64_t v108[2] = ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke_135;
  v108[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  unint64_t v21 = (std::__shared_weak_count *)v103[1];
  v108[4] = *v103;
  uint64_t v109 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v5, v108);
  unint64_t v22 = *(void *)(*v103 + 664);
  size_t v23 = *(void *)(*v103 + 672);
  if (v22 == v23)
  {
    int v25 = 1;
  }
  else
  {
    int v24 = 0.0;
    int v25 = 1;
    do
    {
      uint64_t v26 = *v103 + 136;
      std::string::size_type v130 = (long long *)v22;
      long long v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (unsigned __int8 *)v22, &v130);
      long long v28 = (std::__shared_weak_count *)*((void *)v27 + 6);
      v107[0] = *((void *)v27 + 5);
      v107[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::sync_copy_to_host(&v120, v107);
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*v19 + 136), (unsigned __int8 *)v22))
      {
        long long v29 = *v19 + 136;
        v140.__r_.__value_.__r.__words[0] = v22;
        long long v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, (unsigned __int8 *)v22, (long long **)&v140);
        long long v31 = (std::__shared_weak_count *)*((void *)v30 + 6);
        v106[0] = *((void *)v30 + 5);
        v106[1] = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::sync_copy_to_host(&v130, v106);
        if (v31) {
          nitro::nitro_function::nitro_function(v31);
        }
        long long v32 = 0;
        int v33 = v130;
        int v34 = *((int *)v130 + 2);
        int v35 = (char *)v130 + 12;
        uint64_t v36 = v34;
        do
        {
          v36 *= *(int *)&v35[v32];
          v32 += 4;
        }
        while (v32 != 12);
        std::string::size_type v37 = 0;
        size_t v38 = *(int *)(v120 + 8);
        long long v39 = v120 + 12;
        size_t v40 = v38;
        do
        {
          v40 *= *(int *)(v39 + v37);
          v37 += 4;
        }
        while (v37 != 12);
        if (v40 < v36) {
          uint64_t v36 = v40;
        }
        if (v36)
        {
          size_t v41 = (float *)*((void *)v130 + 3);
          __int16 v42 = *(float **)(v120 + 24);
          unint64_t v43 = 0.0;
          do
          {
            std::string::size_type v44 = vabds_f32(*v41, *v42);
            if (v44 > v43) {
              unint64_t v43 = v44;
            }
            ++v42;
            ++v41;
            --v36;
          }
          while (v36);
        }
        else
        {
          unint64_t v43 = 0.0;
        }
        long long v46 = 0;
        std::__shared_count v47 = *((int *)v130 + 2);
        do
        {
          v47 *= *(int *)&v35[v46];
          v46 += 4;
        }
        while (v46 != 12);
        int v48 = 0;
        std::string::size_type v49 = *(int *)(v120 + 8);
        do
        {
          v49 *= *(int *)(v39 + v48);
          v48 += 4;
        }
        while (v48 != 12);
        if (v49 < v47) {
          std::__shared_count v47 = v49;
        }
        if (v47)
        {
          unsigned int v50 = (float *)*((void *)v130 + 3);
          uint64_t v51 = *(float **)(v120 + 24);
          uint64_t v52 = 0.0;
          do
          {
            uint64_t v53 = vabds_f32(*v50, *v51);
            if (v53 > v52) {
              uint64_t v52 = v53;
            }
            ++v51;
            ++v50;
            --v47;
          }
          while (v47);
          int v54 = v52;
        }
        else
        {
          int v54 = 0.0;
        }
        uint64_t v55 = 0;
        uint64_t v56 = *(int *)(v120 + 8);
        do
        {
          v56 *= *(int *)(v39 + v55);
          v55 += 4;
        }
        while (v55 != 12);
        int v57 = *(float **)(v120 + 24);
        unsigned int v58 = *v57;
        uint64_t v59 = *v57;
        if (v56)
        {
          uint64_t v60 = *(float **)(v120 + 24);
          uint64_t v59 = *v57;
          do
          {
            uint64_t v61 = *v60++;
            int v62 = v61;
            if (v61 > v59) {
              uint64_t v59 = v62;
            }
            --v56;
          }
          while (v56);
        }
        uint64_t v63 = 0;
        long long v64 = *(int *)(v120 + 8);
        do
        {
          v64 *= *(int *)(v39 + v63);
          v63 += 4;
        }
        while (v63 != 12);
        if (v64)
        {
          int v65 = *(float **)(v120 + 24);
          do
          {
            long long v66 = *v65++;
            uint64_t v67 = v66;
            if (v66 < v58) {
              unsigned int v58 = v67;
            }
            --v64;
          }
          while (v64);
        }
        int v68 = 0;
        uint64_t v69 = v59;
        long long v70 = -v58;
        if (v69 >= v70) {
          long long v70 = v69;
        }
        uint64_t v71 = fabs(v70);
        unint64_t v72 = 0.0;
        char v73 = 0.0;
        while (1)
        {
          long long v74 = 0;
          long long v75 = *((int *)v130 + 2);
          do
          {
            v75 *= *(int *)&v35[v74];
            v74 += 4;
          }
          while (v74 != 12);
          std::string::size_type v76 = 0;
          size_t v77 = *(int *)(v120 + 8);
          do
          {
            v77 *= *(int *)(v39 + v76);
            v76 += 4;
          }
          while (v76 != 12);
          if (v77 < v75) {
            long long v75 = v77;
          }
          if (v75 <= v68) {
            break;
          }
          uint64_t v78 = v57[v68];
          char v73 = v73
              + (float)((float)(*(float *)(*((void *)v130 + 3) + 4 * v68) - v78)
                      * (float)(*(float *)(*((void *)v130 + 3) + 4 * v68) - v78));
          uint64_t v79 = fabsf(v78);
          if (v68) {
            uint64_t v80 = v79 <= v72;
          }
          else {
            uint64_t v80 = 0;
          }
          if (!v80) {
            unint64_t v72 = v79;
          }
          ++v68;
        }
        std::string::size_type v81 = 0;
        int v82 = *((int *)v130 + 2);
        do
        {
          v82 *= *(int *)&v35[v81];
          v81 += 4;
        }
        while (v81 != 12);
        long long v83 = log10((v72 + 0.00001) / (sqrt(v73 / (double)v82) + 1.0e-10));
        if (v43 >= v24) {
          int v24 = v43;
        }
        uint64_t v84 = (const char *)v22;
        if (*(char *)(v22 + 23) < 0) {
          uint64_t v84 = *(const char **)v22;
        }
        long long v85 = 0;
        uint64_t v87 = v83 * 20.0;
        unint64_t v88 = v34;
        do
        {
          v88 *= *(int *)&v35[v85];
          v85 += 4;
        }
        while (v85 != 12);
        if (v88)
        {
          uint64_t v89 = (float *)*((void *)v33 + 3);
          uint64_t v90 = 0.0;
          do
          {
            uint64_t v91 = *v89++;
            uint64_t v90 = v90 + v91;
            --v88;
          }
          while (v88);
          unint64_t v92 = v90;
        }
        else
        {
          unint64_t v92 = 0.0;
        }
        uint64_t v93 = 0;
        int v94 = v87;
        uint64_t v86 = v54 / v71;
        uint64_t v95 = v86;
        do
        {
          v34 *= *(int *)&v35[v93];
          v93 += 4;
        }
        while (v93 != 12);
        uint64_t v96 = 0;
        uint64_t v97 = v38;
        do
        {
          v97 *= *(int *)(v39 + v96);
          v96 += 4;
        }
        while (v96 != 12);
        if (v97)
        {
          uint64_t v98 = 0.0;
          do
          {
            int v99 = *v57++;
            uint64_t v98 = v98 + v99;
            --v97;
          }
          while (v97);
          uint64_t v100 = v98;
        }
        else
        {
          uint64_t v100 = 0.0;
        }
        for (uint64_t i = 0; i != 12; i += 4)
          v38 *= *(int *)(v39 + i);
        printf("[Espresso::net_bench] blob: %s\terr: %.4e\tpsnr: %.2f\tmaxreldiff=%.2f\tavg1: %.4e avgr: %.4e\n", v84, v43, v94, v95, v92 / (double)v34, v100 / (double)v38);
        if (v131) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v131);
        }
        v25 &= v24 <= 0.0001;
        uint64_t v19 = a1;
      }
      else
      {
        uint64_t v45 = (const char *)v22;
        if (*(char *)(v22 + 23) < 0) {
          uint64_t v45 = *(const char **)v22;
        }
        printf("blob missing: %s\n", v45);
      }
      if (v121) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v121);
      }
      v22 += 24;
    }
    while (v22 != v23);
  }
  if (v109) {
    nitro::nitro_function::nitro_function(v109);
  }
  if (v111) {
    nitro::nitro_function::nitro_function(v111);
  }

  if (v115) {
    nitro::nitro_function::nitro_function(v115);
  }
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
  if (v104) {
    nitro::nitro_function::nitro_function(v104);
  }
  return v25 & 1;
}

void sub_1926E2A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,id a35)
{
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  Espresso::net_bench::~net_bench(&a35);
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(a1);
}

void Espresso::pass_wavernn_ane::create_loop(Espresso::pass_wavernn_ane *this, Espresso::net *a2)
{
  *(void *)&long long v140 = *MEMORY[0x1E4F143B8];
  uint64_t v124 = 0;
  uint64_t v123 = 0;
  uint64_t v125 = 0;
  uint64_t v121 = 0;
  uint64_t v120 = 0;
  uint64_t v122 = 0;
  memset(&v119, 0, sizeof(v119));
  *(void *)std::string::size_type v107 = 0;
  uint64_t v2 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) - v2 == 16) {
LABEL_177:
  }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Input inner product not found");
  unint64_t v5 = 0;
  uint8x8_t v6 = 0;
  int v33 = (char *)a2 + 56;
  char v7 = (char *)a2 + 96;
  do
  {
    unint64_t v8 = (uint64_t *)(v2 + 16 * v5);
    uint64_t v9 = *v8;
    uint8x8_t v10 = (std::__shared_weak_count *)v8[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(const void **)(v9 + 64);
    if (v11)
    {
      if (v12)
      {
        uint64_t v13 = *(void *)(v9 + 72);
        if (v13)
        {
          int v34 = *(std::__shared_weak_count **)(v9 + 72);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
          if (!v6) {
            goto LABEL_13;
          }
LABEL_12:
          nitro::nitro_function::nitro_function(v6);
          goto LABEL_13;
        }
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    int v34 = 0;
    if (v6) {
      goto LABEL_12;
    }
LABEL_13:
    if (v12
      && (int v14 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12),
          v14[1] == *((_DWORD *)this + 7) - 2)
      && *v14 == 3 * *((_DWORD *)this + 6))
    {
      *(void *)&long long v131 = v107;
      unint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v33, (unint64_t *)v107, (uint64_t)&std::piecewise_construct, (uint64_t **)&v131);
      if (&v123 != v15 + 3) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v123, (std::string *)v15[3], (std::string *)v15[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[4] - v15[3]) >> 3));
      }
      *(void *)&long long v131 = v107;
      long long v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, (unint64_t *)v107, (uint64_t)&std::piecewise_construct, (uint64_t **)&v131);
      if (&v120 != v16 + 3) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v120, (std::string *)v16[3], (std::string *)v16[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[4] - v16[3]) >> 3));
      }
      std::string::operator=(&v119, (const std::string *)(v9 + 16));
      Espresso::net::remove_layer(a2, v107[0]);
      int v17 = 0;
      if (v10) {
LABEL_23:
      }
        nitro::nitro_function::nitro_function(v10);
    }
    else
    {
      int v17 = 1;
      if (v10) {
        goto LABEL_23;
      }
    }
    if (!v17) {
      break;
    }
    unint64_t v5 = *(void *)v107 + 1;
    *(void *)std::string::size_type v107 = v5;
    uint64_t v2 = *((void *)a2 + 4);
    uint8x8_t v6 = v34;
  }
  while (v5 < ((*((void *)a2 + 5) - v2) >> 4) - 1);
  if (!v12) {
    goto LABEL_177;
  }
  long long v18 = getenv("ESPRESSO_N_ITERS");
  if (v18) {
    unsigned int v19 = atoi(v18);
  }
  else {
    unsigned int v19 = 2;
  }
  v118[1] = 0;
  v118[0] = 0;
  std::string::size_type v117 = v118;
  BOOL v20 = (std::__shared_weak_count *)*((void *)a2 + 3);
  v106[0] = *((void *)a2 + 2);
  v106[1] = (uint64_t)v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v105[1] = 0;
  v105[0] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)v107, v106, 0, v105);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, "i");
  Espresso::add_constant((uint64_t *)v107, (uint64_t)&v131, 1, 1u, 1u, 1u, 0.0);
  if (SBYTE7(v132) < 0) {
    operator delete((void *)v131);
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, "max_iter");
  Espresso::add_constant((uint64_t *)v107, (uint64_t)&v131, 1, 1u, 1u, 1u, (float)(int)v19);
  if (SBYTE7(v132) < 0) {
    operator delete((void *)v131);
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, "cf_loop");
  std::string::basic_string[abi:ne180100]<0>(&__p, "loop");
  LODWORD(v138) = 0;
  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(&v103, (uint64_t *)v107, (uint64_t)&v131, (uint64_t)&__p, (uint64_t)&v138, 0, 0, v101);
  if (v104) {
    nitro::nitro_function::nitro_function(v104);
  }
  *(void *)&long long v92 = v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  *(void *)&long long v92 = v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (SBYTE7(v97) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v132) < 0) {
    operator delete((void *)v131);
  }
  *(void *)&long long v97 = 897988541;
  BYTE8(v97) = 0;
  int v100 = 0;
  int v99 = 0;
  *((void *)&__p + 1) = 1065353216;
  *(void *)&long long __p = 103;
  std::string::basic_string[abi:ne180100]<0>(&v92, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(&v138, "loop_cond");
  std::string::basic_string[abi:ne180100]<0>(&v131, "i");
  std::string::basic_string[abi:ne180100]<0>((void *)&v132 + 1, "max_iter");
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  uint64_t v91 = 0;
  *(void *)&long long v136 = &v89;
  BYTE8(v136) = 0;
  uint64_t v89 = (std::string *)operator new(0x30uLL);
  uint64_t v90 = v89;
  uint64_t v91 = v89 + 2;
  uint64_t v90 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v91, &v131, (long long *)((char *)&v134 + 8), v89);
  std::string::basic_string[abi:ne180100]<0>(&v136, "loop_cond");
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  unint64_t v88 = 0;
  v129[0] = &v86;
  LOBYTE(v129[1]) = 0;
  uint64_t v86 = (std::string *)operator new(0x18uLL);
  uint64_t v87 = v86;
  unint64_t v88 = v86 + 1;
  uint64_t v87 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v88, &v136, &v138, v86);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v94, (uint64_t *)v107, (uint64_t)&v92, (uint64_t)&v138, (uint64_t)&__p, (uint64_t)v89, (uint64_t)v90, (uint64_t *)&v86);
  if (v95) {
    nitro::nitro_function::nitro_function(v95);
  }
  v129[0] = &v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  if (v137 < 0) {
    operator delete((void *)v136);
  }
  *(void *)&long long v136 = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if (*((char *)&v134 + i + 7) < 0) {
      operator delete(*(void **)((char *)&v132 + i + 8));
    }
  }
  if (SHIBYTE(v139) < 0) {
    operator delete((void *)v138);
  }
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, "cf_if");
  std::string::basic_string[abi:ne180100]<0>(&v92, "loop_if");
  std::string::basic_string[abi:ne180100]<0>(&v138, "loop_cond");
  int v82 = 0;
  std::string::size_type v81 = 0;
  long long v83 = 0;
  *(void *)&long long v136 = &v81;
  BYTE8(v136) = 0;
  std::string::size_type v81 = (std::string *)operator new(0x18uLL);
  int v82 = v81;
  long long v83 = v81 + 1;
  int v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, &v138, &v140, v81);
  memset(v80, 0, sizeof(v80));
  Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v84, (uint64_t *)v107, (uint64_t)&v131, (uint64_t)&v92, (uint64_t)v129, (uint64_t)v81, (uint64_t)v82, v80);
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  *(void *)&long long v136 = v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  *(void *)&long long v136 = &v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  if (SHIBYTE(v139) < 0) {
    operator delete((void *)v138);
  }
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SBYTE7(v132) < 0) {
    operator delete((void *)v131);
  }
  uint64_t v93 = 0x100000001;
  long long v92 = xmmword_192DCA280;
  long long v138 = v19 | 0x10000000000uLL;
  uint64_t v139 = 0x200000000;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v138, 0, (uint64_t)&v131);
  std::string::basic_string[abi:ne180100]<0>(&v136, "O2__rand_v");
  v129[0] = &v136;
  unint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v117, &v136, (_OWORD **)v129);
  size_t v23 = (void *)*((void *)v22 + 12);
  long long v24 = v132;
  *(_OWORD *)((char *)v22 + 56) = v131;
  *(_OWORD *)((char *)v22 + 72) = v24;
  *((void *)v22 + 11) = v133;
  if (v23)
  {
    *((void *)v22 + 13) = v23;
    operator delete(v23);
    *((void *)v22 + 12) = 0;
    *((void *)v22 + 13) = 0;
    *((void *)v22 + 14) = 0;
  }
  v22[6] = v134;
  *((void *)v22 + 14) = v135;
  uint64_t v135 = 0;
  long long v134 = 0uLL;
  if (v137 < 0)
  {
    operator delete((void *)v136);
    if ((void)v134)
    {
      *((void *)&v134 + 1) = v134;
      operator delete((void *)v134);
    }
  }
  long long v138 = v19 | 0x10000000000uLL;
  uint64_t v139 = 0x200000000;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v138, 0, (uint64_t)&v131);
  std::string::basic_string[abi:ne180100]<0>(&v136, "O4__rand_v");
  v129[0] = &v136;
  int v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v117, &v136, (_OWORD **)v129);
  uint64_t v26 = (void *)*((void *)v25 + 12);
  long long v27 = v132;
  *(_OWORD *)((char *)v25 + 56) = v131;
  *(_OWORD *)((char *)v25 + 72) = v27;
  *((void *)v25 + 11) = v133;
  if (v26)
  {
    *((void *)v25 + 13) = v26;
    operator delete(v26);
    *((void *)v25 + 12) = 0;
    *((void *)v25 + 13) = 0;
    *((void *)v25 + 14) = 0;
  }
  v25[6] = v134;
  *((void *)v25 + 14) = v135;
  uint64_t v135 = 0;
  long long v134 = 0uLL;
  if (v137 < 0)
  {
    operator delete((void *)v136);
    if ((void)v134)
    {
      *((void *)&v134 + 1) = v134;
      operator delete((void *)v134);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v138, "slice");
  std::string::basic_string[abi:ne180100]<0>(&v136, "O2_rand_sliced");
  std::string::basic_string[abi:ne180100]<0>(&v131, "O2__rand_v");
  std::string::basic_string[abi:ne180100]<0>((void *)&v132 + 1, "i");
  std::string::size_type v76 = 0;
  long long v75 = 0;
  size_t v77 = 0;
  v129[0] = &v75;
  LOBYTE(v129[1]) = 0;
  long long v75 = (std::string *)operator new(0x30uLL);
  std::string::size_type v76 = v75;
  size_t v77 = v75 + 2;
  std::string::size_type v76 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v77, &v131, (long long *)((char *)&v134 + 8), v75);
  std::string::basic_string[abi:ne180100]<0>(v129, "O2__rand");
  char v73 = 0;
  unint64_t v72 = 0;
  long long v74 = 0;
  uint64_t v126 = &v72;
  char v127 = 0;
  unint64_t v72 = (std::string *)operator new(0x18uLL);
  char v73 = v72;
  long long v74 = v72 + 1;
  char v73 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74, (long long *)v129, &v131, v72);
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v78, (uint64_t *)v107, (uint64_t)&v138, (uint64_t)&v136, (uint64_t)&v92, (uint64_t)v75, (uint64_t)v76, (uint64_t *)&v72);
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  uint64_t v126 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (v130 < 0) {
    operator delete(v129[0]);
  }
  v129[0] = &v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    if (*((char *)&v134 + j + 7) < 0) {
      operator delete(*(void **)((char *)&v132 + j + 8));
    }
  }
  if (v137 < 0) {
    operator delete((void *)v136);
  }
  if (SHIBYTE(v139) < 0) {
    operator delete((void *)v138);
  }
  std::string::basic_string[abi:ne180100]<0>(&v138, "slice");
  std::string::basic_string[abi:ne180100]<0>(&v136, "O4_rand_sliced");
  std::string::basic_string[abi:ne180100]<0>(&v131, "O4__rand_v");
  std::string::basic_string[abi:ne180100]<0>((void *)&v132 + 1, "i");
  uint64_t v67 = 0;
  int v68 = 0;
  uint64_t v69 = 0;
  v129[0] = &v67;
  LOBYTE(v129[1]) = 0;
  uint64_t v67 = (std::string *)operator new(0x30uLL);
  int v68 = v67;
  uint64_t v69 = v67 + 2;
  int v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v69, &v131, (long long *)((char *)&v134 + 8), v67);
  std::string::basic_string[abi:ne180100]<0>(v129, "O4__rand");
  long long v64 = 0;
  int v65 = 0;
  long long v66 = 0;
  uint64_t v126 = &v64;
  char v127 = 0;
  long long v64 = (std::string *)operator new(0x18uLL);
  int v65 = v64;
  long long v66 = v64 + 1;
  int v65 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66, (long long *)v129, &v131, v64);
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v70, (uint64_t *)v107, (uint64_t)&v138, (uint64_t)&v136, (uint64_t)&v92, (uint64_t)v67, (uint64_t)v68, (uint64_t *)&v64);
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  uint64_t v126 = &v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (v130 < 0) {
    operator delete(v129[0]);
  }
  v129[0] = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  for (uint64_t k = 0; k != -48; k -= 24)
  {
    if (*((char *)&v134 + k + 7) < 0) {
      operator delete(*(void **)((char *)&v132 + k + 8));
    }
  }
  if (v137 < 0) {
    operator delete((void *)v136);
  }
  if (SHIBYTE(v139) < 0) {
    operator delete((void *)v138);
  }
  long long v131 = 0u;
  long long v132 = 0u;
  LODWORD(v133) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v107, (long long **)a2, 0, (uint64_t)&v131);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v116);
  if (v115) {
    nitro::nitro_function::nitro_function(v115);
  }
  if (v114) {
    nitro::nitro_function::nitro_function(v114);
  }
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
  if (v112 < 0) {
    operator delete(v111);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v109, v110);
  if (v108) {
    nitro::nitro_function::nitro_function(v108);
  }
  long long v30 = (std::__shared_weak_count *)*((void *)a2 + 3);
  v63[0] = *((void *)a2 + 2);
  v63[1] = (uint64_t)v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v62[0] = 0;
  v62[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)v107, v63, 0, v62);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  *(void *)&long long v132 = 897988541;
  BYTE8(v132) = 0;
  *(void *)((char *)&v134 + 4) = 0;
  *(void *)&long long v131 = 2;
  *((void *)&v131 + 1) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(&v92, "i_inc");
  std::string::basic_string[abi:ne180100]<0>(&v138, "i");
  int v57 = 0;
  unsigned int v58 = 0;
  uint64_t v59 = 0;
  *(void *)&long long v136 = &v57;
  BYTE8(v136) = 0;
  int v57 = (std::string *)operator new(0x18uLL);
  unsigned int v58 = v57;
  uint64_t v59 = v57 + 1;
  unsigned int v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, &v138, &v140, v57);
  std::string::basic_string[abi:ne180100]<0>(&v136, "i");
  int v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  v129[0] = &v54;
  LOBYTE(v129[1]) = 0;
  int v54 = (std::string *)operator new(0x18uLL);
  uint64_t v55 = v54;
  uint64_t v56 = v54 + 1;
  uint64_t v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, &v136, &v138, v54);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v60, (uint64_t *)v107, (uint64_t)&__p, (uint64_t)&v92, (uint64_t)&v131, (uint64_t)v57, (uint64_t)v58, (uint64_t *)&v54);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  v129[0] = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  if (v137 < 0) {
    operator delete((void *)v136);
  }
  *(void *)&long long v136 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  if (SHIBYTE(v139) < 0) {
    operator delete((void *)v138);
  }
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SBYTE7(v97) < 0) {
    operator delete((void *)__p);
  }
  LODWORD(v136) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "cf_jump");
  std::string::basic_string[abi:ne180100]<0>(&v92, "loop_if_jump");
  memset(v51, 0, sizeof(v51));
  memset(v50, 0, sizeof(v50));
  Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v52, (uint64_t *)v107, (uint64_t)&__p, (uint64_t)&v92, (uint64_t)&v136, 0, 0, v50);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  *(void *)&long long v138 = v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  *(void *)&long long v138 = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SBYTE7(v97) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "cf_end");
  std::string::basic_string[abi:ne180100]<0>(&v92, "loop_if_end");
  memset(v47, 0, sizeof(v47));
  memset(v46, 0, sizeof(v46));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v48, (uint64_t *)v107, (uint64_t)&__p, (uint64_t)&v92, (uint64_t)v129, 0, 0, v46);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  *(void *)&long long v138 = v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  *(void *)&long long v138 = v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SBYTE7(v97) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "cf_end");
  std::string::basic_string[abi:ne180100]<0>(&v92, "loop_if_end");
  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v44, (uint64_t *)v107, (uint64_t)&__p, (uint64_t)&v92, (uint64_t)v129, 0, 0, v42);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  *(void *)&long long v138 = v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  *(void *)&long long v138 = v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SBYTE7(v97) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v31 = (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4;
  long long __p = 0u;
  long long v97 = 0u;
  int v98 = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v107, (long long **)a2, v31, (uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v116);
  if (v115) {
    nitro::nitro_function::nitro_function(v115);
  }
  if (v114) {
    nitro::nitro_function::nitro_function(v114);
  }
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
  if (v112 < 0) {
    operator delete(v111);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v109, v110);
  if (v108) {
    nitro::nitro_function::nitro_function(v108);
  }
  long long v32 = (std::__shared_weak_count *)*((void *)a2 + 3);
  v41[0] = *((void *)a2 + 2);
  v41[1] = (uint64_t)v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v40[0] = 0;
  v40[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)v107, v41, 0, v40);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  v39[0] = v12;
  v39[1] = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, "inner_product");
  memset(v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v38, v123, v124, 0xAAAAAAAAAAAAAAABLL * ((v124 - v123) >> 3));
  memset(v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v37, v120, v121, 0xAAAAAAAAAAAAAAABLL * ((v121 - v120) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)v107, v39, (uint64_t)&v131, (uint64_t)&v119, v38, v37);
  *(void *)&long long __p = v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)&long long __p = v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SBYTE7(v132) < 0) {
    operator delete((void *)v131);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  long long v131 = 0u;
  long long v132 = 0u;
  LODWORD(v133) = 1065353216;
  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v107, (long long **)a2, 0, (uint64_t)&v131);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v36, (long long **)&v117);
  reshape_network_with_additional_inputs((uint64_t)a2, v36);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v36, (char *)v36[1]);
  std::string::basic_string[abi:ne180100]<0>(&v131, "");
  v128[3] = 0;
  Espresso::net::pprint((uint64_t)a2, (uint64_t)&v131, (uint64_t)v128);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v128);
  if (SBYTE7(v132) < 0) {
    operator delete((void *)v131);
  }
  v35[0] = 0;
  v35[1] = 0;
  Espresso::net::setup_script((uint64_t)a2, v35, 0);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v116);
  if (v115) {
    nitro::nitro_function::nitro_function(v115);
  }
  if (v114) {
    nitro::nitro_function::nitro_function(v114);
  }
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
  if (v112 < 0) {
    operator delete(v111);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v109, v110);
  if (v108) {
    nitro::nitro_function::nitro_function(v108);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v117, v118[0]);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  *(void *)std::string::size_type v107 = &v120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
  *(void *)std::string::size_type v107 = &v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
}

void sub_1926E3E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  STACK[0x380] = (unint64_t)&STACK[0x478];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
  STACK[0x380] = (unint64_t)&STACK[0x490];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(a1);
}

void sub_1926E4418()
{
}

void sub_1926E4420()
{
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x1926E43C0);
}

void *std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void Espresso::sequential_builder::add<Espresso::load_random_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926E4698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::general_concat_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926E4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::copy_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926E4B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void recompile(Espresso::net *a1)
{
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)a1);
  v14[0] = 0;
  v14[1] = 0;
  Espresso::net::setup_script((uint64_t)a1, v14, 0);
  uint64_t v2 = (long long *)*((void *)a1 + 80);
  uint64_t v3 = (long long *)*((void *)a1 + 81);
  v13[0] = 0;
  v13[1] = 0;
  for (i = v13; v2 != v3; uint64_t v2 = (long long *)((char *)v2 + 24))
  {
    v10[0] = v2;
    uint64_t v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 23, v2, v10);
    v10[0] = v2;
    unint64_t v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&i, v2, v10);
    long long v6 = *(_OWORD *)(v4 + 56);
    long long v7 = *(_OWORD *)(v4 + 72);
    *((void *)v5 + 11) = *((void *)v4 + 11);
    *(_OWORD *)(v5 + 72) = v7;
    *(_OWORD *)(v5 + 56) = v6;
    if (v5 != v4) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 96, *((char **)v4 + 12), *((void *)v4 + 13), (uint64_t)(*((void *)v4 + 13) - *((void *)v4 + 12)) >> 2);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)a1 + 184, *((char **)a1 + 24));
  *((void *)a1 + 23) = (char *)a1 + 192;
  *((void *)a1 + 25) = 0;
  *((void *)a1 + 24) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v8, *(void *)a1, *((std::__shared_weak_count **)a1 + 1));
  Espresso::compute_network_shape_starting_from_data_shapes(&v8, (uint64_t)&i, (uint64_t)v10);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  *((unsigned char *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)v10, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v11, v11[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v10, (char *)v10[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&i, v13[0]);
}

void sub_1926E4D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
}

void Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE386820;
  uint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE34E9D0;
  unint64_t v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v8 = (unint64_t)"N8Espresso18pass_reset_pre_ssaE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v6 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v6);
  if (v6)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v8 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso22analysis_reset_pre_ssaE");
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_1926E4F48(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_reset_pre_ssa>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_reset_pre_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386820;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_reset_pre_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926E51F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_if_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926E545C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  char v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    char v6 = operator new(0x78uLL);
    v11[1] = a1 + 1;
    unint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    void v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *unint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v6[5] = 0u;
    v6[6] = 0u;
    *((void *)v6 + 14) = 0;
    *(_OWORD *)((char *)v6 + 56) = xmmword_192DC3600;
    *((void *)v6 + 9) = 0xFFFFFFFF00000001;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926E5798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_end_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926E5A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void reshape_network_with_additional_inputs(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = *(long long **)(a1 + 640);
  for (i = *(long long **)(a1 + 648); v4 != i; uint64_t v4 = (long long *)((char *)v4 + 24))
  {
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a1 + 192), v4)&& !std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[1], v4))
    {
      unsigned int v19 = v4;
      char v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), v4, &v19);
      long long v7 = *(_OWORD *)(v6 + 72);
      long long v13 = *(_OWORD *)(v6 + 56);
      long long v14 = v7;
      unint64_t v8 = (const void *)*((void *)v6 + 12);
      unint64_t v15 = (char *)*((void *)v6 + 11);
      long long __p = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v8, *((void *)v6 + 13), (uint64_t)(*((void *)v6 + 13) - (void)v8) >> 2);
      unsigned int v19 = v4;
      uint64_t v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v4, &v19);
      long long v10 = v14;
      *(_OWORD *)(v9 + 56) = v13;
      *(_OWORD *)(v9 + 72) = v10;
      *((void *)v9 + 11) = v15;
      if (v9 + 56 != (char *)&v13) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9 + 96, (char *)__p, (uint64_t)v17, (v17 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 184, *(char **)(a1 + 192));
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v11, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  Espresso::compute_network_shape_starting_from_data_shapes(&v11, (uint64_t)a2, (uint64_t)&v13);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  *(unsigned char *)(a1 + 180) = 0;
  Espresso::shape_network_recursive((Espresso *)a1, (Espresso::net *)&v13, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v14 + 8, v15);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v13, *((char **)&v13 + 1));
}

void sub_1926E5C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

int *___ZN8Espresso16pass_wavernn_ane14split_to_sliceERNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v68 = *MEMORY[0x1E4F143B8];
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  LODWORD(v62) = a2[3].i32[2];
  long long v63 = 0uLL;
  unint64_t v4 = a2[2].u64[1];
  if (v4 >= a2[3].i64[0])
  {
    uint64_t v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v62);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)&v62);
    uint64_t v5 = v4 + 72;
    a2[2].i64[1] = v4 + 72;
  }
  a2[2].i64[1] = v5;
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (*((void *)&v63 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v63 + 1));
  }
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = a2[3].i32[2];
  unint64_t v57 = v7;
  v61.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, v7, &v57)[3];
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)v61.__r_.__value_.__l.__data_, (long long **)&v61);
  Espresso::abstract_blob_container::shape((char *)&v62, *((void *)v8 + 5));
  int v9 = (int)v62;
  int v10 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
  if ((void)v65)
  {
    *((void *)&v65 + 1) = v65;
    operator delete((void *)v65);
  }
  uint64_t v11 = a2[1].i64[0];
  char v12 = (const char *)(v11 + 16);
  int v47 = v9 / v10;
  if (*(char *)(v11 + 39) < 0) {
    char v12 = *(const char **)v12;
  }
  printf("%s: slice %d\n", v12, v47);
  uint64_t result = (int *)(*(uint64_t (**)(void))(*(void *)a2->i64[0] + 320))();
  if (*result >= 1)
  {
    uint64_t v14 = 0;
    unint64_t v15 = "slice";
    while (1)
    {
      uint64_t v16 = *(void *)(a1 + 32) + 96;
      unint64_t v17 = a2[3].i32[2];
      int v62 = (std::string **)v17;
      uint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, v17, &v62);
      if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 40), (unsigned __int8 *)(v18[3] + 24 * v14)))
      {
        ++v14;
        goto LABEL_78;
      }
      uint64_t v59 = 1;
      LODWORD(v57) = 0;
      HIDWORD(v57) = v47 * v14;
      int v60 = 1;
      int v58 = v47 * (v14 + 1);
      Espresso::abstract_engine_factory::shared(&v56);
      uint64_t v19 = v56.__r_.__value_.__r.__words[0];
      uint64_t v20 = *(void *)(a1 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v62, v15);
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      LODWORD(v54.__r_.__value_.__l.__data_) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v19, v20 + 16, (uint64_t)&v62, (uint64_t)&v57, (int *)&__str);
      if (!v61.__r_.__value_.__r.__words[0]) {
        break;
      }
      if (!v21) {
        goto LABEL_19;
      }
      size_t size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
      if (v61.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v61.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        goto LABEL_20;
      }
LABEL_22:
      if (SHIBYTE(v63) < 0) {
        operator delete(v62);
      }
      if (v56.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v56.__r_.__value_.__l.__size_);
      }
      if (size) {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v56, v15);
      size_t v23 = v15;
      uint64_t v24 = a2[1].i64[0];
      if (*(char *)(v24 + 39) >= 0) {
        size_t v25 = *(unsigned __int8 *)(v24 + 39);
      }
      else {
        size_t v25 = *(void *)(v24 + 24);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v54, v25 + 8);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v54;
      }
      else {
        uint64_t v26 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      if (v25)
      {
        if (*(char *)(v24 + 39) >= 0) {
          long long v27 = (const void *)(v24 + 16);
        }
        else {
          long long v27 = *(const void **)(v24 + 16);
        }
        memmove(v26, v27, v25);
      }
      strcpy((char *)v26 + v25, "__slice_");
      std::to_string(&v53, v14);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v53;
      }
      else {
        long long v28 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v29 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v29 = v53.__r_.__value_.__l.__size_;
      }
      long long v30 = std::string::append(&v54, (const std::string::value_type *)v28, v29);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      uint64_t v32 = *(void *)(a1 + 32) + 56;
      unint64_t v33 = a2[3].i32[2];
      unint64_t v52 = v33;
      int v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32, v33, &v52);
      uint64_t v35 = *(void *)(a1 + 32) + 96;
      unint64_t v36 = a2[3].i32[2];
      unint64_t v48 = v36;
      uint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, v36, &v48)[3]+ 24 * v14;
      if (*(char *)(v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v37, *(void *)(v37 + 8));
      }
      else
      {
        long long v38 = *(_OWORD *)v37;
        v67.__r_.__value_.__r.__words[2] = *(void *)(v37 + 16);
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v38;
      }
      std::string::size_type v49 = 0;
      unsigned int v50 = 0;
      uint64_t v51 = 0;
      int v62 = &v49;
      LOBYTE(v63) = 0;
      std::string::size_type v49 = (std::string *)operator new(0x18uLL);
      unsigned int v50 = v49;
      uint64_t v51 = v49 + 1;
      unsigned int v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v51, (long long *)&v67, &v68, v49);
      LODWORD(v62) = 0;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v39 = (char *)operator new(0xF8uLL);
      *((void *)v39 + 1) = 0;
      *((void *)v39 + 2) = 0;
      *(void *)long long v39 = &unk_1EE389DF0;
      *((void *)v39 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v39 + 40) = 0u;
      *(_OWORD *)(v39 + 56) = 0u;
      *(_OWORD *)(v39 + 72) = 0u;
      *(_OWORD *)(v39 + 88) = 0u;
      *(_OWORD *)(v39 + 104) = 0u;
      *(_OWORD *)(v39 + 120) = 0u;
      *(_OWORD *)(v39 + 136) = 0u;
      *(_OWORD *)(v39 + 152) = 0u;
      *(_OWORD *)(v39 + 161) = 0u;
      *((_OWORD *)v39 + 13) = 0u;
      *((_OWORD *)v39 + 14) = 0u;
      *((void *)v39 + 30) = 0;
      *(void *)&long long v63 = v39 + 24;
      *((void *)&v63 + 1) = v39;
      if (size)
      {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
        size_t v40 = (std::__shared_weak_count *)*((void *)v39 + 12);
        *((void *)v39 + 11) = v21;
        *((void *)v39 + 12) = size;
        if (v40) {
          nitro::nitro_function::nitro_function(v40);
        }
      }
      else
      {
        *((void *)v39 + 11) = v21;
        *((void *)v39 + 12) = 0;
      }
      std::string::operator=((std::string *)(v63 + 16), &__str);
      std::string::operator=((std::string *)(v63 + 40), &v56);
      int v41 = (***(uint64_t (****)(void))(v21[1] + 8))(*(void *)(v21[1] + 8));
      uint64_t v42 = v63;
      *(_DWORD *)(v63 + 8) = v41;
      uint64_t v43 = a2[1].i64[0];
      if (v43)
      {
        *(_DWORD *)(v42 + 12) = *(_DWORD *)(v43 + 12);
        if (*(char *)(v43 + 223) < 0) {
          std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(v43 + 200), *(void *)(v43 + 208));
        }
        else {
          std::string v61 = *(std::string *)(v43 + 200);
        }
        std::string::operator=((std::string *)(v42 + 200), &v61);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v44 = *(void *)(a2[4].i64[0] + 32);
        if (*(void *)(a2[4].i64[0] + 40) != v44) {
          *(_DWORD *)(v42 + 12) = *(_DWORD *)(*(void *)v44 + 12);
        }
      }
      if (&v64 != (long long *)(v34 + 3)) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v64, (std::string *)v34[3], (std::string *)v34[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34[4] - v34[3]) >> 3));
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v65 + 8, v49, v50, 0xAAAAAAAAAAAAAAABLL * (((char *)v50 - (char *)v49) >> 3));
      LODWORD(v62) = a2[3].i32[2];
      unint64_t v45 = a2[2].u64[1];
      if (v45 >= a2[3].i64[0])
      {
        uint64_t v46 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v62);
      }
      else
      {
        std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v62);
        uint64_t v46 = v45 + 72;
        a2[2].i64[1] = v45 + 72;
      }
      a2[2].i64[1] = v46;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      if (*((void *)&v63 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v63 + 1));
      }
      int v62 = &v49;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      unint64_t v15 = v23;
      ++v14;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if (!size) {
          goto LABEL_78;
        }
LABEL_77:
        nitro::nitro_function::nitro_function(size);
        nitro::nitro_function::nitro_function(size);
        goto LABEL_78;
      }
      if (size) {
        goto LABEL_77;
      }
LABEL_78:
      uint64_t result = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
      if (v14 >= *result) {
        return result;
      }
    }
    uint64_t v21 = 0;
LABEL_19:
    size_t size = 0;
LABEL_20:
    if (v61.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v61.__r_.__value_.__l.__size_);
    }
    goto LABEL_22;
  }
  return result;
}

void sub_1926E647C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v49 - 216));
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::vector<unsigned long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        char v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16)) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v15 = (char *)operator new(0x40uLL);
      uint64_t v16 = v15;
      v28[0] = v15;
      v28[1] = a1 + 16;
      char v29 = 0;
      *(void *)unint64_t v15 = 0;
      *((void *)v15 + 1) = v8;
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        *((void *)v15 + 4) = *((void *)v5 + 4);
        *((_OWORD *)v15 + 1) = v17;
      }
      v16[5] = 0;
      v16[6] = 0;
      v16[7] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16 + 5, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 3);
      char v29 = 1;
      float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        BOOL v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v9);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v23);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v24 = *(void *)a1;
      size_t v25 = *(void **)(*(void *)a1 + 8 * v2);
      if (v25)
      {
        *uint64_t v16 = *v25;
      }
      else
      {
        *uint64_t v16 = *v6;
        *uint64_t v6 = v16;
        *(void *)(v24 + 8 * v2) = v6;
        if (!*v16) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*v16 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9) {
            v26 %= v9;
          }
        }
        else
        {
          v26 &= v9 - 1;
        }
        size_t v25 = (void *)(*(void *)a1 + 8 * v26);
      }
      void *v25 = v16;
LABEL_43:
      v28[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
LABEL_44:
      uint64_t v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1926E6878(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_40c166_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorImNS4_ImEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S9_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(a1 + 40);
}

uint64_t __copy_helper_block_ea8_40c166_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorImNS4_ImEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S9_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,std::vector<unsigned long>>::unordered_map(a1 + 40, a2 + 40);
}

void ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke(uint64_t a1, void *a2)
{
}

void ___ZL12util_compareNSt3__110shared_ptrIN8Espresso3netEEES3__block_invoke_135(uint64_t a1, void *a2)
{
}

void Espresso::net_bench::~net_bench(id *this)
{
  unint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[1];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

__n128 __Block_byref_object_copy__144(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__145(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void __destroy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  srand(*(_DWORD *)(a1 + 72) + 1993);
  uint64_t v6 = 0;
  float v7 = *(float *)(a1 + 76);
  unint64_t v8 = *(float **)(*a2 + 24);
  uint64_t v9 = *(int *)(*a2 + 8);
  do
  {
    v9 *= *(int *)(*a2 + 12 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  for (; v9; --v9)
  {
    uint64_t v5 = rand();
    *v8++ = (float)((float)((float)(int)v5 * 4.6566e-10) * v7) + 0.0;
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v13 = *(std::string *)(a1 + 40);
  }
  uint64_t v10 = *a2;
  unint64_t v11 = (std::__shared_weak_count *)a2[1];
  v12[0] = v10;
  v12[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::prepare_blob_for_network(v5, (uint64_t *)(v4 + 16), (std::string::size_type)&v13, (uint64_t)v12, 0);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1926E6AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sync_copy_from_host(void *a1, void *a2)
{
  void (***v6)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v7;
  void v8[6];
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(__n128 *, __n128 *);
  void (*v16)(uint64_t);
  const char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  uint64_t v3 = a2;
  char v12 = 0;
  std::string v13 = &v12;
  unint64_t v14 = 0x4012000000;
  unint64_t v15 = __Block_byref_object_copy__144;
  uint64_t v16 = __Block_byref_object_dispose__145;
  long long v17 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 56))(&v18);
  uint64_t v4 = (std::__shared_weak_count *)v13[7];
  uint64_t v10 = v13[6];
  unint64_t v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v3[2](v3, &v10);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(void (****)(uint64_t *__return_ptr, void))(*a1 + 72);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3321888768;
  v8[2] = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEEU13block_pointerFvNS1_INS_4blobIfLi4EEEEEE_block_invoke;
  v8[3] = &unk_1EE38ED10;
  float v7 = (std::__shared_weak_count *)a1[1];
  v8[5] = v5;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[4] = &v12;
  Espresso::abstract_context::compute_batch_sync(v6, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  _Block_object_dispose(&v12, 8);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
}

void sub_1926E6C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Block_object_dispose(&a19, 8);
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }

  _Unwind_Resume(a1);
}

void ___ZN8Espresso9net_bench17fill_random_inputEff_block_invoke_140(uint64_t a1, void *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  srand(*(_DWORD *)(a1 + 72) + 1993);
  uint64_t v6 = 0;
  float v7 = *(float *)(a1 + 76);
  float v8 = *(float *)(a1 + 80);
  uint64_t v9 = *(float **)(*a2 + 24);
  uint64_t v10 = *(int *)(*a2 + 8);
  do
  {
    v10 *= *(int *)(*a2 + 12 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  for (; v10; --v10)
  {
    uint64_t v5 = rand();
    *v9++ = v8 + (float)((float)((float)(int)v5 * 4.6566e-10) * v7);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 40);
  }
  uint64_t v11 = *a2;
  char v12 = (std::__shared_weak_count *)a2[1];
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::prepare_blob_for_network(v5, v4, (std::string::size_type)&v14, (uint64_t)v13, 0);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1926E6DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void __copy_helper_block_ea8_40c79_ZTSNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEEU13block_pointerFvNS1_INS_4blobIfLi4EEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40), a2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
}

void Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  uint64_t v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  float v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v22 = v16;
    size_t v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v22 = v16;
    size_t v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_1926E70D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389958;
  *((void *)v10 + 3) = &unk_1EE36BED0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  uint64_t v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  char v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1926E724C(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BED0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<float,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BED0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<float,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *__Block_byref_object_copy_(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZN8Espresso16pass_wavernn_ane13gumbal_to_aneERNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v69 = *MEMORY[0x1E4F143B8];
  long long v62 = 0u;
  long long v63 = 0u;
  *(_DWORD *)std::string v61 = a2[3].i32[2];
  memset(&v61[8], 0, 32);
  unint64_t v4 = a2[2].u64[1];
  if (v4 >= a2[3].i64[0])
  {
    uint64_t v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v61);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)v61);
    uint64_t v5 = v4 + 72;
    a2[2].i64[1] = v4 + 72;
  }
  a2[2].i64[1] = v5;
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  if (*(void *)&v61[16]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v61[16]);
  }
  uint64_t v6 = *(void *)(a1 + 40) + 56;
  unint64_t v7 = a2[3].i32[2];
  *(void *)std::string v61 = v7;
  float v8 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v61)[3];
  if (*((char *)v8 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)v8 + 23);
  }
  else {
    size_t v9 = (size_t)v8[1];
  }
  uint64_t v10 = &v58;
  std::string::basic_string[abi:ne180100]((uint64_t)&v58, v9 + 6);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v10 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*((char *)v8 + 23) >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = *v8;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "__rand");
  uint64_t v12 = *(void *)(a1 + 40) + 96;
  unint64_t v13 = a2[3].i32[2];
  *(void *)std::string v61 = v13;
  uint64_t v14 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v13, v61)[3];
  if (*((char *)v14 + 23) >= 0) {
    size_t v15 = *((unsigned __int8 *)v14 + 23);
  }
  else {
    size_t v15 = (size_t)v14[1];
  }
  uint64_t v16 = &v57;
  std::string::basic_string[abi:ne180100]((uint64_t)&v57, v15 + 11);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v16 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if (v15)
  {
    if (*((char *)v14 + 23) >= 0) {
      long long v17 = v14;
    }
    else {
      long long v17 = *v14;
    }
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "__plus_rand");
  uint64_t v18 = *(void *)(a1 + 40);
  unint64_t v19 = a2[3].i32[2];
  lpsrc.__r_.__value_.__r.__words[0] = v19;
  v66.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18 + 56, v19, &lpsrc)[3];
  BOOL v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18 + 136, (unsigned __int8 *)v66.__r_.__value_.__l.__data_, (long long **)&v66);
  Espresso::abstract_blob_container::shape(v61, *((void *)v20 + 5));
  unint64_t v21 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  unint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, &v58, (long long **)&v66);
  long long v23 = *(_OWORD *)&v61[16];
  *(_OWORD *)(v22 + 56) = *(_OWORD *)v61;
  *(_OWORD *)(v22 + 72) = v23;
  *((void *)v22 + 11) = *(void *)&v61[32];
  std::string v24 = (void *)*((void *)v22 + 12);
  if (v24)
  {
    *((void *)v22 + 13) = v24;
    operator delete(v24);
    *((void *)v22 + 12) = 0;
    *((void *)v22 + 13) = 0;
    *((void *)v22 + 14) = 0;
  }
  *((_OWORD *)v22 + 6) = v62;
  *((void *)v22 + 14) = v63;
  *(void *)std::string v61 = 0;
  *(void *)&v61[8] = 1065353216;
  *(void *)&v61[16] = 897988541;
  v61[24] = 0;
  *(void *)((char *)&v62 + 4) = 0;
  Espresso::abstract_engine_factory::shared(&__p);
  uint64_t v25 = __p.__r_.__value_.__r.__words[0];
  uint64_t v26 = *(void *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v66, "elementwise");
  LODWORD(v68.__r_.__value_.__l.__data_) = 0;
  LODWORD(v50) = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v25, v26 + 16, (uint64_t)&v66, (uint64_t)v61, (int *)&v68);
  if (!lpsrc.__r_.__value_.__r.__words[0])
  {
    long long v27 = 0;
    goto LABEL_33;
  }
  if (!v27)
  {
LABEL_33:
    size_t size = 0;
    goto LABEL_34;
  }
  size_t size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
LABEL_34:
  if (lpsrc.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  v56[0] = v27;
  v56[1] = size;
  if (size) {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
  uint64_t v29 = a2[1].i64[0];
  if (*(char *)(v29 + 39) >= 0) {
    size_t v30 = *(unsigned __int8 *)(v29 + 39);
  }
  else {
    size_t v30 = *(void *)(v29 + 24);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v30)
  {
    if (*(char *)(v29 + 39) >= 0) {
      uint64_t v32 = (const void *)(v29 + 16);
    }
    else {
      uint64_t v32 = *(const void **)(v29 + 16);
    }
    memmove(p_p, v32, v30);
  }
  strcpy((char *)p_p + v30, "__plus_rand");
  uint64_t v33 = *(void *)(a1 + 40) + 56;
  unint64_t v34 = a2[3].i32[2];
  unint64_t v53 = v34;
  uint64_t v35 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33, v34, &v53)[3];
  if (*((char *)v35 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v35, *((void *)v35 + 1));
  }
  else
  {
    long long v36 = *v35;
    v66.__r_.__value_.__r.__words[2] = *((void *)v35 + 2);
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v36;
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v67, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = v58;
  }
  memset(&v68, 0, sizeof(v68));
  unsigned int v50 = &v68;
  LOBYTE(v51) = 0;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
  v68.__r_.__value_.__r.__words[2] = v68.__r_.__value_.__r.__words[0] + 48;
  v68.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v68.__r_.__value_.__r.__words[2], (long long *)&v66, (long long *)&v68, (std::string *)v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = v57;
  }
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  p_std::string::pointer data = 0;
  uint64_t v59 = (void ***)&v50;
  char v60 = 0;
  unsigned int v50 = (std::string *)operator new(0x18uLL);
  uint64_t v51 = v50;
  p_std::string::pointer data = (void **)&v50[1].__r_.__value_.__l.__data_;
  uint64_t v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v64, (long long *)&v65, v50);
  Espresso::single_match_state<Espresso::generic_gumbel_max_kernel>::add_kernel(a2, v56, &lpsrc, &__p, (std::string **)&v68, &v50);
  uint64_t v59 = (void ***)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  unsigned int v50 = &v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v67.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v66 + i * 8 + 24));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(lpsrc.__r_.__value_.__l.__data_);
  }
  if (size)
  {
    nitro::nitro_function::nitro_function(size);
    nitro::nitro_function::nitro_function(size);
  }
  *(_OWORD *)&v61[16] = 0uLL;
  *(void *)&v61[32] = 0xFFFFFFFF00000000;
  LOBYTE(v62) = 0;
  *(void *)&v61[8] = 0x100000001;
  *(void *)std::string v61 = 0x358637BD0000000BLL;
  Espresso::abstract_engine_factory::shared(&__p);
  uint64_t v38 = __p.__r_.__value_.__r.__words[0];
  uint64_t v39 = *(void *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v66, "reduce");
  LODWORD(v68.__r_.__value_.__l.__data_) = 0;
  LODWORD(v50) = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v38, v39 + 16, (uint64_t)&v66, (uint64_t)v61, (int *)&v68);
  if (!lpsrc.__r_.__value_.__r.__words[0])
  {
    size_t v40 = 0;
    goto LABEL_78;
  }
  if (!v40)
  {
LABEL_78:
    int v41 = 0;
    goto LABEL_79;
  }
  int v41 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
LABEL_79:
  if (lpsrc.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  v49[0] = v40;
  v49[1] = v41;
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v66, "reduce");
  uint64_t v42 = a2[1].i64[0];
  if (*(char *)(v42 + 39) >= 0) {
    size_t v43 = *(unsigned __int8 *)(v42 + 39);
  }
  else {
    size_t v43 = *(void *)(v42 + 24);
  }
  p_lpvImage_Buffer src = &lpsrc;
  std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v43 + 8);
  if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_lpvImage_Buffer src = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
  }
  if (v43)
  {
    if (*(char *)(v42 + 39) >= 0) {
      unint64_t v45 = (const void *)(v42 + 16);
    }
    else {
      unint64_t v45 = *(const void **)(v42 + 16);
    }
    memmove(p_lpsrc, v45, v43);
  }
  strcpy((char *)p_lpsrc + v43, "__argmax");
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v68, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v68 = v57;
  }
  memset(&__p, 0, sizeof(__p));
  unsigned int v50 = &__p;
  LOBYTE(v51) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (long long *)&v68, &v69, (std::string *)__p.__r_.__value_.__l.__data_);
  uint64_t v46 = *(void *)(a1 + 40) + 96;
  unint64_t v47 = a2[3].i32[2];
  unsigned int v50 = (std::string *)v47;
  unint64_t v48 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v46, v47, &v50);
  Espresso::single_match_state<Espresso::generic_gumbel_max_kernel>::add_kernel(a2, v49, &v66, &lpsrc, (std::string **)&__p, v48 + 3);
  unsigned int v50 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(lpsrc.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (v41)
  {
    nitro::nitro_function::nitro_function(v41);
    nitro::nitro_function::nitro_function(v41);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_1926E7D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v51 - 137) < 0) {
    operator delete(*(void **)(v51 - 160));
  }
  if (v50)
  {
    nitro::nitro_function::nitro_function(v50);
    nitro::nitro_function::nitro_function(v50);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_state<Espresso::generic_gumbel_max_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  std::string v24 = v12 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    size_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  long long v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_1926E81F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void Espresso::pass_wavernn_ane::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_wavernn_ane::~pass_wavernn_ane(Espresso::pass_wavernn_ane *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_wavernn_ane>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_wavernn_ane>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3848D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_wavernn_ane>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3848D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::single_match_replace<Espresso::generic_load_constant_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      float v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      uint64_t v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        uint64_t v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    uint64_t v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      size_t v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        uint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          unint64_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          __int32 v23 = 0;
          long long v31 = (void **)&v21;
          char v32 = 0;
          uint64_t v21 = (uint64_t *)operator new(0x48uLL);
          unint64_t v22 = v21;
          __int32 v23 = v21 + 9;
          unint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          long long v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          long long v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          long long v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1926E86D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  float v8 = a1 + 2;
  uint64_t v9 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate(a1);
    if (a4 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    size_t v15 = a2;
    goto LABEL_11;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v9) >> 4;
  if (v16 < a4)
  {
    int v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(a2, v17, v9);
    uint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    size_t v15 = v17;
LABEL_11:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v14, v15, a3, v13);
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(a2, a3, v9);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    int v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      float v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_1EE389990;
  v10[3] = &unk_1EE36BEF0;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  uint64_t v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  unint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1926E89D4(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,3>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BEF0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<float,3>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BEF0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<float,3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(char *a1, void *a2)
{
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x192FF15B0](a1 + 120);
  return a1;
}

std::string *Espresso::string_join(std::string *this, void *a2, uint64_t a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    uint64_t v6 = this;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = v3 / 24;
    unint64_t v10 = v9 - 1;
    if (v9 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v9;
    }
    do
    {
      uint64_t v12 = *a2 + v7;
      int v13 = *(char *)(v12 + 23);
      if (v13 >= 0) {
        uint64_t v14 = (const std::string::value_type *)(*a2 + v7);
      }
      else {
        uint64_t v14 = *(const std::string::value_type **)v12;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        std::string::size_type v15 = *(void *)(v12 + 8);
      }
      this = std::string::append(v6, v14, v15);
      if (v10 > v8)
      {
        int v16 = *(char *)(a3 + 23);
        if (v16 >= 0) {
          int v17 = (const std::string::value_type *)a3;
        }
        else {
          int v17 = *(const std::string::value_type **)a3;
        }
        if (v16 >= 0) {
          std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v18 = *(void *)(a3 + 8);
        }
        this = std::string::append(v6, v17, v18);
      }
      ++v8;
      v7 += 24;
    }
    while (v11 != v8);
  }
  return this;
}

void sub_1926E8DB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,signed char const&>(char a1)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>(char *a1, void *a2)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>(char *a1, uint64_t a2, uint64_t a3)
{
}

void __assign_helper_atomic_property_(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *__copy_helper_atomic_property_(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *__n128 result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1926E9370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }

  _Unwind_Resume(a1);
}

void sub_1926E9604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1926E966C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (!a18) {
    JUMPOUT(0x1926E965CLL);
  }
  JUMPOUT(0x1926E9658);
}

void sub_1926E9CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a1 + 48);
}

void __destroy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void *__copy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1926EA624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  nitro::nitro_function::nitro_function(v34);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }

  _Unwind_Resume(a1);
}

void sub_1926EAB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }

  _Unwind_Resume(a1);
}

void sub_1926EADBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926EB2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (*(char *)(v61 - 185) < 0) {
    operator delete(*(void **)(v61 - 208));
  }
  if (*(char *)(v61 - 145) < 0) {
    operator delete(*(void **)(v61 - 168));
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  long long v63 = *(std::__shared_weak_count **)(v61 - 136);
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }

  _Unwind_Resume(a1);
}

void sub_1926EC6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  uint64_t v49 = *(std::__shared_weak_count **)(v47 - 128);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(void *a1, int a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389920;
  *((void *)v4 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_DWORD *)v4 + 8) = a2;
  unint64_t v5 = (Espresso *)(4 * a2);
  uint64_t v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  *((void *)v4 + 5) = v6;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1926ECB18(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(void *a1, int a2, int a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE389958;
  *((void *)v6 + 3) = &unk_1EE36BED0;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_DWORD *)v6 + 8) = a2;
  *((_DWORD *)v6 + 9) = a3;
  uint64_t v7 = (Espresso *)(4 * a2 * (uint64_t)a3);
  unint64_t v8 = Espresso::kern_alloc_uninitialized(v7);
  bzero(v8, (size_t)v7);
  *((void *)v6 + 5) = v8;
  v6[48] = 1;
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_1926ECC08(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,unsigned long,void>(void *a1, int a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389920;
  *((void *)v4 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_DWORD *)v4 + 8) = a2;
  unint64_t v5 = (Espresso *)(4 * a2);
  uint64_t v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  *((void *)v4 + 5) = v6;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1926ECCF0(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_1926ECF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  a30 = (void *)(v42 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (a2 == 1)
  {
    unint64_t v45 = __cxa_begin_catch(a1);
    uint64_t v46 = [NSString stringWithUTF8String:(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45)];
    NSLog(&cfstr_FailedToSaveTh_0.isa);

    __cxa_end_catch();
    JUMPOUT(0x1926ECF20);
  }

  _Unwind_Resume(a1);
}

void Espresso::net::apply_to_all_globals(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[137];
  if (v4)
  {
    unint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = a1[136];
      if (v6)
      {
        uint64_t v7 = a2[3];
        if (v7)
        {
          if ((void *)v7 == a2)
          {
            std::string::size_type v15 = v14;
            (*(void (**)(void *, void *))(*a2 + 24))(a2, v14);
            goto LABEL_24;
          }
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
        std::string::size_type v15 = (void *)v7;
LABEL_24:
        Espresso::net::apply_to_all_globals(v6, v14);
        std::__function::__value_func<void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__value_func[abi:ne180100](v14);
LABEL_25:
        nitro::nitro_function::nitro_function(v5);
        return;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  for (uint64_t i = (uint64_t *)a1[182]; i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string __p = *(std::string *)(i + 2);
    }
    unint64_t v9 = (std::__shared_weak_count *)i[6];
    uint64_t v12 = i[5];
    int v13 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = a2[3];
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 48))(v10, &__p);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v5) {
    goto LABEL_25;
  }
}

void sub_1926ED2DC(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  uint64_t v16 = *a3;
  long long v17 = **a3;
  *((void *)i + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)i + 5) = 0;
  *((void *)i + 6) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  *std::string::size_type v15 = i;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_1926ED5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1926EDDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 217) < 0) {
    operator delete(*(void **)(v52 - 240));
  }
  if (*(char *)(v52 - 193) < 0) {
    operator delete(*(void **)(v52 - 216));
  }
  std::string v54 = *(std::__shared_weak_count **)(v52 - 184);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }

  _Unwind_Resume(a1);
}

void sub_1926EE2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1926EEB14()
{
}

void sub_1926EEB1C()
{
  __cxa_end_catch();
  JUMPOUT(0x1926EEE0CLL);
}

void sub_1926EEB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::string v57 = *(std::__shared_weak_count **)(v56 - 192);
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (!a56) {
    JUMPOUT(0x1926EEE3CLL);
  }
  JUMPOUT(0x1926EEE38);
}

void sub_1926EECE8()
{
  JUMPOUT(0x1926EEE14);
}

void sub_1926EED04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  if (a50) {
    nitro::nitro_function::nitro_function(a50);
  }
  JUMPOUT(0x1926EEE14);
}

void sub_1926EED3C()
{
}

void sub_1926EED88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  if (a45) {
    nitro::nitro_function::nitro_function(a45);
  }
  JUMPOUT(0x1926EEE04);
}

void sub_1926EEDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a45) {
    nitro::nitro_function::nitro_function(a45);
  }
  JUMPOUT(0x1926EEE0CLL);
}

void sub_1926EEDE4()
{
}

void sub_1926EEDEC()
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(&v5);

  _Block_object_dispose(&v6, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v0 + 48);
  if (v2) {
    nitro::nitro_function::nitro_function();
  }

  JUMPOUT(0x1926EEE54);
}

void sub_1926EEDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

id std::allocate_shared[abi:ne180100]<Espresso::espresso_training_data_source,std::allocator<Espresso::espresso_training_data_source>,objc_object  {objcproto14ETDataProvider}* {__strong}&,void>(void *a1, void *a2)
{
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE388D18;
  id result = a2;
  *((unsigned char *)v4 + 32) = 0;
  v4[3] = &unk_1EE364390;
  v4[5] = result;
  *a1 = v4 + 3;
  a1[1] = v4;
  return result;
}

uint64_t __Block_byref_object_copy__818(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__819(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 48);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      int v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          int v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  std::string::size_type v15 = (void *)(a1 + 16);
  int v13 = (char *)operator new(0x38uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)int v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v16 = (std::string *)(v13 + 16);
  long long v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((void *)v13 + 5) = 0;
  *((void *)v13 + 6) = 0;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)int v13 = *v26;
LABEL_41:
    void *v26 = v13;
    goto LABEL_42;
  }
  *(void *)int v13 = *v15;
  *std::string::size_type v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_1926EF15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void sub_1926EF518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        unint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16)) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      std::string::size_type v15 = (char *)operator new(0x38uLL);
      v26[0] = v15;
      v26[1] = a1 + 16;
      char v27 = 0;
      *(void *)std::string::size_type v15 = 0;
      *((void *)v15 + 1) = v8;
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v15 + 16), (long long *)v5 + 1);
      char v27 = 1;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        BOOL v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v9);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        *(void *)std::string::size_type v15 = *v23;
      }
      else
      {
        *(void *)std::string::size_type v15 = *v6;
        *uint64_t v6 = v15;
        *(void *)(v22 + 8 * v2) = v6;
        if (!*(void *)v15) {
          goto LABEL_40;
        }
        unint64_t v24 = *(void *)(*(void *)v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v24 >= v9) {
            v24 %= v9;
          }
        }
        else
        {
          v24 &= v9 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v15;
LABEL_40:
      v26[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
LABEL_41:
      uint64_t v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1926EF804(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_48c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 48);
}

uint64_t __copy_helper_block_ea8_48c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a1 + 48, a2 + 48);
}

uint64_t std::__shared_ptr_emplace<Espresso::espresso_training_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<Espresso::espresso_training_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388D18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::espresso_training_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1926EFFBC()
{
  __cxa_end_catch();
  JUMPOUT(0x1926F01FCLL);
}

void sub_1926EFFEC()
{
}

void sub_1926EFFF4()
{
  if (v0)
  {
    nitro::nitro_function::nitro_function(v0);
    JUMPOUT(0x1926F0208);
  }
  JUMPOUT(0x1926F0210);
}

void sub_1926F0008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (!a53) {
    JUMPOUT(0x1926F0210);
  }
  JUMPOUT(0x1926F020CLL);
}

void sub_1926F0018()
{
}

void sub_1926F0020()
{
}

void sub_1926F0028(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,std::__shared_weak_count *a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a43) {
    nitro::nitro_function::nitro_function(a43);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)&a50);
  _Block_object_dispose(&a55, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)&a61);
  JUMPOUT(0x1926F01F0);
}

void sub_1926F0528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_1926F068C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926F0E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  uint64_t v44 = *(std::__shared_weak_count **)(v42 - 176);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }

  _Unwind_Resume(a1);
}

BOOL find_or_create_error<std::string,std::shared_ptr<Espresso::abstract_blob_container>>(void *a1, unsigned __int8 *a2, void *a3, void *a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a1, a2);
  unint64_t v9 = v8;
  if (a3 && !v8)
  {
    uint8x8_t v10 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = *MEMORY[0x1E4F28568];
    v14[0] = v7;
    unint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
    *a3 = [v10 errorWithDomain:@"EspressoError" code:1 userInfo:v11];
  }
  return v9 != 0;
}

void sub_1926F1124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1926F4584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22)
{
  __cxa_end_catch();
  STACK[0x850] = (unint64_t)&STACK[0xA40];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x850]);

  if (SLOBYTE(STACK[0x4DF]) < 0) {
    operator delete((void *)STACK[0x4C8]);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x510]);
  Espresso::network_shape::~network_shape((char **)&STACK[0x5F8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x628], (char *)STACK[0x630]);
  STACK[0x850] = (unint64_t)&STACK[0x698];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x850]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table((uint64_t)&STACK[0x6B0]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&STACK[0x6E0]);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&STACK[0x728]);

  if (STACK[0x820]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x820]);
  }

  _Unwind_Resume(a1);
}

void sub_1926F45C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926F45D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  JUMPOUT(0x1926F495CLL);
}

void sub_1926F45E4()
{
  if (STACK[0x858]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x858]);
  }
  JUMPOUT(0x1926F485CLL);
}

void sub_1926F45F8()
{
}

void sub_1926F4600()
{
}

void sub_1926F4608()
{
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  if (STACK[0x508]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x508]);
  }
  JUMPOUT(0x1926F4874);
}

void sub_1926F4644()
{
  if (STACK[0x5F0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x5F0]);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x628], (char *)STACK[0x630]);
  JUMPOUT(0x1926F492CLL);
}

void sub_1926F4664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22)
{
  if (STACK[0x648]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x648]);
  }
  STACK[0x850] = (unint64_t)&STACK[0x698];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x850]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table((uint64_t)&STACK[0x6B0]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&STACK[0x6E0]);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&STACK[0x728]);

  if (STACK[0x820]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x820]);
  }

  JUMPOUT(0x1926F4998);
}

void sub_1926F467C()
{
}

void sub_1926F4684()
{
  if (!STACK[0x720]) {
    JUMPOUT(0x1926F4954);
  }
  JUMPOUT(0x1926F47BCLL);
}

void sub_1926F4698()
{
  if (STACK[0x7F0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x7F0]);
  }
  if (SLOBYTE(STACK[0x867]) < 0) {
    operator delete((void *)STACK[0x850]);
  }

  JUMPOUT(0x1926F4954);
}

void sub_1926F474C()
{
  JUMPOUT(0x1926F4954);
}

void sub_1926F4758()
{
  JUMPOUT(0x1926F495CLL);
}

void sub_1926F4774()
{
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x1926F4924);
}

void sub_1926F479C()
{
  JUMPOUT(0x1926F47A4);
}

void sub_1926F47C8()
{
  if (STACK[0x810]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x810]);
  }
  if (SLOBYTE(STACK[0x867]) < 0) {
    operator delete((void *)STACK[0x850]);
  }

  JUMPOUT(0x1926F495CLL);
}

void sub_1926F47F4()
{
}

void sub_1926F4808()
{
}

void sub_1926F4810()
{
  JUMPOUT(0x1926F4968);
}

void sub_1926F4838()
{
  STACK[0x850] = (unint64_t)&STACK[0xA40];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x850]);

  if (SLOBYTE(STACK[0x4DF]) < 0) {
    operator delete((void *)STACK[0x4C8]);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x510]);
  Espresso::network_shape::~network_shape((Espresso::network_shape *)&STACK[0x5F8]);
  JUMPOUT(0x1926F4898);
}

void sub_1926F4840()
{
  JUMPOUT(0x1926F4848);
}

void sub_1926F48A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22)
{
  STACK[0x850] = (unint64_t)&STACK[0x698];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x850]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(&STACK[0x6B0]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(&STACK[0x6E0]);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&STACK[0x728]);

  if (STACK[0x820]) {
    nitro::nitro_function::nitro_function();
  }

  JUMPOUT(0x1926F4998);
}

void sub_1926F48B4()
{
}

void sub_1926F48C4()
{
}

void sub_1926F48CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, v21);
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete((void *)STACK[0x510]);
  }

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v22);
  JUMPOUT(0x1926F492CLL);
}

uint64_t *update_layer_index(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*result + 32);
  if (*(void *)(*result + 40) != v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      id v7 = (long long *)(*(void *)(v2 + v5) + 16);
      id result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v7, (uint64_t)&std::piecewise_construct, &v7);
      result[5] = v6++;
      uint64_t v2 = *(void *)(*v4 + 32);
      v5 += 16;
    }
    while (v6 < (*(void *)(*v4 + 40) - v2) >> 4);
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  std::string::size_type v15 = (std::string *)(v13 + 16);
  float v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v13[40] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t v13 = *v25;
LABEL_41:
    void *v25 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1926F4C8C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      unint64_t v8 = (void *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        if ((uint64_t *)v6 != v2)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6 + 40, (std::string *)v2[5], (std::string *)v2[6], 0xAAAAAAAAAAAAAAABLL * ((v2[6] - v2[5]) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6 + 64, (std::string *)v2[8], (std::string *)v2[9], 0xAAAAAAAAAAAAAAABLL * ((v2[9] - v2[8]) >> 3));
        }
        unint64_t v8 = *(void **)v6;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (!v8) {
          break;
        }
        uint64_t v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    unint64_t v9 = (char *)operator new(0x58uLL);
    v11[0] = v9;
    v11[1] = a1 + 2;
    char v12 = 0;
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint8x8_t v10 = std::pair<std::string const,Espresso::layer_training_transform_info>::pair[abi:ne180100]((std::string *)(v9 + 16), (long long *)v2 + 1);
    char v12 = 1;
    *((void *)v9 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v10);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v9);
    v11[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
}

void sub_1926F4DFC(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_1926F4E28()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1926F4EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::softmax_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  float v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  std::string::size_type v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926F50F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t Espresso::sgd_optimizer_builder::sgd_optimizer_builder(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, std::string *a6, float a7, float a8)
{
  v12[0] = a2;
  v12[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimizer_builder::optimizer_builder(a1, v12, a4, a5, a6, a7);
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  *(void *)a1 = &unk_1EE357088;
  *(float *)(a1 + 280) = a8;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 312) = a8 > 0.00000001;
  return a1;
}

void sub_1926F5234(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::adam_optimizer_builder::adam_optimizer_builder(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, std::string *a6, float a7, float a8, float a9, float a10)
{
  v16[0] = a2;
  v16[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::optimizer_builder::optimizer_builder(a1, v16, a4, a5, a6, a7);
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  *(void *)a1 = &unk_1EE3576F0;
  *(float *)(a1 + 280) = a8;
  *(float *)(a1 + 284) = a9;
  *(float *)(a1 + 288) = a10;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 320), "beta1_accum");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 344), "beta2_accum");
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  return a1;
}

void sub_1926F5338(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 343) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 319) < 0) {
    operator delete(*(void **)(v1 + 296));
  }
  Espresso::optimizer_builder::~optimizer_builder((void **)v1);
  _Unwind_Resume(a1);
}

void Espresso::gradient_builder::~gradient_builder(Espresso::gradient_builder *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 64);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((void *)this + 6));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_training_transform_info>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_training_transform_info>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_training_transform_info>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,Espresso::layer_training_transform_info>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[2].__r_.__value_.__r.__words, *((void *)a2 + 6), *((void *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  return this;
}

void sub_1926F559C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_1926F59E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1926F5E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

std::string *Espresso::layer_nd_shape::repr(std::string *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(this, "(");
  if (*(_DWORD *)(a2 + 20))
  {
    unint64_t v4 = 0;
    do
    {
      std::to_string(&v9, *(_DWORD *)(a2 + 4 * v4));
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = &v9;
      }
      else {
        uint64_t v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
      }
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v9.__r_.__value_.__l.__size_;
      }
      std::string::append(this, (const std::string::value_type *)v5, size);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = *(int *)(a2 + 20);
      if (v4 < v7 - 1)
      {
        std::string::append(this, ", ");
        LODWORD(v7) = *(_DWORD *)(a2 + 20);
      }
      ++v4;
    }
    while (v4 < (int)v7);
  }
  return std::string::append(this, ")");
}

void sub_1926F6000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926F6360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_1926F6564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926F66A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926F68A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dropout_augment_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void *Espresso::universal_dropout_augment_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  id result = std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 != v7)
  {
    int v8 = *(_DWORD *)(a1 + 284);
    do
    {
      *(_DWORD *)(v6 + 12) *= v8;
      v6 += 64;
    }
    while (v6 != v7);
  }
  return result;
}

void Espresso::universal_dropout_augment_kernel::__launch(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)**a4 + 56))(&v49);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)**a3 + 56))(&v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)**a4 + 40))(**a4, a2, &v49);
  size_t v40 = a3;
  if (*(void *)a2)
  {
    if (v8)
    {
      std::string v9 = *(std::__shared_weak_count **)(a2 + 8);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v8 + 40))(v8);
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
    }
  }
  if (!*(void *)(a1 + 304))
  {
    uint64_t v10 = operator new(0x20uLL);
    v10[1] = 0;
    uint64_t v10[2] = 0;
    void *v10 = &unk_1EE38D510;
    unsigned int v11 = *(_DWORD *)(a1 + 288)
        + ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) | ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) << 31));
    if (v11 <= 1) {
      unsigned int v11 = 1;
    }
    *((_DWORD *)v10 + 6) = v11;
    char v12 = *(std::__shared_weak_count **)(a1 + 312);
    *(void *)(a1 + 304) = v10 + 3;
    *(void *)(a1 + 312) = v10;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
  uint64_t v13 = **a4;
  if (*(int *)(v13 + 20) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = *(int *)(v47 + 12) * (uint64_t)*(int *)(v47 + 8);
    uint64_t v46 = v16 * *(int *)(v47 + 16);
    size_t v17 = 4 * v46;
    if (v16 <= 1) {
      int v18 = 1;
    }
    else {
      int v18 = *(_DWORD *)(v47 + 12) * *(_DWORD *)(v47 + 8);
    }
    uint64_t v19 = v18;
    int v20 = *(_DWORD *)(a1 + 284);
    int v41 = a4;
    uint64_t v43 = v19;
    do
    {
      unsigned int v21 = *(_DWORD *)(a1 + 288)
          + ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) | ((*(_DWORD *)(a1 + 288) / 0x7FFFFFFFu) << 31));
      if (v21 <= 1) {
        unsigned int v21 = 1;
      }
      **(_DWORD **)(a1 + 304) = v21;
      if (v20 >= 1)
      {
        int v22 = 0;
        uint64_t v23 = *(void *)(v49 + 24);
        __vImage_Buffer src = (void *)(v23 + 4 * v15 * v46);
        uint64_t v45 = v15;
        uint64_t v42 = v14;
        uint64_t v24 = v23 + v14;
        do
        {
          uint64_t v25 = v47;
          uint64_t v26 = *(void *)(v47 + 24);
          if (v22)
          {
            int v27 = *(_DWORD *)(v47 + 16);
            if (v27 >= 1)
            {
              int v28 = 0;
              LODWORD(v29) = 0;
              size_t v30 = v26 + v17 * (v22 + (int)v15 * v20);
              do
              {
                if (v16)
                {
                  long long v31 = *(unsigned int **)(a1 + 304);
                  unsigned int v32 = *v31;
                  uint64_t v29 = (int)v29;
                  uint64_t v33 = v19;
                  do
                  {
                    unsigned int v34 = v32 / 0xADC8;
                    unsigned int v35 = 48271 * (v32 % 0xADC8);
                    v34 *= 3399;
                    BOOL v36 = v35 >= v34;
                    unsigned int v37 = v35 - v34;
                    if (v36) {
                      int v38 = 0;
                    }
                    else {
                      int v38 = 0x7FFFFFFF;
                    }
                    unsigned int v32 = v38 + v37;
                    int v39 = 0;
                    if ((float)((float)((float)(v32 - 1) * 4.6566e-10) + 0.0) <= *(float *)(a1 + 280)) {
                      int v39 = *(_DWORD *)(v24 + 4 * v29);
                    }
                    *(_DWORD *)(v30 + 4 * v29++) = v39;
                    --v33;
                  }
                  while (v33);
                  *long long v31 = v32;
                  int v27 = *(_DWORD *)(v25 + 16);
                }
                ++v28;
              }
              while (v28 < v27);
            }
          }
          else
          {
            memcpy((void *)(v26 + 4 * v20 * (int)v15 * v46), __src, v17);
            uint64_t v19 = v43;
            uint64_t v15 = v45;
          }
          ++v22;
          int v20 = *(_DWORD *)(a1 + 284);
        }
        while (v22 < v20);
        uint64_t v14 = v42;
        uint64_t v13 = **v41;
      }
      ++v15;
      v14 += v17;
    }
    while (v15 < *(int *)(v13 + 20));
  }
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)**v40 + 48))(**v40, a2, &v47);
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
}

void sub_1926F6DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D510;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::universal_dropout_augment_kernel::~universal_dropout_augment_kernel(Espresso::universal_dropout_augment_kernel *this)
{
  *(void *)this = &unk_1EE367ED8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE367ED8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::universal_dropout_augment_join_kernel::number_of_top_blobs(Espresso::universal_dropout_augment_join_kernel *this)
{
  return 2;
}

uint64_t Espresso::universal_dropout_augment_join_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  *((void *)&v24 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  *(_OWORD *)uint64_t v19 = **a2;
  *(_OWORD *)&v19[16] = v7;
  uint64_t v20 = v6;
  std::string __p = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v18.__r_.__value_.__s.__data_[8] = 0;
  int v8 = operator new(0x40uLL);
  *a3 = (uint64_t)v8;
  a3[1] = (uint64_t)v8;
  a3[2] = (uint64_t)v8 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v19, &v24, (uint64_t)v8);
  if (__p)
  {
    int v22 = __p;
    operator delete(__p);
  }
  int v9 = *(_DWORD *)(a1 + 284);
  if (!v9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid parameter");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = *a3;
  int v11 = *(_DWORD *)(*a3 + 12);
  if (v11 != v11 / v9 * v9)
  {
    uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v18, *(_DWORD *)(*a3 + 12));
    uint64_t v16 = std::string::insert(&v18, 0, "Invalid parameter: ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&v19[16] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v19 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v15, (const std::string *)v19);
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_DWORD *)(v10 + 12) = v11 / v9;
  unint64_t v12 = a3[1];
  if (v12 >= a3[2])
  {
    uint64_t result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (long long *)v10);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, (long long *)v10);
    uint64_t result = v12 + 64;
  }
  a3[1] = result;
  return result;
}

void sub_1926F7178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void Espresso::universal_dropout_augment_join_kernel::__launch(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  int v8 = *(_DWORD *)(**a3 + 20);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)**a4 + 56))(&v23);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)**a3 + 56))(&v21);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a3)[2] + 56))(&v19);
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)**a4 + 40))(**a4, a2, &v23);
  if (*(void *)a2)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v9 + 40))(v9);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
    }
  }
  int v18 = *(_DWORD *)(a1 + 296);
  long long v17 = *(_OWORD *)(a1 + 280);
  int v11 = v24;
  v16[0] = v23;
  v16[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = v22;
  v15[0] = v21;
  v15[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v20;
  v14[0] = v19;
  v14[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  combine_dropout_augment_outputs((uint64_t)&v17, (uint64_t)v16, (uint64_t)v15, (uint64_t)v14, v8);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)**a3 + 48))(**a3, a2, &v21);
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)(*a3)[2] + 48))((*a3)[2], a2, &v19);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
}

void sub_1926F74EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 72);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  long long v24 = *(std::__shared_weak_count **)(v21 - 56);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(exception_object);
}

void combine_dropout_augment_outputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    for (int i = 0; i != a5; ++i)
    {
      int v7 = *(_DWORD *)(*(void *)a2 + 12) * *(_DWORD *)(*(void *)a2 + 8) * *(_DWORD *)(*(void *)a2 + 16);
      vDSP_Length v8 = v7;
      uint64_t v9 = *(void *)(*(void *)a2 + 24);
      uint64_t v10 = *(unsigned int *)(a1 + 4);
      int v11 = *(_DWORD *)(a1 + 4);
      uint64_t v12 = *(void *)(*(void *)a3 + 24);
      int v13 = *(_DWORD *)(*(void *)a3 + 8);
      int v14 = *(_DWORD *)(*(void *)a3 + 12);
      int v15 = *(_DWORD *)(*(void *)a3 + 16);
      uint64_t v16 = 4 * v7;
      if (*(unsigned char *)(a1 + 16))
      {
        if (v7)
        {
          uint64_t v17 = 0;
          uint64_t v18 = v12 + 4 * v13 * i * v14 * v15;
          uint64_t v19 = (float *)(v9 + v16 * v11 * i);
          do
          {
            float v20 = 0.0;
            if ((int)v10 >= 1)
            {
              uint64_t v21 = v19;
              uint64_t v22 = v10;
              do
              {
                float v20 = v20 + (float)(*v21 * (float)(1.0 / (float)(int)v10));
                uint64_t v21 = (float *)((char *)v21 + v16);
                --v22;
              }
              while (v22);
            }
            *(float *)(v18 + 4 * v17++) = v20;
            ++v19;
          }
          while (v17 != v7);
        }
      }
      else if (v7)
      {
        uint64_t v23 = v7;
        long long v24 = (_DWORD *)(v12 + 4 * v14 * v15 * v13 * i);
        uint64_t v25 = (int *)(v9 + 4 * v7 * (uint64_t)((int)v10 * i));
        do
        {
          int v26 = *v25++;
          *v24++ = v26;
          --v23;
        }
        while (v23);
      }
      uint64_t v55 = *(void *)(*(void *)a4 + 24);
      int v27 = *(_DWORD *)(*(void *)a4 + 12);
      int v54 = *(_DWORD *)(*(void *)a4 + 8);
      int v28 = *(_DWORD *)(*(void *)a4 + 16);
      std::vector<float>::vector(__p, (int)v10);
      *(_DWORD *)(a1 + 12) = 2;
      uint64_t v29 = *(unsigned int *)(a1 + 4);
      float v30 = 0.0;
      if ((int)v29 >= 1)
      {
        uint64_t v31 = 0;
        unsigned int v32 = (const float *)(v9 + 4 * (int)v10 * i * (uint64_t)v7);
        float v33 = 1.0 / (float)(v29 - 1);
        unsigned int v34 = (float *)(v9 + v16 * v11 * i);
        uint64_t v35 = 4 * v8;
        do
        {
          if ((int)v8 >= 1)
          {
            float v36 = 0.0;
            unsigned int v37 = v34;
            uint64_t v38 = v8;
            do
            {
              float v39 = *v37++;
              float v36 = v36 + v39;
              --v38;
            }
            while (v38);
            unint64_t v40 = 0;
            float v41 = v36 / (float)(int)v8;
            do
            {
              v34[v40 / 4] = v34[v40 / 4] - v41;
              v40 += 4;
            }
            while (v35 != v40);
            unint64_t v42 = 0;
            float v43 = 0.0;
            do
            {
              float v43 = v43 + (float)(v34[v42 / 4] * v34[v42 / 4]);
              v42 += 4;
            }
            while (v35 != v42);
            unint64_t v44 = 0;
            if (v43 < 0.000001) {
              float v43 = 0.000001;
            }
            float v45 = 1.0 / sqrtf(v43);
            do
            {
              v34[v44 / 4] = v45 * v34[v44 / 4];
              v44 += 4;
            }
            while (v35 != v44);
          }
          ++v31;
          unsigned int v34 = (float *)((char *)v34 + v16);
        }
        while (v31 != v29);
        if ((int)v29 >= 2)
        {
          uint64_t v46 = (const float *)(v9 + (4 * v11 * i + 4) * v8);
          float v30 = 0.0;
          uint64_t v47 = 1;
          do
          {
            float __C = 0.0;
            vDSP_dotpr(v46, 1, v32, 1, &__C, v8);
            float v30 = v30 + (float)(__C * v33);
            ++v47;
            uint64_t v46 = (const float *)((char *)v46 + v16);
          }
          while (v47 < *(int *)(a1 + 4));
        }
      }
      if (v8)
      {
        uint64_t v48 = v8;
        uint64_t v49 = (float *)(v55 + 4 * v27 * v28 * v54 * i);
        do
        {
          *v49++ = v30;
          --v48;
        }
        while (v48);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1926F7890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1926F7908(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::universal_dropout_augment_join_kernel::~universal_dropout_augment_join_kernel(Espresso::universal_dropout_augment_join_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::add_dropout_augment_layer(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(std::__shared_weak_count **)(*a1 + 24);
  v12[0] = *(void *)(*a1 + 16);
  v12[1] = (uint64_t)v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *a1;
  }
  int v7 = *(_DWORD *)(**(void **)(v5 + 32) + 12);
  vDSP_Length v8 = (std::__shared_weak_count *)a1[1];
  v11[0] = v5;
  v11[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3321888768;
  v9[2] = ___ZN8Espresso25add_dropout_augment_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  void v9[3] = &__block_descriptor_64_ea8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e385__vector_std::shared_ptr_Espresso::graph_optimization_rule___std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v_v___compressed_pair_std::shared_ptr_Espresso::graph_optimization_rule_____std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v__24__0_shared_ptr_Espresso::network_optimization_graph____network_optimization_graph_____shared_weak_count__8l;
  _OWORD v9[4] = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  Espresso::optimize_network(v12, v7, (uint64_t)v11, v9, a4);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1926F7A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (v20)
  {
    nitro::nitro_function::nitro_function(v20);
    if (!v19) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v19)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v19);
  goto LABEL_4;
}

void ___ZN8Espresso25add_dropout_augment_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *(long long **)(a1 + 32);
  int v7 = operator new(0x70uLL);
  v7[1] = 0;
  uint64_t v7[2] = 0;
  *int v7 = &unk_1EE3881B8;
  uint64_t v9 = *(void **)a2;
  vDSP_Length v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  Espresso::rule_add_dropout_augment::rule_add_dropout_augment((uint64_t)(v7 + 3), v9, v8, v6, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unint64_t v10 = a3[2];
  int v11 = (void *)a3[1];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = ((uint64_t)v11 - *a3) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v10 - *a3;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v23 = a3 + 2;
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
    *(void *)&long long v18 = v7 + 3;
    *((void *)&v18 + 1) = v7;
    uint64_t v19 = &v17[16 * v13];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    uint64_t v22 = &v17[16 * v20];
    *(_OWORD *)uint64_t v19 = v18;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v19 + 16);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a3, &__p);
    uint64_t v12 = (void *)a3[1];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *int v11 = v7 + 3;
    v11[1] = v7;
    uint64_t v12 = v11 + 2;
  }
  a3[1] = v12;
}

void sub_1926F7C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v20);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void __copy_helper_block_ea8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t Espresso::rule_add_dropout_augment::rule_add_dropout_augment(uint64_t a1, void *a2, std::__shared_weak_count *a3, long long *a4, long long *a5)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1EE35AF00;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  *(void *)a1 = &unk_1EE35CFA8;
  uint64_t v9 = (std::string *)(a1 + 40);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = *a4;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 64) = v11;
  return a1;
}

void sub_1926F7DF4(_Unwind_Exception *a1)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(v1);
  _Unwind_Resume(a1);
}

void Espresso::rule_add_dropout_augment::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(void *)a3)
  {
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  if (!v8)
  {
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a3 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v10 = *(void *)(a1 + 24) + 96;
  *(void *)&long long v45 = v8[20];
  long long v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v45, &v45);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, v11[3], v11[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[4] - v11[3]) >> 3));
  uint64_t v12 = v47;
  if (*(char *)(v47 + 23) >= 0) {
    size_t v13 = *(unsigned __int8 *)(v47 + 23);
  }
  else {
    size_t v13 = *(void *)(v47 + 8);
  }
  unint64_t v14 = &v45;
  std::string::basic_string[abi:ne180100]((uint64_t)&v45, v13 + 16);
  if (v46 < 0) {
    unint64_t v14 = (long long *)v45;
  }
  if (v13)
  {
    if (*(char *)(v12 + 23) >= 0) {
      uint64_t v15 = (const void *)v12;
    }
    else {
      uint64_t v15 = *(const void **)v12;
    }
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_dropout_augment");
  uint64_t v16 = v47;
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  long long v17 = v45;
  *(void *)(v16 + 16) = v46;
  *(_OWORD *)uint64_t v16 = v17;
  uint64_t v18 = *a2;
  uint64_t v19 = *((void *)v8 + 8);
  uint64_t v20 = *(std::__shared_weak_count **)(v19 + 72);
  uint64_t v43 = *(void *)(v19 + 64);
  unint64_t v44 = v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v19 = *((void *)v8 + 8);
  }
  uint64_t v21 = *((void *)v8 + 11) + 56;
  unint64_t v22 = v8[20];
  __p[0] = (void *)v22;
  uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v22, __p);
  memset(v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v42, v23[3], v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
  memset(v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v41, v47, v48, 0xAAAAAAAAAAAAAAABLL * ((v48 - v47) >> 3));
  Espresso::sequential_builder::add_kernel(v18, &v43, v19 + 40, v19 + 16, v42, v41);
  *(void *)&long long v45 = v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  *(void *)&long long v45 = v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  long long v24 = (uint64_t *)*a2;
  std::string::basic_string[abi:ne180100]<0>(&v45, "dropout_augment");
  uint64_t v25 = *((void *)v8 + 8);
  if (*(char *)(v25 + 39) >= 0) {
    size_t v26 = *(unsigned __int8 *)(v25 + 39);
  }
  else {
    size_t v26 = *(void *)(v25 + 24);
  }
  int v27 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v26 + 16);
  if (v38 < 0) {
    int v27 = (void **)__p[0];
  }
  if (v26)
  {
    if (*(char *)(v25 + 39) >= 0) {
      int v28 = (const void *)(v25 + 16);
    }
    else {
      int v28 = *(const void **)(v25 + 16);
    }
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, "_dropout_augment");
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, v47, v48, 0xAAAAAAAAAAAAAAABLL * ((v48 - v47) >> 3));
  uint64_t v29 = *(void *)(a1 + 24) + 96;
  unint64_t v30 = v8[20];
  unint64_t v32 = v30;
  uint64_t v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, v30, &v32);
  memset(v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v33, v31[3], v31[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31[4] - v31[3]) >> 3));
  Espresso::sequential_builder::add<Espresso::dropout_augment_params>(&v39, v24, (uint64_t)&v45, (uint64_t)__p, a1 + 64, v34, v35, v33);
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  unsigned int v50 = (void **)v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
  unsigned int v50 = (void **)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  std::map<int,BOOL>::map[abi:ne180100](a4, (void *)v8 + 2);
  *(void *)&long long v45 = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1926F81F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  *(void *)(v31 - 136) = v31 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1926F82C0()
{
  if (!v0) {
    JUMPOUT(0x1926F82B8);
  }
  JUMPOUT(0x1926F82B0);
}

void Espresso::sequential_builder::add<Espresso::dropout_augment_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1926F84AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t std::map<int,BOOL>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  long long v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      int v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          int v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          int v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = v7;
        }
        else {
          uint64_t v12 = v3;
        }
        if (v6) {
          uint64_t v13 = v7 + 1;
        }
        else {
          uint64_t v13 = v3;
        }
      }
      else
      {
        uint64_t v12 = v3;
        uint64_t v13 = v3;
        if (v6)
        {
          uint64_t v13 = v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              int v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17) {
                break;
              }
              uint64_t v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v14 + 28) = *(void *)((char *)v5 + 28);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v10);
      }
      uint64_t v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_1926F8698(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

void Espresso::rule_add_dropout_augment::match_at_layer(Espresso::rule_add_dropout_augment *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v22 = a2;
  uint64_t v6 = *((void *)this + 3) + 96;
  uint64_t v7 = a2;
  uint64_t v21 = a2;
  uint64_t v8 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, a2, &v21)[3];
  uint64_t v9 = v8[23];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v8[23];
  }
  else {
    uint64_t v10 = *((void *)v8 + 1);
  }
  uint64_t v11 = *((unsigned __int8 *)this + 63);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)this + 6);
  }
  if (v10 != v11) {
    goto LABEL_16;
  }
  if (v12 >= 0) {
    uint64_t v13 = (unsigned __int8 *)this + 40;
  }
  else {
    uint64_t v13 = (unsigned __int8 *)*((void *)this + 5);
  }
  if ((v9 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v8, v13, *((void *)v8 + 1))) {
      goto LABEL_17;
    }
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (v8[23])
  {
    while (*v8 == *v13)
    {
      ++v8;
      ++v13;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v14 = (char *)operator new(0x98uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EE388180;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_DWORD *)v14 + 8) = -1;
  *((void *)v14 + 6) = 0;
  *((void *)v14 + 7) = 0;
  *((void *)v14 + 5) = v14 + 48;
  *((void *)v14 + 10) = 0;
  *((void *)v14 + 11) = 0;
  *((void *)v14 + 9) = 0;
  *((void *)v14 + 8) = v14 + 72;
  *((void *)v14 + 3) = &unk_1EE35CF88;
  *((void *)v14 + 12) = 0;
  *((void *)v14 + 18) = 0;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v14 + 5, a2, &v22)+ 32) = 0;
  long long v15 = *(_OWORD *)(*(void *)(*((void *)this + 3) + 32) + 16 * v7);
  uint64_t v16 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * v7 + 8);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  int v17 = (std::__shared_weak_count *)*((void *)v14 + 12);
  *(_OWORD *)(v14 + 88) = v15;
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  uint64_t v19 = *((void *)this + 3);
  uint64_t v18 = *((void *)this + 4);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)v14 + 15);
  *((void *)v14 + 14) = v19;
  *((void *)v14 + 15) = v18;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  *((_DWORD *)v14 + 26) = a2;
  *a3 = v14 + 24;
  a3[1] = v14;
}

void sub_1926F8890(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::rule_add_dropout_augment::status_t::~status_t(void **this)
{
  *this = &unk_1EE35CF88;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[12];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v3 = (std::__shared_weak_count *)this[9];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *this = &unk_1EE35CF88;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[12];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v3 = (std::__shared_weak_count *)this[9];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388180;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::rule_add_dropout_augment::~rule_add_dropout_augment(void **this)
{
  *this = &unk_1EE35CFA8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  Espresso::graph_optimization_rule::~graph_optimization_rule((Espresso::graph_optimization_rule *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE35CFA8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }

  Espresso::graph_optimization_rule::~graph_optimization_rule((Espresso::graph_optimization_rule *)this);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3881B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3881B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::add_dropout_augment_join_layer(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v18 = *(std::string *)a3;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v18.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
  }
  else if (*((unsigned char *)&v18.__r_.__value_.__s + 23))
  {
    goto LABEL_9;
  }
  uint64_t v7 = *a1 + 96;
  unint64_t v17 = *(_DWORD *)(*a1 + 120) - 1;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v17, &v17);
  std::string::operator=(&v18, (const std::string *)v8[3]);
LABEL_9:
  uint64_t v9 = *a1;
  uint64_t v10 = *(std::__shared_weak_count **)(*a1 + 24);
  v16[0] = *(void *)(*a1 + 16);
  v16[1] = (uint64_t)v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *a1;
  }
  int v11 = *(_DWORD *)(**(void **)(v9 + 32) + 12);
  int v12 = (std::__shared_weak_count *)a1[1];
  v15[0] = v9;
  v15[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  void v13[2] = ___ZN8Espresso30add_dropout_augment_join_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  void v13[3] = &__block_descriptor_64_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e385__vector_std::shared_ptr_Espresso::graph_optimization_rule___std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v_v___compressed_pair_std::shared_ptr_Espresso::graph_optimization_rule_____std::allocator_std::shared_ptr_Espresso::graph_optimization_rule_____v__24__0_shared_ptr_Espresso::network_optimization_graph____network_optimization_graph_____shared_weak_count__8l;
  v13[4] = a2;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v18;
  }
  Espresso::optimize_network(v16, v11, (uint64_t)v15, v13, a4);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1926F8DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21)
  {
    nitro::nitro_function::nitro_function(v21);
    if (!v20)
    {
LABEL_4:
      if (*(char *)(v22 - 57) < 0) {
        operator delete(*(void **)(v22 - 80));
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v20)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v20);
  goto LABEL_4;
}

void ___ZN8Espresso30add_dropout_augment_join_layerENSt3__110shared_ptrINS_3netEEERKNS_22dropout_augment_paramsENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *(long long **)(a1 + 32);
  uint64_t v7 = operator new(0x70uLL);
  v7[1] = 0;
  uint64_t v7[2] = 0;
  *uint64_t v7 = &unk_1EE388DC0;
  uint64_t v9 = *(void **)a2;
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v25 = *(std::string *)(a1 + 40);
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v25;
  }
  uint64_t v10 = v7 + 3;
  Espresso::rule_add_dropout_augment::rule_add_dropout_augment((uint64_t)(v7 + 3), v9, v8, v6, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  void *v10 = &unk_1EE364DB0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unint64_t v11 = a3[2];
  int v12 = (void *)a3[1];
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v14 = ((uint64_t)v12 - *a3) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v11 - *a3;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    long long v24 = a3 + 2;
    std::string v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v17);
    *(void *)&long long v19 = v7 + 3;
    *((void *)&v19 + 1) = v7;
    uint64_t v20 = &v18[16 * v14];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    uint64_t v23 = &v18[16 * v21];
    *(_OWORD *)uint64_t v20 = v19;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 16);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a3, &__p);
    uint64_t v13 = (void *)a3[1];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *int v12 = v10;
    v12[1] = v7;
    uint64_t v13 = v12 + 2;
  }
  a3[1] = v13;
}

void sub_1926F9010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v26);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void __copy_helper_block_ea8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void Espresso::rule_add_dropout_augment_join::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(void *)a3)
  {
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  if (!v8)
  {
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a3 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v10 = *(void *)(a1 + 24) + 96;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v8[20];
  unint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, (unint64_t)__v.__first_, &__v);
  memset(&v61, 0, sizeof(v61));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v61, v11[3], v11[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[4] - v11[3]) >> 3));
  std::vector<std::string>::pointer begin = v61.__begin_;
  if ((v61.__begin_->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v61.__begin_->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v61.__begin_->__r_.__value_.__l.__size_;
  }
  p_v = &__v;
  std::string::basic_string[abi:ne180100]((uint64_t)&__v, size + 5);
  if (SHIBYTE(__v.__end_) < 0) {
    p_v = __v.__first_;
  }
  if (size)
  {
    if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<std::string>::pointer v15 = begin;
    }
    else {
      std::vector<std::string>::pointer v15 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
    }
    memmove(p_v, v15, size);
  }
  strcpy((char *)p_v + size, "_prob");
  std::vector<std::string>::pointer v16 = v61.__begin_;
  if (SHIBYTE(v61.__begin_->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__begin_->__r_.__value_.__l.__data_);
  }
  long long v17 = *(_OWORD *)&__v.__first_;
  v16->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
  *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  std::vector<std::string>::pointer v18 = v61.__begin_;
  if ((v61.__begin_->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v19 = HIBYTE(v61.__begin_->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v19 = v61.__begin_->__r_.__value_.__l.__size_;
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v19 + 12);
  if (v60 < 0) {
    p_p = (long long *)__p;
  }
  if (v19)
  {
    if ((v18->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<std::string>::pointer v21 = v18;
    }
    else {
      std::vector<std::string>::pointer v21 = (std::vector<std::string>::pointer)v18->__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v21, v19);
  }
  strcpy((char *)p_p + v19, "_uncertainty");
  std::vector<std::string>::pointer end = v61.__end_;
  if (v61.__end_ >= v61.__end_cap_.__value_)
  {
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v61.__end_ - (char *)v61.__begin_) >> 3);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 3) > v25) {
      unint64_t v25 = 0x5555555555555556 * (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v26 = v25;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v61.__end_cap_;
    if (v26) {
      unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v26);
    }
    else {
      uint64_t v27 = 0;
    }
    int v28 = (std::string *)(v26 + 24 * v24);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v26;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = (std::string *)(v26 + 24 * v27);
    long long v29 = __p;
    v28->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    int64_t v60 = 0;
    long long __p = 0uLL;
    __v.__end_ = v28 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v61, &__v);
    unint64_t v30 = v61.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v61.__end_ = v30;
    if (SHIBYTE(v60) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    long long v23 = __p;
    v61.__end_->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v23;
    v61.__end_ = end + 1;
  }
  uint64_t v31 = *a2;
  uint64_t v32 = *((void *)v8 + 8);
  float v33 = *(std::__shared_weak_count **)(v32 + 72);
  uint64_t v57 = *(void *)(v32 + 64);
  std::string v58 = v33;
  if (v33)
  {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v32 = *((void *)v8 + 8);
  }
  uint64_t v34 = *((void *)v8 + 11) + 56;
  unint64_t v35 = v8[20];
  *(void *)&long long __p = v35;
  uint64_t v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34, v35, &__p);
  memset(v56, 0, sizeof(v56));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v56, v36[3], v36[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36[4] - v36[3]) >> 3));
  uint64_t v37 = *(void *)(a1 + 24) + 96;
  unint64_t v38 = v8[20];
  long long v63 = (void **)v38;
  uint64_t v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v38, &v63);
  memset(v55, 0, sizeof(v55));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v55, v39[3], v39[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39[4] - v39[3]) >> 3));
  Espresso::sequential_builder::add_kernel(v31, &v57, v32 + 40, v32 + 16, v56, v55);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  unint64_t v40 = (uint64_t *)*a2;
  std::string::basic_string[abi:ne180100]<0>(&__v, "dropout_augment_join");
  uint64_t v41 = *((void *)v8 + 8);
  if (*(char *)(v41 + 39) >= 0) {
    size_t v42 = *(unsigned __int8 *)(v41 + 39);
  }
  else {
    size_t v42 = *(void *)(v41 + 24);
  }
  uint64_t v43 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v42 + 21);
  if (v60 < 0) {
    uint64_t v43 = (long long *)__p;
  }
  if (v42)
  {
    if (*(char *)(v41 + 39) >= 0) {
      unint64_t v44 = (const void *)(v41 + 16);
    }
    else {
      unint64_t v44 = *(const void **)(v41 + 16);
    }
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, "_dropout_augment_join");
  uint64_t v45 = *(void *)(a1 + 24) + 96;
  unint64_t v46 = v8[20];
  unint64_t v49 = v46;
  uint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v45, v46, &v49);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, v47[3], v47[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47[4] - v47[3]) >> 3));
  memset(v48, 0, sizeof(v48));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v48, (uint64_t)v61.__begin_, (uint64_t)v61.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v61.__end_ - (char *)v61.__begin_) >> 3));
  Espresso::sequential_builder::add<Espresso::dropout_augment_params>(&v53, v40, (uint64_t)&__v, (uint64_t)&__p, a1 + 64, v50, v51, v48);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  long long v63 = (void **)v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v63);
  long long v63 = (void **)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::map<int,BOOL>::map[abi:ne180100](a4, (void *)v8 + 2);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1926F9668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  long long __p = (void *)(v33 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  _Unwind_Resume(a1);
}

void sub_1926F9750()
{
  if (!v0) {
    JUMPOUT(0x1926F9748);
  }
  JUMPOUT(0x1926F9740);
}

void Espresso::rule_add_dropout_augment_join::~rule_add_dropout_augment_join(void **this)
{
  *this = &unk_1EE35CFA8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  Espresso::graph_optimization_rule::~graph_optimization_rule((Espresso::graph_optimization_rule *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE35CFA8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }

  Espresso::graph_optimization_rule::~graph_optimization_rule((Espresso::graph_optimization_rule *)this);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment_join>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment_join>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rule_add_dropout_augment_join>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::dropout_multiply_closure::operator()(uint64_t a1, uint64_t *a2, std::__shared_weak_count **a3, uint64_t *a4, int a5, uint64_t a6)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  if (HIDWORD((*a3)->__shared_weak_owners_) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid argument");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int shared_owners = v7->__shared_owners_;
  int shared_owners_high = HIDWORD(v7->__shared_owners_);
  int shared_weak_owners = v7->__shared_weak_owners_;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v89, v7, a3[1]);
  uint64_t v15 = (shared_owners_high * shared_owners * shared_weak_owners);
  uint64_t v16 = v89;
  if (v89)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v91, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
    if ((int)v15 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(v91 + 24);
      uint64_t v19 = *(void *)(*a4 + 16) + a5;
      do
      {
        if (*(unsigned char *)(v19 + v17)) {
          int v20 = *(_DWORD *)(*(void *)(v16 + 24) + 4 * v17);
        }
        else {
          int v20 = 0;
        }
        *(_DWORD *)(v18 + 4 * v17++) = v20;
      }
      while (v15 != v17);
    }
    std::vector<std::string>::pointer v21 = (std::__shared_weak_count *)v92;
    if (v92) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v87, *a3, a3[1]);
  uint64_t v22 = v87;
  if (v87)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v91, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
    if ((int)v15 >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(v91 + 24);
      uint64_t v25 = *(void *)(*a4 + 16) + a5;
      do
      {
        __int16 v26 = *(unsigned __int8 *)(v25 + v23);
        if (*(unsigned char *)(v25 + v23)) {
          __int16 v26 = *(_WORD *)(*(void *)(v22 + 24) + 2 * v23);
        }
        *(_WORD *)(v24 + 2 * v23++) = v26;
      }
      while (v15 != v23);
    }
    uint64_t v27 = (std::__shared_weak_count *)v92;
    if (!v92) {
      goto LABEL_60;
    }
LABEL_59:
    nitro::nitro_function::nitro_function(v27);
    goto LABEL_60;
  }
  int v28 = *a3;
  if (!*a3) {
    goto LABEL_63;
  }
  if (v29)
  {
    unint64_t v30 = v29;
    uint64_t v31 = a3[1];
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v32 = Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<unsigned char,1>>>((uint64_t)(v29 + 9), (void *)*a2, a4);
    uint64_t v33 = v30[9];
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v86, *a2);
    id v34 = v86[0];
    if (*a3) {
    else
    }
      unint64_t v35 = 0;
    if (*(void *)a6) {
    else
    }
      unint64_t v40 = 0;
    if ((*(unsigned int (**)(void *))(*v30 + 32))(v30) != 1)
    {
      long long v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "cp not supported");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v41 = [*(id *)(v33 + 160) kernelForFunction:"v9_dropout_multiply" cacheString:0 withConstants:0];
    if (!v41)
    {
      long long v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v75, "Kernel not found");
      __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v34 setComputePipelineState:v41];
    int v42 = v40[2].i32[0];
    int v44 = v42 - 1;
    BOOL v43 = v42 < 1;
    int v45 = v42 + 2;
    if (!v43) {
      int v45 = v44;
    }
    int v46 = (v45 >> 2) + 1;
    int v99 = 0;
    uint64_t v100 = 1065353216;
    int32x2_t v47 = v40[1];
    unint64_t v92 = __PAIR64__(v40[2].i32[1], v46);
    int v48 = v35[63];
    int v93 = v35[62] / 4;
    int v94 = v48 / 4;
    __int32 v49 = v40[31].i32[0];
    __int32 v50 = v40[31].i32[1];
    int v95 = v35[65] / 4;
    int v96 = v49 / 4;
    __int32 v51 = v40[32].i32[1];
    uint64_t v91 = (uint64_t)v47;
    int v97 = v50 / 4;
    int v98 = v51 / 4;
    [v34 setBuffer:*(void *)&v40[20] offset:0 atIndex:0];
    [v34 setBuffer:*((void *)v35 + 20) offset:0 atIndex:1];
    [v34 setBytes:&v91 length:52 atIndex:2];
    [v34 setBuffer:v32 offset:0 atIndex:3];
    int v52 = v40[3].i32[0];
    if (v52 <= 1) {
      int v52 = 1;
    }
    int v53 = v40[2].i32[1] * v46 * v52;
    if (v53 >= 1) {
      --v53;
    }
    int32x2_t v54 = vadd_s32(v40[1], (int32x2_t)-1);
    int32x2_t v55 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v54, (uint32x2_t)vcltz_s32(v54), 0x1EuLL), 2uLL);
    *(void *)&long long v56 = v55.i32[0];
    *((void *)&v56 + 1) = v55.i32[1];
    long long v84 = v56;
    uint64_t v85 = (v53 >> 1) + 1;
    int64x2_t v82 = vdupq_n_s64(4uLL);
    uint64_t v83 = 2;
    [v34 dispatchThreadgroups:&v84 threadsPerThreadgroup:&v82];

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v86);
    if (!v31) {
      goto LABEL_60;
    }
LABEL_58:
    uint64_t v27 = v31;
    goto LABEL_59;
  }
  if (!v36)
  {
LABEL_63:
    char v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "not supported");
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v37 = v36;
  uint64_t v31 = a3[1];
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(void *)a6)
  {
    unint64_t v38 = 0;
    goto LABEL_50;
  }
  if (!v38)
  {
LABEL_50:
    uint64_t v39 = 0;
    goto LABEL_51;
  }
  uint64_t v39 = *(std::__shared_weak_count **)(a6 + 8);
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_51:
  uint64_t v57 = Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<unsigned char,1>>>((uint64_t)(v37 + 9), (void *)*a2, a4);
  uint64_t v58 = *a2;
  uint64_t v59 = v37[9];
  if ((*(unsigned int (**)(void *))(*v37 + 32))(v37) != 1)
  {
    std::string::size_type v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "cp not supported");
    __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int64_t v60 = *a3;
  uint64_t v91 = (*a3)->__shared_owners_;
  int v61 = v60->__shared_weak_owners_;
  LODWORD(v60) = HIDWORD(v60->__shared_weak_owners_);
  LODWORD(v92) = v61 / 4;
  HIDWORD(v92) = v60;
  long long v62 = (void *)[*(id *)(v59 + 144) newBufferWithBytes:&v91 length:16 options:0];
  long long v63 = [*(id *)(v59 + 160) kernelForFunction:"dropout_multiply" cacheString:0 withConstants:0];
  id v64 = *(id *)(v58 + 152);
  uint64_t v65 = v64;
  if (!v63)
  {
    size_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Kernel not found");
    __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v64 setComputePipelineState:v63];
  [v65 setTexture:v38[21] atIndex:0];
  [v65 setTexture:v37[21] atIndex:1];
  [v65 setBuffer:v62 offset:0 atIndex:0];
  [v65 setBuffer:v57 offset:a5 atIndex:1];
  int v66 = (*a3)->__shared_weak_owners_;
  int v67 = v66 - 1;
  BOOL v43 = v66 < 1;
  int v68 = v66 + 14;
  if (!v43) {
    int v68 = v67;
  }
  int32x2_t v69 = vadd_s32((int32x2_t)(*a3)->__shared_owners_, (int32x2_t)-1);
  int32x2_t v70 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v69, (uint32x2_t)vcltz_s32(v69), 0x1EuLL), 2uLL);
  *(void *)&long long v71 = v70.i32[0];
  *((void *)&v71 + 1) = v70.i32[1];
  long long v80 = v71;
  uint64_t v81 = (v68 >> 4) + 1;
  int64x2_t v78 = vdupq_n_s64(4uLL);
  uint64_t v79 = 4;
  [v65 dispatchThreadgroups:&v80 threadsPerThreadgroup:&v78];

  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (v31) {
    goto LABEL_58;
  }
LABEL_60:
  std::vector<std::string>::pointer v21 = v88;
  if (v88) {
LABEL_10:
  }
    nitro::nitro_function::nitro_function(v21);
LABEL_11:
  if (v90) {
    nitro::nitro_function::nitro_function(v90);
  }
}

void sub_1926FA160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29)
{
  __cxa_free_exception(v32);

  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  _Unwind_Resume(a1);
}

id Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<unsigned char,1>>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (a2)
  {
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = a2[22];
    uint64_t v9 = (void *)a2[21];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = a2[20];
      uint64_t v12 = ((uint64_t)v9 - v11) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v8 - v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      v21[4] = a2 + 22;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v15);
      uint64_t v17 = &v16[16 * v12];
      v21[0] = v16;
      v21[1] = v17;
      void v21[3] = &v16[16 * v18];
      *(void *)uint64_t v17 = v4;
      *((void *)v17 + 1) = v7;
      uint64_t v21[2] = v17 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2 + 20, v21);
      uint64_t v10 = (void *)a2[21];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v21);
    }
    else
    {
      void *v9 = v4;
      v9[1] = v7;
      uint64_t v10 = v9 + 2;
      a2[21] = v9 + 2;
    }
    a2[21] = v10;
    uint64_t v4 = *a3;
  }
  uint64_t v19 = (void *)[*(id *)(*(void *)a1 + 144) newBufferWithBytesNoCopy:*(void *)(v4 + 16) length:(*(int *)(v4 + 8) + 4095) & 0xFFFFFFFFFFFFF000 options:0 deallocator:0];

  return v19;
}

void sub_1926FA3C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

int *Espresso::dropout_augment_lowmem::dropout_augment_lowmem(int *a1, uint64_t *a2, long long *a3, long long *a4)
{
  *a1 = 0;
  uint64_t v7 = (unsigned __int8 *)(a1 + 2);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 2), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *((void *)a1 + 3) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *a2;
  *((void *)a1 + 4) = *a2;
  uint64_t v10 = a2[1];
  *((void *)a1 + 5) = v10;
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = *((void *)a1 + 4);
  }
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  long long v11 = *a3;
  a1[20] = *((_DWORD *)a3 + 4);
  *((_OWORD *)a1 + 4) = v11;
  *(_OWORD *)(a1 + 22) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  uint64_t v100 = (uint64_t *)(a1 + 34);
  *a1 = 0;
  *(_OWORD *)(a1 + 26) = 0u;
  *(_OWORD *)(a1 + 30) = 0u;
  *((void *)a1 + 19) = 0;
  if (*(void *)(v9 + 40) != *(void *)(v9 + 32))
  {
    unint64_t v12 = 0;
    do
    {
      v103.__r_.__value_.__r.__words[0] = v12;
      unint64_t v13 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 96, v12, &v103)[3];
      uint64_t v14 = v13[23];
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = v13[23];
      }
      else {
        uint64_t v15 = *((void *)v13 + 1);
      }
      uint64_t v16 = *((unsigned __int8 *)a1 + 31);
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *((void *)a1 + 2);
      }
      if (v15 == v16)
      {
        if (v17 >= 0) {
          uint64_t v18 = v7;
        }
        else {
          uint64_t v18 = *(unsigned __int8 **)v7;
        }
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v13, v18, *((void *)v13 + 1))) {
            break;
          }
        }
        else
        {
          if (!v13[23]) {
            break;
          }
          while (*v13 == *v18)
          {
            ++v13;
            ++v18;
            if (!--v14) {
              goto LABEL_24;
            }
          }
        }
      }
      unint64_t v12 = *a1 + 1;
      *a1 = v12;
      uint64_t v9 = *((void *)a1 + 4);
    }
    while (v12 < (uint64_t)(*(void *)(v9 + 40) - *(void *)(v9 + 32)) >> 4);
  }
LABEL_24:
  uint64_t v19 = *((void *)a1 + 4);
  if (*a1 == *a1 < (unint64_t)((uint64_t)(*(void *)(v19 + 40) - *(void *)(v19 + 32)) >> 4))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v103);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  int v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19 + 136, v7, (long long **)&v103);
  uint64_t v22 = *((void *)v20 + 5);
  std::vector<std::string>::pointer v21 = (std::__shared_weak_count *)*((void *)v20 + 6);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *(uint64_t **)(*(void *)(*(void *)(*((void *)a1 + 4) + 40) - 16) + 104);
  uint64_t v25 = *v23;
  uint64_t v24 = (std::__shared_weak_count *)v23[1];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v98 = v24;
  int v99 = v21;
  if (*(_DWORD *)(v22 + 20) != 1)
  {
    int v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v108, *(_DWORD *)(v22 + 20));
    int v94 = std::string::insert(&v108, 0, "invalid batch_n ");
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v93, &v103);
    __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v26 = *((void *)a1 + 4);
  LODWORD(v108.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 24))(v22);
  unsigned int v107 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
  Espresso::abstract_blob_container::make(v26 + 16, (int *)&v108, &v107, &v103);
  long long v27 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = 0uLL;
  int v28 = (std::__shared_weak_count *)*((void *)a1 + 12);
  *(_OWORD *)(a1 + 22) = v27;
  if (v28)
  {
    nitro::nitro_function::nitro_function(v28);
    if (v103.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v103.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v29 = *((void *)a1 + 11);
  long long v30 = *(_OWORD *)(v22 + 8);
  uint64_t v106 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v104 = 0u;
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v30;
  v103.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  (*(void (**)(uint64_t, std::string *, uint64_t *))(*(void *)v29 + 16))(v29, &v103, &v101);
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v31 = (char *)operator new(0x20uLL);
  uint64_t v32 = (std::__shared_weak_count *)v31;
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = 0;
  *(void *)uint64_t v31 = &unk_1EE38D510;
  unsigned int v33 = a1[18];
  unsigned int v34 = v33 + ((v33 / 0x7FFFFFFF) | ((v33 / 0x7FFFFFFF) << 31));
  if (v34 <= 1) {
    unsigned int v34 = 1;
  }
  *((_DWORD *)v31 + 6) = v34;
  unint64_t v35 = (unsigned int *)(v31 + 24);
  uint64_t v36 = (std::__shared_weak_count *)*((void *)a1 + 7);
  *((void *)a1 + 6) = v35;
  *((void *)a1 + 7) = v32;
  if (v36)
  {
    nitro::nitro_function::nitro_function(v36);
    unsigned int v33 = a1[18];
    unint64_t v35 = (unsigned int *)*((void *)a1 + 6);
    uint64_t v32 = (std::__shared_weak_count *)*((void *)a1 + 7);
    unint64_t v38 = a1 + 17;
    int v37 = a1[17];
    float v39 = *((float *)a1 + 16);
    if (!v32)
    {
      int v96 = 0;
      char v97 = 1;
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v38 = a1 + 17;
    int v37 = a1[17];
    float v39 = *((float *)a1 + 16);
  }
  char v97 = 0;
  int v96 = v32;
  atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_44:
  int v40 = *(_DWORD *)(v22 + 8);
  int v41 = *(_DWORD *)(v22 + 12);
  int v42 = *(_DWORD *)(v22 + 16);
  uint64_t v43 = *(unsigned int *)(v22 + 20);
  unsigned int v44 = v41 * v40;
  int v45 = v41 * v40 * v42;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v103, v43 * v37 * v45, 1, 1, 1);
  std::string::size_type v46 = v103.__r_.__value_.__r.__words[0];
  uint64_t v47 = *(int *)(v103.__r_.__value_.__r.__words[0] + 8);
  if (v47)
  {
    for (uint64_t i = 0; i != v47; ++i)
      *(unsigned char *)(*(void *)(v46 + 16) + i) = 0;
  }
  if ((int)v43 >= 1)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    if (v44 <= 1) {
      int v51 = 1;
    }
    else {
      int v51 = v44;
    }
    unsigned int v52 = v33 + ((v33 / 0x7FFFFFFF) | ((v33 / 0x7FFFFFFF) << 31));
    if (v52 <= 1) {
      unsigned int v52 = 1;
    }
    uint64_t v53 = v45;
    uint64_t v54 = v37 * (uint64_t)v45;
    do
    {
      *unint64_t v35 = v52;
      if (v37 >= 1)
      {
        uint64_t v55 = 0;
        uint64_t v56 = v49;
        do
        {
          if (v55)
          {
            if (v42 >= 1)
            {
              int v57 = 0;
              LODWORD(v58) = 0;
              std::string::size_type v59 = v103.__r_.__value_.__r.__words[0];
              do
              {
                if (v44)
                {
                  uint64_t v58 = (int)v58;
                  uint64_t v60 = v51;
                  do
                  {
                    unsigned int v61 = 48271 * (*v35 % 0xADC8);
                    unsigned int v62 = 3399 * (*v35 / 0xADC8);
                    BOOL v63 = v61 >= v62;
                    unsigned int v64 = v61 - v62;
                    if (v63) {
                      int v65 = 0;
                    }
                    else {
                      int v65 = 0x7FFFFFFF;
                    }
                    unsigned int v66 = v65 + v64;
                    *unint64_t v35 = v66;
                    *(unsigned char *)(*(void *)(v59 + 16) + v56 + v58++) = (float)((float)((float)(v66 - 1) * 4.6566e-10)
                                                                            + 0.0) <= v39;
                    --v60;
                  }
                  while (v60);
                }
                ++v57;
              }
              while (v57 != v42);
            }
          }
          else if (v42 >= 1)
          {
            int v67 = 0;
            LODWORD(v68) = 0;
            std::string::size_type v69 = v103.__r_.__value_.__r.__words[0];
            do
            {
              if (v44)
              {
                uint64_t v68 = (int)v68;
                uint64_t v70 = v51;
                do
                {
                  *(unsigned char *)(*(void *)(v69 + 16) + v56 + v68++) = 1;
                  --v70;
                }
                while (v70);
              }
              ++v67;
            }
            while (v67 != v42);
          }
          ++v55;
          v56 += v53;
        }
        while (v55 != v37);
      }
      ++v50;
      v49 += v54;
    }
    while (v50 != v43);
  }
  long long v71 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = 0uLL;
  unint64_t v72 = (std::__shared_weak_count *)*((void *)a1 + 14);
  *(_OWORD *)(a1 + 26) = v71;
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  if ((v97 & 1) == 0) {
    nitro::nitro_function::nitro_function(v96);
  }
  unint64_t v73 = a1[17];
  uint64_t v74 = *((void *)a1 + 17);
  uint64_t v75 = *((void *)a1 + 18);
  unint64_t v76 = (v75 - v74) >> 4;
  if (v73 <= v76)
  {
    if (v73 < v76)
    {
      uint64_t v84 = v74 + 16 * v73;
      while (v75 != v84)
      {
        uint64_t v85 = *(std::__shared_weak_count **)(v75 - 8);
        if (v85) {
          nitro::nitro_function::nitro_function(v85);
        }
        v75 -= 16;
      }
      *((void *)a1 + 18) = v84;
    }
  }
  else
  {
    unint64_t v77 = v73 - v76;
    uint64_t v78 = *((void *)a1 + 19);
    if (v73 - v76 <= (v78 - v75) >> 4)
    {
      bzero(*((void **)a1 + 18), 16 * v77);
      *((void *)a1 + 18) = v75 + 16 * v77;
    }
    else
    {
      if ((v73 & 0x80000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      *((void *)&v104 + 1) = a1 + 38;
      uint64_t v79 = v78 - v74;
      if (v79 >> 3 > v73) {
        unint64_t v73 = v79 >> 3;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v80 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v73;
      }
      uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v80);
      int64x2_t v82 = &v81[16 * v76];
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
      v103.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
      *(void *)&long long v104 = &v81[16 * v83];
      bzero(v82, 16 * v77);
      v103.__r_.__value_.__r.__words[2] = (std::string::size_type)&v82[16 * v77];
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v100, &v103);
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v103);
    }
  }
  if (*v38 >= 1)
  {
    uint64_t v86 = 0;
    uint64_t v87 = 8;
    do
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v25 + 56))(&v103, v25);
      uint64_t v88 = *v100;
      long long v89 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v90 = *(std::__shared_weak_count **)(v88 + v87);
      *(_OWORD *)(v88 + 16 * v86) = v89;
      if (v90) {
        nitro::nitro_function::nitro_function(v90);
      }
      if (v103.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v103.__r_.__value_.__l.__size_);
      }
      ++v86;
      v87 += 16;
    }
    while (v86 < *v38);
  }
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (v99) {
    nitro::nitro_function::nitro_function(v99);
  }
  return a1;
}

void sub_1926FAC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, int a11, int a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 105) < 0)
  {
    operator delete(*(void **)(v30 - 128));
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      if (a14) {
        nitro::nitro_function::nitro_function(a14);
      }
      *(void *)(v30 - 128) = a15;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 128));
      uint64_t v32 = *(std::__shared_weak_count **)(v27 + 128);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
      unsigned int v33 = *(std::__shared_weak_count **)(v27 + 112);
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      unsigned int v34 = *(std::__shared_weak_count **)(v27 + 96);
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      unint64_t v35 = *(std::__shared_weak_count **)(v27 + 56);
      if (v35) {
        nitro::nitro_function::nitro_function(v35);
      }
      uint64_t v36 = *(std::__shared_weak_count **)(v27 + 40);
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }
      if (*(char *)(v27 + 31) < 0) {
        operator delete(*a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389A70;
  *((void *)v10 + 3) = &unk_1EE36BF70;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  size_t v11 = a3 * (uint64_t)a2 * a4 * a5;
  unint64_t v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1926FAE58(_Unwind_Exception *a1)
{
  int shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  int shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<unsigned char,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF70;
  if (*(unsigned char *)(a1 + 24))
  {
    long long v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned char,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF70;
  if (*(unsigned char *)(a1 + 24))
  {
    long long v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389A70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::dropout_augment_lowmem::__forward(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(uint64_t **)(*(void *)(*(void *)(*((void *)a1 + 4) + 32) + 16 * *a1) + 104);
  uint64_t v8 = *v6;
  uint64_t v7 = (std::__shared_weak_count *)v6[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(uint64_t **)(*(void *)(*(void *)(*((void *)a1 + 4) + 32) + 16 * *a1) + 104);
  }
  uint64_t v10 = *((void *)a1 + 11);
  uint64_t v9 = *((void *)a1 + 12);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v11 = (std::__shared_weak_count *)v6[1];
  *uint64_t v6 = v10;
  v6[1] = v9;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int v42 = v7;
  Espresso::net::__forward(*((void *)a1 + 4), a2, 0, (*a1 + 1));
  unint64_t v12 = *(void **)(*(void *)(*(void *)(*((void *)a1 + 4) + 32) + 16 * *a1) + 104);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)v12[1];
  *unint64_t v12 = v8;
  v12[1] = v7;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v14 = *((void *)a1 + 4) + 136;
  v54[0] = (long long *)(a1 + 2);
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)a1 + 8, v54);
  int v17 = (_DWORD *)*((void *)v15 + 5);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v15 + 6);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v41 = v16;
  uint64_t v18 = *((void *)a1 + 4);
  unint64_t v48 = *a1 + 1;
  uint64_t v50 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18 + 56, v48, &v48)[3];
  uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18 + 136, v50, (long long **)&v50);
  uint64_t v20 = *((void *)v19 + 6);
  v54[0] = *((long long **)v19 + 5);
  v54[1] = (long long *)v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 4) + 40) - 16) + 104);
  uint64_t v23 = *(int **)v21;
  uint64_t v22 = *(std::__shared_weak_count **)(v21 + 8);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v40 = v22;
  if (a1[17] >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      uint64_t v26 = (std::__shared_weak_count *)*((void *)a1 + 14);
      uint64_t v52 = *((void *)a1 + 13);
      uint64_t v53 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::dropout_multiply_closure::operator()((uint64_t)v19, a2, (std::__shared_weak_count **)a1 + 11, &v52, v17[2] * v25 * v17[3] * v17[4], (uint64_t)v54);
      if (v53) {
        nitro::nitro_function::nitro_function(v53);
      }
      Espresso::net::__forward(*((void *)a1 + 4), a2, (*a1 + 1), 0xFFFFFFFFLL);
      uint64_t v19 = (char *)(*(uint64_t (**)(int *, uint64_t *, uint64_t))(*(void *)v23 + 40))(v23, a2, *((void *)a1 + 17) + v24);
      ++v25;
      v24 += 16;
    }
    while (v25 < a1[17]);
  }
  if (*a2)
  {
    if (v27)
    {
      int v28 = (std::__shared_weak_count *)a2[1];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v27 + 40))(v27);
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v50, v23[2], v23[3], v23[4], a1[17]);
  if (a1[17] >= 1)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    size_t v32 = 4 * v23[3] * v23[2] * v23[4];
    unsigned int v33 = v50;
    do
    {
      memcpy((void *)(*((void *)v33 + 3) + v29), *(const void **)(*(void *)(*((void *)a1 + 17) + v30) + 24), v32);
      ++v31;
      v30 += 16;
      v29 += v32;
    }
    while (v31 < a1[17]);
  }
  (*(void (**)(unint64_t *__return_ptr, int *))(*(void *)v23 + 56))(&v48, v23);
  unint64_t v34 = v48;
  unint64_t v35 = v49;
  *(void *)a3 = v48;
  *(void *)(a3 + 8) = v35;
  (*(void (**)(unint64_t *__return_ptr, int *))(*(void *)v23 + 56))(&v48, v23);
  uint64_t v36 = a1 + 16;
  unint64_t v37 = v48;
  unint64_t v38 = v49;
  *(void *)(a3 + 16) = v48;
  *(void *)(a3 + 24) = v38;
  float v39 = v51;
  long long v46 = *(_OWORD *)v36;
  int v47 = v36[4];
  v45[0] = v50;
  v45[1] = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v44[0] = v34;
  v44[1] = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v43[0] = v37;
  v43[1] = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  combine_dropout_augment_outputs((uint64_t)&v46, (uint64_t)v45, (uint64_t)v44, (uint64_t)v43, 1);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v39)
  {
    nitro::nitro_function::nitro_function(v39);
    nitro::nitro_function::nitro_function(v39);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (v20) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v20);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
}

void sub_1926FB4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t(v12);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::Kernels::crop_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSGraphEngine::Kernels::crop_kernel::~crop_kernel(Espresso::MPSGraphEngine::Kernels::crop_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::tensor_zero_pad_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_tensor_zero_pad_kernel::kernel_type_str(Espresso::generic_tensor_zero_pad_kernel *this)
{
  return "tensor_zero_pad";
}

BOOL Espresso::generic_tensor_zero_pad_kernel::has_dynamic_top_shape(Espresso::generic_tensor_zero_pad_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

uint64_t Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  if (a3[1] - *a3 < 0x81uLL)
  {
    if (a3[4] - a3[3] < 0x41uLL)
    {
      if (*(unsigned char *)(a1 + 280)) {
        return 1;
      }
      uint64_t v4 = a2[1];
      v6[0] = *a2;
      v6[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v8, "[Dispatch::MPSGraph::tensor_zero_pad_kernel] unsupported: nd_mode != 1");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v8, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v6, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      uint64_t v4 = a2[1];
      v7[0] = *a2;
      v7[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v8, "[Dispatch::MPSGraph::tensor_zero_pad_kernel] unsupported: number of outputs > 1");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v8, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v7, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
  }
  else
  {
    uint64_t v4 = a2[1];
    v14[0] = *a2;
    v14[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "[Dispatch::MPSGraph::tensor_zero_pad_kernel] unsupported: number of inputs > 2");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v8, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v15 = (void **)&v12;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)&v11;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v4) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
  }
  return 0;
}

void sub_1926FB88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel::~tensor_zero_pad_kernel(Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284);
}

void Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel::~space_to_depth_kernel(Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::~factory_t(Espresso::generic_factory_t *a1)
{
  Espresso::generic_factory_t::~generic_factory_t(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::generic_serdes_object>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::generic_serdes_object>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D350;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::factory_t<Espresso::SerDes::generic_serdes_object>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::weights_helper_quantization_axis(Espresso::ANECompilerEngine::ane_kernel *this)
{
  return 0;
}

double Espresso::ANECompilerEngine::ane_kernel::weights_helper_weights_shape@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000001;
  return result;
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::get_anec_lowering_hint(Espresso::ANECompilerEngine::ane_kernel *this)
{
  return (uint64_t)this + 136;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::chop_topk_kernel::~chop_topk_kernel(Espresso::ANECompilerEngine::chop_topk_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::chop_topk_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::chop_topk_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::chop_topk_kernel::compile(Espresso::ANECompilerEngine::chop_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::chop_topk_kernel::compile(Espresso::ANECompilerEngine::chop_topk_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  long long v3 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0 || (v7 = v6, (v8 = *((void *)a2 + 1)) == 0)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v133.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  char v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v133.__r_.__value_.__l.__data_, (long long **)&v133);
  uint64_t v11 = *((void *)v9 + 5);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  int v105 = a3;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)&v133)+ 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  if ((Espresso::ANECompilerEngine::is_mix_c((Espresso::ANECompilerEngine *)v13, v14) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v124, "ane.force_generic_topk");
    std::string::basic_string[abi:ne180100]<0>(__p, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)v124, (uint64_t)__p, &v133);
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v15 = v133.__r_.__value_.__l.__size_ == 1 && *v133.__r_.__value_.__l.__data_ == 49;
      operator delete(v133.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v15 = SHIBYTE(v133.__r_.__value_.__r.__words[2]) == 1 && v133.__r_.__value_.__s.__data_[0] == 49;
    }
    if (SBYTE7(v120[0]) < 0) {
      operator delete(__p[0]);
    }
    if ((v124[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v124);
      if (v15) {
        goto LABEL_22;
      }
    }
    else if (v15)
    {
      goto LABEL_22;
    }
    if (*((_DWORD *)this + 70) != -1)
    {
      uint64_t v102 = v10;
      uint64_t v101 = v12;
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v133.__r_.__value_.__l.__data_, (id *)v105);
      uint64_t v16 = v134;
      for (uint64_t i = v135; i != v16; i -= 24)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      uint64_t v18 = v140;
      uint64_t v135 = v16;
      long long v140 = @"TopK";

      long long v104 = objc_opt_new();
      uint64_t v19 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
      [v104 setObject:v19 forKeyedSubscript:@"K"];

      if (*((unsigned char *)this + 292)) {
        uint64_t v20 = @"Min";
      }
      else {
        uint64_t v20 = @"Max";
      }
      [v104 setObject:v20 forKeyedSubscript:@"Type"];
      int v21 = *((_DWORD *)this + 72);
      Espresso::abstract_blob_container::shape(v124, v11);
      int v22 = *(_DWORD *)&v124[20];
      if (*(_DWORD *)&v124[16] == 1) {
        int v23 = 4;
      }
      else {
        int v23 = 5;
      }
      if (*(_DWORD *)&v124[20] == -1) {
        int v22 = v23;
      }
      unint64_t v103 = v22;
      if ((void)v126)
      {
        *((void *)&v126 + 1) = v126;
        operator delete((void *)v126);
      }
      if (v21 >= 0 || *((unsigned char *)this + 284) == 0) {
        int v25 = 0;
      }
      else {
        int v25 = v103;
      }
      unint64_t v26 = (v25 + v21);
      int v99 = (Espresso::ANECompilerEngine *)v26;
      if (*((unsigned char *)this + 284))
      {
        if ((v26 & 0x80000000) == 0 && v26 < v103 && v103 <= 5)
        {
          unsigned int v27 = v103 + ~v26;
          if (v27 <= 4)
          {
            int v28 = @"Height";
            switch(v27)
            {
              case 0u:
                goto LABEL_78;
              case 1u:
                goto LABEL_88;
              case 2u:
                goto LABEL_82;
              case 3u:
                goto LABEL_85;
              case 4u:
                goto LABEL_79;
              default:
                break;
            }
          }
        }
      }
      else if (v103 <= 5 && v26 <= 4)
      {
        int v28 = @"Height";
        switch((int)v26)
        {
          case 0:
LABEL_78:
            int v28 = @"Width";
            goto LABEL_88;
          case 1:
            goto LABEL_88;
          case 2:
LABEL_82:
            if (v103 == 5 && *(unsigned char *)(v8 + 1281)) {
              goto LABEL_84;
            }
            goto LABEL_87;
          case 3:
LABEL_85:
            int v28 = @"Batch";
            if (v103 == 5 && *(unsigned char *)(v8 + 1281)) {
LABEL_87:
            }
              int v28 = @"Channel";
            goto LABEL_88;
          case 4:
LABEL_79:
            if (v103 == 5 && *(unsigned char *)(v8 + 1281)) {
              int v28 = @"Batch";
            }
            else {
LABEL_84:
            }
              int v28 = @"Depth";
LABEL_88:
            [v104 setObject:v28 forKeyedSubscript:@"SortDimension"];
            [v104 setObject:&unk_1EE3AF070 forKeyedSubscript:@"SortIndices"];
            Espresso::abstract_blob_container::shape(v124, v11);
            if ((void)v126)
            {
              *((void *)&v126 + 1) = v126;
              operator delete((void *)v126);
            }
            [v104 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"Indices"];
            objc_storeStrong(v141, v104);
            Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v133);
            long long v121 = 0u;
            *(_OWORD *)std::string __p = 0u;
            memset(v120, 0, sizeof(v120));
            int v122 = 1;
            uint64_t v123 = 0;
            int v41 = *(unsigned __int8 *)(v8 + 1281);
            Espresso::abstract_blob_container::shape(v124, v11);
            int v42 = *(_DWORD *)&v124[20];
            if (*(_DWORD *)&v124[16] == 1) {
              int v43 = 4;
            }
            else {
              int v43 = 5;
            }
            if (*(_DWORD *)&v124[20] == -1) {
              int v42 = v43;
            }
            int v98 = v42;
            if ((void)v126)
            {
              *((void *)&v126 + 1) = v126;
              operator delete((void *)v126);
            }
            unsigned int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
            int v45 = (long long *)*((void *)v105 + 6);
            if (*((char *)v45 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v45, *((void *)v45 + 1));
            }
            else
            {
              long long v46 = *v45;
              v118.__r_.__value_.__r.__words[2] = *((void *)v45 + 2);
              *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v46;
            }
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v8 + 360), &v118))
            {
              unsigned int v47 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(v8 + 352, &v118) + 8);
              if (v47 == -1) {
                unsigned int v44 = 1;
              }
              else {
                unsigned int v44 = v47;
              }
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            uint64_t v100 = a2;
            if (v44 >= 8 || ((0x97u >> v44) & 1) == 0) {
              Espresso::throw_exception_selector<Espresso::generic_error>("TopK kernel: invalid compute path for input.");
            }
            char v97 = (long long *)*(&off_1E5746DC0 + v44);
            uint64_t v115 = 0;
            uint64_t v116 = 0;
            unint64_t v117 = 0;
            unint64_t v48 = (long long *)*((void *)v105 + 7);
            uint64_t v49 = (long long *)*((void *)v105 + 6);
            do
            {
              long long v147 = v49;
              uint64_t v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v49, &v147);
              Espresso::abstract_blob_container::shape(v124, *((void *)v50 + 5));
              int v51 = v116;
              if ((unint64_t)v116 >= v117)
              {
                uint64_t v54 = ((uint64_t)v116 - v115) >> 6;
                unint64_t v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 58) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v56 = v117 - v115;
                if ((uint64_t)(v117 - v115) >> 5 > v55) {
                  unint64_t v55 = v56 >> 5;
                }
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFC0) {
                  unint64_t v57 = 0x3FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v57 = v55;
                }
                *((void *)&v149 + 1) = &v117;
                uint64_t v58 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v57);
                std::string::size_type v59 = &v58[4 * v54];
                long long v147 = v58;
                *(void *)&long long v148 = v59;
                *(void *)&long long v149 = &v58[4 * v60];
                long long v61 = *(_OWORD *)&v124[16];
                uint64_t v62 = v125;
                long long *v59 = *(_OWORD *)v124;
                v59[1] = v61;
                *((void *)v59 + 4) = v62;
                *((void *)v59 + 5) = 0;
                *((void *)v59 + 6) = 0;
                *((void *)v59 + 7) = 0;
                *(long long *)((char *)v59 + 40) = v126;
                *((void *)v59 + 7) = v127;
                long long v126 = 0uLL;
                uint64_t v127 = 0;
                *((void *)&v148 + 1) = v59 + 4;
                std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(&v115, &v147);
                BOOL v63 = v116;
                std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v147);
                uint64_t v116 = v63;
                if ((void)v126)
                {
                  *((void *)&v126 + 1) = v126;
                  operator delete((void *)v126);
                }
              }
              else
              {
                long long v52 = *(_OWORD *)&v124[16];
                uint64_t v53 = v125;
                *uint64_t v116 = *(_OWORD *)v124;
                v51[1] = v52;
                *((void *)v51 + 4) = v53;
                *((void *)v51 + 5) = 0;
                *((void *)v51 + 6) = 0;
                *((void *)v51 + 7) = 0;
                *(_OWORD *)((char *)v51 + 40) = v126;
                *((void *)v51 + 7) = v127;
                long long v126 = 0uLL;
                uint64_t v127 = 0;
                uint64_t v116 = v51 + 4;
              }
              uint64_t v49 = (long long *)((char *)v49 + 24);
            }
            while (v49 != v48);
            uint64_t v64 = v115;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v65 = *(_OWORD *)(v64 + 16);
            uint64_t v66 = *(void *)(v64 + 32);
            v107[0] = *(_OWORD *)v64;
            v107[1] = v65;
            uint64_t v108 = v66;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v111 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v109, *(const void **)(v64 + 40), *(void *)(v64 + 48), (uint64_t)(*(void *)(v64 + 48) - *(void *)(v64 + 40)) >> 2);
            uint64_t v12 = v101;
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v112, (const Espresso::net *)v8, (const Espresso::layer_shape *)v107, 1);
            if (v109)
            {
              uint64_t v110 = v109;
              operator delete(v109);
            }
            nitro::nitro_function::nitro_function(v7);
            uint64_t v67 = v112;
            uint64_t v68 = v113;
            uint64_t v69 = v114;
            id v70 = v13;
            if ((Espresso::ANECompilerEngine::is_mix_c((Espresso::ANECompilerEngine *)v70, v71) & 1) == 0
              && *((_DWORD *)this + 70) == 1
              && *((unsigned char *)this + 294))
            {
              BOOL v72 = 0;
              unint64_t v73 = @"Min";
              if (!*((unsigned char *)this + 292)) {
                unint64_t v73 = @"Max";
              }
              uint64_t v151 = v73;
              unint64_t v74 = (v98 & (*((int *)this + 72) >> 31)) + *((_DWORD *)this + 72);
              if ((int)v74 <= v98 && (v74 & 0x80000000) == 0)
              {
                if (*((unsigned char *)this + 284))
                {
                  if (v74 < v98 && v98 <= 5)
                  {
                    unsigned int v75 = v98 + ~v74;
                    if (v75 <= 4)
                    {
                      unint64_t v76 = @"Height";
                      switch(v75)
                      {
                        case 0u:
                          goto LABEL_209;
                        case 1u:
                          goto LABEL_219;
                        case 2u:
                          goto LABEL_213;
                        case 3u:
                          goto LABEL_216;
                        case 4u:
                          goto LABEL_210;
                        default:
                          break;
                      }
                    }
                  }
                }
                else if (v98 <= 5 && v74 <= 4)
                {
                  unint64_t v76 = @"Height";
                  switch((int)v74)
                  {
                    case 0:
LABEL_209:
                      unint64_t v76 = @"Width";
                      goto LABEL_219;
                    case 1:
                      goto LABEL_219;
                    case 2:
LABEL_213:
                      if (v98 == 5 && v41) {
                        goto LABEL_215;
                      }
                      goto LABEL_218;
                    case 3:
LABEL_216:
                      unint64_t v76 = @"Batch";
                      if (v98 == 5 && v41) {
LABEL_218:
                      }
                        unint64_t v76 = @"Channel";
                      goto LABEL_219;
                    case 4:
LABEL_210:
                      if (v98 == 5 && v41) {
                        unint64_t v76 = @"Batch";
                      }
                      else {
LABEL_215:
                      }
                        unint64_t v76 = @"Depth";
LABEL_219:
                      int v152 = v76;
                      ANECTensorDescInitialize();
                      Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v145, (NSString *)this + 37, v70);
                      v144[2] = 0;
                      v144[3] = 0;
                      *(void *)&long long v95 = (int)v69;
                      *((void *)&v95 + 1) = SHIDWORD(v69);
                      long long v149 = v95;
                      long long v147 = v97;
                      uint64_t v150 = v68;
                      *(void *)&long long v95 = (int)v67;
                      *((void *)&v95 + 1) = SHIDWORD(v67);
                      long long v148 = v95;
                      int v96 = ANECValidateGlobalArgMinMaxLayer();
                      BOOL v72 = v96 == 0;
                      if (v96)
                      {
                        v144[0] = 0;
                        v144[1] = 0;
                        std::string::basic_string[abi:ne180100]<0>(v142, "TopK kernel: Top1 is not valid to be converted to global argminmax.");
                        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v124, (long long *)v142, (uint64_t)__p, 0);
                        Espresso::emit_kernel_validation_warning(v144, (Espresso::base_kernel::validate_for_engine_warning_t *)v124);
                        if (v128) {
                          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v128);
                        }
                        v153[0] = (void **)&v126 + 1;
                        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v153);
                        v153[0] = (void **)&v124[24];
                        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v153);
                        if ((v124[23] & 0x80000000) != 0) {
                          operator delete(*(void **)v124);
                        }
                        if (v143 < 0) {
                          operator delete(v142[0]);
                        }
                      }
                      if (v146) {
                        nitro::nitro_function::nitro_function(v146);
                      }
                      goto LABEL_135;
                    default:
                      break;
                  }
                }
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
              }
            }
            else
            {
              BOOL v72 = 0;
            }
LABEL_135:

            if (*((unsigned char *)this + 294))
            {
              char v77 = !v72;
              if (*((_DWORD *)this + 70) != 1) {
                char v77 = 1;
              }
              if (v77)
              {
                Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v124, (id *)v105);
                uint64_t v80 = *(void *)&v124[24];
                for (uint64_t j = v125; j != v80; j -= 24)
                {
                  if (*(char *)(j - 1) < 0) {
                    operator delete(*(void **)(j - 24));
                  }
                }
                uint64_t v125 = v80;
                std::string::operator=((std::string *)v124, *((const std::string **)v105 + 3));
                uint64_t v88 = v131;
                long long v131 = @"TopK";

                long long v89 = (void *)[v104 mutableCopy];
                [v89 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Indices"];
                objc_storeStrong(v132, v89);
                Espresso::ANECompilerEngine::compiler::add_unit(v100, (const Espresso::ANECompilerEngine::compiler::unit_t *)v124);

                if (v129 < 0) {
                  operator delete(v128);
                }
              }
              else
              {
                Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v124, (id *)v105);
                uint64_t v78 = *(void *)&v124[24];
                for (uint64_t k = v125; k != v78; k -= 24)
                {
                  if (*(char *)(k - 1) < 0) {
                    operator delete(*(void **)(k - 24));
                  }
                }
                uint64_t v125 = v78;
                std::string::operator=((std::string *)v124, *((const std::string **)v105 + 3));
                int64x2_t v82 = v131;
                long long v131 = @"GlobalArgMinMax";

                uint64_t v83 = objc_opt_new();
                uint64_t v84 = v83;
                if (*((unsigned char *)this + 292)) {
                  uint64_t v85 = @"Min";
                }
                else {
                  uint64_t v85 = @"Max";
                }
                [v83 setObject:v85 forKeyedSubscript:@"Type"];
                if (*((unsigned char *)this + 284))
                {
                  if ((v99 & 0x80000000) == 0 && (unint64_t)v99 < v103)
                  {
                    unsigned int v86 = v103 + ~v99;
                    if (v86 <= 4)
                    {
                      uint64_t v87 = @"Height";
                      switch(v86)
                      {
                        case 0u:
                          uint64_t v87 = @"Width";
                          goto LABEL_195;
                        case 1u:
                          goto LABEL_195;
                        case 2u:
                          if (v103 == 5 && *(unsigned char *)(v8 + 1281)) {
                            goto LABEL_191;
                          }
                          goto LABEL_194;
                        case 3u:
                          uint64_t v87 = @"Batch";
                          if (v103 == 5 && *(unsigned char *)(v8 + 1281)) {
LABEL_194:
                          }
                            uint64_t v87 = @"Channel";
                          goto LABEL_195;
                        case 4u:
                          if (v103 == 5 && *(unsigned char *)(v8 + 1281)) {
                            uint64_t v87 = @"Batch";
                          }
                          else {
LABEL_191:
                          }
                            uint64_t v87 = @"Depth";
                          goto LABEL_195;
                        default:
                          break;
                      }
                    }
                  }
                  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
                }
                uint64_t v87 = Espresso::ANECompilerEngine::anec_axis_str_for_cnn_axis(v99, v103, *(unsigned char *)(v8 + 1281) != 0);
LABEL_195:
                [v84 setObject:v87 forKeyedSubscript:@"Dimension"];
                objc_storeStrong(v132, v84);
                Espresso::ANECompilerEngine::compiler::add_unit(v100, (const Espresso::ANECompilerEngine::compiler::unit_t *)v124);

                if (v129 < 0) {
                  operator delete(v128);
                }
              }
              long long v147 = (long long *)((char *)&v126 + 8);
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
              long long v147 = (long long *)&v124[24];
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
              if ((v124[23] & 0x80000000) != 0) {
                operator delete(*(void **)v124);
              }
            }
            *(void *)uint64_t v124 = &v115;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
            if (*((void *)&v121 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v121 + 1));
            }
            *(void *)uint64_t v124 = (char *)v120 + 8;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
            *(void *)uint64_t v124 = __p;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);

            uint64_t v10 = v102;
            if (v138 < 0) {
              operator delete(v137);
            }
            *(void *)uint64_t v124 = v136;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
            *(void *)uint64_t v124 = &v134;
            goto LABEL_204;
          default:
            break;
        }
      }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v133.__r_.__value_.__l.__data_, (id *)v105);
    uint64_t v29 = v134;
    for (uint64_t m = v135; m != v29; m -= 24)
    {
      if (*(char *)(m - 1) < 0) {
        operator delete(*(void **)(m - 24));
      }
    }
    uint64_t v31 = v140;
    uint64_t v135 = v29;
    long long v140 = @"Sort";

    size_t v32 = objc_opt_new();
    unsigned int v33 = v32;
    if (*((unsigned char *)this + 292)) {
      unint64_t v34 = @"Ascending";
    }
    else {
      unint64_t v34 = @"Descending";
    }
    [v32 setObject:v34 forKeyedSubscript:@"Direction"];
    int v35 = *((_DWORD *)this + 72);
    Espresso::abstract_blob_container::shape(v124, v11);
    int v36 = *(_DWORD *)&v124[20];
    if (*(_DWORD *)&v124[16] == 1) {
      int v37 = 4;
    }
    else {
      int v37 = 5;
    }
    if (*(_DWORD *)&v124[20] == -1) {
      int v36 = v37;
    }
    int v38 = v36;
    if ((void)v126)
    {
      *((void *)&v126 + 1) = v126;
      operator delete((void *)v126);
    }
    int v39 = (v38 & (v35 >> 31)) + v35;
    if (v39 >= 0)
    {
      int v40 = @"Height";
      switch(v38 + ~v39)
      {
        case 0:
          int v40 = @"Width";
          goto LABEL_170;
        case 1:
          goto LABEL_170;
        case 2:
          if (v38 == 5 && *(unsigned char *)(v8 + 1281)) {
            goto LABEL_166;
          }
          goto LABEL_169;
        case 3:
          int v40 = @"Batch";
          if (v38 == 5 && *(unsigned char *)(v8 + 1281)) {
LABEL_169:
          }
            int v40 = @"Channel";
          goto LABEL_170;
        case 4:
          if (v38 == 5 && *(unsigned char *)(v8 + 1281)) {
            int v40 = @"Batch";
          }
          else {
LABEL_166:
          }
            int v40 = @"Depth";
LABEL_170:
          [v33 setObject:v40 forKeyedSubscript:@"SortDimension"];
          [v33 setObject:&unk_1EE3AF058 forKeyedSubscript:@"SortIndices"];
          Espresso::abstract_blob_container::shape(v124, v11);
          if ((void)v126)
          {
            *((void *)&v126 + 1) = v126;
            operator delete((void *)v126);
          }
          [v33 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"Indices"];
          objc_storeStrong(v141, v33);
          Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v133);
          if (*((unsigned char *)this + 294))
          {
            uint64_t v90 = a2;
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v124, (id *)v105);
            uint64_t v91 = *(void *)&v124[24];
            for (uint64_t n = v125; n != v91; n -= 24)
            {
              if (*(char *)(n - 1) < 0) {
                operator delete(*(void **)(n - 24));
              }
            }
            uint64_t v125 = v91;
            std::string::operator=((std::string *)v124, *((const std::string **)v105 + 3));
            int v93 = v131;
            long long v131 = @"Sort";

            int v94 = (void *)[v33 mutableCopy];
            [v94 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Indices"];
            objc_storeStrong(v132, v94);
            Espresso::ANECompilerEngine::compiler::add_unit(v90, (const Espresso::ANECompilerEngine::compiler::unit_t *)v124);

            if (v129 < 0) {
              operator delete(v128);
            }
            __p[0] = (char *)&v126 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            __p[0] = &v124[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if ((v124[23] & 0x80000000) != 0) {
              operator delete(*(void **)v124);
            }
          }

          if (v138 < 0) {
            operator delete(v137);
          }
          *(void *)uint64_t v124 = v136;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
          *(void *)uint64_t v124 = &v134;
LABEL_204:
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          goto LABEL_23;
        default:
          break;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
  }
LABEL_22:
  Espresso::ANECompilerEngine::mix_topk_kernel::compile(this, a2, v105);
LABEL_23:

  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}