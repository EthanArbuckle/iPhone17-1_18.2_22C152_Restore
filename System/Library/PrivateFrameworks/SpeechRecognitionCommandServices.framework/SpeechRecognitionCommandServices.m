void sub_23AB422D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB424F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB42564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_23AB43150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23AB43438(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v4, 0x60C4044C4A2DFLL);

  _Unwind_Resume(a1);
}

void sub_23AB43BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _Unwind_Resume(a1);
}

void sub_23AB43F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void sub_23AB441A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CMDPFst *a15)
{
  if (__p) {
    -[CMDPGrammar addAdlibFstWithLabel:outputIndex:]((uint64_t)__p);
  }
  std::unique_ptr<CMDPFst>::reset[abi:ne180100](&a15, 0);
  _Unwind_Resume(a1);
}

void sub_23AB443C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,CMDPFst *a22)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  std::unique_ptr<CMDPFst>::reset[abi:ne180100](&a22, 0);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264DC96D0, MEMORY[0x263F8C060]);
}

void sub_23AB44690(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

CMDPNormalizer *std::unique_ptr<CMDPNormalizer>::reset[abi:ne180100](CMDPNormalizer **a1, CMDPNormalizer *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    CMDPNormalizer::~CMDPNormalizer(result);
    JUMPOUT(0x23ECC24B0);
  }
  return result;
}

CMDPFst *std::unique_ptr<CMDPFst>::reset[abi:ne180100](CMDPFst **a1, CMDPFst *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    CMDPFst::~CMDPFst(result);
    JUMPOUT(0x23ECC24B0);
  }
  return result;
}

void CMDPFst::~CMDPFst(CMDPFst *this)
{
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    v6 = a2;
  }
  else {
    v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__construct_one_at_end[abi:ne180100]<std::string const&,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(v5 + 24) = v7;
  *(void *)(a1 + 8) = v5 + 32;
}

void sub_23AB44BBC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(uint64_t *a1, long long *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  v21 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  v19 = v13;
  v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v19;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  uint64_t v15 = *a3;
  *a3 = 0;
  *(void *)&v12[32 * v5 + 24] = v15;
  v19 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer(v18);
  return v16;
}

void sub_23AB44CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 32;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 + 16) = *(void *)(a3 - 16);
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v10 = *(void *)(a3 - 8);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(v8 + 24) = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100](v4, i - 32);
  }
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__emplace_back_slow_path<char const*&,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(uint64_t *a1, char **a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  v21 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  v17 = v12;
  v18 = &v12[32 * v5];
  v19 = v18;
  v20 = &v12[32 * v11];
  uint64_t v13 = std::string::basic_string[abi:ne180100]<0>(v18, *a2);
  uint64_t v14 = *a3;
  *a3 = 0;
  void v13[3] = v14;
  v19 += 32;
  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer(&v17);
  return v15;
}

void sub_23AB45154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_23AB45770(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB45B88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB45D98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB45EFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB4613C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB463FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB46668(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB47A58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB480D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB48848(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB4D328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_23AB4DA24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB4DD04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB4DF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_23AB4E014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_23AB4E254(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v3, 0x60C4044C4A2DFLL);

  _Unwind_Resume(a1);
}

void sub_23AB4E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::vector<std::vector<std::pair<std::string,std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_23AB4ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_23AB4F1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  a25 = a10;
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unique_ptr<CMDPToken>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_23AB4F3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_23AB4F510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_23AB4F9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  a46 = a11;
  std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);

  _Unwind_Resume(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264DC96D8, MEMORY[0x263F8C068]);
}

void sub_23AB4FC2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<CMDPToken>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x23ECC24B0);
  }
}

void sub_23AB50020(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x1012C408B718000);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<CMDPToken>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<CMDPToken>>,std::reverse_iterator<std::unique_ptr<CMDPToken>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t *v1 = 0;
    if (v3) {
      std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<CMDPToken>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<CMDPToken>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<CMDPToken>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<unsigned int ()(CMDPToken const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::vector<std::pair<std::string,std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::vector<std::vector<std::pair<std::string,std::string>>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<CMDPToken>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<CMDPToken>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        std::default_delete<CMDPToken>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>,std::reverse_iterator<std::vector<std::unique_ptr<CMDPToken>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<CMDPToken>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::unique_ptr<CMDPToken>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>,std::reverse_iterator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<std::unique_ptr<CMDPToken>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

unsigned char *OUTLINED_FUNCTION_0(unsigned char *result, unsigned char *a2)
{
  std::logic_error *result = 0;
  *a2 = 0;
  return result;
}

uint64_t AllValidCommandParameterIdentifiers()
{
  if (AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup != -1) {
    dispatch_once(&AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup, &__block_literal_global_2);
  }
  return AllValidCommandParameterIdentifiers_sValidBuiltInLMIdentifierSet;
}

uint64_t __AllValidCommandParameterIdentifiers_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x263EFF9C0]);
  AllValidCommandParameterIdentifiers_sValidBuiltInLMIdentifierSet = objc_msgSend(v0, "initWithObjects:", kSRCSCommandParameterSwitchableApplication[0], kSRCSCommandParameterRunningApplication[0], kSRCSCommandParameterMenuBarItem[0], kSRCSCommandParameterMenuItem[0], kSRCSCommandParameterWindowItem[0], kSRCSCommandParameterWindowItem2[0], kSRCSCommandParameterModifierKeys[0], kSRCSCommandParameterKeyboardKeyName[0], kSRCSCommandParameterDictation[0], kSRCSCommandParameterDictation2[0], kSRCSCommandParameterOverlayLabel[0], kSRCSCommandParameterOverlayLabel2[0], kSRCSCommandParameterTextSegmentCardinalNumber[0], kSRCSCommandParameterScreenDistanceCardinalNumber[0], kSRCSCommandParameterDeviceName[0], kSRCSCommandParameterNumberZeroThroughOneHundred[0], kSRCSCommandParameterNumberTwoThroughNinetyNine[0],
                                                                       kSRCSCommandParameterNumberTwoThroughNinetyNine2[0],
                                                                       0);
  return MEMORY[0x270F9A758]();
}

BOOL IsValidCommandParameterIdentifier(uint64_t a1)
{
  if (AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup != -1) {
    dispatch_once(&AllValidCommandParameterIdentifiers_staticValidLMIdentifierSetup, &__block_literal_global_2);
  }
  uint64_t v2 = [(id)AllValidCommandParameterIdentifiers_sValidBuiltInLMIdentifierSet member:a1];
  BOOL v3 = v2 != 0;

  return v3;
}

void sub_23AB52E8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB53380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id SRCSLogGeneral()
{
  if (SRCSLogGeneral_onceToken != -1) {
    dispatch_once(&SRCSLogGeneral_onceToken, &__block_literal_global_5);
  }
  id v0 = (void *)SRCSLogGeneral_sLogGeneral;
  return v0;
}

uint64_t __SRCSLogGeneral_block_invoke()
{
  SRCSLogGeneral_sLogGeneral = (uint64_t)os_log_create("com.apple.speech.SpeechRecognitionCommandServices", "General");
  return MEMORY[0x270F9A758]();
}

void sub_23AB55FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_23AB561E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23AB56F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 184), 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t yyparse()
{
  MEMORY[0x270FA5388]();
  int v0 = 0;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v1 = v39;
  unint64_t v2 = 200;
  memset(v39, 0, 512);
  yynerrs = 0;
  yychar = -2;
  value = (void *)*MEMORY[0x263EFFB40];
  BOOL v3 = v40;
  uint64_t v4 = v40;
  uint64_t v5 = v39;
  while (1)
  {
    *(_WORD *)uint64_t v4 = v0;
    if (&v3[2 * v2 - 2] <= v4) {
      break;
    }
LABEL_12:
    if ((0xF4C2uLL >> v0)) {
      goto LABEL_27;
    }
    int v10 = yypact[v0];
    int v11 = yychar;
    if (yychar == -2)
    {
      int v11 = yylex();
      yychar = v11;
    }
    if (v11 <= 0)
    {
      int v12 = 0;
      yychar = 0;
    }
    else
    {
      int v12 = v11 > 0x103 ? 2 : yytranslate[v11];
    }
    uint64_t v13 = (v12 + v10);
    if (v13 > 0x16 || v12 != yycheck[v13])
    {
LABEL_27:
      if (((0xB1DuLL >> v0) & 1) == 0)
      {
        uint64_t v14 = yydefact[v0];
        uint64_t v15 = yyr2[v14];
        switch(v0)
        {
          case 1:
            CommandParseDictionary = CreateCommandParseDictionary();
            if (CommandParseDictionary && *(void *)v5)
            {
              long long v16 = CommandParseDictionary;
              CFDictionaryAddValue(CommandParseDictionary, kSRCSCommandParseDictionaryKeyText[0], *(const void **)v5);
              goto LABEL_56;
            }
            bzero(buffer, 0x1388uLL);
            CFStringRef v26 = @"Nil parameter in '| string'";
            goto LABEL_64;
          case 5:
          case 18:
          case 23:
          case 24:
            v17 = CreateCommandParseDictionary();
            if (v17)
            {
              long long v16 = v17;
              if (*(void *)v5)
              {
                CFRelease(*(CFTypeRef *)v5);
                sResultDictionary = (uint64_t)v16;
                break;
              }
            }
            bzero(buffer, 0x1388uLL);
            CFStringRef v26 = @"Nil parameter in ': spokenCommandStringComponent'";
            goto LABEL_64;
          case 6:
          case 7:
            long long v16 = *(__CFDictionary **)v5;
            break;
          case 12:
            if (!*((void *)v5 - 1) || !*(void *)v5)
            {
              bzero(buffer, 0x1388uLL);
              CFStringRef v26 = @"Nil parameter in '| spokenCommandStringComponent optionalComponent'";
              goto LABEL_64;
            }
            long long v16 = CreateCommandParseDictionary();
            if (v16) {
              goto LABEL_47;
            }
            bzero(buffer, 0x1388uLL);
            CFStringRef v20 = @"Nil dictionary in '| spokenCommandStringComponent optionalComponent'";
            goto LABEL_46;
          case 13:
            if (!*((void *)v5 - 1) || !*(void *)v5)
            {
              bzero(buffer, 0x1388uLL);
              CFStringRef v26 = @"Nil parameter in '| spokenCommandStringComponent stringOrIdentifierComponent'";
              goto LABEL_64;
            }
            long long v16 = CreateCommandParseDictionary();
            if (!v16)
            {
              bzero(buffer, 0x1388uLL);
              CFStringRef v20 = @"Nil dictionary in '| spokenCommandStringComponent stringOrIdentifierComponent'";
LABEL_46:
              CFStringGetCString(v20, buffer, 5000, 0x8000100u);
              yyerror(buffer);
            }
LABEL_47:
            CFRelease(*((CFTypeRef *)v5 - 1));
LABEL_56:
            v24 = *(const void **)v5;
            goto LABEL_57;
          case 14:
            v21 = (__CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v5 - 1), kSRCSCommandParseDictionaryKeyAttributes[0]);
            if (v21)
            {
              CFDictionaryAddValue(v21, kSRCSCommandParseAttributeOptional[0], value);
            }
            else
            {
              bzero(buffer, 0x1388uLL);
              CFStringGetCString(@"Nil attribute in ': '[' spokenCommandStringComponent ']''", buffer, 5000, 0x8000100u);
              yyerror(buffer);
            }
            long long v16 = (__CFDictionary *)*((void *)v5 - 1);
            break;
          case 15:
            v22 = CreateCommandParseDictionary();
            if (!v22 || (v23 = (const void *)*((void *)v5 - 1)) == 0)
            {
              bzero(buffer, 0x1388uLL);
              CFStringRef v26 = @"Nil parameter in '| '{' kParameterToken '}''";
              goto LABEL_64;
            }
            long long v16 = v22;
            CFDictionaryAddValue(v22, kSRCSCommandParseDictionaryKeyIdentifier[0], v23);
            CFDictionaryAddValue(v16, kSRCSCommandParseDictionaryKeyIsBuiltInIdentifier[0], value);
            v24 = (const void *)*((void *)v5 - 1);
LABEL_57:
            CFRelease(v24);
            break;
          case 16:
          case 20:
          case 25:
          case 26:
            CFDictionaryRef v18 = (const __CFDictionary *)*((void *)v5 - 2);
            if (v18 && *(void *)v5)
            {
              v19 = (__CFArray *)CFDictionaryGetValue(v18, kSRCSCommandParseDictionaryKeyChildren[0]);
              if (v19)
              {
                CFArrayAppendValue(v19, *(const void **)v5);
              }
              else
              {
                bzero(buffer, 0x1388uLL);
                CFStringGetCString(@"Nil children in '| spokenCommandList '|' spokenCommandStringComponent'", buffer, 5000, 0x8000100u);
                yyerror(buffer);
              }
              CFRelease(*(CFTypeRef *)v5);
              long long v16 = (__CFDictionary *)*((void *)v5 - 2);
            }
            else
            {
              bzero(buffer, 0x1388uLL);
              CFStringRef v26 = @"Nil parameter in '| spokenCommandList '|' spokenCommandStringComponent'";
LABEL_64:
              CFStringGetCString(v26, buffer, 5000, 0x8000100u);
              yyerror(buffer);
              long long v16 = 0;
            }
            break;
          default:
            long long v16 = (__CFDictionary *)*((void *)v5 + 1 - v15);
            break;
        }
        v27 = (char *)v5 - 8 * v15;
        v4 -= 2 * v15;
        *((void *)v27 + 1) = v16;
        uint64_t v5 = v27 + 8;
        uint64_t v28 = yyr1[v14] - 12;
        uint64_t v29 = (*(__int16 *)v4 + yypgoto[v28]);
        if (v29 <= 0x16 && *(unsigned __int16 *)v4 == (unsigned __int16)yycheck[v29]) {
          int v0 = yytable[v29];
        }
        else {
          int v0 = yydefgoto[v28];
        }
        goto LABEL_73;
      }
LABEL_75:
      ++yynerrs;
      uint64_t v31 = yysyntax_error(0, v0, yychar);
      uint64_t v32 = v31;
      v30 = v41;
      if ((unint64_t)v31 < 0x81)
      {
        unint64_t v35 = 128;
      }
      else
      {
        if (v31 < 0) {
          size_t v33 = -1;
        }
        else {
          size_t v33 = 2 * v31;
        }
        uint64_t v34 = (char *)malloc_type_malloc(v33, 0xDEBF358uLL);
        if (v34) {
          v30 = v34;
        }
        unint64_t v35 = 128;
        if (v34) {
          unint64_t v35 = v33;
        }
      }
      if (v32 - 1 < v35)
      {
        yysyntax_error(v30, v0, yychar);
        yyerror(v30);
LABEL_89:
        uint64_t v36 = 1;
        goto LABEL_90;
      }
      yyerror("syntax error");
      if (!v32) {
        goto LABEL_89;
      }
LABEL_88:
      yyerror("memory exhausted");
      uint64_t v36 = 2;
LABEL_90:
      uint64_t v7 = v3;
      goto LABEL_91;
    }
    if ((0x208440uLL >> (v12 + v10))) {
      goto LABEL_75;
    }
    if (v13 == 2)
    {
      uint64_t v36 = 0;
      v30 = v41;
      goto LABEL_90;
    }
    if (v11 >= 1) {
      yychar = -2;
    }
    int v0 = yytable[v13];
    *((void *)v5 + 1) = yylval;
    uint64_t v5 = (_OWORD *)((char *)v5 + 8);
LABEL_73:
    v4 += 2;
  }
  if (v2 > 0x7CF
    || (2 * v2 >= 0x7D0 ? (unint64_t v2 = 2000) : (v2 *= 2), (v6 = malloc_type_malloc(10 * v2 + 7, 0x11AE56D4uLL)) == 0))
  {
    v30 = v41;
    goto LABEL_88;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (v4 - v3) >> 1;
  uint64_t v9 = v8 + 1;
  memcpy(v6, v3, 2 * (v8 + 1));
  memcpy(&v7[(2 * v2 + 7) & 0xFFFFFFFFFFFFFFF8], v1, 8 * (v8 + 1));
  if (v3 != v40) {
    free(v3);
  }
  if ((uint64_t)v2 > v9)
  {
    uint64_t v4 = &v7[2 * v8];
    uint64_t v5 = &v7[8 * v9 - 8 + ((2 * v2 + 7) & 0xFFFFFFFFFFFFFFF8)];
    BOOL v3 = v7;
    uint64_t v1 = &v7[(2 * v2 + 7) & 0xFFFFFFFFFFFFFFF8];
    goto LABEL_12;
  }
  uint64_t v36 = 1;
  v30 = v41;
LABEL_91:
  if (v7 != v40) {
    free(v7);
  }
  if (v30 != v41) {
    free(v30);
  }
  return v36;
}

__CFDictionary *CreateCommandParseDictionary()
{
  int v0 = MEMORY[0x270FA5388]();
  CFDictionaryRef v2 = v1;
  CFDictionaryRef v4 = v3;
  int v5 = v0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (v8)
    {
      CFMutableDictionaryRef v9 = v8;
      CFDictionaryAddValue(Mutable, kSRCSCommandParseDictionaryKeyAttributes[0], v8);
      CFRelease(v9);
      if (v5) {
        CFDictionaryAddValue(v9, kSRCSCommandParseAttributePath[0], (const void *)*MEMORY[0x263EFFB40]);
      }
    }
    else
    {
      bzero(v24, 0x1388uLL);
      CFStringGetCString(@"Nil attributes for in 'CreateCommandParseDictionary()'", v24, 5000, 0x8000100u);
      yyerror(v24);
    }
    CFMutableArrayRef v10 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
    if (v10)
    {
      int v11 = v10;
      if (v4)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, kSRCSCommandParseDictionaryKeyAttributes[0]);
        if (Value)
        {
          BOOL v13 = CFDictionaryContainsKey(Value, kSRCSCommandParseAttributeOptional[0]) != 0;
          if (!v2) {
            goto LABEL_17;
          }
          goto LABEL_14;
        }
        bzero(v24, 0x1388uLL);
        CFStringGetCString(@"Nil attribute for child 1 in 'CreateCommandParseDictionary()'", v24, 5000, 0x8000100u);
        yyerror(v24);
      }
      BOOL v13 = 0;
      if (!v2) {
        goto LABEL_17;
      }
LABEL_14:
      CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v2, kSRCSCommandParseDictionaryKeyAttributes[0]);
      if (v14)
      {
        BOOL v13 = CFDictionaryContainsKey(v14, kSRCSCommandParseAttributeOptional[0]) != 0;
      }
      else
      {
        bzero(v24, 0x1388uLL);
        CFStringGetCString(@"Nil attribute for child 2 in 'CreateCommandParseDictionary()'", v24, 5000, 0x8000100u);
        yyerror(v24);
      }
LABEL_17:
      if (v4)
      {
        CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(v4, kSRCSCommandParseDictionaryKeyChildren[0]);
        if (v15)
        {
          CFArrayRef v16 = v15;
          uint64_t Count = CFArrayGetCount(v15);
          if (v2) {
            char v18 = v13;
          }
          else {
            char v18 = 1;
          }
          if (Count >= 1 && (v18 & 1) == 0)
          {
            v26.length = Count;
            v26.location = 0;
            CFArrayAppendArray(v11, v16, v26);
            goto LABEL_27;
          }
          CFArrayAppendValue(v11, v4);
          if (!v2)
          {
LABEL_36:
            CFDictionaryAddValue(Mutable, kSRCSCommandParseDictionaryKeyChildren[0], v11);
            CFRelease(v11);
            return Mutable;
          }
LABEL_27:
          CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(v2, kSRCSCommandParseDictionaryKeyChildren[0]);
          if (v19)
          {
            CFArrayRef v20 = v19;
            uint64_t v21 = CFArrayGetCount(v19);
            char v22 = v21 < 1 || v13;
            if (v22)
            {
              CFArrayAppendValue(v11, v2);
            }
            else
            {
              v27.length = v21;
              v27.location = 0;
              CFArrayAppendArray(v11, v20, v27);
            }
          }
          else
          {
            bzero(v24, 0x1388uLL);
            CFStringGetCString(@"Nil children 2 in 'CreateCommandParseDictionary()'", v24, 5000, 0x8000100u);
            yyerror(v24);
          }
          goto LABEL_36;
        }
        bzero(v24, 0x1388uLL);
        CFStringGetCString(@"Nil children 1 in 'CreateCommandParseDictionary()'", v24, 5000, 0x8000100u);
        yyerror(v24);
      }
      if (!v2) {
        goto LABEL_36;
      }
      goto LABEL_27;
    }
    bzero(v24, 0x1388uLL);
    CFStringGetCString(@"Nil children in 'CreateCommandParseDictionary()'", v24, 5000, 0x8000100u);
    yyerror(v24);
  }
  return Mutable;
}

uint64_t yysyntax_error(unsigned char *a1, int a2, unsigned int a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if ((0x10B3DuLL >> a2))
  {
    char v5 = a2;
    int v6 = yypact[a2];
    if (a3 > 0x103) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = yytranslate[a3];
    }
    CFMutableDictionaryRef v8 = yytname[v7];
    uint64_t v9 = yytnamerr(0, v8);
    long long v39 = 0u;
    long long v38 = 0u;
    v37 = v8;
    strcpy(v36, "syntax error, unexpected %s");
    if ((0xF6C2uLL >> v5)) {
      int v10 = -v6;
    }
    else {
      int v10 = 0;
    }
    if (23 - v6 >= 12) {
      int v11 = 12;
    }
    else {
      int v11 = 23 - v6;
    }
    if (v10 < v11)
    {
      int v12 = 0;
      BOOL v13 = &v36[27];
      uint64_t v14 = v10;
      uint64_t v15 = v6;
      uint64_t v16 = v11;
      v17 = ", expecting %s";
      int v18 = 1;
      uint64_t v35 = v9;
      unint64_t v19 = v9;
      while (1)
      {
        if (v14 != 1 && v14 == yycheck[v14 + v15])
        {
          if (v18 == 5)
          {
            v36[27] = 0;
            int v18 = 1;
            unint64_t v19 = v35;
            goto LABEL_27;
          }
          CFArrayRef v20 = yytname[v14];
          (&v37)[v18] = v20;
          uint64_t v21 = yytnamerr(0, v20);
          BOOL v22 = __CFADD__(v21, v19);
          v19 += v21;
          int v23 = v22;
          --v13;
          do
          {
            int v24 = *(unsigned __int8 *)v17++;
            *++BOOL v13 = v24;
          }
          while (v24);
          ++v18;
          v12 |= v23;
          v17 = " or %s";
        }
        if (++v14 == v16) {
          goto LABEL_27;
        }
      }
    }
    int v12 = 0;
    int v18 = 1;
    unint64_t v19 = v9;
LABEL_27:
    uint64_t v25 = 0;
    while (v36[v25++])
      ;
    unint64_t v3 = v19 + v25 - 1;
    if (v12 | (v3 < v19)) {
      return -1;
    }
    if (!a1) {
      return v3;
    }
    int v28 = 0;
    for (uint64_t i = v36; ; i += v33)
    {
      int v30 = *i;
      *a1 = v30;
      if (v30 != 37) {
        break;
      }
      if (i[1] != 115 || v28 >= v18) {
        goto LABEL_41;
      }
      int v34 = v28 + 1;
      uint64_t v32 = yytnamerr((uint64_t)a1, (&v37)[v28]);
      uint64_t v33 = 2;
      int v28 = v34;
LABEL_43:
      a1 += v32;
    }
    if (!v30) {
      return v3;
    }
LABEL_41:
    uint64_t v32 = 1;
    uint64_t v33 = 1;
    goto LABEL_43;
  }
  return 0;
}

CFStringRef yyerror(char *cStr)
{
  sLastErrorLineNumber = 1;
  if (sLastErrorDescriptionString) {
    CFRelease((CFTypeRef)sLastErrorDescriptionString);
  }
  CFStringRef result = CFStringCreateWithCString(0, cStr, 0x8000100u);
  sLastErrorDescriptionString = (uint64_t)result;
  return result;
}

uint64_t CreateMutableDictionaryFromSpokenCommandString(const __CFString *a1, void *a2)
{
  sResultDictionary = 0;
  sCurSpokenCommandStringOffset = 0;
  sSpokenCommandString = (uint64_t)a1;
  sSpokenCommandStringLength = CFStringGetLength(a1);
  sLastErrorLineNumber = 0;
  if (sLastErrorDescriptionString)
  {
    CFRelease((CFTypeRef)sLastErrorDescriptionString);
    sLastErrorDescriptionString = 0;
  }
  yyparse();
  if (a2 && sLastErrorDescriptionString && CFStringGetLength((CFStringRef)sLastErrorDescriptionString) >= 1)
  {
    unint64_t v3 = (const void *)sLastErrorDescriptionString;
    *a2 = sLastErrorDescriptionString;
    CFRetain(v3);
  }
  return sResultDictionary;
}

uint64_t yylex()
{
  if (!sReservedCharacterSet)
  {
    sReservedCharacterSet = (uint64_t)CFCharacterSetCreateMutable(0);
    CFCharacterSetAddCharactersInString((CFMutableCharacterSetRef)sReservedCharacterSet, @"[]{}|");
  }
  if (sCurSpokenCommandStringOffset >= sSpokenCommandStringLength) {
    return 0;
  }
  int CharacterAtIndex = CFStringGetCharacterAtIndex((CFStringRef)sSpokenCommandString, sCurSpokenCommandStringOffset);
  if (!CharacterAtIndex) {
    return 0;
  }
  UniChar v1 = CharacterAtIndex;
  CFIndex v2 = sCurSpokenCommandStringOffset;
  if (CFCharacterSetIsCharacterMember((CFCharacterSetRef)sReservedCharacterSet, CharacterAtIndex))
  {
    ++sCurSpokenCommandStringOffset;
    return (char)v1;
  }
  while (1)
  {
    CFIndex v4 = sCurSpokenCommandStringOffset + 1;
    sCurSpokenCommandStringOffset = v4;
    uint64_t v5 = sSpokenCommandStringLength;
    if (v4 < sSpokenCommandStringLength)
    {
      UniChar v1 = CFStringGetCharacterAtIndex((CFStringRef)sSpokenCommandString, v4);
      CFIndex v4 = sCurSpokenCommandStringOffset;
      uint64_t v5 = sSpokenCommandStringLength;
    }
    if (v4 >= v5) {
      break;
    }
    if (CFCharacterSetIsCharacterMember((CFCharacterSetRef)sReservedCharacterSet, v1))
    {
      CFIndex v4 = sCurSpokenCommandStringOffset;
      break;
    }
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  v10.length = v4 - v2;
  v10.location = v2;
  CFStringRef v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFStringRef)sSpokenCommandString, v10);
  if (!v7) {
    return 0;
  }
  CFStringRef v8 = v7;
  yylval = (uint64_t)CFStringCreateMutable(v6, 0);
  CFStringAppend((CFMutableStringRef)yylval, v8);
  if (IsValidCommandParameterIdentifier((uint64_t)v8)) {
    uint64_t v3 = 258;
  }
  else {
    uint64_t v3 = 259;
  }
  CFRelease(v8);
  if (sLastErrorSymbolString)
  {
    CFRelease((CFTypeRef)sLastErrorSymbolString);
    sLastErrorSymbolString = 0;
  }
  if (yylval) {
    sLastErrorSymbolString = (uint64_t)CFStringCreateCopy(0, (CFStringRef)yylval);
  }
  return v3;
}

uint64_t YYLastErrorLineNumber()
{
  return sLastErrorLineNumber;
}

uint64_t YYLastErrorSymbolString()
{
  return sLastErrorSymbolString;
}

uint64_t yytnamerr(uint64_t a1, unsigned char *a2)
{
  if (*a2 != 34)
  {
LABEL_13:
    uint64_t v10 = 0;
    if (a1)
    {
      do
      {
        int v11 = a2[v10];
        *(unsigned char *)(a1 + v10++) = v11;
      }
      while (v11);
    }
    else
    {
      while (a2[v10++])
        ;
    }
    return v10 - 1;
  }
  uint64_t v2 = 0;
  uint64_t v3 = a2;
  for (i = a2; ; uint64_t v3 = i)
  {
    int v6 = (char)*++i;
    int v5 = v6;
    char v7 = v6;
    if (v6 > 91)
    {
      if (v5 == 92)
      {
        int v9 = v3[2];
        CFStringRef v8 = v3 + 2;
        if (v9 != 92) {
          goto LABEL_13;
        }
        char v7 = 92;
        uint64_t i = v8;
      }
      goto LABEL_10;
    }
    if (v5 == 34) {
      break;
    }
    if (v5 == 39 || v5 == 44) {
      goto LABEL_13;
    }
LABEL_10:
    if (a1) {
      *(unsigned char *)(a1 + v2) = v7;
    }
    ++v2;
  }
  if (a1) {
    *(unsigned char *)(a1 + v2) = 0;
  }
  return v2;
}

void sub_23AB584C8()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v537 = sub_23AC2A560();
  v536 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C6F0;
  v592._rawCFDictionaryRef Value = (void *)v9;
  uint64_t v589 = v9 + 32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AC2C700;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A318);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AC2C710;
  *(void *)(v11 + 32) = 0xD00000000000003ALL;
  *(void *)(v11 + 40) = 0x800000023AC360D0;
  *(void *)(v11 + 48) = 0xD000000000000037;
  *(void *)(v11 + 56) = 0x800000023AC36110;
  *(void *)(v10 + 32) = v11;
  *(unsigned char *)(v10 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A320);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AC2C700;
  *(void *)(v12 + 32) = 0xD000000000000045;
  *(void *)(v12 + 40) = 0x800000023AC36150;
  *(unsigned char *)(v12 + 48) = 0;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23AC2C700;
  *(void *)(v13 + 32) = 0xD000000000000021;
  *(void *)(v13 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v13 + 48) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A328);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v14 + 32) = 84017408;
  *(unsigned char *)(v14 + 36) = 8;
  uint64_t v571 = sub_23AB60324(v14, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v15 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v15 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v16 + 32) = 3;
  uint64_t v17 = sub_23AB60324(v16, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A330);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v18 + 32) = 3840;
  uint64_t v19 = sub_23AB60324(v18, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v20.value._countAndFlagsBits = 0x68507463656C6573;
  v20.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v20, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v21 = sub_23ABB8BA8();
  char v22 = sub_23ABBFBE0();
  uint64_t v23 = sub_23ABBFBE8();
  *(void *)&long long v486 = v15;
  *((void *)&v486 + 1) = v17;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC361D0, v10, v12, v13, v21 & 1, v22 & 1, v571, v589, v486, v23, v19, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23AC2C700;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23AC2C700;
  *(void *)(v25 + 32) = 0xD00000000000003BLL;
  *(void *)(v25 + 40) = 0x800000023AC361F0;
  *(void *)(v24 + 32) = v25;
  *(unsigned char *)(v24 + 40) = 0;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_23AC2C700;
  *(void *)(v26 + 32) = 0xD000000000000046;
  *(void *)(v26 + 40) = 0x800000023AC36230;
  *(unsigned char *)(v26 + 48) = 0;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_23AC2C700;
  *(void *)(v27 + 32) = 0xD000000000000021;
  *(void *)(v27 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v27 + 48) = 0;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v28 + 32) = 84017408;
  *(unsigned char *)(v28 + 36) = 8;
  uint64_t v583 = sub_23AB60324(v28, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v579 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v579 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v29 + 32) = 3;
  uint64_t v30 = sub_23AB60324(v29, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v31 + 32) = 3840;
  uint64_t v32 = sub_23AB60324(v31, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v33.value._countAndFlagsBits = 0x68507463656C6573;
  v33.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v33, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v34 = sub_23ABB8BA8();
  char v35 = sub_23ABBFBE0();
  uint64_t v36 = sub_23ABBFBE8();
  *((void *)&v487 + 1) = v30;
  *(void *)&long long v487 = v579;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC36280, v24, v26, v27, v34 & 1, v35 & 1, v583, (uint64_t)v592._rawValue + 184, v487, v36, v32, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23AC2C700;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23AC2C700;
  *(void *)(v38 + 32) = 0xD00000000000003ALL;
  *(void *)(v38 + 40) = 0x800000023AC362A0;
  *(void *)(v37 + 32) = v38;
  *(unsigned char *)(v37 + 40) = 0;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23AC2C700;
  *(void *)(v39 + 32) = 0xD000000000000045;
  *(void *)(v39 + 40) = 0x800000023AC362E0;
  *(unsigned char *)(v39 + 48) = 0;
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_23AC2C700;
  *(void *)(v40 + 32) = 0xD000000000000021;
  *(void *)(v40 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v40 + 48) = 0;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v41 + 32) = 84017408;
  *(unsigned char *)(v41 + 36) = 8;
  uint64_t v590 = sub_23AB60324(v41, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v586 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v586 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v42 + 32) = 3;
  uint64_t v43 = sub_23AB60324(v42, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v44 + 32) = 3840;
  uint64_t v45 = sub_23AB60324(v44, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v46.value._countAndFlagsBits = 0x68507463656C6573;
  v46.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v46, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v47 = sub_23ABB8BA8();
  char v48 = sub_23ABBFBE0();
  uint64_t v49 = sub_23ABBFBE8();
  *((void *)&v488 + 1) = v43;
  *(void *)&long long v488 = v586;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC36330, v37, v39, v40, v47 & 1, v48 & 1, v590, (uint64_t)v592._rawValue + 336, v488, v49, v45, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_23AC2C700;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_23AC2C730;
  strcpy((char *)(v51 + 32), "Correct that");
  *(unsigned char *)(v51 + 45) = 0;
  *(_WORD *)(v51 + 46) = -5120;
  strcpy((char *)(v51 + 48), "Correct this");
  *(unsigned char *)(v51 + 61) = 0;
  *(_WORD *)(v51 + 62) = -5120;
  *(void *)(v51 + 64) = 0xD000000000000017;
  *(void *)(v51 + 72) = 0x800000023AC36350;
  *(void *)(v50 + 32) = v51;
  *(unsigned char *)(v50 + 40) = 0;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_23AC2C700;
  *(void *)(v52 + 32) = 0xD00000000000003CLL;
  *(void *)(v52 + 40) = 0x800000023AC36370;
  *(unsigned char *)(v52 + 48) = 0;
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_23AC2C700;
  *(void *)(v53 + 32) = 0xD00000000000007ELL;
  *(void *)(v53 + 40) = 0x800000023AC363B0;
  *(unsigned char *)(v53 + 48) = 0;
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v54 + 32) = 134349056;
  uint64_t v558 = sub_23AB60324(v54, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v548 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v548 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v55 + 32) = 1283;
  uint64_t v56 = sub_23AB60324(v55, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v57 + 32) = 16;
  uint64_t v58 = sub_23AB60324(v57, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v59.value._object = (void *)0x800000023AC36450;
  v59.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v59, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v60 = sub_23ABB8BA8();
  char v61 = sub_23ABBFBE0();
  uint64_t v62 = sub_23ABBFBE8();
  *((void *)&v489 + 1) = v56;
  *(void *)&long long v489 = v548;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000015, 0x800000023AC36430, v50, v52, v53, v60 & 1, v61 & 1, v558, (uint64_t)v592._rawValue + 488, v489, v62, v58, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_23AC2C700;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_23AC2C700;
  *(void *)(v64 + 32) = 0xD000000000000028;
  *(void *)(v64 + 40) = 0x800000023AC36470;
  *(void *)(v63 + 32) = v64;
  *(unsigned char *)(v63 + 40) = 0;
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_23AC2C700;
  *(void *)(v65 + 32) = 0xD00000000000004CLL;
  *(void *)(v65 + 40) = 0x800000023AC364A0;
  *(unsigned char *)(v65 + 48) = 0;
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_23AC2C700;
  *(void *)(v66 + 32) = 0xD0000000000000A1;
  *(void *)(v66 + 40) = 0x800000023AC364F0;
  *(unsigned char *)(v66 + 48) = 0;
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v67 + 32) = 134349056;
  uint64_t v559 = sub_23AB60324(v67, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v584 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v584 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v68 + 32) = 1283;
  uint64_t v69 = sub_23AB60324(v68, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v70 + 32) = 3840;
  *(unsigned char *)(v70 + 34) = 32;
  uint64_t v71 = sub_23AB60324(v70, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v72.value._countAndFlagsBits = 0x68507463656C6573;
  v72.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v72, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v73 = sub_23ABB8BA8();
  char v74 = sub_23ABBFBE0();
  uint64_t v75 = sub_23ABBFBE8();
  *((void *)&v490 + 1) = v69;
  *(void *)&long long v490 = v584;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC365A0, v63, v65, v66, v73 & 1, v74 & 1, v559, (uint64_t)v592._rawValue + 640, v490, v75, v71, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_23AC2C700;
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_23AC2C730;
  *(void *)(v77 + 32) = 0x616874206F646E55;
  *(void *)(v77 + 40) = 0xE900000000000074;
  *(void *)(v77 + 48) = 0x696874206F646E55;
  *(void *)(v77 + 56) = 0xE900000000000073;
  strcpy((char *)(v77 + 64), "Scratch that");
  *(unsigned char *)(v77 + 77) = 0;
  *(_WORD *)(v77 + 78) = -5120;
  *(void *)(v76 + 32) = v77;
  *(unsigned char *)(v76 + 40) = 0;
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_23AC2C700;
  *(void *)(v78 + 32) = 0xD000000000000017;
  *(void *)(v78 + 40) = 0x800000023AC365C0;
  *(unsigned char *)(v78 + 48) = 0;
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v79 + 32) = 84017408;
  *(unsigned char *)(v79 + 36) = 8;
  uint64_t v549 = sub_23AB60324(v79, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v542 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v542 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v80 + 32) = 3;
  uint64_t v81 = sub_23AB60324(v80, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v82.value._object = (void *)0x800000023AC365E0;
  v82.value._countAndFlagsBits = 0xD000000000000012;
  v83.value._countAndFlagsBits = 0x6E556D6574737973;
  v83.value._object = (void *)0xEA00000000006F64;
  Action.init(_:mac:)(v82, v83);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v84 = sub_23ABBFBD4();
  char v85 = sub_23ABB8BA8();
  char v86 = sub_23ABBFBE0();
  uint64_t v87 = sub_23ABBFBE8();
  uint64_t v88 = sub_23ABBFBE8();
  *((void *)&v491 + 1) = v81;
  *(void *)&long long v491 = v542;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x552E6D6574737953, 0xEB000000006F646ELL, v76, v78, v84, v85 & 1, v86 & 1, v549, (uint64_t)v592._rawValue + 792, v491, v87, v88, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_23AC2C700;
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_23AC2C710;
  *(void *)(v90 + 32) = 0x616874206F646552;
  *(void *)(v90 + 40) = 0xE900000000000074;
  *(void *)(v90 + 48) = 0x696874206F646552;
  *(void *)(v90 + 56) = 0xE900000000000073;
  *(void *)(v89 + 32) = v90;
  *(unsigned char *)(v89 + 40) = 0;
  uint64_t v91 = swift_allocObject();
  *(_OWORD *)(v91 + 16) = xmmword_23AC2C700;
  *(void *)(v91 + 32) = 0xD000000000000016;
  *(void *)(v91 + 40) = 0x800000023AC36600;
  *(unsigned char *)(v91 + 48) = 0;
  uint64_t v92 = swift_allocObject();
  *(_OWORD *)(v92 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v92 + 32) = 84017408;
  *(unsigned char *)(v92 + 36) = 8;
  uint64_t v550 = sub_23AB60324(v92, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v543 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v543 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v93 + 32) = 3;
  uint64_t v94 = sub_23AB60324(v93, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v95.value._object = (void *)0x800000023AC36620;
  v95.value._countAndFlagsBits = 0xD000000000000012;
  v96.value._countAndFlagsBits = 0x65526D6574737973;
  v96.value._object = (void *)0xEA00000000006F64;
  Action.init(_:mac:)(v95, v96);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v97 = sub_23ABBFBD4();
  char v98 = sub_23ABB8BA8();
  char v99 = sub_23ABBFBE0();
  uint64_t v100 = sub_23ABBFBE8();
  uint64_t v101 = sub_23ABBFBE8();
  *((void *)&v492 + 1) = v94;
  *(void *)&long long v492 = v543;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x522E6D6574737953, 0xEB000000006F6465, v89, v91, v97, v98 & 1, v99 & 1, v550, (uint64_t)v592._rawValue + 944, v492, v100, v101, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = xmmword_23AC2C700;
  uint64_t v103 = swift_allocObject();
  *(_OWORD *)(v103 + 16) = xmmword_23AC2C730;
  *(void *)(v103 + 32) = 0x7461687420747543;
  *(void *)(v103 + 40) = 0xE800000000000000;
  *(void *)(v103 + 48) = 0x7369687420747543;
  *(void *)(v103 + 56) = 0xE800000000000000;
  *(void *)(v103 + 64) = 0xD000000000000013;
  *(void *)(v103 + 72) = 0x800000023AC36640;
  *(void *)(v102 + 32) = v103;
  *(unsigned char *)(v102 + 40) = 0;
  uint64_t v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_23AC2C710;
  *(void *)(v104 + 32) = 0xD00000000000003DLL;
  *(void *)(v104 + 40) = 0x800000023AC36660;
  *(unsigned char *)(v104 + 48) = 0;
  *(void *)(v104 + 56) = 0xD00000000000003CLL;
  *(void *)(v104 + 64) = 0x800000023AC366A0;
  *(unsigned char *)(v104 + 72) = 1;
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v105 + 32) = 84017408;
  *(unsigned char *)(v105 + 36) = 8;
  uint64_t v562 = sub_23AB60324(v105, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v544 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v544 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v106 = swift_allocObject();
  *(_OWORD *)(v106 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v106 + 32) = 3;
  uint64_t v107 = sub_23AB60324(v106, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v108.value._countAndFlagsBits = 0x616F626574736170;
  v108.value._object = (void *)0xEE003A7475436472;
  v109.value._countAndFlagsBits = 0x75436D6574737973;
  v109.value._object = (void *)0xE900000000000074;
  Action.init(_:mac:)(v108, v109);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v110 = sub_23ABBFBD4();
  char v111 = sub_23ABB8BA8();
  char v112 = sub_23ABBFBE0();
  uint64_t v113 = sub_23ABBFBE8();
  uint64_t v114 = sub_23ABBFBE8();
  *((void *)&v493 + 1) = v107;
  *(void *)&long long v493 = v544;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x432E6D6574737953, 0xEA00000000007475, v102, v104, v110, v111 & 1, v112 & 1, v562, (uint64_t)v592._rawValue + 1096, v493, v113, v114, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v115 = swift_allocObject();
  *(_OWORD *)(v115 + 16) = xmmword_23AC2C700;
  uint64_t v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = xmmword_23AC2C730;
  *(void *)(v116 + 32) = 0x6168742079706F43;
  *(void *)(v116 + 40) = 0xE900000000000074;
  *(void *)(v116 + 48) = 0x6968742079706F43;
  *(void *)(v116 + 56) = 0xE900000000000073;
  *(void *)(v116 + 64) = 0xD000000000000014;
  *(void *)(v116 + 72) = 0x800000023AC366E0;
  *(void *)(v115 + 32) = v116;
  *(unsigned char *)(v115 + 40) = 0;
  uint64_t v117 = swift_allocObject();
  *(_OWORD *)(v117 + 16) = xmmword_23AC2C710;
  *(void *)(v117 + 32) = 0xD00000000000002DLL;
  *(void *)(v117 + 40) = 0x800000023AC36700;
  *(unsigned char *)(v117 + 48) = 0;
  *(void *)(v117 + 56) = 0xD00000000000002CLL;
  *(void *)(v117 + 64) = 0x800000023AC36730;
  *(unsigned char *)(v117 + 72) = 1;
  uint64_t v118 = swift_allocObject();
  *(_OWORD *)(v118 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v118 + 32) = 84017408;
  *(unsigned char *)(v118 + 36) = 8;
  uint64_t v538 = sub_23AB60324(v118, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v535 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v535 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v119 + 32) = 3;
  uint64_t v120 = sub_23AB60324(v119, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v121.value._object = (void *)0xEA00000000007970;
  v122.value._countAndFlagsBits = 0x616F626574736170;
  v122.value._object = (void *)0xEF3A79706F436472;
  v121.value._countAndFlagsBits = 0x6F436D6574737973;
  Action.init(_:mac:)(v122, v121);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v123 = sub_23ABBFBD4();
  char v124 = sub_23ABB8BA8();
  char v125 = sub_23ABBFBE0();
  uint64_t v126 = sub_23ABBFBE8();
  uint64_t v127 = sub_23ABBFBE8();
  *((void *)&v494 + 1) = v120;
  *(void *)&long long v494 = v535;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x432E6D6574737953, 0xEB0000000079706FLL, v115, v117, v123, v124 & 1, v125 & 1, v538, (uint64_t)v592._rawValue + 1248, v494, v126, v127, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v128 = swift_allocObject();
  *(_OWORD *)(v128 + 16) = xmmword_23AC2C700;
  uint64_t v129 = swift_allocObject();
  *(_OWORD *)(v129 + 16) = xmmword_23AC2C730;
  *(void *)(v129 + 32) = 0x6874206574736150;
  *(void *)(v129 + 40) = 0xEA00000000007461;
  *(void *)(v129 + 48) = 0x6874206574736150;
  *(void *)(v129 + 56) = 0xEA00000000007369;
  *(void *)(v129 + 64) = 0xD00000000000001CLL;
  *(void *)(v129 + 72) = 0x800000023AC36760;
  *(void *)(v128 + 32) = v129;
  *(unsigned char *)(v128 + 40) = 0;
  uint64_t v130 = swift_allocObject();
  *(_OWORD *)(v130 + 16) = xmmword_23AC2C710;
  *(void *)(v130 + 32) = 0xD00000000000005DLL;
  *(void *)(v130 + 40) = 0x800000023AC36780;
  *(unsigned char *)(v130 + 48) = 0;
  *(void *)(v130 + 56) = 0xD000000000000060;
  *(void *)(v130 + 64) = 0x800000023AC367E0;
  *(unsigned char *)(v130 + 72) = 1;
  uint64_t v131 = swift_allocObject();
  *(_OWORD *)(v131 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v131 + 32) = 84017408;
  *(unsigned char *)(v131 + 36) = 8;
  uint64_t v539 = sub_23AB60324(v131, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v132 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v132 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v133 = swift_allocObject();
  *(_OWORD *)(v133 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v133 + 32) = 3;
  uint64_t v134 = sub_23AB60324(v133, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v135.value._countAndFlagsBits = 0xD000000000000010;
  v135.value._object = (void *)0x800000023AC36850;
  v136.value._countAndFlagsBits = 0x61506D6574737973;
  v136.value._object = (void *)0xEB00000000657473;
  Action.init(_:mac:)(v135, v136);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v137 = sub_23ABBFBD4();
  char v138 = sub_23ABB8BA8();
  char v139 = sub_23ABBFBE0();
  uint64_t v140 = sub_23ABBFBE8();
  uint64_t v141 = sub_23ABBFBE8();
  *((void *)&v495 + 1) = v134;
  *(void *)&long long v495 = v132;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x502E6D6574737953, 0xEC00000065747361, v128, v130, v137, v138 & 1, v139 & 1, v539, (uint64_t)v592._rawValue + 1400, v495, v140, v141, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v142 = swift_allocObject();
  *(_OWORD *)(v142 + 16) = xmmword_23AC2C700;
  uint64_t v143 = swift_allocObject();
  *(_OWORD *)(v143 + 16) = xmmword_23AC2C750;
  *(void *)(v143 + 32) = 0x696C617469706143;
  *(void *)(v143 + 40) = 0xEF7461687420657ALL;
  *(void *)(v143 + 48) = 0x696C617469706143;
  *(void *)(v143 + 56) = 0xEF7369687420657ALL;
  *(void *)(v143 + 64) = 0xD00000000000001ALL;
  *(void *)(v143 + 72) = 0x800000023AC36870;
  *(void *)(v143 + 80) = 0x7461687420706143;
  *(void *)(v143 + 88) = 0xE800000000000000;
  *(void *)(v143 + 96) = 0x7369687420706143;
  *(void *)(v143 + 104) = 0xE800000000000000;
  *(void *)(v143 + 112) = 0xD000000000000013;
  *(void *)(v143 + 120) = 0x800000023AC36890;
  *(void *)(v142 + 32) = v143;
  *(unsigned char *)(v142 + 40) = 0;
  uint64_t v144 = swift_allocObject();
  *(_OWORD *)(v144 + 16) = xmmword_23AC2C700;
  *(void *)(v144 + 32) = 0xD00000000000002ALL;
  *(void *)(v144 + 40) = 0x800000023AC368B0;
  *(unsigned char *)(v144 + 48) = 0;
  uint64_t v145 = swift_allocObject();
  *(_OWORD *)(v145 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v145 + 32) = 84017408;
  *(unsigned char *)(v145 + 36) = 8;
  uint64_t v545 = sub_23AB60324(v145, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v529 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v529 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v146 = swift_allocObject();
  *(_OWORD *)(v146 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v146 + 32) = 3;
  uint64_t v147 = sub_23AB60324(v146, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v148 = swift_allocObject();
  *(_OWORD *)(v148 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v148 + 32) = 15;
  uint64_t v149 = sub_23AB60324(v148, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v150.value._countAndFlagsBits = 0x726F46796C707061;
  v150.value._object = (void *)0xEC0000003A74616DLL;
  Action.init(_:mac:)(v150, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v151 = sub_23ABBFBD4();
  char v152 = sub_23ABB8BA8();
  char v153 = sub_23ABBFBE0();
  uint64_t v154 = sub_23ABBFBE8();
  *((void *)&v496 + 1) = v147;
  *(void *)&long long v496 = v529;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC368E0, v142, v144, v151, v152 & 1, v153 & 1, v545, (uint64_t)v592._rawValue + 1552, v496, v154, v149, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v155 = swift_allocObject();
  *(_OWORD *)(v155 + 16) = xmmword_23AC2C700;
  uint64_t v156 = swift_allocObject();
  *(_OWORD *)(v156 + 16) = xmmword_23AC2C700;
  *(void *)(v156 + 32) = 0xD000000000000020;
  *(void *)(v156 + 40) = 0x800000023AC36900;
  *(void *)(v155 + 32) = v156;
  *(unsigned char *)(v155 + 40) = 0;
  uint64_t v157 = swift_allocObject();
  *(_OWORD *)(v157 + 16) = xmmword_23AC2C700;
  *(void *)(v157 + 32) = 0xD000000000000047;
  *(void *)(v157 + 40) = 0x800000023AC36930;
  *(unsigned char *)(v157 + 48) = 0;
  uint64_t v158 = swift_allocObject();
  *(_OWORD *)(v158 + 16) = xmmword_23AC2C700;
  *(void *)(v158 + 32) = 0xD000000000000021;
  *(void *)(v158 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v158 + 48) = 0;
  uint64_t v159 = swift_allocObject();
  *(_OWORD *)(v159 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v159 + 32) = 84017408;
  *(unsigned char *)(v159 + 36) = 8;
  uint64_t v551 = sub_23AB60324(v159, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v530 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v530 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v160 = swift_allocObject();
  *(_OWORD *)(v160 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v160 + 32) = 3;
  uint64_t v161 = sub_23AB60324(v160, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v162 = swift_allocObject();
  *(_OWORD *)(v162 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v162 + 32) = 3840;
  uint64_t v163 = sub_23AB60324(v162, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v164.value._countAndFlagsBits = 0x68507463656C6573;
  v164.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v164, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v165 = sub_23ABB8BA8();
  char v166 = sub_23ABBFBE0();
  uint64_t v167 = sub_23ABBFBE8();
  *((void *)&v497 + 1) = v161;
  *(void *)&long long v497 = v530;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000015, 0x800000023AC36980, v155, v157, v158, v165 & 1, v166 & 1, v551, (uint64_t)v592._rawValue + 1704, v497, v167, v163, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v168 = swift_allocObject();
  *(_OWORD *)(v168 + 16) = xmmword_23AC2C700;
  uint64_t v169 = swift_allocObject();
  *(_OWORD *)(v169 + 16) = xmmword_23AC2C730;
  strcpy((char *)(v169 + 32), "Lowercase that");
  *(unsigned char *)(v169 + 47) = -18;
  strcpy((char *)(v169 + 48), "Lowercase this");
  *(unsigned char *)(v169 + 63) = -18;
  *(void *)(v169 + 64) = 0xD000000000000019;
  *(void *)(v169 + 72) = 0x800000023AC369A0;
  *(void *)(v168 + 32) = v169;
  *(unsigned char *)(v168 + 40) = 0;
  uint64_t v170 = swift_allocObject();
  *(_OWORD *)(v170 + 16) = xmmword_23AC2C700;
  *(void *)(v170 + 32) = 0xD000000000000026;
  *(void *)(v170 + 40) = 0x800000023AC369C0;
  *(unsigned char *)(v170 + 48) = 0;
  uint64_t v171 = swift_allocObject();
  *(_OWORD *)(v171 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v171 + 32) = 84017408;
  *(unsigned char *)(v171 + 36) = 8;
  uint64_t v585 = sub_23AB60324(v171, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v524 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v524 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v172 = swift_allocObject();
  *(_OWORD *)(v172 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v172 + 32) = 3;
  uint64_t v173 = sub_23AB60324(v172, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v174 = swift_allocObject();
  *(_OWORD *)(v174 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v174 + 32) = 15;
  uint64_t v175 = sub_23AB60324(v174, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v176.value._countAndFlagsBits = 0x726F46796C707061;
  v176.value._object = (void *)0xEC0000003A74616DLL;
  Action.init(_:mac:)(v176, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v177 = sub_23ABBFBD4();
  char v178 = sub_23ABB8BA8();
  char v179 = sub_23ABBFBE0();
  uint64_t v180 = sub_23ABBFBE8();
  *((void *)&v498 + 1) = v173;
  *(void *)&long long v498 = v524;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC369F0, v168, v170, v177, v178 & 1, v179 & 1, v585, (uint64_t)v592._rawValue + 1856, v498, v180, v175, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v181 = swift_allocObject();
  *(_OWORD *)(v181 + 16) = xmmword_23AC2C700;
  uint64_t v182 = swift_allocObject();
  *(_OWORD *)(v182 + 16) = xmmword_23AC2C700;
  *(void *)(v182 + 32) = 0xD00000000000001FLL;
  *(void *)(v182 + 40) = 0x800000023AC36A10;
  *(void *)(v181 + 32) = v182;
  *(unsigned char *)(v181 + 40) = 0;
  uint64_t v183 = swift_allocObject();
  *(_OWORD *)(v183 + 16) = xmmword_23AC2C700;
  *(void *)(v183 + 32) = 0xD000000000000046;
  *(void *)(v183 + 40) = 0x800000023AC36A30;
  *(unsigned char *)(v183 + 48) = 0;
  uint64_t v184 = swift_allocObject();
  *(_OWORD *)(v184 + 16) = xmmword_23AC2C700;
  *(void *)(v184 + 32) = 0xD000000000000021;
  *(void *)(v184 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v184 + 48) = 0;
  uint64_t v185 = swift_allocObject();
  *(_OWORD *)(v185 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v185 + 32) = 84017408;
  *(unsigned char *)(v185 + 36) = 8;
  uint64_t v525 = sub_23AB60324(v185, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v522 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v522 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v186 = swift_allocObject();
  *(_OWORD *)(v186 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v186 + 32) = 3;
  uint64_t v187 = sub_23AB60324(v186, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v188 = swift_allocObject();
  *(_OWORD *)(v188 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v188 + 32) = 3840;
  uint64_t v189 = sub_23AB60324(v188, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v190.value._countAndFlagsBits = 0x68507463656C6573;
  v190.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v190, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v191 = sub_23ABB8BA8();
  char v192 = sub_23ABBFBE0();
  uint64_t v193 = sub_23ABBFBE8();
  *((void *)&v499 + 1) = v187;
  *(void *)&long long v499 = v522;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC36A80, v181, v183, v184, v191 & 1, v192 & 1, v525, (uint64_t)v592._rawValue + 2008, v499, v193, v189, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v194 = swift_allocObject();
  *(_OWORD *)(v194 + 16) = xmmword_23AC2C700;
  uint64_t v195 = swift_allocObject();
  *(_OWORD *)(v195 + 16) = xmmword_23AC2C730;
  strcpy((char *)(v195 + 32), "Uppercase that");
  *(unsigned char *)(v195 + 47) = -18;
  strcpy((char *)(v195 + 48), "Uppercase this");
  *(unsigned char *)(v195 + 63) = -18;
  *(void *)(v195 + 64) = 0xD000000000000019;
  *(void *)(v195 + 72) = 0x800000023AC36AA0;
  *(void *)(v194 + 32) = v195;
  *(unsigned char *)(v194 + 40) = 0;
  uint64_t v196 = swift_allocObject();
  *(_OWORD *)(v196 + 16) = xmmword_23AC2C700;
  *(void *)(v196 + 32) = 0xD000000000000026;
  *(void *)(v196 + 40) = 0x800000023AC36AC0;
  *(unsigned char *)(v196 + 48) = 0;
  uint64_t v197 = swift_allocObject();
  *(_OWORD *)(v197 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v197 + 32) = 84017408;
  *(unsigned char *)(v197 + 36) = 8;
  uint64_t v526 = sub_23AB60324(v197, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v523 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v523 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v198 = swift_allocObject();
  *(_OWORD *)(v198 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v198 + 32) = 3;
  uint64_t v199 = sub_23AB60324(v198, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v200 = swift_allocObject();
  *(_OWORD *)(v200 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v200 + 32) = 15;
  uint64_t v201 = sub_23AB60324(v200, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v202.value._countAndFlagsBits = 0x726F46796C707061;
  v202.value._object = (void *)0xEC0000003A74616DLL;
  Action.init(_:mac:)(v202, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v203 = sub_23ABBFBD4();
  char v204 = sub_23ABB8BA8();
  char v205 = sub_23ABBFBE0();
  uint64_t v206 = sub_23ABBFBE8();
  *((void *)&v500 + 1) = v199;
  *(void *)&long long v500 = v523;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC36AF0, v194, v196, v203, v204 & 1, v205 & 1, v526, (uint64_t)v592._rawValue + 2160, v500, v206, v201, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v207 = swift_allocObject();
  *(_OWORD *)(v207 + 16) = xmmword_23AC2C700;
  uint64_t v208 = swift_allocObject();
  *(_OWORD *)(v208 + 16) = xmmword_23AC2C700;
  *(void *)(v208 + 32) = 0xD00000000000001FLL;
  *(void *)(v208 + 40) = 0x800000023AC36B10;
  *(void *)(v207 + 32) = v208;
  *(unsigned char *)(v207 + 40) = 0;
  uint64_t v209 = swift_allocObject();
  *(_OWORD *)(v209 + 16) = xmmword_23AC2C700;
  *(void *)(v209 + 32) = 0xD00000000000003DLL;
  *(void *)(v209 + 40) = 0x800000023AC36B30;
  *(unsigned char *)(v209 + 48) = 0;
  uint64_t v210 = swift_allocObject();
  *(_OWORD *)(v210 + 16) = xmmword_23AC2C700;
  *(void *)(v210 + 32) = 0xD000000000000021;
  *(void *)(v210 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v210 + 48) = 0;
  uint64_t v211 = swift_allocObject();
  *(_OWORD *)(v211 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v211 + 32) = 84017408;
  *(unsigned char *)(v211 + 36) = 8;
  uint64_t v531 = sub_23AB60324(v211, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v527 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v527 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v212 = swift_allocObject();
  *(_OWORD *)(v212 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v212 + 32) = 3;
  uint64_t v213 = sub_23AB60324(v212, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v214 = swift_allocObject();
  *(_OWORD *)(v214 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v214 + 32) = 3840;
  uint64_t v215 = sub_23AB60324(v214, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v216.value._countAndFlagsBits = 0x68507463656C6573;
  v216.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v216, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v217 = sub_23ABB8BA8();
  char v218 = sub_23ABBFBE0();
  uint64_t v219 = sub_23ABBFBE8();
  *((void *)&v501 + 1) = v213;
  *(void *)&long long v501 = v527;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC36B70, v207, v209, v210, v217 & 1, v218 & 1, v531, (uint64_t)v592._rawValue + 2312, v501, v219, v215, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v220 = swift_allocObject();
  *(_OWORD *)(v220 + 16) = xmmword_23AC2C700;
  uint64_t v221 = swift_allocObject();
  *(_OWORD *)(v221 + 16) = xmmword_23AC2C730;
  *(void *)(v221 + 32) = 0x61687420646C6F42;
  *(void *)(v221 + 40) = 0xE900000000000074;
  *(void *)(v221 + 48) = 0x69687420646C6F42;
  *(void *)(v221 + 56) = 0xE900000000000073;
  *(void *)(v221 + 64) = 0xD000000000000014;
  *(void *)(v221 + 72) = 0x800000023AC36B90;
  *(void *)(v220 + 32) = v221;
  *(unsigned char *)(v220 + 40) = 0;
  uint64_t v222 = swift_allocObject();
  *(_OWORD *)(v222 + 16) = xmmword_23AC2C700;
  *(void *)(v222 + 32) = 0xD00000000000001CLL;
  *(void *)(v222 + 40) = 0x800000023AC36BB0;
  *(unsigned char *)(v222 + 48) = 0;
  uint64_t v223 = swift_allocObject();
  *(_OWORD *)(v223 + 16) = xmmword_23AC2C700;
  *(void *)(v223 + 32) = 0xD000000000000038;
  *(void *)(v223 + 40) = 0x800000023AC36BD0;
  *(unsigned char *)(v223 + 48) = 0;
  uint64_t v224 = swift_allocObject();
  *(_OWORD *)(v224 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v224 + 32) = 84017408;
  uint64_t v560 = sub_23AB60324(v224, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v532 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v532 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v225 = swift_allocObject();
  *(_OWORD *)(v225 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v225 + 32) = 2051;
  uint64_t v226 = sub_23AB60324(v225, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v227 = swift_allocObject();
  *(_OWORD *)(v227 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v227 + 32) = 15;
  uint64_t v228 = sub_23AB60324(v227, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v229.value._countAndFlagsBits = 0x726F46796C707061;
  v229.value._object = (void *)0xEC0000003A74616DLL;
  Action.init(_:mac:)(v229, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v230 = sub_23ABB8BA8();
  char v231 = sub_23ABBFBE0();
  uint64_t v232 = sub_23ABBFBE8();
  *((void *)&v502 + 1) = v226;
  *(void *)&long long v502 = v532;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x726F462E74786554, 0xEF646C6F4274616DLL, v220, v222, v223, v230 & 1, v231 & 1, v560, (uint64_t)v592._rawValue + 2464, v502, v232, v228, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v233 = swift_allocObject();
  *(_OWORD *)(v233 + 16) = xmmword_23AC2C700;
  uint64_t v234 = swift_allocObject();
  *(_OWORD *)(v234 + 16) = xmmword_23AC2C700;
  *(void *)(v234 + 32) = 0xD00000000000001ALL;
  *(void *)(v234 + 40) = 0x800000023AC36C10;
  *(void *)(v233 + 32) = v234;
  *(unsigned char *)(v233 + 40) = 0;
  uint64_t v235 = swift_allocObject();
  *(_OWORD *)(v235 + 16) = xmmword_23AC2C700;
  *(void *)(v235 + 32) = 0xD000000000000033;
  *(void *)(v235 + 40) = 0x800000023AC36C30;
  *(unsigned char *)(v235 + 48) = 0;
  uint64_t v236 = swift_allocObject();
  *(_OWORD *)(v236 + 16) = xmmword_23AC2C700;
  *(void *)(v236 + 32) = 0xD00000000000005BLL;
  *(void *)(v236 + 40) = 0x800000023AC36C70;
  *(unsigned char *)(v236 + 48) = 0;
  uint64_t v237 = swift_allocObject();
  *(_OWORD *)(v237 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v237 + 32) = 84017408;
  uint64_t v561 = sub_23AB60324(v237, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v528 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v528 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v238 = swift_allocObject();
  *(_OWORD *)(v238 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v238 + 32) = 2051;
  uint64_t v239 = sub_23AB60324(v238, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v240 = swift_allocObject();
  *(_OWORD *)(v240 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v240 + 32) = 3840;
  uint64_t v241 = sub_23AB60324(v240, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v242.value._countAndFlagsBits = 0x68507463656C6573;
  v242.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v242, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v243 = sub_23ABB8BA8();
  char v244 = sub_23ABBFBE0();
  uint64_t v245 = sub_23ABBFBE8();
  *((void *)&v503 + 1) = v239;
  *(void *)&long long v503 = v528;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000015, 0x800000023AC36CD0, v233, v235, v236, v243 & 1, v244 & 1, v561, (uint64_t)v592._rawValue + 2616, v503, v245, v241, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v246 = swift_allocObject();
  *(_OWORD *)(v246 + 16) = xmmword_23AC2C700;
  uint64_t v247 = swift_allocObject();
  *(_OWORD *)(v247 + 16) = xmmword_23AC2C730;
  strcpy((char *)(v247 + 32), "Italicize that");
  *(unsigned char *)(v247 + 47) = -18;
  strcpy((char *)(v247 + 48), "Italicize this");
  *(unsigned char *)(v247 + 63) = -18;
  *(void *)(v247 + 64) = 0xD000000000000019;
  *(void *)(v247 + 72) = 0x800000023AC36CF0;
  *(void *)(v246 + 32) = v247;
  *(unsigned char *)(v246 + 40) = 0;
  uint64_t v248 = swift_allocObject();
  *(_OWORD *)(v248 + 16) = xmmword_23AC2C700;
  *(void *)(v248 + 32) = 0xD00000000000001ELL;
  *(void *)(v248 + 40) = 0x800000023AC36D10;
  *(unsigned char *)(v248 + 48) = 0;
  uint64_t v249 = swift_allocObject();
  *(_OWORD *)(v249 + 16) = xmmword_23AC2C700;
  *(void *)(v249 + 32) = 0xD00000000000003ALL;
  *(void *)(v249 + 40) = 0x800000023AC36D30;
  *(unsigned char *)(v249 + 48) = 0;
  uint64_t v250 = swift_allocObject();
  *(_OWORD *)(v250 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v250 + 32) = 84017408;
  uint64_t v540 = sub_23AB60324(v250, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v533 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v533 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v251 = swift_allocObject();
  *(_OWORD *)(v251 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v251 + 32) = 2051;
  uint64_t v252 = sub_23AB60324(v251, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v253 = swift_allocObject();
  *(_OWORD *)(v253 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v253 + 32) = 15;
  uint64_t v254 = sub_23AB60324(v253, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v255.value._countAndFlagsBits = 0x726F46796C707061;
  v255.value._object = (void *)0xEC0000003A74616DLL;
  Action.init(_:mac:)(v255, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v256 = sub_23ABB8BA8();
  char v257 = sub_23ABBFBE0();
  uint64_t v258 = sub_23ABBFBE8();
  *((void *)&v504 + 1) = v252;
  *(void *)&long long v504 = v533;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC36D70, v246, v248, v249, v256 & 1, v257 & 1, v540, (uint64_t)v592._rawValue + 2768, v504, v258, v254, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v259 = swift_allocObject();
  *(_OWORD *)(v259 + 16) = xmmword_23AC2C700;
  uint64_t v260 = swift_allocObject();
  *(_OWORD *)(v260 + 16) = xmmword_23AC2C700;
  *(void *)(v260 + 32) = 0xD00000000000001FLL;
  *(void *)(v260 + 40) = 0x800000023AC36D90;
  *(void *)(v259 + 32) = v260;
  *(unsigned char *)(v259 + 40) = 0;
  uint64_t v261 = swift_allocObject();
  *(_OWORD *)(v261 + 16) = xmmword_23AC2C700;
  *(void *)(v261 + 32) = 0xD000000000000035;
  *(void *)(v261 + 40) = 0x800000023AC36DB0;
  *(unsigned char *)(v261 + 48) = 0;
  uint64_t v262 = swift_allocObject();
  *(_OWORD *)(v262 + 16) = xmmword_23AC2C700;
  *(void *)(v262 + 32) = 0xD00000000000005DLL;
  *(void *)(v262 + 40) = 0x800000023AC36DF0;
  *(unsigned char *)(v262 + 48) = 0;
  uint64_t v263 = swift_allocObject();
  *(_OWORD *)(v263 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v263 + 32) = 84017408;
  uint64_t v541 = sub_23AB60324(v263, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v534 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v534 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v264 = swift_allocObject();
  *(_OWORD *)(v264 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v264 + 32) = 2051;
  uint64_t v265 = sub_23AB60324(v264, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v266 = swift_allocObject();
  *(_OWORD *)(v266 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v266 + 32) = 3840;
  uint64_t v267 = sub_23AB60324(v266, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v268.value._countAndFlagsBits = 0x68507463656C6573;
  v268.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v268, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v269 = sub_23ABB8BA8();
  char v270 = sub_23ABBFBE0();
  uint64_t v271 = sub_23ABBFBE8();
  *((void *)&v505 + 1) = v265;
  *(void *)&long long v505 = v534;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC36E50, v259, v261, v262, v269 & 1, v270 & 1, v541, (uint64_t)v592._rawValue + 2920, v505, v271, v267, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v272 = swift_allocObject();
  *(_OWORD *)(v272 + 16) = xmmword_23AC2C700;
  uint64_t v273 = swift_allocObject();
  *(_OWORD *)(v273 + 16) = xmmword_23AC2C730;
  strcpy((char *)(v273 + 32), "Underline that");
  *(unsigned char *)(v273 + 47) = -18;
  strcpy((char *)(v273 + 48), "Underline this");
  *(unsigned char *)(v273 + 63) = -18;
  *(void *)(v273 + 64) = 0xD000000000000019;
  *(void *)(v273 + 72) = 0x800000023AC36E70;
  *(void *)(v272 + 32) = v273;
  *(unsigned char *)(v272 + 40) = 0;
  uint64_t v274 = swift_allocObject();
  *(_OWORD *)(v274 + 16) = xmmword_23AC2C700;
  *(void *)(v274 + 32) = 0xD00000000000001CLL;
  *(void *)(v274 + 40) = 0x800000023AC36E90;
  *(unsigned char *)(v274 + 48) = 0;
  uint64_t v275 = swift_allocObject();
  *(_OWORD *)(v275 + 16) = xmmword_23AC2C700;
  *(void *)(v275 + 32) = 0xD00000000000003ELL;
  *(void *)(v275 + 40) = 0x800000023AC36EB0;
  *(unsigned char *)(v275 + 48) = 0;
  uint64_t v276 = swift_allocObject();
  *(_OWORD *)(v276 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v276 + 32) = 84017408;
  *(unsigned char *)(v276 + 36) = 8;
  uint64_t v572 = sub_23AB60324(v276, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v552 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v552 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v277 = swift_allocObject();
  *(_OWORD *)(v277 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v277 + 32) = 3;
  uint64_t v278 = sub_23AB60324(v277, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v279 = swift_allocObject();
  *(_OWORD *)(v279 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v279 + 32) = 15;
  uint64_t v280 = sub_23AB60324(v279, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v281.value._countAndFlagsBits = 0x726F46796C707061;
  v281.value._object = (void *)0xEC0000003A74616DLL;
  Action.init(_:mac:)(v281, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v282 = sub_23ABB8BA8();
  char v283 = sub_23ABBFBE0();
  uint64_t v284 = sub_23ABBFBE8();
  *((void *)&v506 + 1) = v278;
  *(void *)&long long v506 = v552;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC36EF0, v272, v274, v275, v282 & 1, v283 & 1, v572, (uint64_t)v592._rawValue + 3072, v506, v284, v280, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v285 = swift_allocObject();
  *(_OWORD *)(v285 + 16) = xmmword_23AC2C700;
  uint64_t v286 = swift_allocObject();
  *(_OWORD *)(v286 + 16) = xmmword_23AC2C700;
  *(void *)(v286 + 32) = 0xD00000000000001FLL;
  *(void *)(v286 + 40) = 0x800000023AC36F10;
  *(void *)(v285 + 32) = v286;
  *(unsigned char *)(v285 + 40) = 0;
  uint64_t v287 = swift_allocObject();
  *(_OWORD *)(v287 + 16) = xmmword_23AC2C700;
  *(void *)(v287 + 32) = 0xD000000000000033;
  *(void *)(v287 + 40) = 0x800000023AC36F30;
  *(unsigned char *)(v287 + 48) = 0;
  uint64_t v288 = swift_allocObject();
  *(_OWORD *)(v288 + 16) = xmmword_23AC2C700;
  *(void *)(v288 + 32) = 0xD000000000000061;
  *(void *)(v288 + 40) = 0x800000023AC36F70;
  *(unsigned char *)(v288 + 48) = 0;
  uint64_t v289 = swift_allocObject();
  *(_OWORD *)(v289 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v289 + 32) = 84017408;
  *(unsigned char *)(v289 + 36) = 8;
  uint64_t v563 = sub_23AB60324(v289, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v290 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v290 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v291 = swift_allocObject();
  *(_OWORD *)(v291 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v291 + 32) = 3;
  uint64_t v292 = sub_23AB60324(v291, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v293 = swift_allocObject();
  *(_OWORD *)(v293 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v293 + 32) = 3840;
  uint64_t v294 = sub_23AB60324(v293, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v295.value._countAndFlagsBits = 0x68507463656C6573;
  v295.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v295, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v296 = sub_23ABB8BA8();
  char v297 = sub_23ABBFBE0();
  uint64_t v298 = sub_23ABBFBE8();
  *((void *)&v507 + 1) = v292;
  *(void *)&long long v507 = v290;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC36FE0, v285, v287, v288, v296 & 1, v297 & 1, v563, (uint64_t)v592._rawValue + 3224, v507, v298, v294, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v299 = swift_allocObject();
  *(_OWORD *)(v299 + 16) = xmmword_23AC2C700;
  uint64_t v300 = swift_allocObject();
  *(_OWORD *)(v300 + 16) = xmmword_23AC2C730;
  *(void *)(v300 + 32) = 0xD00000000000001FLL;
  *(void *)(v300 + 40) = 0x800000023AC37000;
  *(void *)(v300 + 48) = 0xD00000000000002ALL;
  *(void *)(v300 + 56) = 0x800000023AC37020;
  *(void *)(v300 + 64) = 0x68742065746F7551;
  *(void *)(v300 + 72) = 0xEA00000000007461;
  *(void *)(v299 + 32) = v300;
  *(unsigned char *)(v299 + 40) = 0;
  uint64_t v301 = swift_allocObject();
  *(_OWORD *)(v301 + 16) = xmmword_23AC2C700;
  *(void *)(v301 + 32) = 0xD00000000000002DLL;
  *(void *)(v301 + 40) = 0x800000023AC37050;
  *(unsigned char *)(v301 + 48) = 0;
  uint64_t v302 = swift_allocObject();
  *(_OWORD *)(v302 + 16) = xmmword_23AC2C700;
  *(void *)(v302 + 32) = 0x10000000000000A0;
  *(void *)(v302 + 40) = 0x800000023AC37080;
  *(unsigned char *)(v302 + 48) = 0;
  uint64_t v303 = swift_allocObject();
  *(_OWORD *)(v303 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v303 + 32) = 84017408;
  *(unsigned char *)(v303 + 36) = 8;
  uint64_t v580 = sub_23AB60324(v303, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v553 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v553 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v304 = swift_allocObject();
  *(_OWORD *)(v304 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v304 + 32) = 3;
  uint64_t v305 = sub_23AB60324(v304, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v306 = swift_allocObject();
  *(_OWORD *)(v306 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v306 + 32) = 15;
  uint64_t v307 = sub_23AB60324(v306, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v308.value._object = (void *)0x800000023AC37160;
  v308.value._countAndFlagsBits = 0xD000000000000021;
  Action.init(_:mac:)(v308, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v309 = sub_23ABB8BA8();
  char v310 = sub_23ABBFBE0();
  uint64_t v311 = sub_23ABBFBE8();
  *((void *)&v508 + 1) = v305;
  *(void *)&long long v508 = v553;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC37130, v299, v301, v302, v309 & 1, v310 & 1, v580, (uint64_t)v592._rawValue + 3376, v508, v311, v307, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v312 = swift_allocObject();
  *(_OWORD *)(v312 + 16) = xmmword_23AC2C700;
  uint64_t v313 = swift_allocObject();
  *(_OWORD *)(v313 + 16) = xmmword_23AC2C700;
  *(void *)(v313 + 32) = 0xD000000000000030;
  *(void *)(v313 + 40) = 0x800000023AC37190;
  *(void *)(v312 + 32) = v313;
  *(unsigned char *)(v312 + 40) = 0;
  uint64_t v314 = swift_allocObject();
  *(_OWORD *)(v314 + 16) = xmmword_23AC2C700;
  *(void *)(v314 + 32) = 0xD00000000000004CLL;
  *(void *)(v314 + 40) = 0x800000023AC371D0;
  *(unsigned char *)(v314 + 48) = 0;
  uint64_t v315 = swift_allocObject();
  *(_OWORD *)(v315 + 16) = xmmword_23AC2C700;
  *(void *)(v315 + 32) = 0x10000000000000C0;
  *(void *)(v315 + 40) = 0x800000023AC37220;
  *(unsigned char *)(v315 + 48) = 0;
  uint64_t v316 = swift_allocObject();
  *(_OWORD *)(v316 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v316 + 32) = 84017408;
  *(unsigned char *)(v316 + 36) = 8;
  uint64_t v554 = sub_23AB60324(v316, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v317 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v317 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v318 = swift_allocObject();
  *(_OWORD *)(v318 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v318 + 32) = 3;
  uint64_t v319 = sub_23AB60324(v318, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v320 = swift_allocObject();
  *(_OWORD *)(v320 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v320 + 32) = 3840;
  uint64_t v321 = sub_23AB60324(v320, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v322.value._countAndFlagsBits = 0x68507463656C6573;
  v322.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v322, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v323 = sub_23ABB8BA8();
  char v324 = sub_23ABBFBE0();
  uint64_t v325 = sub_23ABBFBE8();
  *((void *)&v509 + 1) = v319;
  *(void *)&long long v509 = v317;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000020, 0x800000023AC372F0, v312, v314, v315, v323 & 1, v324 & 1, v554, (uint64_t)v592._rawValue + 3528, v509, v325, v321, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v326 = swift_allocObject();
  *(_OWORD *)(v326 + 16) = xmmword_23AC2C700;
  uint64_t v327 = swift_allocObject();
  *(_OWORD *)(v327 + 16) = xmmword_23AC2C750;
  *(void *)(v327 + 32) = 0xD000000000000025;
  *(void *)(v327 + 40) = 0x800000023AC37320;
  *(void *)(v327 + 48) = 0xD000000000000030;
  *(void *)(v327 + 56) = 0x800000023AC37350;
  *(void *)(v327 + 64) = 0xD000000000000010;
  *(void *)(v327 + 72) = 0x800000023AC37390;
  *(void *)(v327 + 80) = 0xD000000000000025;
  *(void *)(v327 + 88) = 0x800000023AC373B0;
  *(void *)(v327 + 96) = 0xD000000000000030;
  *(void *)(v327 + 104) = 0x800000023AC373E0;
  *(void *)(v327 + 112) = 0xD000000000000010;
  *(void *)(v327 + 120) = 0x800000023AC37420;
  *(void *)(v326 + 32) = v327;
  *(unsigned char *)(v326 + 40) = 0;
  uint64_t v328 = swift_allocObject();
  *(_OWORD *)(v328 + 16) = xmmword_23AC2C700;
  *(void *)(v328 + 32) = 0xD000000000000033;
  *(void *)(v328 + 40) = 0x800000023AC37440;
  *(unsigned char *)(v328 + 48) = 0;
  uint64_t v329 = swift_allocObject();
  *(_OWORD *)(v329 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v329 + 32) = 84017408;
  *(unsigned char *)(v329 + 36) = 8;
  uint64_t v555 = sub_23AB60324(v329, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v581 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v581 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v330 = swift_allocObject();
  *(_OWORD *)(v330 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v330 + 32) = 3;
  uint64_t v331 = sub_23AB60324(v330, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v332 = swift_allocObject();
  *(_OWORD *)(v332 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v332 + 32) = 15;
  uint64_t v333 = sub_23AB60324(v332, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v334.value._object = (void *)0x800000023AC37160;
  v334.value._countAndFlagsBits = 0xD000000000000021;
  Action.init(_:mac:)(v334, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v335 = sub_23ABBFBD4();
  char v336 = sub_23ABB8BA8();
  char v337 = sub_23ABBFBE0();
  uint64_t v338 = sub_23ABBFBE8();
  *((void *)&v510 + 1) = v331;
  *(void *)&long long v510 = v581;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000028, 0x800000023AC37480, v326, v328, v335, v336 & 1, v337 & 1, v555, (uint64_t)v592._rawValue + 3680, v510, v338, v333, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v339 = swift_allocObject();
  *(_OWORD *)(v339 + 16) = xmmword_23AC2C700;
  uint64_t v340 = swift_allocObject();
  *(_OWORD *)(v340 + 16) = xmmword_23AC2C710;
  *(void *)(v340 + 32) = 0xD000000000000036;
  *(void *)(v340 + 40) = 0x800000023AC374B0;
  *(void *)(v340 + 48) = 0xD000000000000036;
  *(void *)(v340 + 56) = 0x800000023AC374F0;
  *(void *)(v339 + 32) = v340;
  *(unsigned char *)(v339 + 40) = 0;
  uint64_t v341 = swift_allocObject();
  *(_OWORD *)(v341 + 16) = xmmword_23AC2C700;
  *(void *)(v341 + 32) = 0xD000000000000052;
  *(void *)(v341 + 40) = 0x800000023AC37530;
  *(unsigned char *)(v341 + 48) = 0;
  uint64_t v342 = swift_allocObject();
  *(_OWORD *)(v342 + 16) = xmmword_23AC2C700;
  *(void *)(v342 + 32) = 0xD000000000000021;
  *(void *)(v342 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v342 + 48) = 0;
  uint64_t v343 = swift_allocObject();
  *(_OWORD *)(v343 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v343 + 32) = 84017408;
  *(unsigned char *)(v343 + 36) = 8;
  uint64_t v556 = sub_23AB60324(v343, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v546 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v546 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v344 = swift_allocObject();
  *(_OWORD *)(v344 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v344 + 32) = 3;
  uint64_t v345 = sub_23AB60324(v344, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v346 = swift_allocObject();
  *(_OWORD *)(v346 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v346 + 32) = 3840;
  uint64_t v347 = sub_23AB60324(v346, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v348.value._countAndFlagsBits = 0x68507463656C6573;
  v348.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v348, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v349 = sub_23ABB8BA8();
  char v350 = sub_23ABBFBE0();
  uint64_t v351 = sub_23ABBFBE8();
  *((void *)&v511 + 1) = v345;
  *(void *)&long long v511 = v546;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC37590, v339, v341, v342, v349 & 1, v350 & 1, v556, (uint64_t)v592._rawValue + 3832, v511, v351, v347, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v352 = swift_allocObject();
  *(_OWORD *)(v352 + 16) = xmmword_23AC2C700;
  uint64_t v353 = swift_allocObject();
  *(_OWORD *)(v353 + 16) = xmmword_23AC2C710;
  *(void *)(v353 + 32) = 0xD00000000000001DLL;
  *(void *)(v353 + 40) = 0x800000023AC375C0;
  *(void *)(v353 + 48) = 0xD000000000000028;
  *(void *)(v353 + 56) = 0x800000023AC375E0;
  *(void *)(v352 + 32) = v353;
  *(unsigned char *)(v352 + 40) = 0;
  uint64_t v354 = swift_allocObject();
  *(_OWORD *)(v354 + 16) = xmmword_23AC2C700;
  *(void *)(v354 + 32) = 0xD00000000000002DLL;
  *(void *)(v354 + 40) = 0x800000023AC37610;
  *(unsigned char *)(v354 + 48) = 0;
  uint64_t v355 = swift_allocObject();
  *(_OWORD *)(v355 + 16) = xmmword_23AC2C700;
  *(void *)(v355 + 32) = 0x10000000000000A0;
  *(void *)(v355 + 40) = 0x800000023AC37640;
  *(unsigned char *)(v355 + 48) = 0;
  uint64_t v356 = swift_allocObject();
  *(_OWORD *)(v356 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v356 + 32) = 84017408;
  *(unsigned char *)(v356 + 36) = 8;
  uint64_t v573 = sub_23AB60324(v356, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v582 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v582 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v357 = swift_allocObject();
  *(_OWORD *)(v357 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v357 + 32) = 3;
  uint64_t v358 = sub_23AB60324(v357, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v359 = swift_allocObject();
  *(_OWORD *)(v359 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v359 + 32) = 15;
  uint64_t v360 = sub_23AB60324(v359, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v361.value._object = (void *)0x800000023AC37160;
  v361.value._countAndFlagsBits = 0xD000000000000021;
  Action.init(_:mac:)(v361, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v362 = sub_23ABB8BA8();
  char v363 = sub_23ABBFBE0();
  uint64_t v364 = sub_23ABBFBE8();
  *((void *)&v512 + 1) = v358;
  *(void *)&long long v512 = v582;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC376F0, v352, v354, v355, v362 & 1, v363 & 1, v573, (uint64_t)v592._rawValue + 3984, v512, v364, v360, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v365 = swift_allocObject();
  *(_OWORD *)(v365 + 16) = xmmword_23AC2C700;
  uint64_t v366 = swift_allocObject();
  *(_OWORD *)(v366 + 16) = xmmword_23AC2C700;
  *(void *)(v366 + 32) = 0xD00000000000002ELL;
  *(void *)(v366 + 40) = 0x800000023AC37720;
  *(void *)(v365 + 32) = v366;
  *(unsigned char *)(v365 + 40) = 0;
  uint64_t v367 = swift_allocObject();
  *(_OWORD *)(v367 + 16) = xmmword_23AC2C700;
  *(void *)(v367 + 32) = 0xD00000000000004CLL;
  *(void *)(v367 + 40) = 0x800000023AC37750;
  *(unsigned char *)(v367 + 48) = 0;
  uint64_t v368 = swift_allocObject();
  *(_OWORD *)(v368 + 16) = xmmword_23AC2C700;
  *(void *)(v368 + 32) = 0x10000000000000C0;
  *(void *)(v368 + 40) = 0x800000023AC377A0;
  *(unsigned char *)(v368 + 48) = 0;
  uint64_t v369 = swift_allocObject();
  *(_OWORD *)(v369 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v369 + 32) = 84017408;
  *(unsigned char *)(v369 + 36) = 8;
  uint64_t v557 = sub_23AB60324(v369, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v547 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v547 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v370 = swift_allocObject();
  *(_OWORD *)(v370 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v370 + 32) = 3;
  uint64_t v371 = sub_23AB60324(v370, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v372 = swift_allocObject();
  *(_OWORD *)(v372 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v372 + 32) = 3840;
  uint64_t v373 = sub_23AB60324(v372, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v374.value._countAndFlagsBits = 0x68507463656C6573;
  v374.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v374, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v375 = sub_23ABB8BA8();
  char v376 = sub_23ABBFBE0();
  uint64_t v377 = sub_23ABBFBE8();
  *((void *)&v513 + 1) = v371;
  *(void *)&long long v513 = v547;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000020, 0x800000023AC37870, v365, v367, v368, v375 & 1, v376 & 1, v557, (uint64_t)v592._rawValue + 4136, v513, v377, v373, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v378 = swift_allocObject();
  *(_OWORD *)(v378 + 16) = xmmword_23AC2C700;
  uint64_t v379 = swift_allocObject();
  *(_OWORD *)(v379 + 16) = xmmword_23AC2C740;
  *(void *)(v379 + 32) = 0xD000000000000023;
  *(void *)(v379 + 40) = 0x800000023AC378A0;
  *(void *)(v379 + 48) = 0xD00000000000002ELL;
  *(void *)(v379 + 56) = 0x800000023AC378D0;
  *(void *)(v379 + 64) = 0xD000000000000023;
  *(void *)(v379 + 72) = 0x800000023AC37900;
  *(void *)(v379 + 80) = 0xD00000000000002ELL;
  *(void *)(v379 + 88) = 0x800000023AC37930;
  *(void *)(v378 + 32) = v379;
  *(unsigned char *)(v378 + 40) = 0;
  uint64_t v380 = swift_allocObject();
  *(_OWORD *)(v380 + 16) = xmmword_23AC2C700;
  *(void *)(v380 + 32) = 0xD000000000000033;
  *(void *)(v380 + 40) = 0x800000023AC37960;
  *(unsigned char *)(v380 + 48) = 0;
  uint64_t v381 = swift_allocObject();
  *(_OWORD *)(v381 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v381 + 32) = 84017408;
  *(unsigned char *)(v381 + 36) = 8;
  uint64_t v574 = sub_23AB60324(v381, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v564 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v564 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v382 = swift_allocObject();
  *(_OWORD *)(v382 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v382 + 32) = 3;
  uint64_t v383 = sub_23AB60324(v382, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v384 = swift_allocObject();
  *(_OWORD *)(v384 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v384 + 32) = 15;
  uint64_t v385 = sub_23AB60324(v384, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v386.value._object = (void *)0x800000023AC37160;
  v386.value._countAndFlagsBits = 0xD000000000000021;
  Action.init(_:mac:)(v386, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v387 = sub_23ABBFBD4();
  char v388 = sub_23ABB8BA8();
  char v389 = sub_23ABBFBE0();
  uint64_t v390 = sub_23ABBFBE8();
  *((void *)&v514 + 1) = v383;
  *(void *)&long long v514 = v564;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000028, 0x800000023AC379A0, v378, v380, v387, v388 & 1, v389 & 1, v574, (uint64_t)v592._rawValue + 4288, v514, v390, v385, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v391 = swift_allocObject();
  *(_OWORD *)(v391 + 16) = xmmword_23AC2C700;
  uint64_t v392 = swift_allocObject();
  *(_OWORD *)(v392 + 16) = xmmword_23AC2C710;
  *(void *)(v392 + 32) = 0xD000000000000034;
  *(void *)(v392 + 40) = 0x800000023AC379D0;
  *(void *)(v392 + 48) = 0xD000000000000034;
  *(void *)(v392 + 56) = 0x800000023AC37A10;
  *(void *)(v391 + 32) = v392;
  *(unsigned char *)(v391 + 40) = 0;
  uint64_t v393 = swift_allocObject();
  *(_OWORD *)(v393 + 16) = xmmword_23AC2C700;
  *(void *)(v393 + 32) = 0xD000000000000052;
  *(void *)(v393 + 40) = 0x800000023AC37A50;
  *(unsigned char *)(v393 + 48) = 0;
  uint64_t v394 = swift_allocObject();
  *(_OWORD *)(v394 + 16) = xmmword_23AC2C700;
  *(void *)(v394 + 32) = 0xD000000000000021;
  *(void *)(v394 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v394 + 48) = 0;
  uint64_t v395 = swift_allocObject();
  *(_OWORD *)(v395 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v395 + 32) = 84017408;
  *(unsigned char *)(v395 + 36) = 8;
  uint64_t v575 = sub_23AB60324(v395, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v565 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v565 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v396 = swift_allocObject();
  *(_OWORD *)(v396 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v396 + 32) = 3;
  uint64_t v397 = sub_23AB60324(v396, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v398 = swift_allocObject();
  *(_OWORD *)(v398 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v398 + 32) = 3840;
  uint64_t v399 = sub_23AB60324(v398, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v400.value._countAndFlagsBits = 0x68507463656C6573;
  v400.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v400, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v401 = sub_23ABB8BA8();
  char v402 = sub_23ABBFBE0();
  uint64_t v403 = sub_23ABBFBE8();
  *((void *)&v515 + 1) = v397;
  *(void *)&long long v515 = v565;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC37AB0, v391, v393, v394, v401 & 1, v402 & 1, v575, (uint64_t)v592._rawValue + 4440, v515, v403, v399, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v404 = swift_allocObject();
  *(_OWORD *)(v404 + 16) = xmmword_23AC2C700;
  uint64_t v405 = swift_allocObject();
  *(_OWORD *)(v405 + 16) = xmmword_23AC2C710;
  *(void *)(v405 + 32) = 0xD00000000000001BLL;
  *(void *)(v405 + 40) = 0x800000023AC37AE0;
  *(void *)(v405 + 48) = 0xD000000000000026;
  *(void *)(v405 + 56) = 0x800000023AC37B00;
  *(void *)(v404 + 32) = v405;
  *(unsigned char *)(v404 + 40) = 0;
  uint64_t v406 = swift_allocObject();
  *(_OWORD *)(v406 + 16) = xmmword_23AC2C700;
  *(void *)(v406 + 32) = 0xD00000000000002BLL;
  *(void *)(v406 + 40) = 0x800000023AC37B30;
  *(unsigned char *)(v406 + 48) = 0;
  uint64_t v407 = swift_allocObject();
  *(_OWORD *)(v407 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v407 + 32) = 84017408;
  *(unsigned char *)(v407 + 36) = 8;
  uint64_t v587 = sub_23AB60324(v407, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v566 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v566 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v408 = swift_allocObject();
  *(_OWORD *)(v408 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v408 + 32) = 3;
  uint64_t v409 = sub_23AB60324(v408, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v410 = swift_allocObject();
  *(_OWORD *)(v410 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v410 + 32) = 15;
  uint64_t v411 = sub_23AB60324(v410, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v412.value._object = (void *)0x800000023AC37160;
  v412.value._countAndFlagsBits = 0xD000000000000021;
  Action.init(_:mac:)(v412, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v413 = sub_23ABBFBD4();
  char v414 = sub_23ABB8BA8();
  char v415 = sub_23ABBFBE0();
  uint64_t v416 = sub_23ABBFBE8();
  *((void *)&v516 + 1) = v409;
  *(void *)&long long v516 = v566;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC37B60, v404, v406, v413, v414 & 1, v415 & 1, v587, (uint64_t)v592._rawValue + 4592, v516, v416, v411, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v417 = swift_allocObject();
  *(_OWORD *)(v417 + 16) = xmmword_23AC2C700;
  uint64_t v418 = swift_allocObject();
  *(_OWORD *)(v418 + 16) = xmmword_23AC2C700;
  *(void *)(v418 + 32) = 0xD00000000000002CLL;
  *(void *)(v418 + 40) = 0x800000023AC37B90;
  *(void *)(v417 + 32) = v418;
  *(unsigned char *)(v417 + 40) = 0;
  uint64_t v419 = swift_allocObject();
  *(_OWORD *)(v419 + 16) = xmmword_23AC2C700;
  *(void *)(v419 + 32) = 0xD00000000000004ALL;
  *(void *)(v419 + 40) = 0x800000023AC37BC0;
  *(unsigned char *)(v419 + 48) = 0;
  uint64_t v420 = swift_allocObject();
  *(_OWORD *)(v420 + 16) = xmmword_23AC2C700;
  *(void *)(v420 + 32) = 0xD000000000000021;
  *(void *)(v420 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v420 + 48) = 0;
  uint64_t v421 = swift_allocObject();
  *(_OWORD *)(v421 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v421 + 32) = 84017408;
  *(unsigned char *)(v421 + 36) = 8;
  uint64_t v576 = sub_23AB60324(v421, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v567 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v567 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v422 = swift_allocObject();
  *(_OWORD *)(v422 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v422 + 32) = 3;
  uint64_t v423 = sub_23AB60324(v422, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v424 = swift_allocObject();
  *(_OWORD *)(v424 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v424 + 32) = 3840;
  uint64_t v425 = sub_23AB60324(v424, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v426.value._countAndFlagsBits = 0x68507463656C6573;
  v426.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v426, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v427 = sub_23ABB8BA8();
  char v428 = sub_23ABBFBE0();
  uint64_t v429 = sub_23ABBFBE8();
  *((void *)&v517 + 1) = v423;
  *(void *)&long long v517 = v567;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC37C10, v417, v419, v420, v427 & 1, v428 & 1, v576, (uint64_t)v592._rawValue + 4744, v517, v429, v425, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v430 = swift_allocObject();
  *(_OWORD *)(v430 + 16) = xmmword_23AC2C700;
  uint64_t v431 = swift_allocObject();
  *(_OWORD *)(v431 + 16) = xmmword_23AC2C710;
  *(void *)(v431 + 32) = 0xD000000000000021;
  *(void *)(v431 + 40) = 0x800000023AC37C30;
  *(void *)(v431 + 48) = 0xD00000000000002CLL;
  *(void *)(v431 + 56) = 0x800000023AC37C60;
  *(void *)(v430 + 32) = v431;
  *(unsigned char *)(v430 + 40) = 0;
  uint64_t v432 = swift_allocObject();
  *(_OWORD *)(v432 + 16) = xmmword_23AC2C700;
  *(void *)(v432 + 32) = 0xD00000000000002FLL;
  *(void *)(v432 + 40) = 0x800000023AC37C90;
  *(unsigned char *)(v432 + 48) = 0;
  uint64_t v433 = swift_allocObject();
  *(_OWORD *)(v433 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v433 + 32) = 84017408;
  *(unsigned char *)(v433 + 36) = 8;
  uint64_t v577 = sub_23AB60324(v433, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v568 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v568 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v434 = swift_allocObject();
  *(_OWORD *)(v434 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v434 + 32) = 3;
  uint64_t v435 = sub_23AB60324(v434, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v436 = swift_allocObject();
  *(_OWORD *)(v436 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v436 + 32) = 15;
  uint64_t v437 = sub_23AB60324(v436, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v438.value._object = (void *)0x800000023AC37160;
  v438.value._countAndFlagsBits = 0xD000000000000021;
  Action.init(_:mac:)(v438, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v439 = sub_23ABBFBD4();
  char v440 = sub_23ABB8BA8();
  char v441 = sub_23ABBFBE0();
  uint64_t v442 = sub_23ABBFBE8();
  *((void *)&v518 + 1) = v435;
  *(void *)&long long v518 = v568;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC37CC0, v430, v432, v439, v440 & 1, v441 & 1, v577, (uint64_t)v592._rawValue + 4896, v518, v442, v437, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v443 = swift_allocObject();
  *(_OWORD *)(v443 + 16) = xmmword_23AC2C700;
  uint64_t v444 = swift_allocObject();
  *(_OWORD *)(v444 + 16) = xmmword_23AC2C700;
  *(void *)(v444 + 32) = 0xD000000000000032;
  *(void *)(v444 + 40) = 0x800000023AC37CF0;
  *(void *)(v443 + 32) = v444;
  *(unsigned char *)(v443 + 40) = 0;
  uint64_t v445 = swift_allocObject();
  *(_OWORD *)(v445 + 16) = xmmword_23AC2C700;
  *(void *)(v445 + 32) = 0xD00000000000004ELL;
  *(void *)(v445 + 40) = 0x800000023AC37D30;
  *(unsigned char *)(v445 + 48) = 0;
  uint64_t v446 = swift_allocObject();
  *(_OWORD *)(v446 + 16) = xmmword_23AC2C700;
  *(void *)(v446 + 32) = 0xD000000000000021;
  *(void *)(v446 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v446 + 48) = 0;
  uint64_t v447 = swift_allocObject();
  *(_OWORD *)(v447 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v447 + 32) = 84017408;
  *(unsigned char *)(v447 + 36) = 8;
  uint64_t v569 = sub_23AB60324(v447, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v588 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v588 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v448 = swift_allocObject();
  *(_OWORD *)(v448 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v448 + 32) = 3;
  uint64_t v449 = sub_23AB60324(v448, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v450 = swift_allocObject();
  *(_OWORD *)(v450 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v450 + 32) = 3840;
  uint64_t v451 = sub_23AB60324(v450, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v452.value._countAndFlagsBits = 0x68507463656C6573;
  v452.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v452, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v453 = sub_23ABB8BA8();
  char v454 = sub_23ABBFBE0();
  uint64_t v455 = sub_23ABBFBE8();
  *((void *)&v519 + 1) = v449;
  *(void *)&long long v519 = v588;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC37D80, v443, v445, v446, v453 & 1, v454 & 1, v569, (uint64_t)v592._rawValue + 5048, v519, v455, v451, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v456 = swift_allocObject();
  *(_OWORD *)(v456 + 16) = xmmword_23AC2C700;
  uint64_t v457 = swift_allocObject();
  *(_OWORD *)(v457 + 16) = xmmword_23AC2C710;
  *(void *)(v457 + 32) = 0xD00000000000001ELL;
  *(void *)(v457 + 40) = 0x800000023AC37DB0;
  *(void *)(v457 + 48) = 0xD000000000000029;
  *(void *)(v457 + 56) = 0x800000023AC37DD0;
  *(void *)(v456 + 32) = v457;
  *(unsigned char *)(v456 + 40) = 0;
  uint64_t v458 = swift_allocObject();
  *(_OWORD *)(v458 + 16) = xmmword_23AC2C700;
  *(void *)(v458 + 32) = 0xD00000000000002CLL;
  *(void *)(v458 + 40) = 0x800000023AC37E00;
  *(unsigned char *)(v458 + 48) = 0;
  uint64_t v459 = swift_allocObject();
  *(_OWORD *)(v459 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v459 + 32) = 84017408;
  *(unsigned char *)(v459 + 36) = 8;
  uint64_t v578 = sub_23AB60324(v459, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v570 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v570 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v460 = swift_allocObject();
  *(_OWORD *)(v460 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v460 + 32) = 3;
  uint64_t v461 = sub_23AB60324(v460, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v462 = swift_allocObject();
  *(_OWORD *)(v462 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v462 + 32) = 15;
  uint64_t v463 = sub_23AB60324(v462, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v464.value._object = (void *)0x800000023AC37160;
  v464.value._countAndFlagsBits = 0xD000000000000021;
  Action.init(_:mac:)(v464, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  uint64_t v465 = sub_23ABBFBD4();
  char v466 = sub_23ABB8BA8();
  char v467 = sub_23ABBFBE0();
  uint64_t v468 = sub_23ABBFBE8();
  *((void *)&v520 + 1) = v461;
  *(void *)&long long v520 = v570;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC37E30, v456, v458, v465, v466 & 1, v467 & 1, v578, (uint64_t)v592._rawValue + 5200, v520, v468, v463, v598, &v597, 0, 0, (uint64_t)&v593);
  uint64_t v469 = swift_allocObject();
  *(_OWORD *)(v469 + 16) = xmmword_23AC2C700;
  uint64_t v470 = swift_allocObject();
  *(_OWORD *)(v470 + 16) = xmmword_23AC2C700;
  *(void *)(v470 + 32) = 0xD00000000000002FLL;
  *(void *)(v470 + 40) = 0x800000023AC37E60;
  *(void *)(v469 + 32) = v470;
  *(unsigned char *)(v469 + 40) = 0;
  uint64_t v471 = swift_allocObject();
  *(_OWORD *)(v471 + 16) = xmmword_23AC2C700;
  *(void *)(v471 + 32) = 0xD00000000000004BLL;
  *(void *)(v471 + 40) = 0x800000023AC37E90;
  *(unsigned char *)(v471 + 48) = 0;
  uint64_t v472 = swift_allocObject();
  *(_OWORD *)(v472 + 16) = xmmword_23AC2C700;
  *(void *)(v472 + 32) = 0xD000000000000021;
  *(void *)(v472 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v472 + 48) = 0;
  uint64_t v473 = swift_allocObject();
  *(_OWORD *)(v473 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v473 + 32) = 84017408;
  *(unsigned char *)(v473 + 36) = 8;
  uint64_t v591 = sub_23AB60324(v473, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v474 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v474 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v475 = swift_allocObject();
  *(_OWORD *)(v475 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v475 + 32) = 3;
  uint64_t v476 = sub_23AB60324(v475, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v477 = swift_allocObject();
  *(_OWORD *)(v477 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v477 + 32) = 3840;
  uint64_t v478 = sub_23AB60324(v477, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v598[0] = 4;
  char v597 = 4;
  v479.value._countAndFlagsBits = 0x68507463656C6573;
  v479.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v479, (Swift::String_optional)0);
  long long v593 = v595;
  long long v594 = v596;
  char v480 = sub_23ABB8BA8();
  char v481 = sub_23ABBFBE0();
  uint64_t v482 = sub_23ABBFBE8();
  *((void *)&v521 + 1) = v476;
  *(void *)&long long v521 = v474;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC37EE0, v469, v471, v472, v480 & 1, v481 & 1, v591, (uint64_t)v592._rawValue + 5352, v521, v482, v478, v598, &v597, 0, 0, (uint64_t)&v593);
  Swift::Bool v483 = sub_23ABB8BA8() & 1;
  v484._countAndFlagsBits = 0x676E6974696445;
  v484._object = (void *)0xE700000000000000;
  v485._countAndFlagsBits = v537;
  v485._object = v536;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A629B8, v484, v485, v483, v592);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB60294()
{
  if (qword_268A5AAD0 != -1) {
    swift_once();
  }
  return &stru_268A629B8;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_23AB60324(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t a4, void (*a5)(void))
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v8 = sub_23AC2A670();
    uint64_t v9 = v8 + 56;
    uint64_t v23 = v5;
    a3();
    uint64_t v10 = 0;
    while (1)
    {
      char v11 = *(unsigned char *)(a1 + 32 + v10);
      uint64_t result = sub_23AC2A4F0();
      uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v9 + 8 * (v14 >> 6));
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        uint64_t v18 = ~v13;
        a5();
        while (1)
        {
          uint64_t result = sub_23AC2A510();
          if (result) {
            break;
          }
          unint64_t v14 = (v14 + 1) & v18;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)(v9 + 8 * (v14 >> 6));
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        *(void *)(v9 + 8 * v15) = v17 | v16;
        *(unsigned char *)(*(void *)(v8 + 48) + v14) = v11;
        uint64_t v19 = *(void *)(v8 + 16);
        BOOL v20 = __OFADD__(v19, 1);
        uint64_t v21 = v19 + 1;
        if (v20)
        {
          __break(1u);
          return result;
        }
        *(void *)(v8 + 16) = v21;
      }
      if (++v10 == v23) {
        return v8;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

unint64_t sub_23AB60498()
{
  unint64_t result = qword_268A5A340;
  if (!qword_268A5A340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A340);
  }
  return result;
}

unint64_t sub_23AB604EC()
{
  unint64_t result = qword_268A5A348;
  if (!qword_268A5A348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A348);
  }
  return result;
}

unint64_t sub_23AB60540()
{
  unint64_t result = qword_268A5A358;
  if (!qword_268A5A358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A358);
  }
  return result;
}

unint64_t sub_23AB60594()
{
  unint64_t result = qword_268A5A360;
  if (!qword_268A5A360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A360);
  }
  return result;
}

void sub_23AB605E8()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v607 = sub_23AC2A560();
  v606 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C770;
  v624._rawCFDictionaryRef Value = (void *)v9;
  uint64_t v622 = v9 + 32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AC2C700;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A318);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AC2C700;
  *(void *)(v11 + 32) = 0x776F642065766F4DLL;
  *(void *)(v11 + 40) = 0xE90000000000006ELL;
  *(void *)(v10 + 32) = v11;
  *(unsigned char *)(v10 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A320);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AC2C710;
  *(void *)(v12 + 32) = 0xD000000000000027;
  *(void *)(v12 + 40) = 0x800000023AC37F10;
  *(unsigned char *)(v12 + 48) = 0;
  *(void *)(v12 + 56) = 0xD000000000000019;
  *(void *)(v12 + 64) = 0x800000023AC37F40;
  *(unsigned char *)(v12 + 72) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A328);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v13 + 32) = 84017408;
  *(unsigned char *)(v13 + 36) = 8;
  uint64_t v611 = sub_23AB60324(v13, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v617 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v617 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v14 + 32) = 3;
  uint64_t v15 = sub_23AB60324(v14, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v16.value._countAndFlagsBits = 0x6E776F4465766F6DLL;
  v16.value._object = (void *)0xE90000000000003ALL;
  v17.value._countAndFlagsBits = 0x6E776F4465766F6DLL;
  v17.value._object = (void *)0xE800000000000000;
  Action.init(_:mac:)(v16, v17);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v18 = sub_23ABBFBD4();
  char v19 = sub_23ABB8BA8();
  char v20 = sub_23ABBFBE0();
  uint64_t v21 = sub_23ABBFBE8();
  uint64_t v22 = sub_23ABBFBE8();
  *((void *)&v510 + 1) = v15;
  *(void *)&long long v510 = v617;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC37F60, v10, v12, v18, v19 & 1, v20 & 1, v611, v622, v510, v21, v22, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_23AC2C700;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23AC2C700;
  *(void *)(v24 + 32) = 0x70752065766F4DLL;
  *(void *)(v24 + 40) = 0xE700000000000000;
  *(void *)(v23 + 32) = v24;
  *(unsigned char *)(v23 + 40) = 0;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23AC2C710;
  *(void *)(v25 + 32) = 0xD000000000000025;
  *(void *)(v25 + 40) = 0x800000023AC37F80;
  *(unsigned char *)(v25 + 48) = 0;
  *(void *)(v25 + 56) = 0xD000000000000017;
  *(void *)(v25 + 64) = 0x800000023AC37FB0;
  *(unsigned char *)(v25 + 72) = 1;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v26 + 32) = 84017408;
  *(unsigned char *)(v26 + 36) = 8;
  uint64_t v612 = sub_23AB60324(v26, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v609 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v609 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v27 + 32) = 3;
  uint64_t v28 = sub_23AB60324(v27, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v29.value._countAndFlagsBits = 0x3A705565766F6DLL;
  v29.value._object = (void *)0xE700000000000000;
  v30.value._countAndFlagsBits = 0x705565766F6DLL;
  v30.value._object = (void *)0xE600000000000000;
  Action.init(_:mac:)(v29, v30);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v31 = sub_23ABBFBD4();
  char v32 = sub_23ABB8BA8();
  char v33 = sub_23ABBFBE0();
  uint64_t v34 = sub_23ABBFBE8();
  uint64_t v35 = sub_23ABBFBE8();
  *((void *)&v511 + 1) = v28;
  *(void *)&long long v511 = v609;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC37FD0, v23, v25, v31, v32 & 1, v33 & 1, v612, (uint64_t)v624._rawValue + 184, v511, v34, v35, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_23AC2C700;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23AC2C700;
  *(void *)(v37 + 32) = 0x66656C2065766F4DLL;
  *(void *)(v37 + 40) = 0xE900000000000074;
  *(void *)(v36 + 32) = v37;
  *(unsigned char *)(v36 + 40) = 0;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23AC2C710;
  *(void *)(v38 + 32) = 0xD000000000000033;
  *(void *)(v38 + 40) = 0x800000023AC37FF0;
  *(unsigned char *)(v38 + 48) = 0;
  *(void *)(v38 + 56) = 0xD000000000000019;
  *(void *)(v38 + 64) = 0x800000023AC38030;
  *(unsigned char *)(v38 + 72) = 1;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v39 + 32) = 84017408;
  *(unsigned char *)(v39 + 36) = 8;
  uint64_t v619 = sub_23AB60324(v39, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v613 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v613 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v40 + 32) = 3;
  uint64_t v41 = sub_23AB60324(v40, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v42.value._countAndFlagsBits = 0x7466654C65766F6DLL;
  v42.value._object = (void *)0xE90000000000003ALL;
  v43.value._countAndFlagsBits = 0x7466654C65766F6DLL;
  v43.value._object = (void *)0xE800000000000000;
  Action.init(_:mac:)(v42, v43);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v44 = sub_23ABBFBD4();
  char v45 = sub_23ABB8BA8();
  char v46 = sub_23ABBFBE0();
  uint64_t v47 = sub_23ABBFBE8();
  uint64_t v48 = sub_23ABBFBE8();
  *((void *)&v512 + 1) = v41;
  *(void *)&long long v512 = v613;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC38050, v36, v38, v44, v45 & 1, v46 & 1, v619, (uint64_t)v624._rawValue + 336, v512, v47, v48, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_23AC2C700;
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_23AC2C700;
  *(void *)(v50 + 32) = 0x6769722065766F4DLL;
  *(void *)(v50 + 40) = 0xEA00000000007468;
  *(void *)(v49 + 32) = v50;
  *(unsigned char *)(v49 + 40) = 0;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_23AC2C710;
  *(void *)(v51 + 32) = 0xD000000000000034;
  *(void *)(v51 + 40) = 0x800000023AC38070;
  *(unsigned char *)(v51 + 48) = 0;
  *(void *)(v51 + 56) = 0xD00000000000001ALL;
  *(void *)(v51 + 64) = 0x800000023AC380B0;
  *(unsigned char *)(v51 + 72) = 1;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v52 + 32) = 84017408;
  *(unsigned char *)(v52 + 36) = 8;
  uint64_t v614 = sub_23AB60324(v52, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v53 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v53 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v54 + 32) = 3;
  uint64_t v55 = sub_23AB60324(v54, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v56.value._object = (void *)0xE900000000000074;
  v57.value._countAndFlagsBits = 0x6867695265766F6DLL;
  v57.value._object = (void *)0xEA00000000003A74;
  v56.value._countAndFlagsBits = 0x6867695265766F6DLL;
  Action.init(_:mac:)(v57, v56);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v58 = sub_23ABBFBD4();
  char v59 = sub_23ABB8BA8();
  char v60 = sub_23ABBFBE0();
  uint64_t v61 = sub_23ABBFBE8();
  uint64_t v62 = sub_23ABBFBE8();
  *((void *)&v513 + 1) = v55;
  *(void *)&long long v513 = v53;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC380D0, v49, v51, v58, v59 & 1, v60 & 1, v614, (uint64_t)v624._rawValue + 488, v513, v61, v62, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_23AC2C700;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_23AC2C740;
  *(void *)(v64 + 32) = 0xD00000000000002BLL;
  *(void *)(v64 + 40) = 0x800000023AC380F0;
  *(void *)(v64 + 48) = 0xD000000000000029;
  *(void *)(v64 + 56) = 0x800000023AC38120;
  *(void *)(v64 + 64) = 0xD000000000000025;
  *(void *)(v64 + 72) = 0x800000023AC38150;
  *(void *)(v64 + 80) = 0xD000000000000023;
  *(void *)(v64 + 88) = 0x800000023AC38180;
  *(void *)(v63 + 32) = v64;
  *(unsigned char *)(v63 + 40) = 0;
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_23AC2C700;
  *(void *)(v65 + 32) = 0xD00000000000003BLL;
  *(void *)(v65 + 40) = 0x800000023AC381B0;
  *(unsigned char *)(v65 + 48) = 0;
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v66 + 32) = 84017408;
  *(unsigned char *)(v66 + 36) = 8;
  uint64_t v578 = sub_23AB60324(v66, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v570 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v570 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v67 + 32) = 3;
  uint64_t v68 = sub_23AB60324(v67, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A330);
  uint64_t v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v69 + 32) = 16;
  uint64_t v70 = sub_23AB60324(v69, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v71.value._object = (void *)0x800000023AC38210;
  v71.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v71, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v72 = sub_23ABBFBD4();
  char v73 = sub_23ABB8BA8();
  char v74 = sub_23ABBFBE0();
  uint64_t v75 = sub_23ABBFBE8();
  *((void *)&v514 + 1) = v68;
  *(void *)&long long v514 = v570;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC381F0, v63, v65, v72, v73 & 1, v74 & 1, v578, (uint64_t)v624._rawValue + 640, v514, v75, v70, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_23AC2C700;
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_23AC2C740;
  *(void *)(v77 + 32) = 0xD000000000000025;
  *(void *)(v77 + 40) = 0x800000023AC38230;
  *(void *)(v77 + 48) = 0xD000000000000023;
  *(void *)(v77 + 56) = 0x800000023AC38260;
  *(void *)(v77 + 64) = 0xD000000000000028;
  *(void *)(v77 + 72) = 0x800000023AC38290;
  *(void *)(v77 + 80) = 0xD000000000000026;
  *(void *)(v77 + 88) = 0x800000023AC382C0;
  *(void *)(v76 + 32) = v77;
  *(unsigned char *)(v76 + 40) = 0;
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_23AC2C700;
  *(void *)(v78 + 32) = 0xD00000000000003CLL;
  *(void *)(v78 + 40) = 0x800000023AC382F0;
  *(unsigned char *)(v78 + 48) = 0;
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v79 + 32) = 84017408;
  *(unsigned char *)(v79 + 36) = 8;
  uint64_t v592 = sub_23AB60324(v79, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v610 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v610 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v80 + 32) = 3;
  uint64_t v81 = sub_23AB60324(v80, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v82 + 32) = 16;
  uint64_t v83 = sub_23AB60324(v82, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v84.value._countAndFlagsBits = 0xD000000000000012;
  v84.value._object = (void *)0x800000023AC38350;
  Action.init(_:mac:)(v84, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v85 = sub_23ABBFBD4();
  char v86 = sub_23ABB8BA8();
  char v87 = sub_23ABBFBE0();
  uint64_t v88 = sub_23ABBFBE8();
  *((void *)&v515 + 1) = v81;
  *(void *)&long long v515 = v610;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC38330, v76, v78, v85, v86 & 1, v87 & 1, v592, (uint64_t)v624._rawValue + 792, v515, v88, v83, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_23AC2C700;
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_23AC2C710;
  *(void *)(v90 + 32) = 0xD000000000000025;
  *(void *)(v90 + 40) = 0x800000023AC38370;
  *(void *)(v90 + 48) = 0xD000000000000023;
  *(void *)(v90 + 56) = 0x800000023AC383A0;
  *(void *)(v89 + 32) = v90;
  *(unsigned char *)(v89 + 40) = 0;
  uint64_t v91 = swift_allocObject();
  *(_OWORD *)(v91 + 16) = xmmword_23AC2C700;
  *(void *)(v91 + 32) = 0xD000000000000036;
  *(void *)(v91 + 40) = 0x800000023AC383D0;
  *(unsigned char *)(v91 + 48) = 0;
  uint64_t v92 = swift_allocObject();
  *(_OWORD *)(v92 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v92 + 32) = 84017408;
  *(unsigned char *)(v92 + 36) = 8;
  uint64_t v579 = sub_23AB60324(v92, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v571 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v571 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v93 + 32) = 3;
  uint64_t v94 = sub_23AB60324(v93, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v95 = swift_allocObject();
  *(_OWORD *)(v95 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v95 + 32) = 16;
  uint64_t v96 = sub_23AB60324(v95, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v97.value._countAndFlagsBits = 0xD000000000000010;
  v97.value._object = (void *)0x800000023AC38430;
  Action.init(_:mac:)(v97, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v98 = sub_23ABBFBD4();
  char v99 = sub_23ABB8BA8();
  char v100 = sub_23ABBFBE0();
  uint64_t v101 = sub_23ABBFBE8();
  *((void *)&v516 + 1) = v94;
  *(void *)&long long v516 = v571;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC38410, v89, v91, v98, v99 & 1, v100 & 1, v579, (uint64_t)v624._rawValue + 944, v516, v101, v96, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = xmmword_23AC2C700;
  uint64_t v103 = swift_allocObject();
  *(_OWORD *)(v103 + 16) = xmmword_23AC2C710;
  *(void *)(v103 + 32) = 0xD00000000000001FLL;
  *(void *)(v103 + 40) = 0x800000023AC38450;
  *(void *)(v103 + 48) = 0xD00000000000001DLL;
  *(void *)(v103 + 56) = 0x800000023AC38470;
  *(void *)(v102 + 32) = v103;
  *(unsigned char *)(v102 + 40) = 0;
  uint64_t v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_23AC2C700;
  *(void *)(v104 + 32) = 0xD000000000000030;
  *(void *)(v104 + 40) = 0x800000023AC38490;
  *(unsigned char *)(v104 + 48) = 0;
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v105 + 32) = 84017408;
  *(unsigned char *)(v105 + 36) = 8;
  uint64_t v593 = sub_23AB60324(v105, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v580 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v580 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v106 = swift_allocObject();
  *(_OWORD *)(v106 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v106 + 32) = 3;
  uint64_t v107 = sub_23AB60324(v106, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v108 = swift_allocObject();
  *(_OWORD *)(v108 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v108 + 32) = 16;
  uint64_t v109 = sub_23AB60324(v108, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v110.value._countAndFlagsBits = 0x4F646E456F546F67;
  v110.value._object = (void *)0xEE003A64726F5766;
  Action.init(_:mac:)(v110, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v111 = sub_23ABBFBD4();
  char v112 = sub_23ABB8BA8();
  char v113 = sub_23ABBFBE0();
  uint64_t v114 = sub_23ABBFBE8();
  *((void *)&v517 + 1) = v107;
  *(void *)&long long v517 = v580;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC384D0, v102, v104, v111, v112 & 1, v113 & 1, v593, (uint64_t)v624._rawValue + 1096, v517, v114, v109, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v115 = swift_allocObject();
  *(_OWORD *)(v115 + 16) = xmmword_23AC2C700;
  uint64_t v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = xmmword_23AC2C710;
  *(void *)(v116 + 32) = 0xD000000000000029;
  *(void *)(v116 + 40) = 0x800000023AC384F0;
  *(void *)(v116 + 48) = 0xD000000000000027;
  *(void *)(v116 + 56) = 0x800000023AC38520;
  *(void *)(v115 + 32) = v116;
  *(unsigned char *)(v115 + 40) = 0;
  uint64_t v117 = swift_allocObject();
  *(_OWORD *)(v117 + 16) = xmmword_23AC2C700;
  *(void *)(v117 + 32) = 0xD000000000000044;
  *(void *)(v117 + 40) = 0x800000023AC38550;
  *(unsigned char *)(v117 + 48) = 0;
  uint64_t v118 = swift_allocObject();
  *(_OWORD *)(v118 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v118 + 32) = 84017408;
  *(unsigned char *)(v118 + 36) = 8;
  uint64_t v581 = sub_23AB60324(v118, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v572 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v572 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v119 + 32) = 3;
  uint64_t v120 = sub_23AB60324(v119, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v121 = swift_allocObject();
  *(_OWORD *)(v121 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v121 + 32) = 16;
  uint64_t v122 = sub_23AB60324(v121, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v123.value._object = (void *)0x800000023AC385C0;
  v123.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v123, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v124 = sub_23ABBFBD4();
  char v125 = sub_23ABB8BA8();
  char v126 = sub_23ABBFBE0();
  uint64_t v127 = sub_23ABBFBE8();
  *((void *)&v518 + 1) = v120;
  *(void *)&long long v518 = v572;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC385A0, v115, v117, v124, v125 & 1, v126 & 1, v581, (uint64_t)v624._rawValue + 1248, v518, v127, v122, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v128 = swift_allocObject();
  *(_OWORD *)(v128 + 16) = xmmword_23AC2C700;
  uint64_t v129 = swift_allocObject();
  *(_OWORD *)(v129 + 16) = xmmword_23AC2C710;
  *(void *)(v129 + 32) = 0xD000000000000023;
  *(void *)(v129 + 40) = 0x800000023AC385E0;
  *(void *)(v129 + 48) = 0xD000000000000021;
  *(void *)(v129 + 56) = 0x800000023AC38610;
  *(void *)(v128 + 32) = v129;
  *(unsigned char *)(v128 + 40) = 0;
  uint64_t v130 = swift_allocObject();
  *(_OWORD *)(v130 + 16) = xmmword_23AC2C700;
  *(void *)(v130 + 32) = 0xD000000000000042;
  *(void *)(v130 + 40) = 0x800000023AC38640;
  *(unsigned char *)(v130 + 48) = 0;
  uint64_t v131 = swift_allocObject();
  *(_OWORD *)(v131 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v131 + 32) = 84017408;
  *(unsigned char *)(v131 + 36) = 8;
  uint64_t v594 = sub_23AB60324(v131, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v582 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v582 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v132 + 32) = 3;
  uint64_t v133 = sub_23AB60324(v132, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v134 = swift_allocObject();
  *(_OWORD *)(v134 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v134 + 32) = 16;
  uint64_t v135 = sub_23AB60324(v134, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v136.value._object = (void *)0x800000023AC386B0;
  v136.value._countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v136, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v137 = sub_23ABBFBD4();
  char v138 = sub_23ABB8BA8();
  char v139 = sub_23ABBFBE0();
  uint64_t v140 = sub_23ABBFBE8();
  *((void *)&v519 + 1) = v133;
  *(void *)&long long v519 = v582;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC38690, v128, v130, v137, v138 & 1, v139 & 1, v594, (uint64_t)v624._rawValue + 1400, v519, v140, v135, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v141 = swift_allocObject();
  *(_OWORD *)(v141 + 16) = xmmword_23AC2C700;
  uint64_t v142 = swift_allocObject();
  *(_OWORD *)(v142 + 16) = xmmword_23AC2C710;
  *(void *)(v142 + 32) = 0xD00000000000002ALL;
  *(void *)(v142 + 40) = 0x800000023AC386D0;
  *(void *)(v142 + 48) = 0xD000000000000028;
  *(void *)(v142 + 56) = 0x800000023AC38700;
  *(void *)(v141 + 32) = v142;
  *(unsigned char *)(v141 + 40) = 0;
  uint64_t v143 = swift_allocObject();
  *(_OWORD *)(v143 + 16) = xmmword_23AC2C700;
  *(void *)(v143 + 32) = 0xD00000000000003BLL;
  *(void *)(v143 + 40) = 0x800000023AC38730;
  *(unsigned char *)(v143 + 48) = 0;
  uint64_t v144 = swift_allocObject();
  *(_OWORD *)(v144 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v144 + 32) = 84017408;
  *(unsigned char *)(v144 + 36) = 8;
  uint64_t v573 = sub_23AB60324(v144, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v567 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v567 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v145 = swift_allocObject();
  *(_OWORD *)(v145 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v145 + 32) = 3;
  uint64_t v146 = sub_23AB60324(v145, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v147 = swift_allocObject();
  *(_OWORD *)(v147 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v147 + 32) = 16;
  uint64_t v148 = sub_23AB60324(v147, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v149.value._countAndFlagsBits = 0xD000000000000015;
  v149.value._object = (void *)0x800000023AC38790;
  Action.init(_:mac:)(v149, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v150 = sub_23ABBFBD4();
  char v151 = sub_23ABB8BA8();
  char v152 = sub_23ABBFBE0();
  uint64_t v153 = sub_23ABBFBE8();
  *((void *)&v520 + 1) = v146;
  *(void *)&long long v520 = v567;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC38770, v141, v143, v150, v151 & 1, v152 & 1, v573, (uint64_t)v624._rawValue + 1552, v520, v153, v148, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v154 = swift_allocObject();
  *(_OWORD *)(v154 + 16) = xmmword_23AC2C700;
  uint64_t v155 = swift_allocObject();
  *(_OWORD *)(v155 + 16) = xmmword_23AC2C710;
  *(void *)(v155 + 32) = 0xD000000000000024;
  *(void *)(v155 + 40) = 0x800000023AC387B0;
  *(void *)(v155 + 48) = 0xD000000000000022;
  *(void *)(v155 + 56) = 0x800000023AC387E0;
  *(void *)(v154 + 32) = v155;
  *(unsigned char *)(v154 + 40) = 0;
  uint64_t v156 = swift_allocObject();
  *(_OWORD *)(v156 + 16) = xmmword_23AC2C700;
  *(void *)(v156 + 32) = 0xD000000000000035;
  *(void *)(v156 + 40) = 0x800000023AC38810;
  *(unsigned char *)(v156 + 48) = 0;
  uint64_t v157 = swift_allocObject();
  *(_OWORD *)(v157 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v157 + 32) = 84017408;
  *(unsigned char *)(v157 + 36) = 8;
  uint64_t v583 = sub_23AB60324(v157, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v574 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v574 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v158 = swift_allocObject();
  *(_OWORD *)(v158 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v158 + 32) = 3;
  uint64_t v159 = sub_23AB60324(v158, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v160 = swift_allocObject();
  *(_OWORD *)(v160 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v160 + 32) = 16;
  uint64_t v161 = sub_23AB60324(v160, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v162.value._object = (void *)0x800000023AC38870;
  v162.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v162, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v163 = sub_23ABBFBD4();
  char v164 = sub_23ABB8BA8();
  char v165 = sub_23ABBFBE0();
  uint64_t v166 = sub_23ABBFBE8();
  *((void *)&v521 + 1) = v159;
  *(void *)&long long v521 = v574;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC38850, v154, v156, v163, v164 & 1, v165 & 1, v583, (uint64_t)v624._rawValue + 1704, v521, v166, v161, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v167 = swift_allocObject();
  *(_OWORD *)(v167 + 16) = xmmword_23AC2C700;
  uint64_t v168 = swift_allocObject();
  *(_OWORD *)(v168 + 16) = xmmword_23AC2C710;
  *(void *)(v168 + 32) = 0xD000000000000025;
  *(void *)(v168 + 40) = 0x800000023AC38890;
  *(void *)(v168 + 48) = 0xD000000000000023;
  *(void *)(v168 + 56) = 0x800000023AC388C0;
  *(void *)(v167 + 32) = v168;
  *(unsigned char *)(v167 + 40) = 0;
  uint64_t v169 = swift_allocObject();
  *(_OWORD *)(v169 + 16) = xmmword_23AC2C700;
  *(void *)(v169 + 32) = 0xD000000000000036;
  *(void *)(v169 + 40) = 0x800000023AC388F0;
  *(unsigned char *)(v169 + 48) = 0;
  uint64_t v170 = swift_allocObject();
  *(_OWORD *)(v170 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v170 + 32) = 84017408;
  *(unsigned char *)(v170 + 36) = 8;
  uint64_t v584 = sub_23AB60324(v170, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v575 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v575 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v171 = swift_allocObject();
  *(_OWORD *)(v171 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v171 + 32) = 3;
  uint64_t v172 = sub_23AB60324(v171, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v173 = swift_allocObject();
  *(_OWORD *)(v173 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v173 + 32) = 16;
  uint64_t v174 = sub_23AB60324(v173, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v175.value._object = (void *)0x800000023AC38950;
  v175.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v175, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v176 = sub_23ABBFBD4();
  char v177 = sub_23ABB8BA8();
  char v178 = sub_23ABBFBE0();
  uint64_t v179 = sub_23ABBFBE8();
  *((void *)&v522 + 1) = v172;
  *(void *)&long long v522 = v575;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC38930, v167, v169, v176, v177 & 1, v178 & 1, v584, (uint64_t)v624._rawValue + 1856, v522, v179, v174, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v180 = swift_allocObject();
  *(_OWORD *)(v180 + 16) = xmmword_23AC2C700;
  uint64_t v181 = swift_allocObject();
  *(_OWORD *)(v181 + 16) = xmmword_23AC2C710;
  *(void *)(v181 + 32) = 0xD00000000000001FLL;
  *(void *)(v181 + 40) = 0x800000023AC38970;
  *(void *)(v181 + 48) = 0xD00000000000001DLL;
  *(void *)(v181 + 56) = 0x800000023AC38990;
  *(void *)(v180 + 32) = v181;
  *(unsigned char *)(v180 + 40) = 0;
  uint64_t v182 = swift_allocObject();
  *(_OWORD *)(v182 + 16) = xmmword_23AC2C700;
  *(void *)(v182 + 32) = 0xD000000000000030;
  *(void *)(v182 + 40) = 0x800000023AC389B0;
  *(unsigned char *)(v182 + 48) = 0;
  uint64_t v183 = swift_allocObject();
  *(_OWORD *)(v183 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v183 + 32) = 84017408;
  *(unsigned char *)(v183 + 36) = 8;
  uint64_t v603 = sub_23AB60324(v183, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v595 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v595 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v184 = swift_allocObject();
  *(_OWORD *)(v184 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v184 + 32) = 3;
  uint64_t v185 = sub_23AB60324(v184, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v186 = swift_allocObject();
  *(_OWORD *)(v186 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v186 + 32) = 16;
  uint64_t v187 = sub_23AB60324(v186, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v188.value._countAndFlagsBits = 0x4F646E456F546F67;
  v188.value._object = (void *)0xEE003A656E694C66;
  Action.init(_:mac:)(v188, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v189 = sub_23ABBFBD4();
  char v190 = sub_23ABB8BA8();
  char v191 = sub_23ABBFBE0();
  uint64_t v192 = sub_23ABBFBE8();
  *((void *)&v523 + 1) = v185;
  *(void *)&long long v523 = v595;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC389F0, v180, v182, v189, v190 & 1, v191 & 1, v603, (uint64_t)v624._rawValue + 2008, v523, v192, v187, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v193 = swift_allocObject();
  *(_OWORD *)(v193 + 16) = xmmword_23AC2C700;
  uint64_t v194 = swift_allocObject();
  *(_OWORD *)(v194 + 16) = xmmword_23AC2C710;
  *(void *)(v194 + 32) = 0xD00000000000002ALL;
  *(void *)(v194 + 40) = 0x800000023AC38A10;
  *(void *)(v194 + 48) = 0xD000000000000028;
  *(void *)(v194 + 56) = 0x800000023AC38A40;
  *(void *)(v193 + 32) = v194;
  *(unsigned char *)(v193 + 40) = 0;
  uint64_t v195 = swift_allocObject();
  *(_OWORD *)(v195 + 16) = xmmword_23AC2C700;
  *(void *)(v195 + 32) = 0xD00000000000003FLL;
  *(void *)(v195 + 40) = 0x800000023AC38A70;
  *(unsigned char *)(v195 + 48) = 0;
  uint64_t v196 = swift_allocObject();
  *(_OWORD *)(v196 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v196 + 32) = 84017408;
  *(unsigned char *)(v196 + 36) = 8;
  uint64_t v604 = sub_23AB60324(v196, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v596 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v596 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v197 = swift_allocObject();
  *(_OWORD *)(v197 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v197 + 32) = 3;
  uint64_t v198 = sub_23AB60324(v197, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v199 = swift_allocObject();
  *(_OWORD *)(v199 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v199 + 32) = 16;
  uint64_t v200 = sub_23AB60324(v199, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v201.value._object = (void *)0x800000023AC38AD0;
  v201.value._countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v201, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v202 = sub_23ABBFBD4();
  char v203 = sub_23ABB8BA8();
  char v204 = sub_23ABBFBE0();
  uint64_t v205 = sub_23ABBFBE8();
  *((void *)&v524 + 1) = v198;
  *(void *)&long long v524 = v596;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC38AB0, v193, v195, v202, v203 & 1, v204 & 1, v604, (uint64_t)v624._rawValue + 2160, v524, v205, v200, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v206 = swift_allocObject();
  *(_OWORD *)(v206 + 16) = xmmword_23AC2C700;
  uint64_t v207 = swift_allocObject();
  *(_OWORD *)(v207 + 16) = xmmword_23AC2C710;
  *(void *)(v207 + 32) = 0xD000000000000024;
  *(void *)(v207 + 40) = 0x800000023AC38AF0;
  *(void *)(v207 + 48) = 0xD000000000000022;
  *(void *)(v207 + 56) = 0x800000023AC38B20;
  *(void *)(v206 + 32) = v207;
  *(unsigned char *)(v206 + 40) = 0;
  uint64_t v208 = swift_allocObject();
  *(_OWORD *)(v208 + 16) = xmmword_23AC2C700;
  *(void *)(v208 + 32) = 0xD000000000000039;
  *(void *)(v208 + 40) = 0x800000023AC38B50;
  *(unsigned char *)(v208 + 48) = 0;
  uint64_t v209 = swift_allocObject();
  *(_OWORD *)(v209 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v209 + 32) = 84017408;
  *(unsigned char *)(v209 + 36) = 8;
  uint64_t v620 = sub_23AB60324(v209, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v615 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v615 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v210 = swift_allocObject();
  *(_OWORD *)(v210 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v210 + 32) = 3;
  uint64_t v211 = sub_23AB60324(v210, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v212 = swift_allocObject();
  *(_OWORD *)(v212 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v212 + 32) = 16;
  uint64_t v213 = sub_23AB60324(v212, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v214.value._object = (void *)0x800000023AC38BB0;
  v214.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v214, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v215 = sub_23ABBFBD4();
  char v216 = sub_23ABB8BA8();
  char v217 = sub_23ABBFBE0();
  uint64_t v218 = sub_23ABBFBE8();
  *((void *)&v525 + 1) = v211;
  *(void *)&long long v525 = v615;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC38B90, v206, v208, v215, v216 & 1, v217 & 1, v620, (uint64_t)v624._rawValue + 2312, v525, v218, v213, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v219 = swift_allocObject();
  *(_OWORD *)(v219 + 16) = xmmword_23AC2C700;
  uint64_t v220 = swift_allocObject();
  *(_OWORD *)(v220 + 16) = xmmword_23AC2C730;
  *(void *)(v220 + 32) = 0xD000000000000042;
  *(void *)(v220 + 40) = 0x800000023AC38BD0;
  *(void *)(v220 + 48) = 0xD00000000000001FLL;
  *(void *)(v220 + 56) = 0x800000023AC38C20;
  *(void *)(v220 + 64) = 0xD000000000000021;
  *(void *)(v220 + 72) = 0x800000023AC38C40;
  *(void *)(v219 + 32) = v220;
  *(unsigned char *)(v219 + 40) = 0;
  uint64_t v221 = swift_allocObject();
  *(_OWORD *)(v221 + 16) = xmmword_23AC2C700;
  *(void *)(v221 + 32) = 0xD000000000000054;
  *(void *)(v221 + 40) = 0x800000023AC38C70;
  *(unsigned char *)(v221 + 48) = 0;
  uint64_t v222 = swift_allocObject();
  *(_OWORD *)(v222 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v222 + 32) = 84017408;
  *(unsigned char *)(v222 + 36) = 8;
  uint64_t v618 = sub_23AB60324(v222, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v223 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v223 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v224 = swift_allocObject();
  *(_OWORD *)(v224 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v224 + 32) = 3;
  uint64_t v225 = sub_23AB60324(v224, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v226 = swift_allocObject();
  *(_OWORD *)(v226 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v226 + 32) = 16;
  uint64_t v227 = sub_23AB60324(v226, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v228.value._countAndFlagsBits = 0xD000000000000029;
  v228.value._object = (void *)0x800000023AC38D00;
  Action.init(_:mac:)(v228, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v229 = sub_23ABBFBD4();
  char v230 = sub_23ABB8BA8();
  char v231 = sub_23ABBFBE0();
  uint64_t v232 = sub_23ABBFBE8();
  *(void *)&long long v526 = v223;
  *((void *)&v526 + 1) = v225;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002DLL, 0x800000023AC38CD0, v219, v221, v229, v230 & 1, v231 & 1, v618, (uint64_t)v624._rawValue + 2464, v526, v232, v227, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v233 = swift_allocObject();
  *(_OWORD *)(v233 + 16) = xmmword_23AC2C700;
  uint64_t v234 = swift_allocObject();
  *(_OWORD *)(v234 + 16) = xmmword_23AC2C750;
  *(void *)(v234 + 32) = 0xD00000000000003FLL;
  *(void *)(v234 + 40) = 0x800000023AC38D30;
  *(void *)(v234 + 48) = 0xD000000000000043;
  *(void *)(v234 + 56) = 0x800000023AC38D70;
  *(void *)(v234 + 64) = 0xD00000000000001CLL;
  *(void *)(v234 + 72) = 0x800000023AC38DC0;
  *(void *)(v234 + 80) = 0xD00000000000001ELL;
  *(void *)(v234 + 88) = 0x800000023AC38DE0;
  *(void *)(v234 + 96) = 0xD000000000000020;
  *(void *)(v234 + 104) = 0x800000023AC38E00;
  *(void *)(v234 + 112) = 0xD000000000000022;
  *(void *)(v234 + 120) = 0x800000023AC38E30;
  *(void *)(v233 + 32) = v234;
  *(unsigned char *)(v233 + 40) = 0;
  uint64_t v235 = swift_allocObject();
  *(_OWORD *)(v235 + 16) = xmmword_23AC2C700;
  *(void *)(v235 + 32) = 0xD000000000000055;
  *(void *)(v235 + 40) = 0x800000023AC38E60;
  *(unsigned char *)(v235 + 48) = 0;
  uint64_t v236 = swift_allocObject();
  *(_OWORD *)(v236 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v236 + 32) = 84017408;
  *(unsigned char *)(v236 + 36) = 8;
  uint64_t v597 = sub_23AB60324(v236, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v568 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v568 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v237 = swift_allocObject();
  *(_OWORD *)(v237 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v237 + 32) = 3;
  uint64_t v238 = sub_23AB60324(v237, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v239 = swift_allocObject();
  *(_OWORD *)(v239 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v239 + 32) = 16;
  uint64_t v240 = sub_23AB60324(v239, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v241.value._countAndFlagsBits = 0xD00000000000002ALL;
  v241.value._object = (void *)0x800000023AC38EF0;
  Action.init(_:mac:)(v241, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v242 = sub_23ABBFBD4();
  char v243 = sub_23ABB8BA8();
  char v244 = sub_23ABBFBE0();
  uint64_t v245 = sub_23ABBFBE8();
  *((void *)&v527 + 1) = v238;
  *(void *)&long long v527 = v568;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ELL, 0x800000023AC38EC0, v233, v235, v242, v243 & 1, v244 & 1, v597, (uint64_t)v624._rawValue + 2616, v527, v245, v240, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v246 = swift_allocObject();
  *(_OWORD *)(v246 + 16) = xmmword_23AC2C700;
  uint64_t v247 = swift_allocObject();
  *(_OWORD *)(v247 + 16) = xmmword_23AC2C730;
  *(void *)(v247 + 32) = 0xD00000000000003DLL;
  *(void *)(v247 + 40) = 0x800000023AC38F20;
  *(void *)(v247 + 48) = 0xD00000000000001ALL;
  *(void *)(v247 + 56) = 0x800000023AC38F60;
  *(void *)(v247 + 64) = 0xD00000000000001ALL;
  *(void *)(v247 + 72) = 0x800000023AC38F80;
  *(void *)(v246 + 32) = v247;
  *(unsigned char *)(v246 + 40) = 0;
  uint64_t v248 = swift_allocObject();
  *(_OWORD *)(v248 + 16) = xmmword_23AC2C700;
  *(void *)(v248 + 32) = 0x1000000000000073;
  *(void *)(v248 + 40) = 0x800000023AC38FA0;
  *(unsigned char *)(v248 + 48) = 0;
  uint64_t v249 = swift_allocObject();
  *(_OWORD *)(v249 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v249 + 32) = 84017408;
  *(unsigned char *)(v249 + 36) = 8;
  uint64_t v585 = sub_23AB60324(v249, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v565 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v565 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v250 = swift_allocObject();
  *(_OWORD *)(v250 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v250 + 32) = 3;
  uint64_t v251 = sub_23AB60324(v250, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v252 = swift_allocObject();
  *(_OWORD *)(v252 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v252 + 32) = 16;
  uint64_t v253 = sub_23AB60324(v252, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v254.value._countAndFlagsBits = 0xD000000000000024;
  v254.value._object = (void *)0x800000023AC39050;
  Action.init(_:mac:)(v254, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v255 = sub_23ABBFBD4();
  char v256 = sub_23ABB8BA8();
  char v257 = sub_23ABBFBE0();
  uint64_t v258 = sub_23ABBFBE8();
  *((void *)&v528 + 1) = v251;
  *(void *)&long long v528 = v565;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000028, 0x800000023AC39020, v246, v248, v255, v256 & 1, v257 & 1, v585, (uint64_t)v624._rawValue + 2768, v528, v258, v253, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v259 = swift_allocObject();
  *(_OWORD *)(v259 + 16) = xmmword_23AC2C700;
  uint64_t v260 = swift_allocObject();
  *(_OWORD *)(v260 + 16) = xmmword_23AC2C750;
  *(void *)(v260 + 32) = 0xD00000000000003ALL;
  *(void *)(v260 + 40) = 0x800000023AC39080;
  *(void *)(v260 + 48) = 0xD00000000000003ELL;
  *(void *)(v260 + 56) = 0x800000023AC390C0;
  *(void *)(v260 + 64) = 0xD000000000000017;
  *(void *)(v260 + 72) = 0x800000023AC39100;
  *(void *)(v260 + 80) = 0xD000000000000017;
  *(void *)(v260 + 88) = 0x800000023AC39120;
  *(void *)(v260 + 96) = 0xD00000000000001BLL;
  *(void *)(v260 + 104) = 0x800000023AC39140;
  *(void *)(v260 + 112) = 0xD00000000000001BLL;
  *(void *)(v260 + 120) = 0x800000023AC39160;
  *(void *)(v259 + 32) = v260;
  *(unsigned char *)(v259 + 40) = 0;
  uint64_t v261 = swift_allocObject();
  *(_OWORD *)(v261 + 16) = xmmword_23AC2C700;
  *(void *)(v261 + 32) = 0x1000000000000074;
  *(void *)(v261 + 40) = 0x800000023AC39180;
  *(unsigned char *)(v261 + 48) = 0;
  uint64_t v262 = swift_allocObject();
  *(_OWORD *)(v262 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v262 + 32) = 84017408;
  *(unsigned char *)(v262 + 36) = 8;
  uint64_t v576 = sub_23AB60324(v262, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v563 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v563 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v263 = swift_allocObject();
  *(_OWORD *)(v263 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v263 + 32) = 3;
  uint64_t v264 = sub_23AB60324(v263, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v265 = swift_allocObject();
  *(_OWORD *)(v265 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v265 + 32) = 16;
  uint64_t v266 = sub_23AB60324(v265, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v267.value._countAndFlagsBits = 0xD000000000000025;
  v267.value._object = (void *)0x800000023AC39230;
  Action.init(_:mac:)(v267, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v268 = sub_23ABBFBD4();
  char v269 = sub_23ABB8BA8();
  char v270 = sub_23ABBFBE0();
  uint64_t v271 = sub_23ABBFBE8();
  *((void *)&v529 + 1) = v264;
  *(void *)&long long v529 = v563;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000029, 0x800000023AC39200, v259, v261, v268, v269 & 1, v270 & 1, v576, (uint64_t)v624._rawValue + 2920, v529, v271, v266, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v272 = swift_allocObject();
  *(_OWORD *)(v272 + 16) = xmmword_23AC2C700;
  uint64_t v273 = swift_allocObject();
  *(_OWORD *)(v273 + 16) = xmmword_23AC2C730;
  *(void *)(v273 + 32) = 0xD000000000000041;
  *(void *)(v273 + 40) = 0x800000023AC39260;
  *(void *)(v273 + 48) = 0xD00000000000001ELL;
  *(void *)(v273 + 56) = 0x800000023AC392B0;
  *(void *)(v273 + 64) = 0xD00000000000001ELL;
  *(void *)(v273 + 72) = 0x800000023AC392D0;
  *(void *)(v272 + 32) = v273;
  *(unsigned char *)(v272 + 40) = 0;
  uint64_t v274 = swift_allocObject();
  *(_OWORD *)(v274 + 16) = xmmword_23AC2C700;
  *(void *)(v274 + 32) = 0x100000000000007BLL;
  *(void *)(v274 + 40) = 0x800000023AC392F0;
  *(unsigned char *)(v274 + 48) = 0;
  uint64_t v275 = swift_allocObject();
  *(_OWORD *)(v275 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v275 + 32) = 84017408;
  *(unsigned char *)(v275 + 36) = 8;
  uint64_t v569 = sub_23AB60324(v275, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v566 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v566 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v276 = swift_allocObject();
  *(_OWORD *)(v276 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v276 + 32) = 3;
  uint64_t v277 = sub_23AB60324(v276, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v278 = swift_allocObject();
  *(_OWORD *)(v278 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v278 + 32) = 16;
  uint64_t v279 = sub_23AB60324(v278, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v280.value._countAndFlagsBits = 0xD000000000000028;
  v280.value._object = (void *)0x800000023AC393A0;
  Action.init(_:mac:)(v280, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v281 = sub_23ABBFBD4();
  char v282 = sub_23ABB8BA8();
  char v283 = sub_23ABBFBE0();
  uint64_t v284 = sub_23ABBFBE8();
  *((void *)&v530 + 1) = v277;
  *(void *)&long long v530 = v566;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002CLL, 0x800000023AC39370, v272, v274, v281, v282 & 1, v283 & 1, v569, (uint64_t)v624._rawValue + 3072, v530, v284, v279, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v285 = swift_allocObject();
  *(_OWORD *)(v285 + 16) = xmmword_23AC2C700;
  uint64_t v286 = swift_allocObject();
  *(_OWORD *)(v286 + 16) = xmmword_23AC2C750;
  *(void *)(v286 + 32) = 0xD00000000000003ELL;
  *(void *)(v286 + 40) = 0x800000023AC393D0;
  *(void *)(v286 + 48) = 0xD000000000000042;
  *(void *)(v286 + 56) = 0x800000023AC39410;
  *(void *)(v286 + 64) = 0xD00000000000001BLL;
  *(void *)(v286 + 72) = 0x800000023AC39460;
  *(void *)(v286 + 80) = 0xD00000000000001BLL;
  *(void *)(v286 + 88) = 0x800000023AC39480;
  *(void *)(v286 + 96) = 0xD00000000000001FLL;
  *(void *)(v286 + 104) = 0x800000023AC394A0;
  *(void *)(v286 + 112) = 0xD00000000000001FLL;
  *(void *)(v286 + 120) = 0x800000023AC394C0;
  *(void *)(v285 + 32) = v286;
  *(unsigned char *)(v285 + 40) = 0;
  uint64_t v287 = swift_allocObject();
  *(_OWORD *)(v287 + 16) = xmmword_23AC2C700;
  *(void *)(v287 + 32) = 0x100000000000007CLL;
  *(void *)(v287 + 40) = 0x800000023AC394E0;
  *(unsigned char *)(v287 + 48) = 0;
  uint64_t v288 = swift_allocObject();
  *(_OWORD *)(v288 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v288 + 32) = 84017408;
  *(unsigned char *)(v288 + 36) = 8;
  uint64_t v550 = sub_23AB60324(v288, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v564 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v564 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v289 = swift_allocObject();
  *(_OWORD *)(v289 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v289 + 32) = 3;
  uint64_t v290 = sub_23AB60324(v289, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v291 = swift_allocObject();
  *(_OWORD *)(v291 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v291 + 32) = 16;
  uint64_t v292 = sub_23AB60324(v291, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v293.value._countAndFlagsBits = 0xD000000000000029;
  v293.value._object = (void *)0x800000023AC39590;
  Action.init(_:mac:)(v293, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v294 = sub_23ABBFBD4();
  char v295 = sub_23ABB8BA8();
  char v296 = sub_23ABBFBE0();
  uint64_t v297 = sub_23ABBFBE8();
  *((void *)&v531 + 1) = v290;
  *(void *)&long long v531 = v564;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002DLL, 0x800000023AC39560, v285, v287, v294, v295 & 1, v296 & 1, v550, (uint64_t)v624._rawValue + 3224, v531, v297, v292, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v298 = swift_allocObject();
  *(_OWORD *)(v298 + 16) = xmmword_23AC2C700;
  uint64_t v299 = swift_allocObject();
  *(_OWORD *)(v299 + 16) = xmmword_23AC2C730;
  *(void *)(v299 + 32) = 0xD000000000000042;
  *(void *)(v299 + 40) = 0x800000023AC395C0;
  *(void *)(v299 + 48) = 0xD00000000000001FLL;
  *(void *)(v299 + 56) = 0x800000023AC39610;
  *(void *)(v299 + 64) = 0xD00000000000001FLL;
  *(void *)(v299 + 72) = 0x800000023AC39630;
  *(void *)(v298 + 32) = v299;
  *(unsigned char *)(v298 + 40) = 0;
  uint64_t v300 = swift_allocObject();
  *(_OWORD *)(v300 + 16) = xmmword_23AC2C700;
  *(void *)(v300 + 32) = 0x100000000000007DLL;
  *(void *)(v300 + 40) = 0x800000023AC39650;
  *(unsigned char *)(v300 + 48) = 0;
  uint64_t v301 = swift_allocObject();
  *(_OWORD *)(v301 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v301 + 32) = 84017408;
  *(unsigned char *)(v301 + 36) = 8;
  uint64_t v557 = sub_23AB60324(v301, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v551 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v551 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v302 = swift_allocObject();
  *(_OWORD *)(v302 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v302 + 32) = 3;
  uint64_t v303 = sub_23AB60324(v302, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v304 = swift_allocObject();
  *(_OWORD *)(v304 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v304 + 32) = 16;
  uint64_t v305 = sub_23AB60324(v304, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v306.value._object = (void *)0x800000023AC39700;
  v306.value._countAndFlagsBits = 0xD000000000000029;
  Action.init(_:mac:)(v306, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v307 = sub_23ABBFBD4();
  char v308 = sub_23ABB8BA8();
  char v309 = sub_23ABBFBE0();
  uint64_t v310 = sub_23ABBFBE8();
  *((void *)&v532 + 1) = v303;
  *(void *)&long long v532 = v551;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002DLL, 0x800000023AC396D0, v298, v300, v307, v308 & 1, v309 & 1, v557, (uint64_t)v624._rawValue + 3376, v532, v310, v305, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v311 = swift_allocObject();
  *(_OWORD *)(v311 + 16) = xmmword_23AC2C700;
  uint64_t v312 = swift_allocObject();
  *(_OWORD *)(v312 + 16) = xmmword_23AC2C750;
  *(void *)(v312 + 32) = 0xD00000000000003FLL;
  *(void *)(v312 + 40) = 0x800000023AC39730;
  *(void *)(v312 + 48) = 0xD000000000000043;
  *(void *)(v312 + 56) = 0x800000023AC39770;
  *(void *)(v312 + 64) = 0xD00000000000001CLL;
  *(void *)(v312 + 72) = 0x800000023AC397C0;
  *(void *)(v312 + 80) = 0xD00000000000001CLL;
  *(void *)(v312 + 88) = 0x800000023AC397E0;
  *(void *)(v312 + 96) = 0xD000000000000020;
  *(void *)(v312 + 104) = 0x800000023AC39800;
  *(void *)(v312 + 112) = 0xD000000000000020;
  *(void *)(v312 + 120) = 0x800000023AC39830;
  *(void *)(v311 + 32) = v312;
  *(unsigned char *)(v311 + 40) = 0;
  uint64_t v313 = swift_allocObject();
  *(_OWORD *)(v313 + 16) = xmmword_23AC2C700;
  *(void *)(v313 + 32) = 0x100000000000007ELL;
  *(void *)(v313 + 40) = 0x800000023AC39860;
  *(unsigned char *)(v313 + 48) = 0;
  uint64_t v314 = swift_allocObject();
  *(_OWORD *)(v314 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v314 + 32) = 84017408;
  *(unsigned char *)(v314 + 36) = 8;
  uint64_t v562 = sub_23AB60324(v314, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v552 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v552 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v315 = swift_allocObject();
  *(_OWORD *)(v315 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v315 + 32) = 3;
  uint64_t v316 = sub_23AB60324(v315, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v317 = swift_allocObject();
  *(_OWORD *)(v317 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v317 + 32) = 16;
  uint64_t v318 = sub_23AB60324(v317, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v319.value._countAndFlagsBits = 0xD00000000000002ALL;
  v319.value._object = (void *)0x800000023AC39910;
  Action.init(_:mac:)(v319, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v320 = sub_23ABBFBD4();
  char v321 = sub_23ABB8BA8();
  char v322 = sub_23ABBFBE0();
  uint64_t v323 = sub_23ABBFBE8();
  *((void *)&v533 + 1) = v316;
  *(void *)&long long v533 = v552;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ELL, 0x800000023AC398E0, v311, v313, v320, v321 & 1, v322 & 1, v562, (uint64_t)v624._rawValue + 3528, v533, v323, v318, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v324 = swift_allocObject();
  *(_OWORD *)(v324 + 16) = xmmword_23AC2C700;
  uint64_t v325 = swift_allocObject();
  *(_OWORD *)(v325 + 16) = xmmword_23AC2C730;
  *(void *)(v325 + 32) = 0xD00000000000003DLL;
  *(void *)(v325 + 40) = 0x800000023AC39940;
  *(void *)(v325 + 48) = 0xD00000000000001ALL;
  *(void *)(v325 + 56) = 0x800000023AC39980;
  *(void *)(v325 + 64) = 0xD00000000000001ALL;
  *(void *)(v325 + 72) = 0x800000023AC399A0;
  *(void *)(v324 + 32) = v325;
  *(unsigned char *)(v324 + 40) = 0;
  uint64_t v326 = swift_allocObject();
  *(_OWORD *)(v326 + 16) = xmmword_23AC2C700;
  *(void *)(v326 + 32) = 0x1000000000000073;
  *(void *)(v326 + 40) = 0x800000023AC399C0;
  *(unsigned char *)(v326 + 48) = 0;
  uint64_t v327 = swift_allocObject();
  *(_OWORD *)(v327 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v327 + 32) = 84017408;
  *(unsigned char *)(v327 + 36) = 8;
  uint64_t v553 = sub_23AB60324(v327, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v548 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v548 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v328 = swift_allocObject();
  *(_OWORD *)(v328 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v328 + 32) = 3;
  uint64_t v329 = sub_23AB60324(v328, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v330 = swift_allocObject();
  *(_OWORD *)(v330 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v330 + 32) = 16;
  uint64_t v331 = sub_23AB60324(v330, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v332.value._countAndFlagsBits = 0xD000000000000024;
  v332.value._object = (void *)0x800000023AC39A70;
  Action.init(_:mac:)(v332, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v333 = sub_23ABBFBD4();
  char v334 = sub_23ABB8BA8();
  char v335 = sub_23ABBFBE0();
  uint64_t v336 = sub_23ABBFBE8();
  *((void *)&v534 + 1) = v329;
  *(void *)&long long v534 = v548;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000028, 0x800000023AC39A40, v324, v326, v333, v334 & 1, v335 & 1, v553, (uint64_t)v624._rawValue + 3680, v534, v336, v331, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v337 = swift_allocObject();
  *(_OWORD *)(v337 + 16) = xmmword_23AC2C700;
  uint64_t v338 = swift_allocObject();
  *(_OWORD *)(v338 + 16) = xmmword_23AC2C750;
  *(void *)(v338 + 32) = 0xD00000000000003ALL;
  *(void *)(v338 + 40) = 0x800000023AC39AA0;
  *(void *)(v338 + 48) = 0xD00000000000003ELL;
  *(void *)(v338 + 56) = 0x800000023AC39AE0;
  *(void *)(v338 + 64) = 0xD000000000000017;
  *(void *)(v338 + 72) = 0x800000023AC39B20;
  *(void *)(v338 + 80) = 0xD000000000000017;
  *(void *)(v338 + 88) = 0x800000023AC39B40;
  *(void *)(v338 + 96) = 0xD00000000000001BLL;
  *(void *)(v338 + 104) = 0x800000023AC39B60;
  *(void *)(v338 + 112) = 0xD00000000000001BLL;
  *(void *)(v338 + 120) = 0x800000023AC39B80;
  *(void *)(v337 + 32) = v338;
  *(unsigned char *)(v337 + 40) = 0;
  uint64_t v339 = swift_allocObject();
  *(_OWORD *)(v339 + 16) = xmmword_23AC2C700;
  *(void *)(v339 + 32) = 0x1000000000000074;
  *(void *)(v339 + 40) = 0x800000023AC39BA0;
  *(unsigned char *)(v339 + 48) = 0;
  uint64_t v340 = swift_allocObject();
  *(_OWORD *)(v340 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v340 + 32) = 84017408;
  *(unsigned char *)(v340 + 36) = 8;
  uint64_t v554 = sub_23AB60324(v340, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v549 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v549 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v341 = swift_allocObject();
  *(_OWORD *)(v341 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v341 + 32) = 3;
  uint64_t v342 = sub_23AB60324(v341, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v343 = swift_allocObject();
  *(_OWORD *)(v343 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v343 + 32) = 16;
  uint64_t v344 = sub_23AB60324(v343, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v345.value._countAndFlagsBits = 0xD000000000000025;
  v345.value._object = (void *)0x800000023AC39C50;
  Action.init(_:mac:)(v345, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v346 = sub_23ABBFBD4();
  char v347 = sub_23ABB8BA8();
  char v348 = sub_23ABBFBE0();
  uint64_t v349 = sub_23ABBFBE8();
  *((void *)&v535 + 1) = v342;
  *(void *)&long long v535 = v549;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000029, 0x800000023AC39C20, v337, v339, v346, v347 & 1, v348 & 1, v554, (uint64_t)v624._rawValue + 3832, v535, v349, v344, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v350 = swift_allocObject();
  *(_OWORD *)(v350 + 16) = xmmword_23AC2C700;
  uint64_t v351 = swift_allocObject();
  *(_OWORD *)(v351 + 16) = xmmword_23AC2C730;
  *(void *)(v351 + 32) = 0xD000000000000040;
  *(void *)(v351 + 40) = 0x800000023AC39C80;
  *(void *)(v351 + 48) = 0xD00000000000001DLL;
  *(void *)(v351 + 56) = 0x800000023AC39CD0;
  *(void *)(v351 + 64) = 0xD00000000000001DLL;
  *(void *)(v351 + 72) = 0x800000023AC39CF0;
  *(void *)(v350 + 32) = v351;
  *(unsigned char *)(v350 + 40) = 0;
  uint64_t v352 = swift_allocObject();
  *(_OWORD *)(v352 + 16) = xmmword_23AC2C700;
  *(void *)(v352 + 32) = 0xD000000000000054;
  *(void *)(v352 + 40) = 0x800000023AC38C70;
  *(unsigned char *)(v352 + 48) = 0;
  uint64_t v353 = swift_allocObject();
  *(_OWORD *)(v353 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v353 + 32) = 84017408;
  *(unsigned char *)(v353 + 36) = 8;
  uint64_t v558 = sub_23AB60324(v353, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v555 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v555 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v354 = swift_allocObject();
  *(_OWORD *)(v354 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v354 + 32) = 3;
  uint64_t v355 = sub_23AB60324(v354, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v356 = swift_allocObject();
  *(_OWORD *)(v356 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v356 + 32) = 16;
  uint64_t v357 = sub_23AB60324(v356, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v358.value._countAndFlagsBits = 0xD000000000000027;
  v358.value._object = (void *)0x800000023AC39D40;
  Action.init(_:mac:)(v358, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v359 = sub_23ABBFBD4();
  char v360 = sub_23ABB8BA8();
  char v361 = sub_23ABBFBE0();
  uint64_t v362 = sub_23ABBFBE8();
  *((void *)&v536 + 1) = v355;
  *(void *)&long long v536 = v555;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC39D10, v350, v352, v359, v360 & 1, v361 & 1, v558, (uint64_t)v624._rawValue + 3984, v536, v362, v357, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v363 = swift_allocObject();
  *(_OWORD *)(v363 + 16) = xmmword_23AC2C700;
  uint64_t v364 = swift_allocObject();
  *(_OWORD *)(v364 + 16) = xmmword_23AC2C730;
  *(void *)(v364 + 32) = 0xD00000000000003FLL;
  *(void *)(v364 + 40) = 0x800000023AC39D70;
  *(void *)(v364 + 48) = 0xD00000000000001CLL;
  *(void *)(v364 + 56) = 0x800000023AC39DB0;
  *(void *)(v364 + 64) = 0xD00000000000001CLL;
  *(void *)(v364 + 72) = 0x800000023AC39DD0;
  *(void *)(v363 + 32) = v364;
  *(unsigned char *)(v363 + 40) = 0;
  uint64_t v365 = swift_allocObject();
  *(_OWORD *)(v365 + 16) = xmmword_23AC2C700;
  *(void *)(v365 + 32) = 0xD000000000000055;
  *(void *)(v365 + 40) = 0x800000023AC38E60;
  *(unsigned char *)(v365 + 48) = 0;
  uint64_t v366 = swift_allocObject();
  *(_OWORD *)(v366 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v366 + 32) = 84017408;
  *(unsigned char *)(v366 + 36) = 8;
  uint64_t v559 = sub_23AB60324(v366, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v556 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v556 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v367 = swift_allocObject();
  *(_OWORD *)(v367 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v367 + 32) = 3;
  uint64_t v368 = sub_23AB60324(v367, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v369 = swift_allocObject();
  *(_OWORD *)(v369 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v369 + 32) = 16;
  uint64_t v370 = sub_23AB60324(v369, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v371.value._countAndFlagsBits = 0xD000000000000026;
  v371.value._object = (void *)0x800000023AC39E20;
  Action.init(_:mac:)(v371, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v372 = sub_23ABBFBD4();
  char v373 = sub_23ABB8BA8();
  char v374 = sub_23ABBFBE0();
  uint64_t v375 = sub_23ABBFBE8();
  *((void *)&v537 + 1) = v368;
  *(void *)&long long v537 = v556;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ALL, 0x800000023AC39DF0, v363, v365, v372, v373 & 1, v374 & 1, v559, (uint64_t)v624._rawValue + 4136, v537, v375, v370, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v376 = swift_allocObject();
  *(_OWORD *)(v376 + 16) = xmmword_23AC2C700;
  uint64_t v377 = swift_allocObject();
  *(_OWORD *)(v377 + 16) = xmmword_23AC2C730;
  *(void *)(v377 + 32) = 0xD00000000000003BLL;
  *(void *)(v377 + 40) = 0x800000023AC39E50;
  *(void *)(v377 + 48) = 0xD000000000000018;
  *(void *)(v377 + 56) = 0x800000023AC39E90;
  *(void *)(v377 + 64) = 0xD000000000000018;
  *(void *)(v377 + 72) = 0x800000023AC39EB0;
  *(void *)(v376 + 32) = v377;
  *(unsigned char *)(v376 + 40) = 0;
  uint64_t v378 = swift_allocObject();
  *(_OWORD *)(v378 + 16) = xmmword_23AC2C700;
  *(void *)(v378 + 32) = 0x1000000000000073;
  *(void *)(v378 + 40) = 0x800000023AC38FA0;
  *(unsigned char *)(v378 + 48) = 0;
  uint64_t v379 = swift_allocObject();
  *(_OWORD *)(v379 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v379 + 32) = 84017408;
  *(unsigned char *)(v379 + 36) = 8;
  uint64_t v561 = sub_23AB60324(v379, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v560 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v560 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v380 = swift_allocObject();
  *(_OWORD *)(v380 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v380 + 32) = 3;
  uint64_t v381 = sub_23AB60324(v380, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v382 = swift_allocObject();
  *(_OWORD *)(v382 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v382 + 32) = 16;
  uint64_t v383 = sub_23AB60324(v382, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v384.value._countAndFlagsBits = 0xD000000000000022;
  v384.value._object = (void *)0x800000023AC39F00;
  Action.init(_:mac:)(v384, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v385 = sub_23ABBFBD4();
  char v386 = sub_23ABB8BA8();
  char v387 = sub_23ABBFBE0();
  uint64_t v388 = sub_23ABBFBE8();
  *((void *)&v538 + 1) = v381;
  *(void *)&long long v538 = v560;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000026, 0x800000023AC39ED0, v376, v378, v385, v386 & 1, v387 & 1, v561, (uint64_t)v624._rawValue + 4288, v538, v388, v383, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v389 = swift_allocObject();
  *(_OWORD *)(v389 + 16) = xmmword_23AC2C700;
  uint64_t v390 = swift_allocObject();
  *(_OWORD *)(v390 + 16) = xmmword_23AC2C730;
  *(void *)(v390 + 32) = 0xD00000000000003ALL;
  *(void *)(v390 + 40) = 0x800000023AC39F30;
  *(void *)(v390 + 48) = 0xD000000000000017;
  *(void *)(v390 + 56) = 0x800000023AC39F70;
  *(void *)(v390 + 64) = 0xD000000000000017;
  *(void *)(v390 + 72) = 0x800000023AC39F90;
  *(void *)(v389 + 32) = v390;
  *(unsigned char *)(v389 + 40) = 0;
  uint64_t v391 = swift_allocObject();
  *(_OWORD *)(v391 + 16) = xmmword_23AC2C700;
  *(void *)(v391 + 32) = 0x1000000000000074;
  *(void *)(v391 + 40) = 0x800000023AC39180;
  *(unsigned char *)(v391 + 48) = 0;
  uint64_t v392 = swift_allocObject();
  *(_OWORD *)(v392 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v392 + 32) = 84017408;
  *(unsigned char *)(v392 + 36) = 8;
  uint64_t v598 = sub_23AB60324(v392, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v586 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v586 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v393 = swift_allocObject();
  *(_OWORD *)(v393 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v393 + 32) = 3;
  uint64_t v394 = sub_23AB60324(v393, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v395 = swift_allocObject();
  *(_OWORD *)(v395 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v395 + 32) = 16;
  uint64_t v396 = sub_23AB60324(v395, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v397.value._countAndFlagsBits = 0xD000000000000021;
  v397.value._object = (void *)0x800000023AC39FE0;
  Action.init(_:mac:)(v397, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v398 = sub_23ABBFBD4();
  char v399 = sub_23ABB8BA8();
  char v400 = sub_23ABBFBE0();
  uint64_t v401 = sub_23ABBFBE8();
  *((void *)&v539 + 1) = v394;
  *(void *)&long long v539 = v586;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC39FB0, v389, v391, v398, v399 & 1, v400 & 1, v598, (uint64_t)v624._rawValue + 4440, v539, v401, v396, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v402 = swift_allocObject();
  *(_OWORD *)(v402 + 16) = xmmword_23AC2C700;
  uint64_t v403 = swift_allocObject();
  *(_OWORD *)(v403 + 16) = xmmword_23AC2C730;
  *(void *)(v403 + 32) = 0xD00000000000003FLL;
  *(void *)(v403 + 40) = 0x800000023AC3A010;
  *(void *)(v403 + 48) = 0xD00000000000001CLL;
  *(void *)(v403 + 56) = 0x800000023AC3A050;
  *(void *)(v403 + 64) = 0xD00000000000001CLL;
  *(void *)(v403 + 72) = 0x800000023AC3A070;
  *(void *)(v402 + 32) = v403;
  *(unsigned char *)(v402 + 40) = 0;
  uint64_t v404 = swift_allocObject();
  *(_OWORD *)(v404 + 16) = xmmword_23AC2C700;
  *(void *)(v404 + 32) = 0x100000000000007BLL;
  *(void *)(v404 + 40) = 0x800000023AC392F0;
  *(unsigned char *)(v404 + 48) = 0;
  uint64_t v405 = swift_allocObject();
  *(_OWORD *)(v405 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v405 + 32) = 84017408;
  *(unsigned char *)(v405 + 36) = 8;
  uint64_t v599 = sub_23AB60324(v405, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v587 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v587 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v406 = swift_allocObject();
  *(_OWORD *)(v406 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v406 + 32) = 3;
  uint64_t v407 = sub_23AB60324(v406, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v408 = swift_allocObject();
  *(_OWORD *)(v408 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v408 + 32) = 16;
  uint64_t v409 = sub_23AB60324(v408, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v410.value._countAndFlagsBits = 0xD000000000000026;
  v410.value._object = (void *)0x800000023AC3A0C0;
  Action.init(_:mac:)(v410, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v411 = sub_23ABBFBD4();
  char v412 = sub_23ABB8BA8();
  char v413 = sub_23ABBFBE0();
  uint64_t v414 = sub_23ABBFBE8();
  *((void *)&v540 + 1) = v407;
  *(void *)&long long v540 = v587;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ALL, 0x800000023AC3A090, v402, v404, v411, v412 & 1, v413 & 1, v599, (uint64_t)v624._rawValue + 4592, v540, v414, v409, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v415 = swift_allocObject();
  *(_OWORD *)(v415 + 16) = xmmword_23AC2C700;
  uint64_t v416 = swift_allocObject();
  *(_OWORD *)(v416 + 16) = xmmword_23AC2C730;
  *(void *)(v416 + 32) = 0xD00000000000003ELL;
  *(void *)(v416 + 40) = 0x800000023AC3A0F0;
  *(void *)(v416 + 48) = 0xD00000000000001BLL;
  *(void *)(v416 + 56) = 0x800000023AC3A130;
  *(void *)(v416 + 64) = 0xD00000000000001BLL;
  *(void *)(v416 + 72) = 0x800000023AC3A150;
  *(void *)(v415 + 32) = v416;
  *(unsigned char *)(v415 + 40) = 0;
  uint64_t v417 = swift_allocObject();
  *(_OWORD *)(v417 + 16) = xmmword_23AC2C700;
  *(void *)(v417 + 32) = 0x100000000000007CLL;
  *(void *)(v417 + 40) = 0x800000023AC394E0;
  *(unsigned char *)(v417 + 48) = 0;
  uint64_t v418 = swift_allocObject();
  *(_OWORD *)(v418 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v418 + 32) = 84017408;
  *(unsigned char *)(v418 + 36) = 8;
  uint64_t v600 = sub_23AB60324(v418, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v588 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v588 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v419 = swift_allocObject();
  *(_OWORD *)(v419 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v419 + 32) = 3;
  uint64_t v420 = sub_23AB60324(v419, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v421 = swift_allocObject();
  *(_OWORD *)(v421 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v421 + 32) = 16;
  uint64_t v422 = sub_23AB60324(v421, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v423.value._countAndFlagsBits = 0xD000000000000025;
  v423.value._object = (void *)0x800000023AC3A1A0;
  Action.init(_:mac:)(v423, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v424 = sub_23ABBFBD4();
  char v425 = sub_23ABB8BA8();
  char v426 = sub_23ABBFBE0();
  uint64_t v427 = sub_23ABBFBE8();
  *((void *)&v541 + 1) = v420;
  *(void *)&long long v541 = v588;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000029, 0x800000023AC3A170, v415, v417, v424, v425 & 1, v426 & 1, v600, (uint64_t)v624._rawValue + 4744, v541, v427, v422, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v428 = swift_allocObject();
  *(_OWORD *)(v428 + 16) = xmmword_23AC2C700;
  uint64_t v429 = swift_allocObject();
  *(_OWORD *)(v429 + 16) = xmmword_23AC2C730;
  *(void *)(v429 + 32) = 0xD00000000000003FLL;
  *(void *)(v429 + 40) = 0x800000023AC3A1D0;
  *(void *)(v429 + 48) = 0xD00000000000001CLL;
  *(void *)(v429 + 56) = 0x800000023AC3A210;
  *(void *)(v429 + 64) = 0xD00000000000001CLL;
  *(void *)(v429 + 72) = 0x800000023AC3A230;
  *(void *)(v428 + 32) = v429;
  *(unsigned char *)(v428 + 40) = 0;
  uint64_t v430 = swift_allocObject();
  *(_OWORD *)(v430 + 16) = xmmword_23AC2C700;
  *(void *)(v430 + 32) = 0x100000000000007DLL;
  *(void *)(v430 + 40) = 0x800000023AC39650;
  *(unsigned char *)(v430 + 48) = 0;
  uint64_t v431 = swift_allocObject();
  *(_OWORD *)(v431 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v431 + 32) = 84017408;
  *(unsigned char *)(v431 + 36) = 8;
  uint64_t v601 = sub_23AB60324(v431, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v589 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v589 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v432 = swift_allocObject();
  *(_OWORD *)(v432 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v432 + 32) = 3;
  uint64_t v433 = sub_23AB60324(v432, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v434 = swift_allocObject();
  *(_OWORD *)(v434 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v434 + 32) = 16;
  uint64_t v435 = sub_23AB60324(v434, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v436.value._countAndFlagsBits = 0xD000000000000026;
  v436.value._object = (void *)0x800000023AC3A280;
  Action.init(_:mac:)(v436, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v437 = sub_23ABBFBD4();
  char v438 = sub_23ABB8BA8();
  char v439 = sub_23ABBFBE0();
  uint64_t v440 = sub_23ABBFBE8();
  *((void *)&v542 + 1) = v433;
  *(void *)&long long v542 = v589;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ALL, 0x800000023AC3A250, v428, v430, v437, v438 & 1, v439 & 1, v601, (uint64_t)v624._rawValue + 4896, v542, v440, v435, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v441 = swift_allocObject();
  *(_OWORD *)(v441 + 16) = xmmword_23AC2C700;
  uint64_t v442 = swift_allocObject();
  *(_OWORD *)(v442 + 16) = xmmword_23AC2C730;
  *(void *)(v442 + 32) = 0xD00000000000003DLL;
  *(void *)(v442 + 40) = 0x800000023AC3A2B0;
  *(void *)(v442 + 48) = 0xD00000000000001ALL;
  *(void *)(v442 + 56) = 0x800000023AC3A2F0;
  *(void *)(v442 + 64) = 0xD00000000000001ALL;
  *(void *)(v442 + 72) = 0x800000023AC3A310;
  *(void *)(v441 + 32) = v442;
  *(unsigned char *)(v441 + 40) = 0;
  uint64_t v443 = swift_allocObject();
  *(_OWORD *)(v443 + 16) = xmmword_23AC2C700;
  *(void *)(v443 + 32) = 0x100000000000007ELL;
  *(void *)(v443 + 40) = 0x800000023AC39860;
  *(unsigned char *)(v443 + 48) = 0;
  uint64_t v444 = swift_allocObject();
  *(_OWORD *)(v444 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v444 + 32) = 84017408;
  *(unsigned char *)(v444 + 36) = 8;
  uint64_t v602 = sub_23AB60324(v444, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v590 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v590 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v445 = swift_allocObject();
  *(_OWORD *)(v445 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v445 + 32) = 3;
  uint64_t v446 = sub_23AB60324(v445, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v447 = swift_allocObject();
  *(_OWORD *)(v447 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v447 + 32) = 16;
  uint64_t v448 = sub_23AB60324(v447, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v449.value._countAndFlagsBits = 0xD000000000000024;
  v449.value._object = (void *)0x800000023AC3A360;
  Action.init(_:mac:)(v449, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v450 = sub_23ABBFBD4();
  char v451 = sub_23ABB8BA8();
  char v452 = sub_23ABBFBE0();
  uint64_t v453 = sub_23ABBFBE8();
  *((void *)&v543 + 1) = v446;
  *(void *)&long long v543 = v590;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000028, 0x800000023AC3A330, v441, v443, v450, v451 & 1, v452 & 1, v602, (uint64_t)v624._rawValue + 5048, v543, v453, v448, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v454 = swift_allocObject();
  *(_OWORD *)(v454 + 16) = xmmword_23AC2C700;
  uint64_t v455 = swift_allocObject();
  *(_OWORD *)(v455 + 16) = xmmword_23AC2C730;
  *(void *)(v455 + 32) = 0xD00000000000003ALL;
  *(void *)(v455 + 40) = 0x800000023AC3A390;
  *(void *)(v455 + 48) = 0xD000000000000017;
  *(void *)(v455 + 56) = 0x800000023AC3A3D0;
  *(void *)(v455 + 64) = 0xD000000000000017;
  *(void *)(v455 + 72) = 0x800000023AC3A3F0;
  *(void *)(v454 + 32) = v455;
  *(unsigned char *)(v454 + 40) = 0;
  uint64_t v456 = swift_allocObject();
  *(_OWORD *)(v456 + 16) = xmmword_23AC2C700;
  *(void *)(v456 + 32) = 0x1000000000000073;
  *(void *)(v456 + 40) = 0x800000023AC399C0;
  *(unsigned char *)(v456 + 48) = 0;
  uint64_t v457 = swift_allocObject();
  *(_OWORD *)(v457 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v457 + 32) = 84017408;
  *(unsigned char *)(v457 + 36) = 8;
  uint64_t v591 = sub_23AB60324(v457, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v577 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v577 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v458 = swift_allocObject();
  *(_OWORD *)(v458 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v458 + 32) = 3;
  uint64_t v459 = sub_23AB60324(v458, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v460 = swift_allocObject();
  *(_OWORD *)(v460 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v460 + 32) = 16;
  uint64_t v461 = sub_23AB60324(v460, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v462.value._countAndFlagsBits = 0xD000000000000021;
  v462.value._object = (void *)0x800000023AC3A440;
  Action.init(_:mac:)(v462, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v463 = sub_23ABBFBD4();
  char v464 = sub_23ABB8BA8();
  char v465 = sub_23ABBFBE0();
  uint64_t v466 = sub_23ABBFBE8();
  *((void *)&v544 + 1) = v459;
  *(void *)&long long v544 = v577;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC3A410, v454, v456, v463, v464 & 1, v465 & 1, v591, (uint64_t)v624._rawValue + 5200, v544, v466, v461, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v467 = swift_allocObject();
  *(_OWORD *)(v467 + 16) = xmmword_23AC2C700;
  uint64_t v468 = swift_allocObject();
  *(_OWORD *)(v468 + 16) = xmmword_23AC2C730;
  *(void *)(v468 + 32) = 0xD000000000000038;
  *(void *)(v468 + 40) = 0x800000023AC3A470;
  *(void *)(v468 + 48) = 0xD000000000000015;
  *(void *)(v468 + 56) = 0x800000023AC3A4B0;
  *(void *)(v468 + 64) = 0xD000000000000015;
  *(void *)(v468 + 72) = 0x800000023AC3A4D0;
  *(void *)(v467 + 32) = v468;
  *(unsigned char *)(v467 + 40) = 0;
  uint64_t v469 = swift_allocObject();
  *(_OWORD *)(v469 + 16) = xmmword_23AC2C700;
  *(void *)(v469 + 32) = 0x1000000000000074;
  *(void *)(v469 + 40) = 0x800000023AC39BA0;
  *(unsigned char *)(v469 + 48) = 0;
  uint64_t v470 = swift_allocObject();
  *(_OWORD *)(v470 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v470 + 32) = 84017408;
  *(unsigned char *)(v470 + 36) = 8;
  uint64_t v621 = sub_23AB60324(v470, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v605 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v605 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v471 = swift_allocObject();
  *(_OWORD *)(v471 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v471 + 32) = 3;
  uint64_t v472 = sub_23AB60324(v471, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v473 = swift_allocObject();
  *(_OWORD *)(v473 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v473 + 32) = 16;
  uint64_t v474 = sub_23AB60324(v473, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v475.value._countAndFlagsBits = 0xD00000000000001FLL;
  v475.value._object = (void *)0x800000023AC3A520;
  Action.init(_:mac:)(v475, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  uint64_t v476 = sub_23ABBFBD4();
  char v477 = sub_23ABB8BA8();
  char v478 = sub_23ABBFBE0();
  uint64_t v479 = sub_23ABBFBE8();
  *((void *)&v545 + 1) = v472;
  *(void *)&long long v545 = v605;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC3A4F0, v467, v469, v476, v477 & 1, v478 & 1, v621, (uint64_t)v624._rawValue + 5352, v545, v479, v474, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v480 = swift_allocObject();
  *(_OWORD *)(v480 + 16) = xmmword_23AC2C700;
  uint64_t v481 = swift_allocObject();
  *(_OWORD *)(v481 + 16) = xmmword_23AC2C710;
  *(void *)(v481 + 32) = 0xD000000000000021;
  *(void *)(v481 + 40) = 0x800000023AC3A540;
  *(void *)(v481 + 48) = 0xD000000000000023;
  *(void *)(v481 + 56) = 0x800000023AC3A570;
  *(void *)(v480 + 32) = v481;
  *(unsigned char *)(v480 + 40) = 0;
  uint64_t v482 = swift_allocObject();
  *(_OWORD *)(v482 + 16) = xmmword_23AC2C700;
  *(void *)(v482 + 32) = 0xD000000000000056;
  *(void *)(v482 + 40) = 0x800000023AC3A5A0;
  *(unsigned char *)(v482 + 48) = 0;
  uint64_t v483 = swift_allocObject();
  *(_OWORD *)(v483 + 16) = xmmword_23AC2C700;
  *(void *)(v483 + 32) = 0xD000000000000021;
  *(void *)(v483 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v483 + 48) = 0;
  uint64_t v484 = swift_allocObject();
  *(_OWORD *)(v484 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v484 + 32) = 84017408;
  *(unsigned char *)(v484 + 36) = 8;
  uint64_t v616 = sub_23AB60324(v484, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v608 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v608 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v485 = swift_allocObject();
  *(_OWORD *)(v485 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v485 + 32) = 3;
  uint64_t v486 = sub_23AB60324(v485, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v487 = swift_allocObject();
  *(_OWORD *)(v487 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v487 + 32) = 3840;
  uint64_t v488 = sub_23AB60324(v487, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v489.value._countAndFlagsBits = 0x68507463656C6573;
  v489.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v489, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  char v490 = sub_23ABB8BA8();
  char v491 = sub_23ABBFBE0();
  uint64_t v492 = sub_23ABBFBE8();
  *((void *)&v546 + 1) = v486;
  *(void *)&long long v546 = v608;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC3A600, v480, v482, v483, v490 & 1, v491 & 1, v616, (uint64_t)v624._rawValue + 5504, v546, v492, v488, v630, &v629, 0, 0, (uint64_t)&v625);
  uint64_t v493 = swift_allocObject();
  *(_OWORD *)(v493 + 16) = xmmword_23AC2C700;
  uint64_t v494 = swift_allocObject();
  *(_OWORD *)(v494 + 16) = xmmword_23AC2C710;
  *(void *)(v494 + 32) = 0xD000000000000020;
  *(void *)(v494 + 40) = 0x800000023AC3A620;
  *(void *)(v494 + 48) = 0xD000000000000022;
  *(void *)(v494 + 56) = 0x800000023AC3A650;
  *(void *)(v493 + 32) = v494;
  *(unsigned char *)(v493 + 40) = 0;
  uint64_t v495 = swift_allocObject();
  *(_OWORD *)(v495 + 16) = xmmword_23AC2C700;
  *(void *)(v495 + 32) = 0xD000000000000050;
  *(void *)(v495 + 40) = 0x800000023AC3A680;
  *(unsigned char *)(v495 + 48) = 0;
  uint64_t v496 = swift_allocObject();
  *(_OWORD *)(v496 + 16) = xmmword_23AC2C700;
  *(void *)(v496 + 32) = 0xD000000000000021;
  *(void *)(v496 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v496 + 48) = 0;
  uint64_t v497 = swift_allocObject();
  *(_OWORD *)(v497 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v497 + 32) = 84017408;
  *(unsigned char *)(v497 + 36) = 8;
  uint64_t v623 = sub_23AB60324(v497, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v498 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v498 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v499 = swift_allocObject();
  *(_OWORD *)(v499 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v499 + 32) = 3;
  uint64_t v500 = sub_23AB60324(v499, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v501 = swift_allocObject();
  *(_OWORD *)(v501 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v501 + 32) = 3840;
  uint64_t v502 = sub_23AB60324(v501, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v630[0] = 4;
  char v629 = 4;
  v503.value._countAndFlagsBits = 0x68507463656C6573;
  v503.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v503, (Swift::String_optional)0);
  long long v625 = v627;
  long long v626 = v628;
  char v504 = sub_23ABB8BA8();
  char v505 = sub_23ABBFBE0();
  uint64_t v506 = sub_23ABBFBE8();
  *((void *)&v547 + 1) = v500;
  *(void *)&long long v547 = v498;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC3A6E0, v493, v495, v496, v504 & 1, v505 & 1, v623, (uint64_t)v624._rawValue + 5656, v547, v506, v502, v630, &v629, 0, 0, (uint64_t)&v625);
  Swift::Bool v507 = sub_23ABB8BA8() & 1;
  v508._countAndFlagsBits = 0x746E656D65766F4DLL;
  v508._object = (void *)0xE800000000000000;
  v509._countAndFlagsBits = v607;
  v509._object = v606;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A629E8, v508, v509, v507, v624);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB687DC()
{
  if (qword_268A5AAD8 != -1) {
    swift_once();
  }
  return &stru_268A629E8;
}

#error "23AB68828: too big function (funcsize=0)"

void *sub_23AB7A3D4()
{
  if (qword_268A5AAE0 != -1) {
    swift_once();
  }
  return &unk_268A62A18;
}

void sub_23AB7A420()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v8 = sub_23AC2A560();
  uint64_t v107 = v9;
  uint64_t v108 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AC2C840;
  v109._rawCFDictionaryRef Value = (void *)v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AC2C700;
  *(void *)(v11 + 32) = &unk_26EE21A60;
  *(unsigned char *)(v11 + 40) = 0;
  uint64_t v100 = sub_23AB60324((uint64_t)&unk_26EE21B00, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v12 = sub_23AB60324((uint64_t)&unk_26EE21B28, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v13 = sub_23AB60324((uint64_t)&unk_26EE21B50, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v14.value._object = (void *)0x800000023AC3FB40;
  v14.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v14, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  char v15 = sub_23ABB8BA8();
  char v16 = sub_23ABBFBE0();
  uint64_t v17 = sub_23ABBFBE8();
  *(void *)&long long v89 = MEMORY[0x263F8EE88];
  *((void *)&v89 + 1) = v12;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC3FB20, v11, (uint64_t)&unk_26EE21A90, (uint64_t)&unk_26EE21AC8, v15 & 1, v16 & 1, v100, v10 + 32, v89, v17, v13, v115, &v114, 0, (uint64_t)&unk_26EE21B78, (uint64_t)&v110);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_23AC2C700;
  *(void *)(v18 + 32) = &unk_26EE21BC8;
  *(unsigned char *)(v18 + 40) = 0;
  uint64_t v101 = sub_23AB60324((uint64_t)&unk_26EE21C68, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v19 = sub_23AB60324((uint64_t)&unk_26EE21C90, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v20 = sub_23AB60324((uint64_t)&unk_26EE21CB8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  uint64_t v21 = sub_23AB60324((uint64_t)&unk_26EE21CE0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v22.value._countAndFlagsBits = 0x6D45747265736E69;
  v22.value._object = (void *)0xEC0000003A696A6FLL;
  Action.init(_:mac:)(v22, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  char v23 = sub_23ABB8BA8();
  char v24 = sub_23ABBFBE0();
  *((void *)&v90 + 1) = v19;
  *(void *)&long long v90 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000015, 0x800000023AC3FB60, v18, (uint64_t)&unk_26EE21BF8, (uint64_t)&unk_26EE21C30, v23 & 1, v24 & 1, v101, v10 + 184, v90, v20, v21, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23AC2C700;
  *(void *)(v25 + 32) = &unk_26EE21D08;
  *(unsigned char *)(v25 + 40) = 0;
  uint64_t v102 = sub_23AB60324((uint64_t)&unk_26EE21DB8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v26 = sub_23AB60324((uint64_t)&unk_26EE21DE0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v27 = sub_23AB60324((uint64_t)&unk_26EE21E08, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v28.value._countAndFlagsBits = 0xD000000000000010;
  v28.value._object = (void *)0x800000023AC3FB40;
  Action.init(_:mac:)(v28, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v21) = sub_23ABB8BA8();
  char v29 = sub_23ABBFBE0();
  uint64_t v30 = sub_23ABBFBE8();
  *((void *)&v91 + 1) = v26;
  *(void *)&long long v91 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC3FB80, v25, (uint64_t)&unk_26EE21D48, (uint64_t)&unk_26EE21D80, v21 & 1, v29 & 1, v102, v10 + 336, v91, v30, v27, v115, &v114, 0, (uint64_t)&unk_26EE21E30, (uint64_t)&v110);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_23AC2C700;
  *(void *)(v31 + 32) = &unk_26EE21E80;
  *(unsigned char *)(v31 + 40) = 0;
  uint64_t v103 = sub_23AB60324((uint64_t)&unk_26EE21F20, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v32 = sub_23AB60324((uint64_t)&unk_26EE21F48, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v33 = sub_23AB60324((uint64_t)&unk_26EE21F70, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v34.value._countAndFlagsBits = 0x6144747265736E69;
  v34.value._object = (void *)0xEB000000003A6574;
  Action.init(_:mac:)(v34, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v21) = sub_23ABB8BA8();
  char v35 = sub_23ABBFBE0();
  uint64_t v36 = sub_23ABBFBE8();
  *((void *)&v92 + 1) = v32;
  *(void *)&long long v92 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x736E492E74786554, 0xEF65746144747265, v31, (uint64_t)&unk_26EE21EB0, (uint64_t)&unk_26EE21EE8, v21 & 1, v35 & 1, v103, v10 + 488, v92, v36, v33, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v106 = v10 + 640;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23AC2C700;
  *(void *)(v37 + 32) = &unk_26EE21F98;
  *(unsigned char *)(v37 + 40) = 0;
  uint64_t v38 = sub_23AB60324((uint64_t)&unk_26EE22048, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v39 = sub_23AB60324((uint64_t)&unk_26EE22070, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v40 = sub_23AB60324((uint64_t)&unk_26EE22098, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v115[0] = 4;
  char v114 = 4;
  v41.value._object = (void *)0x800000023AC3FBD0;
  v41.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v41, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v21) = sub_23ABB8BA8();
  char v42 = sub_23ABBFBE0();
  uint64_t v43 = sub_23ABBFBE8();
  uint64_t v44 = sub_23ABBFBE8();
  *((void *)&v93 + 1) = v40;
  *(void *)&long long v93 = v39;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC3FBA0, v37, (uint64_t)&unk_26EE21FD8, (uint64_t)&unk_26EE22010, v21 & 1, v42 & 1, v38, v106, v93, v43, v44, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_23AC2C700;
  *(void *)(v45 + 32) = &unk_26EE220C0;
  *(unsigned char *)(v45 + 40) = 0;
  uint64_t v104 = sub_23AB60324((uint64_t)&unk_26EE22160, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v46 = sub_23AB60324((uint64_t)&unk_26EE22188, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v47 = sub_23AB60324((uint64_t)&unk_26EE221B0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v48.value._countAndFlagsBits = 0xD000000000000014;
  v49.value._object = (void *)0x800000023AC3FC10;
  v48.value._object = (void *)0x800000023AC3FC30;
  v49.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v49, v48);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v21) = sub_23ABB8BA8();
  char v50 = sub_23ABBFBE0();
  uint64_t v51 = sub_23ABBFBE8();
  *((void *)&v94 + 1) = v46;
  *(void *)&long long v94 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC3FBF0, v45, (uint64_t)&unk_26EE220F0, (uint64_t)&unk_26EE22128, v21 & 1, v50 & 1, v104, (uint64_t)v109._rawValue + 792, v94, v51, v47, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_23AC2C700;
  *(void *)(v52 + 32) = &unk_26EE221D8;
  *(unsigned char *)(v52 + 40) = 0;
  uint64_t v53 = sub_23AB60324((uint64_t)&unk_26EE222B0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v54 = sub_23AB60324((uint64_t)&unk_26EE222D8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v55 = sub_23AB60324((uint64_t)&unk_26EE22300, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v56.value._countAndFlagsBits = 0xD000000000000019;
  v56.value._object = (void *)0x800000023AC3FC70;
  Action.init(_:mac:)(v56, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v21) = sub_23ABB8BA8();
  char v57 = sub_23ABBFBE0();
  uint64_t v58 = sub_23ABBFBE8();
  *((void *)&v95 + 1) = v54;
  *(void *)&long long v95 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC3FC50, v52, (uint64_t)&unk_26EE22228, (uint64_t)&unk_26EE22260, v21 & 1, v57 & 1, v53, (uint64_t)v109._rawValue + 944, v95, v58, v55, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_23AC2C700;
  *(void *)(v59 + 32) = &unk_26EE22328;
  *(unsigned char *)(v59 + 40) = 0;
  uint64_t v60 = sub_23AB60324((uint64_t)&unk_26EE223C8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v61 = sub_23AB60324((uint64_t)&unk_26EE223F0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v115[0] = 4;
  char v114 = 4;
  v62.value._countAndFlagsBits = 0xD000000000000012;
  v62.value._object = (void *)0x800000023AC3FCB0;
  Action.init(_:mac:)(v62, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v54) = sub_23ABB8BA8();
  LOBYTE(v21) = sub_23ABBFBE0();
  uint64_t v63 = sub_23ABBFBE8();
  uint64_t v64 = sub_23ABBFBE8();
  *((void *)&v96 + 1) = v61;
  *(void *)&long long v96 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC3FC90, v59, (uint64_t)&unk_26EE22358, (uint64_t)&unk_26EE22390, v54 & 1, v21 & 1, v60, (uint64_t)v109._rawValue + 1096, v96, v63, v64, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_23AC2C700;
  *(void *)(v65 + 32) = &unk_26EE22418;
  *(unsigned char *)(v65 + 40) = 0;
  uint64_t v66 = sub_23AB60324((uint64_t)&unk_26EE224B8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v67 = sub_23AB60324((uint64_t)&unk_26EE224E0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v115[0] = 4;
  char v114 = 4;
  v68.value._object = (void *)0x800000023AC3FCF0;
  v68.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v68, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v54) = sub_23ABB8BA8();
  LOBYTE(v21) = sub_23ABBFBE0();
  uint64_t v69 = sub_23ABBFBE8();
  uint64_t v70 = sub_23ABBFBE8();
  *((void *)&v97 + 1) = v67;
  *(void *)&long long v97 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC3FCD0, v65, (uint64_t)&unk_26EE22448, (uint64_t)&unk_26EE22480, v54 & 1, v21 & 1, v66, (uint64_t)v109._rawValue + 1248, v97, v69, v70, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_23AC2C700;
  *(void *)(v71 + 32) = &unk_26EE22508;
  *(unsigned char *)(v71 + 40) = 0;
  uint64_t v105 = sub_23AB60324((uint64_t)&unk_26EE225A8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v72 = sub_23AB60324((uint64_t)&unk_26EE225D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v73 = sub_23AB60324((uint64_t)&unk_26EE225F8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  uint64_t v74 = sub_23AB60324((uint64_t)&unk_26EE22620, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v75.value._object = (void *)0x800000023AC3FD30;
  v75.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v75, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  LOBYTE(v69) = sub_23ABB8BA8();
  char v76 = sub_23ABBFBE0();
  *((void *)&v98 + 1) = v72;
  *(void *)&long long v98 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC3FD10, v71, (uint64_t)&unk_26EE22538, (uint64_t)&unk_26EE22570, v69 & 1, v76 & 1, v105, (uint64_t)v109._rawValue + 1400, v98, v73, v74, v115, &v114, 0, 0, (uint64_t)&v110);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_23AC2C700;
  *(void *)(v77 + 32) = &unk_26EE22648;
  *(unsigned char *)(v77 + 40) = 0;
  uint64_t v78 = sub_23AB60324((uint64_t)&unk_26EE22678, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v79 = sub_23AB60324((uint64_t)&unk_26EE226A0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v80 = sub_23AB60324((uint64_t)&unk_26EE226C8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v115[0] = 4;
  char v114 = 4;
  v81.value._object = (void *)0x800000023AC3FD50;
  v81.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v81, (Swift::String_optional)0);
  long long v110 = v112;
  long long v111 = v113;
  uint64_t v82 = sub_23ABBFBD4();
  char v83 = sub_23ABB8BA8();
  char v84 = sub_23ABBFBE0();
  uint64_t v85 = sub_23ABBFBE8();
  *((void *)&v99 + 1) = v79;
  *(void *)&long long v99 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x4B2E6D6574737953, 0xEF65636170537965, v77, MEMORY[0x263F8EE78], v82, v83 & 1, v84 & 1, v78, (uint64_t)v109._rawValue + 1552, v99, v80, v85, v115, &v114, 0, 0, (uint64_t)&v110);
  Swift::Bool v86 = sub_23ABB8BA8() & 1;
  v87._countAndFlagsBits = 0x7463694474786554;
  v87._object = (void *)0xED00006E6F697461;
  v88._object = v107;
  v88._countAndFlagsBits = v108;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62A48, v87, v88, v86, v109);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB7B744()
{
  if (qword_268A5AAE8 != -1) {
    swift_once();
  }
  return &stru_268A62A48;
}

void sub_23AB7B790()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v99 = sub_23AC2A560();
  long long v98 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v101 = swift_allocObject();
  *(_OWORD *)(v101 + 16) = xmmword_23AC2C850;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C700;
  *(void *)(v9 + 32) = &unk_26EE226F0;
  *(unsigned char *)(v9 + 40) = 0;
  uint64_t v10 = sub_23AB60324((uint64_t)&unk_26EE227A8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v11 = sub_23AB60324((uint64_t)&unk_26EE227D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v12 = sub_23AB60324((uint64_t)&unk_26EE227F8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v13.value._countAndFlagsBits = 0xD000000000000014;
  v13.value._object = (void *)0x800000023AC409A0;
  Action.init(_:mac:)(v13, (Swift::String_optional)0);
  long long v102 = v104;
  long long v103 = v105;
  char v14 = sub_23ABB8BA8();
  char v15 = sub_23ABBFBE0();
  uint64_t v16 = sub_23ABBFBE8();
  *(void *)&long long v84 = MEMORY[0x263F8EE88];
  *((void *)&v84 + 1) = v11;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC40970, v9, (uint64_t)&unk_26EE22720, (uint64_t)&unk_26EE22770, v14 & 1, v15 & 1, v10, v101 + 32, v84, v16, v12, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23AC2C700;
  *(void *)(v17 + 32) = &unk_26EE22820;
  *(unsigned char *)(v17 + 40) = 0;
  uint64_t v18 = sub_23AB60324((uint64_t)&unk_26EE228C0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v19 = sub_23AB60324((uint64_t)&unk_26EE228E8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v107[0] = 4;
  char v106 = 4;
  v20.value._countAndFlagsBits = 0x6172447472617473;
  v20.value._object = (void *)0xE900000000000067;
  Action.init(_:mac:)(v20, (Swift::String_optional)0);
  long long v102 = v104;
  long long v103 = v105;
  char v21 = sub_23ABB8BA8();
  char v22 = sub_23ABBFBE0();
  uint64_t v23 = sub_23ABBFBE8();
  uint64_t v24 = sub_23ABBFBE8();
  *((void *)&v85 + 1) = v19;
  *(void *)&long long v85 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC409C0, v17, (uint64_t)&unk_26EE22850, (uint64_t)&unk_26EE22888, v21 & 1, v22 & 1, v18, v101 + 184, v85, v23, v24, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23AC2C700;
  *(void *)(v25 + 32) = &unk_26EE22910;
  *(unsigned char *)(v25 + 40) = 0;
  uint64_t v26 = sub_23AB60324((uint64_t)&unk_26EE229B0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v27 = sub_23AB60324((uint64_t)&unk_26EE229D8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v28 = sub_23AB60324((uint64_t)&unk_26EE22A00, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v29.value._object = (void *)0x800000023AC40A00;
  v30.value._countAndFlagsBits = 0x6172447472617473;
  v30.value._object = (void *)0xE900000000000067;
  v29.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v30, v29);
  long long v102 = v104;
  long long v103 = v105;
  char v31 = sub_23ABB8BA8();
  LOBYTE(v23) = sub_23ABBFBE0();
  uint64_t v32 = sub_23ABBFBE8();
  *((void *)&v86 + 1) = v27;
  *(void *)&long long v86 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC409E0, v25, (uint64_t)&unk_26EE22940, (uint64_t)&unk_26EE22978, v31 & 1, v23 & 1, v26, v101 + 336, v86, v32, v28, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23AC2C700;
  *(void *)(v33 + 32) = &unk_26EE22A28;
  *(unsigned char *)(v33 + 40) = 0;
  uint64_t v96 = sub_23AB60324((uint64_t)&unk_26EE22AB0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v34 = sub_23AB60324((uint64_t)&unk_26EE22AD8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v35 = sub_23AB60324((uint64_t)&unk_26EE22B00, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v36.value._countAndFlagsBits = 0x67617244646E65;
  v36.value._object = (void *)0xE700000000000000;
  Action.init(_:mac:)(v36, (Swift::String_optional)0);
  long long v102 = v104;
  long long v103 = v105;
  uint64_t v37 = sub_23ABBFBD4();
  LOBYTE(v23) = sub_23ABB8BA8();
  char v38 = sub_23ABBFBE0();
  uint64_t v39 = sub_23ABBFBE8();
  *((void *)&v87 + 1) = v34;
  *(void *)&long long v87 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC40A20, v33, (uint64_t)&unk_26EE22A78, v37, v23 & 1, v38 & 1, v96, v101 + 488, v87, v39, v35, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_23AC2C710;
  *(void *)(v40 + 32) = &unk_26EE22B28;
  *(unsigned char *)(v40 + 40) = 1;
  *(void *)(v40 + 48) = &unk_26EE22B88;
  *(unsigned char *)(v40 + 56) = 3;
  uint64_t v41 = sub_23AB60324((uint64_t)&unk_26EE22C78, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v42 = sub_23AB60324((uint64_t)&unk_26EE22CA0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v43 = sub_23AB60324((uint64_t)&unk_26EE22CC8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v44.value._countAndFlagsBits = 0x67617244646E65;
  v44.value._object = (void *)0xE700000000000000;
  v45.value._countAndFlagsBits = 0x4167617244646E65;
  v45.value._object = (void *)0xEE006C6562614C74;
  Action.init(_:mac:)(v44, v45);
  long long v102 = v104;
  long long v103 = v105;
  LOBYTE(v35) = sub_23ABB8BA8();
  LOBYTE(v37) = sub_23ABBFBE0();
  uint64_t v46 = sub_23ABBFBE8();
  *((void *)&v88 + 1) = v42;
  *(void *)&long long v88 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC40A40, v40, (uint64_t)&unk_26EE22BD8, (uint64_t)&unk_26EE22C28, v35 & 1, v37 & 1, v41, v101 + 640, v88, v46, v43, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_23AC2C710;
  *(void *)(v47 + 32) = &unk_26EE22CF0;
  *(unsigned char *)(v47 + 40) = 1;
  *(void *)(v47 + 48) = &unk_26EE22D40;
  *(unsigned char *)(v47 + 56) = 3;
  uint64_t v94 = sub_23AB60324((uint64_t)&unk_26EE22E18, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v48 = sub_23AB60324((uint64_t)&unk_26EE22E40, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v49 = sub_23AB60324((uint64_t)&unk_26EE22E68, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v107[0] = 4;
  char v106 = 4;
  v50.value._countAndFlagsBits = 0xD000000000000010;
  v50.value._object = (void *)0x800000023AC40A80;
  Action.init(_:mac:)(v50, (Swift::String_optional)0);
  long long v102 = v104;
  long long v103 = v105;
  LOBYTE(v35) = sub_23ABB8BA8();
  LOBYTE(v23) = sub_23ABBFBE0();
  uint64_t v51 = sub_23ABBFBE8();
  uint64_t v52 = sub_23ABBFBE8();
  *((void *)&v89 + 1) = v49;
  *(void *)&long long v89 = v48;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC40A60, v47, (uint64_t)&unk_26EE22D90, (uint64_t)&unk_26EE22DE0, v35 & 1, v23 & 1, v94, v101 + 792, v89, v51, v52, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_23AC2C710;
  *(void *)(v53 + 32) = &unk_26EE22E90;
  *(unsigned char *)(v53 + 40) = 1;
  *(void *)(v53 + 48) = &unk_26EE22EE0;
  *(unsigned char *)(v53 + 56) = 3;
  uint64_t v100 = sub_23AB60324((uint64_t)&unk_26EE22FC0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v54 = sub_23AB60324((uint64_t)&unk_26EE22FE8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v55 = sub_23AB60324((uint64_t)&unk_26EE23010, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v56.value._countAndFlagsBits = 0xD000000000000030;
  v56.value._object = (void *)0x800000023AC40AC0;
  v57.value._countAndFlagsBits = 0xD000000000000010;
  v57.value._object = (void *)0x800000023AC40A80;
  Action.init(_:mac:)(v57, v56);
  long long v102 = v104;
  long long v103 = v105;
  LOBYTE(v9) = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v58 = sub_23ABBFBE8();
  *((void *)&v90 + 1) = v54;
  *(void *)&long long v90 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC40AA0, v53, (uint64_t)&unk_26EE22F20, (uint64_t)&unk_26EE22F70, v9 & 1, v35 & 1, v100, v101 + 944, v90, v58, v55, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_23AC2C700;
  *(void *)(v59 + 32) = &unk_26EE23038;
  *(unsigned char *)(v59 + 40) = 0;
  uint64_t v95 = sub_23AB60324((uint64_t)&unk_26EE23068, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v60 = sub_23AB60324((uint64_t)&unk_26EE23090, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v61 = sub_23AB60324((uint64_t)&unk_26EE230B8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  uint64_t v62 = sub_23AB60324((uint64_t)&unk_26EE230E0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v63.value._countAndFlagsBits = 0x5444337472617473;
  v63.value._object = (void *)0xEC0000006863756FLL;
  Action.init(_:mac:)(v63, (Swift::String_optional)0);
  long long v102 = v104;
  long long v103 = v105;
  uint64_t v64 = sub_23ABBFBD4();
  LOBYTE(v23) = sub_23ABB8BA8();
  char v65 = sub_23ABBFBE0();
  *((void *)&v91 + 1) = v60;
  *(void *)&long long v91 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC40B00, v59, MEMORY[0x263F8EE78], v64, v23 & 1, v65 & 1, v95, v101 + 1096, v91, v61, v62, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_23AC2C700;
  *(void *)(v66 + 32) = &unk_26EE23108;
  *(unsigned char *)(v66 + 40) = 0;
  uint64_t v97 = sub_23AB60324((uint64_t)&unk_26EE231A8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v67 = sub_23AB60324((uint64_t)&unk_26EE231D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v68 = sub_23AB60324((uint64_t)&unk_26EE231F8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  uint64_t v69 = sub_23AB60324((uint64_t)&unk_26EE23220, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v70.value._countAndFlagsBits = 0x5444337472617473;
  v70.value._object = (void *)0xEC0000006863756FLL;
  Action.init(_:mac:)(v70, (Swift::String_optional)0);
  long long v102 = v104;
  long long v103 = v105;
  LOBYTE(v64) = sub_23ABB8BA8();
  char v71 = sub_23ABBFBE0();
  *((void *)&v92 + 1) = v67;
  *(void *)&long long v92 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000021, 0x800000023AC40B20, v66, (uint64_t)&unk_26EE23138, (uint64_t)&unk_26EE23170, v64 & 1, v71 & 1, v97, v101 + 1248, v92, v68, v69, v107, &v106, 0, 0, (uint64_t)&v102);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_23AC2C700;
  *(void *)(v72 + 32) = &unk_26EE23248;
  *(unsigned char *)(v72 + 40) = 0;
  uint64_t v73 = sub_23AB60324((uint64_t)&unk_26EE232D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v74 = sub_23AB60324((uint64_t)&unk_26EE232F8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v75 = sub_23AB60324((uint64_t)&unk_26EE23320, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v107[0] = 4;
  char v106 = 4;
  v76.value._countAndFlagsBits = 0x65476C65636E6163;
  v76.value._object = (void *)0xED00006572757473;
  Action.init(_:mac:)(v76, (Swift::String_optional)0);
  long long v102 = v104;
  long long v103 = v105;
  uint64_t v77 = sub_23ABBFBD4();
  char v78 = sub_23ABB8BA8();
  LOBYTE(v18) = sub_23ABBFBE0();
  uint64_t v79 = sub_23ABBFBE8();
  *((void *)&v93 + 1) = v74;
  *(void *)&long long v93 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC40B50, v72, (uint64_t)&unk_26EE23298, v77, v78 & 1, v18 & 1, v73, v101 + 1400, v93, v79, v75, v107, &v106, 0, 0, (uint64_t)&v102);
  char v80 = sub_23ABB8BA8();
  v81._object = (void *)0x800000023AC40910;
  Swift::Bool v82 = v80 & 1;
  v81._countAndFlagsBits = 0xD000000000000010;
  v83._countAndFlagsBits = v99;
  v83._object = v98;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62A78, v81, v83, v82, (Swift::OpaquePointer)v101);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB7C95C()
{
  if (qword_268A5AAF0 != -1) {
    swift_once();
  }
  return &stru_268A62A78;
}

void sub_23AB7C9A8()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v733 = sub_23AC2A560();
  v732 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C860;
  v739._rawCFDictionaryRef Value = (void *)v9;
  uint64_t v737 = v9 + 32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AC2C700;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A318);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AC2C700;
  *(void *)(v11 + 32) = 0x74207463656C6553;
  *(void *)(v11 + 40) = 0xEB00000000746168;
  *(void *)(v10 + 32) = v11;
  *(unsigned char *)(v10 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A320);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AC2C700;
  *(void *)(v12 + 32) = 0xD00000000000003CLL;
  *(void *)(v12 + 40) = 0x800000023AC40B80;
  *(unsigned char *)(v12 + 48) = 0;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23AC2C700;
  *(void *)(v13 + 32) = 0xD00000000000008FLL;
  *(void *)(v13 + 40) = 0x800000023AC40BC0;
  *(unsigned char *)(v13 + 48) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A328);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v14 + 32) = 84017408;
  *(unsigned char *)(v14 + 36) = 8;
  uint64_t v711 = sub_23AB60324(v14, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v734 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v734 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v15 + 32) = 3;
  uint64_t v16 = sub_23AB60324(v15, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A330);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v17 + 32) = 15;
  uint64_t v18 = sub_23AB60324(v17, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v19.value._countAndFlagsBits = 0xD00000000000001CLL;
  v19.value._object = (void *)0x800000023AC40C70;
  Action.init(_:mac:)(v19, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  char v20 = sub_23ABB8BA8();
  char v21 = sub_23ABBFBE0();
  uint64_t v22 = sub_23ABBFBE8();
  *((void *)&v602 + 1) = v16;
  *(void *)&long long v602 = v734;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC40C50, v10, v12, v13, v20 & 1, v21 & 1, v711, v737, v602, v22, v18, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_23AC2C700;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23AC2C710;
  *(void *)(v24 + 32) = 0xD000000000000017;
  *(void *)(v24 + 40) = 0x800000023AC40C90;
  *(void *)(v24 + 48) = 0xD000000000000018;
  *(void *)(v24 + 56) = 0x800000023AC40CB0;
  *(void *)(v23 + 32) = v24;
  *(unsigned char *)(v23 + 40) = 0;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23AC2C700;
  *(void *)(v25 + 32) = 0xD000000000000028;
  *(void *)(v25 + 40) = 0x800000023AC40CD0;
  *(unsigned char *)(v25 + 48) = 0;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_23AC2C700;
  *(void *)(v26 + 32) = 0xD00000000000002CLL;
  *(void *)(v26 + 40) = 0x800000023AC40D00;
  *(unsigned char *)(v26 + 48) = 0;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v27 + 32) = 84017408;
  *(unsigned char *)(v27 + 36) = 8;
  uint64_t v697 = sub_23AB60324(v27, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v28 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v28 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v29 + 32) = 3;
  uint64_t v30 = sub_23AB60324(v29, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v31.value._countAndFlagsBits = 0x6C417463656C6573;
  v31.value._object = (void *)0xEA00000000003A6CLL;
  v32.value._countAndFlagsBits = 0x65536D6574737973;
  v32.value._object = (void *)0xEF6C6C417463656CLL;
  Action.init(_:mac:)(v31, v32);
  long long v740 = v742;
  long long v741 = v743;
  char v33 = sub_23ABB8BA8();
  char v34 = sub_23ABBFBE0();
  uint64_t v35 = sub_23ABBFBE8();
  uint64_t v36 = sub_23ABBFBE8();
  *((void *)&v603 + 1) = v30;
  *(void *)&long long v603 = v28;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC40D30, v23, v25, v26, v33 & 1, v34 & 1, v697, (uint64_t)v739._rawValue + 184, v603, v35, v36, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23AC2C700;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23AC2C700;
  *(void *)(v38 + 32) = 0xD000000000000027;
  *(void *)(v38 + 40) = 0x800000023AC40D50;
  *(void *)(v37 + 32) = v38;
  *(unsigned char *)(v37 + 40) = 0;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23AC2C700;
  *(void *)(v39 + 32) = 0xD000000000000030;
  *(void *)(v39 + 40) = 0x800000023AC40D80;
  *(unsigned char *)(v39 + 48) = 0;
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_23AC2C700;
  *(void *)(v40 + 32) = 0xD000000000000021;
  *(void *)(v40 + 40) = 0x800000023AC361A0;
  *(unsigned char *)(v40 + 48) = 0;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v41 + 32) = 84017408;
  *(unsigned char *)(v41 + 36) = 8;
  uint64_t v712 = sub_23AB60324(v41, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v698 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v698 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v42 + 32) = 3;
  uint64_t v43 = sub_23AB60324(v42, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v44 + 32) = 4096;
  uint64_t v45 = sub_23AB60324(v44, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v46.value._countAndFlagsBits = 0x68507463656C6573;
  v46.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v46, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  char v47 = sub_23ABB8BA8();
  char v48 = sub_23ABBFBE0();
  uint64_t v49 = sub_23ABBFBE8();
  *((void *)&v604 + 1) = v43;
  *(void *)&long long v604 = v698;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC40DC0, v37, v39, v40, v47 & 1, v48 & 1, v712, (uint64_t)v739._rawValue + 336, v604, v49, v45, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_23AC2C700;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_23AC2C710;
  *(void *)(v51 + 32) = 0xD000000000000052;
  *(void *)(v51 + 40) = 0x800000023AC40DE0;
  *(void *)(v51 + 48) = 0xD000000000000054;
  *(void *)(v51 + 56) = 0x800000023AC40E40;
  *(void *)(v50 + 32) = v51;
  *(unsigned char *)(v50 + 40) = 0;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_23AC2C700;
  *(void *)(v52 + 32) = 0xD00000000000005DLL;
  *(void *)(v52 + 40) = 0x800000023AC40EA0;
  *(unsigned char *)(v52 + 48) = 0;
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v53 + 32) = 84017408;
  *(unsigned char *)(v53 + 36) = 8;
  uint64_t v727 = sub_23AB60324(v53, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v688 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v688 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v54 + 32) = 3;
  uint64_t v55 = sub_23AB60324(v54, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v56 + 32) = 4096;
  uint64_t v57 = sub_23AB60324(v56, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v58.value._countAndFlagsBits = 0xD00000000000001ALL;
  v58.value._object = (void *)0x800000023AC40F20;
  Action.init(_:mac:)(v58, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v59 = sub_23ABBFBD4();
  char v60 = sub_23ABB8BA8();
  char v61 = sub_23ABBFBE0();
  uint64_t v62 = sub_23ABBFBE8();
  *((void *)&v605 + 1) = v55;
  *(void *)&long long v605 = v688;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC40F00, v50, v52, v59, v60 & 1, v61 & 1, v727, (uint64_t)v739._rawValue + 488, v605, v62, v57, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_23AC2C700;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_23AC2C700;
  *(void *)(v64 + 32) = 0xD000000000000028;
  *(void *)(v64 + 40) = 0x800000023AC40F40;
  *(void *)(v63 + 32) = v64;
  *(unsigned char *)(v63 + 40) = 0;
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_23AC2C700;
  *(void *)(v65 + 32) = 0xD000000000000042;
  *(void *)(v65 + 40) = 0x800000023AC40F70;
  *(unsigned char *)(v65 + 48) = 0;
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_23AC2C700;
  *(void *)(v66 + 32) = 0x10000000000000D0;
  *(void *)(v66 + 40) = 0x800000023AC40FC0;
  *(unsigned char *)(v66 + 48) = 0;
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v67 + 32) = 84017408;
  *(unsigned char *)(v67 + 36) = 8;
  uint64_t v689 = sub_23AB60324(v67, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v680 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v680 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v68 + 32) = 3;
  uint64_t v673 = sub_23AB60324(v68, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v69 + 32) = 20;
  uint64_t v70 = sub_23AB60324(v69, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v71 + 32) = 4096;
  *(unsigned char *)(v71 + 34) = 20;
  uint64_t v72 = sub_23AB60324(v71, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v73.value._countAndFlagsBits = 0x68507463656C6573;
  v73.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v73, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  char v74 = sub_23ABB8BA8();
  char v75 = sub_23ABBFBE0();
  *((void *)&v606 + 1) = v673;
  *(void *)&long long v606 = v680;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC410A0, v63, v65, v66, v74 & 1, v75 & 1, v689, (uint64_t)v739._rawValue + 640, v606, v70, v72, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_23AC2C700;
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_23AC2C700;
  *(void *)(v77 + 32) = 0x70207463656C6553;
  *(void *)(v77 + 40) = 0xEF73756F69766572;
  *(void *)(v76 + 32) = v77;
  *(unsigned char *)(v76 + 40) = 0;
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_23AC2C700;
  *(void *)(v78 + 32) = 0xD000000000000047;
  *(void *)(v78 + 40) = 0x800000023AC410C0;
  *(unsigned char *)(v78 + 48) = 0;
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_23AC2C700;
  *(void *)(v79 + 32) = 0x100000000000013CLL;
  *(void *)(v79 + 40) = 0x800000023AC41110;
  *(unsigned char *)(v79 + 48) = 0;
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v80 + 32) = 84017408;
  *(unsigned char *)(v80 + 36) = 8;
  uint64_t v728 = sub_23AB60324(v80, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v713 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v713 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v81 + 32) = 3;
  uint64_t v82 = sub_23AB60324(v81, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v83 + 32) = 16;
  uint64_t v84 = sub_23AB60324(v83, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v85.value._countAndFlagsBits = 0x72507463656C6573;
  v85.value._object = (void *)0xEF3A73756F697665;
  Action.init(_:mac:)(v85, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  char v86 = sub_23ABB8BA8();
  char v87 = sub_23ABBFBE0();
  uint64_t v88 = sub_23ABBFBE8();
  *((void *)&v607 + 1) = v82;
  *(void *)&long long v607 = v713;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC41250, v76, v78, v79, v86 & 1, v87 & 1, v728, (uint64_t)v739._rawValue + 792, v607, v88, v84, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_23AC2C700;
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_23AC2C700;
  *(void *)(v90 + 32) = 0x6E207463656C6553;
  *(void *)(v90 + 40) = 0xEB00000000747865;
  *(void *)(v89 + 32) = v90;
  *(unsigned char *)(v89 + 40) = 0;
  uint64_t v91 = swift_allocObject();
  *(_OWORD *)(v91 + 16) = xmmword_23AC2C700;
  *(void *)(v91 + 32) = 0xD00000000000004BLL;
  *(void *)(v91 + 40) = 0x800000023AC41270;
  *(unsigned char *)(v91 + 48) = 0;
  uint64_t v92 = swift_allocObject();
  *(_OWORD *)(v92 + 16) = xmmword_23AC2C700;
  *(void *)(v92 + 32) = 0x1000000000000129;
  *(void *)(v92 + 40) = 0x800000023AC412C0;
  *(unsigned char *)(v92 + 48) = 0;
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v93 + 32) = 84017408;
  *(unsigned char *)(v93 + 36) = 8;
  uint64_t v735 = sub_23AB60324(v93, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v714 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v714 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v94 = swift_allocObject();
  *(_OWORD *)(v94 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v94 + 32) = 3;
  uint64_t v95 = sub_23AB60324(v94, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v96 + 32) = 16;
  uint64_t v97 = sub_23AB60324(v96, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v98.value._countAndFlagsBits = 0x654E7463656C6573;
  v98.value._object = (void *)0xEB000000003A7478;
  Action.init(_:mac:)(v98, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  char v99 = sub_23ABB8BA8();
  char v100 = sub_23ABBFBE0();
  uint64_t v101 = sub_23ABBFBE8();
  *((void *)&v608 + 1) = v95;
  *(void *)&long long v608 = v714;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x6C65532E74786554, 0xEF7478654E746365, v89, v91, v92, v99 & 1, v100 & 1, v735, (uint64_t)v739._rawValue + 944, v608, v101, v97, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = xmmword_23AC2C700;
  uint64_t v103 = swift_allocObject();
  *(_OWORD *)(v103 + 16) = xmmword_23AC2C700;
  *(void *)(v103 + 32) = 0xD000000000000017;
  *(void *)(v103 + 40) = 0x800000023AC413F0;
  *(void *)(v102 + 32) = v103;
  *(unsigned char *)(v102 + 40) = 0;
  uint64_t v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_23AC2C700;
  *(void *)(v104 + 32) = 0xD00000000000002FLL;
  *(void *)(v104 + 40) = 0x800000023AC41410;
  *(unsigned char *)(v104 + 48) = 0;
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_23AC2C700;
  *(void *)(v105 + 32) = 0xD000000000000057;
  *(void *)(v105 + 40) = 0x800000023AC41440;
  *(unsigned char *)(v105 + 48) = 0;
  uint64_t v106 = swift_allocObject();
  *(_OWORD *)(v106 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v106 + 32) = 84017408;
  *(unsigned char *)(v106 + 36) = 8;
  uint64_t v690 = sub_23AB60324(v106, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v715 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v715 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v107 = swift_allocObject();
  *(_OWORD *)(v107 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v107 + 32) = 3;
  uint64_t v108 = sub_23AB60324(v107, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v109 = swift_allocObject();
  *(_OWORD *)(v109 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v109 + 32) = 16;
  uint64_t v110 = sub_23AB60324(v109, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v111.value._object = (void *)0x800000023AC414C0;
  v111.value._countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v111, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  char v112 = sub_23ABB8BA8();
  char v113 = sub_23ABBFBE0();
  uint64_t v114 = sub_23ABBFBE8();
  *((void *)&v609 + 1) = v108;
  *(void *)&long long v609 = v715;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC414A0, v102, v104, v105, v112 & 1, v113 & 1, v690, (uint64_t)v739._rawValue + 1096, v609, v114, v110, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v115 = swift_allocObject();
  *(_OWORD *)(v115 + 16) = xmmword_23AC2C700;
  uint64_t v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = xmmword_23AC2C700;
  *(void *)(v116 + 32) = 0xD00000000000001FLL;
  *(void *)(v116 + 40) = 0x800000023AC414E0;
  *(void *)(v115 + 32) = v116;
  *(unsigned char *)(v115 + 40) = 0;
  uint64_t v117 = swift_allocObject();
  *(_OWORD *)(v117 + 16) = xmmword_23AC2C700;
  *(void *)(v117 + 32) = 0xD000000000000030;
  *(void *)(v117 + 40) = 0x800000023AC41500;
  *(unsigned char *)(v117 + 48) = 0;
  uint64_t v118 = swift_allocObject();
  *(_OWORD *)(v118 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v118 + 32) = 84017408;
  *(unsigned char *)(v118 + 36) = 8;
  uint64_t v674 = sub_23AB60324(v118, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v671 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v671 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v119 + 32) = 3;
  uint64_t v120 = sub_23AB60324(v119, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v121 = swift_allocObject();
  *(_OWORD *)(v121 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v121 + 32) = 16;
  uint64_t v122 = sub_23AB60324(v121, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v123.value._countAndFlagsBits = 0xD000000000000018;
  v123.value._object = (void *)0x800000023AC41560;
  Action.init(_:mac:)(v123, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v124 = sub_23ABBFBD4();
  char v125 = sub_23ABB8BA8();
  char v126 = sub_23ABBFBE0();
  uint64_t v127 = sub_23ABBFBE8();
  *((void *)&v610 + 1) = v120;
  *(void *)&long long v610 = v671;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC41540, v115, v117, v124, v125 & 1, v126 & 1, v674, (uint64_t)v739._rawValue + 1248, v610, v127, v122, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v128 = swift_allocObject();
  *(_OWORD *)(v128 + 16) = xmmword_23AC2C700;
  uint64_t v129 = swift_allocObject();
  *(_OWORD *)(v129 + 16) = xmmword_23AC2C700;
  *(void *)(v129 + 32) = 0xD00000000000001BLL;
  *(void *)(v129 + 40) = 0x800000023AC41580;
  *(void *)(v128 + 32) = v129;
  *(unsigned char *)(v128 + 40) = 0;
  uint64_t v130 = swift_allocObject();
  *(_OWORD *)(v130 + 16) = xmmword_23AC2C700;
  *(void *)(v130 + 32) = 0xD00000000000002FLL;
  *(void *)(v130 + 40) = 0x800000023AC41410;
  *(unsigned char *)(v130 + 48) = 0;
  uint64_t v131 = swift_allocObject();
  *(_OWORD *)(v131 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v131 + 32) = 84017408;
  *(unsigned char *)(v131 + 36) = 8;
  uint64_t v681 = sub_23AB60324(v131, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v675 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v675 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v132 + 32) = 3;
  uint64_t v133 = sub_23AB60324(v132, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v134 = swift_allocObject();
  *(_OWORD *)(v134 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v134 + 32) = 16;
  uint64_t v135 = sub_23AB60324(v134, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v136.value._countAndFlagsBits = 0xD000000000000014;
  v136.value._object = (void *)0x800000023AC415C0;
  Action.init(_:mac:)(v136, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v137 = sub_23ABBFBD4();
  char v138 = sub_23ABB8BA8();
  char v139 = sub_23ABBFBE0();
  uint64_t v140 = sub_23ABBFBE8();
  *((void *)&v611 + 1) = v133;
  *(void *)&long long v611 = v675;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC415A0, v128, v130, v137, v138 & 1, v139 & 1, v681, (uint64_t)v739._rawValue + 1400, v611, v140, v135, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v141 = swift_allocObject();
  *(_OWORD *)(v141 + 16) = xmmword_23AC2C700;
  uint64_t v142 = swift_allocObject();
  *(_OWORD *)(v142 + 16) = xmmword_23AC2C700;
  *(void *)(v142 + 32) = 0xD000000000000012;
  *(void *)(v142 + 40) = 0x800000023AC415E0;
  *(void *)(v141 + 32) = v142;
  *(unsigned char *)(v141 + 40) = 0;
  uint64_t v143 = swift_allocObject();
  *(_OWORD *)(v143 + 16) = xmmword_23AC2C700;
  *(void *)(v143 + 32) = 0xD00000000000002FLL;
  *(void *)(v143 + 40) = 0x800000023AC41600;
  *(unsigned char *)(v143 + 48) = 0;
  uint64_t v144 = swift_allocObject();
  *(_OWORD *)(v144 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v144 + 32) = 84017408;
  *(unsigned char *)(v144 + 36) = 8;
  uint64_t v682 = sub_23AB60324(v144, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v699 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v699 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v145 = swift_allocObject();
  *(_OWORD *)(v145 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v145 + 32) = 3;
  uint64_t v146 = sub_23AB60324(v145, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v147 = swift_allocObject();
  *(_OWORD *)(v147 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v147 + 32) = 16;
  uint64_t v148 = sub_23AB60324(v147, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v149.value._object = (void *)0x800000023AC41650;
  v149.value._countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v149, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v150 = sub_23ABBFBD4();
  char v151 = sub_23ABB8BA8();
  char v152 = sub_23ABBFBE0();
  uint64_t v153 = sub_23ABBFBE8();
  *((void *)&v612 + 1) = v146;
  *(void *)&long long v612 = v699;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC41630, v141, v143, v150, v151 & 1, v152 & 1, v682, (uint64_t)v739._rawValue + 1552, v612, v153, v148, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v154 = swift_allocObject();
  *(_OWORD *)(v154 + 16) = xmmword_23AC2C700;
  uint64_t v155 = swift_allocObject();
  *(_OWORD *)(v155 + 16) = xmmword_23AC2C700;
  *(void *)(v155 + 32) = 0xD00000000000001ALL;
  *(void *)(v155 + 40) = 0x800000023AC41670;
  *(void *)(v154 + 32) = v155;
  *(unsigned char *)(v154 + 40) = 0;
  uint64_t v156 = swift_allocObject();
  *(_OWORD *)(v156 + 16) = xmmword_23AC2C700;
  *(void *)(v156 + 32) = 0xD00000000000002BLL;
  *(void *)(v156 + 40) = 0x800000023AC41690;
  *(unsigned char *)(v156 + 48) = 0;
  uint64_t v157 = swift_allocObject();
  *(_OWORD *)(v157 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v157 + 32) = 84017408;
  *(unsigned char *)(v157 + 36) = 8;
  uint64_t v676 = sub_23AB60324(v157, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v665 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v665 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v158 = swift_allocObject();
  *(_OWORD *)(v158 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v158 + 32) = 3;
  uint64_t v159 = sub_23AB60324(v158, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v160 = swift_allocObject();
  *(_OWORD *)(v160 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v160 + 32) = 16;
  uint64_t v161 = sub_23AB60324(v160, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v162.value._object = (void *)0x800000023AC416E0;
  v162.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v162, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v163 = sub_23ABBFBD4();
  char v164 = sub_23ABB8BA8();
  char v165 = sub_23ABBFBE0();
  uint64_t v166 = sub_23ABBFBE8();
  *((void *)&v613 + 1) = v159;
  *(void *)&long long v613 = v665;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC416C0, v154, v156, v163, v164 & 1, v165 & 1, v676, (uint64_t)v739._rawValue + 1704, v613, v166, v161, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v167 = swift_allocObject();
  *(_OWORD *)(v167 + 16) = xmmword_23AC2C700;
  uint64_t v168 = swift_allocObject();
  *(_OWORD *)(v168 + 16) = xmmword_23AC2C700;
  *(void *)(v168 + 32) = 0xD000000000000016;
  *(void *)(v168 + 40) = 0x800000023AC41700;
  *(void *)(v167 + 32) = v168;
  *(unsigned char *)(v167 + 40) = 0;
  uint64_t v169 = swift_allocObject();
  *(_OWORD *)(v169 + 16) = xmmword_23AC2C700;
  *(void *)(v169 + 32) = 0xD00000000000002ALL;
  *(void *)(v169 + 40) = 0x800000023AC41720;
  *(unsigned char *)(v169 + 48) = 0;
  uint64_t v170 = swift_allocObject();
  *(_OWORD *)(v170 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v170 + 32) = 84017408;
  *(unsigned char *)(v170 + 36) = 8;
  uint64_t v691 = sub_23AB60324(v170, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v683 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v683 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v171 = swift_allocObject();
  *(_OWORD *)(v171 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v171 + 32) = 3;
  uint64_t v172 = sub_23AB60324(v171, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v173 = swift_allocObject();
  *(_OWORD *)(v173 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v173 + 32) = 16;
  uint64_t v174 = sub_23AB60324(v173, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v175.value._countAndFlagsBits = 0x654E7463656C6573;
  v175.value._object = (void *)0xEF3A64726F577478;
  Action.init(_:mac:)(v175, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v176 = sub_23ABBFBD4();
  char v177 = sub_23ABB8BA8();
  char v178 = sub_23ABBFBE0();
  uint64_t v179 = sub_23ABBFBE8();
  *((void *)&v614 + 1) = v172;
  *(void *)&long long v614 = v683;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC41750, v167, v169, v176, v177 & 1, v178 & 1, v691, (uint64_t)v739._rawValue + 1856, v614, v179, v174, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v180 = swift_allocObject();
  *(_OWORD *)(v180 + 16) = xmmword_23AC2C700;
  uint64_t v181 = swift_allocObject();
  *(_OWORD *)(v181 + 16) = xmmword_23AC2C700;
  *(void *)(v181 + 32) = 0xD000000000000016;
  *(void *)(v181 + 40) = 0x800000023AC41770;
  *(void *)(v180 + 32) = v181;
  *(unsigned char *)(v180 + 40) = 0;
  uint64_t v182 = swift_allocObject();
  *(_OWORD *)(v182 + 16) = xmmword_23AC2C700;
  *(void *)(v182 + 32) = 0xD000000000000033;
  *(void *)(v182 + 40) = 0x800000023AC41790;
  *(unsigned char *)(v182 + 48) = 0;
  uint64_t v183 = swift_allocObject();
  *(_OWORD *)(v183 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v183 + 32) = 84017408;
  *(unsigned char *)(v183 + 36) = 8;
  uint64_t v677 = sub_23AB60324(v183, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v700 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v700 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v184 = swift_allocObject();
  *(_OWORD *)(v184 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v184 + 32) = 3;
  uint64_t v185 = sub_23AB60324(v184, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v186 = swift_allocObject();
  *(_OWORD *)(v186 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v186 + 32) = 16;
  uint64_t v187 = sub_23AB60324(v186, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v188.value._object = (void *)0x800000023AC417F0;
  v188.value._countAndFlagsBits = 0xD000000000000016;
  Action.init(_:mac:)(v188, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v189 = sub_23ABBFBD4();
  char v190 = sub_23ABB8BA8();
  char v191 = sub_23ABBFBE0();
  uint64_t v192 = sub_23ABBFBE8();
  *((void *)&v615 + 1) = v185;
  *(void *)&long long v615 = v700;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC417D0, v180, v182, v189, v190 & 1, v191 & 1, v677, (uint64_t)v739._rawValue + 2008, v615, v192, v187, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v193 = swift_allocObject();
  *(_OWORD *)(v193 + 16) = xmmword_23AC2C700;
  uint64_t v194 = swift_allocObject();
  *(_OWORD *)(v194 + 16) = xmmword_23AC2C700;
  *(void *)(v194 + 32) = 0xD00000000000001ELL;
  *(void *)(v194 + 40) = 0x800000023AC41810;
  *(void *)(v193 + 32) = v194;
  *(unsigned char *)(v193 + 40) = 0;
  uint64_t v195 = swift_allocObject();
  *(_OWORD *)(v195 + 16) = xmmword_23AC2C700;
  *(void *)(v195 + 32) = 0xD00000000000002FLL;
  *(void *)(v195 + 40) = 0x800000023AC41830;
  *(unsigned char *)(v195 + 48) = 0;
  uint64_t v196 = swift_allocObject();
  *(_OWORD *)(v196 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v196 + 32) = 84017408;
  *(unsigned char *)(v196 + 36) = 8;
  uint64_t v658 = sub_23AB60324(v196, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v654 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v654 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v197 = swift_allocObject();
  *(_OWORD *)(v197 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v197 + 32) = 3;
  uint64_t v198 = sub_23AB60324(v197, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v199 = swift_allocObject();
  *(_OWORD *)(v199 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v199 + 32) = 16;
  uint64_t v200 = sub_23AB60324(v199, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v201.value._countAndFlagsBits = 0xD000000000000017;
  v201.value._object = (void *)0x800000023AC41880;
  Action.init(_:mac:)(v201, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v202 = sub_23ABBFBD4();
  char v203 = sub_23ABB8BA8();
  char v204 = sub_23ABBFBE0();
  uint64_t v205 = sub_23ABBFBE8();
  *((void *)&v616 + 1) = v198;
  *(void *)&long long v616 = v654;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC41860, v193, v195, v202, v203 & 1, v204 & 1, v658, (uint64_t)v739._rawValue + 2160, v616, v205, v200, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v206 = swift_allocObject();
  *(_OWORD *)(v206 + 16) = xmmword_23AC2C700;
  uint64_t v207 = swift_allocObject();
  *(_OWORD *)(v207 + 16) = xmmword_23AC2C700;
  *(void *)(v207 + 32) = 0xD00000000000001ALL;
  *(void *)(v207 + 40) = 0x800000023AC418A0;
  *(void *)(v206 + 32) = v207;
  *(unsigned char *)(v206 + 40) = 0;
  uint64_t v208 = swift_allocObject();
  *(_OWORD *)(v208 + 16) = xmmword_23AC2C700;
  *(void *)(v208 + 32) = 0xD00000000000002ELL;
  *(void *)(v208 + 40) = 0x800000023AC418C0;
  *(unsigned char *)(v208 + 48) = 0;
  uint64_t v209 = swift_allocObject();
  *(_OWORD *)(v209 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v209 + 32) = 84017408;
  *(unsigned char *)(v209 + 36) = 8;
  uint64_t v666 = sub_23AB60324(v209, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v659 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v659 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v210 = swift_allocObject();
  *(_OWORD *)(v210 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v210 + 32) = 3;
  uint64_t v211 = sub_23AB60324(v210, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v212 = swift_allocObject();
  *(_OWORD *)(v212 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v212 + 32) = 16;
  uint64_t v213 = sub_23AB60324(v212, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v214.value._object = (void *)0x800000023AC41910;
  v214.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v214, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v215 = sub_23ABBFBD4();
  char v216 = sub_23ABB8BA8();
  char v217 = sub_23ABBFBE0();
  uint64_t v218 = sub_23ABBFBE8();
  *((void *)&v617 + 1) = v211;
  *(void *)&long long v617 = v659;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC418F0, v206, v208, v215, v216 & 1, v217 & 1, v666, (uint64_t)v739._rawValue + 2312, v617, v218, v213, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v219 = swift_allocObject();
  *(_OWORD *)(v219 + 16) = xmmword_23AC2C700;
  uint64_t v220 = swift_allocObject();
  *(_OWORD *)(v220 + 16) = xmmword_23AC2C700;
  *(void *)(v220 + 32) = 0xD000000000000017;
  *(void *)(v220 + 40) = 0x800000023AC41930;
  *(void *)(v219 + 32) = v220;
  *(unsigned char *)(v219 + 40) = 0;
  uint64_t v221 = swift_allocObject();
  *(_OWORD *)(v221 + 16) = xmmword_23AC2C700;
  *(void *)(v221 + 32) = 0xD000000000000034;
  *(void *)(v221 + 40) = 0x800000023AC41950;
  *(unsigned char *)(v221 + 48) = 0;
  uint64_t v222 = swift_allocObject();
  *(_OWORD *)(v222 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v222 + 32) = 84017408;
  *(unsigned char *)(v222 + 36) = 8;
  uint64_t v660 = sub_23AB60324(v222, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v684 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v684 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v223 = swift_allocObject();
  *(_OWORD *)(v223 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v223 + 32) = 3;
  uint64_t v224 = sub_23AB60324(v223, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v225 = swift_allocObject();
  *(_OWORD *)(v225 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v225 + 32) = 16;
  uint64_t v226 = sub_23AB60324(v225, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v227.value._countAndFlagsBits = 0xD000000000000017;
  v227.value._object = (void *)0x800000023AC419B0;
  Action.init(_:mac:)(v227, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v228 = sub_23ABBFBD4();
  char v229 = sub_23ABB8BA8();
  char v230 = sub_23ABBFBE0();
  uint64_t v231 = sub_23ABBFBE8();
  *((void *)&v618 + 1) = v224;
  *(void *)&long long v618 = v684;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC41990, v219, v221, v228, v229 & 1, v230 & 1, v660, (uint64_t)v739._rawValue + 2464, v618, v231, v226, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v232 = swift_allocObject();
  *(_OWORD *)(v232 + 16) = xmmword_23AC2C700;
  uint64_t v233 = swift_allocObject();
  *(_OWORD *)(v233 + 16) = xmmword_23AC2C700;
  *(void *)(v233 + 32) = 0xD00000000000001FLL;
  *(void *)(v233 + 40) = 0x800000023AC419D0;
  *(void *)(v232 + 32) = v233;
  *(unsigned char *)(v232 + 40) = 0;
  uint64_t v234 = swift_allocObject();
  *(_OWORD *)(v234 + 16) = xmmword_23AC2C700;
  *(void *)(v234 + 32) = 0xD000000000000030;
  *(void *)(v234 + 40) = 0x800000023AC419F0;
  *(unsigned char *)(v234 + 48) = 0;
  uint64_t v235 = swift_allocObject();
  *(_OWORD *)(v235 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v235 + 32) = 84017408;
  *(unsigned char *)(v235 + 36) = 8;
  uint64_t v661 = sub_23AB60324(v235, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v647 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v647 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v236 = swift_allocObject();
  *(_OWORD *)(v236 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v236 + 32) = 3;
  uint64_t v237 = sub_23AB60324(v236, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v238 = swift_allocObject();
  *(_OWORD *)(v238 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v238 + 32) = 16;
  uint64_t v239 = sub_23AB60324(v238, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v240.value._countAndFlagsBits = 0xD000000000000018;
  v240.value._object = (void *)0x800000023AC41A50;
  Action.init(_:mac:)(v240, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v241 = sub_23ABBFBD4();
  char v242 = sub_23ABB8BA8();
  char v243 = sub_23ABBFBE0();
  uint64_t v244 = sub_23ABBFBE8();
  *((void *)&v619 + 1) = v237;
  *(void *)&long long v619 = v647;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC41A30, v232, v234, v241, v242 & 1, v243 & 1, v661, (uint64_t)v739._rawValue + 2616, v619, v244, v239, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v245 = swift_allocObject();
  *(_OWORD *)(v245 + 16) = xmmword_23AC2C700;
  uint64_t v246 = swift_allocObject();
  *(_OWORD *)(v246 + 16) = xmmword_23AC2C700;
  *(void *)(v246 + 32) = 0xD00000000000001BLL;
  *(void *)(v246 + 40) = 0x800000023AC41A70;
  *(void *)(v245 + 32) = v246;
  *(unsigned char *)(v245 + 40) = 0;
  uint64_t v247 = swift_allocObject();
  *(_OWORD *)(v247 + 16) = xmmword_23AC2C700;
  *(void *)(v247 + 32) = 0xD00000000000002FLL;
  *(void *)(v247 + 40) = 0x800000023AC41A90;
  *(unsigned char *)(v247 + 48) = 0;
  uint64_t v248 = swift_allocObject();
  *(_OWORD *)(v248 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v248 + 32) = 84017408;
  *(unsigned char *)(v248 + 36) = 8;
  uint64_t v650 = sub_23AB60324(v248, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v648 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v648 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v249 = swift_allocObject();
  *(_OWORD *)(v249 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v249 + 32) = 3;
  uint64_t v250 = sub_23AB60324(v249, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v251 = swift_allocObject();
  *(_OWORD *)(v251 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v251 + 32) = 16;
  uint64_t v252 = sub_23AB60324(v251, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v253.value._countAndFlagsBits = 0xD000000000000014;
  v253.value._object = (void *)0x800000023AC41AE0;
  Action.init(_:mac:)(v253, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v254 = sub_23ABBFBD4();
  char v255 = sub_23ABB8BA8();
  char v256 = sub_23ABBFBE0();
  uint64_t v257 = sub_23ABBFBE8();
  *((void *)&v620 + 1) = v250;
  *(void *)&long long v620 = v648;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC41AC0, v245, v247, v254, v255 & 1, v256 & 1, v650, (uint64_t)v739._rawValue + 2768, v620, v257, v252, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v258 = swift_allocObject();
  *(_OWORD *)(v258 + 16) = xmmword_23AC2C700;
  uint64_t v259 = swift_allocObject();
  *(_OWORD *)(v259 + 16) = xmmword_23AC2C700;
  *(void *)(v259 + 32) = 0xD000000000000012;
  *(void *)(v259 + 40) = 0x800000023AC41B00;
  *(void *)(v258 + 32) = v259;
  *(unsigned char *)(v258 + 40) = 0;
  uint64_t v260 = swift_allocObject();
  *(_OWORD *)(v260 + 16) = xmmword_23AC2C700;
  *(void *)(v260 + 32) = 0xD00000000000002FLL;
  *(void *)(v260 + 40) = 0x800000023AC41B20;
  *(unsigned char *)(v260 + 48) = 0;
  uint64_t v261 = swift_allocObject();
  *(_OWORD *)(v261 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v261 + 32) = 84017408;
  *(unsigned char *)(v261 + 36) = 8;
  uint64_t v651 = sub_23AB60324(v261, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v667 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v667 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v262 = swift_allocObject();
  *(_OWORD *)(v262 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v262 + 32) = 3;
  uint64_t v263 = sub_23AB60324(v262, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v264 = swift_allocObject();
  *(_OWORD *)(v264 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v264 + 32) = 16;
  uint64_t v265 = sub_23AB60324(v264, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v266.value._object = (void *)0x800000023AC41B70;
  v266.value._countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v266, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v267 = sub_23ABBFBD4();
  char v268 = sub_23ABB8BA8();
  char v269 = sub_23ABBFBE0();
  uint64_t v270 = sub_23ABBFBE8();
  *((void *)&v621 + 1) = v263;
  *(void *)&long long v621 = v667;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC41B50, v258, v260, v267, v268 & 1, v269 & 1, v651, (uint64_t)v739._rawValue + 2920, v621, v270, v265, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v271 = swift_allocObject();
  *(_OWORD *)(v271 + 16) = xmmword_23AC2C700;
  uint64_t v272 = swift_allocObject();
  *(_OWORD *)(v272 + 16) = xmmword_23AC2C700;
  *(void *)(v272 + 32) = 0xD00000000000001ALL;
  *(void *)(v272 + 40) = 0x800000023AC41B90;
  *(void *)(v271 + 32) = v272;
  *(unsigned char *)(v271 + 40) = 0;
  uint64_t v273 = swift_allocObject();
  *(_OWORD *)(v273 + 16) = xmmword_23AC2C700;
  *(void *)(v273 + 32) = 0xD00000000000002BLL;
  *(void *)(v273 + 40) = 0x800000023AC41BB0;
  *(unsigned char *)(v273 + 48) = 0;
  uint64_t v274 = swift_allocObject();
  *(_OWORD *)(v274 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v274 + 32) = 84017408;
  *(unsigned char *)(v274 + 36) = 8;
  uint64_t v652 = sub_23AB60324(v274, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v649 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v649 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v275 = swift_allocObject();
  *(_OWORD *)(v275 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v275 + 32) = 3;
  uint64_t v276 = sub_23AB60324(v275, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v277 = swift_allocObject();
  *(_OWORD *)(v277 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v277 + 32) = 16;
  uint64_t v278 = sub_23AB60324(v277, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v279.value._object = (void *)0x800000023AC41C00;
  v279.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v279, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v280 = sub_23ABBFBD4();
  char v281 = sub_23ABB8BA8();
  char v282 = sub_23ABBFBE0();
  uint64_t v283 = sub_23ABBFBE8();
  *((void *)&v622 + 1) = v276;
  *(void *)&long long v622 = v649;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC41BE0, v271, v273, v280, v281 & 1, v282 & 1, v652, (uint64_t)v739._rawValue + 3072, v622, v283, v278, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v284 = swift_allocObject();
  *(_OWORD *)(v284 + 16) = xmmword_23AC2C700;
  uint64_t v285 = swift_allocObject();
  *(_OWORD *)(v285 + 16) = xmmword_23AC2C700;
  *(void *)(v285 + 32) = 0xD000000000000016;
  *(void *)(v285 + 40) = 0x800000023AC41C20;
  *(void *)(v284 + 32) = v285;
  *(unsigned char *)(v284 + 40) = 0;
  uint64_t v286 = swift_allocObject();
  *(_OWORD *)(v286 + 16) = xmmword_23AC2C700;
  *(void *)(v286 + 32) = 0xD00000000000002ALL;
  *(void *)(v286 + 40) = 0x800000023AC41C40;
  *(unsigned char *)(v286 + 48) = 0;
  uint64_t v287 = swift_allocObject();
  *(_OWORD *)(v287 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v287 + 32) = 84017408;
  *(unsigned char *)(v287 + 36) = 8;
  uint64_t v662 = sub_23AB60324(v287, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v655 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v655 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v288 = swift_allocObject();
  *(_OWORD *)(v288 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v288 + 32) = 3;
  uint64_t v289 = sub_23AB60324(v288, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v290 = swift_allocObject();
  *(_OWORD *)(v290 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v290 + 32) = 16;
  uint64_t v291 = sub_23AB60324(v290, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v292.value._countAndFlagsBits = 0x654E7463656C6573;
  v292.value._object = (void *)0xEF3A656E694C7478;
  Action.init(_:mac:)(v292, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v293 = sub_23ABBFBD4();
  char v294 = sub_23ABB8BA8();
  char v295 = sub_23ABBFBE0();
  uint64_t v296 = sub_23ABBFBE8();
  *((void *)&v623 + 1) = v289;
  *(void *)&long long v623 = v655;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC41C70, v284, v286, v293, v294 & 1, v295 & 1, v662, (uint64_t)v739._rawValue + 3224, v623, v296, v291, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v297 = swift_allocObject();
  *(_OWORD *)(v297 + 16) = xmmword_23AC2C700;
  uint64_t v298 = swift_allocObject();
  *(_OWORD *)(v298 + 16) = xmmword_23AC2C700;
  *(void *)(v298 + 32) = 0xD000000000000046;
  *(void *)(v298 + 40) = 0x800000023AC41C90;
  *(void *)(v297 + 32) = v298;
  *(unsigned char *)(v297 + 40) = 0;
  uint64_t v299 = swift_allocObject();
  *(_OWORD *)(v299 + 16) = xmmword_23AC2C700;
  *(void *)(v299 + 32) = 0xD000000000000045;
  *(void *)(v299 + 40) = 0x800000023AC41CE0;
  *(unsigned char *)(v299 + 48) = 0;
  uint64_t v300 = swift_allocObject();
  *(_OWORD *)(v300 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v300 + 32) = 84017408;
  *(unsigned char *)(v300 + 36) = 8;
  uint64_t v656 = sub_23AB60324(v300, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v653 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v653 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v301 = swift_allocObject();
  *(_OWORD *)(v301 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v301 + 32) = 3;
  uint64_t v302 = sub_23AB60324(v301, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v303 = swift_allocObject();
  *(_OWORD *)(v303 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v303 + 32) = 16;
  uint64_t v304 = sub_23AB60324(v303, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v305.value._countAndFlagsBits = 0xD000000000000018;
  v305.value._object = (void *)0x800000023AC41560;
  Action.init(_:mac:)(v305, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v306 = sub_23ABBFBD4();
  char v307 = sub_23ABB8BA8();
  char v308 = sub_23ABBFBE0();
  uint64_t v309 = sub_23ABBFBE8();
  *((void *)&v624 + 1) = v302;
  *(void *)&long long v624 = v653;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000030, 0x800000023AC41D30, v297, v299, v306, v307 & 1, v308 & 1, v656, (uint64_t)v739._rawValue + 3376, v624, v309, v304, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v310 = swift_allocObject();
  *(_OWORD *)(v310 + 16) = xmmword_23AC2C700;
  uint64_t v311 = swift_allocObject();
  *(_OWORD *)(v311 + 16) = xmmword_23AC2C700;
  *(void *)(v311 + 32) = 0xD000000000000042;
  *(void *)(v311 + 40) = 0x800000023AC41D70;
  *(void *)(v310 + 32) = v311;
  *(unsigned char *)(v310 + 40) = 0;
  uint64_t v312 = swift_allocObject();
  *(_OWORD *)(v312 + 16) = xmmword_23AC2C700;
  *(void *)(v312 + 32) = 0xD000000000000044;
  *(void *)(v312 + 40) = 0x800000023AC41DC0;
  *(unsigned char *)(v312 + 48) = 0;
  uint64_t v313 = swift_allocObject();
  *(_OWORD *)(v313 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v313 + 32) = 84017408;
  *(unsigned char *)(v313 + 36) = 8;
  uint64_t v663 = sub_23AB60324(v313, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v657 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v657 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v314 = swift_allocObject();
  *(_OWORD *)(v314 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v314 + 32) = 3;
  uint64_t v315 = sub_23AB60324(v314, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v316 = swift_allocObject();
  *(_OWORD *)(v316 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v316 + 32) = 16;
  uint64_t v317 = sub_23AB60324(v316, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v318.value._countAndFlagsBits = 0xD000000000000014;
  v318.value._object = (void *)0x800000023AC415C0;
  Action.init(_:mac:)(v318, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v319 = sub_23ABBFBD4();
  char v320 = sub_23ABB8BA8();
  char v321 = sub_23ABBFBE0();
  uint64_t v322 = sub_23ABBFBE8();
  *((void *)&v625 + 1) = v315;
  *(void *)&long long v625 = v657;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002CLL, 0x800000023AC41E10, v310, v312, v319, v320 & 1, v321 & 1, v663, (uint64_t)v739._rawValue + 3528, v625, v322, v317, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v323 = swift_allocObject();
  *(_OWORD *)(v323 + 16) = xmmword_23AC2C700;
  uint64_t v324 = swift_allocObject();
  *(_OWORD *)(v324 + 16) = xmmword_23AC2C700;
  *(void *)(v324 + 32) = 0xD000000000000041;
  *(void *)(v324 + 40) = 0x800000023AC41E40;
  *(void *)(v323 + 32) = v324;
  *(unsigned char *)(v323 + 40) = 0;
  uint64_t v325 = swift_allocObject();
  *(_OWORD *)(v325 + 16) = xmmword_23AC2C700;
  *(void *)(v325 + 32) = 0xD000000000000040;
  *(void *)(v325 + 40) = 0x800000023AC41E90;
  *(unsigned char *)(v325 + 48) = 0;
  uint64_t v326 = swift_allocObject();
  *(_OWORD *)(v326 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v326 + 32) = 84017408;
  *(unsigned char *)(v326 + 36) = 8;
  uint64_t v668 = sub_23AB60324(v326, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v664 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v664 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v327 = swift_allocObject();
  *(_OWORD *)(v327 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v327 + 32) = 3;
  uint64_t v328 = sub_23AB60324(v327, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v329 = swift_allocObject();
  *(_OWORD *)(v329 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v329 + 32) = 16;
  uint64_t v330 = sub_23AB60324(v329, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v331.value._object = (void *)0x800000023AC416E0;
  v331.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v331, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v332 = sub_23ABBFBD4();
  char v333 = sub_23ABB8BA8();
  char v334 = sub_23ABBFBE0();
  uint64_t v335 = sub_23ABBFBE8();
  *((void *)&v626 + 1) = v328;
  *(void *)&long long v626 = v664;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC41EE0, v323, v325, v332, v333 & 1, v334 & 1, v668, (uint64_t)v739._rawValue + 3680, v626, v335, v330, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v336 = swift_allocObject();
  *(_OWORD *)(v336 + 16) = xmmword_23AC2C700;
  uint64_t v337 = swift_allocObject();
  *(_OWORD *)(v337 + 16) = xmmword_23AC2C700;
  *(void *)(v337 + 32) = 0xD00000000000003DLL;
  *(void *)(v337 + 40) = 0x800000023AC41F10;
  *(void *)(v336 + 32) = v337;
  *(unsigned char *)(v336 + 40) = 0;
  uint64_t v338 = swift_allocObject();
  *(_OWORD *)(v338 + 16) = xmmword_23AC2C700;
  *(void *)(v338 + 32) = 0xD00000000000003FLL;
  *(void *)(v338 + 40) = 0x800000023AC41F50;
  *(unsigned char *)(v338 + 48) = 0;
  uint64_t v339 = swift_allocObject();
  *(_OWORD *)(v339 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v339 + 32) = 84017408;
  *(unsigned char *)(v339 + 36) = 8;
  uint64_t v716 = sub_23AB60324(v339, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v669 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v669 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v340 = swift_allocObject();
  *(_OWORD *)(v340 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v340 + 32) = 3;
  uint64_t v341 = sub_23AB60324(v340, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v342 = swift_allocObject();
  *(_OWORD *)(v342 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v342 + 32) = 16;
  uint64_t v343 = sub_23AB60324(v342, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v344.value._countAndFlagsBits = 0x654E7463656C6573;
  v344.value._object = (void *)0xEF3A64726F577478;
  Action.init(_:mac:)(v344, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v345 = sub_23ABBFBD4();
  char v346 = sub_23ABB8BA8();
  char v347 = sub_23ABBFBE0();
  uint64_t v348 = sub_23ABBFBE8();
  *((void *)&v627 + 1) = v341;
  *(void *)&long long v627 = v669;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC41F90, v336, v338, v345, v346 & 1, v347 & 1, v716, (uint64_t)v739._rawValue + 3832, v627, v348, v343, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v349 = swift_allocObject();
  *(_OWORD *)(v349 + 16) = xmmword_23AC2C700;
  uint64_t v350 = swift_allocObject();
  *(_OWORD *)(v350 + 16) = xmmword_23AC2C700;
  *(void *)(v350 + 32) = 0xD000000000000045;
  *(void *)(v350 + 40) = 0x800000023AC41FC0;
  *(void *)(v349 + 32) = v350;
  *(unsigned char *)(v349 + 40) = 0;
  uint64_t v351 = swift_allocObject();
  *(_OWORD *)(v351 + 16) = xmmword_23AC2C700;
  *(void *)(v351 + 32) = 0xD000000000000044;
  *(void *)(v351 + 40) = 0x800000023AC42010;
  *(unsigned char *)(v351 + 48) = 0;
  uint64_t v352 = swift_allocObject();
  *(_OWORD *)(v352 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v352 + 32) = 84017408;
  *(unsigned char *)(v352 + 36) = 8;
  uint64_t v717 = sub_23AB60324(v352, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v670 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v670 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v353 = swift_allocObject();
  *(_OWORD *)(v353 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v353 + 32) = 3;
  uint64_t v354 = sub_23AB60324(v353, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v355 = swift_allocObject();
  *(_OWORD *)(v355 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v355 + 32) = 16;
  uint64_t v356 = sub_23AB60324(v355, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v357.value._countAndFlagsBits = 0xD000000000000017;
  v357.value._object = (void *)0x800000023AC41880;
  Action.init(_:mac:)(v357, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v358 = sub_23ABBFBD4();
  char v359 = sub_23ABB8BA8();
  char v360 = sub_23ABBFBE0();
  uint64_t v361 = sub_23ABBFBE8();
  *((void *)&v628 + 1) = v354;
  *(void *)&long long v628 = v670;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002FLL, 0x800000023AC42060, v349, v351, v358, v359 & 1, v360 & 1, v717, (uint64_t)v739._rawValue + 3984, v628, v361, v356, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v362 = swift_allocObject();
  *(_OWORD *)(v362 + 16) = xmmword_23AC2C700;
  uint64_t v363 = swift_allocObject();
  *(_OWORD *)(v363 + 16) = xmmword_23AC2C700;
  *(void *)(v363 + 32) = 0xD000000000000041;
  *(void *)(v363 + 40) = 0x800000023AC42090;
  *(void *)(v362 + 32) = v363;
  *(unsigned char *)(v362 + 40) = 0;
  uint64_t v364 = swift_allocObject();
  *(_OWORD *)(v364 + 16) = xmmword_23AC2C700;
  *(void *)(v364 + 32) = 0xD000000000000043;
  *(void *)(v364 + 40) = 0x800000023AC420E0;
  *(unsigned char *)(v364 + 48) = 0;
  uint64_t v365 = swift_allocObject();
  *(_OWORD *)(v365 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v365 + 32) = 84017408;
  *(unsigned char *)(v365 + 36) = 8;
  uint64_t v718 = sub_23AB60324(v365, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v692 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v692 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v366 = swift_allocObject();
  *(_OWORD *)(v366 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v366 + 32) = 3;
  uint64_t v367 = sub_23AB60324(v366, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v368 = swift_allocObject();
  *(_OWORD *)(v368 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v368 + 32) = 16;
  uint64_t v369 = sub_23AB60324(v368, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v370.value._object = (void *)0x800000023AC41910;
  v370.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v370, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v371 = sub_23ABBFBD4();
  char v372 = sub_23ABB8BA8();
  char v373 = sub_23ABBFBE0();
  uint64_t v374 = sub_23ABBFBE8();
  *((void *)&v629 + 1) = v367;
  *(void *)&long long v629 = v692;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC42130, v362, v364, v371, v372 & 1, v373 & 1, v718, (uint64_t)v739._rawValue + 4136, v629, v374, v369, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v375 = swift_allocObject();
  *(_OWORD *)(v375 + 16) = xmmword_23AC2C700;
  uint64_t v376 = swift_allocObject();
  *(_OWORD *)(v376 + 16) = xmmword_23AC2C700;
  *(void *)(v376 + 32) = 0xD000000000000046;
  *(void *)(v376 + 40) = 0x800000023AC42160;
  *(void *)(v375 + 32) = v376;
  *(unsigned char *)(v375 + 40) = 0;
  uint64_t v377 = swift_allocObject();
  *(_OWORD *)(v377 + 16) = xmmword_23AC2C700;
  *(void *)(v377 + 32) = 0xD000000000000045;
  *(void *)(v377 + 40) = 0x800000023AC421B0;
  *(unsigned char *)(v377 + 48) = 0;
  uint64_t v378 = swift_allocObject();
  *(_OWORD *)(v378 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v378 + 32) = 84017408;
  *(unsigned char *)(v378 + 36) = 8;
  uint64_t v719 = sub_23AB60324(v378, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v701 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v701 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v379 = swift_allocObject();
  *(_OWORD *)(v379 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v379 + 32) = 3;
  uint64_t v380 = sub_23AB60324(v379, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v381 = swift_allocObject();
  *(_OWORD *)(v381 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v381 + 32) = 16;
  uint64_t v382 = sub_23AB60324(v381, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v383.value._countAndFlagsBits = 0xD000000000000018;
  v383.value._object = (void *)0x800000023AC41A50;
  Action.init(_:mac:)(v383, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v384 = sub_23ABBFBD4();
  char v385 = sub_23ABB8BA8();
  char v386 = sub_23ABBFBE0();
  uint64_t v387 = sub_23ABBFBE8();
  *((void *)&v630 + 1) = v380;
  *(void *)&long long v630 = v701;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000030, 0x800000023AC42200, v375, v377, v384, v385 & 1, v386 & 1, v719, (uint64_t)v739._rawValue + 4288, v630, v387, v382, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v388 = swift_allocObject();
  *(_OWORD *)(v388 + 16) = xmmword_23AC2C700;
  uint64_t v389 = swift_allocObject();
  *(_OWORD *)(v389 + 16) = xmmword_23AC2C700;
  *(void *)(v389 + 32) = 0xD000000000000042;
  *(void *)(v389 + 40) = 0x800000023AC42240;
  *(void *)(v388 + 32) = v389;
  *(unsigned char *)(v388 + 40) = 0;
  uint64_t v390 = swift_allocObject();
  *(_OWORD *)(v390 + 16) = xmmword_23AC2C700;
  *(void *)(v390 + 32) = 0xD000000000000044;
  *(void *)(v390 + 40) = 0x800000023AC42290;
  *(unsigned char *)(v390 + 48) = 0;
  uint64_t v391 = swift_allocObject();
  *(_OWORD *)(v391 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v391 + 32) = 84017408;
  *(unsigned char *)(v391 + 36) = 8;
  uint64_t v720 = sub_23AB60324(v391, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v702 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v702 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v392 = swift_allocObject();
  *(_OWORD *)(v392 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v392 + 32) = 3;
  uint64_t v393 = sub_23AB60324(v392, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v394 = swift_allocObject();
  *(_OWORD *)(v394 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v394 + 32) = 16;
  uint64_t v395 = sub_23AB60324(v394, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v396.value._countAndFlagsBits = 0xD000000000000014;
  v396.value._object = (void *)0x800000023AC41AE0;
  Action.init(_:mac:)(v396, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v397 = sub_23ABBFBD4();
  char v398 = sub_23ABB8BA8();
  char v399 = sub_23ABBFBE0();
  uint64_t v400 = sub_23ABBFBE8();
  *((void *)&v631 + 1) = v393;
  *(void *)&long long v631 = v702;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002CLL, 0x800000023AC422E0, v388, v390, v397, v398 & 1, v399 & 1, v720, (uint64_t)v739._rawValue + 4440, v631, v400, v395, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v401 = swift_allocObject();
  *(_OWORD *)(v401 + 16) = xmmword_23AC2C700;
  uint64_t v402 = swift_allocObject();
  *(_OWORD *)(v402 + 16) = xmmword_23AC2C700;
  *(void *)(v402 + 32) = 0xD000000000000041;
  *(void *)(v402 + 40) = 0x800000023AC42310;
  *(void *)(v401 + 32) = v402;
  *(unsigned char *)(v401 + 40) = 0;
  uint64_t v403 = swift_allocObject();
  *(_OWORD *)(v403 + 16) = xmmword_23AC2C700;
  *(void *)(v403 + 32) = 0xD000000000000040;
  *(void *)(v403 + 40) = 0x800000023AC42360;
  *(unsigned char *)(v403 + 48) = 0;
  uint64_t v404 = swift_allocObject();
  *(_OWORD *)(v404 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v404 + 32) = 84017408;
  *(unsigned char *)(v404 + 36) = 8;
  uint64_t v721 = sub_23AB60324(v404, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v703 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v703 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v405 = swift_allocObject();
  *(_OWORD *)(v405 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v405 + 32) = 3;
  uint64_t v406 = sub_23AB60324(v405, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v407 = swift_allocObject();
  *(_OWORD *)(v407 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v407 + 32) = 16;
  uint64_t v408 = sub_23AB60324(v407, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v409.value._object = (void *)0x800000023AC41C00;
  v409.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v409, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v410 = sub_23ABBFBD4();
  char v411 = sub_23ABB8BA8();
  char v412 = sub_23ABBFBE0();
  uint64_t v413 = sub_23ABBFBE8();
  *((void *)&v632 + 1) = v406;
  *(void *)&long long v632 = v703;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC423B0, v401, v403, v410, v411 & 1, v412 & 1, v721, (uint64_t)v739._rawValue + 4592, v632, v413, v408, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v414 = swift_allocObject();
  *(_OWORD *)(v414 + 16) = xmmword_23AC2C700;
  uint64_t v415 = swift_allocObject();
  *(_OWORD *)(v415 + 16) = xmmword_23AC2C700;
  *(void *)(v415 + 32) = 0xD00000000000003DLL;
  *(void *)(v415 + 40) = 0x800000023AC423E0;
  *(void *)(v414 + 32) = v415;
  *(unsigned char *)(v414 + 40) = 0;
  uint64_t v416 = swift_allocObject();
  *(_OWORD *)(v416 + 16) = xmmword_23AC2C700;
  *(void *)(v416 + 32) = 0xD00000000000003FLL;
  *(void *)(v416 + 40) = 0x800000023AC42420;
  *(unsigned char *)(v416 + 48) = 0;
  uint64_t v417 = swift_allocObject();
  *(_OWORD *)(v417 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v417 + 32) = 84017408;
  *(unsigned char *)(v417 + 36) = 8;
  uint64_t v736 = sub_23AB60324(v417, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v729 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v729 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v418 = swift_allocObject();
  *(_OWORD *)(v418 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v418 + 32) = 3;
  uint64_t v419 = sub_23AB60324(v418, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v420 = swift_allocObject();
  *(_OWORD *)(v420 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v420 + 32) = 16;
  uint64_t v421 = sub_23AB60324(v420, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v422.value._countAndFlagsBits = 0x654E7463656C6573;
  v422.value._object = (void *)0xEF3A656E694C7478;
  Action.init(_:mac:)(v422, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v423 = sub_23ABBFBD4();
  char v424 = sub_23ABB8BA8();
  char v425 = sub_23ABBFBE0();
  uint64_t v426 = sub_23ABBFBE8();
  *((void *)&v633 + 1) = v419;
  *(void *)&long long v633 = v729;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC42460, v414, v416, v423, v424 & 1, v425 & 1, v736, (uint64_t)v739._rawValue + 4744, v633, v426, v421, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v427 = swift_allocObject();
  *(_OWORD *)(v427 + 16) = xmmword_23AC2C700;
  uint64_t v428 = swift_allocObject();
  *(_OWORD *)(v428 + 16) = xmmword_23AC2C710;
  *(void *)(v428 + 32) = 0xD000000000000029;
  *(void *)(v428 + 40) = 0x800000023AC42490;
  *(void *)(v428 + 48) = 0xD000000000000019;
  *(void *)(v428 + 56) = 0x800000023AC424C0;
  *(void *)(v427 + 32) = v428;
  *(unsigned char *)(v427 + 40) = 0;
  uint64_t v429 = swift_allocObject();
  *(_OWORD *)(v429 + 16) = xmmword_23AC2C700;
  *(void *)(v429 + 32) = 0xD000000000000056;
  *(void *)(v429 + 40) = 0x800000023AC424E0;
  *(unsigned char *)(v429 + 48) = 0;
  uint64_t v430 = swift_allocObject();
  *(_OWORD *)(v430 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v430 + 32) = 134545921;
  uint64_t v704 = sub_23AB60324(v430, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v693 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v693 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v431 = swift_allocObject();
  *(_OWORD *)(v431 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v431 + 32) = 768;
  uint64_t v432 = sub_23AB60324(v431, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v433 = swift_allocObject();
  *(_OWORD *)(v433 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v433 + 32) = 16;
  uint64_t v434 = sub_23AB60324(v433, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v435.value._countAndFlagsBits = 0xD00000000000001BLL;
  v435.value._object = (void *)0x800000023AC42560;
  Action.init(_:mac:)(v435, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v436 = sub_23ABBFBD4();
  char v437 = sub_23ABB8BA8();
  char v438 = sub_23ABBFBE0();
  uint64_t v439 = sub_23ABBFBE8();
  *((void *)&v634 + 1) = v432;
  *(void *)&long long v634 = v693;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC42540, v427, v429, v436, v437 & 1, v438 & 1, v704, (uint64_t)v739._rawValue + 4896, v634, v439, v434, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v440 = swift_allocObject();
  *(_OWORD *)(v440 + 16) = xmmword_23AC2C700;
  uint64_t v441 = swift_allocObject();
  *(_OWORD *)(v441 + 16) = xmmword_23AC2C710;
  *(void *)(v441 + 32) = 0xD000000000000023;
  *(void *)(v441 + 40) = 0x800000023AC42580;
  *(void *)(v441 + 48) = 0xD000000000000013;
  *(void *)(v441 + 56) = 0x800000023AC425B0;
  *(void *)(v440 + 32) = v441;
  *(unsigned char *)(v440 + 40) = 0;
  uint64_t v442 = swift_allocObject();
  *(_OWORD *)(v442 + 16) = xmmword_23AC2C700;
  *(void *)(v442 + 32) = 0xD000000000000050;
  *(void *)(v442 + 40) = 0x800000023AC425D0;
  *(unsigned char *)(v442 + 48) = 0;
  uint64_t v443 = swift_allocObject();
  *(_OWORD *)(v443 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v443 + 32) = 134545921;
  uint64_t v705 = sub_23AB60324(v443, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v694 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v694 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v444 = swift_allocObject();
  *(_OWORD *)(v444 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v444 + 32) = 768;
  uint64_t v445 = sub_23AB60324(v444, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v446 = swift_allocObject();
  *(_OWORD *)(v446 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v446 + 32) = 16;
  uint64_t v447 = sub_23AB60324(v446, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v448.value._countAndFlagsBits = 0xD000000000000015;
  v448.value._object = (void *)0x800000023AC42650;
  Action.init(_:mac:)(v448, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v449 = sub_23ABBFBD4();
  char v450 = sub_23ABB8BA8();
  char v451 = sub_23ABBFBE0();
  uint64_t v452 = sub_23ABBFBE8();
  *((void *)&v635 + 1) = v445;
  *(void *)&long long v635 = v694;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC42630, v440, v442, v449, v450 & 1, v451 & 1, v705, (uint64_t)v739._rawValue + 5048, v635, v452, v447, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v453 = swift_allocObject();
  *(_OWORD *)(v453 + 16) = xmmword_23AC2C700;
  uint64_t v454 = swift_allocObject();
  *(_OWORD *)(v454 + 16) = xmmword_23AC2C710;
  *(void *)(v454 + 32) = 0xD000000000000056;
  *(void *)(v454 + 40) = 0x800000023AC42670;
  *(void *)(v454 + 48) = 0xD000000000000033;
  *(void *)(v454 + 56) = 0x800000023AC426D0;
  *(void *)(v453 + 32) = v454;
  *(unsigned char *)(v453 + 40) = 0;
  uint64_t v455 = swift_allocObject();
  *(_OWORD *)(v455 + 16) = xmmword_23AC2C700;
  *(void *)(v455 + 32) = 0xD000000000000054;
  *(void *)(v455 + 40) = 0x800000023AC42710;
  *(unsigned char *)(v455 + 48) = 0;
  uint64_t v456 = swift_allocObject();
  *(_OWORD *)(v456 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v456 + 32) = 84017408;
  *(unsigned char *)(v456 + 36) = 8;
  uint64_t v730 = sub_23AB60324(v456, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v722 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v722 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v457 = swift_allocObject();
  *(_OWORD *)(v457 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v457 + 32) = 3;
  uint64_t v458 = sub_23AB60324(v457, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v459 = swift_allocObject();
  *(_OWORD *)(v459 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v459 + 32) = 16;
  uint64_t v460 = sub_23AB60324(v459, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v461.value._countAndFlagsBits = 0xD000000000000034;
  v461.value._object = (void *)0x800000023AC427B0;
  Action.init(_:mac:)(v461, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v462 = sub_23ABBFBD4();
  char v463 = sub_23ABB8BA8();
  char v464 = sub_23ABBFBE0();
  uint64_t v465 = sub_23ABBFBE8();
  *((void *)&v636 + 1) = v458;
  *(void *)&long long v636 = v722;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000038, 0x800000023AC42770, v453, v455, v462, v463 & 1, v464 & 1, v730, (uint64_t)v739._rawValue + 5200, v636, v465, v460, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v466 = swift_allocObject();
  *(_OWORD *)(v466 + 16) = xmmword_23AC2C700;
  uint64_t v467 = swift_allocObject();
  *(_OWORD *)(v467 + 16) = xmmword_23AC2C740;
  *(void *)(v467 + 32) = 0xD000000000000051;
  *(void *)(v467 + 40) = 0x800000023AC427F0;
  *(void *)(v467 + 48) = 0xD000000000000055;
  *(void *)(v467 + 56) = 0x800000023AC42850;
  *(void *)(v467 + 64) = 0xD00000000000002ELL;
  *(void *)(v467 + 72) = 0x800000023AC428B0;
  *(void *)(v467 + 80) = 0xD000000000000032;
  *(void *)(v467 + 88) = 0x800000023AC428E0;
  *(void *)(v466 + 32) = v467;
  *(unsigned char *)(v466 + 40) = 0;
  uint64_t v468 = swift_allocObject();
  *(_OWORD *)(v468 + 16) = xmmword_23AC2C700;
  *(void *)(v468 + 32) = 0xD000000000000055;
  *(void *)(v468 + 40) = 0x800000023AC42920;
  *(unsigned char *)(v468 + 48) = 0;
  uint64_t v469 = swift_allocObject();
  *(_OWORD *)(v469 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v469 + 32) = 84017408;
  *(unsigned char *)(v469 + 36) = 8;
  uint64_t v685 = sub_23AB60324(v469, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v678 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v678 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v470 = swift_allocObject();
  *(_OWORD *)(v470 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v470 + 32) = 3;
  uint64_t v471 = sub_23AB60324(v470, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v472 = swift_allocObject();
  *(_OWORD *)(v472 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v472 + 32) = 16;
  uint64_t v473 = sub_23AB60324(v472, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v474.value._countAndFlagsBits = 0xD000000000000035;
  v474.value._object = (void *)0x800000023AC429C0;
  Action.init(_:mac:)(v474, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v475 = sub_23ABBFBD4();
  char v476 = sub_23ABB8BA8();
  char v477 = sub_23ABBFBE0();
  uint64_t v478 = sub_23ABBFBE8();
  *((void *)&v637 + 1) = v471;
  *(void *)&long long v637 = v678;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000039, 0x800000023AC42980, v466, v468, v475, v476 & 1, v477 & 1, v685, (uint64_t)v739._rawValue + 5352, v637, v478, v473, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v479 = swift_allocObject();
  *(_OWORD *)(v479 + 16) = xmmword_23AC2C700;
  uint64_t v480 = swift_allocObject();
  *(_OWORD *)(v480 + 16) = xmmword_23AC2C710;
  *(void *)(v480 + 32) = 0xD000000000000051;
  *(void *)(v480 + 40) = 0x800000023AC42A00;
  *(void *)(v480 + 48) = 0xD00000000000002ELL;
  *(void *)(v480 + 56) = 0x800000023AC42A60;
  *(void *)(v479 + 32) = v480;
  *(unsigned char *)(v479 + 40) = 0;
  uint64_t v481 = swift_allocObject();
  *(_OWORD *)(v481 + 16) = xmmword_23AC2C700;
  *(void *)(v481 + 32) = 0xD00000000000004FLL;
  *(void *)(v481 + 40) = 0x800000023AC42A90;
  *(unsigned char *)(v481 + 48) = 0;
  uint64_t v482 = swift_allocObject();
  *(_OWORD *)(v482 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v482 + 32) = 84017408;
  *(unsigned char *)(v482 + 36) = 8;
  uint64_t v706 = sub_23AB60324(v482, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v695 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v695 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v483 = swift_allocObject();
  *(_OWORD *)(v483 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v483 + 32) = 3;
  uint64_t v484 = sub_23AB60324(v483, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v485 = swift_allocObject();
  *(_OWORD *)(v485 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v485 + 32) = 16;
  uint64_t v486 = sub_23AB60324(v485, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v487.value._countAndFlagsBits = 0xD00000000000002FLL;
  v487.value._object = (void *)0x800000023AC42B20;
  Action.init(_:mac:)(v487, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v488 = sub_23ABBFBD4();
  char v489 = sub_23ABB8BA8();
  char v490 = sub_23ABBFBE0();
  uint64_t v491 = sub_23ABBFBE8();
  *((void *)&v638 + 1) = v484;
  *(void *)&long long v638 = v695;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000033, 0x800000023AC42AE0, v479, v481, v488, v489 & 1, v490 & 1, v706, (uint64_t)v739._rawValue + 5504, v638, v491, v486, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v492 = swift_allocObject();
  *(_OWORD *)(v492 + 16) = xmmword_23AC2C700;
  uint64_t v493 = swift_allocObject();
  *(_OWORD *)(v493 + 16) = xmmword_23AC2C740;
  *(void *)(v493 + 32) = 0xD00000000000004CLL;
  *(void *)(v493 + 40) = 0x800000023AC42B50;
  *(void *)(v493 + 48) = 0xD000000000000050;
  *(void *)(v493 + 56) = 0x800000023AC42BA0;
  *(void *)(v493 + 64) = 0xD000000000000029;
  *(void *)(v493 + 72) = 0x800000023AC42C00;
  *(void *)(v493 + 80) = 0xD00000000000002DLL;
  *(void *)(v493 + 88) = 0x800000023AC42C30;
  *(void *)(v492 + 32) = v493;
  *(unsigned char *)(v492 + 40) = 0;
  uint64_t v494 = swift_allocObject();
  *(_OWORD *)(v494 + 16) = xmmword_23AC2C700;
  *(void *)(v494 + 32) = 0xD000000000000050;
  *(void *)(v494 + 40) = 0x800000023AC42C60;
  *(unsigned char *)(v494 + 48) = 0;
  uint64_t v495 = swift_allocObject();
  *(_OWORD *)(v495 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v495 + 32) = 84017408;
  *(unsigned char *)(v495 + 36) = 8;
  uint64_t v707 = sub_23AB60324(v495, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v696 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v696 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v496 = swift_allocObject();
  *(_OWORD *)(v496 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v496 + 32) = 3;
  uint64_t v497 = sub_23AB60324(v496, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v498 = swift_allocObject();
  *(_OWORD *)(v498 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v498 + 32) = 16;
  uint64_t v499 = sub_23AB60324(v498, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v500.value._countAndFlagsBits = 0xD000000000000030;
  v500.value._object = (void *)0x800000023AC42D00;
  Action.init(_:mac:)(v500, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v501 = sub_23ABBFBD4();
  char v502 = sub_23ABB8BA8();
  char v503 = sub_23ABBFBE0();
  uint64_t v504 = sub_23ABBFBE8();
  *((void *)&v639 + 1) = v497;
  *(void *)&long long v639 = v696;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000034, 0x800000023AC42CC0, v492, v494, v501, v502 & 1, v503 & 1, v707, (uint64_t)v739._rawValue + 5656, v639, v504, v499, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v505 = swift_allocObject();
  *(_OWORD *)(v505 + 16) = xmmword_23AC2C700;
  uint64_t v506 = swift_allocObject();
  *(_OWORD *)(v506 + 16) = xmmword_23AC2C710;
  *(void *)(v506 + 32) = 0xD000000000000055;
  *(void *)(v506 + 40) = 0x800000023AC42D40;
  *(void *)(v506 + 48) = 0xD000000000000032;
  *(void *)(v506 + 56) = 0x800000023AC42DA0;
  *(void *)(v505 + 32) = v506;
  *(unsigned char *)(v505 + 40) = 0;
  uint64_t v507 = swift_allocObject();
  *(_OWORD *)(v507 + 16) = xmmword_23AC2C700;
  *(void *)(v507 + 32) = 0xD000000000000053;
  *(void *)(v507 + 40) = 0x800000023AC42DE0;
  *(unsigned char *)(v507 + 48) = 0;
  uint64_t v508 = swift_allocObject();
  *(_OWORD *)(v508 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v508 + 32) = 84017408;
  *(unsigned char *)(v508 + 36) = 8;
  uint64_t v723 = sub_23AB60324(v508, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v686 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v686 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v509 = swift_allocObject();
  *(_OWORD *)(v509 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v509 + 32) = 3;
  uint64_t v510 = sub_23AB60324(v509, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v511 = swift_allocObject();
  *(_OWORD *)(v511 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v511 + 32) = 16;
  uint64_t v512 = sub_23AB60324(v511, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v513.value._countAndFlagsBits = 0xD000000000000033;
  v513.value._object = (void *)0x800000023AC42E80;
  Action.init(_:mac:)(v513, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v514 = sub_23ABBFBD4();
  char v515 = sub_23ABB8BA8();
  char v516 = sub_23ABBFBE0();
  uint64_t v517 = sub_23ABBFBE8();
  *((void *)&v640 + 1) = v510;
  *(void *)&long long v640 = v686;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000037, 0x800000023AC42E40, v505, v507, v514, v515 & 1, v516 & 1, v723, (uint64_t)v739._rawValue + 5808, v640, v517, v512, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v518 = swift_allocObject();
  *(_OWORD *)(v518 + 16) = xmmword_23AC2C700;
  uint64_t v519 = swift_allocObject();
  *(_OWORD *)(v519 + 16) = xmmword_23AC2C740;
  *(void *)(v519 + 32) = 0xD000000000000050;
  *(void *)(v519 + 40) = 0x800000023AC42EC0;
  *(void *)(v519 + 48) = 0xD000000000000054;
  *(void *)(v519 + 56) = 0x800000023AC42F20;
  *(void *)(v519 + 64) = 0xD00000000000002DLL;
  *(void *)(v519 + 72) = 0x800000023AC42F80;
  *(void *)(v519 + 80) = 0xD000000000000031;
  *(void *)(v519 + 88) = 0x800000023AC42FB0;
  *(void *)(v518 + 32) = v519;
  *(unsigned char *)(v518 + 40) = 0;
  uint64_t v520 = swift_allocObject();
  *(_OWORD *)(v520 + 16) = xmmword_23AC2C700;
  *(void *)(v520 + 32) = 0xD000000000000054;
  *(void *)(v520 + 40) = 0x800000023AC42FF0;
  *(unsigned char *)(v520 + 48) = 0;
  uint64_t v521 = swift_allocObject();
  *(_OWORD *)(v521 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v521 + 32) = 84017408;
  *(unsigned char *)(v521 + 36) = 8;
  uint64_t v672 = sub_23AB60324(v521, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v708 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v708 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v522 = swift_allocObject();
  *(_OWORD *)(v522 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v522 + 32) = 3;
  uint64_t v523 = sub_23AB60324(v522, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v524 = swift_allocObject();
  *(_OWORD *)(v524 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v524 + 32) = 16;
  uint64_t v525 = sub_23AB60324(v524, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v526.value._countAndFlagsBits = 0xD000000000000034;
  v526.value._object = (void *)0x800000023AC43090;
  Action.init(_:mac:)(v526, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v527 = sub_23ABBFBD4();
  char v528 = sub_23ABB8BA8();
  char v529 = sub_23ABBFBE0();
  uint64_t v530 = sub_23ABBFBE8();
  *((void *)&v641 + 1) = v523;
  *(void *)&long long v641 = v708;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000038, 0x800000023AC43050, v518, v520, v527, v528 & 1, v529 & 1, v672, (uint64_t)v739._rawValue + 5960, v641, v530, v525, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v531 = swift_allocObject();
  *(_OWORD *)(v531 + 16) = xmmword_23AC2C700;
  uint64_t v532 = swift_allocObject();
  *(_OWORD *)(v532 + 16) = xmmword_23AC2C710;
  *(void *)(v532 + 32) = 0xD000000000000056;
  *(void *)(v532 + 40) = 0x800000023AC430D0;
  *(void *)(v532 + 48) = 0xD000000000000033;
  *(void *)(v532 + 56) = 0x800000023AC43130;
  *(void *)(v531 + 32) = v532;
  *(unsigned char *)(v531 + 40) = 0;
  uint64_t v533 = swift_allocObject();
  *(_OWORD *)(v533 + 16) = xmmword_23AC2C700;
  *(void *)(v533 + 32) = 0xD000000000000054;
  *(void *)(v533 + 40) = 0x800000023AC43170;
  *(unsigned char *)(v533 + 48) = 0;
  uint64_t v534 = swift_allocObject();
  *(_OWORD *)(v534 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v534 + 32) = 84017408;
  *(unsigned char *)(v534 + 36) = 8;
  uint64_t v731 = sub_23AB60324(v534, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v724 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v724 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v535 = swift_allocObject();
  *(_OWORD *)(v535 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v535 + 32) = 3;
  uint64_t v536 = sub_23AB60324(v535, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v537 = swift_allocObject();
  *(_OWORD *)(v537 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v537 + 32) = 16;
  uint64_t v538 = sub_23AB60324(v537, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v539.value._object = (void *)0x800000023AC43210;
  v539.value._countAndFlagsBits = 0xD000000000000034;
  Action.init(_:mac:)(v539, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v540 = sub_23ABBFBD4();
  char v541 = sub_23ABB8BA8();
  char v542 = sub_23ABBFBE0();
  uint64_t v543 = sub_23ABBFBE8();
  *((void *)&v642 + 1) = v536;
  *(void *)&long long v642 = v724;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000038, 0x800000023AC431D0, v531, v533, v540, v541 & 1, v542 & 1, v731, (uint64_t)v739._rawValue + 6112, v642, v543, v538, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v544 = swift_allocObject();
  *(_OWORD *)(v544 + 16) = xmmword_23AC2C700;
  uint64_t v545 = swift_allocObject();
  *(_OWORD *)(v545 + 16) = xmmword_23AC2C740;
  *(void *)(v545 + 32) = 0xD000000000000051;
  *(void *)(v545 + 40) = 0x800000023AC43250;
  *(void *)(v545 + 48) = 0xD000000000000055;
  *(void *)(v545 + 56) = 0x800000023AC432B0;
  *(void *)(v545 + 64) = 0xD00000000000002ELL;
  *(void *)(v545 + 72) = 0x800000023AC43310;
  *(void *)(v545 + 80) = 0xD000000000000032;
  *(void *)(v545 + 88) = 0x800000023AC43340;
  *(void *)(v544 + 32) = v545;
  *(unsigned char *)(v544 + 40) = 0;
  uint64_t v546 = swift_allocObject();
  *(_OWORD *)(v546 + 16) = xmmword_23AC2C700;
  *(void *)(v546 + 32) = 0xD000000000000055;
  *(void *)(v546 + 40) = 0x800000023AC43380;
  *(unsigned char *)(v546 + 48) = 0;
  uint64_t v547 = swift_allocObject();
  *(_OWORD *)(v547 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v547 + 32) = 84017408;
  *(unsigned char *)(v547 + 36) = 8;
  uint64_t v687 = sub_23AB60324(v547, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v679 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v679 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v548 = swift_allocObject();
  *(_OWORD *)(v548 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v548 + 32) = 3;
  uint64_t v549 = sub_23AB60324(v548, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v550 = swift_allocObject();
  *(_OWORD *)(v550 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v550 + 32) = 16;
  uint64_t v551 = sub_23AB60324(v550, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v552.value._countAndFlagsBits = 0xD000000000000035;
  v552.value._object = (void *)0x800000023AC43420;
  Action.init(_:mac:)(v552, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v553 = sub_23ABBFBD4();
  char v554 = sub_23ABB8BA8();
  char v555 = sub_23ABBFBE0();
  uint64_t v556 = sub_23ABBFBE8();
  *((void *)&v643 + 1) = v549;
  *(void *)&long long v643 = v679;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000039, 0x800000023AC433E0, v544, v546, v553, v554 & 1, v555 & 1, v687, (uint64_t)v739._rawValue + 6264, v643, v556, v551, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v557 = swift_allocObject();
  *(_OWORD *)(v557 + 16) = xmmword_23AC2C700;
  uint64_t v558 = swift_allocObject();
  *(_OWORD *)(v558 + 16) = xmmword_23AC2C710;
  *(void *)(v558 + 32) = 0xD000000000000051;
  *(void *)(v558 + 40) = 0x800000023AC43460;
  *(void *)(v558 + 48) = 0xD00000000000002ELL;
  *(void *)(v558 + 56) = 0x800000023AC434C0;
  *(void *)(v557 + 32) = v558;
  *(unsigned char *)(v557 + 40) = 0;
  uint64_t v559 = swift_allocObject();
  *(_OWORD *)(v559 + 16) = xmmword_23AC2C700;
  *(void *)(v559 + 32) = 0xD00000000000004FLL;
  *(void *)(v559 + 40) = 0x800000023AC434F0;
  *(unsigned char *)(v559 + 48) = 0;
  uint64_t v560 = swift_allocObject();
  *(_OWORD *)(v560 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v560 + 32) = 84017408;
  *(unsigned char *)(v560 + 36) = 8;
  uint64_t v725 = sub_23AB60324(v560, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v709 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v709 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v561 = swift_allocObject();
  *(_OWORD *)(v561 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v561 + 32) = 3;
  uint64_t v562 = sub_23AB60324(v561, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v563 = swift_allocObject();
  *(_OWORD *)(v563 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v563 + 32) = 16;
  uint64_t v564 = sub_23AB60324(v563, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v565.value._countAndFlagsBits = 0xD00000000000002FLL;
  v565.value._object = (void *)0x800000023AC43580;
  Action.init(_:mac:)(v565, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v566 = sub_23ABBFBD4();
  char v567 = sub_23ABB8BA8();
  char v568 = sub_23ABBFBE0();
  uint64_t v569 = sub_23ABBFBE8();
  *((void *)&v644 + 1) = v562;
  *(void *)&long long v644 = v709;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000033, 0x800000023AC43540, v557, v559, v566, v567 & 1, v568 & 1, v725, (uint64_t)v739._rawValue + 6416, v644, v569, v564, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v570 = swift_allocObject();
  *(_OWORD *)(v570 + 16) = xmmword_23AC2C700;
  uint64_t v571 = swift_allocObject();
  *(_OWORD *)(v571 + 16) = xmmword_23AC2C740;
  *(void *)(v571 + 32) = 0xD00000000000004CLL;
  *(void *)(v571 + 40) = 0x800000023AC435B0;
  *(void *)(v571 + 48) = 0xD000000000000050;
  *(void *)(v571 + 56) = 0x800000023AC43600;
  *(void *)(v571 + 64) = 0xD000000000000029;
  *(void *)(v571 + 72) = 0x800000023AC43660;
  *(void *)(v571 + 80) = 0xD00000000000002DLL;
  *(void *)(v571 + 88) = 0x800000023AC43690;
  *(void *)(v570 + 32) = v571;
  *(unsigned char *)(v570 + 40) = 0;
  uint64_t v572 = swift_allocObject();
  *(_OWORD *)(v572 + 16) = xmmword_23AC2C700;
  *(void *)(v572 + 32) = 0xD000000000000050;
  *(void *)(v572 + 40) = 0x800000023AC436C0;
  *(unsigned char *)(v572 + 48) = 0;
  uint64_t v573 = swift_allocObject();
  *(_OWORD *)(v573 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v573 + 32) = 84017408;
  *(unsigned char *)(v573 + 36) = 8;
  uint64_t v726 = sub_23AB60324(v573, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v710 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v710 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v574 = swift_allocObject();
  *(_OWORD *)(v574 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v574 + 32) = 3;
  uint64_t v575 = sub_23AB60324(v574, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v576 = swift_allocObject();
  *(_OWORD *)(v576 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v576 + 32) = 16;
  uint64_t v577 = sub_23AB60324(v576, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v578.value._countAndFlagsBits = 0xD000000000000030;
  v578.value._object = (void *)0x800000023AC43760;
  Action.init(_:mac:)(v578, (Swift::String_optional)0);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v579 = sub_23ABBFBD4();
  char v580 = sub_23ABB8BA8();
  char v581 = sub_23ABBFBE0();
  uint64_t v582 = sub_23ABBFBE8();
  *((void *)&v645 + 1) = v575;
  *(void *)&long long v645 = v710;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000034, 0x800000023AC43720, v570, v572, v579, v580 & 1, v581 & 1, v726, (uint64_t)v739._rawValue + 6568, v645, v582, v577, v745, &v744, 0, 0, (uint64_t)&v740);
  uint64_t v583 = swift_allocObject();
  *(_OWORD *)(v583 + 16) = xmmword_23AC2C700;
  uint64_t v584 = swift_allocObject();
  *(_OWORD *)(v584 + 16) = xmmword_23AC2C740;
  strcpy((char *)(v584 + 32), "Deselect that");
  *(_WORD *)(v584 + 46) = -4864;
  strcpy((char *)(v584 + 48), "Deselect this");
  *(_WORD *)(v584 + 62) = -4864;
  strcpy((char *)(v584 + 64), "Unselect that");
  *(_WORD *)(v584 + 78) = -4864;
  strcpy((char *)(v584 + 80), "Unselect this");
  *(_WORD *)(v584 + 94) = -4864;
  *(void *)(v583 + 32) = v584;
  *(unsigned char *)(v583 + 40) = 0;
  uint64_t v585 = swift_allocObject();
  *(_OWORD *)(v585 + 16) = xmmword_23AC2C700;
  *(void *)(v585 + 32) = 0xD00000000000003FLL;
  *(void *)(v585 + 40) = 0x800000023AC38A70;
  *(unsigned char *)(v585 + 48) = 0;
  uint64_t v586 = swift_allocObject();
  *(_OWORD *)(v586 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v586 + 32) = 84017408;
  *(unsigned char *)(v586 + 36) = 8;
  uint64_t v738 = sub_23AB60324(v586, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v587 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v587 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v588 = swift_allocObject();
  *(_OWORD *)(v588 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v588 + 32) = 3;
  uint64_t v589 = sub_23AB60324(v588, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v590 = swift_allocObject();
  *(_OWORD *)(v590 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v590 + 32) = 16;
  uint64_t v591 = sub_23AB60324(v590, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v745[0] = 4;
  char v744 = 4;
  v592.value._countAndFlagsBits = 0x7463656C65736E75;
  v593.value._countAndFlagsBits = 0xD000000000000015;
  v593.value._object = (void *)0x800000023AC38AD0;
  v592.value._object = (void *)0xE90000000000003ALL;
  Action.init(_:mac:)(v593, v592);
  long long v740 = v742;
  long long v741 = v743;
  uint64_t v594 = sub_23ABBFBD4();
  char v595 = sub_23ABB8BA8();
  char v596 = sub_23ABBFBE0();
  uint64_t v597 = sub_23ABBFBE8();
  *(void *)&long long v646 = v587;
  *((void *)&v646 + 1) = v589;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x736E552E74786554, 0xED00007463656C65, v583, v585, v594, v595 & 1, v596 & 1, v738, (uint64_t)v739._rawValue + 6720, v646, v597, v591, v745, &v744, 0, 0, (uint64_t)&v740);
  char v598 = sub_23ABB8BA8();
  v599._object = (void *)0xE90000000000006ELL;
  Swift::Bool v600 = v598 & 1;
  v599._countAndFlagsBits = 0x6F697463656C6553;
  v601._countAndFlagsBits = v733;
  v601._object = v732;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62AA8, v599, v601, v600, v739);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB85EF4()
{
  if (qword_268A5AAF8 != -1) {
    swift_once();
  }
  return &stru_268A62AA8;
}

void sub_23AB85F40()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v8 = sub_23AC2A560();
  uint64_t v185 = v9;
  uint64_t v186 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AC2C870;
  uint64_t v188 = v10 + 32;
  uint64_t v11 = v10;
  v189._rawCFDictionaryRef Value = (void *)v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AC2C700;
  *(void *)(v12 + 32) = &unk_26EE23348;
  *(unsigned char *)(v12 + 40) = 0;
  uint64_t v13 = sub_23AB60324((uint64_t)&unk_26EE233C0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v14 = sub_23AB60324((uint64_t)&unk_26EE233E8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v15.value._countAndFlagsBits = 0x6573616572636564;
  v15.value._object = (void *)0xEE00656D756C6F56;
  Action.init(_:mac:)(v15, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v16 = sub_23ABBFBD4();
  char v17 = sub_23ABB8BA8();
  char v18 = sub_23ABBFBE0();
  uint64_t v19 = sub_23ABBFBE8();
  uint64_t v20 = sub_23ABBFBE8();
  *(void *)&long long v159 = MEMORY[0x263F8EE88];
  *((void *)&v159 + 1) = v14;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000015, 0x800000023AC43E10, v12, (uint64_t)&unk_26EE23388, v16, v17 & 1, v18 & 1, v13, v188, v159, v19, v20, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_23AC2C700;
  *(void *)(v21 + 32) = &unk_26EE23410;
  *(unsigned char *)(v21 + 40) = 0;
  uint64_t v22 = sub_23AB60324((uint64_t)&unk_26EE23488, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v23 = sub_23AB60324((uint64_t)&unk_26EE234B0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v24.value._countAndFlagsBits = 0x6573616572636E69;
  v24.value._object = (void *)0xEE00656D756C6F56;
  Action.init(_:mac:)(v24, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v25 = sub_23ABBFBD4();
  char v26 = sub_23ABB8BA8();
  LOBYTE(v14) = sub_23ABBFBE0();
  uint64_t v27 = sub_23ABBFBE8();
  uint64_t v28 = sub_23ABBFBE8();
  *((void *)&v160 + 1) = v23;
  *(void *)&long long v160 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000015, 0x800000023AC43E30, v21, (uint64_t)&unk_26EE23450, v25, v26 & 1, v14 & 1, v22, v11 + 184, v160, v27, v28, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23AC2C700;
  *(void *)(v29 + 32) = &unk_26EE234D8;
  *(unsigned char *)(v29 + 40) = 0;
  uint64_t v30 = sub_23AB60324((uint64_t)&unk_26EE23550, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v31 = sub_23AB60324((uint64_t)&unk_26EE23578, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v32.value._object = (void *)0x800000023AC43E50;
  v32.value._countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v32, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v33 = sub_23ABBFBD4();
  LOBYTE(v25) = sub_23ABB8BA8();
  char v34 = sub_23ABBFBE0();
  uint64_t v35 = sub_23ABBFBE8();
  uint64_t v36 = sub_23ABBFBE8();
  *((void *)&v161 + 1) = v31;
  *(void *)&long long v161 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x4D2E6D6574737953, 0xEB00000000657475, v29, (uint64_t)&unk_26EE23518, v33, v25 & 1, v34 & 1, v30, (uint64_t)v189._rawValue + 336, v161, v35, v36, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23AC2C700;
  *(void *)(v37 + 32) = &unk_26EE235A0;
  *(unsigned char *)(v37 + 40) = 0;
  uint64_t v38 = sub_23AB60324((uint64_t)&unk_26EE23618, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v39 = sub_23AB60324((uint64_t)&unk_26EE23640, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v40.value._countAndFlagsBits = 0xD000000000000014;
  v40.value._object = (void *)0x800000023AC43E70;
  Action.init(_:mac:)(v40, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v41 = sub_23ABBFBD4();
  char v42 = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v43 = sub_23ABBFBE8();
  uint64_t v44 = sub_23ABBFBE8();
  *((void *)&v162 + 1) = v39;
  *(void *)&long long v162 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x552E6D6574737953, 0xED00006574756D6ELL, v37, (uint64_t)&unk_26EE235E0, v41, v42 & 1, v35 & 1, v38, (uint64_t)v189._rawValue + 488, v162, v43, v44, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_23AC2C700;
  *(void *)(v45 + 32) = &unk_26EE23668;
  *(unsigned char *)(v45 + 40) = 0;
  uint64_t v46 = sub_23AB60324((uint64_t)&unk_26EE236D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v47 = sub_23AB60324((uint64_t)&unk_26EE236F8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v48.value._object = (void *)0x800000023AC43EB0;
  v48.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v48, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v49 = sub_23ABBFBD4();
  char v50 = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v51 = sub_23ABBFBE8();
  uint64_t v52 = sub_23ABBFBE8();
  *((void *)&v163 + 1) = v47;
  *(void *)&long long v163 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC43E90, v45, (uint64_t)&unk_26EE23698, v49, v50 & 1, v35 & 1, v46, (uint64_t)v189._rawValue + 640, v163, v51, v52, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_23AC2C700;
  *(void *)(v53 + 32) = &unk_26EE23720;
  *(unsigned char *)(v53 + 40) = 0;
  uint64_t v187 = sub_23AB60324((uint64_t)&unk_26EE23788, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v54 = sub_23AB60324((uint64_t)&unk_26EE237B0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v55.value._countAndFlagsBits = 0xD000000000000010;
  v55.value._object = (void *)0x800000023AC43EF0;
  Action.init(_:mac:)(v55, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v56 = sub_23ABBFBD4();
  char v57 = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v58 = sub_23ABBFBE8();
  uint64_t v59 = sub_23ABBFBE8();
  *((void *)&v164 + 1) = v54;
  *(void *)&long long v164 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC43ED0, v53, (uint64_t)&unk_26EE23750, v56, v57 & 1, v35 & 1, v187, (uint64_t)v189._rawValue + 792, v164, v58, v59, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_23AC2C700;
  *(void *)(v60 + 32) = &unk_26EE237D8;
  *(unsigned char *)(v60 + 40) = 0;
  uint64_t v61 = sub_23AB60324((uint64_t)&unk_26EE23840, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v62 = sub_23AB60324((uint64_t)&unk_26EE23868, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v63 = sub_23AB60324((uint64_t)&unk_26EE23890, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v195[0] = 4;
  char v194 = 4;
  v64.value._countAndFlagsBits = 0xD000000000000017;
  v64.value._object = (void *)0x800000023AC43F30;
  Action.init(_:mac:)(v64, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v65 = sub_23ABBFBD4();
  char v66 = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v67 = sub_23ABBFBE8();
  *((void *)&v165 + 1) = v62;
  *(void *)&long long v165 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC43F10, v60, (uint64_t)&unk_26EE23808, v65, v66 & 1, v35 & 1, v61, (uint64_t)v189._rawValue + 944, v165, v67, v63, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_23AC2C700;
  *(void *)(v68 + 32) = &unk_26EE238B8;
  *(unsigned char *)(v68 + 40) = 0;
  uint64_t v178 = sub_23AB60324((uint64_t)&unk_26EE23930, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v69 = sub_23AB60324((uint64_t)&unk_26EE23958, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v70 = sub_23AB60324((uint64_t)&unk_26EE23980, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v195[0] = 4;
  char v194 = 4;
  v71.value._object = (void *)0x800000023AC43F70;
  v71.value._countAndFlagsBits = 0xD00000000000001CLL;
  Action.init(_:mac:)(v71, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v72 = sub_23ABBFBD4();
  char v73 = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v74 = sub_23ABBFBE8();
  *((void *)&v166 + 1) = v69;
  *(void *)&long long v166 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC43F50, v68, (uint64_t)&unk_26EE238F8, v72, v73 & 1, v35 & 1, v178, (uint64_t)v189._rawValue + 1096, v166, v74, v70, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_23AC2C700;
  *(void *)(v75 + 32) = &unk_26EE239A8;
  *(unsigned char *)(v75 + 40) = 0;
  uint64_t v179 = sub_23AB60324((uint64_t)&unk_26EE23A10, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v76 = sub_23AB60324((uint64_t)&unk_26EE23A38, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v77 = sub_23AB60324((uint64_t)&unk_26EE23A60, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v195[0] = 4;
  char v194 = 4;
  v78.value._countAndFlagsBits = 0xD000000000000022;
  v78.value._object = (void *)0x800000023AC43FC0;
  Action.init(_:mac:)(v78, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v79 = sub_23ABBFBD4();
  char v80 = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v81 = sub_23ABBFBE8();
  *((void *)&v167 + 1) = v76;
  *(void *)&long long v167 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC43F90, v75, (uint64_t)&unk_26EE239D8, v79, v80 & 1, v35 & 1, v179, (uint64_t)v189._rawValue + 1248, v167, v81, v77, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_23AC2C700;
  *(void *)(v82 + 32) = &unk_26EE23A88;
  *(unsigned char *)(v82 + 40) = 0;
  uint64_t v180 = sub_23AB60324((uint64_t)&unk_26EE23B00, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v83 = sub_23AB60324((uint64_t)&unk_26EE23B28, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v84 = sub_23AB60324((uint64_t)&unk_26EE23B50, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v195[0] = 4;
  char v194 = 4;
  v85.value._object = (void *)0x800000023AC44010;
  v85.value._countAndFlagsBits = 0xD00000000000001BLL;
  Action.init(_:mac:)(v85, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v86 = sub_23ABBFBD4();
  char v87 = sub_23ABB8BA8();
  LOBYTE(v35) = sub_23ABBFBE0();
  uint64_t v88 = sub_23ABBFBE8();
  *((void *)&v168 + 1) = v83;
  *(void *)&long long v168 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC43FF0, v82, (uint64_t)&unk_26EE23AC8, v86, v87 & 1, v35 & 1, v180, (uint64_t)v189._rawValue + 1400, v168, v88, v84, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_23AC2C700;
  *(void *)(v89 + 32) = &unk_26EE23B78;
  *(unsigned char *)(v89 + 40) = 0;
  uint64_t v90 = sub_23AB60324((uint64_t)&unk_26EE23BE0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v91 = sub_23AB60324((uint64_t)&unk_26EE23C08, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v92.value._countAndFlagsBits = 0x657263536B636F6CLL;
  v92.value._object = (void *)0xEA00000000006E65;
  Action.init(_:mac:)(v92, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v93 = sub_23ABBFBD4();
  LOBYTE(v86) = sub_23ABB8BA8();
  char v94 = sub_23ABBFBE0();
  uint64_t v95 = sub_23ABBFBE8();
  uint64_t v96 = sub_23ABBFBE8();
  *((void *)&v169 + 1) = v91;
  *(void *)&long long v169 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC44030, v89, (uint64_t)&unk_26EE23BA8, v93, v86 & 1, v94 & 1, v90, (uint64_t)v189._rawValue + 1552, v169, v95, v96, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_23AC2C700;
  *(void *)(v97 + 32) = &unk_26EE23C30;
  *(unsigned char *)(v97 + 40) = 0;
  uint64_t v182 = sub_23AB60324((uint64_t)&unk_26EE23C98, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v98 = sub_23AB60324((uint64_t)&unk_26EE23CC0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v99 = sub_23AB60324((uint64_t)&unk_26EE23CE8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v100.value._countAndFlagsBits = 0x7055676E6168;
  v100.value._object = (void *)0xE600000000000000;
  Action.init(_:mac:)(v100, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v101 = sub_23ABBFBD4();
  char v102 = sub_23ABB8BA8();
  LOBYTE(v95) = sub_23ABBFBE0();
  uint64_t v103 = sub_23ABBFBE8();
  uint64_t v104 = sub_23ABBFBE8();
  *((void *)&v170 + 1) = v99;
  *(void *)&long long v170 = v98;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x482E6D6574737953, 0xED00007055676E61, v97, (uint64_t)&unk_26EE23C60, v101, v102 & 1, v95 & 1, v182, (uint64_t)v189._rawValue + 1704, v170, v103, v104, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_23AC2C700;
  *(void *)(v105 + 32) = &unk_26EE23D10;
  *(unsigned char *)(v105 + 40) = 0;
  uint64_t v183 = sub_23AB60324((uint64_t)&unk_26EE23D78, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v106 = sub_23AB60324((uint64_t)&unk_26EE23DA0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v107 = sub_23AB60324((uint64_t)&unk_26EE23DC8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v108 = sub_23AB60324((uint64_t)&unk_26EE23DF0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  uint64_t v109 = sub_23AB60324((uint64_t)&unk_26EE23E18, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v195[0] = 4;
  char v194 = 4;
  v110.value._countAndFlagsBits = 0x6574617669746361;
  v110.value._object = (void *)0xEB00000000534F53;
  Action.init(_:mac:)(v110, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v111 = sub_23ABBFBD4();
  char v112 = sub_23ABB8BA8();
  *((void *)&v171 + 1) = v107;
  *(void *)&long long v171 = v106;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x532E6D6574737953, 0xEA0000000000534FLL, v105, (uint64_t)&unk_26EE23D40, v111, v112 & 1, 1, v183, (uint64_t)v189._rawValue + 1856, v171, v108, v109, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v113 = swift_allocObject();
  *(_OWORD *)(v113 + 16) = xmmword_23AC2C700;
  *(void *)(v113 + 32) = &unk_26EE23E40;
  *(unsigned char *)(v113 + 40) = 0;
  uint64_t v181 = sub_23AB60324((uint64_t)&unk_26EE23EB8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v114 = sub_23AB60324((uint64_t)&unk_26EE23EE0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v115 = sub_23AB60324((uint64_t)&unk_26EE23F08, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  uint64_t v116 = sub_23AB60324((uint64_t)&unk_26EE23F30, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v195[0] = 4;
  char v194 = 4;
  v117.value._object = (void *)0x800000023AC44070;
  v117.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v117, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v118 = sub_23ABBFBD4();
  LOBYTE(v107) = sub_23ABB8BA8();
  char v119 = sub_23ABBFBE0();
  *((void *)&v172 + 1) = v114;
  *(void *)&long long v172 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC44050, v113, (uint64_t)&unk_26EE23E80, v118, v107 & 1, v119 & 1, v181, (uint64_t)v189._rawValue + 2008, v172, v115, v116, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v120 = swift_allocObject();
  *(_OWORD *)(v120 + 16) = xmmword_23AC2C700;
  *(void *)(v120 + 32) = &unk_26EE23F58;
  *(unsigned char *)(v120 + 40) = 0;
  uint64_t v121 = sub_23AB60324((uint64_t)&unk_26EE23FC0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v122 = sub_23AB60324((uint64_t)&unk_26EE23FE8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v123.value._countAndFlagsBits = 0x656B616873;
  v123.value._object = (void *)0xE500000000000000;
  Action.init(_:mac:)(v123, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v124 = sub_23ABBFBD4();
  LOBYTE(v116) = sub_23ABB8BA8();
  LOBYTE(v118) = sub_23ABBFBE0();
  uint64_t v125 = sub_23ABBFBE8();
  uint64_t v126 = sub_23ABBFBE8();
  *((void *)&v173 + 1) = v122;
  *(void *)&long long v173 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x532E6D6574737953, 0xEC000000656B6168, v120, (uint64_t)&unk_26EE23F88, v124, v116 & 1, v118 & 1, v121, (uint64_t)v189._rawValue + 2160, v173, v125, v126, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v127 = swift_allocObject();
  *(_OWORD *)(v127 + 16) = xmmword_23AC2C700;
  *(void *)(v127 + 32) = &unk_26EE24010;
  *(unsigned char *)(v127 + 40) = 0;
  uint64_t v128 = sub_23AB60324((uint64_t)&unk_26EE24098, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v129 = sub_23AB60324((uint64_t)&unk_26EE240C0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v130.value._countAndFlagsBits = 0x6C43656C70697274;
  v130.value._object = (void *)0xEB000000006B6369;
  Action.init(_:mac:)(v130, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v131 = sub_23ABBFBD4();
  LOBYTE(v116) = sub_23ABB8BA8();
  LOBYTE(v118) = sub_23ABBFBE0();
  uint64_t v132 = sub_23ABBFBE8();
  uint64_t v133 = sub_23ABBFBE8();
  *((void *)&v174 + 1) = v129;
  *(void *)&long long v174 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC44090, v127, (uint64_t)&unk_26EE24060, v131, v116 & 1, v118 & 1, v128, (uint64_t)v189._rawValue + 2312, v174, v132, v133, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v134 = swift_allocObject();
  *(_OWORD *)(v134 + 16) = xmmword_23AC2C700;
  *(void *)(v134 + 32) = &unk_26EE240E8;
  *(unsigned char *)(v134 + 40) = 0;
  uint64_t v184 = sub_23AB60324((uint64_t)&unk_26EE24150, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v135 = sub_23AB60324((uint64_t)&unk_26EE24178, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v136 = sub_23AB60324((uint64_t)&unk_26EE241A0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v195[0] = 4;
  char v194 = 4;
  v137.value._countAndFlagsBits = 0x65726353656B6174;
  v137.value._object = (void *)0xEE00746F68736E65;
  Action.init(_:mac:)(v137, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v138 = sub_23ABBFBD4();
  LOBYTE(v118) = sub_23ABB8BA8();
  LOBYTE(v132) = sub_23ABBFBE0();
  uint64_t v139 = sub_23ABBFBE8();
  *((void *)&v175 + 1) = v135;
  *(void *)&long long v175 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC440B0, v134, (uint64_t)&unk_26EE24118, v138, v118 & 1, v132 & 1, v184, (uint64_t)v189._rawValue + 2464, v175, v139, v136, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v140 = swift_allocObject();
  *(_OWORD *)(v140 + 16) = xmmword_23AC2C700;
  *(void *)(v140 + 32) = &unk_26EE241C8;
  *(unsigned char *)(v140 + 40) = 0;
  uint64_t v141 = sub_23AB60324((uint64_t)&unk_26EE24240, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v142 = sub_23AB60324((uint64_t)&unk_26EE24268, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v143 = sub_23AB60324((uint64_t)&unk_26EE24290, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v144.value._countAndFlagsBits = 0xD000000000000013;
  v144.value._object = (void *)0x800000023AC440F0;
  Action.init(_:mac:)(v144, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v145 = sub_23ABBFBD4();
  LOBYTE(v118) = sub_23ABB8BA8();
  LOBYTE(v132) = sub_23ABBFBE0();
  uint64_t v146 = sub_23ABBFBE8();
  uint64_t v147 = sub_23ABBFBE8();
  *((void *)&v176 + 1) = v143;
  *(void *)&long long v176 = v142;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC440D0, v140, (uint64_t)&unk_26EE24208, v145, v118 & 1, v132 & 1, v141, (uint64_t)v189._rawValue + 2616, v176, v146, v147, v195, &v194, 0, 0, (uint64_t)&v190);
  uint64_t v148 = swift_allocObject();
  *(_OWORD *)(v148 + 16) = xmmword_23AC2C700;
  *(void *)(v148 + 32) = &unk_26EE242B8;
  *(unsigned char *)(v148 + 40) = 0;
  uint64_t v149 = sub_23AB60324((uint64_t)&unk_26EE24320, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v150 = sub_23AB60324((uint64_t)&unk_26EE24348, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v195[0] = 4;
  char v194 = 4;
  v151.value._countAndFlagsBits = 0x746F6F626572;
  v151.value._object = (void *)0xE600000000000000;
  Action.init(_:mac:)(v151, (Swift::String_optional)0);
  long long v190 = v192;
  long long v191 = v193;
  uint64_t v152 = sub_23ABBFBD4();
  LOBYTE(v118) = sub_23ABB8BA8();
  char v153 = sub_23ABBFBE0();
  uint64_t v154 = sub_23ABBFBE8();
  uint64_t v155 = sub_23ABBFBE8();
  *((void *)&v177 + 1) = v150;
  *(void *)&long long v177 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x522E6D6574737953, 0xED0000746F6F6265, v148, (uint64_t)&unk_26EE242E8, v152, v118 & 1, v153 & 1, v149, (uint64_t)v189._rawValue + 2768, v177, v154, v155, v195, &v194, 0, 0, (uint64_t)&v190);
  Swift::Bool v156 = sub_23ABB8BA8() & 1;
  v157._countAndFlagsBits = 0x6572617764726148;
  v157._object = (void *)0xE800000000000000;
  v158._object = v185;
  v158._countAndFlagsBits = v186;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62AD8, v157, v158, v156, v189);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB87CF8()
{
  if (qword_268A5AB00 != -1) {
    swift_once();
  }
  return &stru_268A62AD8;
}

void sub_23AB87D44()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v1053 = sub_23AC2A560();
  v1052 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C880;
  v1149._rawCFDictionaryRef Value = (void *)v9;
  uint64_t v1147 = v9 + 32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AC2C700;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A318);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AC2C710;
  *(void *)(v11 + 32) = 0xD000000000000016;
  *(void *)(v11 + 40) = 0x800000023AC44120;
  *(void *)(v11 + 48) = 0xD000000000000016;
  *(void *)(v11 + 56) = 0x800000023AC44140;
  *(void *)(v10 + 32) = v11;
  *(unsigned char *)(v10 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A320);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AC2C700;
  *(void *)(v12 + 32) = 0xD000000000000017;
  *(void *)(v12 + 40) = 0x800000023AC44160;
  *(unsigned char *)(v12 + 48) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A328);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v13 + 32) = 84017408;
  *(unsigned char *)(v13 + 36) = 8;
  uint64_t v1133 = sub_23AB60324(v13, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v14 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v14 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v15 + 32) = 3;
  uint64_t v16 = sub_23AB60324(v15, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v17.value._countAndFlagsBits = 0xD000000000000018;
  v17.value._object = (void *)0x800000023AC441B0;
  Action.init(_:mac:)(v17, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v18 = sub_23ABBFBD4();
  char v19 = sub_23ABB8BA8();
  uint64_t v20 = sub_23ABBFBE8();
  uint64_t v21 = sub_23ABBFBE8();
  *(void *)&long long v945 = v14;
  *((void *)&v945 + 1) = v16;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000026, 0x800000023AC44180, v10, v12, v18, v19 & 1, 1, v1133, v1147, v945, v20, v21, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_23AC2C700;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_23AC2C740;
  *(void *)(v23 + 32) = 0xD00000000000001DLL;
  *(void *)(v23 + 40) = 0x800000023AC441D0;
  *(void *)(v23 + 48) = 0xD00000000000001DLL;
  *(void *)(v23 + 56) = 0x800000023AC441F0;
  *(void *)(v23 + 64) = 0xD000000000000017;
  *(void *)(v23 + 72) = 0x800000023AC44210;
  *(void *)(v23 + 80) = 0xD000000000000017;
  *(void *)(v23 + 88) = 0x800000023AC44230;
  *(void *)(v22 + 32) = v23;
  *(unsigned char *)(v22 + 40) = 0;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23AC2C700;
  *(void *)(v24 + 32) = 0xD00000000000001ELL;
  *(void *)(v24 + 40) = 0x800000023AC44250;
  *(unsigned char *)(v24 + 48) = 0;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v25 + 32) = 513;
  uint64_t v1134 = sub_23AB60324(v25, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1125 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1125 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v26 + 32) = 134546176;
  uint64_t v27 = sub_23AB60324(v26, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v28.value._countAndFlagsBits = 0xD000000000000014;
  v28.value._object = (void *)0x800000023AC442A0;
  Action.init(_:mac:)(v28, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v29 = sub_23ABBFBD4();
  char v30 = sub_23ABB8BA8();
  char v31 = sub_23ABBFBE0();
  uint64_t v32 = sub_23ABBFBE8();
  uint64_t v33 = sub_23ABBFBE8();
  *((void *)&v946 + 1) = v27;
  *(void *)&long long v946 = v1125;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC44270, v22, v24, v29, v30 & 1, v31 & 1, v1134, (uint64_t)v1149._rawValue + 184, v946, v32, v33, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_23AC2C700;
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23AC2C740;
  *(void *)(v35 + 32) = 0xD00000000000001ELL;
  *(void *)(v35 + 40) = 0x800000023AC442C0;
  *(void *)(v35 + 48) = 0xD00000000000001ELL;
  *(void *)(v35 + 56) = 0x800000023AC442E0;
  *(void *)(v35 + 64) = 0xD000000000000018;
  *(void *)(v35 + 72) = 0x800000023AC44300;
  *(void *)(v35 + 80) = 0xD000000000000018;
  *(void *)(v35 + 88) = 0x800000023AC44320;
  *(void *)(v34 + 32) = v35;
  *(unsigned char *)(v34 + 40) = 0;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_23AC2C700;
  *(void *)(v36 + 32) = 0xD00000000000001FLL;
  *(void *)(v36 + 40) = 0x800000023AC44340;
  *(unsigned char *)(v36 + 48) = 0;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v37 + 32) = 513;
  uint64_t v1126 = sub_23AB60324(v37, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1117 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1117 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v38 + 32) = 134546176;
  uint64_t v39 = sub_23AB60324(v38, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v40.value._countAndFlagsBits = 0xD000000000000015;
  v40.value._object = (void *)0x800000023AC44390;
  Action.init(_:mac:)(v40, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v41 = sub_23ABBFBD4();
  char v42 = sub_23ABB8BA8();
  char v43 = sub_23ABBFBE0();
  uint64_t v44 = sub_23ABBFBE8();
  uint64_t v45 = sub_23ABBFBE8();
  *((void *)&v947 + 1) = v39;
  *(void *)&long long v947 = v1117;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC44360, v34, v36, v41, v42 & 1, v43 & 1, v1126, (uint64_t)v1149._rawValue + 336, v947, v44, v45, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_23AC2C700;
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_23AC2C740;
  *(void *)(v47 + 32) = 0xD000000000000022;
  *(void *)(v47 + 40) = 0x800000023AC443B0;
  *(void *)(v47 + 48) = 0xD000000000000022;
  *(void *)(v47 + 56) = 0x800000023AC443E0;
  *(void *)(v47 + 64) = 0xD00000000000001CLL;
  *(void *)(v47 + 72) = 0x800000023AC44410;
  *(void *)(v47 + 80) = 0xD00000000000001CLL;
  *(void *)(v47 + 88) = 0x800000023AC44430;
  *(void *)(v46 + 32) = v47;
  *(unsigned char *)(v46 + 40) = 0;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_23AC2C700;
  *(void *)(v48 + 32) = 0xD000000000000023;
  *(void *)(v48 + 40) = 0x800000023AC44450;
  *(unsigned char *)(v48 + 48) = 0;
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v49 + 32) = 513;
  uint64_t v1135 = sub_23AB60324(v49, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1127 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1127 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v50 + 32) = 134546176;
  uint64_t v51 = sub_23AB60324(v50, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v52.value._object = (void *)0x800000023AC444B0;
  v52.value._countAndFlagsBits = 0xD000000000000018;
  Action.init(_:mac:)(v52, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v53 = sub_23ABBFBD4();
  char v54 = sub_23ABB8BA8();
  char v55 = sub_23ABBFBE0();
  uint64_t v56 = sub_23ABBFBE8();
  uint64_t v57 = sub_23ABBFBE8();
  *((void *)&v948 + 1) = v51;
  *(void *)&long long v948 = v1127;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000026, 0x800000023AC44480, v46, v48, v53, v54 & 1, v55 & 1, v1135, (uint64_t)v1149._rawValue + 488, v948, v56, v57, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_23AC2C700;
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_23AC2C740;
  *(void *)(v59 + 32) = 0xD000000000000023;
  *(void *)(v59 + 40) = 0x800000023AC444D0;
  *(void *)(v59 + 48) = 0xD000000000000023;
  *(void *)(v59 + 56) = 0x800000023AC44500;
  *(void *)(v59 + 64) = 0xD00000000000001DLL;
  *(void *)(v59 + 72) = 0x800000023AC44530;
  *(void *)(v59 + 80) = 0xD00000000000001DLL;
  *(void *)(v59 + 88) = 0x800000023AC44550;
  *(void *)(v58 + 32) = v59;
  *(unsigned char *)(v58 + 40) = 0;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_23AC2C700;
  *(void *)(v60 + 32) = 0xD000000000000024;
  *(void *)(v60 + 40) = 0x800000023AC44570;
  *(unsigned char *)(v60 + 48) = 0;
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v61 + 32) = 513;
  uint64_t v62 = sub_23AB60324(v61, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1136 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1136 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v63 + 32) = 134546176;
  uint64_t v64 = sub_23AB60324(v63, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v65.value._countAndFlagsBits = 0xD000000000000019;
  v65.value._object = (void *)0x800000023AC445D0;
  Action.init(_:mac:)(v65, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v66 = sub_23ABBFBD4();
  char v67 = sub_23ABB8BA8();
  char v68 = sub_23ABBFBE0();
  uint64_t v69 = sub_23ABBFBE8();
  uint64_t v70 = sub_23ABBFBE8();
  *((void *)&v949 + 1) = v64;
  *(void *)&long long v949 = v1136;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC445A0, v58, v60, v66, v67 & 1, v68 & 1, v62, (uint64_t)v1149._rawValue + 640, v949, v69, v70, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_23AC2C700;
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_23AC2C710;
  *(void *)(v72 + 32) = 0xD000000000000016;
  *(void *)(v72 + 40) = 0x800000023AC445F0;
  *(void *)(v72 + 48) = 0xD000000000000016;
  *(void *)(v72 + 56) = 0x800000023AC44610;
  *(void *)(v71 + 32) = v72;
  *(unsigned char *)(v71 + 40) = 0;
  uint64_t v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_23AC2C700;
  *(void *)(v73 + 32) = 0xD000000000000017;
  *(void *)(v73 + 40) = 0x800000023AC44630;
  *(unsigned char *)(v73 + 48) = 0;
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v74 + 32) = 513;
  *(unsigned char *)(v74 + 34) = 5;
  uint64_t v1118 = sub_23AB60324(v74, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v75 + 32) = 8;
  uint64_t v76 = sub_23AB60324(v75, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v77 + 32) = 768;
  uint64_t v78 = sub_23AB60324(v77, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v79.value._object = (void *)0x800000023AC44680;
  v79.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v79, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v80 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  char v81 = sub_23ABBFBE0();
  uint64_t v82 = sub_23ABBFBE8();
  uint64_t v83 = sub_23ABBFBE8();
  *((void *)&v950 + 1) = v78;
  *(void *)&long long v950 = v76;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC44650, v71, v73, v80, v64 & 1, v81 & 1, v1118, (uint64_t)v1149._rawValue + 792, v950, v82, v83, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_23AC2C700;
  uint64_t v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_23AC2C710;
  *(void *)(v85 + 32) = 0xD000000000000017;
  *(void *)(v85 + 40) = 0x800000023AC446A0;
  *(void *)(v85 + 48) = 0xD000000000000017;
  *(void *)(v85 + 56) = 0x800000023AC446C0;
  *(void *)(v84 + 32) = v85;
  *(unsigned char *)(v84 + 40) = 0;
  uint64_t v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_23AC2C700;
  *(void *)(v86 + 32) = 0xD000000000000018;
  *(void *)(v86 + 40) = 0x800000023AC446E0;
  *(unsigned char *)(v86 + 48) = 0;
  uint64_t v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v87 + 32) = 513;
  *(unsigned char *)(v87 + 34) = 5;
  uint64_t v1119 = sub_23AB60324(v87, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v88 + 32) = 8;
  uint64_t v89 = sub_23AB60324(v88, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v90 + 32) = 768;
  uint64_t v91 = sub_23AB60324(v90, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v92.value._object = (void *)0x800000023AC44730;
  v92.value._countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v92, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v93 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  uint64_t v94 = sub_23ABBFBE8();
  uint64_t v95 = sub_23ABBFBE8();
  *((void *)&v951 + 1) = v91;
  *(void *)&long long v951 = v89;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC44700, v84, v86, v93, v64 & 1, 1, v1119, (uint64_t)v1149._rawValue + 944, v951, v94, v95, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_23AC2C700;
  uint64_t v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_23AC2C710;
  *(void *)(v97 + 32) = 0xD00000000000001ELL;
  *(void *)(v97 + 40) = 0x800000023AC44750;
  *(void *)(v97 + 48) = 0xD00000000000001DLL;
  *(void *)(v97 + 56) = 0x800000023AC44770;
  *(void *)(v96 + 32) = v97;
  *(unsigned char *)(v96 + 40) = 0;
  uint64_t v98 = swift_allocObject();
  *(_OWORD *)(v98 + 16) = xmmword_23AC2C700;
  *(void *)(v98 + 32) = 0xD00000000000001ELL;
  *(void *)(v98 + 40) = 0x800000023AC44790;
  *(unsigned char *)(v98 + 48) = 0;
  uint64_t v99 = swift_allocObject();
  *(_OWORD *)(v99 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v99 + 32) = 513;
  *(unsigned char *)(v99 + 34) = 5;
  uint64_t v1120 = sub_23AB60324(v99, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v100 + 32) = 8;
  uint64_t v101 = sub_23AB60324(v100, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v102 + 32) = 768;
  uint64_t v103 = sub_23AB60324(v102, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v104.value._object = (void *)0x800000023AC447E0;
  v104.value._countAndFlagsBits = 0xD000000000000019;
  Action.init(_:mac:)(v104, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v105 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v94) = sub_23ABBFBE0();
  uint64_t v106 = sub_23ABBFBE8();
  uint64_t v107 = sub_23ABBFBE8();
  *((void *)&v952 + 1) = v103;
  *(void *)&long long v952 = v101;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC447B0, v96, v98, v105, v64 & 1, v94 & 1, v1120, (uint64_t)v1149._rawValue + 1096, v952, v106, v107, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v108 = swift_allocObject();
  *(_OWORD *)(v108 + 16) = xmmword_23AC2C700;
  uint64_t v109 = swift_allocObject();
  *(_OWORD *)(v109 + 16) = xmmword_23AC2C710;
  *(void *)(v109 + 32) = 0xD00000000000001FLL;
  *(void *)(v109 + 40) = 0x800000023AC44800;
  *(void *)(v109 + 48) = 0xD00000000000001ELL;
  *(void *)(v109 + 56) = 0x800000023AC44820;
  *(void *)(v108 + 32) = v109;
  *(unsigned char *)(v108 + 40) = 0;
  uint64_t v110 = swift_allocObject();
  *(_OWORD *)(v110 + 16) = xmmword_23AC2C700;
  *(void *)(v110 + 32) = 0xD00000000000001FLL;
  *(void *)(v110 + 40) = 0x800000023AC44840;
  *(unsigned char *)(v110 + 48) = 0;
  uint64_t v111 = swift_allocObject();
  *(_OWORD *)(v111 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v111 + 32) = 513;
  *(unsigned char *)(v111 + 34) = 5;
  uint64_t v1121 = sub_23AB60324(v111, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v112 = swift_allocObject();
  *(_OWORD *)(v112 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v112 + 32) = 8;
  uint64_t v1115 = sub_23AB60324(v112, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v113 = swift_allocObject();
  *(_OWORD *)(v113 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v113 + 32) = 0;
  *(unsigned char *)(v113 + 33) = 3;
  uint64_t v114 = sub_23AB60324(v113, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v115.value._countAndFlagsBits = 0xD00000000000001ALL;
  v115.value._object = (void *)0x800000023AC44890;
  Action.init(_:mac:)(v115, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v116 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v94) = sub_23ABBFBE0();
  uint64_t v117 = sub_23ABBFBE8();
  uint64_t v118 = sub_23ABBFBE8();
  *((void *)&v953 + 1) = v114;
  *(void *)&long long v953 = v1115;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000028, 0x800000023AC44860, v108, v110, v116, v64 & 1, v94 & 1, v1121, (uint64_t)v1149._rawValue + 1248, v953, v117, v118, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = xmmword_23AC2C700;
  uint64_t v120 = swift_allocObject();
  *(_OWORD *)(v120 + 16) = xmmword_23AC2C710;
  *(void *)(v120 + 32) = 0xD00000000000001CLL;
  *(void *)(v120 + 40) = 0x800000023AC448B0;
  *(void *)(v120 + 48) = 0xD00000000000001BLL;
  *(void *)(v120 + 56) = 0x800000023AC448D0;
  *(void *)(v119 + 32) = v120;
  *(unsigned char *)(v119 + 40) = 0;
  uint64_t v121 = swift_allocObject();
  *(_OWORD *)(v121 + 16) = xmmword_23AC2C700;
  *(void *)(v121 + 32) = 0xD00000000000001CLL;
  *(void *)(v121 + 40) = 0x800000023AC448F0;
  *(unsigned char *)(v121 + 48) = 0;
  uint64_t v122 = swift_allocObject();
  *(_OWORD *)(v122 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v122 + 32) = 1;
  *(unsigned char *)(v122 + 33) = 2;
  *(unsigned char *)(v122 + 34) = 5;
  uint64_t v1122 = sub_23AB60324(v122, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v123 = swift_allocObject();
  *(_OWORD *)(v123 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v123 + 32) = 8;
  uint64_t v124 = sub_23AB60324(v123, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v125 = swift_allocObject();
  *(_OWORD *)(v125 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v125 + 32) = 0;
  *(unsigned char *)(v125 + 33) = 3;
  uint64_t v126 = sub_23AB60324(v125, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v127.value._object = (void *)0x800000023AC44940;
  v127.value._countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v127, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v128 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v94) = sub_23ABBFBE0();
  uint64_t v129 = sub_23ABBFBE8();
  uint64_t v130 = sub_23ABBFBE8();
  *((void *)&v954 + 1) = v126;
  *(void *)&long long v954 = v124;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC44910, v119, v121, v128, v64 & 1, v94 & 1, v1122, (uint64_t)v1149._rawValue + 1400, v954, v129, v130, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v131 = swift_allocObject();
  *(_OWORD *)(v131 + 16) = xmmword_23AC2C700;
  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_23AC2C710;
  *(void *)(v132 + 32) = 0xD00000000000001DLL;
  *(void *)(v132 + 40) = 0x800000023AC44960;
  *(void *)(v132 + 48) = 0xD00000000000001CLL;
  *(void *)(v132 + 56) = 0x800000023AC44980;
  *(void *)(v131 + 32) = v132;
  *(unsigned char *)(v131 + 40) = 0;
  uint64_t v133 = swift_allocObject();
  *(_OWORD *)(v133 + 16) = xmmword_23AC2C700;
  *(void *)(v133 + 32) = 0xD00000000000001DLL;
  *(void *)(v133 + 40) = 0x800000023AC449A0;
  *(unsigned char *)(v133 + 48) = 0;
  uint64_t v134 = swift_allocObject();
  *(_OWORD *)(v134 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v134 + 32) = 1;
  *(unsigned char *)(v134 + 33) = 2;
  *(unsigned char *)(v134 + 34) = 5;
  uint64_t v1123 = sub_23AB60324(v134, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v135 = swift_allocObject();
  *(_OWORD *)(v135 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v135 + 32) = 8;
  uint64_t v136 = sub_23AB60324(v135, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v137 = swift_allocObject();
  *(_OWORD *)(v137 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v137 + 32) = 0;
  *(unsigned char *)(v137 + 33) = 3;
  uint64_t v138 = sub_23AB60324(v137, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v139.value._object = (void *)0x800000023AC449F0;
  v139.value._countAndFlagsBits = 0xD000000000000018;
  Action.init(_:mac:)(v139, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v140 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v94) = sub_23ABBFBE0();
  uint64_t v141 = sub_23ABBFBE8();
  uint64_t v142 = sub_23ABBFBE8();
  *((void *)&v955 + 1) = v138;
  *(void *)&long long v955 = v136;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000026, 0x800000023AC449C0, v131, v133, v140, v64 & 1, v94 & 1, v1123, (uint64_t)v1149._rawValue + 1552, v955, v141, v142, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v143 = swift_allocObject();
  *(_OWORD *)(v143 + 16) = xmmword_23AC2C700;
  uint64_t v144 = swift_allocObject();
  *(_OWORD *)(v144 + 16) = xmmword_23AC2C710;
  *(void *)(v144 + 32) = 0xD000000000000015;
  *(void *)(v144 + 40) = 0x800000023AC44A10;
  *(void *)(v144 + 48) = 0xD000000000000015;
  *(void *)(v144 + 56) = 0x800000023AC44A30;
  *(void *)(v143 + 32) = v144;
  *(unsigned char *)(v143 + 40) = 0;
  uint64_t v145 = swift_allocObject();
  *(_OWORD *)(v145 + 16) = xmmword_23AC2C700;
  *(void *)(v145 + 32) = 0xD000000000000016;
  *(void *)(v145 + 40) = 0x800000023AC44A50;
  *(unsigned char *)(v145 + 48) = 0;
  uint64_t v146 = swift_allocObject();
  *(_OWORD *)(v146 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v146 + 32) = 1;
  *(unsigned char *)(v146 + 33) = 2;
  *(unsigned char *)(v146 + 34) = 5;
  uint64_t v1116 = sub_23AB60324(v146, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v147 = swift_allocObject();
  *(_OWORD *)(v147 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v147 + 32) = 8;
  uint64_t v1074 = sub_23AB60324(v147, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v148 = swift_allocObject();
  *(_OWORD *)(v148 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v148 + 32) = 0;
  *(unsigned char *)(v148 + 33) = 3;
  uint64_t v149 = sub_23AB60324(v148, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v150.value._countAndFlagsBits = 0xD000000000000012;
  v150.value._object = (void *)0x800000023AC44AA0;
  Action.init(_:mac:)(v150, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v151 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v94) = sub_23ABBFBE0();
  uint64_t v152 = sub_23ABBFBE8();
  uint64_t v153 = sub_23ABBFBE8();
  *((void *)&v956 + 1) = v149;
  *(void *)&long long v956 = v1074;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000020, 0x800000023AC44A70, v143, v145, v151, v64 & 1, v94 & 1, v1116, (uint64_t)v1149._rawValue + 1704, v956, v152, v153, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v154 = swift_allocObject();
  *(_OWORD *)(v154 + 16) = xmmword_23AC2C700;
  uint64_t v155 = swift_allocObject();
  *(_OWORD *)(v155 + 16) = xmmword_23AC2C710;
  *(void *)(v155 + 32) = 0xD000000000000016;
  *(void *)(v155 + 40) = 0x800000023AC44AC0;
  *(void *)(v155 + 48) = 0xD000000000000016;
  *(void *)(v155 + 56) = 0x800000023AC44AE0;
  *(void *)(v154 + 32) = v155;
  *(unsigned char *)(v154 + 40) = 0;
  uint64_t v156 = swift_allocObject();
  *(_OWORD *)(v156 + 16) = xmmword_23AC2C700;
  *(void *)(v156 + 32) = 0xD000000000000017;
  *(void *)(v156 + 40) = 0x800000023AC44B00;
  *(unsigned char *)(v156 + 48) = 0;
  uint64_t v157 = swift_allocObject();
  *(_OWORD *)(v157 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v157 + 32) = 1;
  *(unsigned char *)(v157 + 33) = 2;
  *(unsigned char *)(v157 + 34) = 5;
  uint64_t v1075 = sub_23AB60324(v157, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v158 = swift_allocObject();
  *(_OWORD *)(v158 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v158 + 32) = 8;
  uint64_t v1070 = sub_23AB60324(v158, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v159 = swift_allocObject();
  *(_OWORD *)(v159 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v159 + 32) = 0;
  *(unsigned char *)(v159 + 33) = 3;
  uint64_t v160 = sub_23AB60324(v159, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v161.value._countAndFlagsBits = 0xD000000000000013;
  v161.value._object = (void *)0x800000023AC44B50;
  Action.init(_:mac:)(v161, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v162 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v94) = sub_23ABBFBE0();
  uint64_t v163 = sub_23ABBFBE8();
  uint64_t v164 = sub_23ABBFBE8();
  *((void *)&v957 + 1) = v160;
  *(void *)&long long v957 = v1070;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000021, 0x800000023AC44B20, v154, v156, v162, v64 & 1, v94 & 1, v1075, (uint64_t)v1149._rawValue + 1856, v957, v163, v164, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v165 = swift_allocObject();
  *(_OWORD *)(v165 + 16) = xmmword_23AC2C700;
  uint64_t v166 = swift_allocObject();
  *(_OWORD *)(v166 + 16) = xmmword_23AC2C710;
  *(void *)(v166 + 32) = 0xD00000000000001CLL;
  *(void *)(v166 + 40) = 0x800000023AC44B70;
  *(void *)(v166 + 48) = 0xD00000000000001CLL;
  *(void *)(v166 + 56) = 0x800000023AC44B90;
  *(void *)(v165 + 32) = v166;
  *(unsigned char *)(v165 + 40) = 0;
  uint64_t v167 = swift_allocObject();
  *(_OWORD *)(v167 + 16) = xmmword_23AC2C700;
  *(void *)(v167 + 32) = 0xD00000000000001DLL;
  *(void *)(v167 + 40) = 0x800000023AC44BB0;
  *(unsigned char *)(v167 + 48) = 0;
  uint64_t v168 = swift_allocObject();
  *(_OWORD *)(v168 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v168 + 32) = 1;
  *(unsigned char *)(v168 + 33) = 2;
  *(unsigned char *)(v168 + 34) = 5;
  uint64_t v1076 = sub_23AB60324(v168, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v169 = swift_allocObject();
  *(_OWORD *)(v169 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v169 + 32) = 8;
  uint64_t v170 = sub_23AB60324(v169, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v171 = swift_allocObject();
  *(_OWORD *)(v171 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v171 + 32) = 0;
  *(unsigned char *)(v171 + 33) = 3;
  uint64_t v172 = sub_23AB60324(v171, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v173.value._object = (void *)0x800000023AC44C00;
  v173.value._countAndFlagsBits = 0xD000000000000018;
  Action.init(_:mac:)(v173, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v174 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v94) = sub_23ABBFBE0();
  uint64_t v175 = sub_23ABBFBE8();
  uint64_t v176 = sub_23ABBFBE8();
  *((void *)&v958 + 1) = v172;
  *(void *)&long long v958 = v170;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000026, 0x800000023AC44BD0, v165, v167, v174, v64 & 1, v94 & 1, v1076, (uint64_t)v1149._rawValue + 2008, v958, v175, v176, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v177 = swift_allocObject();
  *(_OWORD *)(v177 + 16) = xmmword_23AC2C700;
  uint64_t v178 = swift_allocObject();
  *(_OWORD *)(v178 + 16) = xmmword_23AC2C710;
  *(void *)(v178 + 32) = 0xD00000000000001DLL;
  *(void *)(v178 + 40) = 0x800000023AC44C20;
  *(void *)(v178 + 48) = 0xD00000000000001DLL;
  *(void *)(v178 + 56) = 0x800000023AC44C40;
  *(void *)(v177 + 32) = v178;
  *(unsigned char *)(v177 + 40) = 0;
  uint64_t v179 = swift_allocObject();
  *(_OWORD *)(v179 + 16) = xmmword_23AC2C700;
  *(void *)(v179 + 32) = 0xD00000000000001ELL;
  *(void *)(v179 + 40) = 0x800000023AC44C60;
  *(unsigned char *)(v179 + 48) = 0;
  uint64_t v180 = swift_allocObject();
  *(_OWORD *)(v180 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v180 + 32) = 1;
  *(unsigned char *)(v180 + 33) = 2;
  *(unsigned char *)(v180 + 34) = 5;
  uint64_t v1077 = sub_23AB60324(v180, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v181 = swift_allocObject();
  *(_OWORD *)(v181 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v181 + 32) = 8;
  uint64_t v182 = sub_23AB60324(v181, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v183 = swift_allocObject();
  *(_OWORD *)(v183 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v183 + 32) = 0;
  *(unsigned char *)(v183 + 33) = 3;
  uint64_t v184 = sub_23AB60324(v183, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v185.value._object = (void *)0x800000023AC44CB0;
  v185.value._countAndFlagsBits = 0xD000000000000019;
  Action.init(_:mac:)(v185, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v186 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  uint64_t v187 = sub_23ABBFBE8();
  uint64_t v188 = sub_23ABBFBE8();
  *((void *)&v959 + 1) = v184;
  *(void *)&long long v959 = v182;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC44C80, v177, v179, v186, v64 & 1, 1, v1077, (uint64_t)v1149._rawValue + 2160, v959, v187, v188, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v189 = swift_allocObject();
  *(_OWORD *)(v189 + 16) = xmmword_23AC2C700;
  uint64_t v190 = swift_allocObject();
  *(_OWORD *)(v190 + 16) = xmmword_23AC2C710;
  *(void *)(v190 + 32) = 0xD00000000000001ALL;
  *(void *)(v190 + 40) = 0x800000023AC44CD0;
  *(void *)(v190 + 48) = 0xD00000000000001ALL;
  *(void *)(v190 + 56) = 0x800000023AC44CF0;
  *(void *)(v189 + 32) = v190;
  *(unsigned char *)(v189 + 40) = 0;
  uint64_t v191 = swift_allocObject();
  *(_OWORD *)(v191 + 16) = xmmword_23AC2C700;
  *(void *)(v191 + 32) = 0xD00000000000001BLL;
  *(void *)(v191 + 40) = 0x800000023AC44D10;
  *(unsigned char *)(v191 + 48) = 0;
  uint64_t v192 = swift_allocObject();
  *(_OWORD *)(v192 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v192 + 32) = 1;
  *(unsigned char *)(v192 + 33) = 2;
  *(unsigned char *)(v192 + 34) = 5;
  uint64_t v1078 = sub_23AB60324(v192, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v193 = swift_allocObject();
  *(_OWORD *)(v193 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v193 + 32) = 8;
  uint64_t v194 = sub_23AB60324(v193, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v195 = swift_allocObject();
  *(_OWORD *)(v195 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v195 + 32) = 0;
  *(unsigned char *)(v195 + 33) = 3;
  uint64_t v196 = sub_23AB60324(v195, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v197.value._object = (void *)0x800000023AC44D60;
  v197.value._countAndFlagsBits = 0xD000000000000016;
  Action.init(_:mac:)(v197, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v198 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v187) = sub_23ABBFBE0();
  uint64_t v199 = sub_23ABBFBE8();
  uint64_t v200 = sub_23ABBFBE8();
  *((void *)&v960 + 1) = v196;
  *(void *)&long long v960 = v194;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000024, 0x800000023AC44D30, v189, v191, v198, v64 & 1, v187 & 1, v1078, (uint64_t)v1149._rawValue + 2312, v960, v199, v200, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v201 = swift_allocObject();
  *(_OWORD *)(v201 + 16) = xmmword_23AC2C700;
  uint64_t v202 = swift_allocObject();
  *(_OWORD *)(v202 + 16) = xmmword_23AC2C710;
  *(void *)(v202 + 32) = 0xD00000000000001BLL;
  *(void *)(v202 + 40) = 0x800000023AC44D80;
  *(void *)(v202 + 48) = 0xD00000000000001BLL;
  *(void *)(v202 + 56) = 0x800000023AC44DA0;
  *(void *)(v201 + 32) = v202;
  *(unsigned char *)(v201 + 40) = 0;
  uint64_t v203 = swift_allocObject();
  *(_OWORD *)(v203 + 16) = xmmword_23AC2C700;
  *(void *)(v203 + 32) = 0xD00000000000001CLL;
  *(void *)(v203 + 40) = 0x800000023AC44DC0;
  *(unsigned char *)(v203 + 48) = 0;
  uint64_t v204 = swift_allocObject();
  *(_OWORD *)(v204 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v204 + 32) = 1;
  *(unsigned char *)(v204 + 33) = 2;
  *(unsigned char *)(v204 + 34) = 5;
  uint64_t v1091 = sub_23AB60324(v204, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v205 = swift_allocObject();
  *(_OWORD *)(v205 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v205 + 32) = 8;
  uint64_t v1079 = sub_23AB60324(v205, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v206 = swift_allocObject();
  *(_OWORD *)(v206 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v206 + 32) = 0;
  *(unsigned char *)(v206 + 33) = 3;
  uint64_t v207 = sub_23AB60324(v206, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v208.value._object = (void *)0x800000023AC44E10;
  v208.value._countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v208, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v209 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v187) = sub_23ABBFBE0();
  uint64_t v210 = sub_23ABBFBE8();
  uint64_t v211 = sub_23ABBFBE8();
  *((void *)&v961 + 1) = v207;
  *(void *)&long long v961 = v1079;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC44DE0, v201, v203, v209, v64 & 1, v187 & 1, v1091, (uint64_t)v1149._rawValue + 2464, v961, v210, v211, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v212 = swift_allocObject();
  *(_OWORD *)(v212 + 16) = xmmword_23AC2C700;
  uint64_t v213 = swift_allocObject();
  *(_OWORD *)(v213 + 16) = xmmword_23AC2C710;
  *(void *)(v213 + 32) = 0xD000000000000016;
  *(void *)(v213 + 40) = 0x800000023AC44E30;
  *(void *)(v213 + 48) = 0xD000000000000016;
  *(void *)(v213 + 56) = 0x800000023AC44E50;
  *(void *)(v212 + 32) = v213;
  *(unsigned char *)(v212 + 40) = 0;
  uint64_t v214 = swift_allocObject();
  *(_OWORD *)(v214 + 16) = xmmword_23AC2C700;
  *(void *)(v214 + 32) = 0xD000000000000017;
  *(void *)(v214 + 40) = 0x800000023AC44E70;
  *(unsigned char *)(v214 + 48) = 0;
  uint64_t v215 = swift_allocObject();
  *(_OWORD *)(v215 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v215 + 32) = 1;
  *(unsigned char *)(v215 + 33) = 2;
  *(unsigned char *)(v215 + 34) = 5;
  uint64_t v1092 = sub_23AB60324(v215, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v216 = swift_allocObject();
  *(_OWORD *)(v216 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v216 + 32) = 8;
  uint64_t v217 = sub_23AB60324(v216, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v218 = swift_allocObject();
  *(_OWORD *)(v218 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v218 + 32) = 0;
  *(unsigned char *)(v218 + 33) = 3;
  uint64_t v219 = sub_23AB60324(v218, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v220.value._object = (void *)0x800000023AC44EC0;
  v220.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v220, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v221 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  LOBYTE(v187) = sub_23ABBFBE0();
  uint64_t v222 = sub_23ABBFBE8();
  uint64_t v223 = sub_23ABBFBE8();
  *((void *)&v962 + 1) = v219;
  *(void *)&long long v962 = v217;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000021, 0x800000023AC44E90, v212, v214, v221, v64 & 1, v187 & 1, v1092, (uint64_t)v1149._rawValue + 2616, v962, v222, v223, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v224 = swift_allocObject();
  *(_OWORD *)(v224 + 16) = xmmword_23AC2C700;
  uint64_t v225 = swift_allocObject();
  *(_OWORD *)(v225 + 16) = xmmword_23AC2C710;
  *(void *)(v225 + 32) = 0xD000000000000017;
  *(void *)(v225 + 40) = 0x800000023AC44EE0;
  *(void *)(v225 + 48) = 0xD000000000000017;
  *(void *)(v225 + 56) = 0x800000023AC44F00;
  *(void *)(v224 + 32) = v225;
  *(unsigned char *)(v224 + 40) = 0;
  uint64_t v226 = swift_allocObject();
  *(_OWORD *)(v226 + 16) = xmmword_23AC2C700;
  *(void *)(v226 + 32) = 0xD000000000000018;
  *(void *)(v226 + 40) = 0x800000023AC44F20;
  *(unsigned char *)(v226 + 48) = 0;
  uint64_t v227 = swift_allocObject();
  *(_OWORD *)(v227 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v227 + 32) = 1;
  *(unsigned char *)(v227 + 33) = 2;
  *(unsigned char *)(v227 + 34) = 5;
  uint64_t v1093 = sub_23AB60324(v227, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v228 = swift_allocObject();
  *(_OWORD *)(v228 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v228 + 32) = 8;
  uint64_t v229 = sub_23AB60324(v228, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v230 = swift_allocObject();
  *(_OWORD *)(v230 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v230 + 32) = 0;
  *(unsigned char *)(v230 + 33) = 3;
  uint64_t v231 = sub_23AB60324(v230, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v232.value._object = (void *)0x800000023AC44F70;
  v232.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v232, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v233 = sub_23ABBFBD4();
  LOBYTE(v64) = sub_23ABB8BA8();
  uint64_t v234 = sub_23ABBFBE8();
  uint64_t v235 = sub_23ABBFBE8();
  *((void *)&v963 + 1) = v231;
  *(void *)&long long v963 = v229;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC44F40, v224, v226, v233, v64 & 1, 1, v1093, (uint64_t)v1149._rawValue + 2768, v963, v234, v235, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v236 = swift_allocObject();
  *(_OWORD *)(v236 + 16) = xmmword_23AC2C700;
  uint64_t v237 = swift_allocObject();
  *(_OWORD *)(v237 + 16) = xmmword_23AC2C710;
  *(void *)(v237 + 32) = 0xD000000000000011;
  *(void *)(v237 + 40) = 0x800000023AC44F90;
  *(void *)(v237 + 48) = 0xD000000000000011;
  *(void *)(v237 + 56) = 0x800000023AC44FB0;
  *(void *)(v236 + 32) = v237;
  *(unsigned char *)(v236 + 40) = 0;
  uint64_t v238 = swift_allocObject();
  *(_OWORD *)(v238 + 16) = xmmword_23AC2C700;
  *(void *)(v238 + 32) = 0xD000000000000012;
  *(void *)(v238 + 40) = 0x800000023AC44FD0;
  *(unsigned char *)(v238 + 48) = 0;
  uint64_t v239 = swift_allocObject();
  *(_OWORD *)(v239 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v239 + 32) = 134545921;
  uint64_t v1128 = sub_23AB60324(v239, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1071 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1071 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v240 = swift_allocObject();
  *(_OWORD *)(v240 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v240 + 32) = 768;
  uint64_t v241 = sub_23AB60324(v240, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v242.value._countAndFlagsBits = 0x6F56656C62616E65;
  v242.value._object = (void *)0xEF7265764F656369;
  Action.init(_:mac:)(v242, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v243 = sub_23ABBFBD4();
  char v244 = sub_23ABB8BA8();
  char v245 = sub_23ABBFBE0();
  uint64_t v246 = sub_23ABBFBE8();
  uint64_t v247 = sub_23ABBFBE8();
  *((void *)&v964 + 1) = v241;
  *(void *)&long long v964 = v1071;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC44FF0, v236, v238, v243, v244 & 1, v245 & 1, v1128, (uint64_t)v1149._rawValue + 2920, v964, v246, v247, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v248 = swift_allocObject();
  *(_OWORD *)(v248 + 16) = xmmword_23AC2C700;
  uint64_t v249 = swift_allocObject();
  *(_OWORD *)(v249 + 16) = xmmword_23AC2C710;
  *(void *)(v249 + 32) = 0xD000000000000012;
  *(void *)(v249 + 40) = 0x800000023AC45010;
  *(void *)(v249 + 48) = 0xD000000000000012;
  *(void *)(v249 + 56) = 0x800000023AC45030;
  *(void *)(v248 + 32) = v249;
  *(unsigned char *)(v248 + 40) = 0;
  uint64_t v250 = swift_allocObject();
  *(_OWORD *)(v250 + 16) = xmmword_23AC2C700;
  *(void *)(v250 + 32) = 0xD000000000000013;
  *(void *)(v250 + 40) = 0x800000023AC45050;
  *(unsigned char *)(v250 + 48) = 0;
  uint64_t v251 = swift_allocObject();
  *(_OWORD *)(v251 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v251 + 32) = 134545921;
  uint64_t v1129 = sub_23AB60324(v251, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v252 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v252 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v253 = swift_allocObject();
  *(_OWORD *)(v253 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v253 + 32) = 768;
  uint64_t v254 = sub_23AB60324(v253, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v255.value._countAndFlagsBits = 0xD000000000000010;
  v255.value._object = (void *)0x800000023AC45090;
  Action.init(_:mac:)(v255, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v256 = sub_23ABBFBD4();
  char v257 = sub_23ABB8BA8();
  uint64_t v258 = sub_23ABBFBE8();
  uint64_t v259 = sub_23ABBFBE8();
  *(void *)&long long v965 = v252;
  *((void *)&v965 + 1) = v254;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC45070, v248, v250, v256, v257 & 1, 1, v1129, (uint64_t)v1149._rawValue + 3072, v965, v258, v259, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v260 = swift_allocObject();
  *(_OWORD *)(v260 + 16) = xmmword_23AC2C700;
  uint64_t v261 = swift_allocObject();
  *(_OWORD *)(v261 + 16) = xmmword_23AC2C710;
  strcpy((char *)(v261 + 32), "Turn on Zoom");
  *(unsigned char *)(v261 + 45) = 0;
  *(_WORD *)(v261 + 46) = -5120;
  strcpy((char *)(v261 + 48), "Turn Zoom on");
  *(unsigned char *)(v261 + 61) = 0;
  *(_WORD *)(v261 + 62) = -5120;
  *(void *)(v260 + 32) = v261;
  *(unsigned char *)(v260 + 40) = 0;
  uint64_t v262 = swift_allocObject();
  *(_OWORD *)(v262 + 16) = xmmword_23AC2C700;
  *(void *)(v262 + 32) = 0xD00000000000001BLL;
  *(void *)(v262 + 40) = 0x800000023AC450B0;
  *(unsigned char *)(v262 + 48) = 0;
  uint64_t v263 = swift_allocObject();
  *(_OWORD *)(v263 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v263 + 32) = 513;
  *(unsigned char *)(v263 + 34) = 5;
  uint64_t v1130 = sub_23AB60324(v263, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v264 = swift_allocObject();
  *(_OWORD *)(v264 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v264 + 32) = 8;
  uint64_t v265 = sub_23AB60324(v264, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v266 = swift_allocObject();
  *(_OWORD *)(v266 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v266 + 32) = 768;
  uint64_t v267 = sub_23AB60324(v266, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v268.value._object = (void *)0xEA00000000006D6FLL;
  v268.value._countAndFlagsBits = 0x6F5A656C62616E65;
  Action.init(_:mac:)(v268, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v269 = sub_23ABBFBD4();
  LOBYTE(v254) = sub_23ABB8BA8();
  LOBYTE(v258) = sub_23ABBFBE0();
  uint64_t v270 = sub_23ABBFBE8();
  uint64_t v271 = sub_23ABBFBE8();
  *((void *)&v966 + 1) = v267;
  *(void *)&long long v966 = v265;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC450D0, v260, v262, v269, v254 & 1, v258 & 1, v1130, (uint64_t)v1149._rawValue + 3224, v966, v270, v271, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v272 = swift_allocObject();
  *(_OWORD *)(v272 + 16) = xmmword_23AC2C700;
  uint64_t v273 = swift_allocObject();
  *(_OWORD *)(v273 + 16) = xmmword_23AC2C710;
  strcpy((char *)(v273 + 32), "Turn off Zoom");
  *(_WORD *)(v273 + 46) = -4864;
  strcpy((char *)(v273 + 48), "Turn Zoom off");
  *(_WORD *)(v273 + 62) = -4864;
  *(void *)(v272 + 32) = v273;
  *(unsigned char *)(v272 + 40) = 0;
  uint64_t v274 = swift_allocObject();
  *(_OWORD *)(v274 + 16) = xmmword_23AC2C700;
  *(void *)(v274 + 32) = 0xD00000000000001CLL;
  *(void *)(v274 + 40) = 0x800000023AC450F0;
  *(unsigned char *)(v274 + 48) = 0;
  uint64_t v275 = swift_allocObject();
  *(_OWORD *)(v275 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v275 + 32) = 513;
  *(unsigned char *)(v275 + 34) = 5;
  uint64_t v1131 = sub_23AB60324(v275, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v276 = swift_allocObject();
  *(_OWORD *)(v276 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v276 + 32) = 8;
  uint64_t v277 = sub_23AB60324(v276, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v278 = swift_allocObject();
  *(_OWORD *)(v278 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v278 + 32) = 768;
  uint64_t v279 = sub_23AB60324(v278, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v280.value._countAndFlagsBits = 0x5A656C6261736964;
  v280.value._object = (void *)0xEB000000006D6F6FLL;
  Action.init(_:mac:)(v280, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  uint64_t v281 = sub_23ABBFBD4();
  LOBYTE(v270) = sub_23ABB8BA8();
  LOBYTE(v254) = sub_23ABBFBE0();
  uint64_t v282 = sub_23ABBFBE8();
  uint64_t v283 = sub_23ABBFBE8();
  *((void *)&v967 + 1) = v279;
  *(void *)&long long v967 = v277;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC45110, v272, v274, v281, v270 & 1, v254 & 1, v1131, (uint64_t)v1149._rawValue + 3376, v967, v282, v283, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v284 = swift_allocObject();
  *(_OWORD *)(v284 + 16) = xmmword_23AC2C700;
  uint64_t v285 = swift_allocObject();
  *(_OWORD *)(v285 + 16) = xmmword_23AC2C710;
  *(void *)(v285 + 32) = 0xD000000000000012;
  *(void *)(v285 + 40) = 0x800000023AC45130;
  *(void *)(v285 + 48) = 0x65764F6563696F56;
  *(void *)(v285 + 56) = 0xEF73736572702072;
  *(void *)(v284 + 32) = v285;
  *(unsigned char *)(v284 + 40) = 0;
  uint64_t v286 = swift_allocObject();
  *(_OWORD *)(v286 + 16) = xmmword_23AC2C700;
  *(void *)(v286 + 32) = 0xD000000000000040;
  *(void *)(v286 + 40) = 0x800000023AC45150;
  *(unsigned char *)(v286 + 48) = 0;
  uint64_t v287 = swift_allocObject();
  *(_OWORD *)(v287 + 16) = xmmword_23AC2C700;
  *(void *)(v287 + 32) = 0xD00000000000002DLL;
  *(void *)(v287 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v287 + 48) = 0;
  uint64_t v288 = swift_allocObject();
  *(_OWORD *)(v288 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v288 + 32) = 84017408;
  *(unsigned char *)(v288 + 36) = 8;
  uint64_t v1054 = sub_23AB60324(v288, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1051 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1051 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v289 = swift_allocObject();
  *(_OWORD *)(v289 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v289 + 32) = 3;
  uint64_t v290 = sub_23AB60324(v289, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A330);
  uint64_t v291 = swift_allocObject();
  *(_OWORD *)(v291 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v291 + 32) = 30;
  uint64_t v292 = sub_23AB60324(v291, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v293.value._countAndFlagsBits = 0x6176697463416F76;
  v293.value._object = (void *)0xEA00000000006574;
  Action.init(_:mac:)(v293, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v294 = sub_23ABB8BA8();
  char v295 = sub_23ABBFBE0();
  uint64_t v296 = sub_23ABBFBE8();
  *((void *)&v968 + 1) = v290;
  *(void *)&long long v968 = v1051;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC451D0, v284, v286, v287, v294 & 1, v295 & 1, v1054, (uint64_t)v1149._rawValue + 3528, v968, v296, v292, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v297 = swift_allocObject();
  *(_OWORD *)(v297 + 16) = xmmword_23AC2C700;
  uint64_t v298 = swift_allocObject();
  *(_OWORD *)(v298 + 16) = xmmword_23AC2C700;
  *(void *)(v298 + 32) = 0xD000000000000013;
  *(void *)(v298 + 40) = 0x800000023AC451F0;
  *(void *)(v297 + 32) = v298;
  *(unsigned char *)(v297 + 40) = 0;
  uint64_t v299 = swift_allocObject();
  *(_OWORD *)(v299 + 16) = xmmword_23AC2C700;
  *(void *)(v299 + 32) = 0xD00000000000002ALL;
  *(void *)(v299 + 40) = 0x800000023AC45210;
  *(unsigned char *)(v299 + 48) = 0;
  uint64_t v300 = swift_allocObject();
  *(_OWORD *)(v300 + 16) = xmmword_23AC2C700;
  *(void *)(v300 + 32) = 0xD00000000000002DLL;
  *(void *)(v300 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v300 + 48) = 0;
  uint64_t v301 = swift_allocObject();
  *(_OWORD *)(v301 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v301 + 32) = 134545921;
  uint64_t v1061 = sub_23AB60324(v301, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1055 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1055 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v302 = swift_allocObject();
  *(_OWORD *)(v302 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v302 + 32) = 768;
  uint64_t v303 = sub_23AB60324(v302, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v304 = swift_allocObject();
  *(_OWORD *)(v304 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v304 + 32) = 30;
  uint64_t v305 = sub_23AB60324(v304, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v306.value._object = (void *)0xEA00000000007061;
  v306.value._countAndFlagsBits = 0x54636967614D6F76;
  Action.init(_:mac:)(v306, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v307 = sub_23ABB8BA8();
  char v308 = sub_23ABBFBE0();
  uint64_t v309 = sub_23ABBFBE8();
  *((void *)&v969 + 1) = v303;
  *(void *)&long long v969 = v1055;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC45240, v297, v299, v300, v307 & 1, v308 & 1, v1061, (uint64_t)v1149._rawValue + 3680, v969, v309, v305, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v310 = swift_allocObject();
  *(_OWORD *)(v310 + 16) = xmmword_23AC2C700;
  uint64_t v311 = swift_allocObject();
  *(_OWORD *)(v311 + 16) = xmmword_23AC2C700;
  *(void *)(v311 + 32) = 0xD000000000000029;
  *(void *)(v311 + 40) = 0x800000023AC45260;
  *(void *)(v310 + 32) = v311;
  *(unsigned char *)(v310 + 40) = 0;
  uint64_t v312 = swift_allocObject();
  *(_OWORD *)(v312 + 16) = xmmword_23AC2C700;
  *(void *)(v312 + 32) = 0xD00000000000002DLL;
  *(void *)(v312 + 40) = 0x800000023AC45290;
  *(unsigned char *)(v312 + 48) = 0;
  uint64_t v313 = swift_allocObject();
  *(_OWORD *)(v313 + 16) = xmmword_23AC2C700;
  *(void *)(v313 + 32) = 0xD000000000000061;
  *(void *)(v313 + 40) = 0x800000023AC452C0;
  *(unsigned char *)(v313 + 48) = 0;
  uint64_t v314 = swift_allocObject();
  *(_OWORD *)(v314 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v314 + 32) = 134545921;
  uint64_t v1062 = sub_23AB60324(v314, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1056 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1056 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v315 = swift_allocObject();
  *(_OWORD *)(v315 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v315 + 32) = 768;
  uint64_t v316 = sub_23AB60324(v315, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v317 = swift_allocObject();
  *(_OWORD *)(v317 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v317 + 32) = 7699;
  uint64_t v318 = sub_23AB60324(v317, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v319.value._countAndFlagsBits = 0x7463656C65536F76;
  v319.value._object = (void *)0xE800000000000000;
  Action.init(_:mac:)(v319, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v320 = sub_23ABB8BA8();
  char v321 = sub_23ABBFBE0();
  uint64_t v322 = sub_23ABBFBE8();
  *((void *)&v970 + 1) = v316;
  *(void *)&long long v970 = v1056;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC45330, v310, v312, v313, v320 & 1, v321 & 1, v1062, (uint64_t)v1149._rawValue + 3832, v970, v322, v318, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v323 = swift_allocObject();
  *(_OWORD *)(v323 + 16) = xmmword_23AC2C700;
  uint64_t v324 = swift_allocObject();
  *(_OWORD *)(v324 + 16) = xmmword_23AC2C700;
  *(void *)(v324 + 32) = 0xD000000000000012;
  *(void *)(v324 + 40) = 0x800000023AC45350;
  *(void *)(v323 + 32) = v324;
  *(unsigned char *)(v323 + 40) = 0;
  uint64_t v325 = swift_allocObject();
  *(_OWORD *)(v325 + 16) = xmmword_23AC2C700;
  *(void *)(v325 + 32) = 0xD00000000000002BLL;
  *(void *)(v325 + 40) = 0x800000023AC45370;
  *(unsigned char *)(v325 + 48) = 0;
  uint64_t v326 = swift_allocObject();
  *(_OWORD *)(v326 + 16) = xmmword_23AC2C700;
  *(void *)(v326 + 32) = 0xD00000000000002DLL;
  *(void *)(v326 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v326 + 48) = 0;
  uint64_t v327 = swift_allocObject();
  *(_OWORD *)(v327 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v327 + 32) = 84017408;
  *(unsigned char *)(v327 + 36) = 8;
  uint64_t v1039 = sub_23AB60324(v327, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1032 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1032 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v328 = swift_allocObject();
  *(_OWORD *)(v328 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v328 + 32) = 3;
  uint64_t v329 = sub_23AB60324(v328, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v330 = swift_allocObject();
  *(_OWORD *)(v330 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v330 + 32) = 30;
  uint64_t v331 = sub_23AB60324(v330, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v332.value._countAndFlagsBits = 0x6C41646165526F76;
  v332.value._object = (void *)0xE90000000000006CLL;
  Action.init(_:mac:)(v332, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v333 = sub_23ABB8BA8();
  char v334 = sub_23ABBFBE0();
  uint64_t v335 = sub_23ABBFBE8();
  *((void *)&v971 + 1) = v329;
  *(void *)&long long v971 = v1032;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC453A0, v323, v325, v326, v333 & 1, v334 & 1, v1039, (uint64_t)v1149._rawValue + 3984, v971, v335, v331, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v336 = swift_allocObject();
  *(_OWORD *)(v336 + 16) = xmmword_23AC2C700;
  uint64_t v337 = swift_allocObject();
  *(_OWORD *)(v337 + 16) = xmmword_23AC2C700;
  *(void *)(v337 + 32) = 0xD000000000000027;
  *(void *)(v337 + 40) = 0x800000023AC453C0;
  *(void *)(v336 + 32) = v337;
  *(unsigned char *)(v336 + 40) = 0;
  uint64_t v338 = swift_allocObject();
  *(_OWORD *)(v338 + 16) = xmmword_23AC2C700;
  *(void *)(v338 + 32) = 0xD000000000000038;
  *(void *)(v338 + 40) = 0x800000023AC453F0;
  *(unsigned char *)(v338 + 48) = 0;
  uint64_t v339 = swift_allocObject();
  *(_OWORD *)(v339 + 16) = xmmword_23AC2C700;
  *(void *)(v339 + 32) = 0xD00000000000002DLL;
  *(void *)(v339 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v339 + 48) = 0;
  uint64_t v340 = swift_allocObject();
  *(_OWORD *)(v340 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v340 + 32) = 134545921;
  uint64_t v1063 = sub_23AB60324(v340, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1040 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1040 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v341 = swift_allocObject();
  *(_OWORD *)(v341 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v341 + 32) = 768;
  uint64_t v342 = sub_23AB60324(v341, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v343 = swift_allocObject();
  *(_OWORD *)(v343 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v343 + 32) = 30;
  uint64_t v344 = sub_23AB60324(v343, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v345.value._countAndFlagsBits = 0x7463656C65536F76;
  v345.value._object = (void *)0xE800000000000000;
  Action.init(_:mac:)(v345, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v346 = sub_23ABB8BA8();
  char v347 = sub_23ABBFBE0();
  uint64_t v348 = sub_23ABBFBE8();
  *((void *)&v972 + 1) = v342;
  *(void *)&long long v972 = v1040;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC45430, v336, v338, v339, v346 & 1, v347 & 1, v1063, (uint64_t)v1149._rawValue + 4136, v972, v348, v344, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v349 = swift_allocObject();
  *(_OWORD *)(v349 + 16) = xmmword_23AC2C700;
  uint64_t v350 = swift_allocObject();
  *(_OWORD *)(v350 + 16) = xmmword_23AC2C700;
  *(void *)(v350 + 32) = 0xD000000000000021;
  *(void *)(v350 + 40) = 0x800000023AC45450;
  *(void *)(v349 + 32) = v350;
  *(unsigned char *)(v349 + 40) = 0;
  uint64_t v351 = swift_allocObject();
  *(_OWORD *)(v351 + 16) = xmmword_23AC2C700;
  *(void *)(v351 + 32) = 0xD00000000000002CLL;
  *(void *)(v351 + 40) = 0x800000023AC45480;
  *(unsigned char *)(v351 + 48) = 0;
  uint64_t v352 = swift_allocObject();
  *(_OWORD *)(v352 + 16) = xmmword_23AC2C700;
  *(void *)(v352 + 32) = 0xD00000000000002DLL;
  *(void *)(v352 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v352 + 48) = 0;
  uint64_t v353 = swift_allocObject();
  *(_OWORD *)(v353 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v353 + 32) = 84017408;
  *(unsigned char *)(v353 + 36) = 8;
  uint64_t v1025 = sub_23AB60324(v353, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1019 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1019 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v354 = swift_allocObject();
  *(_OWORD *)(v354 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v354 + 32) = 3;
  uint64_t v355 = sub_23AB60324(v354, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v356 = swift_allocObject();
  *(_OWORD *)(v356 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v356 + 32) = 30;
  uint64_t v357 = sub_23AB60324(v356, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v358.value._object = (void *)0x800000023AC454D0;
  v358.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v358, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v359 = sub_23ABB8BA8();
  char v360 = sub_23ABBFBE0();
  uint64_t v361 = sub_23ABBFBE8();
  *((void *)&v973 + 1) = v355;
  *(void *)&long long v973 = v1019;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC454B0, v349, v351, v352, v359 & 1, v360 & 1, v1025, (uint64_t)v1149._rawValue + 4288, v973, v361, v357, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v362 = swift_allocObject();
  *(_OWORD *)(v362 + 16) = xmmword_23AC2C700;
  uint64_t v363 = swift_allocObject();
  *(_OWORD *)(v363 + 16) = xmmword_23AC2C700;
  *(void *)(v363 + 32) = 0xD000000000000020;
  *(void *)(v363 + 40) = 0x800000023AC454F0;
  *(void *)(v362 + 32) = v363;
  *(unsigned char *)(v362 + 40) = 0;
  uint64_t v364 = swift_allocObject();
  *(_OWORD *)(v364 + 16) = xmmword_23AC2C700;
  *(void *)(v364 + 32) = 0xD00000000000002BLL;
  *(void *)(v364 + 40) = 0x800000023AC45520;
  *(unsigned char *)(v364 + 48) = 0;
  uint64_t v365 = swift_allocObject();
  *(_OWORD *)(v365 + 16) = xmmword_23AC2C700;
  *(void *)(v365 + 32) = 0xD00000000000002DLL;
  *(void *)(v365 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v365 + 48) = 0;
  uint64_t v366 = swift_allocObject();
  *(_OWORD *)(v366 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v366 + 32) = 84017408;
  *(unsigned char *)(v366 + 36) = 8;
  uint64_t v1041 = sub_23AB60324(v366, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1033 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1033 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v367 = swift_allocObject();
  *(_OWORD *)(v367 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v367 + 32) = 3;
  uint64_t v368 = sub_23AB60324(v367, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v369 = swift_allocObject();
  *(_OWORD *)(v369 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v369 + 32) = 30;
  uint64_t v370 = sub_23AB60324(v369, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v371.value._object = (void *)0x800000023AC45570;
  v371.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v371, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v372 = sub_23ABB8BA8();
  char v373 = sub_23ABBFBE0();
  uint64_t v374 = sub_23ABBFBE8();
  *((void *)&v974 + 1) = v368;
  *(void *)&long long v974 = v1033;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC45550, v362, v364, v365, v372 & 1, v373 & 1, v1041, (uint64_t)v1149._rawValue + 4440, v974, v374, v370, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v375 = swift_allocObject();
  *(_OWORD *)(v375 + 16) = xmmword_23AC2C700;
  uint64_t v376 = swift_allocObject();
  *(_OWORD *)(v376 + 16) = xmmword_23AC2C700;
  *(void *)(v376 + 32) = 0xD00000000000001FLL;
  *(void *)(v376 + 40) = 0x800000023AC45590;
  *(void *)(v375 + 32) = v376;
  *(unsigned char *)(v375 + 40) = 0;
  uint64_t v377 = swift_allocObject();
  *(_OWORD *)(v377 + 16) = xmmword_23AC2C700;
  *(void *)(v377 + 32) = 0xD000000000000014;
  *(void *)(v377 + 40) = 0x800000023AC455B0;
  *(unsigned char *)(v377 + 48) = 0;
  uint64_t v378 = swift_allocObject();
  *(_OWORD *)(v378 + 16) = xmmword_23AC2C700;
  *(void *)(v378 + 32) = 0xD00000000000002DLL;
  *(void *)(v378 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v378 + 48) = 0;
  uint64_t v379 = swift_allocObject();
  *(_OWORD *)(v379 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v379 + 32) = 2;
  uint64_t v1026 = sub_23AB60324(v379, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1020 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1020 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v380 = swift_allocObject();
  *(_OWORD *)(v380 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v380 + 32) = 84082944;
  *(unsigned char *)(v380 + 36) = 8;
  uint64_t v381 = sub_23AB60324(v380, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v382 = swift_allocObject();
  *(_OWORD *)(v382 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v382 + 32) = 30;
  uint64_t v383 = sub_23AB60324(v382, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v384.value._countAndFlagsBits = 0x7463656C65536F76;
  v384.value._object = (void *)0xEF7070417478654ELL;
  Action.init(_:mac:)(v384, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v385 = sub_23ABB8BA8();
  char v386 = sub_23ABBFBE0();
  uint64_t v387 = sub_23ABBFBE8();
  *((void *)&v975 + 1) = v381;
  *(void *)&long long v975 = v1020;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC455D0, v375, v377, v378, v385 & 1, v386 & 1, v1026, (uint64_t)v1149._rawValue + 4592, v975, v387, v383, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v388 = swift_allocObject();
  *(_OWORD *)(v388 + 16) = xmmword_23AC2C700;
  uint64_t v389 = swift_allocObject();
  *(_OWORD *)(v389 + 16) = xmmword_23AC2C700;
  *(void *)(v389 + 32) = 0xD00000000000001ALL;
  *(void *)(v389 + 40) = 0x800000023AC455F0;
  *(void *)(v388 + 32) = v389;
  *(unsigned char *)(v388 + 40) = 0;
  uint64_t v390 = swift_allocObject();
  *(_OWORD *)(v390 + 16) = xmmword_23AC2C700;
  *(void *)(v390 + 32) = 0xD00000000000002BLL;
  *(void *)(v390 + 40) = 0x800000023AC45610;
  *(unsigned char *)(v390 + 48) = 0;
  uint64_t v391 = swift_allocObject();
  *(_OWORD *)(v391 + 16) = xmmword_23AC2C700;
  *(void *)(v391 + 32) = 0xD00000000000002DLL;
  *(void *)(v391 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v391 + 48) = 0;
  uint64_t v392 = swift_allocObject();
  *(_OWORD *)(v392 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v392 + 32) = 84017408;
  *(unsigned char *)(v392 + 36) = 8;
  uint64_t v1034 = sub_23AB60324(v392, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1027 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1027 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v393 = swift_allocObject();
  *(_OWORD *)(v393 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v393 + 32) = 3;
  uint64_t v394 = sub_23AB60324(v393, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v395 = swift_allocObject();
  *(_OWORD *)(v395 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v395 + 32) = 30;
  uint64_t v396 = sub_23AB60324(v395, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v397.value._object = (void *)0x800000023AC45660;
  v397.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v397, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v398 = sub_23ABB8BA8();
  char v399 = sub_23ABBFBE0();
  uint64_t v400 = sub_23ABBFBE8();
  *((void *)&v976 + 1) = v394;
  *(void *)&long long v976 = v1027;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC45640, v388, v390, v391, v398 & 1, v399 & 1, v1034, (uint64_t)v1149._rawValue + 4744, v976, v400, v396, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v401 = swift_allocObject();
  *(_OWORD *)(v401 + 16) = xmmword_23AC2C700;
  uint64_t v402 = swift_allocObject();
  *(_OWORD *)(v402 + 16) = xmmword_23AC2C700;
  *(void *)(v402 + 32) = 0xD00000000000001BLL;
  *(void *)(v402 + 40) = 0x800000023AC45680;
  *(void *)(v401 + 32) = v402;
  *(unsigned char *)(v401 + 40) = 0;
  uint64_t v403 = swift_allocObject();
  *(_OWORD *)(v403 + 16) = xmmword_23AC2C700;
  *(void *)(v403 + 32) = 0xD000000000000074;
  *(void *)(v403 + 40) = 0x800000023AC456A0;
  *(unsigned char *)(v403 + 48) = 0;
  uint64_t v404 = swift_allocObject();
  *(_OWORD *)(v404 + 16) = xmmword_23AC2C700;
  *(void *)(v404 + 32) = 0xD00000000000002DLL;
  *(void *)(v404 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v404 + 48) = 0;
  uint64_t v405 = swift_allocObject();
  *(_OWORD *)(v405 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v405 + 32) = 134545921;
  uint64_t v1035 = sub_23AB60324(v405, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1021 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1021 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v406 = swift_allocObject();
  *(_OWORD *)(v406 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v406 + 32) = 768;
  uint64_t v407 = sub_23AB60324(v406, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v408 = swift_allocObject();
  *(_OWORD *)(v408 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v408 + 32) = 30;
  uint64_t v409 = sub_23AB60324(v408, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v410.value._object = (void *)0x800000023AC45740;
  v410.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v410, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v411 = sub_23ABB8BA8();
  char v412 = sub_23ABBFBE0();
  uint64_t v413 = sub_23ABBFBE8();
  *((void *)&v977 + 1) = v407;
  *(void *)&long long v977 = v1021;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC45720, v401, v403, v404, v411 & 1, v412 & 1, v1035, (uint64_t)v1149._rawValue + 4896, v977, v413, v409, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v414 = swift_allocObject();
  *(_OWORD *)(v414 + 16) = xmmword_23AC2C700;
  uint64_t v415 = swift_allocObject();
  *(_OWORD *)(v415 + 16) = xmmword_23AC2C700;
  *(void *)(v415 + 32) = 0xD000000000000022;
  *(void *)(v415 + 40) = 0x800000023AC45760;
  *(void *)(v414 + 32) = v415;
  *(unsigned char *)(v414 + 40) = 0;
  uint64_t v416 = swift_allocObject();
  *(_OWORD *)(v416 + 16) = xmmword_23AC2C700;
  *(void *)(v416 + 32) = 0xD000000000000066;
  *(void *)(v416 + 40) = 0x800000023AC45790;
  *(unsigned char *)(v416 + 48) = 0;
  uint64_t v417 = swift_allocObject();
  *(_OWORD *)(v417 + 16) = xmmword_23AC2C700;
  *(void *)(v417 + 32) = 0xD00000000000002DLL;
  *(void *)(v417 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v417 + 48) = 0;
  uint64_t v418 = swift_allocObject();
  *(_OWORD *)(v418 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v418 + 32) = 134545921;
  uint64_t v1028 = sub_23AB60324(v418, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1022 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1022 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v419 = swift_allocObject();
  *(_OWORD *)(v419 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v419 + 32) = 768;
  uint64_t v420 = sub_23AB60324(v419, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v421 = swift_allocObject();
  *(_OWORD *)(v421 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v421 + 32) = 30;
  uint64_t v422 = sub_23AB60324(v421, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v423.value._object = (void *)0x800000023AC45820;
  v423.value._countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v423, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v424 = sub_23ABB8BA8();
  char v425 = sub_23ABBFBE0();
  uint64_t v426 = sub_23ABBFBE8();
  *((void *)&v978 + 1) = v420;
  *(void *)&long long v978 = v1022;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC45800, v414, v416, v417, v424 & 1, v425 & 1, v1028, (uint64_t)v1149._rawValue + 5048, v978, v426, v422, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v427 = swift_allocObject();
  *(_OWORD *)(v427 + 16) = xmmword_23AC2C700;
  uint64_t v428 = swift_allocObject();
  *(_OWORD *)(v428 + 16) = xmmword_23AC2C700;
  *(void *)(v428 + 32) = 0xD000000000000023;
  *(void *)(v428 + 40) = 0x800000023AC45840;
  *(void *)(v427 + 32) = v428;
  *(unsigned char *)(v427 + 40) = 0;
  uint64_t v429 = swift_allocObject();
  *(_OWORD *)(v429 + 16) = xmmword_23AC2C700;
  *(void *)(v429 + 32) = 0xD000000000000014;
  *(void *)(v429 + 40) = 0x800000023AC45870;
  *(unsigned char *)(v429 + 48) = 0;
  uint64_t v430 = swift_allocObject();
  *(_OWORD *)(v430 + 16) = xmmword_23AC2C700;
  *(void *)(v430 + 32) = 0xD00000000000002DLL;
  *(void *)(v430 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v430 + 48) = 0;
  uint64_t v431 = swift_allocObject();
  *(_OWORD *)(v431 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v431 + 32) = 2;
  uint64_t v1023 = sub_23AB60324(v431, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1018 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1018 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v432 = swift_allocObject();
  *(_OWORD *)(v432 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v432 + 32) = 84082944;
  *(unsigned char *)(v432 + 36) = 8;
  uint64_t v433 = sub_23AB60324(v432, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v434 = swift_allocObject();
  *(_OWORD *)(v434 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v434 + 32) = 30;
  uint64_t v435 = sub_23AB60324(v434, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v436.value._object = (void *)0x800000023AC458B0;
  v436.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v436, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v437 = sub_23ABB8BA8();
  char v438 = sub_23ABBFBE0();
  uint64_t v439 = sub_23ABBFBE8();
  *((void *)&v979 + 1) = v433;
  *(void *)&long long v979 = v1018;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC45890, v427, v429, v430, v437 & 1, v438 & 1, v1023, (uint64_t)v1149._rawValue + 5200, v979, v439, v435, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v440 = swift_allocObject();
  *(_OWORD *)(v440 + 16) = xmmword_23AC2C700;
  uint64_t v441 = swift_allocObject();
  *(_OWORD *)(v441 + 16) = xmmword_23AC2C700;
  *(void *)(v441 + 32) = 0xD00000000000001ELL;
  *(void *)(v441 + 40) = 0x800000023AC458D0;
  *(void *)(v440 + 32) = v441;
  *(unsigned char *)(v440 + 40) = 0;
  uint64_t v442 = swift_allocObject();
  *(_OWORD *)(v442 + 16) = xmmword_23AC2C700;
  *(void *)(v442 + 32) = 0xD00000000000002FLL;
  *(void *)(v442 + 40) = 0x800000023AC458F0;
  *(unsigned char *)(v442 + 48) = 0;
  uint64_t v443 = swift_allocObject();
  *(_OWORD *)(v443 + 16) = xmmword_23AC2C700;
  *(void *)(v443 + 32) = 0xD00000000000002DLL;
  *(void *)(v443 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v443 + 48) = 0;
  uint64_t v444 = swift_allocObject();
  *(_OWORD *)(v444 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v444 + 32) = 84017408;
  *(unsigned char *)(v444 + 36) = 8;
  uint64_t v1042 = sub_23AB60324(v444, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1029 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1029 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v445 = swift_allocObject();
  *(_OWORD *)(v445 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v445 + 32) = 3;
  uint64_t v446 = sub_23AB60324(v445, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v447 = swift_allocObject();
  *(_OWORD *)(v447 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v447 + 32) = 30;
  uint64_t v448 = sub_23AB60324(v447, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v449.value._object = (void *)0x800000023AC45940;
  v449.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v449, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v450 = sub_23ABB8BA8();
  char v451 = sub_23ABBFBE0();
  uint64_t v452 = sub_23ABBFBE8();
  *((void *)&v980 + 1) = v446;
  *(void *)&long long v980 = v1029;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC45920, v440, v442, v443, v450 & 1, v451 & 1, v1042, (uint64_t)v1149._rawValue + 5352, v980, v452, v448, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v453 = swift_allocObject();
  *(_OWORD *)(v453 + 16) = xmmword_23AC2C700;
  uint64_t v454 = swift_allocObject();
  *(_OWORD *)(v454 + 16) = xmmword_23AC2C700;
  *(void *)(v454 + 32) = 0xD00000000000001FLL;
  *(void *)(v454 + 40) = 0x800000023AC45960;
  *(void *)(v453 + 32) = v454;
  *(unsigned char *)(v453 + 40) = 0;
  uint64_t v455 = swift_allocObject();
  *(_OWORD *)(v455 + 16) = xmmword_23AC2C700;
  *(void *)(v455 + 32) = 0xD000000000000075;
  *(void *)(v455 + 40) = 0x800000023AC45980;
  *(unsigned char *)(v455 + 48) = 0;
  uint64_t v456 = swift_allocObject();
  *(_OWORD *)(v456 + 16) = xmmword_23AC2C700;
  *(void *)(v456 + 32) = 0xD00000000000002DLL;
  *(void *)(v456 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v456 + 48) = 0;
  uint64_t v457 = swift_allocObject();
  *(_OWORD *)(v457 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v457 + 32) = 134545921;
  uint64_t v1030 = sub_23AB60324(v457, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1024 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1024 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v458 = swift_allocObject();
  *(_OWORD *)(v458 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v458 + 32) = 768;
  uint64_t v459 = sub_23AB60324(v458, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v460 = swift_allocObject();
  *(_OWORD *)(v460 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v460 + 32) = 30;
  uint64_t v461 = sub_23AB60324(v460, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v462.value._object = (void *)0x800000023AC45A20;
  v462.value._countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v462, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v463 = sub_23ABB8BA8();
  char v464 = sub_23ABBFBE0();
  uint64_t v465 = sub_23ABBFBE8();
  *((void *)&v981 + 1) = v459;
  *(void *)&long long v981 = v1024;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC45A00, v453, v455, v456, v463 & 1, v464 & 1, v1030, (uint64_t)v1149._rawValue + 5504, v981, v465, v461, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v466 = swift_allocObject();
  *(_OWORD *)(v466 + 16) = xmmword_23AC2C700;
  uint64_t v467 = swift_allocObject();
  *(_OWORD *)(v467 + 16) = xmmword_23AC2C700;
  *(void *)(v467 + 32) = 0xD000000000000026;
  *(void *)(v467 + 40) = 0x800000023AC45A40;
  *(void *)(v466 + 32) = v467;
  *(unsigned char *)(v466 + 40) = 0;
  uint64_t v468 = swift_allocObject();
  *(_OWORD *)(v468 + 16) = xmmword_23AC2C700;
  *(void *)(v468 + 32) = 0xD000000000000066;
  *(void *)(v468 + 40) = 0x800000023AC45790;
  *(unsigned char *)(v468 + 48) = 0;
  uint64_t v469 = swift_allocObject();
  *(_OWORD *)(v469 + 16) = xmmword_23AC2C700;
  *(void *)(v469 + 32) = 0xD00000000000002DLL;
  *(void *)(v469 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v469 + 48) = 0;
  uint64_t v470 = swift_allocObject();
  *(_OWORD *)(v470 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v470 + 32) = 134545921;
  uint64_t v1065 = sub_23AB60324(v470, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1031 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1031 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v471 = swift_allocObject();
  *(_OWORD *)(v471 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v471 + 32) = 768;
  uint64_t v472 = sub_23AB60324(v471, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v473 = swift_allocObject();
  *(_OWORD *)(v473 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v473 + 32) = 30;
  uint64_t v474 = sub_23AB60324(v473, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v475.value._object = (void *)0x800000023AC45AA0;
  v475.value._countAndFlagsBits = 0xD00000000000001BLL;
  Action.init(_:mac:)(v475, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v476 = sub_23ABB8BA8();
  char v477 = sub_23ABBFBE0();
  uint64_t v478 = sub_23ABBFBE8();
  *((void *)&v982 + 1) = v472;
  *(void *)&long long v982 = v1031;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC45A70, v466, v468, v469, v476 & 1, v477 & 1, v1065, (uint64_t)v1149._rawValue + 5656, v982, v478, v474, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v479 = swift_allocObject();
  *(_OWORD *)(v479 + 16) = xmmword_23AC2C700;
  uint64_t v480 = swift_allocObject();
  *(_OWORD *)(v480 + 16) = xmmword_23AC2C700;
  *(void *)(v480 + 32) = 0xD00000000000001BLL;
  *(void *)(v480 + 40) = 0x800000023AC45AC0;
  *(void *)(v479 + 32) = v480;
  *(unsigned char *)(v479 + 40) = 0;
  uint64_t v481 = swift_allocObject();
  *(_OWORD *)(v481 + 16) = xmmword_23AC2C700;
  *(void *)(v481 + 32) = 0xD00000000000002CLL;
  *(void *)(v481 + 40) = 0x800000023AC45AE0;
  *(unsigned char *)(v481 + 48) = 0;
  uint64_t v482 = swift_allocObject();
  *(_OWORD *)(v482 + 16) = xmmword_23AC2C700;
  *(void *)(v482 + 32) = 0xD00000000000002DLL;
  *(void *)(v482 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v482 + 48) = 0;
  uint64_t v483 = swift_allocObject();
  *(_OWORD *)(v483 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v483 + 32) = 134545921;
  uint64_t v1080 = sub_23AB60324(v483, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1064 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1064 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v484 = swift_allocObject();
  *(_OWORD *)(v484 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v484 + 32) = 768;
  uint64_t v485 = sub_23AB60324(v484, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v486 = swift_allocObject();
  *(_OWORD *)(v486 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v486 + 32) = 30;
  uint64_t v487 = sub_23AB60324(v486, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v488.value._object = (void *)0x800000023AC45B30;
  v488.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v488, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v489 = sub_23ABB8BA8();
  char v490 = sub_23ABBFBE0();
  uint64_t v491 = sub_23ABBFBE8();
  *((void *)&v983 + 1) = v485;
  *(void *)&long long v983 = v1064;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC45B10, v479, v481, v482, v489 & 1, v490 & 1, v1080, (uint64_t)v1149._rawValue + 5808, v983, v491, v487, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v492 = swift_allocObject();
  *(_OWORD *)(v492 + 16) = xmmword_23AC2C700;
  uint64_t v493 = swift_allocObject();
  *(_OWORD *)(v493 + 16) = xmmword_23AC2C700;
  *(void *)(v493 + 32) = 0xD00000000000001DLL;
  *(void *)(v493 + 40) = 0x800000023AC45B50;
  *(void *)(v492 + 32) = v493;
  *(unsigned char *)(v492 + 40) = 0;
  uint64_t v494 = swift_allocObject();
  *(_OWORD *)(v494 + 16) = xmmword_23AC2C700;
  *(void *)(v494 + 32) = 0xD000000000000016;
  *(void *)(v494 + 40) = 0x800000023AC45B70;
  *(unsigned char *)(v494 + 48) = 0;
  uint64_t v495 = swift_allocObject();
  *(_OWORD *)(v495 + 16) = xmmword_23AC2C700;
  *(void *)(v495 + 32) = 0xD00000000000002DLL;
  *(void *)(v495 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v495 + 48) = 0;
  uint64_t v496 = swift_allocObject();
  *(_OWORD *)(v496 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v496 + 32) = 84017408;
  *(unsigned char *)(v496 + 36) = 8;
  uint64_t v1132 = sub_23AB60324(v496, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1066 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1066 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v497 = swift_allocObject();
  *(_OWORD *)(v497 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v497 + 32) = 3;
  uint64_t v498 = sub_23AB60324(v497, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v499 = swift_allocObject();
  *(_OWORD *)(v499 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v499 + 32) = 30;
  uint64_t v500 = sub_23AB60324(v499, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v501.value._object = (void *)0x800000023AC45BB0;
  v502.value._object = (void *)0x800000023AC45BD0;
  v501.value._countAndFlagsBits = 0xD000000000000011;
  v502.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v501, v502);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v503 = sub_23ABB8BA8();
  char v504 = sub_23ABBFBE0();
  uint64_t v505 = sub_23ABBFBE8();
  *((void *)&v984 + 1) = v498;
  *(void *)&long long v984 = v1066;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC45B90, v492, v494, v495, v503 & 1, v504 & 1, v1132, (uint64_t)v1149._rawValue + 5960, v984, v505, v500, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v506 = swift_allocObject();
  *(_OWORD *)(v506 + 16) = xmmword_23AC2C700;
  uint64_t v507 = swift_allocObject();
  *(_OWORD *)(v507 + 16) = xmmword_23AC2C700;
  *(void *)(v507 + 32) = 0xD000000000000017;
  *(void *)(v507 + 40) = 0x800000023AC45BF0;
  *(void *)(v506 + 32) = v507;
  *(unsigned char *)(v506 + 40) = 0;
  uint64_t v508 = swift_allocObject();
  *(_OWORD *)(v508 + 16) = xmmword_23AC2C700;
  *(void *)(v508 + 32) = 0xD000000000000025;
  *(void *)(v508 + 40) = 0x800000023AC45C10;
  *(unsigned char *)(v508 + 48) = 0;
  uint64_t v509 = swift_allocObject();
  *(_OWORD *)(v509 + 16) = xmmword_23AC2C700;
  *(void *)(v509 + 32) = 0xD00000000000002DLL;
  *(void *)(v509 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v509 + 48) = 0;
  uint64_t v510 = swift_allocObject();
  *(_OWORD *)(v510 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v510 + 32) = 84017408;
  *(unsigned char *)(v510 + 36) = 8;
  uint64_t v1067 = sub_23AB60324(v510, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1043 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1043 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v511 = swift_allocObject();
  *(_OWORD *)(v511 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v511 + 32) = 3;
  uint64_t v512 = sub_23AB60324(v511, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v513 = swift_allocObject();
  *(_OWORD *)(v513 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v513 + 32) = 30;
  uint64_t v514 = sub_23AB60324(v513, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v515.value._object = (void *)0x800000023AC45C60;
  v516.value._countAndFlagsBits = 0x536B616570536F76;
  v516.value._object = (void *)0xEE007972616D6D75;
  v515.value._countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v516, v515);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v517 = sub_23ABB8BA8();
  char v518 = sub_23ABBFBE0();
  uint64_t v519 = sub_23ABBFBE8();
  *((void *)&v985 + 1) = v512;
  *(void *)&long long v985 = v1043;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC45C40, v506, v508, v509, v517 & 1, v518 & 1, v1067, (uint64_t)v1149._rawValue + 6112, v985, v519, v514, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v520 = swift_allocObject();
  *(_OWORD *)(v520 + 16) = xmmword_23AC2C700;
  uint64_t v521 = swift_allocObject();
  *(_OWORD *)(v521 + 16) = xmmword_23AC2C700;
  *(void *)(v521 + 32) = 0xD000000000000017;
  *(void *)(v521 + 40) = 0x800000023AC45C80;
  *(void *)(v520 + 32) = v521;
  *(unsigned char *)(v520 + 40) = 0;
  uint64_t v522 = swift_allocObject();
  *(_OWORD *)(v522 + 16) = xmmword_23AC2C700;
  *(void *)(v522 + 32) = 0xD00000000000001DLL;
  *(void *)(v522 + 40) = 0x800000023AC45CA0;
  *(unsigned char *)(v522 + 48) = 0;
  uint64_t v523 = swift_allocObject();
  *(_OWORD *)(v523 + 16) = xmmword_23AC2C700;
  *(void *)(v523 + 32) = 0xD00000000000002DLL;
  *(void *)(v523 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v523 + 48) = 0;
  uint64_t v524 = swift_allocObject();
  *(_OWORD *)(v524 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v524 + 32) = 84017408;
  *(unsigned char *)(v524 + 36) = 8;
  uint64_t v1084 = sub_23AB60324(v524, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1081 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1081 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v525 = swift_allocObject();
  *(_OWORD *)(v525 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v525 + 32) = 3;
  uint64_t v526 = sub_23AB60324(v525, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v527 = swift_allocObject();
  *(_OWORD *)(v527 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v527 + 32) = 30;
  uint64_t v528 = sub_23AB60324(v527, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v529.value._countAndFlagsBits = 0x7053706F74536F76;
  v529.value._object = (void *)0xEE00676E696B6165;
  v530.value._countAndFlagsBits = 0x6C65636E61436F76;
  v530.value._object = (void *)0xEE00686365657053;
  Action.init(_:mac:)(v529, v530);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v531 = sub_23ABB8BA8();
  char v532 = sub_23ABBFBE0();
  uint64_t v533 = sub_23ABBFBE8();
  *((void *)&v986 + 1) = v526;
  *(void *)&long long v986 = v1081;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC45CC0, v520, v522, v523, v531 & 1, v532 & 1, v1084, (uint64_t)v1149._rawValue + 6264, v986, v533, v528, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v534 = swift_allocObject();
  *(_OWORD *)(v534 + 16) = xmmword_23AC2C700;
  uint64_t v535 = swift_allocObject();
  *(_OWORD *)(v535 + 16) = xmmword_23AC2C700;
  *(void *)(v535 + 32) = 0xD000000000000021;
  *(void *)(v535 + 40) = 0x800000023AC45CE0;
  *(void *)(v534 + 32) = v535;
  *(unsigned char *)(v534 + 40) = 0;
  uint64_t v536 = swift_allocObject();
  *(_OWORD *)(v536 + 16) = xmmword_23AC2C700;
  *(void *)(v536 + 32) = 0xD000000000000022;
  *(void *)(v536 + 40) = 0x800000023AC45D10;
  *(unsigned char *)(v536 + 48) = 0;
  uint64_t v537 = swift_allocObject();
  *(_OWORD *)(v537 + 16) = xmmword_23AC2C700;
  *(void *)(v537 + 32) = 0xD00000000000002DLL;
  *(void *)(v537 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v537 + 48) = 0;
  uint64_t v538 = swift_allocObject();
  *(_OWORD *)(v538 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v538 + 32) = 513;
  *(unsigned char *)(v538 + 34) = 5;
  uint64_t v1068 = sub_23AB60324(v538, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1044 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1044 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v539 = swift_allocObject();
  *(_OWORD *)(v539 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v539 + 32) = 768;
  *(unsigned char *)(v539 + 34) = 8;
  uint64_t v540 = sub_23AB60324(v539, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v541 = swift_allocObject();
  *(_OWORD *)(v541 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v541 + 32) = 30;
  uint64_t v542 = sub_23AB60324(v541, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v543.value._object = (void *)0x800000023AC45D60;
  v543.value._countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v543, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v544 = sub_23ABB8BA8();
  char v545 = sub_23ABBFBE0();
  uint64_t v546 = sub_23ABBFBE8();
  *((void *)&v987 + 1) = v540;
  *(void *)&long long v987 = v1044;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC45D40, v534, v536, v537, v544 & 1, v545 & 1, v1068, (uint64_t)v1149._rawValue + 6416, v987, v546, v542, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v547 = swift_allocObject();
  *(_OWORD *)(v547 + 16) = xmmword_23AC2C700;
  uint64_t v548 = swift_allocObject();
  *(_OWORD *)(v548 + 16) = xmmword_23AC2C700;
  *(void *)(v548 + 32) = 0xD00000000000001BLL;
  *(void *)(v548 + 40) = 0x800000023AC45D80;
  *(void *)(v547 + 32) = v548;
  *(unsigned char *)(v547 + 40) = 0;
  uint64_t v549 = swift_allocObject();
  *(_OWORD *)(v549 + 16) = xmmword_23AC2C700;
  *(void *)(v549 + 32) = 0xD000000000000033;
  *(void *)(v549 + 40) = 0x800000023AC45DA0;
  *(unsigned char *)(v549 + 48) = 0;
  uint64_t v550 = swift_allocObject();
  *(_OWORD *)(v550 + 16) = xmmword_23AC2C700;
  *(void *)(v550 + 32) = 0xD000000000000028;
  *(void *)(v550 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v550 + 48) = 0;
  uint64_t v551 = swift_allocObject();
  *(_OWORD *)(v551 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v551 + 32) = 513;
  *(unsigned char *)(v551 + 34) = 5;
  uint64_t v1036 = sub_23AB60324(v551, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v552 = swift_allocObject();
  *(_OWORD *)(v552 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v552 + 32) = 8;
  uint64_t v553 = sub_23AB60324(v552, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v554 = swift_allocObject();
  *(_OWORD *)(v554 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v554 + 32) = 768;
  uint64_t v555 = sub_23AB60324(v554, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v556 = swift_allocObject();
  *(_OWORD *)(v556 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v556 + 32) = 31;
  uint64_t v557 = sub_23AB60324(v556, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v558.value._object = (void *)0x800000023AC45E30;
  v558.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v558, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v559 = sub_23ABB8BA8();
  char v560 = sub_23ABBFBE0();
  uint64_t v561 = sub_23ABBFBE8();
  *((void *)&v988 + 1) = v555;
  *(void *)&long long v988 = v553;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC45E10, v547, v549, v550, v559 & 1, v560 & 1, v1036, (uint64_t)v1149._rawValue + 6568, v988, v561, v557, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v562 = swift_allocObject();
  *(_OWORD *)(v562 + 16) = xmmword_23AC2C700;
  uint64_t v563 = swift_allocObject();
  *(_OWORD *)(v563 + 16) = xmmword_23AC2C700;
  *(void *)(v563 + 32) = 0xD00000000000001BLL;
  *(void *)(v563 + 40) = 0x800000023AC45E50;
  *(void *)(v562 + 32) = v563;
  *(unsigned char *)(v562 + 40) = 0;
  uint64_t v564 = swift_allocObject();
  *(_OWORD *)(v564 + 16) = xmmword_23AC2C700;
  *(void *)(v564 + 32) = 0xD000000000000033;
  *(void *)(v564 + 40) = 0x800000023AC45E70;
  *(unsigned char *)(v564 + 48) = 0;
  uint64_t v565 = swift_allocObject();
  *(_OWORD *)(v565 + 16) = xmmword_23AC2C700;
  *(void *)(v565 + 32) = 0xD000000000000028;
  *(void *)(v565 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v565 + 48) = 0;
  uint64_t v566 = swift_allocObject();
  *(_OWORD *)(v566 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v566 + 32) = 513;
  *(unsigned char *)(v566 + 34) = 5;
  uint64_t v1045 = sub_23AB60324(v566, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v567 = swift_allocObject();
  *(_OWORD *)(v567 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v567 + 32) = 8;
  uint64_t v1037 = sub_23AB60324(v567, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v568 = swift_allocObject();
  *(_OWORD *)(v568 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v568 + 32) = 768;
  uint64_t v569 = sub_23AB60324(v568, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v570 = swift_allocObject();
  *(_OWORD *)(v570 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v570 + 32) = 31;
  uint64_t v571 = sub_23AB60324(v570, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v572.value._object = (void *)0x800000023AC45ED0;
  v572.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v572, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v573 = sub_23ABB8BA8();
  LOBYTE(v553) = sub_23ABBFBE0();
  uint64_t v574 = sub_23ABBFBE8();
  *((void *)&v989 + 1) = v569;
  *(void *)&long long v989 = v1037;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC45EB0, v562, v564, v565, v573 & 1, v553 & 1, v1045, (uint64_t)v1149._rawValue + 6720, v989, v574, v571, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v575 = swift_allocObject();
  *(_OWORD *)(v575 + 16) = xmmword_23AC2C700;
  uint64_t v576 = swift_allocObject();
  *(_OWORD *)(v576 + 16) = xmmword_23AC2C700;
  *(void *)(v576 + 32) = 0xD00000000000001BLL;
  *(void *)(v576 + 40) = 0x800000023AC45EF0;
  *(void *)(v575 + 32) = v576;
  *(unsigned char *)(v575 + 40) = 0;
  uint64_t v577 = swift_allocObject();
  *(_OWORD *)(v577 + 16) = xmmword_23AC2C700;
  *(void *)(v577 + 32) = 0xD00000000000002CLL;
  *(void *)(v577 + 40) = 0x800000023AC45F10;
  *(unsigned char *)(v577 + 48) = 0;
  uint64_t v578 = swift_allocObject();
  *(_OWORD *)(v578 + 16) = xmmword_23AC2C700;
  *(void *)(v578 + 32) = 0xD000000000000028;
  *(void *)(v578 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v578 + 48) = 0;
  uint64_t v579 = swift_allocObject();
  *(_OWORD *)(v579 + 16) = xmmword_23AC2C730;
  *(_WORD *)(v579 + 32) = 513;
  *(unsigned char *)(v579 + 34) = 5;
  uint64_t v1046 = sub_23AB60324(v579, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v580 = swift_allocObject();
  *(_OWORD *)(v580 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v580 + 32) = 8;
  uint64_t v1038 = sub_23AB60324(v580, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v581 = swift_allocObject();
  *(_OWORD *)(v581 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v581 + 32) = 768;
  uint64_t v582 = sub_23AB60324(v581, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v583 = swift_allocObject();
  *(_OWORD *)(v583 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v583 + 32) = 31;
  uint64_t v584 = sub_23AB60324(v583, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v585.value._object = (void *)0x800000023AC45F60;
  v585.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v585, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v586 = sub_23ABB8BA8();
  LOBYTE(v553) = sub_23ABBFBE0();
  uint64_t v587 = sub_23ABBFBE8();
  *((void *)&v990 + 1) = v582;
  *(void *)&long long v990 = v1038;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC45F40, v575, v577, v578, v586 & 1, v553 & 1, v1046, (uint64_t)v1149._rawValue + 6872, v990, v587, v584, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v588 = swift_allocObject();
  *(_OWORD *)(v588 + 16) = xmmword_23AC2C700;
  uint64_t v589 = swift_allocObject();
  *(_OWORD *)(v589 + 16) = xmmword_23AC2C700;
  *(void *)(v589 + 32) = 0xD00000000000001BLL;
  *(void *)(v589 + 40) = 0x800000023AC45F80;
  *(void *)(v588 + 32) = v589;
  *(unsigned char *)(v588 + 40) = 0;
  uint64_t v590 = swift_allocObject();
  *(_OWORD *)(v590 + 16) = xmmword_23AC2C700;
  *(void *)(v590 + 32) = 0xD00000000000002BLL;
  *(void *)(v590 + 40) = 0x800000023AC45FA0;
  *(unsigned char *)(v590 + 48) = 0;
  uint64_t v591 = swift_allocObject();
  *(_OWORD *)(v591 + 16) = xmmword_23AC2C700;
  *(void *)(v591 + 32) = 0xD000000000000028;
  *(void *)(v591 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v591 + 48) = 0;
  uint64_t v592 = swift_allocObject();
  *(_OWORD *)(v592 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v592 + 32) = 1;
  *(unsigned char *)(v592 + 33) = 2;
  *(unsigned char *)(v592 + 34) = 5;
  uint64_t v1057 = sub_23AB60324(v592, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v593 = swift_allocObject();
  *(_OWORD *)(v593 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v593 + 32) = 8;
  uint64_t v1047 = sub_23AB60324(v593, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v594 = swift_allocObject();
  *(_OWORD *)(v594 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v594 + 32) = 0;
  *(unsigned char *)(v594 + 33) = 3;
  uint64_t v595 = sub_23AB60324(v594, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v596 = swift_allocObject();
  *(_OWORD *)(v596 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v596 + 32) = 31;
  uint64_t v597 = sub_23AB60324(v596, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v598.value._object = (void *)0x800000023AC45FF0;
  v598.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v598, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v599 = sub_23ABB8BA8();
  LOBYTE(v553) = sub_23ABBFBE0();
  uint64_t v600 = sub_23ABBFBE8();
  *((void *)&v991 + 1) = v595;
  *(void *)&long long v991 = v1047;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC45FD0, v588, v590, v591, v599 & 1, v553 & 1, v1057, (uint64_t)v1149._rawValue + 7024, v991, v600, v597, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v601 = swift_allocObject();
  *(_OWORD *)(v601 + 16) = xmmword_23AC2C700;
  uint64_t v602 = swift_allocObject();
  *(_OWORD *)(v602 + 16) = xmmword_23AC2C700;
  *(void *)(v602 + 32) = 0x776F64206D6F6F5ALL;
  *(void *)(v602 + 40) = 0xE90000000000006ELL;
  *(void *)(v601 + 32) = v602;
  *(unsigned char *)(v601 + 40) = 0;
  uint64_t v603 = swift_allocObject();
  *(_OWORD *)(v603 + 16) = xmmword_23AC2C700;
  *(void *)(v603 + 32) = 0xD000000000000013;
  *(void *)(v603 + 40) = 0x800000023AC46010;
  *(unsigned char *)(v603 + 48) = 0;
  uint64_t v604 = swift_allocObject();
  *(_OWORD *)(v604 + 16) = xmmword_23AC2C700;
  *(void *)(v604 + 32) = 0xD000000000000028;
  *(void *)(v604 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v604 + 48) = 0;
  uint64_t v605 = swift_allocObject();
  *(_OWORD *)(v605 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v605 + 32) = 1;
  *(unsigned char *)(v605 + 33) = 2;
  *(unsigned char *)(v605 + 34) = 5;
  uint64_t v1058 = sub_23AB60324(v605, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v606 = swift_allocObject();
  *(_OWORD *)(v606 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v606 + 32) = 8;
  uint64_t v1048 = sub_23AB60324(v606, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v607 = swift_allocObject();
  *(_OWORD *)(v607 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v607 + 32) = 0;
  *(unsigned char *)(v607 + 33) = 3;
  uint64_t v608 = sub_23AB60324(v607, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v609 = swift_allocObject();
  *(_OWORD *)(v609 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v609 + 32) = 31;
  uint64_t v610 = sub_23AB60324(v609, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v611.value._countAndFlagsBits = 0x446D6F6F5A6E6170;
  v611.value._object = (void *)0xEB000000006E776FLL;
  Action.init(_:mac:)(v611, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v612 = sub_23ABB8BA8();
  LOBYTE(v553) = sub_23ABBFBE0();
  uint64_t v613 = sub_23ABBFBE8();
  *((void *)&v992 + 1) = v608;
  *(void *)&long long v992 = v1048;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC46030, v601, v603, v604, v612 & 1, v553 & 1, v1058, (uint64_t)v1149._rawValue + 7176, v992, v613, v610, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v614 = swift_allocObject();
  *(_OWORD *)(v614 + 16) = xmmword_23AC2C700;
  uint64_t v615 = swift_allocObject();
  *(_OWORD *)(v615 + 16) = xmmword_23AC2C700;
  *(void *)(v615 + 32) = 0x7075206D6F6F5ALL;
  *(void *)(v615 + 40) = 0xE700000000000000;
  *(void *)(v614 + 32) = v615;
  *(unsigned char *)(v614 + 40) = 0;
  uint64_t v616 = swift_allocObject();
  *(_OWORD *)(v616 + 16) = xmmword_23AC2C700;
  *(void *)(v616 + 32) = 0xD000000000000011;
  *(void *)(v616 + 40) = 0x800000023AC46050;
  *(unsigned char *)(v616 + 48) = 0;
  uint64_t v617 = swift_allocObject();
  *(_OWORD *)(v617 + 16) = xmmword_23AC2C700;
  *(void *)(v617 + 32) = 0xD000000000000028;
  *(void *)(v617 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v617 + 48) = 0;
  uint64_t v618 = swift_allocObject();
  *(_OWORD *)(v618 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v618 + 32) = 1;
  *(unsigned char *)(v618 + 33) = 2;
  *(unsigned char *)(v618 + 34) = 5;
  uint64_t v1059 = sub_23AB60324(v618, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v619 = swift_allocObject();
  *(_OWORD *)(v619 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v619 + 32) = 8;
  uint64_t v1049 = sub_23AB60324(v619, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v620 = swift_allocObject();
  *(_OWORD *)(v620 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v620 + 32) = 0;
  *(unsigned char *)(v620 + 33) = 3;
  uint64_t v621 = sub_23AB60324(v620, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v622 = swift_allocObject();
  *(_OWORD *)(v622 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v622 + 32) = 31;
  uint64_t v623 = sub_23AB60324(v622, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v624.value._object = (void *)0xE900000000000070;
  v624.value._countAndFlagsBits = 0x556D6F6F5A6E6170;
  Action.init(_:mac:)(v624, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v625 = sub_23ABB8BA8();
  LOBYTE(v553) = sub_23ABBFBE0();
  uint64_t v626 = sub_23ABBFBE8();
  *((void *)&v993 + 1) = v621;
  *(void *)&long long v993 = v1049;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000010, 0x800000023AC46070, v614, v616, v617, v625 & 1, v553 & 1, v1059, (uint64_t)v1149._rawValue + 7328, v993, v626, v623, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v627 = swift_allocObject();
  *(_OWORD *)(v627 + 16) = xmmword_23AC2C700;
  uint64_t v628 = swift_allocObject();
  *(_OWORD *)(v628 + 16) = xmmword_23AC2C700;
  *(void *)(v628 + 32) = 0x66656C206D6F6F5ALL;
  *(void *)(v628 + 40) = 0xE900000000000074;
  *(void *)(v627 + 32) = v628;
  *(unsigned char *)(v627 + 40) = 0;
  uint64_t v629 = swift_allocObject();
  *(_OWORD *)(v629 + 16) = xmmword_23AC2C700;
  *(void *)(v629 + 32) = 0xD000000000000013;
  *(void *)(v629 + 40) = 0x800000023AC46090;
  *(unsigned char *)(v629 + 48) = 0;
  uint64_t v630 = swift_allocObject();
  *(_OWORD *)(v630 + 16) = xmmword_23AC2C700;
  *(void *)(v630 + 32) = 0xD000000000000028;
  *(void *)(v630 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v630 + 48) = 0;
  uint64_t v631 = swift_allocObject();
  *(_OWORD *)(v631 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v631 + 32) = 1;
  *(unsigned char *)(v631 + 33) = 2;
  *(unsigned char *)(v631 + 34) = 5;
  uint64_t v1060 = sub_23AB60324(v631, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v632 = swift_allocObject();
  *(_OWORD *)(v632 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v632 + 32) = 8;
  uint64_t v1050 = sub_23AB60324(v632, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v633 = swift_allocObject();
  *(_OWORD *)(v633 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v633 + 32) = 0;
  *(unsigned char *)(v633 + 33) = 3;
  uint64_t v634 = sub_23AB60324(v633, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v635 = swift_allocObject();
  *(_OWORD *)(v635 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v635 + 32) = 31;
  uint64_t v636 = sub_23AB60324(v635, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v637.value._countAndFlagsBits = 0x4C6D6F6F5A6E6170;
  v637.value._object = (void *)0xEB00000000746665;
  Action.init(_:mac:)(v637, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v638 = sub_23ABB8BA8();
  LOBYTE(v553) = sub_23ABBFBE0();
  uint64_t v639 = sub_23ABBFBE8();
  *((void *)&v994 + 1) = v634;
  *(void *)&long long v994 = v1050;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC460B0, v627, v629, v630, v638 & 1, v553 & 1, v1060, (uint64_t)v1149._rawValue + 7480, v994, v639, v636, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v640 = swift_allocObject();
  *(_OWORD *)(v640 + 16) = xmmword_23AC2C700;
  uint64_t v641 = swift_allocObject();
  *(_OWORD *)(v641 + 16) = xmmword_23AC2C700;
  *(void *)(v641 + 32) = 0x676972206D6F6F5ALL;
  *(void *)(v641 + 40) = 0xEA00000000007468;
  *(void *)(v640 + 32) = v641;
  *(unsigned char *)(v640 + 40) = 0;
  uint64_t v642 = swift_allocObject();
  *(_OWORD *)(v642 + 16) = xmmword_23AC2C700;
  *(void *)(v642 + 32) = 0xD000000000000014;
  *(void *)(v642 + 40) = 0x800000023AC460D0;
  *(unsigned char *)(v642 + 48) = 0;
  uint64_t v643 = swift_allocObject();
  *(_OWORD *)(v643 + 16) = xmmword_23AC2C700;
  *(void *)(v643 + 32) = 0xD000000000000028;
  *(void *)(v643 + 40) = 0x800000023AC45DE0;
  *(unsigned char *)(v643 + 48) = 0;
  uint64_t v644 = swift_allocObject();
  *(_OWORD *)(v644 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v644 + 32) = 1;
  *(unsigned char *)(v644 + 33) = 2;
  *(unsigned char *)(v644 + 34) = 5;
  uint64_t v1072 = sub_23AB60324(v644, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v645 = swift_allocObject();
  *(_OWORD *)(v645 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v645 + 32) = 8;
  uint64_t v1069 = sub_23AB60324(v645, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v646 = swift_allocObject();
  *(_OWORD *)(v646 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v646 + 32) = 0;
  *(unsigned char *)(v646 + 33) = 3;
  uint64_t v647 = sub_23AB60324(v646, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v648 = swift_allocObject();
  *(_OWORD *)(v648 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v648 + 32) = 31;
  uint64_t v649 = sub_23AB60324(v648, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v650.value._countAndFlagsBits = 0x526D6F6F5A6E6170;
  v650.value._object = (void *)0xEC00000074686769;
  Action.init(_:mac:)(v650, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v651 = sub_23ABB8BA8();
  LOBYTE(v553) = sub_23ABBFBE0();
  uint64_t v652 = sub_23ABBFBE8();
  *((void *)&v995 + 1) = v647;
  *(void *)&long long v995 = v1069;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC460F0, v640, v642, v643, v651 & 1, v553 & 1, v1072, (uint64_t)v1149._rawValue + 7632, v995, v652, v649, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v653 = swift_allocObject();
  *(_OWORD *)(v653 + 16) = xmmword_23AC2C700;
  uint64_t v654 = swift_allocObject();
  *(_OWORD *)(v654 + 16) = xmmword_23AC2C700;
  *(void *)(v654 + 32) = 0xD000000000000012;
  *(void *)(v654 + 40) = 0x800000023AC46110;
  *(void *)(v653 + 32) = v654;
  *(unsigned char *)(v653 + 40) = 0;
  uint64_t v655 = swift_allocObject();
  *(_OWORD *)(v655 + 16) = xmmword_23AC2C700;
  *(void *)(v655 + 32) = 0xD00000000000002ALL;
  *(void *)(v655 + 40) = 0x800000023AC46130;
  *(unsigned char *)(v655 + 48) = 0;
  uint64_t v656 = swift_allocObject();
  *(_OWORD *)(v656 + 16) = xmmword_23AC2C700;
  *(void *)(v656 + 32) = 0xD00000000000003DLL;
  *(void *)(v656 + 40) = 0x800000023AC46160;
  *(unsigned char *)(v656 + 48) = 0;
  uint64_t v657 = swift_allocObject();
  *(_OWORD *)(v657 + 16) = xmmword_23AC2C710;
  *(unsigned char *)(v657 + 32) = 1;
  *(unsigned char *)(v657 + 33) = 2;
  uint64_t v1073 = sub_23AB60324(v657, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v658 = swift_allocObject();
  *(_OWORD *)(v658 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v658 + 32) = 8;
  uint64_t v659 = sub_23AB60324(v658, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v660 = swift_allocObject();
  *(_OWORD *)(v660 + 16) = xmmword_23AC2C730;
  *(unsigned char *)(v660 + 32) = 0;
  *(unsigned char *)(v660 + 33) = 3;
  *(unsigned char *)(v660 + 34) = 5;
  uint64_t v661 = sub_23AB60324(v660, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v662 = swift_allocObject();
  *(_OWORD *)(v662 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v662 + 32) = 25;
  uint64_t v663 = sub_23AB60324(v662, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v664.value._object = (void *)0x800000023AC461C0;
  v664.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v664, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v665 = sub_23ABB8BA8();
  char v666 = sub_23ABBFBE0();
  uint64_t v667 = sub_23ABBFBE8();
  *((void *)&v996 + 1) = v661;
  *(void *)&long long v996 = v659;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC461A0, v653, v655, v656, v665 & 1, v666 & 1, v1073, (uint64_t)v1149._rawValue + 7784, v996, v667, v663, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v668 = swift_allocObject();
  *(_OWORD *)(v668 + 16) = xmmword_23AC2C700;
  uint64_t v669 = swift_allocObject();
  *(_OWORD *)(v669 + 16) = xmmword_23AC2C710;
  *(void *)(v669 + 32) = 0xD000000000000012;
  *(void *)(v669 + 40) = 0x800000023AC461E0;
  *(void *)(v669 + 48) = 0xD000000000000012;
  *(void *)(v669 + 56) = 0x800000023AC46200;
  *(void *)(v668 + 32) = v669;
  *(unsigned char *)(v668 + 40) = 0;
  uint64_t v670 = swift_allocObject();
  *(_OWORD *)(v670 + 16) = xmmword_23AC2C700;
  *(void *)(v670 + 32) = 0xD00000000000001FLL;
  *(void *)(v670 + 40) = 0x800000023AC46220;
  *(unsigned char *)(v670 + 48) = 0;
  uint64_t v671 = swift_allocObject();
  *(_OWORD *)(v671 + 16) = xmmword_23AC2C700;
  *(void *)(v671 + 32) = 0xD00000000000002DLL;
  *(void *)(v671 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v671 + 48) = 0;
  uint64_t v672 = swift_allocObject();
  *(_OWORD *)(v672 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v672 + 32) = 0;
  uint64_t v1085 = sub_23AB60324(v672, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1082 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1082 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v673 = swift_allocObject();
  *(_OWORD *)(v673 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v673 + 32) = 84083201;
  *(unsigned char *)(v673 + 36) = 8;
  uint64_t v674 = sub_23AB60324(v673, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v675 = swift_allocObject();
  *(_OWORD *)(v675 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v675 + 32) = 30;
  uint64_t v676 = sub_23AB60324(v675, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v677.value._countAndFlagsBits = 0x617265746E496F76;
  v677.value._object = (void *)0xEC0000006E497463;
  Action.init(_:mac:)(v677, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v678 = sub_23ABB8BA8();
  char v679 = sub_23ABBFBE0();
  uint64_t v680 = sub_23ABBFBE8();
  *((void *)&v997 + 1) = v674;
  *(void *)&long long v997 = v1082;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC46240, v668, v670, v671, v678 & 1, v679 & 1, v1085, (uint64_t)v1149._rawValue + 7936, v997, v680, v676, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v681 = swift_allocObject();
  *(_OWORD *)(v681 + 16) = xmmword_23AC2C700;
  uint64_t v682 = swift_allocObject();
  *(_OWORD *)(v682 + 16) = xmmword_23AC2C730;
  *(void *)(v682 + 32) = 0xD00000000000001ALL;
  *(void *)(v682 + 40) = 0x800000023AC46260;
  *(void *)(v682 + 48) = 0xD000000000000017;
  *(void *)(v682 + 56) = 0x800000023AC46280;
  *(void *)(v682 + 64) = 0xD000000000000013;
  *(void *)(v682 + 72) = 0x800000023AC462A0;
  *(void *)(v681 + 32) = v682;
  *(unsigned char *)(v681 + 40) = 0;
  uint64_t v683 = swift_allocObject();
  *(_OWORD *)(v683 + 16) = xmmword_23AC2C700;
  *(void *)(v683 + 32) = 0xD00000000000001ELL;
  *(void *)(v683 + 40) = 0x800000023AC462C0;
  *(unsigned char *)(v683 + 48) = 0;
  uint64_t v684 = swift_allocObject();
  *(_OWORD *)(v684 + 16) = xmmword_23AC2C700;
  *(void *)(v684 + 32) = 0xD00000000000002DLL;
  *(void *)(v684 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v684 + 48) = 0;
  uint64_t v685 = swift_allocObject();
  *(_OWORD *)(v685 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v685 + 32) = 0;
  uint64_t v1086 = sub_23AB60324(v685, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1083 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1083 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v686 = swift_allocObject();
  *(_OWORD *)(v686 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v686 + 32) = 84083201;
  *(unsigned char *)(v686 + 36) = 8;
  uint64_t v687 = sub_23AB60324(v686, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v688 = swift_allocObject();
  *(_OWORD *)(v688 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v688 + 32) = 30;
  uint64_t v689 = sub_23AB60324(v688, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v690.value._countAndFlagsBits = 0x617265746E496F76;
  v690.value._object = (void *)0xED000074754F7463;
  Action.init(_:mac:)(v690, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v691 = sub_23ABB8BA8();
  char v692 = sub_23ABBFBE0();
  uint64_t v693 = sub_23ABBFBE8();
  *((void *)&v998 + 1) = v687;
  *(void *)&long long v998 = v1083;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC462E0, v681, v683, v684, v691 & 1, v692 & 1, v1086, (uint64_t)v1149._rawValue + 8088, v998, v693, v689, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v694 = swift_allocObject();
  *(_OWORD *)(v694 + 16) = xmmword_23AC2C700;
  uint64_t v695 = swift_allocObject();
  *(_OWORD *)(v695 + 16) = xmmword_23AC2C700;
  *(void *)(v695 + 32) = 0xD000000000000011;
  *(void *)(v695 + 40) = 0x800000023AC46300;
  *(void *)(v694 + 32) = v695;
  *(unsigned char *)(v694 + 40) = 0;
  uint64_t v696 = swift_allocObject();
  *(_OWORD *)(v696 + 16) = xmmword_23AC2C700;
  *(void *)(v696 + 32) = 0xD000000000000016;
  *(void *)(v696 + 40) = 0x800000023AC46320;
  *(unsigned char *)(v696 + 48) = 0;
  uint64_t v697 = swift_allocObject();
  *(_OWORD *)(v697 + 16) = xmmword_23AC2C700;
  *(void *)(v697 + 32) = 0xD00000000000002DLL;
  *(void *)(v697 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v697 + 48) = 0;
  uint64_t v698 = swift_allocObject();
  *(_OWORD *)(v698 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v698 + 32) = 0;
  uint64_t v1137 = sub_23AB60324(v698, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1087 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1087 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v699 = swift_allocObject();
  *(_OWORD *)(v699 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v699 + 32) = 84083201;
  *(unsigned char *)(v699 + 36) = 8;
  uint64_t v700 = sub_23AB60324(v699, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v701 = swift_allocObject();
  *(_OWORD *)(v701 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v701 + 32) = 30;
  uint64_t v702 = sub_23AB60324(v701, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v703.value._object = (void *)0x800000023AC46360;
  v703.value._countAndFlagsBits = 0xD000000000000011;
  Action.init(_:mac:)(v703, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v704 = sub_23ABB8BA8();
  char v705 = sub_23ABBFBE0();
  uint64_t v706 = sub_23ABBFBE8();
  *((void *)&v999 + 1) = v700;
  *(void *)&long long v999 = v1087;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000015, 0x800000023AC46340, v694, v696, v697, v704 & 1, v705 & 1, v1137, (uint64_t)v1149._rawValue + 8240, v999, v706, v702, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v707 = swift_allocObject();
  *(_OWORD *)(v707 + 16) = xmmword_23AC2C700;
  uint64_t v708 = swift_allocObject();
  *(_OWORD *)(v708 + 16) = xmmword_23AC2C700;
  *(void *)(v708 + 32) = 0xD000000000000016;
  *(void *)(v708 + 40) = 0x800000023AC46380;
  *(void *)(v707 + 32) = v708;
  *(unsigned char *)(v707 + 40) = 0;
  uint64_t v709 = swift_allocObject();
  *(_OWORD *)(v709 + 16) = xmmword_23AC2C700;
  *(void *)(v709 + 32) = 0xD00000000000001DLL;
  *(void *)(v709 + 40) = 0x800000023AC463A0;
  *(unsigned char *)(v709 + 48) = 0;
  uint64_t v710 = swift_allocObject();
  *(_OWORD *)(v710 + 16) = xmmword_23AC2C700;
  *(void *)(v710 + 32) = 0xD00000000000002DLL;
  *(void *)(v710 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v710 + 48) = 0;
  uint64_t v711 = swift_allocObject();
  *(_OWORD *)(v711 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v711 + 32) = 0;
  uint64_t v1094 = sub_23AB60324(v711, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1088 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1088 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v712 = swift_allocObject();
  *(_OWORD *)(v712 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v712 + 32) = 84083201;
  *(unsigned char *)(v712 + 36) = 8;
  uint64_t v713 = sub_23AB60324(v712, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v714 = swift_allocObject();
  *(_OWORD *)(v714 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v714 + 32) = 30;
  uint64_t v715 = sub_23AB60324(v714, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v716.value._object = (void *)0x800000023AC463E0;
  v716.value._countAndFlagsBits = 0xD000000000000016;
  Action.init(_:mac:)(v716, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v717 = sub_23ABB8BA8();
  char v718 = sub_23ABBFBE0();
  uint64_t v719 = sub_23ABBFBE8();
  *((void *)&v1000 + 1) = v713;
  *(void *)&long long v1000 = v1088;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC463C0, v707, v709, v710, v717 & 1, v718 & 1, v1094, (uint64_t)v1149._rawValue + 8392, v1000, v719, v715, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v720 = swift_allocObject();
  *(_OWORD *)(v720 + 16) = xmmword_23AC2C700;
  uint64_t v721 = swift_allocObject();
  *(_OWORD *)(v721 + 16) = xmmword_23AC2C700;
  *(void *)(v721 + 32) = 0xD000000000000012;
  *(void *)(v721 + 40) = 0x800000023AC46400;
  *(void *)(v720 + 32) = v721;
  *(unsigned char *)(v720 + 40) = 0;
  uint64_t v722 = swift_allocObject();
  *(_OWORD *)(v722 + 16) = xmmword_23AC2C700;
  *(void *)(v722 + 32) = 0xD000000000000017;
  *(void *)(v722 + 40) = 0x800000023AC46420;
  *(unsigned char *)(v722 + 48) = 0;
  uint64_t v723 = swift_allocObject();
  *(_OWORD *)(v723 + 16) = xmmword_23AC2C700;
  *(void *)(v723 + 32) = 0xD00000000000002DLL;
  *(void *)(v723 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v723 + 48) = 0;
  uint64_t v724 = swift_allocObject();
  *(_OWORD *)(v724 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v724 + 32) = 0;
  uint64_t v1138 = sub_23AB60324(v724, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1095 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1095 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v725 = swift_allocObject();
  *(_OWORD *)(v725 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v725 + 32) = 84083201;
  *(unsigned char *)(v725 + 36) = 8;
  uint64_t v726 = sub_23AB60324(v725, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v727 = swift_allocObject();
  *(_OWORD *)(v727 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v727 + 32) = 30;
  uint64_t v728 = sub_23AB60324(v727, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v729.value._object = (void *)0x800000023AC46460;
  v729.value._countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v729, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v730 = sub_23ABB8BA8();
  char v731 = sub_23ABBFBE0();
  uint64_t v732 = sub_23ABBFBE8();
  *((void *)&v1001 + 1) = v726;
  *(void *)&long long v1001 = v1095;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC46440, v720, v722, v723, v730 & 1, v731 & 1, v1138, (uint64_t)v1149._rawValue + 8544, v1001, v732, v728, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v733 = swift_allocObject();
  *(_OWORD *)(v733 + 16) = xmmword_23AC2C700;
  uint64_t v734 = swift_allocObject();
  *(_OWORD *)(v734 + 16) = xmmword_23AC2C700;
  *(void *)(v734 + 32) = 0xD000000000000019;
  *(void *)(v734 + 40) = 0x800000023AC46480;
  *(void *)(v733 + 32) = v734;
  *(unsigned char *)(v733 + 40) = 0;
  uint64_t v735 = swift_allocObject();
  *(_OWORD *)(v735 + 16) = xmmword_23AC2C700;
  *(void *)(v735 + 32) = 0xD00000000000002ELL;
  *(void *)(v735 + 40) = 0x800000023AC464A0;
  *(unsigned char *)(v735 + 48) = 0;
  uint64_t v736 = swift_allocObject();
  *(_OWORD *)(v736 + 16) = xmmword_23AC2C700;
  *(void *)(v736 + 32) = 0xD00000000000002DLL;
  *(void *)(v736 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v736 + 48) = 0;
  uint64_t v737 = swift_allocObject();
  *(_OWORD *)(v737 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v737 + 32) = 0;
  uint64_t v1096 = sub_23AB60324(v737, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1089 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1089 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v738 = swift_allocObject();
  *(_OWORD *)(v738 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v738 + 32) = 84083201;
  *(unsigned char *)(v738 + 36) = 8;
  uint64_t v739 = sub_23AB60324(v738, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v740 = swift_allocObject();
  *(_OWORD *)(v740 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v740 + 32) = 30;
  uint64_t v741 = sub_23AB60324(v740, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v742.value._object = (void *)0x800000023AC464F0;
  v742.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v742, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v743 = sub_23ABB8BA8();
  char v744 = sub_23ABBFBE0();
  uint64_t v745 = sub_23ABBFBE8();
  *((void *)&v1002 + 1) = v739;
  *(void *)&long long v1002 = v1089;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC464D0, v733, v735, v736, v743 & 1, v744 & 1, v1096, (uint64_t)v1149._rawValue + 8696, v1002, v745, v741, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v746 = swift_allocObject();
  *(_OWORD *)(v746 + 16) = xmmword_23AC2C700;
  uint64_t v747 = swift_allocObject();
  *(_OWORD *)(v747 + 16) = xmmword_23AC2C700;
  *(void *)(v747 + 32) = 0xD00000000000001BLL;
  *(void *)(v747 + 40) = 0x800000023AC46510;
  *(void *)(v746 + 32) = v747;
  *(unsigned char *)(v746 + 40) = 0;
  uint64_t v748 = swift_allocObject();
  *(_OWORD *)(v748 + 16) = xmmword_23AC2C700;
  *(void *)(v748 + 32) = 0xD00000000000001CLL;
  *(void *)(v748 + 40) = 0x800000023AC46530;
  *(unsigned char *)(v748 + 48) = 0;
  uint64_t v749 = swift_allocObject();
  *(_OWORD *)(v749 + 16) = xmmword_23AC2C700;
  *(void *)(v749 + 32) = 0xD00000000000002DLL;
  *(void *)(v749 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v749 + 48) = 0;
  uint64_t v750 = swift_allocObject();
  *(_OWORD *)(v750 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v750 + 32) = 0;
  uint64_t v1139 = sub_23AB60324(v750, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1097 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1097 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v751 = swift_allocObject();
  *(_OWORD *)(v751 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v751 + 32) = 84083201;
  *(unsigned char *)(v751 + 36) = 8;
  uint64_t v752 = sub_23AB60324(v751, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v753 = swift_allocObject();
  *(_OWORD *)(v753 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v753 + 32) = 30;
  uint64_t v754 = sub_23AB60324(v753, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v755.value._object = (void *)0x800000023AC46570;
  v755.value._countAndFlagsBits = 0xD000000000000016;
  Action.init(_:mac:)(v755, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v756 = sub_23ABB8BA8();
  char v757 = sub_23ABBFBE0();
  uint64_t v758 = sub_23ABBFBE8();
  *((void *)&v1003 + 1) = v752;
  *(void *)&long long v1003 = v1097;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC46550, v746, v748, v749, v756 & 1, v757 & 1, v1139, (uint64_t)v1149._rawValue + 8848, v1003, v758, v754, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v759 = swift_allocObject();
  *(_OWORD *)(v759 + 16) = xmmword_23AC2C700;
  uint64_t v760 = swift_allocObject();
  *(_OWORD *)(v760 + 16) = xmmword_23AC2C700;
  *(void *)(v760 + 32) = 0x65764F6563696F56;
  *(void *)(v760 + 40) = 0xEF726F746F722072;
  *(void *)(v759 + 32) = v760;
  *(unsigned char *)(v759 + 40) = 0;
  uint64_t v761 = swift_allocObject();
  *(_OWORD *)(v761 + 16) = xmmword_23AC2C700;
  *(void *)(v761 + 32) = 0xD000000000000019;
  *(void *)(v761 + 40) = 0x800000023AC46590;
  *(unsigned char *)(v761 + 48) = 0;
  uint64_t v762 = swift_allocObject();
  *(_OWORD *)(v762 + 16) = xmmword_23AC2C700;
  *(void *)(v762 + 32) = 0xD00000000000002DLL;
  *(void *)(v762 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v762 + 48) = 0;
  uint64_t v763 = swift_allocObject();
  *(_OWORD *)(v763 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v763 + 32) = 0;
  uint64_t v1098 = sub_23AB60324(v763, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1090 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1090 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v764 = swift_allocObject();
  *(_OWORD *)(v764 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v764 + 32) = 84083201;
  *(unsigned char *)(v764 + 36) = 8;
  uint64_t v765 = sub_23AB60324(v764, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v766 = swift_allocObject();
  *(_OWORD *)(v766 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v766 + 32) = 30;
  uint64_t v767 = sub_23AB60324(v766, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v768.value._countAndFlagsBits = 0x6F526E65704F6F76;
  v768.value._object = (void *)0xEB00000000726F74;
  Action.init(_:mac:)(v768, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v769 = sub_23ABB8BA8();
  char v770 = sub_23ABBFBE0();
  uint64_t v771 = sub_23ABBFBE8();
  *((void *)&v1004 + 1) = v765;
  *(void *)&long long v1004 = v1090;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC465B0, v759, v761, v762, v769 & 1, v770 & 1, v1098, (uint64_t)v1149._rawValue + 9000, v1004, v771, v767, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v772 = swift_allocObject();
  *(_OWORD *)(v772 + 16) = xmmword_23AC2C700;
  uint64_t v773 = swift_allocObject();
  *(_OWORD *)(v773 + 16) = xmmword_23AC2C700;
  *(void *)(v773 + 32) = 0xD000000000000016;
  *(void *)(v773 + 40) = 0x800000023AC465D0;
  *(void *)(v772 + 32) = v773;
  *(unsigned char *)(v772 + 40) = 0;
  uint64_t v774 = swift_allocObject();
  *(_OWORD *)(v774 + 16) = xmmword_23AC2C700;
  *(void *)(v774 + 32) = 0xD000000000000016;
  *(void *)(v774 + 40) = 0x800000023AC465F0;
  *(unsigned char *)(v774 + 48) = 0;
  uint64_t v775 = swift_allocObject();
  *(_OWORD *)(v775 + 16) = xmmword_23AC2C700;
  *(void *)(v775 + 32) = 0xD00000000000002DLL;
  *(void *)(v775 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v775 + 48) = 0;
  uint64_t v776 = swift_allocObject();
  *(_OWORD *)(v776 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v776 + 32) = 0;
  uint64_t v1140 = sub_23AB60324(v776, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1100 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1100 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v777 = swift_allocObject();
  *(_OWORD *)(v777 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v777 + 32) = 84083201;
  *(unsigned char *)(v777 + 36) = 8;
  uint64_t v778 = sub_23AB60324(v777, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v779 = swift_allocObject();
  *(_OWORD *)(v779 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v779 + 32) = 30;
  uint64_t v780 = sub_23AB60324(v779, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v781.value._object = (void *)0x800000023AC46630;
  v781.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v781, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v782 = sub_23ABB8BA8();
  char v783 = sub_23ABBFBE0();
  uint64_t v784 = sub_23ABBFBE8();
  *((void *)&v1005 + 1) = v778;
  *(void *)&long long v1005 = v1100;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC46610, v772, v774, v775, v782 & 1, v783 & 1, v1140, (uint64_t)v1149._rawValue + 9152, v1005, v784, v780, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v785 = swift_allocObject();
  *(_OWORD *)(v785 + 16) = xmmword_23AC2C700;
  uint64_t v786 = swift_allocObject();
  *(_OWORD *)(v786 + 16) = xmmword_23AC2C700;
  *(void *)(v786 + 32) = 0xD00000000000001ALL;
  *(void *)(v786 + 40) = 0x800000023AC46650;
  *(void *)(v785 + 32) = v786;
  *(unsigned char *)(v785 + 40) = 0;
  uint64_t v787 = swift_allocObject();
  *(_OWORD *)(v787 + 16) = xmmword_23AC2C700;
  *(void *)(v787 + 32) = 0xD00000000000001ALL;
  *(void *)(v787 + 40) = 0x800000023AC46670;
  *(unsigned char *)(v787 + 48) = 0;
  uint64_t v788 = swift_allocObject();
  *(_OWORD *)(v788 + 16) = xmmword_23AC2C700;
  *(void *)(v788 + 32) = 0xD00000000000002DLL;
  *(void *)(v788 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v788 + 48) = 0;
  uint64_t v789 = swift_allocObject();
  *(_OWORD *)(v789 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v789 + 32) = 0;
  uint64_t v1101 = sub_23AB60324(v789, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1099 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1099 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v790 = swift_allocObject();
  *(_OWORD *)(v790 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v790 + 32) = 84083201;
  *(unsigned char *)(v790 + 36) = 8;
  uint64_t v791 = sub_23AB60324(v790, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v792 = swift_allocObject();
  *(_OWORD *)(v792 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v792 + 32) = 30;
  uint64_t v793 = sub_23AB60324(v792, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v794.value._object = (void *)0x800000023AC466B0;
  v794.value._countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v794, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v795 = sub_23ABB8BA8();
  char v796 = sub_23ABBFBE0();
  uint64_t v797 = sub_23ABBFBE8();
  *((void *)&v1006 + 1) = v791;
  *(void *)&long long v1006 = v1099;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC46690, v785, v787, v788, v795 & 1, v796 & 1, v1101, (uint64_t)v1149._rawValue + 9304, v1006, v797, v793, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v798 = swift_allocObject();
  *(_OWORD *)(v798 + 16) = xmmword_23AC2C700;
  uint64_t v799 = swift_allocObject();
  *(_OWORD *)(v799 + 16) = xmmword_23AC2C700;
  *(void *)(v799 + 32) = 0xD000000000000013;
  *(void *)(v799 + 40) = 0x800000023AC466D0;
  *(void *)(v798 + 32) = v799;
  *(unsigned char *)(v798 + 40) = 0;
  uint64_t v800 = swift_allocObject();
  *(_OWORD *)(v800 + 16) = xmmword_23AC2C700;
  *(void *)(v800 + 32) = 0xD000000000000013;
  *(void *)(v800 + 40) = 0x800000023AC466F0;
  *(unsigned char *)(v800 + 48) = 0;
  uint64_t v801 = swift_allocObject();
  *(_OWORD *)(v801 + 16) = xmmword_23AC2C700;
  *(void *)(v801 + 32) = 0xD00000000000002DLL;
  *(void *)(v801 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v801 + 48) = 0;
  uint64_t v802 = swift_allocObject();
  *(_OWORD *)(v802 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v802 + 32) = 0;
  uint64_t v1141 = sub_23AB60324(v802, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1102 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1102 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v803 = swift_allocObject();
  *(_OWORD *)(v803 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v803 + 32) = 84083201;
  *(unsigned char *)(v803 + 36) = 8;
  uint64_t v804 = sub_23AB60324(v803, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v805 = swift_allocObject();
  *(_OWORD *)(v805 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v805 + 32) = 30;
  uint64_t v806 = sub_23AB60324(v805, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v807.value._object = (void *)0x800000023AC46730;
  v807.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v807, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v808 = sub_23ABB8BA8();
  char v809 = sub_23ABBFBE0();
  uint64_t v810 = sub_23ABBFBE8();
  *((void *)&v1007 + 1) = v804;
  *(void *)&long long v1007 = v1102;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC46710, v798, v800, v801, v808 & 1, v809 & 1, v1141, (uint64_t)v1149._rawValue + 9456, v1007, v810, v806, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v811 = swift_allocObject();
  *(_OWORD *)(v811 + 16) = xmmword_23AC2C700;
  uint64_t v812 = swift_allocObject();
  *(_OWORD *)(v812 + 16) = xmmword_23AC2C700;
  *(void *)(v812 + 32) = 0xD000000000000017;
  *(void *)(v812 + 40) = 0x800000023AC46750;
  *(void *)(v811 + 32) = v812;
  *(unsigned char *)(v811 + 40) = 0;
  uint64_t v813 = swift_allocObject();
  *(_OWORD *)(v813 + 16) = xmmword_23AC2C700;
  *(void *)(v813 + 32) = 0xD000000000000017;
  *(void *)(v813 + 40) = 0x800000023AC46770;
  *(unsigned char *)(v813 + 48) = 0;
  uint64_t v814 = swift_allocObject();
  *(_OWORD *)(v814 + 16) = xmmword_23AC2C700;
  *(void *)(v814 + 32) = 0xD00000000000002DLL;
  *(void *)(v814 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v814 + 48) = 0;
  uint64_t v815 = swift_allocObject();
  *(_OWORD *)(v815 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v815 + 32) = 0;
  uint64_t v1107 = sub_23AB60324(v815, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1103 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1103 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v816 = swift_allocObject();
  *(_OWORD *)(v816 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v816 + 32) = 84083201;
  *(unsigned char *)(v816 + 36) = 8;
  uint64_t v817 = sub_23AB60324(v816, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v818 = swift_allocObject();
  *(_OWORD *)(v818 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v818 + 32) = 30;
  uint64_t v819 = sub_23AB60324(v818, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v820.value._object = (void *)0x800000023AC467B0;
  v820.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v820, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v821 = sub_23ABB8BA8();
  char v822 = sub_23ABBFBE0();
  uint64_t v823 = sub_23ABBFBE8();
  *((void *)&v1008 + 1) = v817;
  *(void *)&long long v1008 = v1103;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC46790, v811, v813, v814, v821 & 1, v822 & 1, v1107, (uint64_t)v1149._rawValue + 9608, v1008, v823, v819, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v824 = swift_allocObject();
  *(_OWORD *)(v824 + 16) = xmmword_23AC2C700;
  uint64_t v825 = swift_allocObject();
  *(_OWORD *)(v825 + 16) = xmmword_23AC2C700;
  *(void *)(v825 + 32) = 0xD000000000000015;
  *(void *)(v825 + 40) = 0x800000023AC467D0;
  *(void *)(v824 + 32) = v825;
  *(unsigned char *)(v824 + 40) = 0;
  uint64_t v826 = swift_allocObject();
  *(_OWORD *)(v826 + 16) = xmmword_23AC2C700;
  *(void *)(v826 + 32) = 0xD000000000000020;
  *(void *)(v826 + 40) = 0x800000023AC467F0;
  *(unsigned char *)(v826 + 48) = 0;
  uint64_t v827 = swift_allocObject();
  *(_OWORD *)(v827 + 16) = xmmword_23AC2C700;
  *(void *)(v827 + 32) = 0xD00000000000002DLL;
  *(void *)(v827 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v827 + 48) = 0;
  uint64_t v828 = swift_allocObject();
  *(_OWORD *)(v828 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v828 + 32) = 0;
  uint64_t v1142 = sub_23AB60324(v828, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1108 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1108 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v829 = swift_allocObject();
  *(_OWORD *)(v829 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v829 + 32) = 84083201;
  *(unsigned char *)(v829 + 36) = 8;
  uint64_t v830 = sub_23AB60324(v829, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v831 = swift_allocObject();
  *(_OWORD *)(v831 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v831 + 32) = 30;
  uint64_t v832 = sub_23AB60324(v831, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v833.value._object = (void *)0x800000023AC46840;
  v833.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v833, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v834 = sub_23ABB8BA8();
  char v835 = sub_23ABBFBE0();
  uint64_t v836 = sub_23ABBFBE8();
  *((void *)&v1009 + 1) = v830;
  *(void *)&long long v1009 = v1108;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC46820, v824, v826, v827, v834 & 1, v835 & 1, v1142, (uint64_t)v1149._rawValue + 9760, v1009, v836, v832, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v837 = swift_allocObject();
  *(_OWORD *)(v837 + 16) = xmmword_23AC2C700;
  uint64_t v838 = swift_allocObject();
  *(_OWORD *)(v838 + 16) = xmmword_23AC2C700;
  *(void *)(v838 + 32) = 0xD00000000000001ELL;
  *(void *)(v838 + 40) = 0x800000023AC46860;
  *(void *)(v837 + 32) = v838;
  *(unsigned char *)(v837 + 40) = 0;
  uint64_t v839 = swift_allocObject();
  *(_OWORD *)(v839 + 16) = xmmword_23AC2C700;
  *(void *)(v839 + 32) = 0xD000000000000030;
  *(void *)(v839 + 40) = 0x800000023AC46880;
  *(unsigned char *)(v839 + 48) = 0;
  uint64_t v840 = swift_allocObject();
  *(_OWORD *)(v840 + 16) = xmmword_23AC2C700;
  *(void *)(v840 + 32) = 0xD00000000000002DLL;
  *(void *)(v840 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v840 + 48) = 0;
  uint64_t v841 = swift_allocObject();
  *(_OWORD *)(v841 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v841 + 32) = 0;
  uint64_t v1109 = sub_23AB60324(v841, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1104 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1104 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v842 = swift_allocObject();
  *(_OWORD *)(v842 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v842 + 32) = 84083201;
  *(unsigned char *)(v842 + 36) = 8;
  uint64_t v843 = sub_23AB60324(v842, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v844 = swift_allocObject();
  *(_OWORD *)(v844 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v844 + 32) = 30;
  uint64_t v845 = sub_23AB60324(v844, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v846.value._object = (void *)0x800000023AC468E0;
  v846.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v846, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v847 = sub_23ABB8BA8();
  char v848 = sub_23ABBFBE0();
  uint64_t v849 = sub_23ABBFBE8();
  *((void *)&v1010 + 1) = v843;
  *(void *)&long long v1010 = v1104;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC468C0, v837, v839, v840, v847 & 1, v848 & 1, v1109, (uint64_t)v1149._rawValue + 9912, v1010, v849, v845, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v850 = swift_allocObject();
  *(_OWORD *)(v850 + 16) = xmmword_23AC2C700;
  uint64_t v851 = swift_allocObject();
  *(_OWORD *)(v851 + 16) = xmmword_23AC2C700;
  *(void *)(v851 + 32) = 0xD00000000000001DLL;
  *(void *)(v851 + 40) = 0x800000023AC46900;
  *(void *)(v850 + 32) = v851;
  *(unsigned char *)(v850 + 40) = 0;
  uint64_t v852 = swift_allocObject();
  *(_OWORD *)(v852 + 16) = xmmword_23AC2C700;
  *(void *)(v852 + 32) = 0xD00000000000002CLL;
  *(void *)(v852 + 40) = 0x800000023AC46920;
  *(unsigned char *)(v852 + 48) = 0;
  uint64_t v853 = swift_allocObject();
  *(_OWORD *)(v853 + 16) = xmmword_23AC2C700;
  *(void *)(v853 + 32) = 0xD00000000000002DLL;
  *(void *)(v853 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v853 + 48) = 0;
  uint64_t v854 = swift_allocObject();
  *(_OWORD *)(v854 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v854 + 32) = 0;
  uint64_t v1143 = sub_23AB60324(v854, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1110 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1110 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v855 = swift_allocObject();
  *(_OWORD *)(v855 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v855 + 32) = 84083201;
  *(unsigned char *)(v855 + 36) = 8;
  uint64_t v856 = sub_23AB60324(v855, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v857 = swift_allocObject();
  *(_OWORD *)(v857 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v857 + 32) = 30;
  uint64_t v858 = sub_23AB60324(v857, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v859.value._object = (void *)0x800000023AC46970;
  v859.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v859, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v860 = sub_23ABB8BA8();
  char v861 = sub_23ABBFBE0();
  uint64_t v862 = sub_23ABBFBE8();
  *((void *)&v1011 + 1) = v856;
  *(void *)&long long v1011 = v1110;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC46950, v850, v852, v853, v860 & 1, v861 & 1, v1143, (uint64_t)v1149._rawValue + 10064, v1011, v862, v858, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v863 = swift_allocObject();
  *(_OWORD *)(v863 + 16) = xmmword_23AC2C700;
  uint64_t v864 = swift_allocObject();
  *(_OWORD *)(v864 + 16) = xmmword_23AC2C700;
  *(void *)(v864 + 32) = 0xD00000000000001BLL;
  *(void *)(v864 + 40) = 0x800000023AC46990;
  *(void *)(v863 + 32) = v864;
  *(unsigned char *)(v863 + 40) = 0;
  uint64_t v865 = swift_allocObject();
  *(_OWORD *)(v865 + 16) = xmmword_23AC2C700;
  *(void *)(v865 + 32) = 0xD000000000000019;
  *(void *)(v865 + 40) = 0x800000023AC469B0;
  *(unsigned char *)(v865 + 48) = 0;
  uint64_t v866 = swift_allocObject();
  *(_OWORD *)(v866 + 16) = xmmword_23AC2C700;
  *(void *)(v866 + 32) = 0xD00000000000002DLL;
  *(void *)(v866 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v866 + 48) = 0;
  uint64_t v867 = swift_allocObject();
  *(_OWORD *)(v867 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v867 + 32) = 0;
  uint64_t v1111 = sub_23AB60324(v867, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1105 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1105 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v868 = swift_allocObject();
  *(_OWORD *)(v868 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v868 + 32) = 84083201;
  *(unsigned char *)(v868 + 36) = 8;
  uint64_t v869 = sub_23AB60324(v868, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v870 = swift_allocObject();
  *(_OWORD *)(v870 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v870 + 32) = 30;
  uint64_t v871 = sub_23AB60324(v870, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v872.value._object = (void *)0x800000023AC469F0;
  v872.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v872, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v873 = sub_23ABB8BA8();
  char v874 = sub_23ABBFBE0();
  uint64_t v875 = sub_23ABBFBE8();
  *((void *)&v1012 + 1) = v869;
  *(void *)&long long v1012 = v1105;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC469D0, v863, v865, v866, v873 & 1, v874 & 1, v1111, (uint64_t)v1149._rawValue + 10216, v1012, v875, v871, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v876 = swift_allocObject();
  *(_OWORD *)(v876 + 16) = xmmword_23AC2C700;
  uint64_t v877 = swift_allocObject();
  *(_OWORD *)(v877 + 16) = xmmword_23AC2C700;
  strcpy((char *)(v877 + 32), "VoiceOver help");
  *(unsigned char *)(v877 + 47) = -18;
  *(void *)(v876 + 32) = v877;
  *(unsigned char *)(v876 + 40) = 0;
  uint64_t v878 = swift_allocObject();
  *(_OWORD *)(v878 + 16) = xmmword_23AC2C700;
  *(void *)(v878 + 32) = 0xD000000000000027;
  *(void *)(v878 + 40) = 0x800000023AC46A10;
  *(unsigned char *)(v878 + 48) = 0;
  uint64_t v879 = swift_allocObject();
  *(_OWORD *)(v879 + 16) = xmmword_23AC2C700;
  *(void *)(v879 + 32) = 0xD00000000000002DLL;
  *(void *)(v879 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v879 + 48) = 0;
  uint64_t v880 = swift_allocObject();
  *(_OWORD *)(v880 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v880 + 32) = 0;
  uint64_t v1144 = sub_23AB60324(v880, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1112 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1112 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v881 = swift_allocObject();
  *(_OWORD *)(v881 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v881 + 32) = 84083201;
  *(unsigned char *)(v881 + 36) = 8;
  uint64_t v882 = sub_23AB60324(v881, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v883 = swift_allocObject();
  *(_OWORD *)(v883 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v883 + 32) = 30;
  uint64_t v884 = sub_23AB60324(v883, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v885.value._countAndFlagsBits = 0x706C65486F76;
  v885.value._object = (void *)0xE600000000000000;
  Action.init(_:mac:)(v885, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v886 = sub_23ABB8BA8();
  char v887 = sub_23ABBFBE0();
  uint64_t v888 = sub_23ABBFBE8();
  *((void *)&v1013 + 1) = v882;
  *(void *)&long long v1013 = v1112;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC46A40, v876, v878, v879, v886 & 1, v887 & 1, v1144, (uint64_t)v1149._rawValue + 10368, v1013, v888, v884, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v889 = swift_allocObject();
  *(_OWORD *)(v889 + 16) = xmmword_23AC2C700;
  uint64_t v890 = swift_allocObject();
  *(_OWORD *)(v890 + 16) = xmmword_23AC2C700;
  *(void *)(v890 + 32) = 0xD000000000000013;
  *(void *)(v890 + 40) = 0x800000023AC46A60;
  *(void *)(v889 + 32) = v890;
  *(unsigned char *)(v889 + 40) = 0;
  uint64_t v891 = swift_allocObject();
  *(_OWORD *)(v891 + 16) = xmmword_23AC2C700;
  *(void *)(v891 + 32) = 0xD000000000000025;
  *(void *)(v891 + 40) = 0x800000023AC45C10;
  *(unsigned char *)(v891 + 48) = 0;
  uint64_t v892 = swift_allocObject();
  *(_OWORD *)(v892 + 16) = xmmword_23AC2C700;
  *(void *)(v892 + 32) = 0xD00000000000002DLL;
  *(void *)(v892 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v892 + 48) = 0;
  uint64_t v893 = swift_allocObject();
  *(_OWORD *)(v893 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v893 + 32) = 0;
  uint64_t v1113 = sub_23AB60324(v893, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1106 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1106 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v894 = swift_allocObject();
  *(_OWORD *)(v894 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v894 + 32) = 84083201;
  *(unsigned char *)(v894 + 36) = 8;
  uint64_t v895 = sub_23AB60324(v894, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v896 = swift_allocObject();
  *(_OWORD *)(v896 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v896 + 32) = 30;
  uint64_t v897 = sub_23AB60324(v896, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v898.value._countAndFlagsBits = 0x7553706C65486F76;
  v898.value._object = (void *)0xED00007972616D6DLL;
  Action.init(_:mac:)(v898, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v899 = sub_23ABB8BA8();
  char v900 = sub_23ABBFBE0();
  uint64_t v901 = sub_23ABBFBE8();
  *((void *)&v1014 + 1) = v895;
  *(void *)&long long v1014 = v1106;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC46A80, v889, v891, v892, v899 & 1, v900 & 1, v1113, (uint64_t)v1149._rawValue + 10520, v1014, v901, v897, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v902 = swift_allocObject();
  *(_OWORD *)(v902 + 16) = xmmword_23AC2C700;
  uint64_t v903 = swift_allocObject();
  *(_OWORD *)(v903 + 16) = xmmword_23AC2C710;
  strcpy((char *)(v903 + 32), "VoiceOver hint");
  *(unsigned char *)(v903 + 47) = -18;
  *(void *)(v903 + 48) = 0xD000000000000018;
  *(void *)(v903 + 56) = 0x800000023AC46AA0;
  *(void *)(v902 + 32) = v903;
  *(unsigned char *)(v902 + 40) = 0;
  uint64_t v904 = swift_allocObject();
  *(_OWORD *)(v904 + 16) = xmmword_23AC2C700;
  *(void *)(v904 + 32) = 0xD00000000000002DLL;
  *(void *)(v904 + 40) = 0x800000023AC46AC0;
  *(unsigned char *)(v904 + 48) = 0;
  uint64_t v905 = swift_allocObject();
  *(_OWORD *)(v905 + 16) = xmmword_23AC2C700;
  *(void *)(v905 + 32) = 0xD00000000000002DLL;
  *(void *)(v905 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v905 + 48) = 0;
  uint64_t v906 = swift_allocObject();
  *(_OWORD *)(v906 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v906 + 32) = 0;
  uint64_t v1145 = sub_23AB60324(v906, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1114 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1114 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v907 = swift_allocObject();
  *(_OWORD *)(v907 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v907 + 32) = 84083201;
  *(unsigned char *)(v907 + 36) = 8;
  uint64_t v908 = sub_23AB60324(v907, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v909 = swift_allocObject();
  *(_OWORD *)(v909 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v909 + 32) = 30;
  uint64_t v910 = sub_23AB60324(v909, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v911.value._object = (void *)0x800000023AC46B10;
  v911.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v911, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v912 = sub_23ABB8BA8();
  char v913 = sub_23ABBFBE0();
  uint64_t v914 = sub_23ABBFBE8();
  *((void *)&v1015 + 1) = v908;
  *(void *)&long long v1015 = v1114;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC46AF0, v902, v904, v905, v912 & 1, v913 & 1, v1145, (uint64_t)v1149._rawValue + 10672, v1015, v914, v910, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v915 = swift_allocObject();
  *(_OWORD *)(v915 + 16) = xmmword_23AC2C700;
  uint64_t v916 = swift_allocObject();
  *(_OWORD *)(v916 + 16) = xmmword_23AC2C700;
  *(void *)(v916 + 32) = 0xD000000000000018;
  *(void *)(v916 + 40) = 0x800000023AC46B30;
  *(void *)(v915 + 32) = v916;
  *(unsigned char *)(v915 + 40) = 0;
  uint64_t v917 = swift_allocObject();
  *(_OWORD *)(v917 + 16) = xmmword_23AC2C700;
  *(void *)(v917 + 32) = 0xD00000000000001BLL;
  *(void *)(v917 + 40) = 0x800000023AC46B50;
  *(unsigned char *)(v917 + 48) = 0;
  uint64_t v918 = swift_allocObject();
  *(_OWORD *)(v918 + 16) = xmmword_23AC2C700;
  *(void *)(v918 + 32) = 0x10000000000000CELL;
  *(void *)(v918 + 40) = 0x800000023AC46B70;
  *(unsigned char *)(v918 + 48) = 0;
  uint64_t v919 = swift_allocObject();
  *(_OWORD *)(v919 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v919 + 32) = 0;
  uint64_t v1146 = sub_23AB60324(v919, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v1124 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v1124 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v920 = swift_allocObject();
  *(_OWORD *)(v920 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v920 + 32) = 84083201;
  *(unsigned char *)(v920 + 36) = 8;
  uint64_t v921 = sub_23AB60324(v920, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v922 = swift_allocObject();
  *(_OWORD *)(v922 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v922 + 32) = 30;
  uint64_t v923 = sub_23AB60324(v922, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v924.value._object = (void *)0x800000023AC46C60;
  v924.value._countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v924, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v925 = sub_23ABB8BA8();
  char v926 = sub_23ABBFBE0();
  uint64_t v927 = sub_23ABBFBE8();
  *((void *)&v1016 + 1) = v921;
  *(void *)&long long v1016 = v1124;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC46C40, v915, v917, v918, v925 & 1, v926 & 1, v1146, (uint64_t)v1149._rawValue + 10824, v1016, v927, v923, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  uint64_t v928 = swift_allocObject();
  *(_OWORD *)(v928 + 16) = xmmword_23AC2C700;
  uint64_t v929 = swift_allocObject();
  *(_OWORD *)(v929 + 16) = xmmword_23AC2C710;
  *(void *)(v929 + 32) = 0xD000000000000014;
  *(void *)(v929 + 40) = 0x800000023AC46C80;
  *(void *)(v929 + 48) = 0xD000000000000015;
  *(void *)(v929 + 56) = 0x800000023AC46CA0;
  *(void *)(v928 + 32) = v929;
  *(unsigned char *)(v928 + 40) = 0;
  uint64_t v930 = swift_allocObject();
  *(_OWORD *)(v930 + 16) = xmmword_23AC2C700;
  *(void *)(v930 + 32) = 0xD000000000000025;
  *(void *)(v930 + 40) = 0x800000023AC45C10;
  *(unsigned char *)(v930 + 48) = 0;
  uint64_t v931 = swift_allocObject();
  *(_OWORD *)(v931 + 16) = xmmword_23AC2C700;
  *(void *)(v931 + 32) = 0xD00000000000002DLL;
  *(void *)(v931 + 40) = 0x800000023AC451A0;
  *(unsigned char *)(v931 + 48) = 0;
  uint64_t v932 = swift_allocObject();
  *(_OWORD *)(v932 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v932 + 32) = 0;
  uint64_t v1148 = sub_23AB60324(v932, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v933 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v933 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v934 = swift_allocObject();
  *(_OWORD *)(v934 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v934 + 32) = 84083201;
  *(unsigned char *)(v934 + 36) = 8;
  uint64_t v935 = sub_23AB60324(v934, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v936 = swift_allocObject();
  *(_OWORD *)(v936 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v936 + 32) = 30;
  uint64_t v937 = sub_23AB60324(v936, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v1155[0] = 4;
  char v1154 = 4;
  v938.value._countAndFlagsBits = 0x746E6569724F6F76;
  v938.value._object = (void *)0xED00006E6F697461;
  Action.init(_:mac:)(v938, (Swift::String_optional)0);
  long long v1150 = v1152;
  long long v1151 = v1153;
  char v939 = sub_23ABB8BA8();
  char v940 = sub_23ABBFBE0();
  uint64_t v941 = sub_23ABBFBE8();
  *((void *)&v1017 + 1) = v935;
  *(void *)&long long v1017 = v933;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC46CC0, v928, v930, v931, v939 & 1, v940 & 1, v1148, (uint64_t)v1149._rawValue + 10976, v1017, v941, v937, v1155, &v1154, 0, 0, (uint64_t)&v1150);
  Swift::Bool v942 = sub_23ABB8BA8() & 1;
  v943._countAndFlagsBits = 0x6269737365636341;
  v943._object = (void *)0xED00007974696C69;
  v944._countAndFlagsBits = v1053;
  v944._object = v1052;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62B08, v943, v944, v942, v1149);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB96208()
{
  if (qword_268A5AB08 != -1) {
    swift_once();
  }
  return &stru_268A62B08;
}

void sub_23AB96254()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v276 = sub_23AC2A560();
  uint64_t v275 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v279 = swift_allocObject();
  *(_OWORD *)(v279 + 16) = xmmword_23AC2C8A0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C700;
  *(void *)(v9 + 32) = &unk_26EE24370;
  *(unsigned char *)(v9 + 40) = 0;
  uint64_t v10 = sub_23AB60324((uint64_t)&unk_26EE24438, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v11 = sub_23AB60324((uint64_t)&unk_26EE24460, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v12.value._object = (void *)0x800000023AC4A970;
  v12.value._countAndFlagsBits = 0xD000000000000018;
  Action.init(_:mac:)(v12, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  char v13 = sub_23ABB8BA8();
  char v14 = sub_23ABBFBE0();
  uint64_t v15 = sub_23ABBFBE8();
  uint64_t v16 = sub_23ABBFBE8();
  *(void *)&long long v228 = MEMORY[0x263F8EE88];
  *((void *)&v228 + 1) = v11;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC4A940, v9, (uint64_t)&unk_26EE243B0, (uint64_t)&unk_26EE243E8, v13 & 1, v14 & 1, v10, v279 + 32, v228, v15, v16, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23AC2C700;
  *(void *)(v17 + 32) = &unk_26EE24488;
  *(unsigned char *)(v17 + 40) = 0;
  uint64_t v18 = sub_23AB60324((uint64_t)&unk_26EE24540, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v19.value._countAndFlagsBits = 0xD000000000000014;
  v19.value._object = (void *)0x800000023AC4A9B0;
  Action.init(_:mac:)(v19, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  char v20 = sub_23ABB8BA8();
  LOBYTE(v15) = sub_23ABBFBE0();
  uint64_t v21 = sub_23ABBFBE8();
  uint64_t v22 = sub_23ABBFBE8();
  *(void *)&long long v229 = MEMORY[0x263F8EE88];
  *((void *)&v229 + 1) = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC4A990, v17, (uint64_t)&unk_26EE244B8, (uint64_t)&unk_26EE244F0, v20 & 1, v15 & 1, v18, v279 + 184, v229, v21, v22, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_23AC2C700;
  *(void *)(v23 + 32) = &unk_26EE24568;
  *(unsigned char *)(v23 + 40) = 0;
  uint64_t v24 = sub_23AB60324((uint64_t)&unk_26EE245D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v25 = sub_23AB60324((uint64_t)&unk_26EE245F8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v26 = sub_23AB60324((uint64_t)&unk_26EE24620, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v27.value._object = (void *)0x800000023AC4A9F0;
  v27.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v27, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v28 = sub_23ABBFBD4();
  LOBYTE(v21) = sub_23ABB8BA8();
  char v29 = sub_23ABBFBE0();
  uint64_t v30 = sub_23ABBFBE8();
  *((void *)&v230 + 1) = v25;
  *(void *)&long long v230 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC4A9D0, v23, (uint64_t)&unk_26EE24598, v28, v21 & 1, v29 & 1, v24, v279 + 336, v230, v30, v26, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_23AC2C700;
  *(void *)(v31 + 32) = &unk_26EE24648;
  *(unsigned char *)(v31 + 40) = 0;
  uint64_t v32 = sub_23AB60324((uint64_t)&unk_26EE246F8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v33 = sub_23AB60324((uint64_t)&unk_26EE24720, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v34.value._countAndFlagsBits = 0xD000000000000016;
  v34.value._object = (void *)0x800000023AC4AA40;
  Action.init(_:mac:)(v34, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v25) = sub_23ABB8BA8();
  LOBYTE(v26) = sub_23ABBFBE0();
  uint64_t v35 = sub_23ABBFBE8();
  uint64_t v36 = sub_23ABBFBE8();
  *((void *)&v231 + 1) = v33;
  *(void *)&long long v231 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000023, 0x800000023AC4AA10, v31, (uint64_t)&unk_26EE24688, (uint64_t)&unk_26EE246C0, v25 & 1, v26 & 1, v32, v279 + 488, v231, v35, v36, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23AC2C700;
  *(void *)(v37 + 32) = &unk_26EE24748;
  *(unsigned char *)(v37 + 40) = 0;
  uint64_t v38 = sub_23AB60324((uint64_t)&unk_26EE24800, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v39 = sub_23AB60324((uint64_t)&unk_26EE24828, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v40.value._countAndFlagsBits = 0xD000000000000010;
  v40.value._object = (void *)0x800000023AC4AA80;
  Action.init(_:mac:)(v40, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v25) = sub_23ABB8BA8();
  LOBYTE(v26) = sub_23ABBFBE0();
  uint64_t v41 = sub_23ABBFBE8();
  uint64_t v42 = sub_23ABBFBE8();
  *((void *)&v232 + 1) = v39;
  *(void *)&long long v232 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC4AA60, v37, (uint64_t)&unk_26EE24778, (uint64_t)&unk_26EE247B0, v25 & 1, v26 & 1, v38, v279 + 640, v232, v41, v42, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_23AC2C700;
  *(void *)(v43 + 32) = &unk_26EE24850;
  *(unsigned char *)(v43 + 40) = 0;
  uint64_t v267 = sub_23AB60324((uint64_t)&unk_26EE248B8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v44 = sub_23AB60324((uint64_t)&unk_26EE248E0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v45 = sub_23AB60324((uint64_t)&unk_26EE24908, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v46.value._object = (void *)0x800000023AC4AAC0;
  v46.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v46, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v47 = sub_23ABBFBD4();
  LOBYTE(v41) = sub_23ABB8BA8();
  LOBYTE(v38) = sub_23ABBFBE0();
  uint64_t v48 = sub_23ABBFBE8();
  *((void *)&v233 + 1) = v44;
  *(void *)&long long v233 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC4AAA0, v43, (uint64_t)&unk_26EE24880, v47, v41 & 1, v38 & 1, v267, v279 + 792, v233, v48, v45, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_23AC2C700;
  *(void *)(v49 + 32) = &unk_26EE24930;
  *(unsigned char *)(v49 + 40) = 0;
  uint64_t v50 = sub_23AB60324((uint64_t)&unk_26EE249E8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v51 = sub_23AB60324((uint64_t)&unk_26EE24A10, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v52 = sub_23AB60324((uint64_t)&unk_26EE24A38, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v53.value._object = (void *)0x800000023AC4AAE0;
  v53.value._countAndFlagsBits = 0xD000000000000010;
  v54.value._countAndFlagsBits = 0x64697247776F6873;
  v54.value._object = (void *)0xE800000000000000;
  Action.init(_:mac:)(v53, v54);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v47) = sub_23ABB8BA8();
  LOBYTE(v41) = sub_23ABBFBE0();
  uint64_t v55 = sub_23ABBFBE8();
  *((void *)&v234 + 1) = v51;
  *(void *)&long long v234 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x532E6D6574737953, 0xEF64697247776F68, v49, (uint64_t)&unk_26EE24960, (uint64_t)&unk_26EE24998, v47 & 1, v41 & 1, v50, v279 + 944, v234, v55, v52, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_23AC2C700;
  *(void *)(v56 + 32) = &unk_26EE24A60;
  *(unsigned char *)(v56 + 40) = 0;
  uint64_t v263 = sub_23AB60324((uint64_t)&unk_26EE24B00, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v57 = sub_23AB60324((uint64_t)&unk_26EE24B28, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v58.value._countAndFlagsBits = 0xD00000000000001BLL;
  v58.value._object = (void *)0x800000023AC4AB30;
  Action.init(_:mac:)(v58, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v51) = sub_23ABB8BA8();
  LOBYTE(v47) = sub_23ABBFBE0();
  uint64_t v59 = sub_23ABBFBE8();
  uint64_t v60 = sub_23ABBFBE8();
  *((void *)&v235 + 1) = v57;
  *(void *)&long long v235 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC4AB00, v56, (uint64_t)&unk_26EE24A90, (uint64_t)&unk_26EE24AC8, v51 & 1, v47 & 1, v263, v279 + 1096, v235, v59, v60, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_23AC2C700;
  *(void *)(v61 + 32) = &unk_26EE24B50;
  *(unsigned char *)(v61 + 40) = 0;
  uint64_t v62 = sub_23AB60324((uint64_t)&unk_26EE24C00, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v63 = sub_23AB60324((uint64_t)&unk_26EE24C28, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v64.value._countAndFlagsBits = 0xD00000000000001BLL;
  v64.value._object = (void *)0x800000023AC4AB30;
  Action.init(_:mac:)(v64, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v51) = sub_23ABB8BA8();
  LOBYTE(v47) = sub_23ABBFBE0();
  uint64_t v65 = sub_23ABBFBE8();
  uint64_t v66 = sub_23ABBFBE8();
  *((void *)&v236 + 1) = v63;
  *(void *)&long long v236 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000029, 0x800000023AC4AB50, v61, (uint64_t)&unk_26EE24B90, (uint64_t)&unk_26EE24BC8, v51 & 1, v47 & 1, v62, v279 + 1248, v236, v65, v66, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_23AC2C700;
  *(void *)(v67 + 32) = &unk_26EE24C50;
  *(unsigned char *)(v67 + 40) = 0;
  uint64_t v68 = sub_23AB60324((uint64_t)&unk_26EE24CF0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v69 = sub_23AB60324((uint64_t)&unk_26EE24D18, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v70.value._object = (void *)0x800000023AC4ABA0;
  v70.value._countAndFlagsBits = 0xD000000000000018;
  Action.init(_:mac:)(v70, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v51) = sub_23ABB8BA8();
  LOBYTE(v47) = sub_23ABBFBE0();
  uint64_t v71 = sub_23ABBFBE8();
  uint64_t v72 = sub_23ABBFBE8();
  *((void *)&v237 + 1) = v69;
  *(void *)&long long v237 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC4AB80, v67, (uint64_t)&unk_26EE24C80, (uint64_t)&unk_26EE24CB8, v51 & 1, v47 & 1, v68, v279 + 1400, v237, v71, v72, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_23AC2C700;
  *(void *)(v73 + 32) = &unk_26EE24D40;
  *(unsigned char *)(v73 + 40) = 0;
  uint64_t v74 = sub_23AB60324((uint64_t)&unk_26EE24DF8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v75 = sub_23AB60324((uint64_t)&unk_26EE24E20, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v76 = sub_23AB60324((uint64_t)&unk_26EE24E48, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v77.value._countAndFlagsBits = 0xD000000000000015;
  v77.value._object = (void *)0x800000023AC4ABF0;
  Action.init(_:mac:)(v77, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v51) = sub_23ABB8BA8();
  LOBYTE(v47) = sub_23ABBFBE0();
  uint64_t v78 = sub_23ABBFBE8();
  *((void *)&v238 + 1) = v75;
  *(void *)&long long v238 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC4ABC0, v73, (uint64_t)&unk_26EE24D70, (uint64_t)&unk_26EE24DA8, v51 & 1, v47 & 1, v74, v279 + 1552, v238, v78, v76, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_23AC2C700;
  *(void *)(v79 + 32) = &unk_26EE24E70;
  *(unsigned char *)(v79 + 40) = 0;
  uint64_t v264 = sub_23AB60324((uint64_t)&unk_26EE24F20, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v80 = sub_23AB60324((uint64_t)&unk_26EE24F48, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v81.value._countAndFlagsBits = 0xD000000000000028;
  v81.value._object = (void *)0x800000023AC4AC50;
  Action.init(_:mac:)(v81, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v47) = sub_23ABB8BA8();
  LOBYTE(v71) = sub_23ABBFBE0();
  uint64_t v82 = sub_23ABBFBE8();
  uint64_t v83 = sub_23ABBFBE8();
  *((void *)&v239 + 1) = v80;
  *(void *)&long long v239 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000035, 0x800000023AC4AC10, v79, (uint64_t)&unk_26EE24EB0, (uint64_t)&unk_26EE24EE8, v47 & 1, v71 & 1, v264, v279 + 1704, v239, v82, v83, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_23AC2C700;
  *(void *)(v84 + 32) = &unk_26EE24F70;
  *(unsigned char *)(v84 + 40) = 0;
  uint64_t v85 = sub_23AB60324((uint64_t)&unk_26EE25040, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v86 = sub_23AB60324((uint64_t)&unk_26EE25068, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v87.value._countAndFlagsBits = 0xD000000000000028;
  v87.value._object = (void *)0x800000023AC4AC50;
  Action.init(_:mac:)(v87, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v75) = sub_23ABB8BA8();
  LOBYTE(v47) = sub_23ABBFBE0();
  uint64_t v88 = sub_23ABBFBE8();
  uint64_t v89 = sub_23ABBFBE8();
  *((void *)&v240 + 1) = v86;
  *(void *)&long long v240 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000003CLL, 0x800000023AC4AC80, v84, (uint64_t)&unk_26EE24FD0, (uint64_t)&unk_26EE25008, v75 & 1, v47 & 1, v85, v279 + 1856, v240, v88, v89, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_23AC2C700;
  *(void *)(v90 + 32) = &unk_26EE25090;
  *(unsigned char *)(v90 + 40) = 0;
  uint64_t v91 = sub_23AB60324((uint64_t)&unk_26EE25140, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v92 = sub_23AB60324((uint64_t)&unk_26EE25168, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v93.value._object = (void *)0x800000023AC4AD00;
  v93.value._countAndFlagsBits = 0xD000000000000025;
  Action.init(_:mac:)(v93, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v47) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v94 = sub_23ABBFBE8();
  uint64_t v95 = sub_23ABBFBE8();
  *((void *)&v241 + 1) = v92;
  *(void *)&long long v241 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000032, 0x800000023AC4ACC0, v90, (uint64_t)&unk_26EE250D0, (uint64_t)&unk_26EE25108, v47 & 1, v88 & 1, v91, v279 + 2008, v241, v94, v95, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_23AC2C700;
  *(void *)(v96 + 32) = &unk_26EE25190;
  *(unsigned char *)(v96 + 40) = 0;
  uint64_t v268 = sub_23AB60324((uint64_t)&unk_26EE251F8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v97 = sub_23AB60324((uint64_t)&unk_26EE25220, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v98 = sub_23AB60324((uint64_t)&unk_26EE25248, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v99.value._object = (void *)0x800000023AC4AD30;
  v99.value._countAndFlagsBits = 0xD000000000000010;
  v100.value._countAndFlagsBits = 0x6469724765646968;
  v100.value._object = (void *)0xE800000000000000;
  Action.init(_:mac:)(v99, v100);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v101 = sub_23ABBFBD4();
  LOBYTE(v88) = sub_23ABB8BA8();
  LOBYTE(v73) = sub_23ABBFBE0();
  uint64_t v102 = sub_23ABBFBE8();
  *((void *)&v242 + 1) = v97;
  *(void *)&long long v242 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x482E6D6574737953, 0xEF64697247656469, v96, (uint64_t)&unk_26EE251C0, v101, v88 & 1, v73 & 1, v268, v279 + 2160, v242, v102, v98, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v103 = swift_allocObject();
  *(_OWORD *)(v103 + 16) = xmmword_23AC2C700;
  *(void *)(v103 + 32) = &unk_26EE25270;
  *(unsigned char *)(v103 + 40) = 0;
  uint64_t v269 = sub_23AB60324((uint64_t)&unk_26EE25330, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v104 = sub_23AB60324((uint64_t)&unk_26EE25358, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v105 = sub_23AB60324((uint64_t)&unk_26EE25380, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v106.value._object = (void *)0x800000023AC4AD70;
  v106.value._countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v106, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v101) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v107 = sub_23ABBFBE8();
  *((void *)&v243 + 1) = v104;
  *(void *)&long long v243 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC4AD50, v103, (uint64_t)&unk_26EE252C0, (uint64_t)&unk_26EE252F8, v101 & 1, v88 & 1, v269, v279 + 2312, v243, v107, v105, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v108 = swift_allocObject();
  *(_OWORD *)(v108 + 16) = xmmword_23AC2C700;
  *(void *)(v108 + 32) = &unk_26EE253A8;
  *(unsigned char *)(v108 + 40) = 0;
  uint64_t v109 = sub_23AB60324((uint64_t)&unk_26EE25460, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v110 = sub_23AB60324((uint64_t)&unk_26EE25488, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v111 = sub_23AB60324((uint64_t)&unk_26EE254B0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v112.value._countAndFlagsBits = 0xD000000000000011;
  v112.value._object = (void *)0x800000023AC4ADB0;
  Action.init(_:mac:)(v112, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v101) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v113 = sub_23ABBFBE8();
  *((void *)&v244 + 1) = v110;
  *(void *)&long long v244 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC4AD90, v108, (uint64_t)&unk_26EE253D8, (uint64_t)&unk_26EE25410, v101 & 1, v88 & 1, v109, v279 + 2464, v244, v113, v111, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v114 = swift_allocObject();
  *(_OWORD *)(v114 + 16) = xmmword_23AC2C700;
  *(void *)(v114 + 32) = &unk_26EE254D8;
  *(unsigned char *)(v114 + 40) = 0;
  uint64_t v270 = sub_23AB60324((uint64_t)&unk_26EE25590, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v115 = sub_23AB60324((uint64_t)&unk_26EE255B8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v116 = sub_23AB60324((uint64_t)&unk_26EE255E0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v117.value._countAndFlagsBits = 0xD000000000000011;
  v117.value._object = (void *)0x800000023AC4ADB0;
  Action.init(_:mac:)(v117, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v75) = sub_23ABB8BA8();
  LOBYTE(v101) = sub_23ABBFBE0();
  uint64_t v118 = sub_23ABBFBE8();
  *((void *)&v245 + 1) = v115;
  *(void *)&long long v245 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000026, 0x800000023AC4ADD0, v114, (uint64_t)&unk_26EE25508, (uint64_t)&unk_26EE25540, v75 & 1, v101 & 1, v270, v279 + 2616, v245, v118, v116, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = xmmword_23AC2C700;
  *(void *)(v119 + 32) = &unk_26EE25608;
  *(unsigned char *)(v119 + 40) = 0;
  uint64_t v120 = sub_23AB60324((uint64_t)&unk_26EE256A8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v121 = sub_23AB60324((uint64_t)&unk_26EE256D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v122 = sub_23AB60324((uint64_t)&unk_26EE256F8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v123.value._object = (void *)0x800000023AC4AE20;
  v123.value._countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v123, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v101) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v124 = sub_23ABBFBE8();
  *((void *)&v246 + 1) = v121;
  *(void *)&long long v246 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC4AE00, v119, (uint64_t)&unk_26EE25638, (uint64_t)&unk_26EE25670, v101 & 1, v88 & 1, v120, v279 + 2768, v246, v124, v122, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v125 = swift_allocObject();
  *(_OWORD *)(v125 + 16) = xmmword_23AC2C700;
  *(void *)(v125 + 32) = &unk_26EE25720;
  *(unsigned char *)(v125 + 40) = 0;
  uint64_t v273 = sub_23AB60324((uint64_t)&unk_26EE25788, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v126 = sub_23AB60324((uint64_t)&unk_26EE257B0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v127 = sub_23AB60324((uint64_t)&unk_26EE257D8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v128.value._countAndFlagsBits = 0xD000000000000018;
  v128.value._object = (void *)0x800000023AC4AE60;
  Action.init(_:mac:)(v128, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v129 = sub_23ABBFBD4();
  LOBYTE(v88) = sub_23ABB8BA8();
  LOBYTE(v108) = sub_23ABBFBE0();
  uint64_t v130 = sub_23ABBFBE8();
  uint64_t v131 = sub_23ABBFBE8();
  *((void *)&v247 + 1) = v127;
  *(void *)&long long v247 = v126;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC4AE40, v125, (uint64_t)&unk_26EE25750, v129, v88 & 1, v108 & 1, v273, v279 + 2920, v247, v130, v131, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_23AC2C700;
  *(void *)(v132 + 32) = &unk_26EE25800;
  *(unsigned char *)(v132 + 40) = 0;
  uint64_t v274 = sub_23AB60324((uint64_t)&unk_26EE258A0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v133 = sub_23AB60324((uint64_t)&unk_26EE258C8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v134 = sub_23AB60324((uint64_t)&unk_26EE258F0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v135 = sub_23AB60324((uint64_t)&unk_26EE25918, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v136.value._countAndFlagsBits = 0xD000000000000018;
  v136.value._object = (void *)0x800000023AC4AE60;
  Action.init(_:mac:)(v136, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v75) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v137 = sub_23ABBFBE8();
  *((void *)&v248 + 1) = v134;
  *(void *)&long long v248 = v133;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000021, 0x800000023AC4AE80, v132, (uint64_t)&unk_26EE25830, (uint64_t)&unk_26EE25868, v75 & 1, v88 & 1, v274, v279 + 3072, v248, v137, v135, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v138 = swift_allocObject();
  *(_OWORD *)(v138 + 16) = xmmword_23AC2C700;
  *(void *)(v138 + 32) = &unk_26EE25940;
  *(unsigned char *)(v138 + 40) = 0;
  uint64_t v139 = sub_23AB60324((uint64_t)&unk_26EE259E0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v140 = sub_23AB60324((uint64_t)&unk_26EE25A08, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v141 = sub_23AB60324((uint64_t)&unk_26EE25A30, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v142.value._object = (void *)0x800000023AC4AED0;
  v142.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v142, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v143 = sub_23ABBFBE8();
  *((void *)&v249 + 1) = v140;
  *(void *)&long long v249 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC4AEB0, v138, (uint64_t)&unk_26EE25970, (uint64_t)&unk_26EE259A8, v135 & 1, v88 & 1, v139, v279 + 3224, v249, v143, v141, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v144 = swift_allocObject();
  *(_OWORD *)(v144 + 16) = xmmword_23AC2C700;
  *(void *)(v144 + 32) = &unk_26EE25A58;
  *(unsigned char *)(v144 + 40) = 0;
  uint64_t v272 = sub_23AB60324((uint64_t)&unk_26EE25B28, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v145 = sub_23AB60324((uint64_t)&unk_26EE25B50, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v146 = sub_23AB60324((uint64_t)&unk_26EE25B78, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v147.value._countAndFlagsBits = 0xD00000000000002FLL;
  v147.value._object = (void *)0x800000023AC4AF10;
  Action.init(_:mac:)(v147, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v148 = sub_23ABBFBE8();
  *((void *)&v250 + 1) = v145;
  *(void *)&long long v250 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC4AEF0, v144, (uint64_t)&unk_26EE25AB8, (uint64_t)&unk_26EE25AF0, v135 & 1, v88 & 1, v272, v279 + 3376, v250, v148, v146, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v149 = swift_allocObject();
  *(_OWORD *)(v149 + 16) = xmmword_23AC2C700;
  *(void *)(v149 + 32) = &unk_26EE25BA0;
  *(unsigned char *)(v149 + 40) = 0;
  uint64_t v271 = sub_23AB60324((uint64_t)&unk_26EE25C50, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v150 = sub_23AB60324((uint64_t)&unk_26EE25C78, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v151 = sub_23AB60324((uint64_t)&unk_26EE25CA0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v152.value._object = (void *)0x800000023AC4AF60;
  v152.value._countAndFlagsBits = 0xD00000000000002FLL;
  Action.init(_:mac:)(v152, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v153 = sub_23ABBFBE8();
  *((void *)&v251 + 1) = v150;
  *(void *)&long long v251 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC4AF40, v149, (uint64_t)&unk_26EE25BE0, (uint64_t)&unk_26EE25C18, v135 & 1, v88 & 1, v271, v279 + 3528, v251, v153, v151, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v154 = swift_allocObject();
  *(_OWORD *)(v154 + 16) = xmmword_23AC2C700;
  *(void *)(v154 + 32) = &unk_26EE25CC8;
  *(unsigned char *)(v154 + 40) = 0;
  uint64_t v265 = sub_23AB60324((uint64_t)&unk_26EE25D78, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v155 = sub_23AB60324((uint64_t)&unk_26EE25DA0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v156 = sub_23AB60324((uint64_t)&unk_26EE25DC8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v157.value._object = (void *)0x800000023AC4AFB0;
  v157.value._countAndFlagsBits = 0xD00000000000002FLL;
  Action.init(_:mac:)(v157, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v158 = sub_23ABBFBE8();
  *((void *)&v252 + 1) = v155;
  *(void *)&long long v252 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC4AF90, v154, (uint64_t)&unk_26EE25D08, (uint64_t)&unk_26EE25D40, v135 & 1, v88 & 1, v265, v279 + 3680, v252, v158, v156, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v159 = swift_allocObject();
  *(_OWORD *)(v159 + 16) = xmmword_23AC2C700;
  *(void *)(v159 + 32) = &unk_26EE25DF0;
  *(unsigned char *)(v159 + 40) = 0;
  uint64_t v266 = sub_23AB60324((uint64_t)&unk_26EE25EA0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v160 = sub_23AB60324((uint64_t)&unk_26EE25EC8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v161 = sub_23AB60324((uint64_t)&unk_26EE25EF0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v285[0] = 4;
  char v284 = 4;
  v162.value._object = (void *)0x800000023AC4B000;
  v162.value._countAndFlagsBits = 0xD000000000000018;
  Action.init(_:mac:)(v162, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v163 = sub_23ABBFBE8();
  *((void *)&v253 + 1) = v160;
  *(void *)&long long v253 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC4AFE0, v159, (uint64_t)&unk_26EE25E30, (uint64_t)&unk_26EE25E68, v135 & 1, v88 & 1, v266, v279 + 3832, v253, v163, v161, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v164 = swift_allocObject();
  *(_OWORD *)(v164 + 16) = xmmword_23AC2C700;
  *(void *)(v164 + 32) = &unk_26EE25F18;
  *(unsigned char *)(v164 + 40) = 0;
  uint64_t v165 = sub_23AB60324((uint64_t)&unk_26EE25FD0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v166 = sub_23AB60324((uint64_t)&unk_26EE25FF8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v167.value._countAndFlagsBits = 0xD00000000000002ELL;
  v167.value._object = (void *)0x800000023AC4B050;
  Action.init(_:mac:)(v167, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v168 = sub_23ABBFBD4();
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v169 = sub_23ABBFBE8();
  uint64_t v170 = sub_23ABBFBE8();
  *((void *)&v254 + 1) = v166;
  *(void *)&long long v254 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002DLL, 0x800000023AC4B020, v164, (uint64_t)&unk_26EE25F98, v168, v135 & 1, v88 & 1, v165, v279 + 3984, v254, v169, v170, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v171 = swift_allocObject();
  *(_OWORD *)(v171 + 16) = xmmword_23AC2C700;
  *(void *)(v171 + 32) = &unk_26EE26020;
  *(unsigned char *)(v171 + 40) = 0;
  uint64_t v172 = sub_23AB60324((uint64_t)&unk_26EE260D8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v173 = sub_23AB60324((uint64_t)&unk_26EE26100, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v174.value._object = (void *)0x800000023AC4B0B0;
  v174.value._countAndFlagsBits = 0xD00000000000002FLL;
  Action.init(_:mac:)(v174, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v175 = sub_23ABBFBD4();
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v176 = sub_23ABBFBE8();
  uint64_t v177 = sub_23ABBFBE8();
  *((void *)&v255 + 1) = v173;
  *(void *)&long long v255 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ELL, 0x800000023AC4B080, v171, (uint64_t)&unk_26EE260A0, v175, v135 & 1, v88 & 1, v172, v279 + 4136, v255, v176, v177, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v178 = swift_allocObject();
  *(_OWORD *)(v178 + 16) = xmmword_23AC2C700;
  *(void *)(v178 + 32) = &unk_26EE26128;
  *(unsigned char *)(v178 + 40) = 0;
  uint64_t v179 = sub_23AB60324((uint64_t)&unk_26EE261E0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v180 = sub_23AB60324((uint64_t)&unk_26EE26208, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v181.value._countAndFlagsBits = 0xD00000000000002CLL;
  v181.value._object = (void *)0x800000023AC4B110;
  Action.init(_:mac:)(v181, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v182 = sub_23ABBFBD4();
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v183 = sub_23ABBFBE8();
  uint64_t v184 = sub_23ABBFBE8();
  *((void *)&v256 + 1) = v180;
  *(void *)&long long v256 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC4B0E0, v178, (uint64_t)&unk_26EE261A8, v182, v135 & 1, v88 & 1, v179, v279 + 4288, v256, v183, v184, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v185 = swift_allocObject();
  *(_OWORD *)(v185 + 16) = xmmword_23AC2C700;
  *(void *)(v185 + 32) = &unk_26EE26230;
  *(unsigned char *)(v185 + 40) = 0;
  uint64_t v186 = sub_23AB60324((uint64_t)&unk_26EE262E8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v187 = sub_23AB60324((uint64_t)&unk_26EE26310, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v188.value._object = (void *)0x800000023AC4B170;
  v188.value._countAndFlagsBits = 0xD00000000000002ELL;
  Action.init(_:mac:)(v188, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v189 = sub_23ABBFBD4();
  LOBYTE(v135) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v190 = sub_23ABBFBE8();
  uint64_t v191 = sub_23ABBFBE8();
  *((void *)&v257 + 1) = v187;
  *(void *)&long long v257 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002DLL, 0x800000023AC4B140, v185, (uint64_t)&unk_26EE262B0, v189, v135 & 1, v88 & 1, v186, v279 + 4440, v257, v190, v191, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v192 = swift_allocObject();
  *(_OWORD *)(v192 + 16) = xmmword_23AC2C700;
  *(void *)(v192 + 32) = &unk_26EE26338;
  *(unsigned char *)(v192 + 40) = 0;
  uint64_t v193 = sub_23AB60324((uint64_t)&unk_26EE263E0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v194 = sub_23AB60324((uint64_t)&unk_26EE26408, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v195.value._countAndFlagsBits = 0xD00000000000002FLL;
  v195.value._object = (void *)0x800000023AC4AF10;
  Action.init(_:mac:)(v195, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v196 = sub_23ABBFBD4();
  LOBYTE(v88) = sub_23ABB8BA8();
  LOBYTE(v190) = sub_23ABBFBE0();
  uint64_t v197 = sub_23ABBFBE8();
  uint64_t v198 = sub_23ABBFBE8();
  *((void *)&v258 + 1) = v194;
  *(void *)&long long v258 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC4B1A0, v192, (uint64_t)&unk_26EE263A8, v196, v88 & 1, v190 & 1, v193, v279 + 4592, v258, v197, v198, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v199 = swift_allocObject();
  *(_OWORD *)(v199 + 16) = xmmword_23AC2C700;
  *(void *)(v199 + 32) = &unk_26EE26430;
  *(unsigned char *)(v199 + 40) = 0;
  uint64_t v277 = sub_23AB60324((uint64_t)&unk_26EE264B8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v200 = sub_23AB60324((uint64_t)&unk_26EE264E0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v201.value._countAndFlagsBits = 0xD00000000000002FLL;
  v201.value._object = (void *)0x800000023AC4AF60;
  Action.init(_:mac:)(v201, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v202 = sub_23ABBFBD4();
  LOBYTE(v88) = sub_23ABB8BA8();
  LOBYTE(v190) = sub_23ABBFBE0();
  uint64_t v203 = sub_23ABBFBE8();
  uint64_t v204 = sub_23ABBFBE8();
  *((void *)&v259 + 1) = v200;
  *(void *)&long long v259 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC4B1C0, v199, (uint64_t)&unk_26EE26480, v202, v88 & 1, v190 & 1, v277, v279 + 4744, v259, v203, v204, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v205 = swift_allocObject();
  *(_OWORD *)(v205 + 16) = xmmword_23AC2C700;
  *(void *)(v205 + 32) = &unk_26EE26508;
  *(unsigned char *)(v205 + 40) = 0;
  uint64_t v278 = sub_23AB60324((uint64_t)&unk_26EE26590, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v206 = sub_23AB60324((uint64_t)&unk_26EE265B8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v207.value._countAndFlagsBits = 0xD00000000000002FLL;
  v207.value._object = (void *)0x800000023AC4AFB0;
  Action.init(_:mac:)(v207, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v208 = sub_23ABBFBD4();
  LOBYTE(v88) = sub_23ABB8BA8();
  LOBYTE(v190) = sub_23ABBFBE0();
  uint64_t v209 = sub_23ABBFBE8();
  uint64_t v210 = sub_23ABBFBE8();
  *((void *)&v260 + 1) = v206;
  *(void *)&long long v260 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC4B1E0, v205, (uint64_t)&unk_26EE26558, v208, v88 & 1, v190 & 1, v278, v279 + 4896, v260, v209, v210, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v211 = swift_allocObject();
  *(_OWORD *)(v211 + 16) = xmmword_23AC2C700;
  *(void *)(v211 + 32) = &unk_26EE265E0;
  *(unsigned char *)(v211 + 40) = 0;
  uint64_t v212 = sub_23AB60324((uint64_t)&unk_26EE266A0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v213 = sub_23AB60324((uint64_t)&unk_26EE266C8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v214.value._countAndFlagsBits = 0xD000000000000030;
  v214.value._object = (void *)0x800000023AC40AC0;
  Action.init(_:mac:)(v214, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  LOBYTE(v208) = sub_23ABB8BA8();
  LOBYTE(v88) = sub_23ABBFBE0();
  uint64_t v215 = sub_23ABBFBE8();
  uint64_t v216 = sub_23ABBFBE8();
  *((void *)&v261 + 1) = v213;
  *(void *)&long long v261 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC4B200, v211, (uint64_t)&unk_26EE26630, (uint64_t)&unk_26EE26668, v208 & 1, v88 & 1, v212, v279 + 5048, v261, v215, v216, v285, &v284, 0, 0, (uint64_t)&v280);
  uint64_t v217 = swift_allocObject();
  *(_OWORD *)(v217 + 16) = xmmword_23AC2C700;
  *(void *)(v217 + 32) = &unk_26EE266F0;
  *(unsigned char *)(v217 + 40) = 0;
  uint64_t v218 = sub_23AB60324((uint64_t)&unk_26EE26768, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v219 = sub_23AB60324((uint64_t)&unk_26EE26790, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v285[0] = 4;
  char v284 = 4;
  v220.value._countAndFlagsBits = 0x48657361656C6572;
  v220.value._object = (void *)0xEB00000000646C6FLL;
  Action.init(_:mac:)(v220, (Swift::String_optional)0);
  long long v280 = v282;
  long long v281 = v283;
  uint64_t v221 = sub_23ABBFBD4();
  char v222 = sub_23ABB8BA8();
  LOBYTE(v97) = sub_23ABBFBE0();
  uint64_t v223 = sub_23ABBFBE8();
  uint64_t v224 = sub_23ABBFBE8();
  *((void *)&v262 + 1) = v219;
  *(void *)&long long v262 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC4B220, v217, (uint64_t)&unk_26EE26730, v221, v222 & 1, v97 & 1, v218, v279 + 5200, v262, v223, v224, v285, &v284, 0, 0, (uint64_t)&v280);
  Swift::Bool v225 = sub_23ABB8BA8() & 1;
  v226._countAndFlagsBits = 0x7379616C7265764FLL;
  v226._object = (void *)0xE800000000000000;
  v227._countAndFlagsBits = v276;
  v227._object = v275;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62B38, v226, v227, v225, (Swift::OpaquePointer)v279);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23AB996D4()
{
  if (qword_268A5AB10 != -1) {
    swift_once();
  }
  return &stru_268A62B38;
}

#error "23AB99720: too big function (funcsize=0)"

void *sub_23ABAB710()
{
  if (qword_268A5AB18 != -1) {
    swift_once();
  }
  return &unk_268A62B68;
}

void sub_23ABAB75C()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v263 = sub_23AC2A560();
  long long v262 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v271 = swift_allocObject();
  *(_OWORD *)(v271 + 16) = xmmword_23AC2C8C0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C700;
  *(void *)(v9 + 32) = &unk_26EE267B8;
  *(unsigned char *)(v9 + 40) = 0;
  uint64_t v10 = sub_23AB60324((uint64_t)&unk_26EE26878, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v11 = sub_23AB60324((uint64_t)&unk_26EE268A0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v12 = sub_23AB60324((uint64_t)&unk_26EE268C8, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v13.value._countAndFlagsBits = 0x3A6574656C6564;
  v13.value._object = (void *)0xE700000000000000;
  Action.init(_:mac:)(v13, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  char v14 = sub_23ABB8BA8();
  char v15 = sub_23ABBFBE0();
  uint64_t v16 = sub_23ABBFBE8();
  *(void *)&long long v219 = MEMORY[0x263F8EE88];
  *((void *)&v219 + 1) = v11;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC4FDB0, v9, (uint64_t)&unk_26EE26808, (uint64_t)&unk_26EE26840, v14 & 1, v15 & 1, v10, v271 + 32, v219, v16, v12, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23AC2C700;
  *(void *)(v17 + 32) = &unk_26EE268F0;
  *(unsigned char *)(v17 + 40) = 0;
  uint64_t v18 = sub_23AB60324((uint64_t)&unk_26EE269B0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v19 = sub_23AB60324((uint64_t)&unk_26EE269D8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  v277[0] = 4;
  char v276 = 4;
  v20.value._countAndFlagsBits = 0x65446D6574737973;
  v20.value._object = (void *)0xEC0000006574656CLL;
  Action.init(_:mac:)(v20, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  LOBYTE(v12) = sub_23ABB8BA8();
  char v21 = sub_23ABBFBE0();
  uint64_t v22 = sub_23ABBFBE8();
  uint64_t v23 = sub_23ABBFBE8();
  *((void *)&v220 + 1) = v19;
  *(void *)&long long v220 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC4FDD0, v17, (uint64_t)&unk_26EE26940, (uint64_t)&unk_26EE26978, v12 & 1, v21 & 1, v18, v271 + 184, v220, v22, v23, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23AC2C700;
  *(void *)(v24 + 32) = &unk_26EE26A00;
  *(unsigned char *)(v24 + 40) = 0;
  uint64_t v25 = sub_23AB60324((uint64_t)&unk_26EE26AA0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v26 = sub_23AB60324((uint64_t)&unk_26EE26AC8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v27 = sub_23AB60324((uint64_t)&unk_26EE26AF0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v28.value._countAndFlagsBits = 0x6C416574656C6564;
  v28.value._object = (void *)0xEA00000000003A6CLL;
  v29.value._countAndFlagsBits = 0x6C416574656C6564;
  v29.value._object = (void *)0xE90000000000006CLL;
  Action.init(_:mac:)(v28, v29);
  long long v272 = v274;
  long long v273 = v275;
  char v30 = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v31 = sub_23ABBFBE8();
  *((void *)&v221 + 1) = v26;
  *(void *)&long long v221 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x6C65442E74786554, 0xEE006C6C41657465, v24, (uint64_t)&unk_26EE26A30, (uint64_t)&unk_26EE26A68, v30 & 1, v22 & 1, v25, v271 + 336, v221, v31, v27, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_23AC2C700;
  *(void *)(v32 + 32) = &unk_26EE26B18;
  *(unsigned char *)(v32 + 40) = 0;
  uint64_t v269 = sub_23AB60324((uint64_t)&unk_26EE26BB8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v33 = sub_23AB60324((uint64_t)&unk_26EE26BE0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v34 = sub_23AB60324((uint64_t)&unk_26EE26C08, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v35.value._countAndFlagsBits = 0x68507463656C6573;
  v35.value._object = (void *)0xED00003A65736172;
  Action.init(_:mac:)(v35, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  char v36 = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v37 = sub_23ABBFBE8();
  *((void *)&v222 + 1) = v33;
  *(void *)&long long v222 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000011, 0x800000023AC4FDF0, v32, (uint64_t)&unk_26EE26B48, (uint64_t)&unk_26EE26B80, v36 & 1, v22 & 1, v269, v271 + 488, v222, v37, v34, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23AC2C700;
  *(void *)(v38 + 32) = &unk_26EE26C30;
  *(unsigned char *)(v38 + 40) = 0;
  uint64_t v270 = sub_23AB60324((uint64_t)&unk_26EE26CD0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v39 = sub_23AB60324((uint64_t)&unk_26EE26CF8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v40 = sub_23AB60324((uint64_t)&unk_26EE26D20, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v41.value._countAndFlagsBits = 0xD000000000000017;
  v41.value._object = (void *)0x800000023AC4FE30;
  Action.init(_:mac:)(v41, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  char v42 = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v43 = sub_23ABBFBE8();
  *((void *)&v223 + 1) = v39;
  *(void *)&long long v223 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC4FE10, v38, (uint64_t)&unk_26EE26C60, (uint64_t)&unk_26EE26C98, v42 & 1, v22 & 1, v270, v271 + 640, v223, v43, v40, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_23AC2C700;
  *(void *)(v44 + 32) = &unk_26EE26D48;
  *(unsigned char *)(v44 + 40) = 0;
  uint64_t v268 = sub_23AB60324((uint64_t)&unk_26EE26DC0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v45 = sub_23AB60324((uint64_t)&unk_26EE26DE8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v46 = sub_23AB60324((uint64_t)&unk_26EE26E10, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v47.value._countAndFlagsBits = 0xD000000000000018;
  v48.value._countAndFlagsBits = 0xD00000000000002BLL;
  v47.value._object = (void *)0x800000023AC4FE70;
  v48.value._object = (void *)0x800000023AC4FE90;
  Action.init(_:mac:)(v47, v48);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v49 = sub_23ABBFBD4();
  LOBYTE(v22) = sub_23ABB8BA8();
  char v50 = sub_23ABBFBE0();
  uint64_t v51 = sub_23ABBFBE8();
  *((void *)&v224 + 1) = v45;
  *(void *)&long long v224 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC4FE50, v44, (uint64_t)&unk_26EE26D88, v49, v22 & 1, v50 & 1, v268, v271 + 792, v224, v51, v46, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_23AC2C700;
  *(void *)(v52 + 32) = &unk_26EE26E38;
  *(unsigned char *)(v52 + 40) = 0;
  uint64_t v264 = sub_23AB60324((uint64_t)&unk_26EE26EB0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v53 = sub_23AB60324((uint64_t)&unk_26EE26ED8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v54 = sub_23AB60324((uint64_t)&unk_26EE26F00, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v55.value._countAndFlagsBits = 0xD000000000000027;
  v56.value._object = (void *)0x800000023AC4FEE0;
  v55.value._object = (void *)0x800000023AC4FF00;
  v56.value._countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v56, v55);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v57 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v58 = sub_23ABBFBE8();
  *((void *)&v225 + 1) = v53;
  *(void *)&long long v225 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC4FEC0, v52, (uint64_t)&unk_26EE26E78, v57, v49 & 1, v22 & 1, v264, v271 + 944, v225, v58, v54, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_23AC2C700;
  *(void *)(v59 + 32) = &unk_26EE26F28;
  *(unsigned char *)(v59 + 40) = 0;
  uint64_t v265 = sub_23AB60324((uint64_t)&unk_26EE26F90, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v60 = sub_23AB60324((uint64_t)&unk_26EE26FB8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v61 = sub_23AB60324((uint64_t)&unk_26EE26FE0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v62.value._countAndFlagsBits = 0xD000000000000012;
  v62.value._object = (void *)0x800000023AC4FF50;
  Action.init(_:mac:)(v62, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v63 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v64 = sub_23ABBFBE8();
  *((void *)&v226 + 1) = v60;
  *(void *)&long long v226 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC4FF30, v59, (uint64_t)&unk_26EE26F58, v63, v49 & 1, v22 & 1, v265, v271 + 1096, v226, v64, v61, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_23AC2C700;
  *(void *)(v65 + 32) = &unk_26EE27008;
  *(unsigned char *)(v65 + 40) = 0;
  uint64_t v257 = sub_23AB60324((uint64_t)&unk_26EE27070, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v66 = sub_23AB60324((uint64_t)&unk_26EE27098, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v67 = sub_23AB60324((uint64_t)&unk_26EE270C0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v68.value._countAndFlagsBits = 0xD000000000000026;
  v69.value._object = (void *)0x800000023AC4FF90;
  v68.value._object = (void *)0x800000023AC4FFB0;
  v69.value._countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v69, v68);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v70 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v71 = sub_23ABBFBE8();
  *((void *)&v227 + 1) = v66;
  *(void *)&long long v227 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC4FF70, v65, (uint64_t)&unk_26EE27038, v70, v49 & 1, v22 & 1, v257, v271 + 1248, v227, v71, v67, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_23AC2C700;
  *(void *)(v72 + 32) = &unk_26EE270E8;
  *(unsigned char *)(v72 + 40) = 0;
  uint64_t v73 = sub_23AB60324((uint64_t)&unk_26EE27150, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v74 = sub_23AB60324((uint64_t)&unk_26EE27178, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v75 = sub_23AB60324((uint64_t)&unk_26EE271A0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v76.value._countAndFlagsBits = 0xD000000000000022;
  v76.value._object = (void *)0x800000023AC50000;
  v77.value._countAndFlagsBits = 0x654E6574656C6564;
  v77.value._object = (void *)0xEF3A64726F577478;
  Action.init(_:mac:)(v77, v76);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v78 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v79 = sub_23ABBFBE8();
  *((void *)&v228 + 1) = v74;
  *(void *)&long long v228 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC4FFE0, v72, (uint64_t)&unk_26EE27118, v78, v49 & 1, v22 & 1, v73, v271 + 1400, v228, v79, v75, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_23AC2C700;
  *(void *)(v80 + 32) = &unk_26EE271C8;
  *(unsigned char *)(v80 + 40) = 0;
  uint64_t v256 = sub_23AB60324((uint64_t)&unk_26EE27230, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v81 = sub_23AB60324((uint64_t)&unk_26EE27258, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v82 = sub_23AB60324((uint64_t)&unk_26EE27280, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v83.value._object = (void *)0x800000023AC50050;
  v83.value._countAndFlagsBits = 0xD000000000000016;
  Action.init(_:mac:)(v83, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v84 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v85 = sub_23ABBFBE8();
  *((void *)&v229 + 1) = v81;
  *(void *)&long long v229 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC50030, v80, (uint64_t)&unk_26EE271F8, v84, v49 & 1, v22 & 1, v256, v271 + 1552, v229, v85, v82, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_23AC2C700;
  *(void *)(v86 + 32) = &unk_26EE272A8;
  *(unsigned char *)(v86 + 40) = 0;
  uint64_t v255 = sub_23AB60324((uint64_t)&unk_26EE27310, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v87 = sub_23AB60324((uint64_t)&unk_26EE27338, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v88 = sub_23AB60324((uint64_t)&unk_26EE27360, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v89.value._countAndFlagsBits = 0xD00000000000002ALL;
  v90.value._object = (void *)0x800000023AC50090;
  v89.value._object = (void *)0x800000023AC500B0;
  v90.value._countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v90, v89);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v91 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v92 = sub_23ABBFBE8();
  *((void *)&v230 + 1) = v87;
  *(void *)&long long v230 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC50070, v86, (uint64_t)&unk_26EE272D8, v91, v49 & 1, v22 & 1, v255, v271 + 1704, v230, v92, v88, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_23AC2C700;
  *(void *)(v93 + 32) = &unk_26EE27388;
  *(unsigned char *)(v93 + 40) = 0;
  uint64_t v254 = sub_23AB60324((uint64_t)&unk_26EE273F0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v94 = sub_23AB60324((uint64_t)&unk_26EE27418, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v95 = sub_23AB60324((uint64_t)&unk_26EE27440, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v96.value._object = (void *)0x800000023AC50100;
  v97.value._object = (void *)0x800000023AC50120;
  v96.value._countAndFlagsBits = 0xD000000000000013;
  v97.value._countAndFlagsBits = 0xD000000000000026;
  Action.init(_:mac:)(v96, v97);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v98 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v99 = sub_23ABBFBE8();
  *((void *)&v231 + 1) = v94;
  *(void *)&long long v231 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC500E0, v93, (uint64_t)&unk_26EE273B8, v98, v49 & 1, v22 & 1, v254, v271 + 1856, v231, v99, v95, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = xmmword_23AC2C700;
  *(void *)(v100 + 32) = &unk_26EE27468;
  *(unsigned char *)(v100 + 40) = 0;
  uint64_t v101 = sub_23AB60324((uint64_t)&unk_26EE274D0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v102 = sub_23AB60324((uint64_t)&unk_26EE274F8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v103 = sub_23AB60324((uint64_t)&unk_26EE27520, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v104.value._object = (void *)0x800000023AC50170;
  v104.value._countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v104, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v105 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v106 = sub_23ABBFBE8();
  *((void *)&v232 + 1) = v102;
  *(void *)&long long v232 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC50150, v100, (uint64_t)&unk_26EE27498, v105, v49 & 1, v22 & 1, v101, v271 + 2008, v232, v106, v103, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v107 = swift_allocObject();
  *(_OWORD *)(v107 + 16) = xmmword_23AC2C700;
  *(void *)(v107 + 32) = &unk_26EE27548;
  *(unsigned char *)(v107 + 40) = 0;
  uint64_t v253 = sub_23AB60324((uint64_t)&unk_26EE275B0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v108 = sub_23AB60324((uint64_t)&unk_26EE275D8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v109 = sub_23AB60324((uint64_t)&unk_26EE27600, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v110.value._object = (void *)0x800000023AC501B0;
  v111.value._object = (void *)0x800000023AC501D0;
  v110.value._countAndFlagsBits = 0xD000000000000018;
  v111.value._countAndFlagsBits = 0xD00000000000002BLL;
  Action.init(_:mac:)(v110, v111);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v112 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v113 = sub_23ABBFBE8();
  *((void *)&v233 + 1) = v108;
  *(void *)&long long v233 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC50190, v107, (uint64_t)&unk_26EE27578, v112, v49 & 1, v22 & 1, v253, v271 + 2160, v233, v113, v109, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v114 = swift_allocObject();
  *(_OWORD *)(v114 + 16) = xmmword_23AC2C700;
  *(void *)(v114 + 32) = &unk_26EE27628;
  *(unsigned char *)(v114 + 40) = 0;
  uint64_t v115 = sub_23AB60324((uint64_t)&unk_26EE27690, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v116 = sub_23AB60324((uint64_t)&unk_26EE276B8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v117 = sub_23AB60324((uint64_t)&unk_26EE276E0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v118.value._object = (void *)0x800000023AC50220;
  v119.value._object = (void *)0x800000023AC50240;
  v118.value._countAndFlagsBits = 0xD000000000000014;
  v119.value._countAndFlagsBits = 0xD000000000000027;
  Action.init(_:mac:)(v118, v119);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v120 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v121 = sub_23ABBFBE8();
  *((void *)&v234 + 1) = v116;
  *(void *)&long long v234 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC50200, v114, (uint64_t)&unk_26EE27658, v120, v49 & 1, v22 & 1, v115, v271 + 2312, v234, v121, v117, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v122 = swift_allocObject();
  *(_OWORD *)(v122 + 16) = xmmword_23AC2C700;
  *(void *)(v122 + 32) = &unk_26EE27708;
  *(unsigned char *)(v122 + 40) = 0;
  uint64_t v251 = sub_23AB60324((uint64_t)&unk_26EE27770, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v123 = sub_23AB60324((uint64_t)&unk_26EE27798, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v124 = sub_23AB60324((uint64_t)&unk_26EE277C0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v125.value._object = (void *)0x800000023AC50290;
  v125.value._countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v125, (Swift::String_optional)0);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v126 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v127 = sub_23ABBFBE8();
  *((void *)&v235 + 1) = v123;
  *(void *)&long long v235 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC50270, v122, (uint64_t)&unk_26EE27738, v126, v49 & 1, v22 & 1, v251, v271 + 2464, v235, v127, v124, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v128 = swift_allocObject();
  *(_OWORD *)(v128 + 16) = xmmword_23AC2C700;
  *(void *)(v128 + 32) = &unk_26EE277E8;
  *(unsigned char *)(v128 + 40) = 0;
  uint64_t v252 = sub_23AB60324((uint64_t)&unk_26EE27850, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v129 = sub_23AB60324((uint64_t)&unk_26EE27878, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v130 = sub_23AB60324((uint64_t)&unk_26EE278A0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v131.value._object = (void *)0x800000023AC502D0;
  v132.value._object = (void *)0x800000023AC502F0;
  v131.value._countAndFlagsBits = 0xD000000000000013;
  v132.value._countAndFlagsBits = 0xD000000000000026;
  Action.init(_:mac:)(v131, v132);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v133 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v134 = sub_23ABBFBE8();
  *((void *)&v236 + 1) = v129;
  *(void *)&long long v236 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC502B0, v128, (uint64_t)&unk_26EE27818, v133, v49 & 1, v22 & 1, v252, v271 + 2616, v236, v134, v130, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v135 = swift_allocObject();
  *(_OWORD *)(v135 + 16) = xmmword_23AC2C700;
  *(void *)(v135 + 32) = &unk_26EE278C8;
  *(unsigned char *)(v135 + 40) = 0;
  uint64_t v248 = sub_23AB60324((uint64_t)&unk_26EE27930, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v136 = sub_23AB60324((uint64_t)&unk_26EE27958, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v137 = sub_23AB60324((uint64_t)&unk_26EE27980, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v138.value._object = (void *)0x800000023AC50340;
  v139.value._countAndFlagsBits = 0x654E6574656C6564;
  v139.value._object = (void *)0xEF3A656E694C7478;
  v138.value._countAndFlagsBits = 0xD000000000000022;
  Action.init(_:mac:)(v139, v138);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v140 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v141 = sub_23ABBFBE8();
  *((void *)&v237 + 1) = v136;
  *(void *)&long long v237 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC50320, v135, (uint64_t)&unk_26EE278F8, v140, v49 & 1, v22 & 1, v248, v271 + 2768, v237, v141, v137, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v142 = swift_allocObject();
  *(_OWORD *)(v142 + 16) = xmmword_23AC2C700;
  *(void *)(v142 + 32) = &unk_26EE279A8;
  *(unsigned char *)(v142 + 40) = 0;
  uint64_t v249 = sub_23AB60324((uint64_t)&unk_26EE27A20, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v143 = sub_23AB60324((uint64_t)&unk_26EE27A48, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v144 = sub_23AB60324((uint64_t)&unk_26EE27A70, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v145.value._countAndFlagsBits = 0xD000000000000018;
  v145.value._object = (void *)0x800000023AC4FE70;
  v146.value._countAndFlagsBits = 0xD00000000000002BLL;
  v146.value._object = (void *)0x800000023AC4FE90;
  Action.init(_:mac:)(v145, v146);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v147 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v148 = sub_23ABBFBE8();
  *((void *)&v238 + 1) = v143;
  *(void *)&long long v238 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000030, 0x800000023AC50370, v142, (uint64_t)&unk_26EE279E8, v147, v49 & 1, v22 & 1, v249, v271 + 2920, v238, v148, v144, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v149 = swift_allocObject();
  *(_OWORD *)(v149 + 16) = xmmword_23AC2C700;
  *(void *)(v149 + 32) = &unk_26EE27A98;
  *(unsigned char *)(v149 + 40) = 0;
  uint64_t v250 = sub_23AB60324((uint64_t)&unk_26EE27B00, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v150 = sub_23AB60324((uint64_t)&unk_26EE27B28, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v151 = sub_23AB60324((uint64_t)&unk_26EE27B50, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v152.value._countAndFlagsBits = 0xD000000000000014;
  v152.value._object = (void *)0x800000023AC4FEE0;
  v153.value._countAndFlagsBits = 0xD000000000000027;
  v153.value._object = (void *)0x800000023AC4FF00;
  Action.init(_:mac:)(v152, v153);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v154 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v155 = sub_23ABBFBE8();
  *((void *)&v239 + 1) = v150;
  *(void *)&long long v239 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002CLL, 0x800000023AC503B0, v149, (uint64_t)&unk_26EE27AC8, v154, v49 & 1, v22 & 1, v250, v271 + 3072, v239, v155, v151, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v156 = swift_allocObject();
  *(_OWORD *)(v156 + 16) = xmmword_23AC2C700;
  *(void *)(v156 + 32) = &unk_26EE27B78;
  *(unsigned char *)(v156 + 40) = 0;
  uint64_t v258 = sub_23AB60324((uint64_t)&unk_26EE27BE0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v157 = sub_23AB60324((uint64_t)&unk_26EE27C08, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v158 = sub_23AB60324((uint64_t)&unk_26EE27C30, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v159.value._countAndFlagsBits = 0xD000000000000013;
  v159.value._object = (void *)0x800000023AC4FF90;
  v160.value._countAndFlagsBits = 0xD000000000000026;
  v160.value._object = (void *)0x800000023AC4FFB0;
  Action.init(_:mac:)(v159, v160);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v161 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v162 = sub_23ABBFBE8();
  *((void *)&v240 + 1) = v157;
  *(void *)&long long v240 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC503E0, v156, (uint64_t)&unk_26EE27BA8, v161, v49 & 1, v22 & 1, v258, v271 + 3224, v240, v162, v158, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v163 = swift_allocObject();
  *(_OWORD *)(v163 + 16) = xmmword_23AC2C700;
  *(void *)(v163 + 32) = &unk_26EE27C58;
  *(unsigned char *)(v163 + 40) = 0;
  uint64_t v259 = sub_23AB60324((uint64_t)&unk_26EE27CC0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v164 = sub_23AB60324((uint64_t)&unk_26EE27CE8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v165 = sub_23AB60324((uint64_t)&unk_26EE27D10, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v166.value._countAndFlagsBits = 0x654E6574656C6564;
  v166.value._object = (void *)0xEF3A64726F577478;
  v167.value._countAndFlagsBits = 0xD000000000000022;
  v167.value._object = (void *)0x800000023AC50000;
  Action.init(_:mac:)(v166, v167);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v168 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v169 = sub_23ABBFBE8();
  *((void *)&v241 + 1) = v164;
  *(void *)&long long v241 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC50410, v163, (uint64_t)&unk_26EE27C88, v168, v49 & 1, v22 & 1, v259, v271 + 3376, v241, v169, v165, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v170 = swift_allocObject();
  *(_OWORD *)(v170 + 16) = xmmword_23AC2C700;
  *(void *)(v170 + 32) = &unk_26EE27D38;
  *(unsigned char *)(v170 + 40) = 0;
  uint64_t v171 = sub_23AB60324((uint64_t)&unk_26EE27DA0, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v172 = sub_23AB60324((uint64_t)&unk_26EE27DC8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v173 = sub_23AB60324((uint64_t)&unk_26EE27DF0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v174.value._countAndFlagsBits = 0xD000000000000017;
  v174.value._object = (void *)0x800000023AC50090;
  v175.value._countAndFlagsBits = 0xD00000000000002ALL;
  v175.value._object = (void *)0x800000023AC500B0;
  Action.init(_:mac:)(v174, v175);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v176 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v177 = sub_23ABBFBE8();
  *((void *)&v242 + 1) = v172;
  *(void *)&long long v242 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002FLL, 0x800000023AC50440, v170, (uint64_t)&unk_26EE27D68, v176, v49 & 1, v22 & 1, v171, v271 + 3528, v242, v177, v173, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v178 = swift_allocObject();
  *(_OWORD *)(v178 + 16) = xmmword_23AC2C700;
  *(void *)(v178 + 32) = &unk_26EE27E18;
  *(unsigned char *)(v178 + 40) = 0;
  uint64_t v260 = sub_23AB60324((uint64_t)&unk_26EE27E80, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v179 = sub_23AB60324((uint64_t)&unk_26EE27EA8, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v180 = sub_23AB60324((uint64_t)&unk_26EE27ED0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v181.value._countAndFlagsBits = 0xD000000000000013;
  v181.value._object = (void *)0x800000023AC50100;
  v182.value._countAndFlagsBits = 0xD000000000000026;
  v182.value._object = (void *)0x800000023AC50120;
  Action.init(_:mac:)(v181, v182);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v183 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v184 = sub_23ABBFBE8();
  *((void *)&v243 + 1) = v179;
  *(void *)&long long v243 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC50470, v178, (uint64_t)&unk_26EE27E48, v183, v49 & 1, v22 & 1, v260, v271 + 3680, v243, v184, v180, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v185 = swift_allocObject();
  *(_OWORD *)(v185 + 16) = xmmword_23AC2C700;
  *(void *)(v185 + 32) = &unk_26EE27EF8;
  *(unsigned char *)(v185 + 40) = 0;
  uint64_t v261 = sub_23AB60324((uint64_t)&unk_26EE27F60, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v186 = sub_23AB60324((uint64_t)&unk_26EE27F88, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v187 = sub_23AB60324((uint64_t)&unk_26EE27FB0, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v188.value._countAndFlagsBits = 0xD000000000000018;
  v188.value._object = (void *)0x800000023AC501B0;
  v189.value._countAndFlagsBits = 0xD00000000000002BLL;
  v189.value._object = (void *)0x800000023AC501D0;
  Action.init(_:mac:)(v188, v189);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v190 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v191 = sub_23ABBFBE8();
  *((void *)&v244 + 1) = v186;
  *(void *)&long long v244 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000030, 0x800000023AC504A0, v185, (uint64_t)&unk_26EE27F28, v190, v49 & 1, v22 & 1, v261, v271 + 3832, v244, v191, v187, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v192 = swift_allocObject();
  *(_OWORD *)(v192 + 16) = xmmword_23AC2C700;
  *(void *)(v192 + 32) = &unk_26EE27FD8;
  *(unsigned char *)(v192 + 40) = 0;
  uint64_t v266 = sub_23AB60324((uint64_t)&unk_26EE28040, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v193 = sub_23AB60324((uint64_t)&unk_26EE28068, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v194 = sub_23AB60324((uint64_t)&unk_26EE28090, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v195.value._countAndFlagsBits = 0xD000000000000014;
  v195.value._object = (void *)0x800000023AC50220;
  v196.value._countAndFlagsBits = 0xD000000000000027;
  v196.value._object = (void *)0x800000023AC50240;
  Action.init(_:mac:)(v195, v196);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v197 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v198 = sub_23ABBFBE8();
  *((void *)&v245 + 1) = v193;
  *(void *)&long long v245 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002CLL, 0x800000023AC504E0, v192, (uint64_t)&unk_26EE28008, v197, v49 & 1, v22 & 1, v266, v271 + 3984, v245, v198, v194, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v199 = swift_allocObject();
  *(_OWORD *)(v199 + 16) = xmmword_23AC2C700;
  *(void *)(v199 + 32) = &unk_26EE280B8;
  *(unsigned char *)(v199 + 40) = 0;
  uint64_t v267 = sub_23AB60324((uint64_t)&unk_26EE28120, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v200 = sub_23AB60324((uint64_t)&unk_26EE28148, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v201 = sub_23AB60324((uint64_t)&unk_26EE28170, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v202.value._countAndFlagsBits = 0xD000000000000013;
  v202.value._object = (void *)0x800000023AC502D0;
  v203.value._countAndFlagsBits = 0xD000000000000026;
  v203.value._object = (void *)0x800000023AC502F0;
  Action.init(_:mac:)(v202, v203);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v204 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  LOBYTE(v22) = sub_23ABBFBE0();
  uint64_t v205 = sub_23ABBFBE8();
  *((void *)&v246 + 1) = v200;
  *(void *)&long long v246 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002BLL, 0x800000023AC50510, v199, (uint64_t)&unk_26EE280E8, v204, v49 & 1, v22 & 1, v267, v271 + 4136, v246, v205, v201, v277, &v276, 0, 0, (uint64_t)&v272);
  uint64_t v206 = swift_allocObject();
  *(_OWORD *)(v206 + 16) = xmmword_23AC2C700;
  *(void *)(v206 + 32) = &unk_26EE28198;
  *(unsigned char *)(v206 + 40) = 0;
  uint64_t v207 = sub_23AB60324((uint64_t)&unk_26EE28200, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v208 = sub_23AB60324((uint64_t)&unk_26EE28228, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  uint64_t v209 = sub_23AB60324((uint64_t)&unk_26EE28250, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  v277[0] = 4;
  char v276 = 4;
  v210.value._countAndFlagsBits = 0x654E6574656C6564;
  v210.value._object = (void *)0xEF3A656E694C7478;
  v211.value._countAndFlagsBits = 0xD000000000000022;
  v211.value._object = (void *)0x800000023AC50340;
  Action.init(_:mac:)(v210, v211);
  long long v272 = v274;
  long long v273 = v275;
  uint64_t v212 = sub_23ABBFBD4();
  LOBYTE(v49) = sub_23ABB8BA8();
  char v213 = sub_23ABBFBE0();
  uint64_t v214 = sub_23ABBFBE8();
  *((void *)&v247 + 1) = v208;
  *(void *)&long long v247 = MEMORY[0x263F8EE88];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC50540, v206, (uint64_t)&unk_26EE281C8, v212, v49 & 1, v213 & 1, v207, v271 + 4288, v247, v214, v209, v277, &v276, 0, 0, (uint64_t)&v272);
  char v215 = sub_23ABB8BA8();
  v216._object = (void *)0x800000023AC4FD70;
  Swift::Bool v217 = v215 & 1;
  v216._countAndFlagsBits = 0xD000000000000010;
  v218._countAndFlagsBits = v263;
  v218._object = v262;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62B98, v216, v218, v217, (Swift::OpaquePointer)v271);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23ABAE720()
{
  if (qword_268A5AB20 != -1) {
    swift_once();
  }
  return &stru_268A62B98;
}

void sub_23ABAE76C()
{
  uint64_t v0 = (void *)sub_23AC2A540();
  int v1 = MGGetSInt32Answer();

  dword_268A62BC4 = v1;
}

uint64_t sub_23ABAE7C0()
{
  uint64_t v0 = static VCCommand.allCommands.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v30 = MEMORY[0x263F8EE78];
    sub_23AC2A6E0();
    uint64_t v2 = v1 - 1;
    for (uint64_t i = 32; ; i += 152)
    {
      long long v4 = *(_OWORD *)(v0 + i + 16);
      long long v17 = *(_OWORD *)(v0 + i);
      long long v18 = v4;
      long long v5 = *(_OWORD *)(v0 + i + 32);
      long long v6 = *(_OWORD *)(v0 + i + 48);
      long long v7 = *(_OWORD *)(v0 + i + 80);
      long long v21 = *(_OWORD *)(v0 + i + 64);
      long long v22 = v7;
      long long v19 = v5;
      long long v20 = v6;
      long long v8 = *(_OWORD *)(v0 + i + 96);
      long long v9 = *(_OWORD *)(v0 + i + 112);
      long long v10 = *(_OWORD *)(v0 + i + 128);
      uint64_t v26 = *(void *)(v0 + i + 144);
      long long v24 = v9;
      long long v25 = v10;
      long long v23 = v8;
      id v11 = objc_allocWithZone((Class)VCCommandObjC);
      sub_23ABB5304((uint64_t)&v17);
      sub_23ABB5304((uint64_t)&v17);
      id v12 = objc_msgSend(v11, sel_init);
      v27[6] = v23;
      v27[7] = v24;
      v27[8] = v25;
      uint64_t v28 = v26;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[0] = v17;
      v27[1] = v18;
      nullsub_1(v27);
      uint64_t v13 = (uint64_t)v12 + OBJC_IVAR___VCCommandObjC_representedCommand;
      sub_23ABB4C5C((uint64_t)v12 + OBJC_IVAR___VCCommandObjC_representedCommand, (uint64_t)v29);
      sub_23ABB4C5C((uint64_t)v27, v13);
      id v14 = v12;
      sub_23ABB4CDC(v29);

      sub_23ABB53EC((uint64_t)&v17);
      sub_23AC2A6C0();
      sub_23AC2A6F0();
      sub_23AC2A700();
      sub_23AC2A6D0();
      if (!v2) {
        break;
      }
      --v2;
    }
    uint64_t v15 = v30;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  qword_268A5AB40 = v15;
  return result;
}

uint64_t sub_23ABAE974()
{
  uint64_t v0 = static VCCommand.allCommands.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  if (!v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v26 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v26) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  uint64_t v3 = v1 - 1;
  uint64_t v4 = 32;
  uint64_t v5 = MEMORY[0x263F8EE78];
  while (1)
  {
    long long v6 = *(_OWORD *)(v0 + v4 + 16);
    long long v55 = *(_OWORD *)(v0 + v4);
    long long v56 = v6;
    long long v7 = *(_OWORD *)(v0 + v4 + 32);
    long long v8 = *(_OWORD *)(v0 + v4 + 48);
    long long v9 = *(_OWORD *)(v0 + v4 + 80);
    long long v59 = *(_OWORD *)(v0 + v4 + 64);
    long long v60 = v9;
    long long v57 = v7;
    long long v58 = v8;
    long long v10 = *(_OWORD *)(v0 + v4 + 96);
    long long v11 = *(_OWORD *)(v0 + v4 + 112);
    long long v12 = *(_OWORD *)(v0 + v4 + 128);
    uint64_t v64 = *(void *)(v0 + v4 + 144);
    long long v62 = v11;
    long long v63 = v12;
    long long v61 = v10;
    sub_23ABB5304((uint64_t)&v55);
    if (qword_268A5AB30 != -1) {
      swift_once();
    }
    uint64_t v13 = dword_268A62BC4 == 1 ? &unk_26EE282F0 : v2;
    id v14 = dword_268A62BC4 == 3 ? &unk_26EE282C8 : v13;
    char v15 = sub_23ABB1950((uint64_t)v14, v58);
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      break;
    }
    sub_23ABB53EC((uint64_t)&v55);
    if (!v3) {
      goto LABEL_20;
    }
LABEL_19:
    --v3;
    v4 += 152;
  }
  *(void *)&v52[0] = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23ABB15D4(0, *(void *)(v5 + 16) + 1, 1);
    uint64_t v5 = *(void *)&v52[0];
  }
  unint64_t v17 = *(void *)(v5 + 16);
  unint64_t v16 = *(void *)(v5 + 24);
  if (v17 >= v16 >> 1)
  {
    sub_23ABB15D4((char *)(v16 > 1), v17 + 1, 1);
    uint64_t v5 = *(void *)&v52[0];
  }
  *(void *)(v5 + 16) = v17 + 1;
  uint64_t v18 = v5 + 152 * v17;
  long long v19 = v56;
  *(_OWORD *)(v18 + 32) = v55;
  *(_OWORD *)(v18 + 48) = v19;
  long long v20 = v57;
  long long v21 = v58;
  long long v22 = v60;
  *(_OWORD *)(v18 + 96) = v59;
  *(_OWORD *)(v18 + 112) = v22;
  *(_OWORD *)(v18 + 64) = v20;
  *(_OWORD *)(v18 + 80) = v21;
  long long v23 = v61;
  long long v24 = v62;
  long long v25 = v63;
  *(void *)(v18 + 176) = v64;
  *(_OWORD *)(v18 + 144) = v24;
  *(_OWORD *)(v18 + 160) = v25;
  *(_OWORD *)(v18 + 128) = v23;
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  if (v3) {
    goto LABEL_19;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v5 + 16);
  if (!v26)
  {
LABEL_26:
    uint64_t result = swift_release();
    uint64_t v40 = MEMORY[0x263F8EE78];
    goto LABEL_27;
  }
LABEL_21:
  uint64_t v54 = (uint64_t)v2;
  sub_23AC2A6E0();
  uint64_t v27 = v26 - 1;
  for (uint64_t i = 32; ; i += 152)
  {
    long long v29 = *(_OWORD *)(v5 + i + 16);
    long long v42 = *(_OWORD *)(v5 + i);
    long long v43 = v29;
    long long v30 = *(_OWORD *)(v5 + i + 32);
    long long v31 = *(_OWORD *)(v5 + i + 48);
    long long v32 = *(_OWORD *)(v5 + i + 80);
    long long v46 = *(_OWORD *)(v5 + i + 64);
    long long v47 = v32;
    long long v44 = v30;
    long long v45 = v31;
    long long v33 = *(_OWORD *)(v5 + i + 96);
    long long v34 = *(_OWORD *)(v5 + i + 112);
    long long v35 = *(_OWORD *)(v5 + i + 128);
    uint64_t v51 = *(void *)(v5 + i + 144);
    long long v49 = v34;
    long long v50 = v35;
    long long v48 = v33;
    id v36 = objc_allocWithZone((Class)VCCommandObjC);
    sub_23ABB5304((uint64_t)&v42);
    sub_23ABB5304((uint64_t)&v42);
    id v37 = objc_msgSend(v36, sel_init);
    v52[6] = v48;
    v52[7] = v49;
    v52[8] = v50;
    uint64_t v53 = v51;
    v52[2] = v44;
    v52[3] = v45;
    v52[4] = v46;
    v52[5] = v47;
    v52[0] = v42;
    v52[1] = v43;
    nullsub_1(v52);
    uint64_t v38 = (uint64_t)v37 + OBJC_IVAR___VCCommandObjC_representedCommand;
    sub_23ABB4C5C((uint64_t)v37 + OBJC_IVAR___VCCommandObjC_representedCommand, (uint64_t)&v55);
    sub_23ABB4C5C((uint64_t)v52, v38);
    id v39 = v37;
    sub_23ABB4CDC((uint64_t *)&v55);

    sub_23ABB53EC((uint64_t)&v42);
    sub_23AC2A6C0();
    sub_23AC2A6F0();
    sub_23AC2A700();
    sub_23AC2A6D0();
    if (!v27) {
      break;
    }
    --v27;
  }
  uint64_t v40 = v54;
  uint64_t result = swift_release();
LABEL_27:
  qword_268A5AB50 = v40;
  return result;
}

uint64_t static VCCommandObjC.allCommandIdentifiers()()
{
  return sub_23ABB44E0(&qword_268A5AB38, (unint64_t)&qword_268A5AB40);
}

uint64_t VCCommand.rootCommandID.getter()
{
  sub_23ABB448C();
  uint64_t result = sub_23AC2A630();
  if (*(void *)(result + 16))
  {
    uint64_t v1 = *(void *)(result + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static VCCommandObjC.allCommandIdentifiersForCurrentDevice()()
{
  return sub_23ABB44E0(&qword_268A5AB48, (unint64_t)&qword_268A5AB50);
}

id sub_23ABAEE14(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  sub_23ABB44E0(a3, a4);
  uint64_t v4 = (void *)sub_23AC2A5F0();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t VCCommandObjC.commandIdentifier.getter()
{
  sub_23ABB4C5C(v0 + OBJC_IVAR___VCCommandObjC_representedCommand, (uint64_t)v3);
  sub_23ABB4C5C((uint64_t)v3, (uint64_t)&v4);
  uint64_t result = sub_23ABB4CC4((uint64_t)&v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = v4;
    swift_bridgeObjectRetain();
    return v2;
  }
  return result;
}

unint64_t VCCommandObjC.commandProperties.getter()
{
  if (qword_268A5AB30 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  if (dword_268A62BC4 == 1) {
    uint64_t v1 = &unk_26EE282A0;
  }
  if (dword_268A62BC4 == 3) {
    uint64_t v2 = &unk_26EE28278;
  }
  else {
    uint64_t v2 = v1;
  }
  uint64_t v3 = v2[2];
  if (v3)
  {
    sub_23AB60594();
    uint64_t v4 = 0;
    while (1)
    {
      v10[0] = *((unsigned char *)v2 + v4 + 32);
      v9[0] = 0;
      if (sub_23AC2A510()) {
        break;
      }
      if (v3 == ++v4) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    sub_23ABB4C5C(v0 + OBJC_IVAR___VCCommandObjC_representedCommand, (uint64_t)v9);
    sub_23ABB4C5C((uint64_t)v9, (uint64_t)v10);
    if (sub_23ABB4CC4((uint64_t)v10) != 1)
    {
      sub_23ABB4C5C((uint64_t)v9, (uint64_t)v8);
      unint64_t v5 = sub_23ABAFC50(1);
      if (v5) {
        return v5;
      }
    }
LABEL_18:
    unint64_t v6 = sub_23ABAF26C(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRelease();
    return v6;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  sub_23ABB4C5C(v0 + OBJC_IVAR___VCCommandObjC_representedCommand, (uint64_t)v9);
  sub_23ABB4C5C((uint64_t)v9, (uint64_t)v10);
  if (sub_23ABB4CC4((uint64_t)v10) == 1) {
    goto LABEL_18;
  }
  sub_23ABB4C5C((uint64_t)v9, (uint64_t)v8);
  unint64_t v5 = sub_23ABAFC50(0);
  if (!v5) {
    goto LABEL_18;
  }
  return v5;
}

unint64_t VCCommand.macOSCommandProperties.getter()
{
  return sub_23ABAFC50(1);
}

unint64_t sub_23ABAF26C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A390);
  uint64_t v2 = sub_23AC2A750();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23ABB56D8(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_23ABB1AA0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_23ABB5740(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t VCCommand.embeddedCommandProperties.getter()
{
  return sub_23ABAFC50(0);
}

id VCCommandObjC.init()()
{
  uint64_t v1 = (uint64_t)v0 + OBJC_IVAR___VCCommandObjC_representedCommand;
  sub_23ABB4C3C((uint64_t)v4);
  sub_23ABB4C5C((uint64_t)v4, v1);
  v3.receiver = v0;
  v3.super_class = (Class)VCCommandObjC;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t sub_23ABAF4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_23ABB5740((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_23ABB21D8(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23ABB5880(a1);
    sub_23ABB1BFC(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_23ABB5880((uint64_t)v9);
  }
}

uint64_t sub_23ABAF570(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  uint64_t v6 = a1 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 56);
  int64_t v42 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v37 = result;
  char v36 = a2;
  uint64_t v35 = v6;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_22;
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v14 >= v42) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v42) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v42) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 3;
          if (v14 + 3 >= v42) {
            return swift_release();
          }
          unint64_t v15 = *(void *)(v6 + 8 * v11);
          if (!v15)
          {
            int64_t v16 = v14 + 4;
            if (v16 >= v42) {
              return swift_release();
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            int64_t v11 = v16;
            if (!v15) {
              break;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_22:
    char v17 = *(unsigned char *)(*(void *)(v5 + 48) + v13);
    if (a2)
    {
      LOBYTE(v38[0]) = 4;
      LOBYTE(v40) = v17;
      sub_23AB604EC();
      uint64_t result = sub_23AC2A510();
      if (result) {
        goto LABEL_4;
      }
      LOBYTE(v38[0]) = 20;
      LOBYTE(v40) = v17;
      uint64_t result = sub_23AC2A510();
      if (result) {
        goto LABEL_4;
      }
      LOBYTE(v38[0]) = 22;
      LOBYTE(v40) = v17;
      uint64_t result = sub_23AC2A510();
      if (result) {
        goto LABEL_4;
      }
      char v18 = 32;
      goto LABEL_29;
    }
    LOBYTE(v38[0]) = 18;
    LOBYTE(v40) = v17;
    sub_23AB604EC();
    uint64_t result = sub_23AC2A510();
    if ((result & 1) == 0)
    {
      char v18 = 21;
LABEL_29:
      LOBYTE(v38[0]) = v18;
      LOBYTE(v40) = v17;
      uint64_t result = sub_23AC2A510();
      if ((result & 1) == 0)
      {
        LOBYTE(v38[0]) = v17;
        unint64_t v19 = VCCommand.Evaluation.rawValue.getter();
        sub_23ABB4E94(1, v19, v20, v21);
        swift_bridgeObjectRelease();
        uint64_t v22 = sub_23AC2A620();
        uint64_t v24 = v23;
        swift_bridgeObjectRelease();
        LOBYTE(v38[0]) = v17;
        unint64_t v25 = VCCommand.Evaluation.rawValue.getter();
        uint64_t v28 = sub_23ABB4F30(1uLL, v25, v26, v27);
        uint64_t v30 = v29;
        uint64_t v32 = v31;
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        uint64_t v40 = v22;
        uint64_t v41 = v24;
        a2 = v36;
        v38[0] = v28;
        v38[1] = v30;
        uint64_t v3 = v2;
        uint64_t v6 = v35;
        v38[2] = v32;
        uint64_t v39 = v34;
        sub_23ABB58E0();
        swift_bridgeObjectRetain();
        sub_23AC2A590();
        uint64_t v5 = v37;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v39 = MEMORY[0x263F8D4F8];
        LOBYTE(v38[0]) = 1;
        uint64_t result = sub_23ABAF4B0((uint64_t)v38, v40, v41);
      }
    }
LABEL_4:
    if (v3) {
      return swift_release();
    }
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v42) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_23ABAF914(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) == *(void *)(a2 + 16))
  {
    int64_t v3 = 0;
    uint64_t v4 = *(void *)(result + 56);
    uint64_t v16 = result + 56;
    uint64_t v5 = 1 << *(unsigned char *)(result + 32);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & v4;
    int64_t v17 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = a2 + 56;
    if ((v6 & v4) == 0) {
      goto LABEL_9;
    }
LABEL_7:
    for (v7 &= v7 - 1; ; uint64_t v7 = (v10 - 1) & v10)
    {
      sub_23AB60540();
      uint64_t v12 = sub_23AC2A4F0();
      uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v14 = v12 & ~v13;
      if (((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        return 0;
      }
      uint64_t v15 = ~v13;
      sub_23AB60594();
      while (1)
      {
        uint64_t result = sub_23AC2A510();
        if (result) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v15;
        if (((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          return 0;
        }
      }
      if (v7) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v9 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        break;
      }
      if (v9 >= v17) {
        return 1;
      }
      uint64_t v10 = *(void *)(v16 + 8 * v9);
      ++v3;
      if (!v10)
      {
        int64_t v3 = v9 + 1;
        if (v9 + 1 >= v17) {
          return 1;
        }
        uint64_t v10 = *(void *)(v16 + 8 * v3);
        if (!v10)
        {
          int64_t v3 = v9 + 2;
          if (v9 + 2 >= v17) {
            return 1;
          }
          uint64_t v10 = *(void *)(v16 + 8 * v3);
          if (!v10)
          {
            int64_t v3 = v9 + 3;
            if (v9 + 3 >= v17) {
              return 1;
            }
            uint64_t v10 = *(void *)(v16 + 8 * v3);
            if (!v10)
            {
              int64_t v11 = v9 + 4;
              if (v11 >= v17) {
                return 1;
              }
              uint64_t v10 = *(void *)(v16 + 8 * v11);
              if (!v10)
              {
                while (1)
                {
                  int64_t v3 = v11 + 1;
                  if (__OFADD__(v11, 1)) {
                    goto LABEL_33;
                  }
                  if (v3 >= v17) {
                    return 1;
                  }
                  uint64_t v10 = *(void *)(v16 + 8 * v3);
                  ++v11;
                  if (v10) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v3 = v11;
            }
          }
        }
      }
LABEL_24:
      ;
    }
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t sub_23ABAFB64(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)
    && (sub_23AB60540(),
        uint64_t v3 = sub_23AC2A4F0(),
        uint64_t v4 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v5 = v3 & ~v4,
        ((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0))
  {
    uint64_t v6 = ~v4;
    sub_23AB60594();
    do
    {
      char v7 = sub_23AC2A510();
      if (v7) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

unint64_t sub_23ABAFC50(char a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v60 = *(unsigned __int8 *)(v1 + 88);
  uint64_t v61 = *(unsigned __int8 *)(v1 + 89);
  uint64_t v6 = *(void *)(v1 + 112);
  uint64_t v58 = *(void *)(v1 + 96);
  uint64_t v59 = *(void *)(v1 + 104);
  uint64_t v7 = *(void *)(v1 + 136);
  uint64_t v55 = *(void *)(v1 + 128);
  uint64_t v56 = *(void *)(v1 + 120);
  uint64_t v8 = *(void *)(v1 + 144);
  unint64_t v9 = sub_23ABAF26C(MEMORY[0x263F8EE78]);
  uint64_t v57 = v3;
  if (!v6)
  {
    if (a1) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  *(void *)&long long v64 = v6;
  swift_bridgeObjectRetain_n();
  sub_23ABB3668((char **)&v64);
  swift_bridgeObjectRelease();
  uint64_t v10 = v64;
  uint64_t v11 = *(void *)(v64 + 16);
  if (!v11)
  {
    swift_release();
    uint64_t v7 = v53;
    uint64_t v8 = v54;
    if (a1) {
      goto LABEL_19;
    }
LABEL_20:
    uint64_t v7 = v56;
    uint64_t v8 = v55;
    if (!v55) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v50 = v5;
  uint64_t v51 = v4;
  char v12 = a1;
  unint64_t v52 = v9;
  swift_retain();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = (unsigned char *)(v10 + 48);
  do
  {
    uint64_t v16 = *((void *)v15 - 2);
    uint64_t v17 = *((void *)v15 - 1);
    int v18 = *v15;
    if (!*v15) {
      goto LABEL_4;
    }
    if (v18 != 1)
    {
      *(void *)&long long v64 = 0;
      *((void *)&v64 + 1) = 0xE000000000000000;
      sub_23ABB5750(v16, v17, v18);
      sub_23AC2A680();
      v63[0] = v64;
      sub_23AC2A5A0();
      *(void *)&long long v64 = v16;
      *((void *)&v64 + 1) = v17;
      char v65 = v18;
      sub_23AC2A710();
      sub_23ABB5768(v16, v17, v18);
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v12)
    {
LABEL_4:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v13 = v16;
      uint64_t v14 = v17;
    }
    v15 += 24;
    --v11;
  }
  while (v11);
  swift_release_n();
  if (v14)
  {
    uint64_t v66 = MEMORY[0x263F8D310];
    *(void *)&long long v64 = v13;
    *((void *)&v64 + 1) = v14;
    sub_23ABB5740(&v64, v63);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23ABB21D8(v63, 0xD000000000000013, 0x800000023AC50760, isUniquelyReferenced_nonNull_native);
    unint64_t v9 = v52;
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v9 = v52;
  }
  a1 = v12;
  uint64_t v5 = v50;
  uint64_t v4 = v51;
  uint64_t v7 = v53;
  uint64_t v8 = v54;
  if ((a1 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_19:
  if (!v8) {
    goto LABEL_20;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  uint64_t v66 = MEMORY[0x263F8D310];
  *(void *)&long long v64 = v7;
  *((void *)&v64 + 1) = v8;
  sub_23ABB5740(&v64, v63);
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  sub_23ABB21D8(v63, 0x654D6E6F69746341, 0xEC000000646F6874, v20);
  swift_bridgeObjectRelease();
LABEL_22:
  *(void *)&long long v64 = sub_23ABAF26C(MEMORY[0x263F8EE78]);
  sub_23ABAF570(v5, a1 & 1);
  unint64_t v21 = v64;
  if (*(void *)(v64 + 16))
  {
    if (a1) {
      goto LABEL_24;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v21 = sub_23ABAF26C(MEMORY[0x263F8EE78]);
    if (a1)
    {
LABEL_24:
      uint64_t v22 = v61;
      if (v60 != 4)
      {
        uint64_t v29 = v60;
        switch((int)v60)
        {
          case 1:
            goto LABEL_42;
          case 2:
            goto LABEL_41;
          case 3:
            goto LABEL_47;
          default:
            goto LABEL_40;
        }
      }
      if (v61 != 4)
      {
LABEL_44:
        uint64_t v37 = v22;
        switch((int)v22)
        {
          case 1:
            goto LABEL_50;
          case 2:
            goto LABEL_49;
          case 3:
            goto LABEL_47;
          default:
            goto LABEL_46;
        }
      }
      goto LABEL_51;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_23ABB2580((uint64_t)&unk_26EE28318, v57);
  uint64_t v24 = sub_23ABB4FE0((uint64_t)&unk_26EE28340);
  char v25 = sub_23ABAF914(v23, v24);
  swift_bridgeObjectRelease();
  swift_release();
  if (v25)
  {
    uint64_t v66 = MEMORY[0x263F8D4F8];
    LOBYTE(v64) = 1;
    sub_23ABB5740(&v64, v63);
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v62 = v21;
    uint64_t v27 = 0x7365726975716552;
    uint64_t v28 = 0xEF79616C50726143;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_23ABB2580((uint64_t)&unk_26EE28368, v57);
    uint64_t v31 = sub_23ABB4FE0((uint64_t)&unk_26EE28390);
    char v32 = sub_23ABAF914(v30, v31);
    swift_bridgeObjectRelease();
    swift_release();
    if (v32)
    {
      uint64_t v66 = MEMORY[0x263F8D4F8];
      LOBYTE(v64) = 1;
      sub_23ABB5740(&v64, v63);
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v62 = v21;
      uint64_t v27 = 0x7365726975716552;
      uint64_t v28 = 0xEC00000064615049;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_23ABB2580((uint64_t)&unk_26EE283B8, v57);
      uint64_t v34 = sub_23ABB4FE0((uint64_t)&unk_26EE283E0);
      char v35 = sub_23ABAF914(v33, v34);
      swift_bridgeObjectRelease();
      swift_release();
      if ((v35 & 1) == 0)
      {
        uint64_t v22 = v61;
        if (sub_23ABAFB64(3, v57))
        {
          uint64_t v66 = MEMORY[0x263F8D4F8];
          LOBYTE(v64) = 1;
          sub_23ABB5740(&v64, v63);
          char v48 = swift_isUniquelyReferenced_nonNull_native();
          sub_23ABB21D8(v63, 0x7374726F70707553, 0xEF79616C50726143, v48);
          swift_bridgeObjectRelease();
        }
        if ((sub_23ABAFB64(5, v57) & 1) == 0
          && (sub_23AC2A5B0() & 1) == 0
          && (sub_23AC2A5B0() & 1) == 0
          && (sub_23AC2A5B0() & 1) == 0)
        {
          uint64_t v66 = MEMORY[0x263F8D4F8];
          LOBYTE(v64) = 1;
          sub_23ABB5740(&v64, v63);
          char v49 = swift_isUniquelyReferenced_nonNull_native();
          sub_23ABB21D8(v63, 0xD000000000000016, 0x800000023AC50780, v49);
          swift_bridgeObjectRelease();
        }
        goto LABEL_36;
      }
      uint64_t v66 = MEMORY[0x263F8D4F8];
      LOBYTE(v64) = 1;
      sub_23ABB5740(&v64, v63);
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v62 = v21;
      uint64_t v27 = 0xD000000000000013;
      uint64_t v28 = 0x800000023AC50830;
    }
  }
  sub_23ABB21D8(v63, v27, v28, v26);
  unint64_t v21 = v62;
  swift_bridgeObjectRelease();
  uint64_t v22 = v61;
LABEL_36:
  if (v60 != 4)
  {
    uint64_t v29 = 1;
    switch((int)v60)
    {
      case 1:
LABEL_47:
        *(void *)&v63[0] = 0;
        *((void *)&v63[0] + 1) = 0xE000000000000000;
        sub_23AC2A680();
        sub_23AC2A5A0();
        sub_23AC2A710();
        long long v38 = v63[0];
        sub_23ABB4E40();
        uint64_t v39 = (void *)swift_allocError();
        *uint64_t v40 = v38;
        swift_willThrow();
        swift_bridgeObjectRelease();
        if (!v39) {
          goto LABEL_61;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return 0;
      case 2:
        goto LABEL_42;
      case 3:
LABEL_41:
        uint64_t v29 = 2;
        goto LABEL_42;
      default:
LABEL_40:
        uint64_t v29 = 0;
LABEL_42:
        uint64_t v66 = MEMORY[0x263F8D6C8];
        *(void *)&long long v64 = v29;
        sub_23ABB5740(&v64, v63);
        char v36 = swift_isUniquelyReferenced_nonNull_native();
        sub_23ABB21D8(v63, 0xD000000000000018, 0x800000023AC50810, v36);
        swift_bridgeObjectRelease();
        if (v22 == 4) {
          goto LABEL_51;
        }
        if (a1) {
          goto LABEL_44;
        }
        goto LABEL_45;
    }
  }
  if (v22 == 4) {
    goto LABEL_57;
  }
LABEL_45:
  uint64_t v37 = 1;
  switch((int)v22)
  {
    case 1:
      goto LABEL_47;
    case 2:
      break;
    case 3:
LABEL_49:
      uint64_t v37 = 2;
      break;
    default:
LABEL_46:
      uint64_t v37 = 0;
      break;
  }
LABEL_50:
  uint64_t v66 = MEMORY[0x263F8D6C8];
  *(void *)&long long v64 = v37;
  sub_23ABB5740(&v64, v63);
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  sub_23ABB21D8(v63, 0xD000000000000018, 0x800000023AC507F0, v41);
  swift_bridgeObjectRelease();
LABEL_51:
  if (v58 && (a1 & 1) != 0)
  {
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
    *(void *)&long long v64 = v58;
    sub_23ABB5740(&v64, v63);
    swift_bridgeObjectRetain();
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    sub_23ABB21D8(v63, 0xD00000000000001BLL, 0x800000023AC507D0, v42);
    swift_bridgeObjectRelease();
  }
  if (v59 && (a1 & 1) != 0)
  {
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
    *(void *)&long long v64 = v59;
    sub_23ABB5740(&v64, v63);
    swift_bridgeObjectRetain();
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    sub_23ABB21D8(v63, 0xD000000000000023, 0x800000023AC507A0, v43);
    swift_bridgeObjectRelease();
  }
LABEL_57:
  if (!*(void *)(v21 + 16))
  {
    swift_bridgeObjectRelease();
    unint64_t v21 = 0;
  }
LABEL_61:
  if (v21)
  {
    if (*(void *)(v21 + 16))
    {
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3A0);
      *(void *)&long long v64 = v21;
      sub_23ABB5740(&v64, v63);
      char v44 = swift_isUniquelyReferenced_nonNull_native();
      sub_23ABB21D8(v63, 0xD000000000000011, 0x800000023AC50720, v44);
    }
    swift_bridgeObjectRelease();
  }
  *(void *)&long long v64 = sub_23ABAF26C(MEMORY[0x263F8EE78]);
  sub_23ABAF570(v4, a1 & 1);
  unint64_t v45 = v64;
  if (*(void *)(v64 + 16)
    || (swift_bridgeObjectRelease(), unint64_t v45 = sub_23ABAF26C(MEMORY[0x263F8EE78]), *(void *)(v45 + 16)))
  {
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3A0);
    *(void *)&long long v64 = v45;
    sub_23ABB5740(&v64, v63);
    char v46 = swift_isUniquelyReferenced_nonNull_native();
    sub_23ABB21D8(v63, 0xD000000000000014, 0x800000023AC50700, v46);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_23ABB08A4()
{
  uint64_t v0 = static VCCommandCollection.allCommandCollections.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_23AC2A6E0();
    uint64_t v2 = (unsigned char *)(v0 + 72);
    do
    {
      uint64_t v17 = v1;
      uint64_t v3 = *((void *)v2 - 5);
      uint64_t v4 = *((void *)v2 - 4);
      uint64_t v5 = *((void *)v2 - 2);
      uint64_t v16 = *((void *)v2 - 3);
      uint64_t v6 = *((void *)v2 - 1);
      char v7 = *v2;
      v2 += 48;
      id v8 = objc_allocWithZone((Class)VCCommandCollectionObjC);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v9 = (char *)objc_msgSend(v8, sel_init);
      uint64_t v10 = &v9[OBJC_IVAR___VCCommandCollectionObjC_representedCollection];
      uint64_t v12 = *(void *)&v9[OBJC_IVAR___VCCommandCollectionObjC_representedCollection];
      uint64_t v11 = *(void *)&v9[OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 8];
      *(void *)uint64_t v10 = v3;
      *((void *)v10 + 1) = v4;
      *((void *)v10 + 2) = v16;
      *((void *)v10 + 3) = v5;
      *((void *)v10 + 4) = v6;
      v10[40] = v7;
      uint64_t v13 = v9;
      sub_23ABB54D0(v12, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_23AC2A6C0();
      sub_23AC2A6F0();
      sub_23AC2A700();
      sub_23AC2A6D0();
      uint64_t v1 = v17 - 1;
    }
    while (v17 != 1);
    uint64_t v14 = v18;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x263F8EE78];
  }
  qword_268A5AB60 = v14;
  return result;
}

uint64_t static VCCommandCollectionObjC.allCollections()()
{
  if (qword_268A5AB58 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t static VCCommandCollectionObjC.collection(withIdentifier:)(uint64_t a1, uint64_t a2)
{
  if (qword_268A5AB58 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v4 = qword_268A5AB60;
    uint64_t v18 = MEMORY[0x263F8EE78];
    if (!((unint64_t)qword_268A5AB60 >> 62))
    {
      uint64_t v5 = *(void *)((qword_268A5AB60 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v5) {
        break;
      }
      goto LABEL_4;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_23AC2A720();
    if (!v5) {
      break;
    }
LABEL_4:
    unint64_t v6 = 0;
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
    uint64_t v17 = v5;
    while ((v4 & 0xC000000000000001) != 0)
    {
      id v8 = (char *)MEMORY[0x23ECC1BC0](v6, v4);
LABEL_10:
      unint64_t v9 = v8;
      unint64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_21;
      }
      uint64_t v11 = *(void *)&v8[OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 8];
      if (v11
        && (*(void *)&v8[OBJC_IVAR___VCCommandCollectionObjC_representedCollection] == a1
          ? (BOOL v12 = v11 == a2)
          : (BOOL v12 = 0),
            v12 || (sub_23AC2A860() & 1) != 0))
      {
        sub_23AC2A6C0();
        sub_23AC2A6F0();
        sub_23AC2A700();
        sub_23AC2A6D0();
        uint64_t v5 = v17;
        uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
      }
      ++v6;
      if (v10 == v5)
      {
        uint64_t v13 = v18;
        goto LABEL_25;
      }
    }
    if (v6 < *(void *)(v7 + 16))
    {
      id v8 = (char *)*(id *)(v4 + 8 * v6 + 32);
      goto LABEL_10;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once();
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13 < 0 || (v13 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_23AC2A720();
    if (!result) {
      goto LABEL_33;
    }
LABEL_28:
    if ((v13 & 0xC000000000000001) != 0)
    {
      id v15 = (id)MEMORY[0x23ECC1BC0](0, v13);
    }
    else
    {
      if (!*(void *)(v13 + 16))
      {
        __break(1u);
        return result;
      }
      id v15 = *(id *)(v13 + 32);
    }
    id v16 = v15;
    swift_release();
    return (uint64_t)v16;
  }
  uint64_t result = *(void *)(v13 + 16);
  if (result) {
    goto LABEL_28;
  }
LABEL_33:
  swift_release();
  return 0;
}

void VCCommandCollectionObjC.commandIdentifiers.getter()
{
  if (!*(void *)(v0 + OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 8))
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 32);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_23ABB15F4(0, v2, 0);
    uint64_t v3 = v21;
    int64_t v4 = v2 - 1;
    for (uint64_t i = 32; ; i += 152)
    {
      long long v6 = *(_OWORD *)(v1 + i + 16);
      v19[0] = *(_OWORD *)(v1 + i);
      v19[1] = v6;
      long long v7 = *(_OWORD *)(v1 + i + 32);
      long long v8 = *(_OWORD *)(v1 + i + 48);
      long long v9 = *(_OWORD *)(v1 + i + 80);
      v19[4] = *(_OWORD *)(v1 + i + 64);
      v19[5] = v9;
      v19[2] = v7;
      v19[3] = v8;
      long long v10 = *(_OWORD *)(v1 + i + 96);
      long long v11 = *(_OWORD *)(v1 + i + 112);
      long long v12 = *(_OWORD *)(v1 + i + 128);
      uint64_t v20 = *(void *)(v1 + i + 144);
      v19[7] = v11;
      v19[8] = v12;
      v19[6] = v10;
      sub_23ABB5304((uint64_t)v19);
      sub_23ABB5304((uint64_t)v19);
      sub_23ABB448C();
      uint64_t v13 = (void *)sub_23AC2A630();
      if (!v13[2]) {
        break;
      }
      uint64_t v15 = v13[4];
      uint64_t v14 = v13[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_23ABB53EC((uint64_t)v19);
      sub_23ABB53EC((uint64_t)v19);
      uint64_t v21 = v3;
      unint64_t v17 = *(void *)(v3 + 16);
      unint64_t v16 = *(void *)(v3 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_23ABB15F4((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v3 = v21;
      }
      *(void *)(v3 + 16) = v17 + 1;
      uint64_t v18 = v3 + 16 * v17;
      *(void *)(v18 + 32) = v15;
      *(void *)(v18 + 40) = v14;
      if (!v4)
      {
        swift_bridgeObjectRelease();
        return;
      }
      --v4;
    }
    __break(1u);
    goto LABEL_12;
  }
}

id sub_23ABB110C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  uint64_t v5 = (void *)sub_23AC2A5F0();
  swift_bridgeObjectRelease();
  return v5;
}

void VCCommandCollectionObjC.commandIdentifiersForCurrentDevice.getter()
{
  if (!*(void *)(v0 + OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 8)) {
    goto LABEL_32;
  }
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  if (!v2)
  {
    long long v6 = (void *)MEMORY[0x263F8EE78];
    int64_t v27 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v27) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 - 1;
  uint64_t v5 = 32;
  long long v6 = v3;
  while (1)
  {
    long long v7 = *(_OWORD *)(v1 + v5 + 16);
    long long v44 = *(_OWORD *)(v1 + v5);
    long long v45 = v7;
    long long v8 = *(_OWORD *)(v1 + v5 + 32);
    long long v9 = *(_OWORD *)(v1 + v5 + 48);
    long long v10 = *(_OWORD *)(v1 + v5 + 80);
    long long v48 = *(_OWORD *)(v1 + v5 + 64);
    long long v49 = v10;
    long long v46 = v8;
    long long v47 = v9;
    long long v11 = *(_OWORD *)(v1 + v5 + 96);
    long long v12 = *(_OWORD *)(v1 + v5 + 112);
    long long v13 = *(_OWORD *)(v1 + v5 + 128);
    uint64_t v53 = *(void *)(v1 + v5 + 144);
    long long v51 = v12;
    long long v52 = v13;
    long long v50 = v11;
    sub_23ABB5304((uint64_t)&v44);
    if (qword_268A5AB30 != -1) {
      swift_once();
    }
    uint64_t v14 = dword_268A62BC4 == 1 ? &unk_26EE28430 : v3;
    uint64_t v15 = dword_268A62BC4 == 3 ? &unk_26EE28408 : v14;
    char v16 = sub_23ABB1950((uint64_t)v15, v47);
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      break;
    }
    sub_23ABB53EC((uint64_t)&v44);
    if (!v4) {
      goto LABEL_21;
    }
LABEL_20:
    --v4;
    v5 += 152;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_23ABB15D4(0, v6[2] + 1, 1);
  }
  unint64_t v18 = v6[2];
  unint64_t v17 = v6[3];
  if (v18 >= v17 >> 1) {
    sub_23ABB15D4((char *)(v17 > 1), v18 + 1, 1);
  }
  v6[2] = v18 + 1;
  unint64_t v19 = (char *)&v6[19 * v18];
  long long v20 = v45;
  *((_OWORD *)v19 + 2) = v44;
  *((_OWORD *)v19 + 3) = v20;
  long long v21 = v46;
  long long v22 = v47;
  long long v23 = v49;
  *((_OWORD *)v19 + 6) = v48;
  *((_OWORD *)v19 + 7) = v23;
  *((_OWORD *)v19 + 4) = v21;
  *((_OWORD *)v19 + 5) = v22;
  long long v24 = v50;
  long long v25 = v51;
  long long v26 = v52;
  *((void *)v19 + 22) = v53;
  *((_OWORD *)v19 + 9) = v25;
  *((_OWORD *)v19 + 10) = v26;
  *((_OWORD *)v19 + 8) = v24;
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  if (v4) {
    goto LABEL_20;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  int64_t v27 = v6[2];
  if (!v27)
  {
LABEL_30:
    swift_release();
    return;
  }
LABEL_22:
  uint64_t v43 = MEMORY[0x263F8EE78];
  sub_23ABB15F4(0, v27, 0);
  int64_t v28 = v27 - 1;
  for (uint64_t i = 4; ; i += 19)
  {
    long long v30 = *(_OWORD *)&v6[i + 2];
    long long v44 = *(_OWORD *)&v6[i];
    long long v45 = v30;
    long long v31 = *(_OWORD *)&v6[i + 4];
    long long v32 = *(_OWORD *)&v6[i + 6];
    long long v33 = *(_OWORD *)&v6[i + 10];
    long long v48 = *(_OWORD *)&v6[i + 8];
    long long v49 = v33;
    long long v46 = v31;
    long long v47 = v32;
    long long v34 = *(_OWORD *)&v6[i + 12];
    long long v35 = *(_OWORD *)&v6[i + 14];
    long long v36 = *(_OWORD *)&v6[i + 16];
    uint64_t v53 = v6[i + 18];
    long long v51 = v35;
    long long v52 = v36;
    long long v50 = v34;
    sub_23ABB5304((uint64_t)&v44);
    sub_23ABB5304((uint64_t)&v44);
    sub_23ABB448C();
    uint64_t v37 = (void *)sub_23AC2A630();
    if (!v37[2]) {
      break;
    }
    uint64_t v39 = v37[4];
    uint64_t v38 = v37[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_23ABB53EC((uint64_t)&v44);
    sub_23ABB53EC((uint64_t)&v44);
    unint64_t v41 = *(void *)(v43 + 16);
    unint64_t v40 = *(void *)(v43 + 24);
    if (v41 >= v40 >> 1) {
      sub_23ABB15F4((char *)(v40 > 1), v41 + 1, 1);
    }
    *(void *)(v43 + 16) = v41 + 1;
    uint64_t v42 = v43 + 16 * v41;
    *(void *)(v42 + 32) = v39;
    *(void *)(v42 + 40) = v38;
    if (!v28) {
      goto LABEL_30;
    }
    --v28;
  }
  __break(1u);
LABEL_32:
  __break(1u);
}

id _sSo13VCCommandObjCC32SpeechRecognitionCommandServicesEABycfC_0()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return objc_msgSend(v0, sel_init);
}

id VCCommandCollectionObjC.init()()
{
  uint64_t v1 = (_OWORD *)(v0 + OBJC_IVAR___VCCommandCollectionObjC_representedCollection);
  _OWORD *v1 = 0u;
  v1[1] = 0u;
  *(_OWORD *)((char *)v1 + 25) = 0u;
  v3.super_class = (Class)VCCommandCollectionObjC;
  return objc_msgSendSuper2(&v3, sel_init);
}

char *sub_23ABB15D4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_23ABB1614(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

char *sub_23ABB15F4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_23ABB1734(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

char *sub_23ABB1614(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
    long long v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    long long v10 = (char *)MEMORY[0x263F8EE78];
  }
  long long v12 = v10 + 32;
  long long v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8]) {
      memmove(v12, v13, 152 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_23ABB1734(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A318);
    long long v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    long long v10 = (char *)MEMORY[0x263F8EE78];
  }
  long long v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_23ABB1838(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A320);
    long long v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    long long v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  long long v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_23ABB1950(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    if (*(void *)(a2 + 16))
    {
      sub_23AB60540();
      uint64_t v6 = sub_23AC2A4F0();
      uint64_t v7 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v8 = v6 & ~v7;
      if ((*(void *)(v4 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8)) {
        break;
      }
    }
LABEL_4:
    if (++v5 == v2)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  uint64_t v9 = ~v7;
  sub_23AB60594();
  while ((sub_23AC2A510() & 1) == 0)
  {
    unint64_t v8 = (v8 + 1) & v9;
    if (((*(void *)(v4 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_23ABB1AA0(uint64_t a1, uint64_t a2)
{
  sub_23AC2A8E0();
  sub_23AC2A570();
  uint64_t v4 = sub_23AC2A900();
  return sub_23ABB1B18(a1, a2, v4);
}

unint64_t sub_23ABB1B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    long long v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23AC2A860() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        long long v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23AC2A860() & 1) == 0);
    }
  }
  return v6;
}

double sub_23ABB1BFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_23ABB1AA0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23ABB2398();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_23ABB5740((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_23ABB2000(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_23ABB1D00(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A390);
  uint64_t v6 = sub_23AC2A740();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      long long v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      long long v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_23ABB5740(v24, v35);
      }
      else
      {
        sub_23ABB5824((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_23AC2A8E0();
      sub_23AC2A570();
      uint64_t result = sub_23AC2A900();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_23ABB5740(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_23ABB2000(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_23AC2A640();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_23AC2A8E0();
        swift_bridgeObjectRetain();
        sub_23AC2A570();
        uint64_t v10 = sub_23AC2A900();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *int64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_23ABB21D8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_23ABB1AA0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_23ABB2398();
      goto LABEL_7;
    }
    sub_23ABB1D00(v15, a4 & 1);
    unint64_t v21 = sub_23ABB1AA0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_23AC2A890();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    return sub_23ABB5740(a1, v19);
  }
LABEL_13:
  sub_23ABB232C(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_23ABB232C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_23ABB5740(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_23ABB2398()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A390);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23AC2A730();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_23ABB5824(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_23ABB5740(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23ABB2580(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  _OWORD v26[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    v26[0] = a1;
    uint64_t v4 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v4)
    {
      uint64_t v23 = a1 + 32;
      v22[1] = sub_23AB60540();
      uint64_t v5 = 0;
      uint64_t v6 = v2 + 56;
      while (1)
      {
        char v7 = *(unsigned char *)(v23 + v5++);
        char v25 = v7;
        uint64_t v8 = sub_23AC2A4F0();
        uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v10 = v8 & ~v9;
        if ((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10)) {
          break;
        }
LABEL_4:
        if (v5 == v4) {
          goto LABEL_14;
        }
      }
      uint64_t v11 = ~v9;
      sub_23AB60594();
      while (1)
      {
        char v24 = *(unsigned char *)(*(void *)(v2 + 48) + v10);
        uint64_t isStackAllocationSafe = sub_23AC2A510();
        if (isStackAllocationSafe) {
          break;
        }
        unint64_t v10 = (v10 + 1) & v11;
        if (((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_4;
        }
      }
      v26[1] = v5;
      char v16 = *(unsigned char *)(v2 + 32);
      unint64_t v17 = (unint64_t)((1 << v16) + 63) >> 6;
      size_t v18 = 8 * v17;
      if ((v16 & 0x3Fu) <= 0xD
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
      {
        MEMORY[0x270FA5388](isStackAllocationSafe, v13, v14, v15);
        memcpy((char *)v22 - ((v18 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v18);
        uint64_t v19 = sub_23ABB3224((uint64_t)v22 - ((v18 + 15) & 0x3FFFFFFFFFFFFFF0), v17, v2, v10, v26);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = (void *)swift_slowAlloc();
        memcpy(v20, (const void *)(v2 + 56), v18);
        uint64_t v19 = sub_23ABB3224((uint64_t)v20, v17, v2, v10, v26);
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x23ECC2B90](v20, -1, -1);
      }
      return v19;
    }
    else
    {
LABEL_14:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t sub_23ABB2844(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t v4 = *v2;
  sub_23AB60540();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_23AC2A4F0();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v8 = ~v6;
    sub_23AB60594();
    while ((sub_23AC2A510() & 1) == 0)
    {
      unint64_t v7 = (v7 + 1) & v8;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    unsigned __int8 v10 = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned __int8 v10 = a2;
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_23ABB2C7C(a2, v7, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v10;
  return result;
}

uint64_t sub_23ABB29A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A350);
  uint64_t v3 = sub_23AC2A660();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      sub_23AB60540();
      uint64_t result = sub_23AC2A4F0();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_23ABB2C7C(uint64_t result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_23ABB29A4();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_23ABB2DF0();
      goto LABEL_12;
    }
    sub_23ABB2F84();
  }
  uint64_t v8 = *v3;
  sub_23AB60540();
  uint64_t result = sub_23AC2A4F0();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_23AB60594();
    do
    {
      uint64_t result = sub_23AC2A510();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v11 + 48) + a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_23AC2A880();
  __break(1u);
  return result;
}

void *sub_23ABB2DF0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A350);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23AC2A650();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23ABB2F84()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A350);
  uint64_t v3 = sub_23AC2A660();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    sub_23AB60540();
    uint64_t result = sub_23AC2A4F0();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23ABB3224(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v19 = (unint64_t *)result;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v7 = v6 - 1;
  unint64_t v8 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16);
  if (v8 == v9)
  {
LABEL_2:
    swift_retain();
    return sub_23ABB33E8(v19, a2, v7, a3);
  }
  else
  {
    uint64_t v11 = a3 + 56;
    while (v8 < v9)
    {
      a5[1] = v8 + 1;
      sub_23AB60540();
      uint64_t result = sub_23AC2A4F0();
      uint64_t v12 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v13 = result & ~v12;
      if ((*(void *)(v11 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
      {
        uint64_t v14 = ~v12;
        sub_23AB60594();
        while (1)
        {
          uint64_t result = sub_23AC2A510();
          if (result) {
            break;
          }
          unint64_t v13 = (v13 + 1) & v14;
          if (((*(void *)(v11 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
            goto LABEL_4;
          }
        }
        uint64_t v15 = (v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v16 = *(unint64_t *)((char *)v19 + v15);
        *(unint64_t *)((char *)v19 + v15) = v16 & ~(1 << v13);
        if ((v16 & (1 << v13)) != 0)
        {
          if (__OFSUB__(v7--, 1)) {
            goto LABEL_16;
          }
          if (!v7) {
            return MEMORY[0x263F8EE88];
          }
        }
      }
LABEL_4:
      unint64_t v8 = a5[1];
      unint64_t v9 = *(void *)(*a5 + 16);
      if (v8 == v9) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABB33E8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A350);
  uint64_t result = sub_23AC2A670();
  uint64_t v6 = result;
  char v28 = a1;
  uint64_t v29 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v29)
      {
LABEL_37:
        swift_release();
        return v6;
      }
      unint64_t v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v29) {
          goto LABEL_37;
        }
        unint64_t v16 = v28[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v29) {
            goto LABEL_37;
          }
          unint64_t v16 = v28[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v29) {
              goto LABEL_37;
            }
            unint64_t v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v29) {
                  goto LABEL_37;
                }
                unint64_t v16 = v28[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    char v18 = *(unsigned char *)(*(void *)(a4 + 48) + v14);
    sub_23AB60540();
    uint64_t result = sub_23AC2A4F0();
    uint64_t v19 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(unsigned char *)(*(void *)(v6 + 48) + v22) = v18;
    ++*(void *)(v6 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23ABB3668(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_23ABB42D8((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_23ABB36D4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23ABB36D4(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_23AC2A850();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_133;
    }
    if (v3) {
      return sub_23ABB3E00(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_132;
  }
  uint64_t v94 = result;
  uint64_t v91 = a1;
  if (v3 <= 1)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v98 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_98:
      uint64_t result = v10;
      uint64_t v93 = v7;
      if (v11 >= 2)
      {
        uint64_t v84 = *v91;
        do
        {
          unint64_t v85 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_127;
          }
          if (!v84) {
            goto LABEL_140;
          }
          uint64_t v86 = result;
          uint64_t v87 = *(void *)(result + 32 + 16 * v85);
          uint64_t v88 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
          uint64_t result = sub_23ABB3F0C((char *)(v84 + 24 * v87), (char *)(v84 + 24 * *(void *)(result + 32 + 16 * (v11 - 1))), v84 + 24 * v88, v98);
          if (v1) {
            break;
          }
          if (v88 < v87) {
            goto LABEL_128;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_23ABB42C4(v86);
            uint64_t v86 = result;
          }
          if (v85 >= *(void *)(v86 + 16)) {
            goto LABEL_129;
          }
          Swift::String_optional v89 = (void *)(v86 + 32 + 16 * v85);
          *Swift::String_optional v89 = v87;
          v89[1] = v88;
          unint64_t v90 = *(void *)(v86 + 16);
          if (v11 > v90) {
            goto LABEL_130;
          }
          memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v90 - v11));
          uint64_t result = v86;
          *(void *)(v86 + 16) = v90 - 1;
          unint64_t v11 = v90 - 1;
        }
        while (v90 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)(v93 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v93 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = sub_23AC2A600();
    *(void *)(result + 16) = v6;
    uint64_t v93 = result;
    uint64_t v98 = (char *)(result + 32);
  }
  uint64_t v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v92 = *a1 + 40;
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t v95 = v3;
  while (1)
  {
    uint64_t v12 = v8++;
    if (v8 < v3)
    {
      sub_23ABB5780();
      uint64_t result = sub_23AC2A500();
      int v13 = result;
      uint64_t v8 = v12 + 2;
      if (v12 + 2 < v3)
      {
        uint64_t v14 = v92 + 24 * v12;
        while (1)
        {
          uint64_t result = sub_23AC2A500();
          if ((v13 ^ result)) {
            break;
          }
          ++v8;
          v14 += 24;
          if (v3 == v8)
          {
            uint64_t v8 = v3;
            break;
          }
        }
      }
      if (v13)
      {
        if (v8 < v12) {
          goto LABEL_134;
        }
        if (v12 < v8)
        {
          uint64_t v15 = 24 * v8;
          uint64_t v16 = 24 * v12;
          uint64_t v17 = v8;
          uint64_t v18 = v12;
          do
          {
            if (v18 != --v17)
            {
              if (!v9) {
                goto LABEL_139;
              }
              uint64_t v19 = v9 + v16;
              uint64_t v20 = v9 + v15;
              char v21 = *(unsigned char *)(v9 + v16 + 16);
              long long v22 = *(_OWORD *)(v9 + v16);
              uint64_t v23 = *(void *)(v9 + v15 - 8);
              *(_OWORD *)uint64_t v19 = *(_OWORD *)(v9 + v15 - 24);
              *(void *)(v19 + 16) = v23;
              *(_OWORD *)(v20 - 24) = v22;
              *(unsigned char *)(v20 - 8) = v21;
            }
            ++v18;
            v15 -= 24;
            v16 += 24;
          }
          while (v18 < v17);
        }
      }
    }
    if (v8 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v8, v12)) {
      goto LABEL_131;
    }
    if (v8 - v12 >= v94) {
      goto LABEL_47;
    }
    if (__OFADD__(v12, v94)) {
      goto LABEL_135;
    }
    uint64_t v24 = v12 + v94 >= v3 ? v3 : v12 + v94;
    if (v24 < v12) {
      break;
    }
    if (v8 != v24)
    {
      uint64_t v96 = v12;
      sub_23ABB5780();
      uint64_t v25 = v9 + 24 * v8;
      do
      {
        uint64_t v26 = v96;
        uint64_t v27 = v25;
        do
        {
          uint64_t result = sub_23AC2A500();
          if ((result & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_137;
          }
          char v28 = *(unsigned char *)(v27 + 16);
          long long v29 = *(_OWORD *)v27;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)(v27 - 24);
          *(void *)(v27 + 16) = *(void *)(v27 - 8);
          *(unsigned char *)(v27 - 8) = v28;
          *(_OWORD *)(v27 - 24) = v29;
          v27 -= 24;
          ++v26;
        }
        while (v8 != v26);
        ++v8;
        v25 += 24;
      }
      while (v8 != v24);
      uint64_t v8 = v24;
      uint64_t v12 = v96;
    }
LABEL_47:
    if (v8 < v12) {
      goto LABEL_126;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_23ABB41C8(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
      uint64_t v10 = result;
    }
    unint64_t v31 = *(void *)(v10 + 16);
    unint64_t v30 = *(void *)(v10 + 24);
    unint64_t v11 = v31 + 1;
    if (v31 >= v30 >> 1)
    {
      uint64_t result = (uint64_t)sub_23ABB41C8((char *)(v30 > 1), v31 + 1, 1, (char *)v10);
      uint64_t v10 = result;
    }
    *(void *)(v10 + 16) = v11;
    uint64_t v32 = v10 + 32;
    int64_t v33 = (uint64_t *)(v10 + 32 + 16 * v31);
    uint64_t *v33 = v12;
    v33[1] = v8;
    if (v31)
    {
      uint64_t v97 = v8;
      while (1)
      {
        unint64_t v34 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v39 = v32 + 16 * v11;
          uint64_t v40 = *(void *)(v39 - 64);
          uint64_t v41 = *(void *)(v39 - 56);
          BOOL v45 = __OFSUB__(v41, v40);
          uint64_t v42 = v41 - v40;
          if (v45) {
            goto LABEL_115;
          }
          uint64_t v44 = *(void *)(v39 - 48);
          uint64_t v43 = *(void *)(v39 - 40);
          BOOL v45 = __OFSUB__(v43, v44);
          uint64_t v37 = v43 - v44;
          char v38 = v45;
          if (v45) {
            goto LABEL_116;
          }
          unint64_t v46 = v11 - 2;
          long long v47 = (uint64_t *)(v32 + 16 * (v11 - 2));
          uint64_t v49 = *v47;
          uint64_t v48 = v47[1];
          BOOL v45 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          if (v45) {
            goto LABEL_117;
          }
          BOOL v45 = __OFADD__(v37, v50);
          uint64_t v51 = v37 + v50;
          if (v45) {
            goto LABEL_119;
          }
          if (v51 >= v42)
          {
            Swift::String_optional v69 = (uint64_t *)(v32 + 16 * v34);
            uint64_t v71 = *v69;
            uint64_t v70 = v69[1];
            BOOL v45 = __OFSUB__(v70, v71);
            uint64_t v72 = v70 - v71;
            if (v45) {
              goto LABEL_125;
            }
            BOOL v62 = v37 < v72;
            goto LABEL_85;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v63 = *(void *)(v10 + 32);
            uint64_t v64 = *(void *)(v10 + 40);
            BOOL v45 = __OFSUB__(v64, v63);
            uint64_t v56 = v64 - v63;
            char v57 = v45;
            goto LABEL_79;
          }
          uint64_t v36 = *(void *)(v10 + 32);
          uint64_t v35 = *(void *)(v10 + 40);
          BOOL v45 = __OFSUB__(v35, v36);
          uint64_t v37 = v35 - v36;
          char v38 = v45;
        }
        if (v38) {
          goto LABEL_118;
        }
        unint64_t v46 = v11 - 2;
        long long v52 = (uint64_t *)(v32 + 16 * (v11 - 2));
        uint64_t v54 = *v52;
        uint64_t v53 = v52[1];
        BOOL v55 = __OFSUB__(v53, v54);
        uint64_t v56 = v53 - v54;
        char v57 = v55;
        if (v55) {
          goto LABEL_120;
        }
        uint64_t v58 = (uint64_t *)(v32 + 16 * v34);
        uint64_t v60 = *v58;
        uint64_t v59 = v58[1];
        BOOL v45 = __OFSUB__(v59, v60);
        uint64_t v61 = v59 - v60;
        if (v45) {
          goto LABEL_122;
        }
        if (__OFADD__(v56, v61)) {
          goto LABEL_124;
        }
        if (v56 + v61 >= v37)
        {
          BOOL v62 = v37 < v61;
LABEL_85:
          if (v62) {
            unint64_t v34 = v46;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v57) {
          goto LABEL_121;
        }
        char v65 = (uint64_t *)(v32 + 16 * v34);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        BOOL v45 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v45) {
          goto LABEL_123;
        }
        if (v68 < v56) {
          goto LABEL_15;
        }
LABEL_87:
        unint64_t v73 = v34 - 1;
        if (v34 - 1 >= v11)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        uint64_t v74 = v9;
        if (!v9) {
          goto LABEL_138;
        }
        uint64_t v75 = v10;
        Swift::String_optional v76 = (uint64_t *)(v32 + 16 * v73);
        uint64_t v77 = *v76;
        uint64_t v78 = v32;
        unint64_t v79 = v34;
        uint64_t v80 = (void *)(v32 + 16 * v34);
        uint64_t v81 = v80[1];
        uint64_t v82 = v74;
        uint64_t result = sub_23ABB3F0C((char *)(v74 + 24 * *v76), (char *)(v74 + 24 * *v80), v74 + 24 * v81, v98);
        if (v1) {
          goto LABEL_95;
        }
        if (v81 < v77) {
          goto LABEL_112;
        }
        if (v79 > *(void *)(v75 + 16)) {
          goto LABEL_113;
        }
        *Swift::String_optional v76 = v77;
        *(void *)(v78 + 16 * v73 + 8) = v81;
        unint64_t v83 = *(void *)(v75 + 16);
        if (v79 >= v83) {
          goto LABEL_114;
        }
        uint64_t v10 = v75;
        unint64_t v11 = v83 - 1;
        uint64_t result = (uint64_t)memmove(v80, v80 + 2, 16 * (v83 - 1 - v79));
        uint64_t v32 = v78;
        *(void *)(v75 + 16) = v83 - 1;
        uint64_t v9 = v82;
        uint64_t v8 = v97;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    uint64_t v3 = v95;
    if (v8 >= v95)
    {
      uint64_t v7 = v93;
      goto LABEL_98;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
  return result;
}

uint64_t sub_23ABB3E00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = *a4;
    sub_23ABB5780();
    uint64_t v7 = (long long *)(v6 + 24 * v4);
LABEL_5:
    uint64_t v8 = v12;
    uint64_t v9 = v7;
    while (1)
    {
      uint64_t result = sub_23AC2A500();
      if ((result & 1) == 0)
      {
LABEL_4:
        ++v4;
        uint64_t v7 = (long long *)((char *)v7 + 24);
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v6) {
        break;
      }
      char v10 = *((unsigned char *)v9 + 16);
      long long v11 = *v9;
      *uint64_t v9 = *(long long *)((char *)v9 - 24);
      *((void *)v9 + 2) = *((void *)v9 - 1);
      *((unsigned char *)v9 - 8) = v10;
      *(long long *)((char *)v9 - 24) = v11;
      uint64_t v9 = (long long *)((char *)v9 - 24);
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABB3F0C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 24;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 24;
  if (v9 >= v11)
  {
    uint64_t v17 = 24 * v11;
    if (a4 != __src || &__src[v17] <= a4) {
      memmove(a4, __src, 24 * v11);
    }
    int v13 = &v4[v17];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_37;
    }
    sub_23ABB5780();
    unint64_t v18 = a3 - 24;
    while (1)
    {
      uint64_t v19 = (char *)(v18 + 24);
      uint64_t v20 = v6 - 24;
      if (sub_23AC2A500())
      {
        if (v19 != v6)
        {
          v6 -= 24;
LABEL_34:
          long long v22 = *(_OWORD *)v20;
          *(void *)(v18 + 16) = *((void *)v20 + 2);
          *(_OWORD *)unint64_t v18 = v22;
          goto LABEL_35;
        }
        BOOL v21 = v18 >= (unint64_t)v6;
        v6 -= 24;
        if (v21) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v20 = v13 - 24;
        if (v19 != v13)
        {
          v13 -= 24;
          goto LABEL_34;
        }
        BOOL v21 = v18 >= (unint64_t)v13;
        v13 -= 24;
        if (v21) {
          goto LABEL_34;
        }
      }
LABEL_35:
      if (v6 > v7)
      {
        v18 -= 24;
        if (v13 > v4) {
          continue;
        }
      }
      goto LABEL_37;
    }
  }
  size_t v12 = 24 * v9;
  if (a4 != __dst || &__dst[v12] <= a4) {
    memmove(a4, __dst, v12);
  }
  int v13 = &v4[v12];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    sub_23ABB5780();
    while ((sub_23AC2A500() & 1) != 0)
    {
      uint64_t v14 = v6;
      BOOL v15 = v7 == v6;
      v6 += 24;
      if (!v15) {
        goto LABEL_13;
      }
LABEL_14:
      v7 += 24;
      if (v4 >= v13 || (unint64_t)v6 >= a3) {
        goto LABEL_16;
      }
    }
    uint64_t v14 = v4;
    BOOL v15 = v7 == v4;
    v4 += 24;
    if (v15) {
      goto LABEL_14;
    }
LABEL_13:
    long long v16 = *(_OWORD *)v14;
    *((void *)v7 + 2) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v7 = v16;
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v6 = v7;
LABEL_37:
  size_t v23 = 24 * ((v13 - v4) / 24);
  if (v6 != v4 || v6 >= &v4[v23]) {
    memmove(v6, v4, v23);
  }
  return 1;
}

char *sub_23ABB41C8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3B0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23ABB42C4(uint64_t a1)
{
  return sub_23ABB41C8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_23ABB42D8(uint64_t a1)
{
  return sub_23ABB1838(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23ABB42EC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      unint64_t v16 = v5;
      unint64_t v7 = 0;
      unint64_t v8 = v5 & 0xC000000000000001;
      uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v5 & 0xC000000000000001;
      while (v8)
      {
        uint64_t v10 = (char *)MEMORY[0x23ECC1BC0](v7, v5);
LABEL_9:
        int64_t v11 = v10;
        unint64_t v12 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_20;
        }
        uint64_t v13 = *(void *)&v10[OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 8];
        if (v13
          && (*(void *)&v10[OBJC_IVAR___VCCommandCollectionObjC_representedCollection] == a2
            ? (BOOL v14 = v13 == a3)
            : (BOOL v14 = 0),
              v14 || (sub_23AC2A860() & 1) != 0))
        {
          sub_23AC2A6C0();
          sub_23AC2A6F0();
          sub_23AC2A700();
          sub_23AC2A6D0();
          unint64_t v5 = v16;
          unint64_t v8 = v17;
        }
        else
        {
        }
        ++v7;
        if (v12 == v6) {
          return v18;
        }
      }
      if (v7 < *(void *)(v9 + 16)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v6 = sub_23AC2A720();
      if (!v6) {
        return MEMORY[0x263F8EE78];
      }
    }
    uint64_t v10 = (char *)*(id *)(v5 + 8 * v7 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x263F8EE78];
}

unint64_t sub_23ABB448C()
{
  unint64_t result = qword_268A5A368;
  if (!qword_268A5A368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A368);
  }
  return result;
}

uint64_t sub_23ABB44E0(void *a1, unint64_t a2)
{
  if (*a1 != -1) {
    goto LABEL_17;
  }
LABEL_2:
  uint64_t v3 = *(void *)a2;
  if (*(void *)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_23AC2A720();
    if (v4) {
      goto LABEL_4;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_19;
  }
LABEL_4:
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)sub_23ABB15F4(0, v4 & ~(v4 >> 63), 0);
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = v18;
    if ((v3 & 0xC000000000000001) != 0)
    {
LABEL_6:
      id v8 = (id)MEMORY[0x23ECC1BC0](v6, v3);
      goto LABEL_8;
    }
    while (1)
    {
      id v8 = *(id *)(v3 + 8 * v6 + 32);
LABEL_8:
      uint64_t v9 = v8;
      sub_23ABB4C5C((uint64_t)v8 + OBJC_IVAR___VCCommandObjC_representedCommand, (uint64_t)v16);
      sub_23ABB4C5C((uint64_t)v16, (uint64_t)&v17);
      uint64_t result = sub_23ABB4CC4((uint64_t)&v17);
      if (result == 1) {
        break;
      }
      sub_23ABB4C5C((uint64_t)v16, (uint64_t)v15);
      sub_23ABB5304((uint64_t)v15);
      sub_23ABB448C();
      uint64_t v10 = (void *)sub_23AC2A630();
      if (!v10[2])
      {
        __break(1u);
LABEL_17:
        swift_once();
        goto LABEL_2;
      }
      uint64_t v12 = v10[4];
      uint64_t v11 = v10[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_23ABB4CDC(v16);

      uint64_t v18 = v7;
      a2 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (a2 >= v13 >> 1)
      {
        sub_23ABB15F4((char *)(v13 > 1), a2 + 1, 1);
        uint64_t v7 = v18;
      }
      *(void *)(v7 + 16) = a2 + 1;
      uint64_t v14 = v7 + 16 * a2;
      *(void *)(v14 + 32) = v12;
      *(void *)(v14 + 40) = v11;
      if (v4 - 1 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
      ++v6;
      if ((v3 & 0xC000000000000001) != 0) {
        goto LABEL_6;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t _sSo13VCCommandObjCC32SpeechRecognitionCommandServicesE7command14withIdentifierABSgSS_tFZ_0(uint64_t a1, uint64_t a2)
{
  v38[0] = a1;
  v38[1] = a2;
  v37[0] = 95;
  v37[1] = 0xE100000000000000;
  sub_23ABB448C();
  uint64_t v3 = (void *)sub_23AC2A630();
  if (!v3[2]) {
    goto LABEL_36;
  }
  uint64_t v2 = v3[5];
  uint64_t v35 = v3[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (qword_268A5AB48 != -1) {
    goto LABEL_37;
  }
  while (1)
  {
    uint64_t v4 = qword_268A5AB50;
    unint64_t v39 = (void *)MEMORY[0x263F8EE78];
    if ((unint64_t)qword_268A5AB50 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_23AC2A720();
    }
    else
    {
      uint64_t v5 = *(void *)((qword_268A5AB50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v6 = (char *)MEMORY[0x263F8EE78];
    if (v5)
    {
      unint64_t v7 = 0;
      unint64_t v8 = v4 & 0xC000000000000001;
      uint64_t v9 = v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v10 = &OBJC_IVAR___SRCSTextEditing__delayAfterSelectionBeforeExecutingAction;
      uint64_t v33 = v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v34 = v4;
      while (1)
      {
        if (v8)
        {
          id v11 = (id)MEMORY[0x23ECC1BC0](v7, v4);
        }
        else
        {
          if (v7 >= *(void *)(v9 + 16)) {
            goto LABEL_33;
          }
          id v11 = *(id *)(v4 + 8 * v7 + 32);
        }
        uint64_t v12 = v11;
        unint64_t v13 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_34;
        }
        sub_23ABB4C5C((uint64_t)v11 + *((void *)v10 + 111), (uint64_t)v37);
        sub_23ABB4C5C((uint64_t)v37, (uint64_t)v38);
        if (sub_23ABB4CC4((uint64_t)v38) != 1) {
          break;
        }

LABEL_8:
        ++v7;
        if (v13 == v5)
        {
          unint64_t v20 = (unint64_t)v39;
          uint64_t v6 = (char *)MEMORY[0x263F8EE78];
          goto LABEL_27;
        }
      }
      uint64_t v14 = v5;
      sub_23ABB4C5C((uint64_t)v37, (uint64_t)&v36);
      sub_23ABB5304((uint64_t)&v36);
      BOOL v15 = (void *)sub_23AC2A630();
      if (!v15[2]) {
        goto LABEL_35;
      }
      uint64_t v16 = v15[4];
      uint64_t v17 = v15[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_23ABB4CDC(v37);
      if (v16 == v35 && v17 == v2)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v19 = sub_23AC2A860();
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {

LABEL_23:
          uint64_t v5 = v14;
          uint64_t v9 = v33;
          uint64_t v4 = v34;
          uint64_t v10 = &OBJC_IVAR___SRCSTextEditing__delayAfterSelectionBeforeExecutingAction;
          goto LABEL_8;
        }
      }
      sub_23AC2A6C0();
      sub_23AC2A6F0();
      sub_23AC2A700();
      sub_23AC2A6D0();
      goto LABEL_23;
    }
    unint64_t v20 = MEMORY[0x263F8EE78];
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 0x8000000000000000) != 0 || (v20 & 0x4000000000000000) != 0) {
      break;
    }
    if (!*(void *)(v20 + 16)) {
      goto LABEL_40;
    }
LABEL_30:
    if ((v20 & 0xC000000000000001) != 0) {
      goto LABEL_75;
    }
    if (*(void *)(v20 + 16)) {
      goto LABEL_72;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once();
  }
  if (sub_23AC2A720()) {
    goto LABEL_30;
  }
LABEL_40:
  swift_release();
  if (qword_268A5AB38 != -1) {
    goto LABEL_61;
  }
LABEL_41:
  uint64_t v21 = qword_268A5AB40;
  uint64_t v36 = v6;
  if (!((unint64_t)qword_268A5AB40 >> 62))
  {
    uint64_t v22 = *(void *)((qword_268A5AB40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v22) {
      goto LABEL_66;
    }
    goto LABEL_43;
  }
  if (qword_268A5AB40 < 0) {
    uint64_t v6 = (char *)qword_268A5AB40;
  }
  else {
    uint64_t v6 = (char *)(qword_268A5AB40 & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_23AC2A720();
  if (v22)
  {
LABEL_43:
    unint64_t v23 = 0;
    while (1)
    {
      if ((v21 & 0xC000000000000001) != 0)
      {
        uint64_t v24 = (char *)MEMORY[0x23ECC1BC0](v23, v21);
      }
      else
      {
        if (v23 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          swift_once();
          goto LABEL_41;
        }
        uint64_t v24 = (char *)*(id *)(v21 + 8 * v23 + 32);
      }
      uint64_t v25 = v24;
      unint64_t v26 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        goto LABEL_60;
      }
      uint64_t v6 = &v24[OBJC_IVAR___VCCommandObjC_representedCommand];
      sub_23ABB4C5C((uint64_t)&v24[OBJC_IVAR___VCCommandObjC_representedCommand], (uint64_t)v37);
      sub_23ABB4C5C((uint64_t)v37, (uint64_t)v38);
      if (sub_23ABB4CC4((uint64_t)v38) != 1
        && (*(void *)v6 == a1 ? (BOOL v27 = *((void *)v6 + 1) == a2) : (BOOL v27 = 0), v27 || (sub_23AC2A860() & 1) != 0))
      {
        sub_23AC2A6C0();
        uint64_t v6 = (char *)*((void *)v36 + 2);
        sub_23AC2A6F0();
        sub_23AC2A700();
        sub_23AC2A6D0();
      }
      else
      {
      }
      ++v23;
      if (v26 == v22)
      {
        unint64_t v20 = (unint64_t)v36;
        goto LABEL_67;
      }
    }
  }
LABEL_66:
  unint64_t v20 = MEMORY[0x263F8EE78];
LABEL_67:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 0x8000000000000000) != 0 || (v20 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_23AC2A720();
    if (!result) {
      goto LABEL_77;
    }
LABEL_70:
    if ((v20 & 0xC000000000000001) != 0)
    {
LABEL_75:
      id v29 = (id)MEMORY[0x23ECC1BC0](0, v20);
    }
    else
    {
      if (!*(void *)(v20 + 16))
      {
        __break(1u);
        return result;
      }
LABEL_72:
      id v29 = *(id *)(v20 + 32);
    }
    id v30 = v29;
    swift_release();
    return (uint64_t)v30;
  }
  uint64_t result = *(void *)(v20 + 16);
  if (result) {
    goto LABEL_70;
  }
LABEL_77:
  swift_release();
  return 0;
}

double sub_23ABB4C3C(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_23ABB4C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23ABB4CC4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t *sub_23ABB4CDC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_23ABB4D40(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_23ABB4E40()
{
  unint64_t result = qword_268A5A380;
  if (!qword_268A5A380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A380);
  }
  return result;
}

uint64_t sub_23ABB4E94(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v6 = a2;
    }
    uint64_t v7 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v7 = 11;
    }
    uint64_t v8 = v7 | (v6 << 16);
    uint64_t v9 = sub_23AC2A580();
    if (v10) {
      a2 = v8;
    }
    else {
      a2 = v9;
    }
    a1 = 15;
    a3 = v5;
    a4 = v4;
  }
  return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
}

uint64_t sub_23ABB4F30(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
  }
  unint64_t v4 = a3;
  unint64_t v5 = a2;
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v7 = 11;
  }
  unint64_t v8 = v7 | (v6 << 16);
  a1 = sub_23AC2A580();
  if (a2) {
    a1 = v8;
  }
  if (4 * v6 < a1 >> 14) {
    goto LABEL_14;
  }
  a2 = v8;
  a3 = v5;
  a4 = v4;
  return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
}

uint64_t sub_23ABB4FE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_23AB60540();
  uint64_t result = sub_23AC2A610();
  uint64_t v7 = result;
  if (v2)
  {
    unint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned __int8 v5 = *v4++;
      sub_23ABB2844(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

char *_sSo23VCCommandCollectionObjCC32SpeechRecognitionCommandServicesE03allB11IdentifiersSaySSGyFZ_0()
{
  if (qword_268A5AB58 != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v0 = qword_268A5AB60;
  unint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (!((unint64_t)qword_268A5AB60 >> 62))
  {
    uint64_t v2 = *(void *)((qword_268A5AB60 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_4;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_34;
    }
LABEL_20:
    if ((v6 & 0x4000000000000000) != 0) {
      goto LABEL_34;
    }
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7) {
      goto LABEL_22;
    }
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_23AC2A720();
  if (!v2) {
    goto LABEL_19;
  }
LABEL_4:
  uint64_t v3 = 4;
  do
  {
    if ((v0 & 0xC000000000000001) != 0) {
      uint64_t result = (char *)MEMORY[0x23ECC1BC0](v3 - 4, v0);
    }
    else {
      uint64_t result = (char *)*(id *)(v0 + 8 * v3);
    }
    uint64_t v5 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    if (!*(void *)&result[OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 8])
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (result[OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 40])
    {
      sub_23AC2A6C0();
      sub_23AC2A6F0();
      sub_23AC2A700();
      sub_23AC2A6D0();
    }
    else
    {
    }
    ++v3;
  }
  while (v5 != v2);
  swift_bridgeObjectRelease();
  uint64_t v6 = v16;
  if ((v16 & 0x8000000000000000) == 0) {
    goto LABEL_20;
  }
LABEL_34:
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_23AC2A720();
    swift_release();
    if (!v7) {
      break;
    }
LABEL_22:
    uint64_t result = sub_23ABB15F4(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v8 = 0;
    unint64_t v9 = v1;
    while (v7 != v8)
    {
      if ((v6 & 0xC000000000000001) != 0) {
        uint64_t result = (char *)MEMORY[0x23ECC1BC0](v8, v6);
      }
      else {
        uint64_t result = (char *)*(id *)(v6 + 8 * v8 + 32);
      }
      char v10 = result;
      uint64_t v11 = *(void *)&result[OBJC_IVAR___VCCommandCollectionObjC_representedCollection + 8];
      if (!v11) {
        goto LABEL_39;
      }
      uint64_t v12 = *(void *)&result[OBJC_IVAR___VCCommandCollectionObjC_representedCollection];
      swift_bridgeObjectRetain();

      unint64_t v14 = *(void *)(v9 + 16);
      unint64_t v13 = *(void *)(v9 + 24);
      unint64_t v1 = v14 + 1;
      if (v14 >= v13 >> 1) {
        sub_23ABB15F4((char *)(v13 > 1), v14 + 1, 1);
      }
      ++v8;
      *(void *)(v9 + 16) = v1;
      unint64_t v15 = v9 + 16 * v14;
      *(void *)(v15 + 32) = v12;
      *(void *)(v15 + 40) = v11;
      if (v7 == v8)
      {
        swift_release();
        return (char *)v9;
      }
    }
    __break(1u);
  }
LABEL_35:
  swift_release();
  return (char *)MEMORY[0x263F8EE78];
}

uint64_t sub_23ABB5304(uint64_t a1)
{
  return a1;
}

uint64_t sub_23ABB53EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_23ABB54D0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for VCCommandObjC(uint64_t a1)
{
  return sub_23ABB5698(a1, &qword_268A5ABF0);
}

void *initializeBufferWithCopyOfBuffer for VCCommandObjCError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for VCCommandObjCError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for VCCommandObjCError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for VCCommandObjCError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VCCommandObjCError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VCCommandObjCError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommandObjCError()
{
  return &type metadata for VCCommandObjCError;
}

uint64_t type metadata accessor for VCCommandCollectionObjC(uint64_t a1)
{
  return sub_23ABB5698(a1, &qword_268A5ABF8);
}

uint64_t sub_23ABB5698(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_23ABB56D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_23ABB5740(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_23ABB5750(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFu) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23ABB5768(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFu) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_23ABB5780()
{
  unint64_t result = qword_268A5A3A8;
  if (!qword_268A5A3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A3A8);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_23ABB5824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23ABB5880(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23ABB58E0()
{
  unint64_t result = qword_268A5A3C0;
  if (!qword_268A5A3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A3C0);
  }
  return result;
}

SpeechRecognitionCommandServices::VCCommand::Platform_optional __swiftcall VCCommand.Platform.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_23AC2A760();
  result.value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  char *v2 = v5;
  return result;
}

void *static VCCommand.Platform.allCases.getter()
{
  return &unk_26EE28570;
}

uint64_t VCCommand.Platform.rawValue.getter()
{
  uint64_t result = 5459817;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x534F63616DLL;
      break;
    case 2:
      uint64_t result = 1397716596;
      break;
    case 3:
      uint64_t result = 0x534F6E6F69736976;
      break;
    case 4:
      uint64_t result = 0x534F6863746177;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23ABB5A3C(unsigned __int8 *a1, char *a2)
{
  return sub_23ABB5DBC(*a1, *a2);
}

uint64_t sub_23ABB5A48(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 6513005;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 6513005;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656E6F685069;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1684099177;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x79616C50726163;
      break;
    case 4:
      uint64_t v5 = 0x6C6174614363616DLL;
      unint64_t v3 = 0xEB00000000747379;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6E6F69736976;
      break;
    case 6:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x5654656C707061;
      break;
    case 7:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x646F50656D6F68;
      break;
    case 8:
      uint64_t v5 = 1685016681;
      unint64_t v3 = 0xE400000000000000;
      break;
    case 9:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6863746177;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x656E6F685069) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1684099177) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x79616C50726163) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 4:
      unint64_t v6 = 0xEB00000000747379;
      if (v5 != 0x6C6174614363616DLL) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x6E6F69736976) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 6:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x5654656C707061) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x646F50656D6F68) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      uint64_t v2 = 1685016681;
      unint64_t v6 = 0xE400000000000000;
      goto LABEL_27;
    case 9:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6863746177) {
        goto LABEL_31;
      }
      goto LABEL_28;
    default:
LABEL_27:
      if (v5 != v2) {
        goto LABEL_31;
      }
LABEL_28:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_31:
      }
        char v7 = sub_23AC2A860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_23ABB5D24()
{
  unint64_t v0 = VCCommand.Evaluation.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == VCCommand.Evaluation.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_23AC2A860();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_23ABB5DBC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 5459817;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 5459817;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x534F63616DLL;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1397716596;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x534F6E6F69736976;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x534F6863746177;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x534F63616DLL) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1397716596) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x534F6E6F69736976;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x534F6863746177) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_23AC2A860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_23ABB5F60()
{
  return sub_23AC2A900();
}

uint64_t sub_23ABB6044()
{
  sub_23AC2A570();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABB6110()
{
  sub_23AC2A570();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABB6268()
{
  return sub_23AC2A900();
}

SpeechRecognitionCommandServices::VCCommand::Platform_optional sub_23ABB6348(Swift::String *a1)
{
  return VCCommand.Platform.init(rawValue:)(*a1);
}

void sub_23ABB6354(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 5459817;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x534F63616DLL;
      goto LABEL_3;
    case 2:
      *a1 = 1397716596;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x534F6E6F69736976;
      a1[1] = 0xE800000000000000;
      break;
    case 4:
      *a1 = 0x534F6863746177;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_23ABB63FC()
{
  return sub_23AC2A5E0();
}

uint64_t sub_23ABB645C()
{
  return sub_23AC2A5D0();
}

void sub_23ABB64AC(void *a1@<X8>)
{
  *a1 = &unk_26EE28598;
}

Swift::String __swiftcall VCCommand.Idiom.displayName()()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v8 = sub_23AC2A560();
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

void *static VCCommand.Idiom.voiceControlIdioms.getter()
{
  return &unk_26EE285C0;
}

BOOL static VCCommand.Idiom.areInIncreasingOrder(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  while (2)
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v6 = 6513005;
    switch(byte_26EE285E8[v2 + 32])
    {
      case 1:
        unint64_t v5 = 0xE600000000000000;
        uint64_t v6 = 0x656E6F685069;
        break;
      case 2:
        unint64_t v5 = 0xE400000000000000;
        uint64_t v6 = 1684099177;
        break;
      case 3:
        unint64_t v5 = 0xE700000000000000;
        uint64_t v6 = 0x79616C50726163;
        break;
      case 4:
        uint64_t v6 = 0x6C6174614363616DLL;
        unint64_t v5 = 0xEB00000000747379;
        break;
      case 5:
        unint64_t v5 = 0xE600000000000000;
        uint64_t v6 = 0x6E6F69736976;
        break;
      case 6:
        unint64_t v5 = 0xE700000000000000;
        uint64_t v6 = 0x5654656C707061;
        break;
      case 7:
        unint64_t v5 = 0xE700000000000000;
        uint64_t v6 = 0x646F50656D6F68;
        break;
      case 8:
        uint64_t v6 = 1685016681;
        unint64_t v5 = 0xE400000000000000;
        break;
      case 9:
        unint64_t v5 = 0xE500000000000000;
        uint64_t v6 = 0x6863746177;
        break;
      default:
        break;
    }
    unint64_t v7 = 0xE300000000000000;
    uint64_t v8 = 6513005;
    switch(v3)
    {
      case 1:
        unint64_t v7 = 0xE600000000000000;
        if (v6 != 0x656E6F685069) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 2:
        unint64_t v7 = 0xE400000000000000;
        if (v6 != 1684099177) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 3:
        unint64_t v7 = 0xE700000000000000;
        if (v6 != 0x79616C50726163) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 4:
        unint64_t v7 = 0xEB00000000747379;
        if (v6 != 0x6C6174614363616DLL) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 5:
        unint64_t v7 = 0xE600000000000000;
        if (v6 != 0x6E6F69736976) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 6:
        unint64_t v7 = 0xE700000000000000;
        if (v6 != 0x5654656C707061) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 7:
        unint64_t v7 = 0xE700000000000000;
        if (v6 != 0x646F50656D6F68) {
          goto LABEL_30;
        }
        goto LABEL_29;
      case 8:
        uint64_t v8 = 1685016681;
        unint64_t v7 = 0xE400000000000000;
        goto LABEL_28;
      case 9:
        unint64_t v7 = 0xE500000000000000;
        if (v6 != 0x6863746177) {
          goto LABEL_30;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (v6 != v8) {
          goto LABEL_30;
        }
LABEL_29:
        if (v5 != v7)
        {
LABEL_30:
          char v9 = sub_23AC2A860();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v9) {
            goto LABEL_36;
          }
          if (++v2 == 10)
          {
            __break(1u);
LABEL_72:
            __break(1u);
            JUMPOUT(0x23ABB6DA4);
          }
          continue;
        }
        swift_bridgeObjectRelease_n();
LABEL_36:
        unint64_t v10 = 0;
        while (2)
        {
          unint64_t v11 = 0xE300000000000000;
          uint64_t v12 = 6513005;
          switch(byte_26EE285E8[v10 + 32])
          {
            case 1:
              unint64_t v11 = 0xE600000000000000;
              uint64_t v12 = 0x656E6F685069;
              break;
            case 2:
              unint64_t v11 = 0xE400000000000000;
              uint64_t v12 = 1684099177;
              break;
            case 3:
              unint64_t v11 = 0xE700000000000000;
              uint64_t v12 = 0x79616C50726163;
              break;
            case 4:
              uint64_t v12 = 0x6C6174614363616DLL;
              unint64_t v11 = 0xEB00000000747379;
              break;
            case 5:
              unint64_t v11 = 0xE600000000000000;
              uint64_t v12 = 0x6E6F69736976;
              break;
            case 6:
              unint64_t v11 = 0xE700000000000000;
              uint64_t v12 = 0x5654656C707061;
              break;
            case 7:
              unint64_t v11 = 0xE700000000000000;
              uint64_t v12 = 0x646F50656D6F68;
              break;
            case 8:
              uint64_t v12 = 1685016681;
              unint64_t v11 = 0xE400000000000000;
              break;
            case 9:
              unint64_t v11 = 0xE500000000000000;
              uint64_t v12 = 0x6863746177;
              break;
            default:
              break;
          }
          unint64_t v13 = 0xE300000000000000;
          uint64_t v14 = 6513005;
          switch(v4)
          {
            case 1:
              unint64_t v13 = 0xE600000000000000;
              if (v12 != 0x656E6F685069) {
                goto LABEL_65;
              }
              goto LABEL_64;
            case 2:
              unint64_t v13 = 0xE400000000000000;
              if (v12 != 1684099177) {
                goto LABEL_65;
              }
              goto LABEL_64;
            case 3:
              unint64_t v13 = 0xE700000000000000;
              if (v12 != 0x79616C50726163) {
                goto LABEL_65;
              }
              goto LABEL_64;
            case 4:
              unint64_t v13 = 0xEB00000000747379;
              if (v12 != 0x6C6174614363616DLL) {
                goto LABEL_65;
              }
              goto LABEL_64;
            case 5:
              unint64_t v13 = 0xE600000000000000;
              if (v12 != 0x6E6F69736976) {
                goto LABEL_65;
              }
              goto LABEL_64;
            case 6:
              unint64_t v13 = 0xE700000000000000;
              if (v12 != 0x5654656C707061) {
                goto LABEL_65;
              }
              goto LABEL_64;
            case 7:
              unint64_t v13 = 0xE700000000000000;
              if (v12 != 0x646F50656D6F68) {
                goto LABEL_65;
              }
              goto LABEL_64;
            case 8:
              uint64_t v14 = 1685016681;
              unint64_t v13 = 0xE400000000000000;
              goto LABEL_63;
            case 9:
              unint64_t v13 = 0xE500000000000000;
              if (v12 != 0x6863746177) {
                goto LABEL_65;
              }
              goto LABEL_64;
            default:
LABEL_63:
              if (v12 != v14) {
                goto LABEL_65;
              }
LABEL_64:
              if (v11 != v13)
              {
LABEL_65:
                char v15 = sub_23AC2A860();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v15) {
                  return v2 < v10;
                }
                if (++v10 == 10) {
                  goto LABEL_72;
                }
                continue;
              }
              swift_bridgeObjectRelease_n();
              return v2 < v10;
          }
        }
    }
  }
}

void *static VCCommand.Idiom.allCases.getter()
{
  return &unk_26EE285E8;
}

uint64_t VCCommand.Idiom.rawValue.getter()
{
  uint64_t result = 6513005;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E6F685069;
      break;
    case 2:
      uint64_t result = 1684099177;
      break;
    case 3:
      uint64_t result = 0x79616C50726163;
      break;
    case 4:
      uint64_t result = 0x6C6174614363616DLL;
      break;
    case 5:
      uint64_t result = 0x6E6F69736976;
      break;
    case 6:
      uint64_t result = 0x5654656C707061;
      break;
    case 7:
      uint64_t result = 0x646F50656D6F68;
      break;
    case 8:
      uint64_t result = 1685016681;
      break;
    case 9:
      uint64_t result = 0x6863746177;
      break;
    default:
      return result;
  }
  return result;
}

SpeechRecognitionCommandServices::VCCommand::Idiom_optional __swiftcall VCCommand.Idiom.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_23AC2A760();
  result.value = swift_bridgeObjectRelease();
  char v5 = 10;
  if (v3 < 0xA) {
    char v5 = v3;
  }
  char *v2 = v5;
  return result;
}

uint64_t sub_23ABB6FCC(unsigned __int8 *a1, char *a2)
{
  return sub_23ABB5A48(*a1, *a2);
}

uint64_t sub_23ABB6FD8()
{
  return sub_23AC2A900();
}

uint64_t sub_23ABB7020()
{
  return sub_23ABB6110();
}

uint64_t sub_23ABB7028()
{
  return sub_23AC2A900();
}

SpeechRecognitionCommandServices::VCCommand::Idiom_optional sub_23ABB706C(Swift::String *a1)
{
  return VCCommand.Idiom.init(rawValue:)(*a1);
}

uint64_t sub_23ABB7078@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VCCommand.Idiom.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23ABB70A0()
{
  return sub_23AC2A5E0();
}

uint64_t sub_23ABB7100()
{
  return sub_23AC2A5D0();
}

void sub_23ABB7150(void *a1@<X8>)
{
  *a1 = &unk_26EE285E8;
}

BOOL static VCCommand.InteractionLevel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t VCCommand.InteractionLevel.hash(into:)()
{
  return sub_23AC2A8F0();
}

unint64_t sub_23ABB71A8()
{
  unint64_t result = 0x6C616D726F4ELL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x7065656C53;
      break;
    case 3:
      unint64_t result = 0x6F68706F7263694DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23ABB7240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23ABC2268(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23ABB7268()
{
  return 0;
}

void sub_23ABB7274(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23ABB7280(uint64_t a1)
{
  unint64_t v2 = sub_23ABB79B0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB72BC(uint64_t a1)
{
  unint64_t v2 = sub_23ABB79B0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB72F8()
{
  return 0;
}

void sub_23ABB7304(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23ABB7310(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7A04();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB734C(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7A04();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB7388(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7AAC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB73C4(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7AAC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB7400(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7B00();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB743C(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7B00();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB7478@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23ABB74A8(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7A58();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB74E4(uint64_t a1)
{
  unint64_t v2 = sub_23ABB7A58();
  return MEMORY[0x270FA00B8](a1, v2);
}

void *static VCCommand.InteractionLevel.allCases.getter()
{
  return &unk_26EE28728;
}

uint64_t VCCommand.InteractionLevel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3D0);
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  MEMORY[0x270FA5388](v3, v4, v5, v6);
  uint64_t v44 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3D8);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x270FA5388](v8, v9, v10, v11);
  uint64_t v41 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3E0);
  uint64_t v39 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  MEMORY[0x270FA5388](v13, v14, v15, v16);
  char v38 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3E8);
  uint64_t v36 = *(void *)(v18 - 8);
  uint64_t v37 = v18;
  MEMORY[0x270FA5388](v18, v19, v20, v21);
  unint64_t v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3F0);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24, v26, v27, v28);
  id v30 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABB79B0();
  sub_23AC2A920();
  switch(v31)
  {
    case 1:
      char v48 = 1;
      sub_23ABB7AAC();
      uint64_t v32 = v38;
      sub_23AC2A7F0();
      uint64_t v34 = v39;
      uint64_t v33 = v40;
      goto LABEL_6;
    case 2:
      char v49 = 2;
      sub_23ABB7A58();
      uint64_t v32 = v41;
      sub_23AC2A7F0();
      uint64_t v34 = v42;
      uint64_t v33 = v43;
      goto LABEL_6;
    case 3:
      char v50 = 3;
      sub_23ABB7A04();
      uint64_t v32 = v44;
      sub_23AC2A7F0();
      uint64_t v34 = v45;
      uint64_t v33 = v46;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
      break;
    default:
      char v47 = 0;
      sub_23ABB7B00();
      sub_23AC2A7F0();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v37);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v30, v24);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23ABB79B0()
{
  unint64_t result = qword_268A5AC20;
  if (!qword_268A5AC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC20);
  }
  return result;
}

unint64_t sub_23ABB7A04()
{
  unint64_t result = qword_268A5AC28;
  if (!qword_268A5AC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC28);
  }
  return result;
}

unint64_t sub_23ABB7A58()
{
  unint64_t result = qword_268A5AC30;
  if (!qword_268A5AC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC30);
  }
  return result;
}

unint64_t sub_23ABB7AAC()
{
  unint64_t result = qword_268A5AC38;
  if (!qword_268A5AC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC38);
  }
  return result;
}

unint64_t sub_23ABB7B00()
{
  unint64_t result = qword_268A5AC40;
  if (!qword_268A5AC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC40);
  }
  return result;
}

uint64_t VCCommand.InteractionLevel.hashValue.getter()
{
  return sub_23AC2A900();
}

uint64_t VCCommand.InteractionLevel.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL v62 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3F8);
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  MEMORY[0x270FA5388](v3, v4, v5, v6);
  uint64_t v63 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A400);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  uint64_t v60 = v9;
  MEMORY[0x270FA5388](v8, v10, v11, v12);
  uint64_t v61 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A408);
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  MEMORY[0x270FA5388](v14, v15, v16, v17);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A410);
  uint64_t v56 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20, v21, v22, v23);
  uint64_t v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A418);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26, v28, v29, v30);
  uint64_t v32 = (char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = a1[3];
  uint64_t v66 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v33);
  sub_23ABB79B0();
  uint64_t v34 = v67;
  sub_23AC2A910();
  if (v34) {
    goto LABEL_7;
  }
  uint64_t v54 = v20;
  BOOL v55 = v19;
  uint64_t v67 = 0;
  uint64_t v36 = v63;
  uint64_t v35 = v64;
  uint64_t v37 = v65;
  char v38 = v32;
  uint64_t v39 = sub_23AC2A7E0();
  if (*(void *)(v39 + 16) != 1)
  {
    uint64_t v42 = sub_23AC2A6B0();
    swift_allocError();
    uint64_t v44 = v43;
    __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A420);
    *uint64_t v44 = &type metadata for VCCommand.InteractionLevel;
    sub_23AC2A780();
    sub_23AC2A6A0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v42 - 8) + 104))(v44, *MEMORY[0x263F8DCB0], v42);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v26);
LABEL_7:
    uint64_t v45 = (uint64_t)v66;
    return __swift_destroy_boxed_opaque_existential_0(v45);
  }
  char v40 = *(unsigned char *)(v39 + 32);
  switch(v40)
  {
    case 1:
      char v69 = 1;
      sub_23ABB7AAC();
      char v47 = v55;
      uint64_t v48 = v67;
      sub_23AC2A770();
      if (v48) {
        goto LABEL_12;
      }
      uint64_t v50 = v57;
      uint64_t v49 = v58;
      goto LABEL_16;
    case 2:
      char v70 = 2;
      sub_23ABB7A58();
      char v47 = v61;
      uint64_t v51 = v67;
      sub_23AC2A770();
      if (v51) {
        goto LABEL_12;
      }
      uint64_t v49 = v59;
      uint64_t v50 = v60;
LABEL_16:
      (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
      goto LABEL_17;
    case 3:
      char v71 = 3;
      sub_23ABB7A04();
      uint64_t v52 = v67;
      sub_23AC2A770();
      if (v52)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v38, v26);
        uint64_t v45 = (uint64_t)v66;
        return __swift_destroy_boxed_opaque_existential_0(v45);
      }
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v38, v26);
      uint64_t v45 = (uint64_t)v66;
      uint64_t v53 = v62;
      goto LABEL_19;
    default:
      char v68 = 0;
      sub_23ABB7B00();
      uint64_t v41 = v67;
      sub_23AC2A770();
      if (v41)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v38, v26);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v56 + 8))(v25, v54);
LABEL_17:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v38, v26);
      uint64_t v45 = (uint64_t)v66;
      uint64_t v53 = v62;
LABEL_19:
      *uint64_t v53 = v40;
      break;
  }
  return __swift_destroy_boxed_opaque_existential_0(v45);
}

BOOL sub_23ABB81D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23ABB81E4()
{
  return sub_23AC2A8F0();
}

uint64_t sub_23ABB8210@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return VCCommand.InteractionLevel.init(from:)(a1, a2);
}

uint64_t sub_23ABB8228(void *a1)
{
  return VCCommand.InteractionLevel.encode(to:)(a1);
}

void sub_23ABB8240(void *a1@<X8>)
{
  *a1 = &unk_26EE28750;
}

SpeechRecognitionCommandServices::VCCommand::Evaluation_optional __swiftcall VCCommand.Evaluation.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  uint64_t v3 = sub_23AC2A870();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 15;
  switch(v3)
  {
    case 0:
      goto LABEL_17;
    case 1:
      char v5 = 1;
      goto LABEL_17;
    case 2:
      char v5 = 2;
      goto LABEL_17;
    case 3:
      char v5 = 3;
      goto LABEL_17;
    case 4:
      char v5 = 4;
      goto LABEL_17;
    case 5:
      char v5 = 5;
      goto LABEL_17;
    case 6:
      char v5 = 6;
      goto LABEL_17;
    case 7:
      char v5 = 7;
      goto LABEL_17;
    case 8:
      char v5 = 8;
      goto LABEL_17;
    case 9:
      char v5 = 9;
      goto LABEL_17;
    case 10:
      char v5 = 10;
      goto LABEL_17;
    case 11:
      char v5 = 11;
      goto LABEL_17;
    case 12:
      char v5 = 12;
      goto LABEL_17;
    case 13:
      char v5 = 13;
      goto LABEL_17;
    case 14:
      char v5 = 14;
LABEL_17:
      char v6 = v5;
      break;
    case 15:
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    case 25:
      char v6 = 25;
      break;
    case 26:
      char v6 = 26;
      break;
    case 27:
      char v6 = 27;
      break;
    case 28:
      char v6 = 28;
      break;
    case 29:
      char v6 = 29;
      break;
    case 30:
      char v6 = 30;
      break;
    case 31:
      char v6 = 31;
      break;
    case 32:
      char v6 = 32;
      break;
    default:
      char v6 = 33;
      break;
  }
  char *v2 = v6;
  return result;
}

void *static VCCommand.Evaluation.allCases.getter()
{
  return &unk_26EE28AB0;
}

unint64_t VCCommand.Evaluation.rawValue.getter()
{
  unint64_t result = 0xD00000000000001CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    case 8:
      unint64_t result = 0xD000000000000025;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 0xA:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 0xB:
      unint64_t result = 0xD000000000000010;
      break;
    case 0xC:
      unint64_t result = 0xD000000000000014;
      break;
    case 0xD:
    case 0x11:
    case 0x19:
      unint64_t result = 0xD000000000000013;
      break;
    case 0xE:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0xF:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x10:
      unint64_t result = 0xD000000000000019;
      break;
    case 0x12:
      unint64_t result = 0xD000000000000023;
      break;
    case 0x13:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x14:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0x15:
      unint64_t result = 0xD000000000000014;
      break;
    case 0x16:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x17:
    case 0x18:
    case 0x1F:
      unint64_t result = 0x7365726975716572;
      break;
    case 0x1A:
      unint64_t result = 0xD000000000000022;
      break;
    case 0x1B:
      unint64_t result = 0xD000000000000024;
      break;
    case 0x1C:
      unint64_t result = 0xD000000000000029;
      break;
    case 0x1D:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x1E:
      unint64_t result = 0xD000000000000011;
      break;
    case 0x20:
      unint64_t result = 0xD000000000000029;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23ABB8748()
{
  return sub_23ABB5D24();
}

uint64_t sub_23ABB8754()
{
  return sub_23AC2A900();
}

uint64_t sub_23ABB87BC()
{
  VCCommand.Evaluation.rawValue.getter();
  sub_23AC2A570();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABB8820()
{
  return sub_23AC2A900();
}

SpeechRecognitionCommandServices::VCCommand::Evaluation_optional sub_23ABB8884(Swift::String *a1)
{
  return VCCommand.Evaluation.init(rawValue:)(*a1);
}

unint64_t sub_23ABB8890@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = VCCommand.Evaluation.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23ABB88B8()
{
  return sub_23AC2A5E0();
}

uint64_t sub_23ABB8918()
{
  return sub_23AC2A5D0();
}

void sub_23ABB8968(void *a1@<X8>)
{
  *a1 = &unk_26EE28AB0;
}

void sub_23ABB8978()
{
  qword_268A5AC08 = (uint64_t)&unk_26EE28AF8;
}

uint64_t static VCCommand.TargetedString.areInIncreasingOrder(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 16);
  if (qword_268A5AC00 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_268A5AC08;
  swift_bridgeObjectRetain();
  sub_23ABB5750(v2, v3, v4);
  uint64_t v9 = sub_23ABC1FE0(v8);
  char v11 = v10;
  sub_23ABB5768(v2, v3, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = qword_268A5AC08;
  swift_bridgeObjectRetain();
  sub_23ABB5750(v5, v6, v7);
  uint64_t v14 = sub_23ABC1FE0(v13);
  char v16 = v15;
  sub_23ABB5768(v5, v6, v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (v9 == v14)
  {
    sub_23AC2A710();
    sub_23AC2A710();
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    return v14 >= v9;
  }
}

uint64_t sub_23ABB8BA8()
{
  return 1;
}

uint64_t sub_23ABB8BB4()
{
  return sub_23AC2A8F0();
}

uint64_t sub_23ABB8BE0()
{
  return 12383;
}

uint64_t sub_23ABB8BF0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3BAC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8C2C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3BAC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB8C68()
{
  return sub_23ABBBB68(*v0);
}

uint64_t sub_23ABB8C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23ABC46D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23ABB8CAC(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_23ABB8CB8(uint64_t a1)
{
  unint64_t v2 = sub_23ABC366C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8CF4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC366C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB8D30(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3AB0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8D6C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3AB0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB8DA8(uint64_t a1)
{
  unint64_t v2 = sub_23ABC39B4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8DE4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC39B4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB8E20(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3A08();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8E5C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3A08();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB8E98(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3A5C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8ED4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3A5C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB8F10(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3960();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8F4C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3960();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB8F88(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3B58();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB8FC4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3B58();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB9000(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3B04();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB903C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3B04();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB9078(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3864();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB90B4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3864();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB90F0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3810();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB912C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3810();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB9168(uint64_t a1)
{
  unint64_t v2 = sub_23ABC37BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB91A4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC37BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB91E0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3768();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB921C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3768();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB9258(uint64_t a1)
{
  unint64_t v2 = sub_23ABC390C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB9294(uint64_t a1)
{
  unint64_t v2 = sub_23ABC390C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB92D0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC38B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB930C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC38B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB9348(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3714();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB9384(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3714();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABB93C0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC36C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABB93FC(uint64_t a1)
{
  unint64_t v2 = sub_23ABC36C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VCCommand.TargetedString.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A428);
  uint64_t v140 = *(void *)(v3 - 8);
  uint64_t v141 = v3;
  MEMORY[0x270FA5388](v3, v4, v5, v6);
  Swift::String_optional v139 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A430);
  uint64_t v137 = *(void *)(v8 - 8);
  uint64_t v138 = v8;
  MEMORY[0x270FA5388](v8, v9, v10, v11);
  uint64_t v136 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A438);
  uint64_t v134 = *(void *)(v13 - 8);
  uint64_t v135 = v13;
  MEMORY[0x270FA5388](v13, v14, v15, v16);
  uint64_t v133 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A440);
  uint64_t v131 = *(void *)(v18 - 8);
  uint64_t v132 = v18;
  MEMORY[0x270FA5388](v18, v19, v20, v21);
  uint64_t v130 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A448);
  uint64_t v128 = *(void *)(v23 - 8);
  uint64_t v129 = v23;
  MEMORY[0x270FA5388](v23, v24, v25, v26);
  uint64_t v127 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A450);
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126, v28, v29, v30);
  uint64_t v124 = (char *)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A458);
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123, v32, v33, v34);
  uint64_t v121 = (char *)&v97 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A460);
  uint64_t v119 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120, v36, v37, v38);
  Swift::String_optional v118 = (char *)&v97 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A468);
  uint64_t v116 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117, v40, v41, v42);
  uint64_t v115 = (char *)&v97 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A470);
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x270FA5388](v114, v44, v45, v46);
  uint64_t v112 = (char *)&v97 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A478);
  uint64_t v110 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111, v48, v49, v50);
  uint64_t v109 = (char *)&v97 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A480);
  uint64_t v107 = *(void *)(v108 - 8);
  MEMORY[0x270FA5388](v108, v52, v53, v54);
  uint64_t v106 = (char *)&v97 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A488);
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105, v56, v57, v58);
  uint64_t v103 = (char *)&v97 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A490);
  uint64_t v101 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102, v60, v61, v62);
  uint64_t v100 = (char *)&v97 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A498);
  uint64_t v99 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64, v65, v66, v67);
  char v69 = (char *)&v97 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4A0);
  uint64_t v98 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70, v71, v72, v73);
  uint64_t v75 = (char *)&v97 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4A8);
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v145 = v76;
  uint64_t v146 = v77;
  MEMORY[0x270FA5388](v76, v78, v79, v80);
  uint64_t v82 = (char *)&v97 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = *(void *)(v1 + 8);
  v142[0] = *(void *)v1;
  v142[1] = v83;
  uint64_t v84 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABC366C();
  uint64_t v143 = v82;
  sub_23AC2A920();
  switch(v84)
  {
    case 1:
      char v148 = 1;
      sub_23ABC3B58();
      uint64_t v89 = v145;
      unint64_t v90 = v143;
      sub_23AC2A7F0();
      sub_23AC2A820();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v69, v64);
      return (*(uint64_t (**)(char *, uint64_t))(v146 + 8))(v90, v89);
    case 2:
      char v148 = 2;
      sub_23ABC3B04();
      uint64_t v92 = v100;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v102;
      sub_23AC2A820();
      uint64_t v95 = &v133;
      goto LABEL_13;
    case 3:
      char v148 = 3;
      sub_23ABC3AB0();
      uint64_t v92 = v103;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v105;
      sub_23AC2A820();
      uint64_t v95 = &v136;
      goto LABEL_13;
    case 4:
      char v148 = 4;
      sub_23ABC3A5C();
      uint64_t v92 = v106;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v108;
      sub_23AC2A820();
      uint64_t v95 = &v139;
      goto LABEL_13;
    case 5:
      char v148 = 5;
      sub_23ABC3A08();
      uint64_t v92 = v109;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v111;
      sub_23AC2A820();
      uint64_t v95 = (char **)v142;
      goto LABEL_13;
    case 6:
      char v148 = 6;
      sub_23ABC39B4();
      uint64_t v92 = v112;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v114;
      sub_23AC2A820();
      uint64_t v95 = (char **)&v144;
      goto LABEL_13;
    case 7:
      char v148 = 7;
      sub_23ABC3960();
      uint64_t v92 = v115;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v117;
      sub_23AC2A820();
      uint64_t v95 = (char **)&v147;
      goto LABEL_13;
    case 8:
      char v148 = 8;
      sub_23ABC390C();
      uint64_t v92 = v118;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v120;
      sub_23AC2A820();
      uint64_t v95 = (char **)&v149;
      goto LABEL_13;
    case 9:
      char v148 = 9;
      sub_23ABC38B8();
      uint64_t v92 = v121;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v123;
      sub_23AC2A820();
      uint64_t v95 = (char **)&v150;
      goto LABEL_13;
    case 10:
      char v148 = 10;
      sub_23ABC3864();
      uint64_t v92 = v124;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v126;
      sub_23AC2A820();
      uint64_t v95 = (char **)&v151;
LABEL_13:
      uint64_t v96 = (uint64_t)*(v95 - 32);
      goto LABEL_14;
    case 11:
      char v148 = 11;
      sub_23ABC3810();
      uint64_t v92 = v127;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v129;
      sub_23AC2A820();
      uint64_t v96 = v128;
      goto LABEL_14;
    case 12:
      char v148 = 12;
      sub_23ABC37BC();
      uint64_t v92 = v130;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v132;
      sub_23AC2A820();
      uint64_t v96 = v131;
      goto LABEL_14;
    case 13:
      char v148 = 13;
      sub_23ABC3768();
      uint64_t v92 = v133;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v135;
      sub_23AC2A820();
      uint64_t v96 = v134;
      goto LABEL_14;
    case 14:
      char v148 = 14;
      sub_23ABC3714();
      uint64_t v92 = v136;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v138;
      sub_23AC2A820();
      uint64_t v96 = v137;
      goto LABEL_14;
    case 15:
      char v148 = 15;
      sub_23ABC36C0();
      uint64_t v92 = v139;
      uint64_t v85 = v145;
      uint64_t v93 = v143;
      sub_23AC2A7F0();
      uint64_t v94 = v141;
      sub_23AC2A820();
      uint64_t v96 = v140;
LABEL_14:
      (*(void (**)(char *, uint64_t))(v96 + 8))(v92, v94);
      uint64_t v87 = *(uint64_t (**)(char *, uint64_t))(v146 + 8);
      uint64_t v88 = v93;
      break;
    default:
      char v148 = 0;
      sub_23ABC3BAC();
      uint64_t v85 = v145;
      uint64_t v86 = v143;
      sub_23AC2A7F0();
      sub_23AC2A820();
      (*(void (**)(char *, uint64_t))(v98 + 8))(v75, v70);
      uint64_t v87 = *(uint64_t (**)(char *, uint64_t))(v146 + 8);
      uint64_t v88 = v86;
      break;
  }
  return v87(v88, v85);
}

uint64_t VCCommand.TargetedString.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v178 = a2;
  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4B0);
  uint64_t v153 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183, v3, v4, v5);
  uint64_t v177 = (char *)&v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4B8);
  uint64_t v152 = *(void *)(v167 - 8);
  MEMORY[0x270FA5388](v167, v7, v8, v9);
  uint64_t v176 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4C0);
  uint64_t v151 = *(void *)(v166 - 8);
  MEMORY[0x270FA5388](v166, v11, v12, v13);
  Swift::String_optional v175 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4C8);
  uint64_t v150 = *(void *)(v165 - 8);
  MEMORY[0x270FA5388](v165, v15, v16, v17);
  Swift::String_optional v174 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4D0);
  uint64_t v149 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164, v19, v20, v21);
  uint64_t v173 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4D8);
  uint64_t v148 = *(void *)(v163 - 8);
  MEMORY[0x270FA5388](v163, v23, v24, v25);
  Swift::String_optional v182 = (char *)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4E0);
  uint64_t v147 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162, v27, v28, v29);
  uint64_t v172 = (char *)&v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4E8);
  uint64_t v146 = *(void *)(v161 - 8);
  MEMORY[0x270FA5388](v161, v31, v32, v33);
  Swift::String_optional v181 = (char *)&v133 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4F0);
  uint64_t v145 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160, v35, v36, v37);
  uint64_t v168 = (char *)&v133 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A4F8);
  uint64_t v144 = *(void *)(v159 - 8);
  MEMORY[0x270FA5388](v159, v39, v40, v41);
  uint64_t v180 = (char *)&v133 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A500);
  uint64_t v143 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158, v43, v44, v45);
  uint64_t v171 = (char *)&v133 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A508);
  uint64_t v142 = *(void *)(v157 - 8);
  MEMORY[0x270FA5388](v157, v47, v48, v49);
  uint64_t v170 = (char *)&v133 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A510);
  uint64_t v141 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156, v51, v52, v53);
  uint64_t v169 = (char *)&v133 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A518);
  uint64_t v140 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155, v55, v56, v57);
  uint64_t v179 = (char *)&v133 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A520);
  uint64_t v139 = *(void *)(v154 - 8);
  MEMORY[0x270FA5388](v154, v59, v60, v61);
  uint64_t v63 = (char *)&v133 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A528);
  uint64_t v138 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64, v65, v66, v67);
  char v69 = (char *)&v133 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A530);
  uint64_t v71 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70, v72, v73, v74);
  uint64_t v76 = (char *)&v133 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = a1[3];
  uint64_t v184 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v77);
  sub_23ABC366C();
  uint64_t v78 = v185;
  sub_23AC2A910();
  if (!v78)
  {
    uint64_t v135 = v69;
    uint64_t v134 = v64;
    uint64_t v136 = v63;
    uint64_t v79 = v179;
    uint64_t v80 = v180;
    uint64_t v81 = v181;
    uint64_t v82 = v182;
    uint64_t v137 = 0;
    uint64_t v83 = v183;
    uint64_t v185 = v71;
    uint64_t v84 = sub_23AC2A7E0();
    if (*(void *)(v84 + 16) == 1)
    {
      uint64_t v85 = *(unsigned __int8 *)(v84 + 32);
      uint64_t v133 = v85;
      switch(v85)
      {
        case 1:
          char v186 = 1;
          sub_23ABC3B58();
          uint64_t v92 = v136;
          uint64_t v93 = v137;
          sub_23AC2A770();
          if (v93) {
            goto LABEL_34;
          }
          uint64_t v94 = v154;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v114 = v116;
          (*(void (**)(char *, uint64_t))(v139 + 8))(v92, v94);
          uint64_t v88 = v185;
          goto LABEL_42;
        case 2:
          char v186 = 2;
          sub_23ABC3B04();
          uint64_t v95 = v137;
          sub_23AC2A770();
          if (v95) {
            goto LABEL_34;
          }
          uint64_t v87 = v155;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v117;
          uint64_t v115 = (uint64_t *)&v172;
          goto LABEL_41;
        case 3:
          char v186 = 3;
          sub_23ABC3AB0();
          uint64_t v79 = v169;
          uint64_t v96 = v137;
          sub_23AC2A770();
          if (v96) {
            goto LABEL_34;
          }
          uint64_t v87 = v156;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v118;
          uint64_t v115 = (uint64_t *)&v173;
          goto LABEL_41;
        case 4:
          char v186 = 4;
          sub_23ABC3A5C();
          uint64_t v79 = v170;
          uint64_t v97 = v137;
          sub_23AC2A770();
          if (v97) {
            goto LABEL_34;
          }
          uint64_t v87 = v157;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v119;
          uint64_t v115 = (uint64_t *)&v174;
          goto LABEL_41;
        case 5:
          char v186 = 5;
          sub_23ABC3A08();
          uint64_t v79 = v171;
          uint64_t v98 = v137;
          sub_23AC2A770();
          if (v98) {
            goto LABEL_34;
          }
          uint64_t v87 = v158;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v120;
          uint64_t v115 = (uint64_t *)&v175;
          goto LABEL_41;
        case 6:
          char v186 = 6;
          sub_23ABC39B4();
          uint64_t v79 = v80;
          uint64_t v99 = v137;
          sub_23AC2A770();
          if (v99) {
            goto LABEL_34;
          }
          uint64_t v87 = v159;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v121;
          uint64_t v115 = (uint64_t *)&v176;
          goto LABEL_41;
        case 7:
          char v186 = 7;
          sub_23ABC3960();
          uint64_t v100 = v168;
          uint64_t v101 = v137;
          sub_23AC2A770();
          if (v101) {
            goto LABEL_34;
          }
          uint64_t v102 = v160;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v122;
          uint64_t v123 = &v177;
          goto LABEL_43;
        case 8:
          char v186 = 8;
          sub_23ABC390C();
          uint64_t v79 = v81;
          uint64_t v103 = v137;
          sub_23AC2A770();
          if (v103) {
            goto LABEL_34;
          }
          uint64_t v87 = v161;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v124;
          uint64_t v115 = (uint64_t *)&v178;
          goto LABEL_41;
        case 9:
          char v186 = 9;
          sub_23ABC38B8();
          uint64_t v79 = v172;
          uint64_t v104 = v137;
          sub_23AC2A770();
          if (v104) {
            goto LABEL_34;
          }
          uint64_t v87 = v162;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v125;
          uint64_t v115 = (uint64_t *)&v179;
          goto LABEL_41;
        case 10:
          char v186 = 10;
          sub_23ABC3864();
          uint64_t v79 = v82;
          uint64_t v105 = v137;
          sub_23AC2A770();
          if (v105) {
            goto LABEL_34;
          }
          uint64_t v87 = v163;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v126;
          uint64_t v115 = (uint64_t *)&v180;
          goto LABEL_41;
        case 11:
          char v186 = 11;
          sub_23ABC3810();
          uint64_t v79 = v173;
          uint64_t v106 = v137;
          sub_23AC2A770();
          if (v106) {
            goto LABEL_34;
          }
          uint64_t v87 = v164;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v127;
          uint64_t v115 = (uint64_t *)&v181;
          goto LABEL_41;
        case 12:
          char v186 = 12;
          sub_23ABC37BC();
          uint64_t v79 = v174;
          uint64_t v107 = v137;
          sub_23AC2A770();
          if (v107) {
            goto LABEL_34;
          }
          uint64_t v87 = v165;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v128;
          uint64_t v115 = (uint64_t *)&v182;
          goto LABEL_41;
        case 13:
          char v186 = 13;
          sub_23ABC3768();
          uint64_t v79 = v175;
          uint64_t v108 = v137;
          sub_23AC2A770();
          if (v108) {
            goto LABEL_34;
          }
          uint64_t v87 = v166;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v129;
          uint64_t v115 = &v183;
          goto LABEL_41;
        case 14:
          char v186 = 14;
          sub_23ABC3714();
          uint64_t v79 = v176;
          uint64_t v109 = v137;
          sub_23AC2A770();
          if (v109) {
            goto LABEL_34;
          }
          uint64_t v87 = v167;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v130;
          uint64_t v115 = (uint64_t *)&v184;
          goto LABEL_41;
        case 15:
          char v186 = 15;
          sub_23ABC36C0();
          uint64_t v100 = v177;
          uint64_t v110 = v137;
          sub_23AC2A770();
          if (v110)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v185 + 8))(v76, v70);
            uint64_t v111 = (uint64_t)v184;
            return __swift_destroy_boxed_opaque_existential_0(v111);
          }
          uint64_t v102 = v83;
          uint64_t v137 = sub_23AC2A7B0();
          uint64_t v88 = v185;
          uint64_t v114 = v132;
          uint64_t v123 = (char **)&v185;
LABEL_43:
          (*((void (**)(char *, uint64_t))*(v123 - 32) + 1))(v100, v102);
          goto LABEL_42;
        default:
          char v186 = 0;
          sub_23ABC3BAC();
          uint64_t v79 = v135;
          uint64_t v86 = v137;
          sub_23AC2A770();
          if (v86)
          {
LABEL_34:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v185 + 8))(v76, v70);
          }
          else
          {
            uint64_t v87 = v134;
            uint64_t v137 = sub_23AC2A7B0();
            uint64_t v88 = v185;
            uint64_t v114 = v113;
            uint64_t v115 = (uint64_t *)&v170;
LABEL_41:
            (*(void (**)(char *, uint64_t))(*(v115 - 32) + 8))(v79, v87);
LABEL_42:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v88 + 8))(v76, v70);
            uint64_t v131 = v178;
            *uint64_t v178 = v137;
            v131[1] = v114;
            *((unsigned char *)v131 + 16) = v133;
          }
          break;
      }
    }
    else
    {
      uint64_t v89 = sub_23AC2A6B0();
      swift_allocError();
      uint64_t v91 = v90;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A420);
      *uint64_t v91 = &type metadata for VCCommand.TargetedString;
      sub_23AC2A780();
      sub_23AC2A6A0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v89 - 8) + 104))(v91, *MEMORY[0x263F8DCB0], v89);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v185 + 8))(v76, v70);
    }
  }
  uint64_t v111 = (uint64_t)v184;
  return __swift_destroy_boxed_opaque_existential_0(v111);
}

uint64_t sub_23ABBB978@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return VCCommand.TargetedString.init(from:)(a1, a2);
}

uint64_t sub_23ABBB990(void *a1)
{
  return VCCommand.TargetedString.encode(to:)(a1);
}

BOOL sub_23ABBB9B0(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return !_s32SpeechRecognitionCommandServices9VCCommandV14TargetedStringO1loiySbAE_AEtFZ_0((uint64_t)&v5, (uint64_t)&v7);
}

BOOL sub_23ABBBA00(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return !_s32SpeechRecognitionCommandServices9VCCommandV14TargetedStringO1loiySbAE_AEtFZ_0((uint64_t)&v7, (uint64_t)&v5);
}

BOOL sub_23ABBBA50(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return _s32SpeechRecognitionCommandServices9VCCommandV14TargetedStringO1loiySbAE_AEtFZ_0((uint64_t)&v5, (uint64_t)&v7);
}

uint64_t sub_23ABBBAA0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_23AC2A860(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_23AC2A860() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_23ABBBB68(char a1)
{
  uint64_t result = 7105633;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x534F63616DLL;
      break;
    case 2:
      uint64_t result = 0x616D5F534F63616DLL;
      break;
    case 3:
      uint64_t result = 5459817;
      break;
    case 4:
      uint64_t result = 0x6F6850695F534F69;
      break;
    case 5:
      uint64_t result = 0x646150695F534F69;
      break;
    case 6:
      uint64_t result = 0x507261635F534F69;
      break;
    case 7:
      uint64_t result = 0x63616D5F534F69;
      break;
    case 8:
    case 9:
      uint64_t result = 0x534F6E6F69736976;
      break;
    case 10:
      uint64_t result = 1397716596;
      break;
    case 11:
      uint64_t result = 0x7070615F534F7674;
      break;
    case 12:
      uint64_t result = 0x6D6F685F534F7674;
      break;
    case 13:
      uint64_t result = 0x6F50695F534F7674;
      break;
    case 14:
      uint64_t result = 0x534F6863746177;
      break;
    case 15:
      uint64_t result = 0x5F534F6863746177;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23ABBBD5C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4188();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBBD98(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4188();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBBDD4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3C00();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBBE10(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3C00();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBBE4C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC408C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBBE88(uint64_t a1)
{
  unint64_t v2 = sub_23ABC408C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBBEC4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3F90();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBBF00(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3F90();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBBF3C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3FE4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBBF78(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3FE4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBBFB4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4038();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBBFF0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4038();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC02C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3F3C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC068(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3F3C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC0A4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4134();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC0E0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4134();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC11C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC40E0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC158(uint64_t a1)
{
  unint64_t v2 = sub_23ABC40E0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC194(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3E40();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC1D0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3E40();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC20C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3DEC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC248(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3DEC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC284(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3D98();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC2C0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3D98();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC2FC(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3D44();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC338(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3D44();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC374(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3EE8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC3B0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3EE8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC3EC(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3E94();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC428(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3E94();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC464(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3CF0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC4A0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3CF0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_23ABBC4DC()
{
  return sub_23AC2A900();
}

uint64_t sub_23ABBC520()
{
  return sub_23AC2A900();
}

uint64_t sub_23ABBC560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_23AC2A860();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23ABBC5E0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3C54();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBC61C(uint64_t a1)
{
  unint64_t v2 = sub_23ABC3C54();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VCCommand.TargetedStringList.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A538);
  uint64_t v135 = *(void *)(v3 - 8);
  uint64_t v136 = v3;
  MEMORY[0x270FA5388](v3, v4, v5, v6);
  uint64_t v134 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A540);
  uint64_t v132 = *(void *)(v8 - 8);
  uint64_t v133 = v8;
  MEMORY[0x270FA5388](v8, v9, v10, v11);
  uint64_t v131 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A548);
  uint64_t v129 = *(void *)(v13 - 8);
  uint64_t v130 = v13;
  MEMORY[0x270FA5388](v13, v14, v15, v16);
  uint64_t v128 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A550);
  uint64_t v126 = *(void *)(v18 - 8);
  uint64_t v127 = v18;
  MEMORY[0x270FA5388](v18, v19, v20, v21);
  uint64_t v125 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A558);
  uint64_t v123 = *(void *)(v23 - 8);
  uint64_t v124 = v23;
  MEMORY[0x270FA5388](v23, v24, v25, v26);
  uint64_t v122 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A560);
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121, v28, v29, v30);
  uint64_t v119 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A568);
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118, v32, v33, v34);
  uint64_t v116 = (char *)&v93 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A570);
  uint64_t v114 = *(void *)(v115 - 8);
  MEMORY[0x270FA5388](v115, v36, v37, v38);
  uint64_t v113 = (char *)&v93 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A578);
  uint64_t v111 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112, v40, v41, v42);
  uint64_t v110 = (char *)&v93 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A580);
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109, v44, v45, v46);
  uint64_t v107 = (char *)&v93 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A588);
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106, v48, v49, v50);
  uint64_t v104 = (char *)&v93 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A590);
  uint64_t v102 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103, v52, v53, v54);
  uint64_t v101 = (char *)&v93 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A598);
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100, v56, v57, v58);
  uint64_t v98 = (char *)&v93 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5A0);
  uint64_t v96 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97, v60, v61, v62);
  uint64_t v95 = (char *)&v93 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5A8);
  uint64_t v94 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64, v65, v66, v67);
  char v69 = (char *)&v93 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5B0);
  uint64_t v93 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70, v71, v72, v73);
  uint64_t v75 = (char *)&v93 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5B8);
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v139 = v76;
  uint64_t v140 = v77;
  MEMORY[0x270FA5388](v76, v78, v79, v80);
  uint64_t v82 = (char *)&v93 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = *v1;
  uint64_t v83 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABC3C00();
  uint64_t v138 = v82;
  sub_23AC2A920();
  switch(v83)
  {
    case 1:
      LOBYTE(v142) = 1;
      sub_23ABC4134();
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      sub_23AC2A840();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v69, v64);
      goto LABEL_15;
    case 2:
      LOBYTE(v142) = 2;
      sub_23ABC40E0();
      uint64_t v89 = v95;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v97;
      sub_23AC2A840();
      uint64_t v91 = (uint64_t *)&v128;
      goto LABEL_13;
    case 3:
      LOBYTE(v142) = 3;
      sub_23ABC408C();
      uint64_t v89 = v98;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v100;
      sub_23AC2A840();
      uint64_t v91 = (uint64_t *)&v131;
      goto LABEL_13;
    case 4:
      LOBYTE(v142) = 4;
      sub_23ABC4038();
      uint64_t v89 = v101;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v103;
      sub_23AC2A840();
      uint64_t v91 = (uint64_t *)&v134;
      goto LABEL_13;
    case 5:
      LOBYTE(v142) = 5;
      sub_23ABC3FE4();
      uint64_t v89 = v104;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v106;
      sub_23AC2A840();
      uint64_t v91 = &v137;
      goto LABEL_13;
    case 6:
      LOBYTE(v142) = 6;
      sub_23ABC3F90();
      uint64_t v89 = v107;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v109;
      sub_23AC2A840();
      uint64_t v91 = &v139;
      goto LABEL_13;
    case 7:
      LOBYTE(v142) = 7;
      sub_23ABC3F3C();
      uint64_t v89 = v110;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v112;
      sub_23AC2A840();
      uint64_t v91 = &v141;
      goto LABEL_13;
    case 8:
      LOBYTE(v142) = 8;
      sub_23ABC3EE8();
      uint64_t v89 = v113;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v115;
      sub_23AC2A840();
      uint64_t v91 = &v143;
      goto LABEL_13;
    case 9:
      LOBYTE(v142) = 9;
      sub_23ABC3E94();
      uint64_t v89 = v116;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v118;
      sub_23AC2A840();
      uint64_t v91 = &v144;
      goto LABEL_13;
    case 10:
      LOBYTE(v142) = 10;
      sub_23ABC3E40();
      uint64_t v89 = v119;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v121;
      sub_23AC2A840();
      uint64_t v91 = &v145;
LABEL_13:
      uint64_t v92 = *(v91 - 32);
      goto LABEL_14;
    case 11:
      LOBYTE(v142) = 11;
      sub_23ABC3DEC();
      uint64_t v89 = v122;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v124;
      sub_23AC2A840();
      uint64_t v92 = v123;
      goto LABEL_14;
    case 12:
      LOBYTE(v142) = 12;
      sub_23ABC3D98();
      uint64_t v89 = v125;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v127;
      sub_23AC2A840();
      uint64_t v92 = v126;
      goto LABEL_14;
    case 13:
      LOBYTE(v142) = 13;
      sub_23ABC3D44();
      uint64_t v89 = v128;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v130;
      sub_23AC2A840();
      uint64_t v92 = v129;
      goto LABEL_14;
    case 14:
      LOBYTE(v142) = 14;
      sub_23ABC3CF0();
      uint64_t v89 = v131;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v133;
      sub_23AC2A840();
      uint64_t v92 = v132;
      goto LABEL_14;
    case 15:
      LOBYTE(v142) = 15;
      sub_23ABC3C54();
      uint64_t v89 = v134;
      uint64_t v88 = v138;
      uint64_t v87 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      uint64_t v90 = v136;
      sub_23AC2A840();
      uint64_t v92 = v135;
LABEL_14:
      (*(void (**)(char *, uint64_t))(v92 + 8))(v89, v90);
LABEL_15:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v140 + 8))(v88, v87);
      break;
    default:
      LOBYTE(v142) = 0;
      sub_23ABC4188();
      uint64_t v85 = v138;
      uint64_t v84 = v139;
      sub_23AC2A7F0();
      uint64_t v142 = v137;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
      sub_23ABC41DC(&qword_268A5A5C0);
      sub_23AC2A840();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v75, v70);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v140 + 8))(v85, v84);
      break;
  }
  return result;
}

uint64_t VCCommand.TargetedStringList.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  Swift::String_optional v175 = a2;
  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5C8);
  uint64_t v148 = *(void *)(v157 - 8);
  MEMORY[0x270FA5388](v157, v3, v4, v5);
  Swift::String_optional v174 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5D0);
  uint64_t v147 = *(void *)(v163 - 8);
  MEMORY[0x270FA5388](v163, v7, v8, v9);
  uint64_t v173 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5D8);
  uint64_t v146 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162, v11, v12, v13);
  uint64_t v172 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5E0);
  uint64_t v145 = *(void *)(v161 - 8);
  MEMORY[0x270FA5388](v161, v15, v16, v17);
  uint64_t v171 = (char *)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5E8);
  uint64_t v144 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160, v19, v20, v21);
  uint64_t v170 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5F0);
  uint64_t v143 = *(void *)(v159 - 8);
  MEMORY[0x270FA5388](v159, v23, v24, v25);
  uint64_t v169 = (char *)&v130 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A5F8);
  uint64_t v142 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158, v27, v28, v29);
  uint64_t v167 = (char *)&v130 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A600);
  uint64_t v141 = *(void *)(v154 - 8);
  MEMORY[0x270FA5388](v154, v31, v32, v33);
  uint64_t v178 = (char *)&v130 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A608);
  uint64_t v140 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156, v35, v36, v37);
  uint64_t v164 = (char *)&v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A610);
  uint64_t v139 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155, v39, v40, v41);
  uint64_t v177 = (char *)&v130 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A618);
  uint64_t v138 = *(void *)(v153 - 8);
  MEMORY[0x270FA5388](v153, v43, v44, v45);
  uint64_t v168 = (char *)&v130 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A620);
  uint64_t v137 = *(void *)(v152 - 8);
  MEMORY[0x270FA5388](v152, v47, v48, v49);
  uint64_t v176 = (char *)&v130 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A628);
  uint64_t v136 = *(void *)(v151 - 8);
  MEMORY[0x270FA5388](v151, v51, v52, v53);
  uint64_t v166 = (char *)&v130 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A630);
  uint64_t v135 = *(void *)(v150 - 8);
  MEMORY[0x270FA5388](v150, v55, v56, v57);
  uint64_t v165 = (char *)&v130 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A638);
  uint64_t v134 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149, v59, v60, v61);
  uint64_t v63 = (char *)&v130 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A640);
  uint64_t v133 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64, v65, v66, v67);
  char v69 = (char *)&v130 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A648);
  uint64_t v71 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70, v72, v73, v74);
  uint64_t v76 = (char *)&v130 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = a1[3];
  uint64_t v179 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v77);
  sub_23ABC3C00();
  uint64_t v78 = v180;
  sub_23AC2A910();
  if (!v78)
  {
    uint64_t v79 = v69;
    uint64_t v130 = v64;
    uint64_t v80 = v63;
    uint64_t v81 = v176;
    uint64_t v82 = v177;
    uint64_t v83 = v178;
    uint64_t v131 = 0;
    uint64_t v132 = v71;
    uint64_t v180 = v76;
    uint64_t v84 = sub_23AC2A7E0();
    if (*(void *)(v84 + 16) == 1)
    {
      char v85 = *(unsigned char *)(v84 + 32);
      switch(v85)
      {
        case 1:
          LOBYTE(v181) = 1;
          sub_23ABC4134();
          uint64_t v94 = v180;
          uint64_t v95 = v131;
          sub_23AC2A770();
          if (!v95)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
            sub_23ABC41DC(&qword_268A5A650);
            uint64_t v124 = v149;
            sub_23AC2A7D0();
            (*(void (**)(char *, uint64_t))(v134 + 8))(v80, v124);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v132 + 8))(v180, v70);
            uint64_t v128 = v181;
            goto LABEL_48;
          }
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v132 + 8))(v94, v70);
          uint64_t v96 = (uint64_t)v179;
          return __swift_destroy_boxed_opaque_existential_0(v96);
        case 2:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 2;
          sub_23ABC40E0();
          uint64_t v86 = v180;
          uint64_t v98 = v131;
          sub_23AC2A770();
          if (v98) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v150;
          uint64_t v100 = v165;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = &v167;
          goto LABEL_41;
        case 3:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 3;
          sub_23ABC408C();
          uint64_t v86 = v180;
          uint64_t v103 = v131;
          sub_23AC2A770();
          if (v103) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v151;
          uint64_t v100 = v166;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = &v168;
          goto LABEL_41;
        case 4:
          uint64_t v173 = (char *)*(unsigned __int8 *)(v84 + 32);
          LOBYTE(v181) = 4;
          sub_23ABC4038();
          uint64_t v86 = v180;
          uint64_t v104 = v131;
          sub_23AC2A770();
          if (v104) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v105 = v152;
          sub_23AC2A7D0();
          uint64_t v89 = v132;
          uint64_t v125 = *(void (**)(char *, uint64_t))(v137 + 8);
          uint64_t v126 = v81;
          goto LABEL_46;
        case 5:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 5;
          sub_23ABC3FE4();
          uint64_t v86 = v180;
          uint64_t v106 = v131;
          sub_23AC2A770();
          if (v106) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v153;
          uint64_t v100 = v168;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = &v170;
          goto LABEL_41;
        case 6:
          uint64_t v173 = (char *)*(unsigned __int8 *)(v84 + 32);
          LOBYTE(v181) = 6;
          sub_23ABC3F90();
          uint64_t v86 = v180;
          uint64_t v107 = v131;
          sub_23AC2A770();
          if (v107) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v88 = v155;
          sub_23AC2A7D0();
          uint64_t v89 = v132;
          uint64_t v125 = *(void (**)(char *, uint64_t))(v139 + 8);
          uint64_t v126 = v82;
          goto LABEL_44;
        case 7:
          uint64_t v173 = (char *)*(unsigned __int8 *)(v84 + 32);
          LOBYTE(v181) = 7;
          sub_23ABC3F3C();
          uint64_t v86 = v180;
          uint64_t v108 = v131;
          sub_23AC2A770();
          if (v108) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v109 = v156;
          uint64_t v110 = v164;
          sub_23AC2A7D0();
          uint64_t v111 = v132;
          (*(void (**)(char *, uint64_t))(v140 + 8))(v110, v109);
          goto LABEL_45;
        case 8:
          uint64_t v173 = (char *)*(unsigned __int8 *)(v84 + 32);
          LOBYTE(v181) = 8;
          sub_23ABC3EE8();
          uint64_t v86 = v180;
          uint64_t v112 = v131;
          sub_23AC2A770();
          if (v112) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v105 = v154;
          sub_23AC2A7D0();
          uint64_t v126 = v83;
          uint64_t v89 = v132;
          uint64_t v125 = *(void (**)(char *, uint64_t))(v141 + 8);
LABEL_46:
          uint64_t v127 = v105;
          goto LABEL_47;
        case 9:
          uint64_t v173 = (char *)*(unsigned __int8 *)(v84 + 32);
          LOBYTE(v181) = 9;
          sub_23ABC3E94();
          uint64_t v86 = v180;
          uint64_t v113 = v131;
          sub_23AC2A770();
          if (v113) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v114 = v158;
          uint64_t v115 = v167;
          sub_23AC2A7D0();
          uint64_t v111 = v132;
          uint64_t v116 = &v174;
          goto LABEL_43;
        case 10:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 10;
          sub_23ABC3E40();
          uint64_t v86 = v180;
          uint64_t v117 = v131;
          sub_23AC2A770();
          if (v117) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v159;
          uint64_t v100 = v169;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = (char **)&v175;
          goto LABEL_41;
        case 11:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 11;
          sub_23ABC3DEC();
          uint64_t v86 = v180;
          uint64_t v118 = v131;
          sub_23AC2A770();
          if (v118) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v160;
          uint64_t v100 = v170;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = &v176;
          goto LABEL_41;
        case 12:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 12;
          sub_23ABC3D98();
          uint64_t v86 = v180;
          uint64_t v119 = v131;
          sub_23AC2A770();
          if (v119) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v161;
          uint64_t v100 = v171;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = &v177;
          goto LABEL_41;
        case 13:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 13;
          sub_23ABC3D44();
          uint64_t v86 = v180;
          uint64_t v120 = v131;
          sub_23AC2A770();
          if (v120) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v162;
          uint64_t v100 = v172;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = &v178;
          goto LABEL_41;
        case 14:
          char v97 = *(unsigned char *)(v84 + 32);
          LOBYTE(v181) = 14;
          sub_23ABC3CF0();
          uint64_t v86 = v180;
          uint64_t v121 = v131;
          sub_23AC2A770();
          if (v121) {
            goto LABEL_34;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v99 = v163;
          uint64_t v100 = v173;
          sub_23AC2A7D0();
          uint64_t v101 = v132;
          uint64_t v102 = (char **)&v179;
LABEL_41:
          (*((void (**)(char *, uint64_t))*(v102 - 32) + 1))(v100, v99);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v101 + 8))(v86, v70);
          uint64_t v128 = v181;
          char v85 = v97;
          goto LABEL_48;
        case 15:
          uint64_t v173 = (char *)*(unsigned __int8 *)(v84 + 32);
          LOBYTE(v181) = 15;
          sub_23ABC3C54();
          uint64_t v86 = v180;
          uint64_t v123 = v131;
          sub_23AC2A770();
          if (v123)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v132 + 8))(v86, v70);
            uint64_t v96 = (uint64_t)v179;
            return __swift_destroy_boxed_opaque_existential_0(v96);
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
          sub_23ABC41DC(&qword_268A5A650);
          uint64_t v114 = v157;
          uint64_t v115 = v174;
          sub_23AC2A7D0();
          uint64_t v111 = v132;
          uint64_t v116 = &v180;
LABEL_43:
          (*((void (**)(char *, uint64_t))*(v116 - 32) + 1))(v115, v114);
LABEL_45:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v111 + 8))(v86, v70);
          uint64_t v128 = v181;
          char v85 = (char)v173;
          goto LABEL_48;
        default:
          uint64_t v173 = (char *)*(unsigned __int8 *)(v84 + 32);
          LOBYTE(v181) = 0;
          sub_23ABC4188();
          uint64_t v86 = v180;
          uint64_t v87 = v131;
          sub_23AC2A770();
          if (v87)
          {
LABEL_34:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v132 + 8))(v86, v70);
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
            sub_23ABC41DC(&qword_268A5A650);
            uint64_t v88 = v130;
            sub_23AC2A7D0();
            uint64_t v89 = v132;
            uint64_t v125 = *(void (**)(char *, uint64_t))(v133 + 8);
            uint64_t v126 = v79;
LABEL_44:
            uint64_t v127 = v88;
LABEL_47:
            v125(v126, v127);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v89 + 8))(v86, v70);
            uint64_t v128 = v181;
            char v85 = (char)v173;
LABEL_48:
            uint64_t v129 = v175;
            *Swift::String_optional v175 = v128;
            *((unsigned char *)v129 + 8) = v85;
          }
          break;
      }
    }
    else
    {
      uint64_t v90 = sub_23AC2A6B0();
      swift_allocError();
      uint64_t v92 = v91;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A420);
      *uint64_t v92 = &type metadata for VCCommand.TargetedStringList;
      uint64_t v93 = v180;
      sub_23AC2A780();
      sub_23AC2A6A0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v90 - 8) + 104))(v92, *MEMORY[0x263F8DCB0], v90);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v132 + 8))(v93, v70);
    }
  }
  uint64_t v96 = (uint64_t)v179;
  return __swift_destroy_boxed_opaque_existential_0(v96);
}

uint64_t sub_23ABBF514@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return VCCommand.TargetedStringList.init(from:)(a1, a2);
}

uint64_t sub_23ABBF52C(void *a1)
{
  return VCCommand.TargetedStringList.encode(to:)(a1);
}

uint64_t Action.all.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Action.mac.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

SpeechRecognitionCommandServices::Action __swiftcall Action.init(_:mac:)(Swift::String_optional _, Swift::String_optional mac)
{
  Swift::String_optional *v2 = _;
  v2[1] = mac;
  result.mac = mac;
  result.all = _;
  return result;
}

BOOL sub_23ABBF5B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23ABBF5CC()
{
  return sub_23AC2A900();
}

uint64_t sub_23ABBF614()
{
  return sub_23AC2A900();
}

uint64_t sub_23ABBF658()
{
  if (*v0) {
    return 6513005;
  }
  else {
    return 7105633;
  }
}

uint64_t sub_23ABBF67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23ABC4DA8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23ABBF6A4(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23ABBF6B0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4240();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBF6EC(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4240();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Action.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A658);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5, v6, v7);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 16);
  v13[1] = *(void *)(v1 + 24);
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABC4240();
  sub_23AC2A920();
  char v15 = 0;
  uint64_t v11 = v13[3];
  sub_23AC2A800();
  if (!v11)
  {
    char v14 = 1;
    sub_23AC2A800();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t Action.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A660);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABC4240();
  sub_23AC2A910();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  char v23 = 0;
  uint64_t v12 = sub_23AC2A790();
  uint64_t v14 = v13;
  char v22 = 1;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_23AC2A790();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v21 = v15;
  v18(v11, v5);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v21;
  a2[3] = v17;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABBFAA4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Action.init(from:)(a1, a2);
}

uint64_t sub_23ABBFABC(void *a1)
{
  return Action.encode(to:)(a1);
}

uint64_t VCCommand.commandID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCCommand.commandStrings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.abstract.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.discussion.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.enabled.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t VCCommand.requiresConfirmation.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t VCCommand.supportedIdioms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.plannedIdioms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.unsupportedIdioms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.visibilityEvaluations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.contextEvaluations.getter()
{
  return swift_bridgeObjectRetain();
}

void VCCommand.contextSupportsInteractionLevel.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 88);
}

void VCCommand.contextRequiresInteractionLevel.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 89);
}

uint64_t VCCommand.contextRequiresOneOfAppIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.contextSpecialCaseGoBackWithAppIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.recognizerClassName.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommand.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 144);
  *(void *)a1 = *(void *)(v1 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 128);
  *(void *)(a1 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23ABBFBD4()
{
  return MEMORY[0x263F8EE78];
}

uint64_t sub_23ABBFBE0()
{
  return 0;
}

uint64_t sub_23ABBFBE8()
{
  return MEMORY[0x263F8EE88];
}

__n128 VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, char *a13, char *a14, long long a15, uint64_t a16, uint64_t a17)
{
  char v17 = *a13;
  char v18 = *a14;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 41) = a7;
  *(void *)(a9 + 48) = a8;
  *(_OWORD *)(a9 + 56) = a10;
  *(void *)(a9 + 72) = a11;
  *(void *)(a9 + 80) = a12;
  *(unsigned char *)(a9 + 88) = v17;
  *(unsigned char *)(a9 + 89) = v18;
  *(_OWORD *)(a9 + 96) = a15;
  *(void *)(a9 + 112) = a16;
  __n128 result = *(__n128 *)a17;
  long long v20 = *(_OWORD *)(a17 + 16);
  *(_OWORD *)(a9 + 120) = *(_OWORD *)a17;
  *(_OWORD *)(a9 + 136) = v20;
  return result;
}

unint64_t sub_23ABBFC50(char a1)
{
  unint64_t result = 0x49646E616D6D6F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x53646E616D6D6F63;
      break;
    case 2:
      unint64_t result = 0x7463617274736261;
      break;
    case 3:
      unint64_t result = 0x6973737563736964;
      break;
    case 4:
      unint64_t result = 0x64656C62616E65;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x6574726F70707573;
      break;
    case 7:
      unint64_t result = 0x4964656E6E616C70;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
    case 12:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000022;
      break;
    case 14:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 15:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0x6E6F69746361;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_23ABBFE78()
{
  return sub_23ABBFC50(*v0);
}

uint64_t sub_23ABBFE80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23ABC4E7C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23ABBFEA8(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_23ABBFEB4(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4294();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABBFEF0(uint64_t a1)
{
  unint64_t v2 = sub_23ABC4294();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VCCommand.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A668);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5, v6, v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v40 = *(void *)(v1 + 24);
  uint64_t v41 = v10;
  uint64_t v39 = *(void *)(v1 + 32);
  LODWORD(v38) = *(unsigned __int8 *)(v1 + 40);
  int v47 = *(unsigned __int8 *)(v1 + 41);
  uint64_t v11 = *(void *)(v1 + 48);
  uint64_t v36 = *(void *)(v1 + 56);
  uint64_t v37 = v11;
  uint64_t v12 = *(void *)(v1 + 64);
  uint64_t v34 = *(void *)(v1 + 72);
  uint64_t v35 = v12;
  uint64_t v33 = *(void *)(v1 + 80);
  LODWORD(v12) = *(unsigned __int8 *)(v1 + 88);
  int v31 = *(unsigned __int8 *)(v1 + 89);
  int v32 = v12;
  uint64_t v13 = *(void *)(v1 + 96);
  uint64_t v29 = *(void *)(v1 + 104);
  uint64_t v30 = v13;
  uint64_t v28 = *(void *)(v1 + 112);
  uint64_t v24 = *(void *)(v1 + 120);
  uint64_t v14 = *(void *)(v1 + 128);
  uint64_t v26 = *(void *)(v1 + 136);
  uint64_t v27 = v14;
  uint64_t v25 = *(void *)(v1 + 144);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABC4294();
  sub_23AC2A920();
  LOBYTE(v43) = 0;
  uint64_t v15 = v42;
  sub_23AC2A820();
  if (v15) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  uint64_t v16 = v39;
  uint64_t v17 = v40;
  uint64_t v43 = v41;
  char v48 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A670);
  sub_23ABC5A60(&qword_268A5A678, &qword_268A5A670, (void (*)(void))sub_23ABC42E8);
  sub_23AC2A840();
  uint64_t v43 = v17;
  char v48 = 2;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A688);
  uint64_t v19 = sub_23ABC5A60(&qword_268A5A690, &qword_268A5A688, (void (*)(void))sub_23ABC433C);
  sub_23AC2A840();
  uint64_t v43 = v16;
  char v48 = 3;
  sub_23AC2A840();
  uint64_t v41 = v18;
  uint64_t v42 = v4;
  uint64_t v40 = v19;
  LOBYTE(v43) = 4;
  sub_23AC2A830();
  LOBYTE(v43) = 5;
  sub_23AC2A830();
  uint64_t v43 = v37;
  char v48 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A6A0);
  uint64_t v38 = v9;
  sub_23ABC5A60(&qword_268A5A6A8, &qword_268A5A6A0, (void (*)(void))sub_23ABC4390);
  uint64_t v39 = 0;
  sub_23AC2A840();
  uint64_t v43 = v36;
  char v48 = 7;
  sub_23AC2A840();
  uint64_t v43 = v35;
  char v48 = 8;
  sub_23AC2A840();
  uint64_t v43 = v34;
  char v48 = 9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A6B8);
  sub_23ABC5A60(&qword_268A5A6C0, &qword_268A5A6B8, (void (*)(void))sub_23ABC43E4);
  sub_23AC2A840();
  uint64_t v43 = v33;
  char v48 = 10;
  sub_23AC2A840();
  LOBYTE(v43) = v32;
  char v48 = 11;
  sub_23ABC4438();
  sub_23AC2A810();
  LOBYTE(v43) = v31;
  char v48 = 12;
  sub_23AC2A810();
  uint64_t v43 = v30;
  char v48 = 13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
  sub_23ABC41DC(&qword_268A5A5C0);
  sub_23AC2A810();
  uint64_t v43 = v29;
  char v48 = 14;
  sub_23AC2A810();
  uint64_t v43 = v28;
  char v48 = 15;
  sub_23AC2A810();
  uint64_t v43 = v24;
  uint64_t v44 = v27;
  uint64_t v45 = v26;
  uint64_t v46 = v25;
  char v48 = 16;
  sub_23ABC448C();
  uint64_t v21 = v38;
  uint64_t v20 = v39;
  sub_23AC2A840();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v21, v20);
}

uint64_t VCCommand.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A6E0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v107 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23ABC4294();
  sub_23AC2A910();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v107);
  }
  uint64_t v64 = v6;
  uint64_t v60 = a2;
  LOBYTE(v78[0]) = 0;
  uint64_t v14 = sub_23AC2A7B0();
  uint64_t v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A670);
  LOBYTE(v68) = 1;
  sub_23ABC5A60(&qword_268A5A6E8, &qword_268A5A670, (void (*)(void))sub_23ABC44E0);
  swift_bridgeObjectRetain();
  sub_23AC2A7D0();
  uint64_t v59 = v16;
  uint64_t v17 = v78[0];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A688);
  LOBYTE(v68) = 2;
  uint64_t v19 = sub_23ABC5A60(&qword_268A5A6F8, &qword_268A5A688, (void (*)(void))sub_23ABC4534);
  swift_bridgeObjectRetain();
  sub_23AC2A7D0();
  uint64_t v63 = v17;
  uint64_t v20 = v18;
  uint64_t v21 = v78[0];
  LOBYTE(v68) = 3;
  swift_bridgeObjectRetain();
  sub_23AC2A7D0();
  uint64_t v67 = v21;
  uint64_t v57 = v19;
  uint64_t v58 = v20;
  uint64_t v22 = v78[0];
  LOBYTE(v78[0]) = 4;
  swift_bridgeObjectRetain();
  int v23 = sub_23AC2A7C0();
  uint64_t v62 = v22;
  LODWORD(v19) = v23;
  LOBYTE(v78[0]) = 5;
  LODWORD(v56) = sub_23AC2A7C0();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A6A0);
  LOBYTE(v68) = 6;
  uint64_t v25 = sub_23ABC5A60(&qword_268A5A708, &qword_268A5A6A0, (void (*)(void))sub_23ABC4588);
  uint64_t v65 = v24;
  uint64_t v61 = v25;
  sub_23AC2A7D0();
  LOBYTE(v68) = 7;
  uint64_t v55 = v78[0];
  swift_bridgeObjectRetain();
  sub_23AC2A7D0();
  LODWORD(v54) = v19;
  uint64_t v26 = v55;
  LOBYTE(v68) = 8;
  uint64_t v27 = v78[0];
  swift_bridgeObjectRetain();
  sub_23AC2A7D0();
  uint64_t v66 = v27;
  uint64_t v53 = v14;
  uint64_t v28 = v78[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A6B8);
  LOBYTE(v68) = 9;
  sub_23ABC5A60(&qword_268A5A718, &qword_268A5A6B8, (void (*)(void))sub_23ABC45DC);
  uint64_t v65 = v28;
  swift_bridgeObjectRetain();
  sub_23AC2A7D0();
  LOBYTE(v68) = 10;
  uint64_t v61 = v78[0];
  swift_bridgeObjectRetain();
  sub_23AC2A7D0();
  uint64_t v29 = v78[0];
  LOBYTE(v68) = 11;
  sub_23ABC4630();
  uint64_t v52 = v29;
  swift_bridgeObjectRetain();
  sub_23AC2A7A0();
  int v30 = LOBYTE(v78[0]);
  LOBYTE(v68) = 12;
  sub_23AC2A7A0();
  int v49 = LOBYTE(v78[0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A3C8);
  LOBYTE(v68) = 13;
  sub_23ABC41DC(&qword_268A5A650);
  sub_23AC2A7A0();
  uint64_t v51 = 0;
  LOBYTE(v68) = 14;
  uint64_t v50 = v78[0];
  swift_bridgeObjectRetain();
  uint64_t v31 = v51;
  sub_23AC2A7A0();
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v51) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    LOBYTE(v68) = 15;
    uint64_t v48 = v78[0];
    swift_bridgeObjectRetain();
    sub_23AC2A7A0();
    uint64_t v32 = v78[0];
    char v99 = 16;
    sub_23ABC4684();
    uint64_t v58 = v32;
    swift_bridgeObjectRetain();
    sub_23AC2A7D0();
    char v33 = v54 & 1;
    int v46 = v54 & 1;
    LOBYTE(v32) = v56 & 1;
    LODWORD(v51) = v56 & 1;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v5);
    uint64_t v64 = v100;
    uint64_t v56 = *((void *)&v101 + 1);
    uint64_t v57 = v101;
    uint64_t v54 = v102;
    *(void *)&long long v68 = v53;
    *((void *)&v68 + 1) = v59;
    *(void *)&long long v69 = v63;
    *((void *)&v69 + 1) = v67;
    *(void *)&long long v70 = v62;
    BYTE8(v70) = v33;
    BYTE9(v70) = v32;
    *(void *)&long long v71 = v26;
    *((void *)&v71 + 1) = v66;
    *(void *)&long long v72 = v65;
    *((void *)&v72 + 1) = v61;
    *(void *)&long long v73 = v52;
    int v47 = v30;
    BYTE8(v73) = v30;
    BYTE9(v73) = v49;
    uint64_t v34 = v48;
    *(void *)&long long v74 = v50;
    *((void *)&v74 + 1) = v48;
    *(void *)&long long v75 = v58;
    *((void *)&v75 + 1) = v100;
    long long v76 = v101;
    uint64_t v77 = v102;
    sub_23ABB5304((uint64_t)&v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v67;
    swift_bridgeObjectRelease();
    uint64_t v36 = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v52;
    swift_bridgeObjectRelease();
    uint64_t v38 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v58;
    swift_bridgeObjectRelease();
    long long v40 = v75;
    uint64_t v41 = v60;
    *(_OWORD *)(v60 + 96) = v74;
    *(_OWORD *)(v41 + 112) = v40;
    *(_OWORD *)(v41 + 128) = v76;
    *(void *)(v41 + 144) = v77;
    long long v42 = v71;
    *(_OWORD *)(v41 + 32) = v70;
    *(_OWORD *)(v41 + 48) = v42;
    long long v43 = v73;
    *(_OWORD *)(v41 + 64) = v72;
    *(_OWORD *)(v41 + 80) = v43;
    long long v44 = v69;
    *(_OWORD *)uint64_t v41 = v68;
    *(_OWORD *)(v41 + 16) = v44;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v107);
    v78[0] = v53;
    v78[1] = v59;
    v78[2] = v63;
    v78[3] = v35;
    v78[4] = v36;
    char v79 = v46;
    char v80 = v51;
    int v81 = v105;
    __int16 v82 = v106;
    uint64_t v83 = v55;
    uint64_t v84 = v66;
    uint64_t v85 = v65;
    uint64_t v86 = v61;
    uint64_t v87 = v37;
    char v88 = v47;
    char v89 = v49;
    __int16 v91 = v104;
    int v90 = v103;
    uint64_t v92 = v38;
    uint64_t v93 = v34;
    uint64_t v94 = v39;
    uint64_t v95 = v64;
    uint64_t v96 = v57;
    uint64_t v97 = v56;
    uint64_t v98 = v54;
    return sub_23ABB53EC((uint64_t)v78);
  }
  return result;
}

uint64_t sub_23ABC15A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return VCCommand.init(from:)(a1, a2);
}

uint64_t sub_23ABC15B8(void *a1)
{
  return VCCommand.encode(to:)(a1);
}

uint64_t VCCommandCollection.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCCommandCollection.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCCommandCollection.commands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCCommandCollection.showInSettings.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

void __swiftcall VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(SpeechRecognitionCommandServices::VCCommandCollection *__return_ptr retstr, Swift::String identifier, Swift::String displayName, Swift::Bool showInSettings, Swift::OpaquePointer commands)
{
  retstr->identifier = identifier;
  retstr->displayName = displayName;
  retstr->commands = commands;
  retstr->showInSettings = showInSettings;
}

uint64_t sub_23ABC1658()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4E79616C70736964;
      break;
    case 2:
      uint64_t result = 0x73646E616D6D6F63;
      break;
    case 3:
      uint64_t result = 0x65536E49776F6873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23ABC1700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23ABCA314(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23ABC1728(uint64_t a1)
{
  unint64_t v2 = sub_23ABC59B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23ABC1764(uint64_t a1)
{
  unint64_t v2 = sub_23ABC59B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VCCommandCollection.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A738);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5, v6, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v16 = *(void *)(v1 + 24);
  uint64_t v17 = v10;
  uint64_t v15 = *(void *)(v1 + 32);
  int v20 = *(unsigned __int8 *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABC59B8();
  sub_23AC2A920();
  char v24 = 0;
  uint64_t v11 = v18;
  sub_23AC2A820();
  if (!v11)
  {
    uint64_t v12 = v15;
    char v23 = 1;
    sub_23AC2A820();
    uint64_t v19 = v12;
    char v22 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A740);
    sub_23ABC5A60(&qword_268A5A748, &qword_268A5A740, (void (*)(void))sub_23ABC5A0C);
    sub_23AC2A840();
    char v21 = 3;
    sub_23AC2A830();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t VCCommandCollection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A758);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23ABC59B8();
  sub_23AC2A910();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  char v32 = 0;
  uint64_t v12 = sub_23AC2A7B0();
  uint64_t v15 = v14;
  uint64_t v26 = v12;
  char v31 = 1;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_23AC2A7B0();
  uint64_t v18 = v17;
  uint64_t v25 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A740);
  uint64_t v27 = 0;
  char v30 = 2;
  sub_23ABC5A60(&qword_268A5A760, &qword_268A5A740, (void (*)(void))sub_23ABC5ACC);
  swift_bridgeObjectRetain();
  uint64_t v19 = v27;
  sub_23AC2A7D0();
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v27;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v20) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v29 = 3;
    uint64_t v24 = v28;
    swift_bridgeObjectRetain();
    char v21 = sub_23AC2A7C0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    *(void *)a2 = v26;
    *(void *)(a2 + 8) = v15;
    uint64_t v22 = v24;
    *(void *)(a2 + 16) = v25;
    *(void *)(a2 + 24) = v18;
    *(void *)(a2 + 32) = v22;
    *(unsigned char *)(a2 + 40) = v21 & 1;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23ABC1D48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return VCCommandCollection.init(from:)(a1, a2);
}

uint64_t sub_23ABC1D60(void *a1)
{
  return VCCommandCollection.encode(to:)(a1);
}

uint64_t static VCCommand.allCommands.getter()
{
  uint64_t result = _s32SpeechRecognitionCommandServices19VCCommandCollectionV03allC11CollectionsSayACGvgZ_0();
  uint64_t v1 = *(void *)(result + 16);
  if (!v1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
LABEL_19:
    swift_bridgeObjectRelease();
    return v3;
  }
  uint64_t v2 = result + 64;
  uint64_t v3 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v4 = *(void *)v2;
    uint64_t v5 = *(void *)(*(void *)v2 + 16);
    int64_t v6 = *(void *)(v3 + 16);
    int64_t v7 = v6 + v5;
    if (__OFADD__(v6, v5)) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v7 <= *(void *)(v3 + 24) >> 1)
    {
      if (*(void *)(v4 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v6 <= v7) {
        int64_t v8 = v6 + v5;
      }
      else {
        int64_t v8 = v6;
      }
      uint64_t result = (uint64_t)sub_23ABC1EC0((char *)result, v8, 1, (char *)v3);
      uint64_t v3 = result;
      if (*(void *)(v4 + 16))
      {
LABEL_14:
        if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v5) {
          goto LABEL_22;
        }
        uint64_t result = swift_arrayInitWithCopy();
        if (v5)
        {
          uint64_t v9 = *(void *)(v3 + 16);
          BOOL v10 = __OFADD__(v9, v5);
          uint64_t v11 = v9 + v5;
          if (v10) {
            goto LABEL_23;
          }
          *(void *)(v3 + 16) = v11;
        }
        goto LABEL_4;
      }
    }
    if (v5) {
      goto LABEL_21;
    }
LABEL_4:
    uint64_t result = swift_bridgeObjectRelease();
    v2 += 48;
    if (!--v1) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

char *sub_23ABC1EC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
    BOOL v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    BOOL v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8]) {
      memmove(v12, v13, 152 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23ABC1FE0(uint64_t a1)
{
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return 0;
  }
  uint64_t v1 = 0;
  uint64_t v2 = (unsigned __int8 *)(a1 + 48);
  while (1)
  {
    uint64_t v12 = v2;
    uint64_t v14 = *((void *)v2 - 2);
    uint64_t v15 = *((void *)v2 - 1);
    unsigned __int8 v16 = *v2;
    sub_23ABB5750(v14, v15, *v2);
    sub_23AC2A710();
    sub_23ABB448C();
    uint64_t v3 = (void *)sub_23AC2A630();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v3[2]) {
      break;
    }
    uint64_t v13 = v1;
    uint64_t v6 = v3[4];
    uint64_t v5 = v3[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_23AC2A710();
    int64_t v7 = (void *)sub_23AC2A630();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7[2]) {
      goto LABEL_14;
    }
    uint64_t v9 = v7[4];
    uint64_t v8 = v7[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v6 == v9 && v5 == v8)
    {
      swift_bridgeObjectRelease_n();
      sub_23ABB5768(v14, v15, v16);
      return v1;
    }
    char v10 = sub_23AC2A860();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23ABB5768(v14, v15, v16);
    if (v10) {
      return v1;
    }
    uint64_t v2 = v12 + 24;
    ++v1;
    if (v11 == v13 + 1) {
      return 0;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_23ABC2268(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616D726F4ELL && a2 == 0xE600000000000000;
  if (v2 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023AC50DD0 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7065656C53 && a2 == 0xE500000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F68706F7263694DLL && a2 == 0xED000066664F656ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23AC2A860();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t _s32SpeechRecognitionCommandServices9VCCommandV14TargetedStringO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1u:
      if (v7 != 1) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      LOBYTE(v7) = 1;
      unsigned __int8 v4 = 1;
      char v9 = 1;
      break;
    case 2u:
      if (v7 != 2) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 2;
      unsigned __int8 v4 = 2;
      break;
    case 3u:
      if (v7 != 3) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 3;
      unsigned __int8 v4 = 3;
      break;
    case 4u:
      if (v7 != 4) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 4;
      unsigned __int8 v4 = 4;
      break;
    case 5u:
      if (v7 != 5) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 5;
      unsigned __int8 v4 = 5;
      break;
    case 6u:
      if (v7 != 6) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 6;
      unsigned __int8 v4 = 6;
      break;
    case 7u:
      if (v7 != 7) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 7;
      unsigned __int8 v4 = 7;
      break;
    case 8u:
      if (v7 != 8) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 8;
      unsigned __int8 v4 = 8;
      break;
    case 9u:
      if (v7 != 9) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 9;
      unsigned __int8 v4 = 9;
      break;
    case 0xAu:
      if (v7 != 10) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 10;
      unsigned __int8 v4 = 10;
      break;
    case 0xBu:
      if (v7 != 11) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 11;
      unsigned __int8 v4 = 11;
      break;
    case 0xCu:
      if (v7 != 12) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 12;
      unsigned __int8 v4 = 12;
      break;
    case 0xDu:
      if (v7 != 13) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 13;
      unsigned __int8 v4 = 13;
      break;
    case 0xEu:
      if (v7 != 14) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 14;
      unsigned __int8 v4 = 14;
      break;
    case 0xFu:
      if (v7 != 15) {
        goto LABEL_113;
      }
      if (v2 != v5 || v3 != v6) {
        goto LABEL_112;
      }
      char v9 = 1;
      LOBYTE(v7) = 15;
      unsigned __int8 v4 = 15;
      break;
    default:
      if (*(unsigned char *)(a2 + 16))
      {
LABEL_113:
        char v9 = 0;
      }
      else if (v2 == v5 && v3 == v6)
      {
        LOBYTE(v7) = 0;
        unsigned __int8 v4 = 0;
        char v9 = 1;
      }
      else
      {
LABEL_112:
        char v9 = sub_23AC2A860();
        LOBYTE(v7) = v4;
      }
      break;
  }
  sub_23ABB5750(v5, v6, v7);
  sub_23ABB5750(v2, v3, v4);
  sub_23ABB5768(v2, v3, v4);
  sub_23ABB5768(v5, v6, v7);
  return v9 & 1;
}

uint64_t _s32SpeechRecognitionCommandServices9VCCommandV18TargetedStringListO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  switch(*(unsigned char *)(a1 + 8))
  {
    case 1:
      if (v6 != 1) {
        return 0;
      }
      return sub_23ABBBAA0(v4, v5);
    case 2:
      if (v6 == 2) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 3:
      if (v6 == 3) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 4:
      if (v6 == 4) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 5:
      if (v6 == 5) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 6:
      if (v6 == 6) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 7:
      if (v6 == 7) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 8:
      if (v6 == 8) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 9:
      if (v6 == 9) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 0xA:
      if (v6 == 10) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 0xB:
      if (v6 == 11) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 0xC:
      if (v6 == 12) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 0xD:
      if (v6 == 13) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 0xE:
      if (v6 == 14) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    case 0xF:
      if (v6 == 15) {
        return sub_23ABBBAA0(v4, v5);
      }
      return 0;
    default:
      if (v6) {
        return 0;
      }
      else {
        return sub_23ABBBAA0(v4, v5);
      }
  }
}

BOOL _s32SpeechRecognitionCommandServices9VCCommandV14TargetedStringO1loiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      if (v7 != 1) {
        goto LABEL_115;
      }
      BOOL v12 = v3 == v6 && v2 == v5;
      if (v12 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 1u);
        sub_23ABB5750(v3, v2, 1u);
        sub_23ABB5768(v3, v2, 1u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 1;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 1u);
      sub_23ABB5750(v3, v2, 1u);
      sub_23ABB5768(v3, v2, 1u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 1;
      goto LABEL_132;
    case 2:
      if (v7 != 2) {
        goto LABEL_115;
      }
      BOOL v13 = v3 == v6 && v2 == v5;
      if (v13 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 2u);
        sub_23ABB5750(v3, v2, 2u);
        sub_23ABB5768(v3, v2, 2u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 2;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 2u);
      sub_23ABB5750(v3, v2, 2u);
      sub_23ABB5768(v3, v2, 2u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 2;
      goto LABEL_132;
    case 3:
      if (v7 != 3) {
        goto LABEL_115;
      }
      BOOL v14 = v3 == v6 && v2 == v5;
      if (v14 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 3u);
        sub_23ABB5750(v3, v2, 3u);
        sub_23ABB5768(v3, v2, 3u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 3;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 3u);
      sub_23ABB5750(v3, v2, 3u);
      sub_23ABB5768(v3, v2, 3u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 3;
      goto LABEL_132;
    case 4:
      if (v7 != 4) {
        goto LABEL_115;
      }
      BOOL v15 = v3 == v6 && v2 == v5;
      if (v15 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 4u);
        sub_23ABB5750(v3, v2, 4u);
        sub_23ABB5768(v3, v2, 4u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 4;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 4u);
      sub_23ABB5750(v3, v2, 4u);
      sub_23ABB5768(v3, v2, 4u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 4;
      goto LABEL_132;
    case 5:
      if (v7 != 5) {
        goto LABEL_115;
      }
      BOOL v16 = v3 == v6 && v2 == v5;
      if (v16 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 5u);
        sub_23ABB5750(v3, v2, 5u);
        sub_23ABB5768(v3, v2, 5u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 5;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 5u);
      sub_23ABB5750(v3, v2, 5u);
      sub_23ABB5768(v3, v2, 5u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 5;
      goto LABEL_132;
    case 6:
      if (v7 != 6) {
        goto LABEL_115;
      }
      BOOL v17 = v3 == v6 && v2 == v5;
      if (v17 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 6u);
        sub_23ABB5750(v3, v2, 6u);
        sub_23ABB5768(v3, v2, 6u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 6;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 6u);
      sub_23ABB5750(v3, v2, 6u);
      sub_23ABB5768(v3, v2, 6u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 6;
      goto LABEL_132;
    case 7:
      if (v7 != 7) {
        goto LABEL_115;
      }
      BOOL v18 = v3 == v6 && v2 == v5;
      if (v18 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 7u);
        sub_23ABB5750(v3, v2, 7u);
        sub_23ABB5768(v3, v2, 7u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 7;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 7u);
      sub_23ABB5750(v3, v2, 7u);
      sub_23ABB5768(v3, v2, 7u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 7;
      goto LABEL_132;
    case 8:
      if (v7 != 8) {
        goto LABEL_115;
      }
      BOOL v19 = v3 == v6 && v2 == v5;
      if (v19 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 8u);
        sub_23ABB5750(v3, v2, 8u);
        sub_23ABB5768(v3, v2, 8u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 8;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 8u);
      sub_23ABB5750(v3, v2, 8u);
      sub_23ABB5768(v3, v2, 8u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 8;
      goto LABEL_132;
    case 9:
      if (v7 != 9) {
        goto LABEL_115;
      }
      BOOL v20 = v3 == v6 && v2 == v5;
      if (v20 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 9u);
        sub_23ABB5750(v3, v2, 9u);
        sub_23ABB5768(v3, v2, 9u);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 9;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 9u);
      sub_23ABB5750(v3, v2, 9u);
      sub_23ABB5768(v3, v2, 9u);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 9;
      goto LABEL_132;
    case 0xA:
      if (v7 != 10) {
        goto LABEL_115;
      }
      BOOL v21 = v3 == v6 && v2 == v5;
      if (v21 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 0xAu);
        sub_23ABB5750(v3, v2, 0xAu);
        sub_23ABB5768(v3, v2, 0xAu);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 10;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 0xAu);
      sub_23ABB5750(v3, v2, 0xAu);
      sub_23ABB5768(v3, v2, 0xAu);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 10;
      goto LABEL_132;
    case 0xB:
      if (v7 != 11) {
        goto LABEL_115;
      }
      BOOL v22 = v3 == v6 && v2 == v5;
      if (v22 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 0xBu);
        sub_23ABB5750(v3, v2, 0xBu);
        sub_23ABB5768(v3, v2, 0xBu);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 11;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 0xBu);
      sub_23ABB5750(v3, v2, 0xBu);
      sub_23ABB5768(v3, v2, 0xBu);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 11;
      goto LABEL_132;
    case 0xC:
      if (v7 != 12) {
        goto LABEL_115;
      }
      BOOL v23 = v3 == v6 && v2 == v5;
      if (v23 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 0xCu);
        sub_23ABB5750(v3, v2, 0xCu);
        sub_23ABB5768(v3, v2, 0xCu);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 12;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 0xCu);
      sub_23ABB5750(v3, v2, 0xCu);
      sub_23ABB5768(v3, v2, 0xCu);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 12;
      goto LABEL_132;
    case 0xD:
      if (v7 != 13) {
        goto LABEL_115;
      }
      BOOL v24 = v3 == v6 && v2 == v5;
      if (v24 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 0xDu);
        sub_23ABB5750(v3, v2, 0xDu);
        sub_23ABB5768(v3, v2, 0xDu);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 13;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 0xDu);
      sub_23ABB5750(v3, v2, 0xDu);
      sub_23ABB5768(v3, v2, 0xDu);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 13;
      goto LABEL_132;
    case 0xE:
      if (v7 != 14) {
        goto LABEL_115;
      }
      BOOL v25 = v3 == v6 && v2 == v5;
      if (v25 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 0xEu);
        sub_23ABB5750(v3, v2, 0xEu);
        sub_23ABB5768(v3, v2, 0xEu);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 14;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 0xEu);
      sub_23ABB5750(v3, v2, 0xEu);
      sub_23ABB5768(v3, v2, 0xEu);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 14;
      goto LABEL_132;
    case 0xF:
      if (v7 != 15) {
        goto LABEL_115;
      }
      BOOL v26 = v3 == v6 && v2 == v5;
      if (v26 || (sub_23AC2A860() & 1) != 0)
      {
        sub_23ABB5750(v6, v5, 0xFu);
        sub_23ABB5750(v3, v2, 0xFu);
        sub_23ABB5768(v3, v2, 0xFu);
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        unsigned __int8 v11 = 15;
        goto LABEL_114;
      }
      char v28 = sub_23AC2A860();
      sub_23ABB5750(v6, v5, 0xFu);
      sub_23ABB5750(v3, v2, 0xFu);
      sub_23ABB5768(v3, v2, 0xFu);
      uint64_t v29 = v6;
      uint64_t v30 = v5;
      unsigned __int8 v31 = 15;
      goto LABEL_132;
    default:
      if (*(unsigned char *)(a2 + 16))
      {
LABEL_115:
        sub_23ABB5750(*(void *)a2, *(void *)(a2 + 8), v7);
        sub_23ABB5750(v3, v2, v4);
        sub_23ABB5768(v3, v2, v4);
        sub_23ABB5768(v6, v5, v7);
        return v4 < v7;
      }
      else
      {
        BOOL v8 = v3 == v6 && v2 == v5;
        if (v8 || (sub_23AC2A860() & 1) != 0)
        {
          sub_23ABB5750(v6, v5, 0);
          sub_23ABB5750(v3, v2, 0);
          sub_23ABB5768(v3, v2, 0);
          uint64_t v9 = v6;
          uint64_t v10 = v5;
          unsigned __int8 v11 = 0;
LABEL_114:
          sub_23ABB5768(v9, v10, v11);
          return 0;
        }
        else
        {
          char v28 = sub_23AC2A860();
          sub_23ABB5750(v6, v5, 0);
          sub_23ABB5750(v3, v2, 0);
          sub_23ABB5768(v3, v2, 0);
          uint64_t v29 = v6;
          uint64_t v30 = v5;
          unsigned __int8 v31 = 0;
LABEL_132:
          sub_23ABB5768(v29, v30, v31);
          return v28 & 1;
        }
      }
  }
}

unint64_t sub_23ABC366C()
{
  unint64_t result = qword_268A5AC48;
  if (!qword_268A5AC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC48);
  }
  return result;
}

unint64_t sub_23ABC36C0()
{
  unint64_t result = qword_268A5AC50;
  if (!qword_268A5AC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC50);
  }
  return result;
}

unint64_t sub_23ABC3714()
{
  unint64_t result = qword_268A5AC58;
  if (!qword_268A5AC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC58);
  }
  return result;
}

unint64_t sub_23ABC3768()
{
  unint64_t result = qword_268A5AC60;
  if (!qword_268A5AC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC60);
  }
  return result;
}

unint64_t sub_23ABC37BC()
{
  unint64_t result = qword_268A5AC68;
  if (!qword_268A5AC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC68);
  }
  return result;
}

unint64_t sub_23ABC3810()
{
  unint64_t result = qword_268A5AC70;
  if (!qword_268A5AC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC70);
  }
  return result;
}

unint64_t sub_23ABC3864()
{
  unint64_t result = qword_268A5AC78;
  if (!qword_268A5AC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC78);
  }
  return result;
}

unint64_t sub_23ABC38B8()
{
  unint64_t result = qword_268A5AC80;
  if (!qword_268A5AC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC80);
  }
  return result;
}

unint64_t sub_23ABC390C()
{
  unint64_t result = qword_268A5AC88;
  if (!qword_268A5AC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC88);
  }
  return result;
}

unint64_t sub_23ABC3960()
{
  unint64_t result = qword_268A5AC90;
  if (!qword_268A5AC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC90);
  }
  return result;
}

unint64_t sub_23ABC39B4()
{
  unint64_t result = qword_268A5AC98;
  if (!qword_268A5AC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AC98);
  }
  return result;
}

unint64_t sub_23ABC3A08()
{
  unint64_t result = qword_268A5ACA0;
  if (!qword_268A5ACA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACA0);
  }
  return result;
}

unint64_t sub_23ABC3A5C()
{
  unint64_t result = qword_268A5ACA8;
  if (!qword_268A5ACA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACA8);
  }
  return result;
}

unint64_t sub_23ABC3AB0()
{
  unint64_t result = qword_268A5ACB0;
  if (!qword_268A5ACB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACB0);
  }
  return result;
}

unint64_t sub_23ABC3B04()
{
  unint64_t result = qword_268A5ACB8;
  if (!qword_268A5ACB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACB8);
  }
  return result;
}

unint64_t sub_23ABC3B58()
{
  unint64_t result = qword_268A5ACC0;
  if (!qword_268A5ACC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACC0);
  }
  return result;
}

unint64_t sub_23ABC3BAC()
{
  unint64_t result = qword_268A5ACC8;
  if (!qword_268A5ACC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACC8);
  }
  return result;
}

unint64_t sub_23ABC3C00()
{
  unint64_t result = qword_268A5ACD0;
  if (!qword_268A5ACD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACD0);
  }
  return result;
}

unint64_t sub_23ABC3C54()
{
  unint64_t result = qword_268A5ACD8;
  if (!qword_268A5ACD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACD8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_23ABC3CF0()
{
  unint64_t result = qword_268A5ACE0;
  if (!qword_268A5ACE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACE0);
  }
  return result;
}

unint64_t sub_23ABC3D44()
{
  unint64_t result = qword_268A5ACE8;
  if (!qword_268A5ACE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACE8);
  }
  return result;
}

unint64_t sub_23ABC3D98()
{
  unint64_t result = qword_268A5ACF0;
  if (!qword_268A5ACF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACF0);
  }
  return result;
}

unint64_t sub_23ABC3DEC()
{
  unint64_t result = qword_268A5ACF8;
  if (!qword_268A5ACF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5ACF8);
  }
  return result;
}

unint64_t sub_23ABC3E40()
{
  unint64_t result = qword_268A5AD00;
  if (!qword_268A5AD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD00);
  }
  return result;
}

unint64_t sub_23ABC3E94()
{
  unint64_t result = qword_268A5AD08;
  if (!qword_268A5AD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD08);
  }
  return result;
}

unint64_t sub_23ABC3EE8()
{
  unint64_t result = qword_268A5AD10;
  if (!qword_268A5AD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD10);
  }
  return result;
}

unint64_t sub_23ABC3F3C()
{
  unint64_t result = qword_268A5AD18;
  if (!qword_268A5AD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD18);
  }
  return result;
}

unint64_t sub_23ABC3F90()
{
  unint64_t result = qword_268A5AD20;
  if (!qword_268A5AD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD20);
  }
  return result;
}

unint64_t sub_23ABC3FE4()
{
  unint64_t result = qword_268A5AD28;
  if (!qword_268A5AD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD28);
  }
  return result;
}

unint64_t sub_23ABC4038()
{
  unint64_t result = qword_268A5AD30;
  if (!qword_268A5AD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD30);
  }
  return result;
}

unint64_t sub_23ABC408C()
{
  unint64_t result = qword_268A5AD38;
  if (!qword_268A5AD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD38);
  }
  return result;
}

unint64_t sub_23ABC40E0()
{
  unint64_t result = qword_268A5AD40;
  if (!qword_268A5AD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD40);
  }
  return result;
}

unint64_t sub_23ABC4134()
{
  unint64_t result = qword_268A5AD48;
  if (!qword_268A5AD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD48);
  }
  return result;
}

unint64_t sub_23ABC4188()
{
  unint64_t result = qword_268A5AD50;
  if (!qword_268A5AD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD50);
  }
  return result;
}

uint64_t sub_23ABC41DC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268A5A3C8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23ABC4240()
{
  unint64_t result = qword_268A5AD58;
  if (!qword_268A5AD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD58);
  }
  return result;
}

unint64_t sub_23ABC4294()
{
  unint64_t result = qword_268A5AD60;
  if (!qword_268A5AD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5AD60);
  }
  return result;
}

unint64_t sub_23ABC42E8()
{
  unint64_t result = qword_268A5A680;
  if (!qword_268A5A680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A680);
  }
  return result;
}

unint64_t sub_23ABC433C()
{
  unint64_t result = qword_268A5A698;
  if (!qword_268A5A698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A698);
  }
  return result;
}

unint64_t sub_23ABC4390()
{
  unint64_t result = qword_268A5A6B0;
  if (!qword_268A5A6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A6B0);
  }
  return result;
}

unint64_t sub_23ABC43E4()
{
  unint64_t result = qword_268A5A6C8;
  if (!qword_268A5A6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A6C8);
  }
  return result;
}

unint64_t sub_23ABC4438()
{
  unint64_t result = qword_268A5A6D0;
  if (!qword_268A5A6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A6D0);
  }
  return result;
}

unint64_t sub_23ABC448C()
{
  unint64_t result = qword_268A5A6D8;
  if (!qword_268A5A6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A6D8);
  }
  return result;
}

unint64_t sub_23ABC44E0()
{
  unint64_t result = qword_268A5A6F0;
  if (!qword_268A5A6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A6F0);
  }
  return result;
}

unint64_t sub_23ABC4534()
{
  unint64_t result = qword_268A5A700;
  if (!qword_268A5A700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A700);
  }
  return result;
}

unint64_t sub_23ABC4588()
{
  unint64_t result = qword_268A5A710;
  if (!qword_268A5A710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A710);
  }
  return result;
}

unint64_t sub_23ABC45DC()
{
  unint64_t result = qword_268A5A720;
  if (!qword_268A5A720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A720);
  }
  return result;
}

unint64_t sub_23ABC4630()
{
  unint64_t result = qword_268A5A728;
  if (!qword_268A5A728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A728);
  }
  return result;
}

unint64_t sub_23ABC4684()
{
  unint64_t result = qword_268A5A730;
  if (!qword_268A5A730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A730);
  }
  return result;
}

uint64_t sub_23ABC46D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7105633 && a2 == 0xE300000000000000;
  if (v2 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x534F63616DLL && a2 == 0xE500000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616D5F534F63616DLL && a2 == 0xE900000000000063 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 5459817 && a2 == 0xE300000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F6850695F534F69 && a2 == 0xEA0000000000656ELL || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646150695F534F69 && a2 == 0xE800000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x507261635F534F69 && a2 == 0xEB0000000079616CLL || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x63616D5F534F69 && a2 == 0xE700000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x534F6E6F69736976 && a2 == 0xE800000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x534F6E6F69736976 && a2 == 0xEF6E6F697369765FLL || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 1397716596 && a2 == 0xE400000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7070615F534F7674 && a2 == 0xEC0000005654656CLL || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6D6F685F534F7674 && a2 == 0xEC000000646F5065 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6F50695F534F7674 && a2 == 0xE900000000000064 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x534F6863746177 && a2 == 0xE700000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x5F534F6863746177 && a2 == 0xED00006863746177)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v6 = sub_23AC2A860();
    swift_bridgeObjectRelease();
    if (v6) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

uint64_t sub_23ABC4DA8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7105633 && a2 == 0xE300000000000000;
  if (v2 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6513005 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23AC2A860();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_23ABC4E7C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x49646E616D6D6F63 && a2 == 0xE900000000000044;
  if (v2 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x53646E616D6D6F63 && a2 == 0xEE0073676E697274 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7463617274736261 && a2 == 0xE800000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6973737563736964 && a2 == 0xEA00000000006E6FLL || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023AC50DF0 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6574726F70707573 && a2 == 0xEF736D6F69644964 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4964656E6E616C70 && a2 == 0xED0000736D6F6964 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023AC50E10 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023AC50E30 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023AC50E50 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000023AC50E70 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000023AC50E90 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x800000023AC50EB0 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD00000000000002ALL && a2 == 0x800000023AC50EE0 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023AC50F10 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    char v6 = sub_23AC2A860();
    swift_bridgeObjectRelease();
    if (v6) {
      return 16;
    }
    else {
      return 17;
    }
  }
}

uint64_t _s32SpeechRecognitionCommandServices19VCCommandCollectionV03allC11CollectionsSayACGvgZ_0()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A7E0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23AC2C7F0;
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v9 = sub_23AC2A560();
  *(void *)(v8 + 32) = 0x6D6F74737543;
  *(void *)(v8 + 40) = 0xE600000000000000;
  *(void *)(v8 + 48) = v9;
  *(void *)(v8 + 56) = v10;
  *(void *)(v8 + 64) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v8 + 72) = 1;
  unsigned __int8 v11 = sub_23AB7A3D4();
  uint64_t v12 = v11[1];
  uint64_t v13 = v11[2];
  uint64_t v14 = v11[3];
  uint64_t v15 = v11[4];
  char v16 = *((unsigned char *)v11 + 40);
  *(void *)(v8 + 80) = *v11;
  *(void *)(v8 + 88) = v12;
  *(void *)(v8 + 96) = v13;
  *(void *)(v8 + 104) = v14;
  *(void *)(v8 + 112) = v15;
  *(unsigned char *)(v8 + 120) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BOOL v17 = sub_23AB996D4();
  object = v17->identifier._object;
  uint64_t countAndFlagsBits = v17->displayName._countAndFlagsBits;
  BOOL v20 = v17->displayName._object;
  rawCFDictionaryRef Value = v17->commands._rawValue;
  Swift::Bool showInSettings = v17->showInSettings;
  *(void *)(v8 + 128) = v17->identifier._countAndFlagsBits;
  *(void *)(v8 + 136) = object;
  *(void *)(v8 + 144) = countAndFlagsBits;
  *(void *)(v8 + 152) = v20;
  *(void *)(v8 + 160) = rawValue;
  *(unsigned char *)(v8 + 168) = showInSettings;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BOOL v23 = sub_23ABAB710();
  uint64_t v24 = v23[1];
  uint64_t v25 = v23[2];
  uint64_t v26 = v23[3];
  uint64_t v27 = v23[4];
  char v28 = *((unsigned char *)v23 + 40);
  *(void *)(v8 + 176) = *v23;
  *(void *)(v8 + 184) = v24;
  *(void *)(v8 + 192) = v25;
  *(void *)(v8 + 200) = v26;
  *(void *)(v8 + 208) = v27;
  *(unsigned char *)(v8 + 216) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_23AB7C95C();
  uint64_t v30 = v29->identifier._object;
  uint64_t v31 = v29->displayName._countAndFlagsBits;
  char v32 = v29->displayName._object;
  char v33 = v29->commands._rawValue;
  Swift::Bool v34 = v29->showInSettings;
  *(void *)(v8 + 224) = v29->identifier._countAndFlagsBits;
  *(void *)(v8 + 232) = v30;
  *(void *)(v8 + 240) = v31;
  *(void *)(v8 + 248) = v32;
  *(void *)(v8 + 256) = v33;
  *(unsigned char *)(v8 + 264) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_23AB7B744();
  uint64_t v36 = v35->identifier._object;
  uint64_t v37 = v35->displayName._countAndFlagsBits;
  uint64_t v38 = v35->displayName._object;
  uint64_t v39 = v35->commands._rawValue;
  Swift::Bool v40 = v35->showInSettings;
  *(void *)(v8 + 272) = v35->identifier._countAndFlagsBits;
  *(void *)(v8 + 280) = v36;
  *(void *)(v8 + 288) = v37;
  *(void *)(v8 + 296) = v38;
  *(void *)(v8 + 304) = v39;
  *(unsigned char *)(v8 + 312) = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v41 = sub_23AB687DC();
  long long v42 = v41->identifier._object;
  uint64_t v43 = v41->displayName._countAndFlagsBits;
  long long v44 = v41->displayName._object;
  uint64_t v45 = v41->commands._rawValue;
  Swift::Bool v46 = v41->showInSettings;
  *(void *)(v8 + 320) = v41->identifier._countAndFlagsBits;
  *(void *)(v8 + 328) = v42;
  *(void *)(v8 + 336) = v43;
  *(void *)(v8 + 344) = v44;
  *(void *)(v8 + 352) = v45;
  *(unsigned char *)(v8 + 360) = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v47 = sub_23AB85EF4();
  uint64_t v48 = v47->identifier._object;
  uint64_t v49 = v47->displayName._countAndFlagsBits;
  uint64_t v50 = v47->displayName._object;
  uint64_t v51 = v47->commands._rawValue;
  Swift::Bool v52 = v47->showInSettings;
  *(void *)(v8 + 368) = v47->identifier._countAndFlagsBits;
  *(void *)(v8 + 376) = v48;
  *(void *)(v8 + 384) = v49;
  *(void *)(v8 + 392) = v50;
  *(void *)(v8 + 400) = v51;
  *(unsigned char *)(v8 + 408) = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_23AB60294();
  uint64_t v54 = v53->identifier._object;
  uint64_t v55 = v53->displayName._countAndFlagsBits;
  uint64_t v56 = v53->displayName._object;
  uint64_t v57 = v53->commands._rawValue;
  Swift::Bool v58 = v53->showInSettings;
  *(void *)(v8 + 416) = v53->identifier._countAndFlagsBits;
  *(void *)(v8 + 424) = v54;
  *(void *)(v8 + 432) = v55;
  *(void *)(v8 + 440) = v56;
  *(void *)(v8 + 448) = v57;
  *(unsigned char *)(v8 + 456) = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v59 = sub_23ABAE720();
  uint64_t v60 = v59->identifier._object;
  uint64_t v61 = v59->displayName._countAndFlagsBits;
  uint64_t v62 = v59->displayName._object;
  uint64_t v63 = v59->commands._rawValue;
  Swift::Bool v64 = v59->showInSettings;
  *(void *)(v8 + 464) = v59->identifier._countAndFlagsBits;
  *(void *)(v8 + 472) = v60;
  *(void *)(v8 + 480) = v61;
  *(void *)(v8 + 488) = v62;
  *(void *)(v8 + 496) = v63;
  *(unsigned char *)(v8 + 504) = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v65 = sub_23AB87CF8();
  uint64_t v66 = v65->identifier._object;
  uint64_t v67 = v65->displayName._countAndFlagsBits;
  long long v68 = v65->displayName._object;
  long long v69 = v65->commands._rawValue;
  Swift::Bool v70 = v65->showInSettings;
  *(void *)(v8 + 512) = v65->identifier._countAndFlagsBits;
  *(void *)(v8 + 520) = v66;
  *(void *)(v8 + 528) = v67;
  *(void *)(v8 + 536) = v68;
  *(void *)(v8 + 544) = v69;
  *(unsigned char *)(v8 + 552) = v70;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v71 = sub_23AB96208();
  long long v72 = v71->identifier._object;
  uint64_t v73 = v71->displayName._countAndFlagsBits;
  long long v74 = v71->displayName._object;
  long long v75 = v71->commands._rawValue;
  Swift::Bool v76 = v71->showInSettings;
  *(void *)(v8 + 560) = v71->identifier._countAndFlagsBits;
  *(void *)(v8 + 568) = v72;
  *(void *)(v8 + 576) = v73;
  *(void *)(v8 + 584) = v74;
  *(void *)(v8 + 592) = v75;
  *(unsigned char *)(v8 + 600) = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v77 = sub_23ABD3AB4();
  uint64_t v78 = v77->identifier._object;
  uint64_t v79 = v77->displayName._countAndFlagsBits;
  char v80 = v77->displayName._object;
  int v81 = v77->commands._rawValue;
  Swift::Bool v82 = v77->showInSettings;
  *(void *)(v8 + 608) = v77->identifier._countAndFlagsBits;
  *(void *)(v8 + 616) = v78;
  *(void *)(v8 + 624) = v79;
  *(void *)(v8 + 632) = v80;
  *(void *)(v8 + 640) = v81;
  *(unsigned char *)(v8 + 648) = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v8;
}

unint64_t sub_23ABC59B8()
{
  unint64_t result = qword_268A5AD68[0];
  if (!qword_268A5AD68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5AD68);
  }
  return result;
}

unint64_t sub_23ABC5A0C()
{
  unint64_t result = qword_268A5A750;
  if (!qword_268A5A750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A750);
  }
  return result;
}

uint64_t sub_23ABC5A60(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23ABC5ACC()
{
  unint64_t result = qword_268A5A768;
  if (!qword_268A5A768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A768);
  }
  return result;
}

unint64_t sub_23ABC5B24()
{
  unint64_t result = qword_268A5A770;
  if (!qword_268A5A770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A770);
  }
  return result;
}

uint64_t sub_23ABC5B78()
{
  return sub_23ABC5C78(&qword_268A5A778, &qword_268A5A780);
}

uint64_t sub_23ABC5BA4()
{
  return sub_23ABC5C78(&qword_268A5A788, &qword_268A5A790);
}

unint64_t sub_23ABC5BD0()
{
  unint64_t result = qword_268A5A798;
  if (!qword_268A5A798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A798);
  }
  return result;
}

uint64_t sub_23ABC5C24()
{
  return sub_23ABC5C78(&qword_268A5A7A0, &qword_268A5A7A8);
}

uint64_t sub_23ABC5C50()
{
  return sub_23ABC5C78(&qword_268A5A7B0, &qword_268A5A7B8);
}

uint64_t sub_23ABC5C78(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23ABC5CCC()
{
  unint64_t result = qword_268A5A7C0;
  if (!qword_268A5A7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A7C0);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  char *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for VCCommand.Platform(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VCCommand.Platform(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    char *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23ABC5E8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.Platform()
{
  return &type metadata for VCCommand.Platform;
}

uint64_t getEnumTagSinglePayload for VCCommand.Idiom(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VCCommand.Idiom(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    char *result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23ABC6020);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.Idiom()
{
  return &type metadata for VCCommand.Idiom;
}

ValueMetadata *type metadata accessor for VCCommand.InteractionLevel()
{
  return &type metadata for VCCommand.InteractionLevel;
}

uint64_t getEnumTagSinglePayload for VCCommand.Evaluation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE0) {
    goto LABEL_17;
  }
  if (a2 + 32 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 32) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 32;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 32;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 32;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x21;
  int v8 = v6 - 33;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VCCommand.Evaluation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 32 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 32) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDF)
  {
    unsigned int v6 = ((a2 - 224) >> 8) + 1;
    char *result = a2 + 32;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23ABC61CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 32;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.Evaluation()
{
  return &type metadata for VCCommand.Evaluation;
}

uint64_t destroy for VCCommand.TargetedString(uint64_t a1)
{
  return sub_23ABB5768(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s32SpeechRecognitionCommandServices9VCCommandV14TargetedStringOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_23ABB5750(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VCCommand.TargetedString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_23ABB5750(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_23ABB5768(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VCCommand.TargetedString(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_23ABB5768(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VCCommand.TargetedString(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF1 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 241);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xF) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCCommand.TargetedString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 241;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_23ABC63A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_23ABC63AC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString()
{
  return &type metadata for VCCommand.TargetedString;
}

uint64_t initializeBufferWithCopyOfBuffer for VCCommand.TargetedStringList(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for VCCommand.TargetedStringList()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for VCCommand.TargetedStringList(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t assignWithTake for VCCommand.TargetedStringList(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VCCommand.TargetedStringList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF1 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 241);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 0xF) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCCommand.TargetedStringList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 241;
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_23ABC6524(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_23ABC652C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList()
{
  return &type metadata for VCCommand.TargetedStringList;
}

uint64_t destroy for Action()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Action(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Action(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for Action(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Action()
{
  return &type metadata for Action;
}

uint64_t destroy for VCCommand()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VCCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VCCommand(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for VCCommand(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VCCommand(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VCCommand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand()
{
  return &type metadata for VCCommand;
}

uint64_t initializeBufferWithCopyOfBuffer for VCCommandCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for VCCommandCollection()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VCCommandCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VCCommandCollection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for VCCommandCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for VCCommandCollection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VCCommandCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommandCollection()
{
  return &type metadata for VCCommandCollection;
}

uint64_t sub_23ABC6F30(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_23ABC6F38(unsigned char *result, char a2)
{
  char *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for VCCommandCollection.CodingKeys()
{
  return &type metadata for VCCommandCollection.CodingKeys;
}

uint64_t getEnumTagSinglePayload for VCCommand.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VCCommand.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    char *result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23ABC70ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.CodingKeys()
{
  return &type metadata for VCCommand.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Action.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Action.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23ABC7240);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_23ABC7268(unsigned char *result, char a2)
{
  char *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Action.CodingKeys()
{
  return &type metadata for Action.CodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.CodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.CodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.AllCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.AllCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.MacOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.MacOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.MacOS_macCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.MacOS_macCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.IOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.IOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.IOS_iPhoneCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.IOS_iPhoneCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.IOS_iPadCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.IOS_iPadCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.IOS_carPlayCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.IOS_carPlayCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.IOS_macCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.IOS_macCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.VisionOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.VisionOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.VisionOS_visionCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.VisionOS_visionCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.TvOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.TvOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.TvOS_appleTVCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.TvOS_appleTVCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.TvOS_homePodCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.TvOS_homePodCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.TvOS_iPodCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.TvOS_iPodCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.WatchOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.WatchOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedStringList.WatchOS_watchCodingKeys()
{
  return &type metadata for VCCommand.TargetedStringList.WatchOS_watchCodingKeys;
}

uint64_t _s32SpeechRecognitionCommandServices9VCCommandV18TargetedStringListO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s32SpeechRecognitionCommandServices9VCCommandV18TargetedStringListO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    char *result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23ABC7504);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.CodingKeys()
{
  return &type metadata for VCCommand.TargetedString.CodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.AllCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.AllCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.MacOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.MacOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.MacOS_macCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.MacOS_macCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.IOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.IOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.IOS_iPhoneCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.IOS_iPhoneCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.IOS_iPadCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.IOS_iPadCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.IOS_carPlayCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.IOS_carPlayCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.IOS_macCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.IOS_macCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.VisionOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.VisionOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.VisionOS_visionCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.VisionOS_visionCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.TvOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.TvOSCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.TvOS_appleTVCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.TvOS_appleTVCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.TvOS_homePodCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.TvOS_homePodCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.TvOS_iPodCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.TvOS_iPodCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.WatchOSCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.WatchOSCodingKeys;
}

uint64_t _s32SpeechRecognitionCommandServices9VCCommandV18TargetedStringListO13AllCodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s32SpeechRecognitionCommandServices9VCCommandV18TargetedStringListO13AllCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23ABC7718);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.TargetedString.WatchOS_watchCodingKeys()
{
  return &type metadata for VCCommand.TargetedString.WatchOS_watchCodingKeys;
}

uint64_t _s32SpeechRecognitionCommandServices9VCCommandV16InteractionLevelOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s32SpeechRecognitionCommandServices9VCCommandV16InteractionLevelOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23ABC78ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCCommand.InteractionLevel.CodingKeys()
{
  return &type metadata for VCCommand.InteractionLevel.CodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.InteractionLevel.NormalCodingKeys()
{
  return &type metadata for VCCommand.InteractionLevel.NormalCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.InteractionLevel.ModalFocusedElementCodingKeys()
{
  return &type metadata for VCCommand.InteractionLevel.ModalFocusedElementCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.InteractionLevel.SleepCodingKeys()
{
  return &type metadata for VCCommand.InteractionLevel.SleepCodingKeys;
}

ValueMetadata *type metadata accessor for VCCommand.InteractionLevel.MicrophoneOffCodingKeys()
{
  return &type metadata for VCCommand.InteractionLevel.MicrophoneOffCodingKeys;
}

unint64_t sub_23ABC7928()
{
  unint64_t result = qword_268A5C470[0];
  if (!qword_268A5C470[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5C470);
  }
  return result;
}

unint64_t sub_23ABC7980()
{
  unint64_t result = qword_268A5C680[0];
  if (!qword_268A5C680[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5C680);
  }
  return result;
}

unint64_t sub_23ABC79D8()
{
  unint64_t result = qword_268A5C890[0];
  if (!qword_268A5C890[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5C890);
  }
  return result;
}

unint64_t sub_23ABC7A30()
{
  unint64_t result = qword_268A5CAA0[0];
  if (!qword_268A5CAA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5CAA0);
  }
  return result;
}

unint64_t sub_23ABC7A88()
{
  unint64_t result = qword_268A5CCB0[0];
  if (!qword_268A5CCB0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5CCB0);
  }
  return result;
}

unint64_t sub_23ABC7AE0()
{
  unint64_t result = qword_268A5CEC0[0];
  if (!qword_268A5CEC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5CEC0);
  }
  return result;
}

unint64_t sub_23ABC7B38()
{
  unint64_t result = qword_268A5D0D0[0];
  if (!qword_268A5D0D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5D0D0);
  }
  return result;
}

unint64_t sub_23ABC7B90()
{
  unint64_t result = qword_268A5D2E0[0];
  if (!qword_268A5D2E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5D2E0);
  }
  return result;
}

unint64_t sub_23ABC7BE8()
{
  unint64_t result = qword_268A5D4F0[0];
  if (!qword_268A5D4F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5D4F0);
  }
  return result;
}

unint64_t sub_23ABC7C40()
{
  unint64_t result = qword_268A5D700[0];
  if (!qword_268A5D700[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5D700);
  }
  return result;
}

unint64_t sub_23ABC7C98()
{
  unint64_t result = qword_268A5D910[0];
  if (!qword_268A5D910[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5D910);
  }
  return result;
}

unint64_t sub_23ABC7CF0()
{
  unint64_t result = qword_268A5DB20[0];
  if (!qword_268A5DB20[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5DB20);
  }
  return result;
}

unint64_t sub_23ABC7D48()
{
  unint64_t result = qword_268A5DD30[0];
  if (!qword_268A5DD30[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5DD30);
  }
  return result;
}

unint64_t sub_23ABC7DA0()
{
  unint64_t result = qword_268A5DF40[0];
  if (!qword_268A5DF40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5DF40);
  }
  return result;
}

unint64_t sub_23ABC7DF8()
{
  unint64_t result = qword_268A5E150[0];
  if (!qword_268A5E150[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5E150);
  }
  return result;
}

unint64_t sub_23ABC7E50()
{
  unint64_t result = qword_268A5E360[0];
  if (!qword_268A5E360[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5E360);
  }
  return result;
}

unint64_t sub_23ABC7EA8()
{
  unint64_t result = qword_268A5E570[0];
  if (!qword_268A5E570[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5E570);
  }
  return result;
}

unint64_t sub_23ABC7F00()
{
  unint64_t result = qword_268A5E780[0];
  if (!qword_268A5E780[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5E780);
  }
  return result;
}

unint64_t sub_23ABC7F58()
{
  unint64_t result = qword_268A5E990[0];
  if (!qword_268A5E990[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5E990);
  }
  return result;
}

unint64_t sub_23ABC7FB0()
{
  unint64_t result = qword_268A5EBA0[0];
  if (!qword_268A5EBA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5EBA0);
  }
  return result;
}

unint64_t sub_23ABC8008()
{
  unint64_t result = qword_268A5EDB0[0];
  if (!qword_268A5EDB0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5EDB0);
  }
  return result;
}

unint64_t sub_23ABC8060()
{
  unint64_t result = qword_268A5EFC0[0];
  if (!qword_268A5EFC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5EFC0);
  }
  return result;
}

unint64_t sub_23ABC80B8()
{
  unint64_t result = qword_268A5F1D0[0];
  if (!qword_268A5F1D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5F1D0);
  }
  return result;
}

unint64_t sub_23ABC8110()
{
  unint64_t result = qword_268A5F3E0[0];
  if (!qword_268A5F3E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5F3E0);
  }
  return result;
}

unint64_t sub_23ABC8168()
{
  unint64_t result = qword_268A5F5F0;
  if (!qword_268A5F5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5F5F0);
  }
  return result;
}

unint64_t sub_23ABC81C0()
{
  unint64_t result = qword_268A5F800[0];
  if (!qword_268A5F800[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5F800);
  }
  return result;
}

unint64_t sub_23ABC8218()
{
  unint64_t result = qword_268A5FA10[0];
  if (!qword_268A5FA10[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5FA10);
  }
  return result;
}

unint64_t sub_23ABC8270()
{
  unint64_t result = qword_268A5FC20[0];
  if (!qword_268A5FC20[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5FC20);
  }
  return result;
}

unint64_t sub_23ABC82C8()
{
  unint64_t result = qword_268A5FE30[0];
  if (!qword_268A5FE30[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A5FE30);
  }
  return result;
}

unint64_t sub_23ABC8320()
{
  unint64_t result = qword_268A60040[0];
  if (!qword_268A60040[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60040);
  }
  return result;
}

unint64_t sub_23ABC8378()
{
  unint64_t result = qword_268A60250[0];
  if (!qword_268A60250[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60250);
  }
  return result;
}

unint64_t sub_23ABC83D0()
{
  unint64_t result = qword_268A60460[0];
  if (!qword_268A60460[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60460);
  }
  return result;
}

unint64_t sub_23ABC8428()
{
  unint64_t result = qword_268A60670[0];
  if (!qword_268A60670[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60670);
  }
  return result;
}

unint64_t sub_23ABC8480()
{
  unint64_t result = qword_268A60880[0];
  if (!qword_268A60880[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60880);
  }
  return result;
}

unint64_t sub_23ABC84D8()
{
  unint64_t result = qword_268A60A90[0];
  if (!qword_268A60A90[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60A90);
  }
  return result;
}

unint64_t sub_23ABC8530()
{
  unint64_t result = qword_268A60CA0[0];
  if (!qword_268A60CA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60CA0);
  }
  return result;
}

unint64_t sub_23ABC8588()
{
  unint64_t result = qword_268A60EB0[0];
  if (!qword_268A60EB0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A60EB0);
  }
  return result;
}

unint64_t sub_23ABC85E0()
{
  unint64_t result = qword_268A610C0[0];
  if (!qword_268A610C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A610C0);
  }
  return result;
}

unint64_t sub_23ABC8638()
{
  unint64_t result = qword_268A611D0;
  if (!qword_268A611D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A611D0);
  }
  return result;
}

unint64_t sub_23ABC8690()
{
  unint64_t result = qword_268A611D8[0];
  if (!qword_268A611D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A611D8);
  }
  return result;
}

unint64_t sub_23ABC86E8()
{
  unint64_t result = qword_268A61260;
  if (!qword_268A61260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61260);
  }
  return result;
}

unint64_t sub_23ABC8740()
{
  unint64_t result = qword_268A61268[0];
  if (!qword_268A61268[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61268);
  }
  return result;
}

unint64_t sub_23ABC8798()
{
  unint64_t result = qword_268A612F0;
  if (!qword_268A612F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A612F0);
  }
  return result;
}

unint64_t sub_23ABC87F0()
{
  unint64_t result = qword_268A612F8[0];
  if (!qword_268A612F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A612F8);
  }
  return result;
}

unint64_t sub_23ABC8848()
{
  unint64_t result = qword_268A61380;
  if (!qword_268A61380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61380);
  }
  return result;
}

unint64_t sub_23ABC88A0()
{
  unint64_t result = qword_268A61388[0];
  if (!qword_268A61388[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61388);
  }
  return result;
}

unint64_t sub_23ABC88F8()
{
  unint64_t result = qword_268A61410;
  if (!qword_268A61410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61410);
  }
  return result;
}

unint64_t sub_23ABC8950()
{
  unint64_t result = qword_268A61418[0];
  if (!qword_268A61418[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61418);
  }
  return result;
}

unint64_t sub_23ABC89A8()
{
  unint64_t result = qword_268A614A0;
  if (!qword_268A614A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A614A0);
  }
  return result;
}

unint64_t sub_23ABC8A00()
{
  unint64_t result = qword_268A614A8[0];
  if (!qword_268A614A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A614A8);
  }
  return result;
}

unint64_t sub_23ABC8A58()
{
  unint64_t result = qword_268A61530;
  if (!qword_268A61530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61530);
  }
  return result;
}

unint64_t sub_23ABC8AB0()
{
  unint64_t result = qword_268A61538[0];
  if (!qword_268A61538[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61538);
  }
  return result;
}

unint64_t sub_23ABC8B08()
{
  unint64_t result = qword_268A615C0;
  if (!qword_268A615C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A615C0);
  }
  return result;
}

unint64_t sub_23ABC8B60()
{
  unint64_t result = qword_268A615C8[0];
  if (!qword_268A615C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A615C8);
  }
  return result;
}

unint64_t sub_23ABC8BB8()
{
  unint64_t result = qword_268A61650;
  if (!qword_268A61650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61650);
  }
  return result;
}

unint64_t sub_23ABC8C10()
{
  unint64_t result = qword_268A61658[0];
  if (!qword_268A61658[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61658);
  }
  return result;
}

unint64_t sub_23ABC8C68()
{
  unint64_t result = qword_268A616E0;
  if (!qword_268A616E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A616E0);
  }
  return result;
}

unint64_t sub_23ABC8CC0()
{
  unint64_t result = qword_268A616E8[0];
  if (!qword_268A616E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A616E8);
  }
  return result;
}

unint64_t sub_23ABC8D18()
{
  unint64_t result = qword_268A61770;
  if (!qword_268A61770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61770);
  }
  return result;
}

unint64_t sub_23ABC8D70()
{
  unint64_t result = qword_268A61778;
  if (!qword_268A61778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61778);
  }
  return result;
}

unint64_t sub_23ABC8DC8()
{
  unint64_t result = qword_268A61800;
  if (!qword_268A61800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61800);
  }
  return result;
}

unint64_t sub_23ABC8E20()
{
  unint64_t result = qword_268A61808[0];
  if (!qword_268A61808[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61808);
  }
  return result;
}

unint64_t sub_23ABC8E78()
{
  unint64_t result = qword_268A61890;
  if (!qword_268A61890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61890);
  }
  return result;
}

unint64_t sub_23ABC8ED0()
{
  unint64_t result = qword_268A61898[0];
  if (!qword_268A61898[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61898);
  }
  return result;
}

unint64_t sub_23ABC8F28()
{
  unint64_t result = qword_268A61920;
  if (!qword_268A61920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61920);
  }
  return result;
}

unint64_t sub_23ABC8F80()
{
  unint64_t result = qword_268A61928[0];
  if (!qword_268A61928[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61928);
  }
  return result;
}

unint64_t sub_23ABC8FD8()
{
  unint64_t result = qword_268A619B0;
  if (!qword_268A619B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A619B0);
  }
  return result;
}

unint64_t sub_23ABC9030()
{
  unint64_t result = qword_268A619B8[0];
  if (!qword_268A619B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A619B8);
  }
  return result;
}

unint64_t sub_23ABC9088()
{
  unint64_t result = qword_268A61A40;
  if (!qword_268A61A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61A40);
  }
  return result;
}

unint64_t sub_23ABC90E0()
{
  unint64_t result = qword_268A61A48[0];
  if (!qword_268A61A48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61A48);
  }
  return result;
}

unint64_t sub_23ABC9138()
{
  unint64_t result = qword_268A61AD0;
  if (!qword_268A61AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61AD0);
  }
  return result;
}

unint64_t sub_23ABC9190()
{
  unint64_t result = qword_268A61AD8[0];
  if (!qword_268A61AD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61AD8);
  }
  return result;
}

unint64_t sub_23ABC91E8()
{
  unint64_t result = qword_268A61B60;
  if (!qword_268A61B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61B60);
  }
  return result;
}

unint64_t sub_23ABC9240()
{
  unint64_t result = qword_268A61B68[0];
  if (!qword_268A61B68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61B68);
  }
  return result;
}

unint64_t sub_23ABC9298()
{
  unint64_t result = qword_268A61BF0;
  if (!qword_268A61BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61BF0);
  }
  return result;
}

unint64_t sub_23ABC92F0()
{
  unint64_t result = qword_268A61BF8[0];
  if (!qword_268A61BF8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61BF8);
  }
  return result;
}

unint64_t sub_23ABC9348()
{
  unint64_t result = qword_268A61C80;
  if (!qword_268A61C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61C80);
  }
  return result;
}

unint64_t sub_23ABC93A0()
{
  unint64_t result = qword_268A61C88[0];
  if (!qword_268A61C88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61C88);
  }
  return result;
}

unint64_t sub_23ABC93F8()
{
  unint64_t result = qword_268A61D10;
  if (!qword_268A61D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61D10);
  }
  return result;
}

unint64_t sub_23ABC9450()
{
  unint64_t result = qword_268A61D18[0];
  if (!qword_268A61D18[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61D18);
  }
  return result;
}

unint64_t sub_23ABC94A8()
{
  unint64_t result = qword_268A61DA0;
  if (!qword_268A61DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61DA0);
  }
  return result;
}

unint64_t sub_23ABC9500()
{
  unint64_t result = qword_268A61DA8[0];
  if (!qword_268A61DA8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61DA8);
  }
  return result;
}

unint64_t sub_23ABC9558()
{
  unint64_t result = qword_268A61E30;
  if (!qword_268A61E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61E30);
  }
  return result;
}

unint64_t sub_23ABC95B0()
{
  unint64_t result = qword_268A61E38[0];
  if (!qword_268A61E38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61E38);
  }
  return result;
}

unint64_t sub_23ABC9608()
{
  unint64_t result = qword_268A61EC0;
  if (!qword_268A61EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61EC0);
  }
  return result;
}

unint64_t sub_23ABC9660()
{
  unint64_t result = qword_268A61EC8[0];
  if (!qword_268A61EC8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61EC8);
  }
  return result;
}

unint64_t sub_23ABC96B8()
{
  unint64_t result = qword_268A61F50;
  if (!qword_268A61F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61F50);
  }
  return result;
}

unint64_t sub_23ABC9710()
{
  unint64_t result = qword_268A61F58[0];
  if (!qword_268A61F58[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61F58);
  }
  return result;
}

unint64_t sub_23ABC9768()
{
  unint64_t result = qword_268A61FE0;
  if (!qword_268A61FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A61FE0);
  }
  return result;
}

unint64_t sub_23ABC97C0()
{
  unint64_t result = qword_268A61FE8[0];
  if (!qword_268A61FE8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A61FE8);
  }
  return result;
}

unint64_t sub_23ABC9818()
{
  unint64_t result = qword_268A62070;
  if (!qword_268A62070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62070);
  }
  return result;
}

unint64_t sub_23ABC9870()
{
  unint64_t result = qword_268A62078;
  if (!qword_268A62078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62078);
  }
  return result;
}

unint64_t sub_23ABC98C8()
{
  unint64_t result = qword_268A62100;
  if (!qword_268A62100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62100);
  }
  return result;
}

unint64_t sub_23ABC9920()
{
  unint64_t result = qword_268A62108[0];
  if (!qword_268A62108[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62108);
  }
  return result;
}

unint64_t sub_23ABC9978()
{
  unint64_t result = qword_268A62190;
  if (!qword_268A62190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62190);
  }
  return result;
}

unint64_t sub_23ABC99D0()
{
  unint64_t result = qword_268A62198[0];
  if (!qword_268A62198[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62198);
  }
  return result;
}

unint64_t sub_23ABC9A28()
{
  unint64_t result = qword_268A62220;
  if (!qword_268A62220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62220);
  }
  return result;
}

unint64_t sub_23ABC9A80()
{
  unint64_t result = qword_268A62228[0];
  if (!qword_268A62228[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62228);
  }
  return result;
}

unint64_t sub_23ABC9AD8()
{
  unint64_t result = qword_268A622B0;
  if (!qword_268A622B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A622B0);
  }
  return result;
}

unint64_t sub_23ABC9B30()
{
  unint64_t result = qword_268A622B8[0];
  if (!qword_268A622B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A622B8);
  }
  return result;
}

unint64_t sub_23ABC9B88()
{
  unint64_t result = qword_268A62340;
  if (!qword_268A62340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62340);
  }
  return result;
}

unint64_t sub_23ABC9BE0()
{
  unint64_t result = qword_268A62348[0];
  if (!qword_268A62348[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62348);
  }
  return result;
}

unint64_t sub_23ABC9C38()
{
  unint64_t result = qword_268A623D0;
  if (!qword_268A623D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A623D0);
  }
  return result;
}

unint64_t sub_23ABC9C90()
{
  unint64_t result = qword_268A623D8[0];
  if (!qword_268A623D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A623D8);
  }
  return result;
}

unint64_t sub_23ABC9CE8()
{
  unint64_t result = qword_268A62460;
  if (!qword_268A62460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62460);
  }
  return result;
}

unint64_t sub_23ABC9D40()
{
  unint64_t result = qword_268A62468[0];
  if (!qword_268A62468[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62468);
  }
  return result;
}

unint64_t sub_23ABC9D98()
{
  unint64_t result = qword_268A624F0;
  if (!qword_268A624F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A624F0);
  }
  return result;
}

unint64_t sub_23ABC9DF0()
{
  unint64_t result = qword_268A624F8[0];
  if (!qword_268A624F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A624F8);
  }
  return result;
}

unint64_t sub_23ABC9E48()
{
  unint64_t result = qword_268A62580;
  if (!qword_268A62580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62580);
  }
  return result;
}

unint64_t sub_23ABC9EA0()
{
  unint64_t result = qword_268A62588[0];
  if (!qword_268A62588[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62588);
  }
  return result;
}

unint64_t sub_23ABC9EF8()
{
  unint64_t result = qword_268A62610;
  if (!qword_268A62610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62610);
  }
  return result;
}

unint64_t sub_23ABC9F50()
{
  unint64_t result = qword_268A62618[0];
  if (!qword_268A62618[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62618);
  }
  return result;
}

unint64_t sub_23ABC9FA8()
{
  unint64_t result = qword_268A626A0;
  if (!qword_268A626A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A626A0);
  }
  return result;
}

unint64_t sub_23ABCA000()
{
  unint64_t result = qword_268A626A8[0];
  if (!qword_268A626A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A626A8);
  }
  return result;
}

unint64_t sub_23ABCA058()
{
  unint64_t result = qword_268A62730;
  if (!qword_268A62730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62730);
  }
  return result;
}

unint64_t sub_23ABCA0B0()
{
  unint64_t result = qword_268A62738[0];
  if (!qword_268A62738[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62738);
  }
  return result;
}

unint64_t sub_23ABCA108()
{
  unint64_t result = qword_268A627C0;
  if (!qword_268A627C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A627C0);
  }
  return result;
}

unint64_t sub_23ABCA160()
{
  unint64_t result = qword_268A627C8[0];
  if (!qword_268A627C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A627C8);
  }
  return result;
}

unint64_t sub_23ABCA1B8()
{
  unint64_t result = qword_268A62850;
  if (!qword_268A62850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A62850);
  }
  return result;
}

unint64_t sub_23ABCA210()
{
  unint64_t result = qword_268A62858[0];
  if (!qword_268A62858[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A62858);
  }
  return result;
}

unint64_t sub_23ABCA268()
{
  unint64_t result = qword_268A628E0;
  if (!qword_268A628E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A628E0);
  }
  return result;
}

unint64_t sub_23ABCA2C0()
{
  unint64_t result = qword_268A628E8[0];
  if (!qword_268A628E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268A628E8);
  }
  return result;
}

uint64_t sub_23ABCA314(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73646E616D6D6F63 && a2 == 0xE800000000000000 || (sub_23AC2A860() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65536E49776F6873 && a2 == 0xEE0073676E697474)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23AC2A860();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_23ABCA518()
{
  unint64_t result = qword_268A5A7C8;
  if (!qword_268A5A7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A7C8);
  }
  return result;
}

unint64_t sub_23ABCA56C()
{
  unint64_t result = qword_268A5A7D0;
  if (!qword_268A5A7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A7D0);
  }
  return result;
}

unint64_t sub_23ABCA5C0()
{
  unint64_t result = qword_268A5A7D8;
  if (!qword_268A5A7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268A5A7D8);
  }
  return result;
}

void sub_23ABCA63C()
{
  uint64_t v0 = sub_23AC2A4D0();
  MEMORY[0x270FA5388](v0 - 8, v1, v2, v3);
  uint64_t v4 = sub_23AC2A530();
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7);
  sub_23AC2A520();
  sub_23AC2A4C0();
  uint64_t v821 = sub_23AC2A560();
  Swift::String_optional v820 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A308);
  uint64_t v892 = swift_allocObject();
  *(_OWORD *)(v892 + 16) = xmmword_23AC2FE40;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A310);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23AC2C740;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A318);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23AC2C750;
  *(void *)(v10 + 32) = 0xD00000000000001DLL;
  *(void *)(v10 + 40) = 0x800000023AC3BBF0;
  *(void *)(v10 + 48) = 0xD00000000000001BLL;
  *(void *)(v10 + 56) = 0x800000023AC3BC30;
  *(void *)(v10 + 64) = 0xD00000000000002BLL;
  *(void *)(v10 + 72) = 0x800000023AC3BC70;
  *(void *)(v10 + 80) = 0xD000000000000012;
  *(void *)(v10 + 88) = 0x800000023AC3BC10;
  *(void *)(v10 + 96) = 0xD000000000000010;
  *(void *)(v10 + 104) = 0x800000023AC3BC50;
  *(void *)(v10 + 112) = 0xD000000000000020;
  *(void *)(v10 + 120) = 0x800000023AC3BCA0;
  *(void *)(v9 + 32) = v10;
  *(unsigned char *)(v9 + 40) = 1;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23AC2C750;
  *(void *)(v11 + 32) = 0xD00000000000001ALL;
  *(void *)(v11 + 40) = 0x800000023AC3BBD0;
  *(void *)(v11 + 48) = 0xD00000000000001BLL;
  *(void *)(v11 + 56) = 0x800000023AC3BC30;
  *(void *)(v11 + 64) = 0xD00000000000002BLL;
  *(void *)(v11 + 72) = 0x800000023AC3BC70;
  *(void *)(v11 + 80) = 0x6C73206F74206F47;
  *(void *)(v11 + 88) = 0xEF63614D20706565;
  *(void *)(v11 + 96) = 0xD000000000000010;
  *(void *)(v11 + 104) = 0x800000023AC3BC50;
  *(void *)(v11 + 112) = 0xD000000000000020;
  *(void *)(v11 + 120) = 0x800000023AC3BCA0;
  *(void *)(v9 + 48) = v11;
  *(unsigned char *)(v9 + 56) = 4;
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23AC2C750;
  *(void *)(v12 + 32) = 0xD00000000000001ALL;
  *(void *)(v12 + 40) = 0x800000023AC3BBD0;
  *(void *)(v12 + 48) = 0xD00000000000001DLL;
  *(void *)(v12 + 56) = 0x800000023AC3BBF0;
  *(void *)(v12 + 64) = 0xD00000000000002BLL;
  *(void *)(v12 + 72) = 0x800000023AC3BC70;
  *(void *)(v12 + 80) = 0x6C73206F74206F47;
  *(void *)(v12 + 88) = 0xEF63614D20706565;
  *(void *)(v12 + 96) = 0xD000000000000012;
  *(void *)(v12 + 104) = 0x800000023AC3BC10;
  *(void *)(v12 + 112) = 0xD000000000000020;
  *(void *)(v12 + 120) = 0x800000023AC3BCA0;
  *(void *)(v9 + 64) = v12;
  *(unsigned char *)(v9 + 72) = 5;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23AC2C750;
  *(void *)(v13 + 32) = 0xD00000000000001ALL;
  *(void *)(v13 + 40) = 0x800000023AC3BBD0;
  *(void *)(v13 + 48) = 0xD00000000000001DLL;
  *(void *)(v13 + 56) = 0x800000023AC3BBF0;
  *(void *)(v13 + 64) = 0xD00000000000001BLL;
  *(void *)(v13 + 72) = 0x800000023AC3BC30;
  *(void *)(v13 + 80) = 0x6C73206F74206F47;
  *(void *)(v13 + 88) = 0xEF63614D20706565;
  *(void *)(v13 + 96) = 0xD000000000000012;
  *(void *)(v13 + 104) = 0x800000023AC3BC10;
  *(void *)(v13 + 112) = 0xD000000000000010;
  *(void *)(v13 + 120) = 0x800000023AC3BC50;
  *(void *)(v9 + 80) = v13;
  *(unsigned char *)(v9 + 88) = 8;
  uint64_t v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A328);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v15 + 32) = 84017408;
  uint64_t v844 = sub_23AB60324(v15, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v16 + 32) = 8;
  uint64_t v835 = sub_23AB60324(v16, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v17 + 32) = 3;
  uint64_t v18 = sub_23AB60324(v17, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A330);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v19 + 32) = 5;
  uint64_t v20 = sub_23AB60324(v19, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v21 + 32) = 0;
  uint64_t v22 = sub_23AB60324(v21, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v23.value._uint64_t countAndFlagsBits = 0xD000000000000014;
  v23.value._object = (void *)0x800000023AC50F60;
  Action.init(_:mac:)(v23, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v24 = sub_23ABBFBD4();
  char v25 = sub_23ABB8BA8();
  char v26 = sub_23ABBFBE0();
  *((void *)&v718 + 1) = v18;
  *(void *)&long long v718 = v835;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC50F40, v14, MEMORY[0x263F8EE78], v24, v25 & 1, v26 & 1, v844, v892 + 32, v718, v20, v22, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_23AC2C740;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_23AC2C750;
  *(void *)(v28 + 32) = 0xD00000000000001ELL;
  *(void *)(v28 + 40) = 0x800000023AC3BE30;
  *(void *)(v28 + 48) = 0xD00000000000001CLL;
  *(void *)(v28 + 56) = 0x800000023AC3BE70;
  *(void *)(v28 + 64) = 0xD00000000000002CLL;
  *(void *)(v28 + 72) = 0x800000023AC3BEB0;
  *(void *)(v28 + 80) = 0xD000000000000013;
  *(void *)(v28 + 88) = 0x800000023AC3BE50;
  *(void *)(v28 + 96) = 0xD000000000000011;
  *(void *)(v28 + 104) = 0x800000023AC3BE90;
  *(void *)(v28 + 112) = 0xD000000000000021;
  *(void *)(v28 + 120) = 0x800000023AC3BEE0;
  *(void *)(v27 + 32) = v28;
  *(unsigned char *)(v27 + 40) = 1;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23AC2C750;
  *(void *)(v29 + 32) = 0xD00000000000001BLL;
  *(void *)(v29 + 40) = 0x800000023AC3BDF0;
  *(void *)(v29 + 48) = 0xD00000000000001CLL;
  *(void *)(v29 + 56) = 0x800000023AC3BE70;
  *(void *)(v29 + 64) = 0xD00000000000002CLL;
  *(void *)(v29 + 72) = 0x800000023AC3BEB0;
  *(void *)(v29 + 80) = 0xD000000000000010;
  *(void *)(v29 + 88) = 0x800000023AC3BE10;
  *(void *)(v29 + 96) = 0xD000000000000011;
  *(void *)(v29 + 104) = 0x800000023AC3BE90;
  *(void *)(v29 + 112) = 0xD000000000000021;
  *(void *)(v29 + 120) = 0x800000023AC3BEE0;
  *(void *)(v27 + 48) = v29;
  *(unsigned char *)(v27 + 56) = 4;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_23AC2C750;
  *(void *)(v30 + 32) = 0xD00000000000001BLL;
  *(void *)(v30 + 40) = 0x800000023AC3BDF0;
  *(void *)(v30 + 48) = 0xD00000000000001ELL;
  *(void *)(v30 + 56) = 0x800000023AC3BE30;
  *(void *)(v30 + 64) = 0xD00000000000002CLL;
  *(void *)(v30 + 72) = 0x800000023AC3BEB0;
  *(void *)(v30 + 80) = 0xD000000000000010;
  *(void *)(v30 + 88) = 0x800000023AC3BE10;
  *(void *)(v30 + 96) = 0xD000000000000013;
  *(void *)(v30 + 104) = 0x800000023AC3BE50;
  *(void *)(v30 + 112) = 0xD000000000000021;
  *(void *)(v30 + 120) = 0x800000023AC3BEE0;
  *(void *)(v27 + 64) = v30;
  *(unsigned char *)(v27 + 72) = 5;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_23AC2C750;
  *(void *)(v31 + 32) = 0xD00000000000001BLL;
  *(void *)(v31 + 40) = 0x800000023AC3BDF0;
  *(void *)(v31 + 48) = 0xD00000000000001ELL;
  *(void *)(v31 + 56) = 0x800000023AC3BE30;
  *(void *)(v31 + 64) = 0xD00000000000001CLL;
  *(void *)(v31 + 72) = 0x800000023AC3BE70;
  *(void *)(v31 + 80) = 0xD000000000000010;
  *(void *)(v31 + 88) = 0x800000023AC3BE10;
  *(void *)(v31 + 96) = 0xD000000000000013;
  *(void *)(v31 + 104) = 0x800000023AC3BE50;
  *(void *)(v31 + 112) = 0xD000000000000011;
  *(void *)(v31 + 120) = 0x800000023AC3BE90;
  uint64_t v785 = v27;
  *(void *)(v27 + 80) = v31;
  *(unsigned char *)(v27 + 88) = 8;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v32 + 32) = 84017408;
  uint64_t v891 = sub_23AB60324(v32, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v33 + 32) = 8;
  uint64_t v784 = sub_23AB60324(v33, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v34 + 32) = 3;
  uint64_t v35 = sub_23AB60324(v34, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v36 + 32) = 5;
  uint64_t v37 = sub_23AB60324(v36, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v38 + 32) = 0;
  uint64_t v39 = sub_23AB60324(v38, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 2;
  v40.value._object = (void *)0x800000023AC50FA0;
  v40.value._uint64_t countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v40, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v41 = sub_23ABBFBD4();
  LOBYTE(v24) = sub_23ABB8BA8();
  char v42 = sub_23ABBFBE0();
  *((void *)&v719 + 1) = v35;
  *(void *)&long long v719 = v784;
  uint64_t v43 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC50F80, v785, MEMORY[0x263F8EE78], v41, v24 & 1, v42 & 1, v891, v892 + 184, v719, v37, v39, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_23AC2C700;
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_23AC2C700;
  *(void *)(v45 + 32) = 0xD000000000000025;
  *(void *)(v45 + 40) = 0x800000023AC50FC0;
  *(void *)(v44 + 32) = v45;
  *(unsigned char *)(v44 + 40) = 0;
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v46 + 32) = 84017408;
  *(unsigned char *)(v46 + 36) = 8;
  uint64_t v787 = sub_23AB60324(v46, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v43 + 16)) {
    uint64_t v786 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v786 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v47 + 32) = 3;
  uint64_t v48 = sub_23AB60324(v47, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v49 + 32) = 5;
  uint64_t v50 = sub_23AB60324(v49, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v51 + 32) = 3841;
  uint64_t v52 = sub_23AB60324(v51, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268A5A320);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_23AC2C710;
  *(void *)(v53 + 32) = 0xD00000000000001DLL;
  *(void *)(v53 + 40) = 0x800000023AC3EC10;
  *(unsigned char *)(v53 + 48) = 0;
  *(void *)(v53 + 56) = 0xD00000000000001ELL;
  *(void *)(v53 + 64) = 0x800000023AC3EC30;
  *(unsigned char *)(v53 + 72) = 1;
  v54.value._object = (void *)0x800000023AC3FB40;
  v54.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v54, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v55 = sub_23ABBFBD4();
  char v56 = sub_23ABB8BA8();
  char v57 = sub_23ABBFBE0();
  *((void *)&v720 + 1) = v48;
  *(void *)&long long v720 = v786;
  char v58 = v56 & 1;
  uint64_t v59 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000029, 0x800000023AC50FF0, v44, MEMORY[0x263F8EE78], v55, v58, v57 & 1, v787, v892 + 336, v720, v50, v52, v898, &v897, 0, v53, (uint64_t)&v893);
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_23AC2C700;
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_23AC2C700;
  *(void *)(v61 + 32) = 0xD000000000000020;
  *(void *)(v61 + 40) = 0x800000023AC51020;
  *(void *)(v60 + 32) = v61;
  *(unsigned char *)(v60 + 40) = 0;
  uint64_t v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_23AC2C700;
  *(void *)(v62 + 32) = 0xD000000000000024;
  *(void *)(v62 + 40) = 0x800000023AC51050;
  *(unsigned char *)(v62 + 48) = 0;
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v63 + 32) = 84083201;
  *(unsigned char *)(v63 + 36) = 8;
  uint64_t v880 = sub_23AB60324(v63, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v59 + 16)) {
    uint64_t v840 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v840 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v64 + 32) = 0;
  uint64_t v65 = sub_23AB60324(v64, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v66.value._object = (void *)0x800000023AC510A0;
  v66.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v66, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v67 = sub_23ABBFBD4();
  char v68 = sub_23ABB8BA8();
  char v69 = sub_23ABBFBE0();
  uint64_t v70 = sub_23ABBFBE8();
  uint64_t v71 = sub_23ABBFBE8();
  *((void *)&v721 + 1) = v65;
  *(void *)&long long v721 = v840;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC51080, v60, v62, v67, v68 & 1, v69 & 1, v880, v892 + 488, v721, v70, v71, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_23AC2C700;
  uint64_t v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_23AC2C710;
  *(void *)(v73 + 32) = 0xD00000000000001FLL;
  *(void *)(v73 + 40) = 0x800000023AC510C0;
  *(void *)(v73 + 48) = 0x20707520656B6157;
  *(void *)(v73 + 56) = 0xEF79616C50726143;
  *(void *)(v72 + 32) = v73;
  *(unsigned char *)(v72 + 40) = 0;
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v74 + 32) = 3;
  uint64_t v881 = sub_23AB60324(v74, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    uint64_t v845 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v845 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v75 + 32) = 84017408;
  *(unsigned char *)(v75 + 36) = 8;
  uint64_t v76 = sub_23AB60324(v75, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v77 + 32) = 2;
  uint64_t v78 = sub_23AB60324(v77, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v79.value._uint64_t countAndFlagsBits = 0x50726143656B6177;
  v79.value._object = (void *)0xEB0000000079616CLL;
  Action.init(_:mac:)(v79, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v80 = sub_23ABBFBD4();
  char v81 = sub_23ABB8BA8();
  char v82 = sub_23ABBFBE0();
  uint64_t v83 = sub_23ABBFBE8();
  *((void *)&v722 + 1) = v76;
  *(void *)&long long v722 = v845;
  char v84 = v82 & 1;
  uint64_t v85 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC510E0, v72, MEMORY[0x263F8EE78], v80, v81 & 1, v84, v881, v892 + 640, v722, v83, v78, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_23AC2C700;
  uint64_t v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_23AC2C710;
  *(void *)(v87 + 32) = 0xD00000000000001ELL;
  *(void *)(v87 + 40) = 0x800000023AC3BE30;
  *(void *)(v87 + 48) = 0xD000000000000013;
  *(void *)(v87 + 56) = 0x800000023AC3BE50;
  *(void *)(v86 + 32) = v87;
  *(unsigned char *)(v86 + 40) = 0;
  uint64_t v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v88 + 32) = 3;
  uint64_t v882 = sub_23AB60324(v88, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v85 + 16)) {
    uint64_t v846 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v846 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v89 + 32) = 84017408;
  *(unsigned char *)(v89 + 36) = 8;
  uint64_t v90 = sub_23AB60324(v89, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v91 = swift_allocObject();
  *(_OWORD *)(v91 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v91 + 32) = 7426;
  uint64_t v92 = sub_23AB60324(v91, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 0;
  v93.value._uint64_t countAndFlagsBits = 0x7261437065656C73;
  v93.value._object = (void *)0xEC00000079616C50;
  Action.init(_:mac:)(v93, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v94 = sub_23ABBFBD4();
  char v95 = sub_23ABB8BA8();
  char v96 = sub_23ABBFBE0();
  uint64_t v97 = sub_23ABBFBE8();
  *((void *)&v723 + 1) = v90;
  *(void *)&long long v723 = v846;
  char v98 = v95 & 1;
  uint64_t v99 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC51100, v86, MEMORY[0x263F8EE78], v94, v98, v96 & 1, v882, v892 + 792, v723, v97, v92, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = xmmword_23AC2C700;
  uint64_t v101 = swift_allocObject();
  *(_OWORD *)(v101 + 16) = xmmword_23AC2C700;
  *(void *)(v101 + 32) = 0xD00000000000001DLL;
  *(void *)(v101 + 40) = 0x800000023AC51130;
  *(void *)(v100 + 32) = v101;
  *(unsigned char *)(v100 + 40) = 0;
  uint64_t v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v102 + 32) = 84017408;
  uint64_t v883 = sub_23AB60324(v102, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v99 + 16)) {
    uint64_t v847 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v847 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v103 = swift_allocObject();
  *(_OWORD *)(v103 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v103 + 32) = 2051;
  uint64_t v104 = sub_23AB60324(v103, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v105.value._object = (void *)0x800000023AC51170;
  v105.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v105, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v106 = sub_23ABBFBD4();
  char v107 = sub_23ABB8BA8();
  char v108 = sub_23ABBFBE0();
  uint64_t v109 = sub_23ABBFBE8();
  uint64_t v110 = sub_23ABBFBE8();
  *((void *)&v724 + 1) = v104;
  *(void *)&long long v724 = v847;
  char v111 = v107 & 1;
  uint64_t v112 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC51150, v100, MEMORY[0x263F8EE78], v106, v111, v108 & 1, v883, v892 + 944, v724, v109, v110, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v113 = swift_allocObject();
  *(_OWORD *)(v113 + 16) = xmmword_23AC2C700;
  uint64_t v114 = swift_allocObject();
  *(_OWORD *)(v114 + 16) = xmmword_23AC2C710;
  *(void *)(v114 + 32) = 0xD000000000000047;
  *(void *)(v114 + 40) = 0x800000023AC51190;
  *(void *)(v114 + 48) = 0xD000000000000042;
  *(void *)(v114 + 56) = 0x800000023AC511E0;
  *(void *)(v113 + 32) = v114;
  *(unsigned char *)(v113 + 40) = 0;
  uint64_t v115 = swift_allocObject();
  *(_OWORD *)(v115 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v115 + 32) = 84017408;
  uint64_t v836 = sub_23AB60324(v115, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v112 + 16)) {
    uint64_t v884 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v884 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v116 + 32) = 2051;
  uint64_t v117 = sub_23AB60324(v116, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v118.value._uint64_t countAndFlagsBits = 0xD000000000000015;
  v118.value._object = (void *)0x800000023AC51250;
  Action.init(_:mac:)(v118, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v119 = sub_23ABBFBD4();
  char v120 = sub_23ABB8BA8();
  char v121 = sub_23ABBFBE0();
  uint64_t v122 = sub_23ABBFBE8();
  uint64_t v123 = sub_23ABBFBE8();
  *((void *)&v725 + 1) = v117;
  *(void *)&long long v725 = v884;
  char v124 = v120 & 1;
  uint64_t v125 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC51230, v113, MEMORY[0x263F8EE78], v119, v124, v121 & 1, v836, v892 + 1096, v725, v122, v123, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v126 = swift_allocObject();
  *(_OWORD *)(v126 + 16) = xmmword_23AC2C700;
  uint64_t v127 = swift_allocObject();
  *(_OWORD *)(v127 + 16) = xmmword_23AC2C700;
  *(void *)(v127 + 32) = 0xD000000000000023;
  *(void *)(v127 + 40) = 0x800000023AC51270;
  *(void *)(v126 + 32) = v127;
  *(unsigned char *)(v126 + 40) = 0;
  uint64_t v128 = swift_allocObject();
  *(_OWORD *)(v128 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v128 + 32) = 84017408;
  uint64_t v797 = sub_23AB60324(v128, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v125 + 16)) {
    uint64_t v790 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v790 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v129 = swift_allocObject();
  *(_OWORD *)(v129 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v129 + 32) = 2051;
  uint64_t v130 = sub_23AB60324(v129, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v131.value._uint64_t countAndFlagsBits = 0xD000000000000016;
  v131.value._object = (void *)0x800000023AC512C0;
  Action.init(_:mac:)(v131, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v132 = sub_23ABBFBD4();
  char v133 = sub_23ABB8BA8();
  char v134 = sub_23ABBFBE0();
  uint64_t v135 = sub_23ABBFBE8();
  uint64_t v136 = sub_23ABBFBE8();
  *((void *)&v726 + 1) = v130;
  *(void *)&long long v726 = v790;
  char v137 = v133 & 1;
  uint64_t v138 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ALL, 0x800000023AC512A0, v126, MEMORY[0x263F8EE78], v132, v137, v134 & 1, v797, v892 + 1248, v726, v135, v136, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v139 = swift_allocObject();
  *(_OWORD *)(v139 + 16) = xmmword_23AC2C700;
  uint64_t v140 = swift_allocObject();
  *(_OWORD *)(v140 + 16) = xmmword_23AC2C710;
  *(void *)(v140 + 32) = 0xD00000000000004DLL;
  *(void *)(v140 + 40) = 0x800000023AC512E0;
  *(void *)(v140 + 48) = 0xD000000000000048;
  *(void *)(v140 + 56) = 0x800000023AC51330;
  *(void *)(v139 + 32) = v140;
  *(unsigned char *)(v139 + 40) = 0;
  uint64_t v141 = swift_allocObject();
  *(_OWORD *)(v141 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v141 + 32) = 84017408;
  *(unsigned char *)(v141 + 36) = 8;
  uint64_t v798 = sub_23AB60324(v141, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v138 + 16)) {
    uint64_t v788 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v788 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v142 = swift_allocObject();
  *(_OWORD *)(v142 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v142 + 32) = 3;
  uint64_t v143 = sub_23AB60324(v142, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v144.value._object = (void *)0x800000023AC513A0;
  v144.value._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  Action.init(_:mac:)(v144, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v145 = sub_23ABBFBD4();
  char v146 = sub_23ABB8BA8();
  char v147 = sub_23ABBFBE0();
  uint64_t v148 = sub_23ABBFBE8();
  uint64_t v149 = sub_23ABBFBE8();
  *((void *)&v727 + 1) = v143;
  *(void *)&long long v727 = v788;
  char v150 = v146 & 1;
  uint64_t v151 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001FLL, 0x800000023AC51380, v139, MEMORY[0x263F8EE78], v145, v150, v147 & 1, v798, v892 + 1400, v727, v148, v149, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v152 = swift_allocObject();
  *(_OWORD *)(v152 + 16) = xmmword_23AC2C700;
  uint64_t v153 = swift_allocObject();
  *(_OWORD *)(v153 + 16) = xmmword_23AC2C700;
  *(void *)(v153 + 32) = 0xD00000000000003BLL;
  *(void *)(v153 + 40) = 0x800000023AC513C0;
  *(void *)(v152 + 32) = v153;
  *(unsigned char *)(v152 + 40) = 0;
  uint64_t v154 = swift_allocObject();
  *(_OWORD *)(v154 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v154 + 32) = 84017408;
  *(unsigned char *)(v154 + 36) = 8;
  uint64_t v799 = sub_23AB60324(v154, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v151 + 16)) {
    uint64_t v791 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v791 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v155 = swift_allocObject();
  *(_OWORD *)(v155 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v155 + 32) = 3;
  uint64_t v156 = sub_23AB60324(v155, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v157.value._object = (void *)0x800000023AC51420;
  v157.value._uint64_t countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v157, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v158 = sub_23ABBFBD4();
  char v159 = sub_23ABB8BA8();
  char v160 = sub_23ABBFBE0();
  uint64_t v161 = sub_23ABBFBE8();
  uint64_t v162 = sub_23ABBFBE8();
  *((void *)&v728 + 1) = v156;
  *(void *)&long long v728 = v791;
  char v163 = v159 & 1;
  uint64_t v164 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC51400, v152, MEMORY[0x263F8EE78], v158, v163, v160 & 1, v799, v892 + 1552, v728, v161, v162, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v165 = swift_allocObject();
  *(_OWORD *)(v165 + 16) = xmmword_23AC2C700;
  uint64_t v166 = swift_allocObject();
  *(_OWORD *)(v166 + 16) = xmmword_23AC2C710;
  *(void *)(v166 + 32) = 0xD000000000000065;
  *(void *)(v166 + 40) = 0x800000023AC51440;
  *(void *)(v166 + 48) = 0xD000000000000060;
  *(void *)(v166 + 56) = 0x800000023AC514B0;
  *(void *)(v165 + 32) = v166;
  *(unsigned char *)(v165 + 40) = 0;
  uint64_t v167 = swift_allocObject();
  *(_OWORD *)(v167 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v167 + 32) = 84017408;
  *(unsigned char *)(v167 + 36) = 8;
  uint64_t v800 = sub_23AB60324(v167, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v164 + 16)) {
    uint64_t v792 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v792 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v168 = swift_allocObject();
  *(_OWORD *)(v168 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v168 + 32) = 3;
  uint64_t v169 = sub_23AB60324(v168, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v170.value._object = (void *)0x800000023AC51540;
  v170.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v170, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v171 = sub_23ABBFBD4();
  char v172 = sub_23ABB8BA8();
  char v173 = sub_23ABBFBE0();
  uint64_t v174 = sub_23ABBFBE8();
  uint64_t v175 = sub_23ABBFBE8();
  *((void *)&v729 + 1) = v169;
  *(void *)&long long v729 = v792;
  char v176 = v172 & 1;
  uint64_t v177 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC51520, v165, MEMORY[0x263F8EE78], v171, v176, v173 & 1, v800, v892 + 1704, v729, v174, v175, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v178 = swift_allocObject();
  *(_OWORD *)(v178 + 16) = xmmword_23AC2C700;
  uint64_t v179 = swift_allocObject();
  *(_OWORD *)(v179 + 16) = xmmword_23AC2C700;
  *(void *)(v179 + 32) = 0xD00000000000001DLL;
  *(void *)(v179 + 40) = 0x800000023AC51560;
  *(void *)(v178 + 32) = v179;
  *(unsigned char *)(v178 + 40) = 0;
  uint64_t v180 = swift_allocObject();
  *(_OWORD *)(v180 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v180 + 32) = 84017408;
  *(unsigned char *)(v180 + 36) = 8;
  uint64_t v801 = sub_23AB60324(v180, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v177 + 16)) {
    uint64_t v793 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v793 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v181 = swift_allocObject();
  *(_OWORD *)(v181 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v181 + 32) = 3;
  uint64_t v182 = sub_23AB60324(v181, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v183.value._object = (void *)0x800000023AC515A0;
  v183.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  Action.init(_:mac:)(v183, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v184 = sub_23ABBFBD4();
  char v185 = sub_23ABB8BA8();
  char v186 = sub_23ABBFBE0();
  uint64_t v187 = sub_23ABBFBE8();
  uint64_t v188 = sub_23ABBFBE8();
  *((void *)&v730 + 1) = v182;
  *(void *)&long long v730 = v793;
  char v189 = v185 & 1;
  uint64_t v190 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000014, 0x800000023AC51580, v178, MEMORY[0x263F8EE78], v184, v189, v186 & 1, v801, v892 + 1856, v730, v187, v188, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v191 = swift_allocObject();
  *(_OWORD *)(v191 + 16) = xmmword_23AC2C700;
  uint64_t v192 = swift_allocObject();
  *(_OWORD *)(v192 + 16) = xmmword_23AC2C710;
  *(void *)(v192 + 32) = 0xD000000000000042;
  *(void *)(v192 + 40) = 0x800000023AC515C0;
  *(void *)(v192 + 48) = 0xD000000000000047;
  *(void *)(v192 + 56) = 0x800000023AC51610;
  *(void *)(v191 + 32) = v192;
  *(unsigned char *)(v191 + 40) = 0;
  uint64_t v193 = swift_allocObject();
  *(_OWORD *)(v193 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v193 + 32) = 84017408;
  *(unsigned char *)(v193 + 36) = 8;
  uint64_t v850 = sub_23AB60324(v193, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v190 + 16)) {
    uint64_t v802 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v802 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v194 = swift_allocObject();
  *(_OWORD *)(v194 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v194 + 32) = 3;
  uint64_t v195 = sub_23AB60324(v194, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v196.value._object = (void *)0x800000023AC51680;
  v196.value._uint64_t countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v196, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v197 = sub_23ABBFBD4();
  char v198 = sub_23ABB8BA8();
  char v199 = sub_23ABBFBE0();
  uint64_t v200 = sub_23ABBFBE8();
  uint64_t v201 = sub_23ABBFBE8();
  uint64_t v772 = v200;
  *((void *)&v731 + 1) = v195;
  *(void *)&long long v731 = v802;
  uint64_t v202 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC51660, v191, MEMORY[0x263F8EE78], v197, v198 & 1, v199 & 1, v850, v892 + 2008, v731, v772, v201, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v203 = swift_allocObject();
  *(_OWORD *)(v203 + 16) = xmmword_23AC2C700;
  uint64_t v204 = swift_allocObject();
  *(_OWORD *)(v204 + 16) = xmmword_23AC2C700;
  *(void *)(v204 + 32) = 0xD000000000000020;
  *(void *)(v204 + 40) = 0x800000023AC516A0;
  *(void *)(v203 + 32) = v204;
  *(unsigned char *)(v203 + 40) = 0;
  uint64_t v205 = swift_allocObject();
  *(_OWORD *)(v205 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v205 + 32) = 84017408;
  *(unsigned char *)(v205 + 36) = 8;
  uint64_t v851 = sub_23AB60324(v205, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v202 + 16)) {
    uint64_t v803 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v803 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v206 = swift_allocObject();
  *(_OWORD *)(v206 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v206 + 32) = 3;
  uint64_t v207 = sub_23AB60324(v206, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v208.value._object = (void *)0x800000023AC516F0;
  v208.value._uint64_t countAndFlagsBits = 0xD000000000000013;
  Action.init(_:mac:)(v208, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v209 = sub_23ABBFBD4();
  char v210 = sub_23ABB8BA8();
  char v211 = sub_23ABBFBE0();
  uint64_t v212 = sub_23ABBFBE8();
  uint64_t v213 = sub_23ABBFBE8();
  *((void *)&v732 + 1) = v207;
  *(void *)&long long v732 = v803;
  char v214 = v210 & 1;
  uint64_t v215 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000017, 0x800000023AC516D0, v203, MEMORY[0x263F8EE78], v209, v214, v211 & 1, v851, v892 + 2160, v732, v212, v213, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v216 = swift_allocObject();
  *(_OWORD *)(v216 + 16) = xmmword_23AC2C700;
  uint64_t v217 = swift_allocObject();
  *(_OWORD *)(v217 + 16) = xmmword_23AC2C710;
  *(void *)(v217 + 32) = 0xD00000000000004ALL;
  *(void *)(v217 + 40) = 0x800000023AC51710;
  *(void *)(v217 + 48) = 0xD000000000000045;
  *(void *)(v217 + 56) = 0x800000023AC51760;
  *(void *)(v216 + 32) = v217;
  *(unsigned char *)(v216 + 40) = 0;
  uint64_t v218 = swift_allocObject();
  *(_OWORD *)(v218 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v218 + 32) = 84017408;
  *(unsigned char *)(v218 + 36) = 8;
  uint64_t v804 = sub_23AB60324(v218, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v215 + 16)) {
    uint64_t v789 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v789 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v219 = swift_allocObject();
  *(_OWORD *)(v219 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v219 + 32) = 3;
  uint64_t v220 = sub_23AB60324(v219, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v221.value._uint64_t countAndFlagsBits = 0xD000000000000018;
  v221.value._object = (void *)0x800000023AC517D0;
  Action.init(_:mac:)(v221, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v222 = sub_23ABBFBD4();
  char v223 = sub_23ABB8BA8();
  char v224 = sub_23ABBFBE0();
  uint64_t v225 = sub_23ABBFBE8();
  uint64_t v226 = sub_23ABBFBE8();
  uint64_t v773 = v225;
  *((void *)&v733 + 1) = v220;
  *(void *)&long long v733 = v789;
  uint64_t v227 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001CLL, 0x800000023AC517B0, v216, MEMORY[0x263F8EE78], v222, v223 & 1, v224 & 1, v804, v892 + 2312, v733, v773, v226, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v228 = swift_allocObject();
  *(_OWORD *)(v228 + 16) = xmmword_23AC2C700;
  uint64_t v229 = swift_allocObject();
  *(_OWORD *)(v229 + 16) = xmmword_23AC2C700;
  *(void *)(v229 + 32) = 0xD00000000000001CLL;
  *(void *)(v229 + 40) = 0x800000023AC517F0;
  *(void *)(v228 + 32) = v229;
  *(unsigned char *)(v228 + 40) = 0;
  uint64_t v230 = swift_allocObject();
  *(_OWORD *)(v230 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v230 + 32) = 84017408;
  *(unsigned char *)(v230 + 36) = 8;
  uint64_t v805 = sub_23AB60324(v230, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v227 + 16)) {
    uint64_t v794 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v794 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v231 = swift_allocObject();
  *(_OWORD *)(v231 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v231 + 32) = 3;
  uint64_t v232 = sub_23AB60324(v231, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v233.value._uint64_t countAndFlagsBits = 0x5374786554747563;
  v233.value._object = (void *)0xEF3A746E656D6765;
  Action.init(_:mac:)(v233, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v234 = sub_23ABBFBD4();
  char v235 = sub_23ABB8BA8();
  char v236 = sub_23ABBFBE0();
  uint64_t v237 = sub_23ABBFBE8();
  uint64_t v238 = sub_23ABBFBE8();
  *((void *)&v734 + 1) = v232;
  *(void *)&long long v734 = v794;
  char v239 = v235 & 1;
  uint64_t v240 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC51810, v228, MEMORY[0x263F8EE78], v234, v239, v236 & 1, v805, v892 + 2464, v734, v237, v238, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v241 = swift_allocObject();
  *(_OWORD *)(v241 + 16) = xmmword_23AC2C700;
  uint64_t v242 = swift_allocObject();
  *(_OWORD *)(v242 + 16) = xmmword_23AC2C710;
  *(void *)(v242 + 32) = 0xD000000000000041;
  *(void *)(v242 + 40) = 0x800000023AC51830;
  *(void *)(v242 + 48) = 0xD000000000000046;
  *(void *)(v242 + 56) = 0x800000023AC51880;
  *(void *)(v241 + 32) = v242;
  *(unsigned char *)(v241 + 40) = 0;
  uint64_t v243 = swift_allocObject();
  *(_OWORD *)(v243 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v243 + 32) = 84017408;
  *(unsigned char *)(v243 + 36) = 8;
  uint64_t v806 = sub_23AB60324(v243, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v240 + 16)) {
    uint64_t v795 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v795 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v244 = swift_allocObject();
  *(_OWORD *)(v244 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v244 + 32) = 3;
  uint64_t v245 = sub_23AB60324(v244, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v246.value._object = (void *)0x800000023AC518F0;
  v246.value._uint64_t countAndFlagsBits = 0xD000000000000014;
  Action.init(_:mac:)(v246, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v247 = sub_23ABBFBD4();
  char v248 = sub_23ABB8BA8();
  char v249 = sub_23ABBFBE0();
  uint64_t v250 = sub_23ABBFBE8();
  uint64_t v251 = sub_23ABBFBE8();
  *((void *)&v735 + 1) = v245;
  *(void *)&long long v735 = v795;
  uint64_t v252 = v241;
  uint64_t v253 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000018, 0x800000023AC518D0, v252, MEMORY[0x263F8EE78], v247, v248 & 1, v249 & 1, v806, v892 + 2616, v735, v250, v251, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v254 = swift_allocObject();
  *(_OWORD *)(v254 + 16) = xmmword_23AC2C700;
  uint64_t v255 = swift_allocObject();
  *(_OWORD *)(v255 + 16) = xmmword_23AC2C700;
  *(void *)(v255 + 32) = 0xD00000000000001FLL;
  *(void *)(v255 + 40) = 0x800000023AC51910;
  *(void *)(v254 + 32) = v255;
  *(unsigned char *)(v254 + 40) = 0;
  uint64_t v256 = swift_allocObject();
  *(_OWORD *)(v256 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v256 + 32) = 84017408;
  *(unsigned char *)(v256 + 36) = 8;
  uint64_t v852 = sub_23AB60324(v256, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v253 + 16)) {
    uint64_t v822 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v822 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v257 = swift_allocObject();
  *(_OWORD *)(v257 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v257 + 32) = 3;
  uint64_t v258 = sub_23AB60324(v257, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v259.value._object = (void *)0x800000023AC51950;
  v259.value._uint64_t countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v259, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v260 = sub_23ABBFBD4();
  char v261 = sub_23ABB8BA8();
  char v262 = sub_23ABBFBE0();
  uint64_t v263 = sub_23ABBFBE8();
  uint64_t v264 = sub_23ABBFBE8();
  *((void *)&v736 + 1) = v258;
  uint64_t v774 = v263;
  *(void *)&long long v736 = v822;
  uint64_t v265 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC51930, v254, MEMORY[0x263F8EE78], v260, v261 & 1, v262 & 1, v852, v892 + 2768, v736, v774, v264, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v266 = swift_allocObject();
  *(_OWORD *)(v266 + 16) = xmmword_23AC2C700;
  uint64_t v267 = swift_allocObject();
  *(_OWORD *)(v267 + 16) = xmmword_23AC2C700;
  *(void *)(v267 + 32) = 0xD000000000000042;
  *(void *)(v267 + 40) = 0x800000023AC51970;
  *(void *)(v266 + 32) = v267;
  *(unsigned char *)(v266 + 40) = 0;
  uint64_t v268 = swift_allocObject();
  *(_OWORD *)(v268 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v268 + 32) = 84017408;
  *(unsigned char *)(v268 + 36) = 8;
  uint64_t v853 = sub_23AB60324(v268, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v265 + 16)) {
    uint64_t v269 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v269 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v270 = swift_allocObject();
  *(_OWORD *)(v270 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v270 + 32) = 3;
  uint64_t v271 = sub_23AB60324(v270, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v272.value._object = (void *)0x800000023AC519E0;
  v272.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v272, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v273 = sub_23ABBFBD4();
  char v274 = sub_23ABB8BA8();
  char v275 = sub_23ABBFBE0();
  uint64_t v276 = sub_23ABBFBE8();
  uint64_t v277 = sub_23ABBFBE8();
  uint64_t v775 = v276;
  *(void *)&long long v737 = v269;
  *((void *)&v737 + 1) = v271;
  uint64_t v278 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC519C0, v266, MEMORY[0x263F8EE78], v273, v274 & 1, v275 & 1, v853, v892 + 2920, v737, v775, v277, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v279 = swift_allocObject();
  *(_OWORD *)(v279 + 16) = xmmword_23AC2C700;
  uint64_t v280 = swift_allocObject();
  *(_OWORD *)(v280 + 16) = xmmword_23AC2C700;
  *(void *)(v280 + 32) = 0xD000000000000032;
  *(void *)(v280 + 40) = 0x800000023AC51A00;
  *(void *)(v279 + 32) = v280;
  *(unsigned char *)(v279 + 40) = 0;
  uint64_t v281 = swift_allocObject();
  *(_OWORD *)(v281 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v281 + 32) = 84017408;
  *(unsigned char *)(v281 + 36) = 8;
  uint64_t v807 = sub_23AB60324(v281, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v278 + 16)) {
    uint64_t v854 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v854 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v282 = swift_allocObject();
  *(_OWORD *)(v282 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v282 + 32) = 3;
  uint64_t v283 = sub_23AB60324(v282, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v284.value._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v284.value._object = (void *)0x800000023AC51A70;
  Action.init(_:mac:)(v284, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v285 = sub_23ABBFBD4();
  char v286 = sub_23ABB8BA8();
  char v287 = sub_23ABBFBE0();
  uint64_t v288 = sub_23ABBFBE8();
  uint64_t v289 = sub_23ABBFBE8();
  *((void *)&v738 + 1) = v283;
  uint64_t v776 = v288;
  *(void *)&long long v738 = v854;
  uint64_t v290 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000021, 0x800000023AC51A40, v279, MEMORY[0x263F8EE78], v285, v286 & 1, v287 & 1, v807, v892 + 3072, v738, v776, v289, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v291 = swift_allocObject();
  *(_OWORD *)(v291 + 16) = xmmword_23AC2C700;
  uint64_t v292 = swift_allocObject();
  *(_OWORD *)(v292 + 16) = xmmword_23AC2C700;
  *(void *)(v292 + 32) = 0xD00000000000003BLL;
  *(void *)(v292 + 40) = 0x800000023AC51A90;
  *(void *)(v291 + 32) = v292;
  *(unsigned char *)(v291 + 40) = 0;
  uint64_t v293 = swift_allocObject();
  *(_OWORD *)(v293 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v293 + 32) = 84017408;
  *(unsigned char *)(v293 + 36) = 8;
  uint64_t v808 = sub_23AB60324(v293, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v290 + 16)) {
    uint64_t v796 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v796 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v294 = swift_allocObject();
  *(_OWORD *)(v294 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v294 + 32) = 3;
  uint64_t v295 = sub_23AB60324(v294, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v296.value._object = (void *)0x800000023AC51B00;
  v296.value._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  Action.init(_:mac:)(v296, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v297 = sub_23ABBFBD4();
  char v298 = sub_23ABB8BA8();
  char v299 = sub_23ABBFBE0();
  uint64_t v300 = sub_23ABBFBE8();
  uint64_t v301 = sub_23ABBFBE8();
  *((void *)&v739 + 1) = v295;
  *(void *)&long long v739 = v796;
  char v302 = v298 & 1;
  uint64_t v303 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000021, 0x800000023AC51AD0, v291, MEMORY[0x263F8EE78], v297, v302, v299 & 1, v808, v892 + 3224, v739, v300, v301, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v304 = swift_allocObject();
  *(_OWORD *)(v304 + 16) = xmmword_23AC2C700;
  uint64_t v305 = swift_allocObject();
  *(_OWORD *)(v305 + 16) = xmmword_23AC2C700;
  *(void *)(v305 + 32) = 0xD00000000000003CLL;
  *(void *)(v305 + 40) = 0x800000023AC51B20;
  *(void *)(v304 + 32) = v305;
  *(unsigned char *)(v304 + 40) = 0;
  uint64_t v306 = swift_allocObject();
  *(_OWORD *)(v306 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v306 + 32) = 84017408;
  *(unsigned char *)(v306 + 36) = 8;
  uint64_t v855 = sub_23AB60324(v306, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v303 + 16)) {
    uint64_t v809 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v809 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v307 = swift_allocObject();
  *(_OWORD *)(v307 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v307 + 32) = 3;
  uint64_t v308 = sub_23AB60324(v307, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v309.value._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v309.value._object = (void *)0x800000023AC51B90;
  Action.init(_:mac:)(v309, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v310 = sub_23ABBFBD4();
  char v311 = sub_23ABB8BA8();
  char v312 = sub_23ABBFBE0();
  uint64_t v313 = sub_23ABBFBE8();
  uint64_t v314 = sub_23ABBFBE8();
  *((void *)&v740 + 1) = v308;
  *(void *)&long long v740 = v809;
  char v315 = v311 & 1;
  uint64_t v316 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000022, 0x800000023AC51B60, v304, MEMORY[0x263F8EE78], v310, v315, v312 & 1, v855, v892 + 3376, v740, v313, v314, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v317 = swift_allocObject();
  *(_OWORD *)(v317 + 16) = xmmword_23AC2C700;
  uint64_t v318 = swift_allocObject();
  *(_OWORD *)(v318 + 16) = xmmword_23AC2C700;
  *(void *)(v318 + 32) = 0xD000000000000022;
  *(void *)(v318 + 40) = 0x800000023AC51BB0;
  *(void *)(v317 + 32) = v318;
  *(unsigned char *)(v317 + 40) = 0;
  uint64_t v319 = swift_allocObject();
  *(_OWORD *)(v319 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v319 + 32) = 84017408;
  uint64_t v856 = sub_23AB60324(v319, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v316 + 16)) {
    uint64_t v823 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v823 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v320 = swift_allocObject();
  *(_OWORD *)(v320 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v320 + 32) = 2051;
  uint64_t v321 = sub_23AB60324(v320, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v322.value._object = (void *)0x800000023AC51C00;
  v322.value._uint64_t countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v322, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v323 = sub_23ABBFBD4();
  char v324 = sub_23ABB8BA8();
  char v325 = sub_23ABBFBE0();
  uint64_t v326 = sub_23ABBFBE8();
  uint64_t v327 = sub_23ABBFBE8();
  *((void *)&v741 + 1) = v321;
  *(void *)&long long v741 = v823;
  char v328 = v324 & 1;
  uint64_t v329 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC51BE0, v317, MEMORY[0x263F8EE78], v323, v328, v325 & 1, v856, v892 + 3528, v741, v326, v327, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v330 = swift_allocObject();
  *(_OWORD *)(v330 + 16) = xmmword_23AC2C700;
  uint64_t v331 = swift_allocObject();
  *(_OWORD *)(v331 + 16) = xmmword_23AC2C710;
  *(void *)(v331 + 32) = 0xD00000000000004CLL;
  *(void *)(v331 + 40) = 0x800000023AC51C20;
  *(void *)(v331 + 48) = 0xD000000000000047;
  *(void *)(v331 + 56) = 0x800000023AC51C70;
  *(void *)(v330 + 32) = v331;
  *(unsigned char *)(v330 + 40) = 0;
  uint64_t v332 = swift_allocObject();
  *(_OWORD *)(v332 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v332 + 32) = 84017408;
  uint64_t v857 = sub_23AB60324(v332, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v329 + 16)) {
    uint64_t v810 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v810 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v333 = swift_allocObject();
  *(_OWORD *)(v333 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v333 + 32) = 2051;
  uint64_t v334 = sub_23AB60324(v333, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v335.value._object = (void *)0x800000023AC51CE0;
  v335.value._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  Action.init(_:mac:)(v335, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v336 = sub_23ABBFBD4();
  char v337 = sub_23ABB8BA8();
  char v338 = sub_23ABBFBE0();
  uint64_t v339 = sub_23ABBFBE8();
  uint64_t v340 = sub_23ABBFBE8();
  *((void *)&v742 + 1) = v334;
  *(void *)&long long v742 = v810;
  char v341 = v337 & 1;
  uint64_t v342 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC51CC0, v330, MEMORY[0x263F8EE78], v336, v341, v338 & 1, v857, v892 + 3680, v742, v339, v340, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v343 = swift_allocObject();
  *(_OWORD *)(v343 + 16) = xmmword_23AC2C700;
  uint64_t v344 = swift_allocObject();
  *(_OWORD *)(v344 + 16) = xmmword_23AC2C700;
  *(void *)(v344 + 32) = 0xD000000000000022;
  *(void *)(v344 + 40) = 0x800000023AC51D00;
  *(void *)(v343 + 32) = v344;
  *(unsigned char *)(v343 + 40) = 0;
  uint64_t v345 = swift_allocObject();
  *(_OWORD *)(v345 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v345 + 32) = 84017408;
  *(unsigned char *)(v345 + 36) = 8;
  uint64_t v858 = sub_23AB60324(v345, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v342 + 16)) {
    uint64_t v824 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v824 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v346 = swift_allocObject();
  *(_OWORD *)(v346 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v346 + 32) = 3;
  uint64_t v347 = sub_23AB60324(v346, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v348.value._object = (void *)0x800000023AC51D50;
  v348.value._uint64_t countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v348, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v349 = sub_23ABBFBD4();
  char v350 = sub_23ABB8BA8();
  char v351 = sub_23ABBFBE0();
  uint64_t v352 = sub_23ABBFBE8();
  uint64_t v353 = sub_23ABBFBE8();
  *((void *)&v743 + 1) = v347;
  *(void *)&long long v743 = v824;
  char v354 = v350 & 1;
  uint64_t v355 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC51D30, v343, MEMORY[0x263F8EE78], v349, v354, v351 & 1, v858, v892 + 3832, v743, v352, v353, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v356 = swift_allocObject();
  *(_OWORD *)(v356 + 16) = xmmword_23AC2C700;
  uint64_t v357 = swift_allocObject();
  *(_OWORD *)(v357 + 16) = xmmword_23AC2C710;
  *(void *)(v357 + 32) = 0xD00000000000004CLL;
  *(void *)(v357 + 40) = 0x800000023AC51D70;
  *(void *)(v357 + 48) = 0xD000000000000047;
  *(void *)(v357 + 56) = 0x800000023AC51DC0;
  *(void *)(v356 + 32) = v357;
  *(unsigned char *)(v356 + 40) = 0;
  uint64_t v358 = swift_allocObject();
  *(_OWORD *)(v358 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v358 + 32) = 84017408;
  *(unsigned char *)(v358 + 36) = 8;
  uint64_t v859 = sub_23AB60324(v358, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v355 + 16)) {
    uint64_t v811 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v811 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v359 = swift_allocObject();
  *(_OWORD *)(v359 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v359 + 32) = 3;
  uint64_t v360 = sub_23AB60324(v359, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v361.value._object = (void *)0x800000023AC51E30;
  v361.value._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  Action.init(_:mac:)(v361, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v362 = sub_23ABBFBD4();
  char v363 = sub_23ABB8BA8();
  char v364 = sub_23ABBFBE0();
  uint64_t v365 = sub_23ABBFBE8();
  uint64_t v366 = sub_23ABBFBE8();
  *((void *)&v744 + 1) = v360;
  uint64_t v777 = v365;
  *(void *)&long long v744 = v811;
  uint64_t v367 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC51E10, v356, MEMORY[0x263F8EE78], v362, v363 & 1, v364 & 1, v859, v892 + 3984, v744, v777, v366, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v368 = swift_allocObject();
  *(_OWORD *)(v368 + 16) = xmmword_23AC2C700;
  uint64_t v369 = swift_allocObject();
  *(_OWORD *)(v369 + 16) = xmmword_23AC2C700;
  *(void *)(v369 + 32) = 0xD00000000000002DLL;
  *(void *)(v369 + 40) = 0x800000023AC51E50;
  *(void *)(v368 + 32) = v369;
  *(unsigned char *)(v368 + 40) = 0;
  uint64_t v370 = swift_allocObject();
  *(_OWORD *)(v370 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v370 + 32) = 84017408;
  *(unsigned char *)(v370 + 36) = 8;
  uint64_t v860 = sub_23AB60324(v370, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v367 + 16)) {
    uint64_t v825 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v825 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v371 = swift_allocObject();
  *(_OWORD *)(v371 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v371 + 32) = 3;
  uint64_t v372 = sub_23AB60324(v371, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v373.value._object = (void *)0x800000023AC51EA0;
  v373.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v373, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v374 = sub_23ABBFBD4();
  char v375 = sub_23ABB8BA8();
  char v376 = sub_23ABBFBE0();
  uint64_t v377 = sub_23ABBFBE8();
  uint64_t v378 = sub_23ABBFBE8();
  uint64_t v778 = v377;
  *((void *)&v745 + 1) = v372;
  *(void *)&long long v745 = v825;
  uint64_t v379 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC51E80, v368, MEMORY[0x263F8EE78], v374, v375 & 1, v376 & 1, v860, v892 + 4136, v745, v778, v378, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v380 = swift_allocObject();
  *(_OWORD *)(v380 + 16) = xmmword_23AC2C700;
  uint64_t v381 = swift_allocObject();
  *(_OWORD *)(v381 + 16) = xmmword_23AC2C700;
  *(void *)(v381 + 32) = 0xD000000000000033;
  *(void *)(v381 + 40) = 0x800000023AC51EC0;
  *(void *)(v380 + 32) = v381;
  *(unsigned char *)(v380 + 40) = 0;
  uint64_t v382 = swift_allocObject();
  *(_OWORD *)(v382 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v382 + 32) = 84017408;
  *(unsigned char *)(v382 + 36) = 8;
  uint64_t v861 = sub_23AB60324(v382, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v379 + 16)) {
    uint64_t v812 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v812 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v383 = swift_allocObject();
  *(_OWORD *)(v383 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v383 + 32) = 3;
  uint64_t v384 = sub_23AB60324(v383, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v385.value._object = (void *)0x800000023AC51F20;
  v385.value._uint64_t countAndFlagsBits = 0xD000000000000019;
  Action.init(_:mac:)(v385, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v386 = sub_23ABBFBD4();
  char v387 = sub_23ABB8BA8();
  char v388 = sub_23ABBFBE0();
  uint64_t v389 = sub_23ABBFBE8();
  uint64_t v390 = sub_23ABBFBE8();
  *((void *)&v746 + 1) = v384;
  *(void *)&long long v746 = v812;
  char v391 = v387 & 1;
  uint64_t v392 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001DLL, 0x800000023AC51F00, v380, MEMORY[0x263F8EE78], v386, v391, v388 & 1, v861, v892 + 4288, v746, v389, v390, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v393 = swift_allocObject();
  *(_OWORD *)(v393 + 16) = xmmword_23AC2C700;
  uint64_t v394 = swift_allocObject();
  *(_OWORD *)(v394 + 16) = xmmword_23AC2C700;
  *(void *)(v394 + 32) = 0xD000000000000032;
  *(void *)(v394 + 40) = 0x800000023AC51F40;
  *(void *)(v393 + 32) = v394;
  *(unsigned char *)(v393 + 40) = 0;
  uint64_t v395 = swift_allocObject();
  *(_OWORD *)(v395 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v395 + 32) = 84017408;
  *(unsigned char *)(v395 + 36) = 8;
  uint64_t v862 = sub_23AB60324(v395, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v392 + 16)) {
    uint64_t v813 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v813 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v396 = swift_allocObject();
  *(_OWORD *)(v396 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v396 + 32) = 3;
  uint64_t v397 = sub_23AB60324(v396, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v398.value._uint64_t countAndFlagsBits = 0xD000000000000020;
  v398.value._object = (void *)0x800000023AC51FB0;
  Action.init(_:mac:)(v398, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v399 = sub_23ABBFBD4();
  char v400 = sub_23ABB8BA8();
  char v401 = sub_23ABBFBE0();
  uint64_t v402 = sub_23ABBFBE8();
  uint64_t v403 = sub_23ABBFBE8();
  *((void *)&v747 + 1) = v397;
  *(void *)&long long v747 = v813;
  char v404 = v400 & 1;
  uint64_t v405 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000024, 0x800000023AC51F80, v393, MEMORY[0x263F8EE78], v399, v404, v401 & 1, v862, v892 + 4440, v747, v402, v403, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v406 = swift_allocObject();
  *(_OWORD *)(v406 + 16) = xmmword_23AC2C700;
  uint64_t v407 = swift_allocObject();
  *(_OWORD *)(v407 + 16) = xmmword_23AC2C710;
  *(void *)(v407 + 32) = 0xD000000000000050;
  *(void *)(v407 + 40) = 0x800000023AC51FE0;
  *(void *)(v407 + 48) = 0xD000000000000055;
  *(void *)(v407 + 56) = 0x800000023AC52040;
  *(void *)(v406 + 32) = v407;
  *(unsigned char *)(v406 + 40) = 0;
  uint64_t v408 = swift_allocObject();
  *(_OWORD *)(v408 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v408 + 32) = 84017408;
  *(unsigned char *)(v408 + 36) = 8;
  uint64_t v863 = sub_23AB60324(v408, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v405 + 16)) {
    uint64_t v826 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v826 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v409 = swift_allocObject();
  *(_OWORD *)(v409 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v409 + 32) = 3;
  uint64_t v410 = sub_23AB60324(v409, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v411.value._uint64_t countAndFlagsBits = 0xD000000000000025;
  v411.value._object = (void *)0x800000023AC520D0;
  Action.init(_:mac:)(v411, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v412 = sub_23ABBFBD4();
  char v413 = sub_23ABB8BA8();
  char v414 = sub_23ABBFBE0();
  uint64_t v415 = sub_23ABBFBE8();
  uint64_t v416 = sub_23ABBFBE8();
  *((void *)&v748 + 1) = v410;
  *(void *)&long long v748 = v826;
  char v417 = v413 & 1;
  uint64_t v418 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000029, 0x800000023AC520A0, v406, MEMORY[0x263F8EE78], v412, v417, v414 & 1, v863, v892 + 4592, v748, v415, v416, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v419 = swift_allocObject();
  *(_OWORD *)(v419 + 16) = xmmword_23AC2C700;
  uint64_t v420 = swift_allocObject();
  *(_OWORD *)(v420 + 16) = xmmword_23AC2C700;
  *(void *)(v420 + 32) = 0xD000000000000039;
  *(void *)(v420 + 40) = 0x800000023AC52100;
  *(void *)(v419 + 32) = v420;
  *(unsigned char *)(v419 + 40) = 0;
  uint64_t v421 = swift_allocObject();
  *(_OWORD *)(v421 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v421 + 32) = 84017408;
  *(unsigned char *)(v421 + 36) = 8;
  uint64_t v827 = sub_23AB60324(v421, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v418 + 16)) {
    uint64_t v814 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v814 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v422 = swift_allocObject();
  *(_OWORD *)(v422 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v422 + 32) = 3;
  uint64_t v423 = sub_23AB60324(v422, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v424.value._uint64_t countAndFlagsBits = 0xD000000000000026;
  v424.value._object = (void *)0x800000023AC52170;
  Action.init(_:mac:)(v424, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v425 = sub_23ABBFBD4();
  char v426 = sub_23ABB8BA8();
  char v427 = sub_23ABBFBE0();
  uint64_t v428 = sub_23ABBFBE8();
  uint64_t v429 = sub_23ABBFBE8();
  *((void *)&v749 + 1) = v423;
  *(void *)&long long v749 = v814;
  char v430 = v426 & 1;
  uint64_t v431 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ALL, 0x800000023AC52140, v419, MEMORY[0x263F8EE78], v425, v430, v427 & 1, v827, v892 + 4744, v749, v428, v429, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v432 = swift_allocObject();
  *(_OWORD *)(v432 + 16) = xmmword_23AC2C700;
  uint64_t v433 = swift_allocObject();
  *(_OWORD *)(v433 + 16) = xmmword_23AC2C740;
  *(void *)(v433 + 32) = 0xD000000000000057;
  *(void *)(v433 + 40) = 0x800000023AC521A0;
  *(void *)(v433 + 48) = 0xD00000000000005CLL;
  *(void *)(v433 + 56) = 0x800000023AC52200;
  *(void *)(v433 + 64) = 0xD000000000000057;
  *(void *)(v433 + 72) = 0x800000023AC52260;
  *(void *)(v433 + 80) = 0xD00000000000005CLL;
  *(void *)(v433 + 88) = 0x800000023AC522C0;
  *(void *)(v432 + 32) = v433;
  *(unsigned char *)(v432 + 40) = 0;
  uint64_t v434 = swift_allocObject();
  *(_OWORD *)(v434 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v434 + 32) = 84017408;
  *(unsigned char *)(v434 + 36) = 8;
  uint64_t v864 = sub_23AB60324(v434, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v431 + 16)) {
    uint64_t v828 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v828 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v435 = swift_allocObject();
  *(_OWORD *)(v435 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v435 + 32) = 3;
  uint64_t v436 = sub_23AB60324(v435, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v437.value._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v437.value._object = (void *)0x800000023AC52350;
  Action.init(_:mac:)(v437, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v438 = sub_23ABBFBD4();
  char v439 = sub_23ABB8BA8();
  char v440 = sub_23ABBFBE0();
  uint64_t v441 = sub_23ABBFBE8();
  uint64_t v442 = sub_23ABBFBE8();
  *((void *)&v750 + 1) = v436;
  *(void *)&long long v750 = v828;
  char v443 = v439 & 1;
  uint64_t v444 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002FLL, 0x800000023AC52320, v432, MEMORY[0x263F8EE78], v438, v443, v440 & 1, v864, v892 + 4896, v750, v441, v442, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v445 = swift_allocObject();
  *(_OWORD *)(v445 + 16) = xmmword_23AC2C700;
  uint64_t v446 = swift_allocObject();
  *(_OWORD *)(v446 + 16) = xmmword_23AC2C700;
  *(void *)(v446 + 32) = 0xD000000000000033;
  *(void *)(v446 + 40) = 0x800000023AC52380;
  *(void *)(v445 + 32) = v446;
  *(unsigned char *)(v445 + 40) = 0;
  uint64_t v447 = swift_allocObject();
  *(_OWORD *)(v447 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v447 + 32) = 84017408;
  *(unsigned char *)(v447 + 36) = 8;
  uint64_t v865 = sub_23AB60324(v447, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v444 + 16)) {
    uint64_t v815 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v815 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v448 = swift_allocObject();
  *(_OWORD *)(v448 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v448 + 32) = 3;
  uint64_t v449 = sub_23AB60324(v448, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v450.value._uint64_t countAndFlagsBits = 0xD000000000000021;
  v450.value._object = (void *)0x800000023AC523F0;
  Action.init(_:mac:)(v450, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v451 = sub_23ABBFBD4();
  char v452 = sub_23ABB8BA8();
  char v453 = sub_23ABBFBE0();
  uint64_t v454 = sub_23ABBFBE8();
  uint64_t v455 = sub_23ABBFBE8();
  *((void *)&v751 + 1) = v449;
  *(void *)&long long v751 = v815;
  char v456 = v452 & 1;
  uint64_t v457 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC523C0, v445, MEMORY[0x263F8EE78], v451, v456, v453 & 1, v865, v892 + 5048, v751, v454, v455, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v458 = swift_allocObject();
  *(_OWORD *)(v458 + 16) = xmmword_23AC2C700;
  uint64_t v459 = swift_allocObject();
  *(_OWORD *)(v459 + 16) = xmmword_23AC2C710;
  *(void *)(v459 + 32) = 0xD000000000000051;
  *(void *)(v459 + 40) = 0x800000023AC52420;
  *(void *)(v459 + 48) = 0xD000000000000056;
  *(void *)(v459 + 56) = 0x800000023AC52480;
  *(void *)(v458 + 32) = v459;
  *(unsigned char *)(v458 + 40) = 0;
  uint64_t v460 = swift_allocObject();
  *(_OWORD *)(v460 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v460 + 32) = 84017408;
  *(unsigned char *)(v460 + 36) = 8;
  uint64_t v866 = sub_23AB60324(v460, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v457 + 16)) {
    uint64_t v829 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v829 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v461 = swift_allocObject();
  *(_OWORD *)(v461 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v461 + 32) = 3;
  uint64_t v462 = sub_23AB60324(v461, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v463.value._uint64_t countAndFlagsBits = 0xD000000000000026;
  v463.value._object = (void *)0x800000023AC52510;
  Action.init(_:mac:)(v463, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v464 = sub_23ABBFBD4();
  char v465 = sub_23ABB8BA8();
  char v466 = sub_23ABBFBE0();
  uint64_t v467 = sub_23ABBFBE8();
  uint64_t v468 = sub_23ABBFBE8();
  *((void *)&v752 + 1) = v462;
  *(void *)&long long v752 = v829;
  char v469 = v465 & 1;
  uint64_t v470 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ALL, 0x800000023AC524E0, v458, MEMORY[0x263F8EE78], v464, v469, v466 & 1, v866, v892 + 5200, v752, v467, v468, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v471 = swift_allocObject();
  *(_OWORD *)(v471 + 16) = xmmword_23AC2C700;
  uint64_t v472 = swift_allocObject();
  *(_OWORD *)(v472 + 16) = xmmword_23AC2C700;
  *(void *)(v472 + 32) = 0xD00000000000002FLL;
  *(void *)(v472 + 40) = 0x800000023AC52540;
  *(void *)(v471 + 32) = v472;
  *(unsigned char *)(v471 + 40) = 0;
  uint64_t v473 = swift_allocObject();
  *(_OWORD *)(v473 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v473 + 32) = 84017408;
  *(unsigned char *)(v473 + 36) = 8;
  uint64_t v867 = sub_23AB60324(v473, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v470 + 16)) {
    uint64_t v816 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v816 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v474 = swift_allocObject();
  *(_OWORD *)(v474 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v474 + 32) = 3;
  uint64_t v475 = sub_23AB60324(v474, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v476.value._uint64_t countAndFlagsBits = 0xD000000000000020;
  v476.value._object = (void *)0x800000023AC525A0;
  Action.init(_:mac:)(v476, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v477 = sub_23ABBFBD4();
  char v478 = sub_23ABB8BA8();
  char v479 = sub_23ABBFBE0();
  uint64_t v480 = sub_23ABBFBE8();
  uint64_t v481 = sub_23ABBFBE8();
  *((void *)&v753 + 1) = v475;
  *(void *)&long long v753 = v816;
  char v482 = v478 & 1;
  uint64_t v483 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000024, 0x800000023AC52570, v471, MEMORY[0x263F8EE78], v477, v482, v479 & 1, v867, v892 + 5352, v753, v480, v481, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v484 = swift_allocObject();
  *(_OWORD *)(v484 + 16) = xmmword_23AC2C700;
  uint64_t v485 = swift_allocObject();
  *(_OWORD *)(v485 + 16) = xmmword_23AC2C710;
  *(void *)(v485 + 32) = 0xD00000000000004DLL;
  *(void *)(v485 + 40) = 0x800000023AC525D0;
  *(void *)(v485 + 48) = 0xD000000000000052;
  *(void *)(v485 + 56) = 0x800000023AC52620;
  *(void *)(v484 + 32) = v485;
  *(unsigned char *)(v484 + 40) = 0;
  uint64_t v486 = swift_allocObject();
  *(_OWORD *)(v486 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v486 + 32) = 84017408;
  *(unsigned char *)(v486 + 36) = 8;
  uint64_t v868 = sub_23AB60324(v486, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v483 + 16)) {
    uint64_t v830 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v830 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v487 = swift_allocObject();
  *(_OWORD *)(v487 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v487 + 32) = 3;
  uint64_t v488 = sub_23AB60324(v487, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v489.value._uint64_t countAndFlagsBits = 0xD000000000000025;
  v489.value._object = (void *)0x800000023AC526B0;
  Action.init(_:mac:)(v489, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v490 = sub_23ABBFBD4();
  char v491 = sub_23ABB8BA8();
  char v492 = sub_23ABBFBE0();
  uint64_t v493 = sub_23ABBFBE8();
  uint64_t v494 = sub_23ABBFBE8();
  *((void *)&v754 + 1) = v488;
  *(void *)&long long v754 = v830;
  char v495 = v491 & 1;
  uint64_t v496 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000029, 0x800000023AC52680, v484, MEMORY[0x263F8EE78], v490, v495, v492 & 1, v868, v892 + 5504, v754, v493, v494, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v497 = swift_allocObject();
  *(_OWORD *)(v497 + 16) = xmmword_23AC2C700;
  uint64_t v498 = swift_allocObject();
  *(_OWORD *)(v498 + 16) = xmmword_23AC2C700;
  *(void *)(v498 + 32) = 0xD000000000000037;
  *(void *)(v498 + 40) = 0x800000023AC526E0;
  *(void *)(v497 + 32) = v498;
  *(unsigned char *)(v497 + 40) = 0;
  uint64_t v499 = swift_allocObject();
  *(_OWORD *)(v499 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v499 + 32) = 84017408;
  *(unsigned char *)(v499 + 36) = 8;
  uint64_t v869 = sub_23AB60324(v499, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v496 + 16)) {
    uint64_t v817 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v817 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v500 = swift_allocObject();
  *(_OWORD *)(v500 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v500 + 32) = 3;
  uint64_t v501 = sub_23AB60324(v500, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v502.value._uint64_t countAndFlagsBits = 0xD000000000000026;
  v502.value._object = (void *)0x800000023AC52750;
  Action.init(_:mac:)(v502, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v503 = sub_23ABBFBD4();
  char v504 = sub_23ABB8BA8();
  char v505 = sub_23ABBFBE0();
  uint64_t v506 = sub_23ABBFBE8();
  uint64_t v507 = sub_23ABBFBE8();
  *((void *)&v755 + 1) = v501;
  *(void *)&long long v755 = v817;
  char v508 = v504 & 1;
  uint64_t v509 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ALL, 0x800000023AC52720, v497, MEMORY[0x263F8EE78], v503, v508, v505 & 1, v869, v892 + 5656, v755, v506, v507, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v510 = swift_allocObject();
  *(_OWORD *)(v510 + 16) = xmmword_23AC2C700;
  uint64_t v511 = swift_allocObject();
  *(_OWORD *)(v511 + 16) = xmmword_23AC2C710;
  *(void *)(v511 + 32) = 0xD000000000000055;
  *(void *)(v511 + 40) = 0x800000023AC52780;
  *(void *)(v511 + 48) = 0xD00000000000005ALL;
  *(void *)(v511 + 56) = 0x800000023AC527E0;
  *(void *)(v510 + 32) = v511;
  *(unsigned char *)(v510 + 40) = 0;
  uint64_t v512 = swift_allocObject();
  *(_OWORD *)(v512 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v512 + 32) = 84017408;
  *(unsigned char *)(v512 + 36) = 8;
  uint64_t v870 = sub_23AB60324(v512, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v509 + 16)) {
    uint64_t v831 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v831 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v513 = swift_allocObject();
  *(_OWORD *)(v513 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v513 + 32) = 3;
  uint64_t v514 = sub_23AB60324(v513, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v515.value._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v515.value._object = (void *)0x800000023AC52870;
  Action.init(_:mac:)(v515, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v516 = sub_23ABBFBD4();
  char v517 = sub_23ABB8BA8();
  char v518 = sub_23ABBFBE0();
  uint64_t v519 = sub_23ABBFBE8();
  uint64_t v520 = sub_23ABBFBE8();
  *((void *)&v756 + 1) = v514;
  *(void *)&long long v756 = v831;
  char v521 = v517 & 1;
  uint64_t v522 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002FLL, 0x800000023AC52840, v510, MEMORY[0x263F8EE78], v516, v521, v518 & 1, v870, v892 + 5808, v756, v519, v520, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v523 = swift_allocObject();
  *(_OWORD *)(v523 + 16) = xmmword_23AC2C700;
  uint64_t v524 = swift_allocObject();
  *(_OWORD *)(v524 + 16) = xmmword_23AC2C700;
  *(void *)(v524 + 32) = 0xD000000000000031;
  *(void *)(v524 + 40) = 0x800000023AC528A0;
  *(void *)(v523 + 32) = v524;
  *(unsigned char *)(v523 + 40) = 0;
  uint64_t v525 = swift_allocObject();
  *(_OWORD *)(v525 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v525 + 32) = 84017408;
  *(unsigned char *)(v525 + 36) = 8;
  uint64_t v871 = sub_23AB60324(v525, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v522 + 16)) {
    uint64_t v818 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v818 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v526 = swift_allocObject();
  *(_OWORD *)(v526 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v526 + 32) = 3;
  uint64_t v527 = sub_23AB60324(v526, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v528.value._uint64_t countAndFlagsBits = 0xD000000000000021;
  v528.value._object = (void *)0x800000023AC52910;
  Action.init(_:mac:)(v528, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v529 = sub_23ABBFBD4();
  char v530 = sub_23ABB8BA8();
  char v531 = sub_23ABBFBE0();
  uint64_t v532 = sub_23ABBFBE8();
  uint64_t v533 = sub_23ABBFBE8();
  *((void *)&v757 + 1) = v527;
  *(void *)&long long v757 = v818;
  char v534 = v530 & 1;
  uint64_t v535 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000025, 0x800000023AC528E0, v523, MEMORY[0x263F8EE78], v529, v534, v531 & 1, v871, v892 + 5960, v757, v532, v533, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v536 = swift_allocObject();
  *(_OWORD *)(v536 + 16) = xmmword_23AC2C700;
  uint64_t v537 = swift_allocObject();
  *(_OWORD *)(v537 + 16) = xmmword_23AC2C710;
  *(void *)(v537 + 32) = 0xD00000000000004FLL;
  *(void *)(v537 + 40) = 0x800000023AC52940;
  *(void *)(v537 + 48) = 0xD000000000000054;
  *(void *)(v537 + 56) = 0x800000023AC52990;
  *(void *)(v536 + 32) = v537;
  *(unsigned char *)(v536 + 40) = 0;
  uint64_t v538 = swift_allocObject();
  *(_OWORD *)(v538 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v538 + 32) = 84017408;
  *(unsigned char *)(v538 + 36) = 8;
  uint64_t v872 = sub_23AB60324(v538, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v535 + 16)) {
    uint64_t v832 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v832 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v539 = swift_allocObject();
  *(_OWORD *)(v539 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v539 + 32) = 3;
  uint64_t v540 = sub_23AB60324(v539, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v541.value._uint64_t countAndFlagsBits = 0xD000000000000026;
  v541.value._object = (void *)0x800000023AC52A20;
  Action.init(_:mac:)(v541, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v542 = sub_23ABBFBD4();
  char v543 = sub_23ABB8BA8();
  char v544 = sub_23ABBFBE0();
  uint64_t v545 = sub_23ABBFBE8();
  uint64_t v546 = sub_23ABBFBE8();
  *((void *)&v758 + 1) = v540;
  *(void *)&long long v758 = v832;
  char v547 = v543 & 1;
  uint64_t v548 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002ALL, 0x800000023AC529F0, v536, MEMORY[0x263F8EE78], v542, v547, v544 & 1, v872, v892 + 6112, v758, v545, v546, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v549 = swift_allocObject();
  *(_OWORD *)(v549 + 16) = xmmword_23AC2C700;
  uint64_t v550 = swift_allocObject();
  *(_OWORD *)(v550 + 16) = xmmword_23AC2C700;
  *(void *)(v550 + 32) = 0xD000000000000035;
  *(void *)(v550 + 40) = 0x800000023AC52A50;
  *(void *)(v549 + 32) = v550;
  *(unsigned char *)(v549 + 40) = 0;
  uint64_t v551 = swift_allocObject();
  *(_OWORD *)(v551 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v551 + 32) = 84017408;
  *(unsigned char *)(v551 + 36) = 8;
  uint64_t v873 = sub_23AB60324(v551, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v548 + 16)) {
    uint64_t v819 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v819 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v552 = swift_allocObject();
  *(_OWORD *)(v552 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v552 + 32) = 3;
  uint64_t v553 = sub_23AB60324(v552, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v554.value._uint64_t countAndFlagsBits = 0xD000000000000022;
  v555.value._uint64_t countAndFlagsBits = 0xD000000000000023;
  v555.value._object = (void *)0x800000023AC52AC0;
  v554.value._object = (void *)0x800000023AC52AF0;
  Action.init(_:mac:)(v555, v554);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v556 = sub_23ABBFBD4();
  char v557 = sub_23ABB8BA8();
  char v558 = sub_23ABBFBE0();
  uint64_t v559 = sub_23ABBFBE8();
  uint64_t v560 = sub_23ABBFBE8();
  *((void *)&v759 + 1) = v553;
  *(void *)&long long v759 = v819;
  char v561 = v557 & 1;
  uint64_t v562 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000027, 0x800000023AC52A90, v549, MEMORY[0x263F8EE78], v556, v561, v558 & 1, v873, v892 + 6264, v759, v559, v560, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v563 = swift_allocObject();
  *(_OWORD *)(v563 + 16) = xmmword_23AC2C700;
  uint64_t v564 = swift_allocObject();
  *(_OWORD *)(v564 + 16) = xmmword_23AC2C710;
  *(void *)(v564 + 32) = 0xD000000000000053;
  *(void *)(v564 + 40) = 0x800000023AC52B20;
  *(void *)(v564 + 48) = 0xD000000000000058;
  *(void *)(v564 + 56) = 0x800000023AC52B80;
  *(void *)(v563 + 32) = v564;
  *(unsigned char *)(v563 + 40) = 0;
  uint64_t v565 = swift_allocObject();
  *(_OWORD *)(v565 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v565 + 32) = 84017408;
  *(unsigned char *)(v565 + 36) = 8;
  uint64_t v874 = sub_23AB60324(v565, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v562 + 16)) {
    uint64_t v833 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v833 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v566 = swift_allocObject();
  *(_OWORD *)(v566 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v566 + 32) = 3;
  uint64_t v567 = sub_23AB60324(v566, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v568.value._uint64_t countAndFlagsBits = 0xD000000000000028;
  v568.value._object = (void *)0x800000023AC52C10;
  Action.init(_:mac:)(v568, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v569 = sub_23ABBFBD4();
  char v570 = sub_23ABB8BA8();
  char v571 = sub_23ABBFBE0();
  uint64_t v572 = sub_23ABBFBE8();
  uint64_t v573 = sub_23ABBFBE8();
  *((void *)&v760 + 1) = v567;
  *(void *)&long long v760 = v833;
  char v574 = v570 & 1;
  uint64_t v575 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000002CLL, 0x800000023AC52BE0, v563, MEMORY[0x263F8EE78], v569, v574, v571 & 1, v874, v892 + 6416, v760, v572, v573, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v576 = swift_allocObject();
  *(_OWORD *)(v576 + 16) = xmmword_23AC2C700;
  uint64_t v577 = swift_allocObject();
  *(_OWORD *)(v577 + 16) = xmmword_23AC2C700;
  *(void *)(v577 + 32) = 0xD00000000000001FLL;
  *(void *)(v577 + 40) = 0x800000023AC52C40;
  *(void *)(v576 + 32) = v577;
  *(unsigned char *)(v576 + 40) = 0;
  uint64_t v578 = swift_allocObject();
  *(_OWORD *)(v578 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v578 + 32) = 84017408;
  *(unsigned char *)(v578 + 36) = 8;
  uint64_t v875 = sub_23AB60324(v578, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v575 + 16)) {
    uint64_t v834 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v834 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v579 = swift_allocObject();
  *(_OWORD *)(v579 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v579 + 32) = 3;
  uint64_t v580 = sub_23AB60324(v579, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v581.value._object = (void *)0x800000023AC52C80;
  v581.value._uint64_t countAndFlagsBits = 0xD000000000000012;
  Action.init(_:mac:)(v581, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v582 = sub_23ABBFBD4();
  char v583 = sub_23ABB8BA8();
  char v584 = sub_23ABBFBE0();
  uint64_t v585 = sub_23ABBFBE8();
  uint64_t v586 = sub_23ABBFBE8();
  *((void *)&v761 + 1) = v580;
  *(void *)&long long v761 = v834;
  char v587 = v583 & 1;
  uint64_t v588 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000016, 0x800000023AC52C60, v576, MEMORY[0x263F8EE78], v582, v587, v584 & 1, v875, v892 + 6568, v761, v585, v586, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v589 = swift_allocObject();
  *(_OWORD *)(v589 + 16) = xmmword_23AC2C700;
  uint64_t v590 = swift_allocObject();
  *(_OWORD *)(v590 + 16) = xmmword_23AC2C710;
  *(void *)(v590 + 32) = 0xD000000000000044;
  *(void *)(v590 + 40) = 0x800000023AC52CA0;
  *(void *)(v590 + 48) = 0xD000000000000049;
  *(void *)(v590 + 56) = 0x800000023AC52CF0;
  *(void *)(v589 + 32) = v590;
  *(unsigned char *)(v589 + 40) = 0;
  uint64_t v591 = swift_allocObject();
  *(_OWORD *)(v591 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v591 + 32) = 84017408;
  *(unsigned char *)(v591 + 36) = 8;
  uint64_t v876 = sub_23AB60324(v591, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v588 + 16)) {
    uint64_t v837 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v837 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v592 = swift_allocObject();
  *(_OWORD *)(v592 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v592 + 32) = 3;
  uint64_t v593 = sub_23AB60324(v592, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v594.value._object = (void *)0x800000023AC52D60;
  v594.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  Action.init(_:mac:)(v594, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v595 = sub_23ABBFBD4();
  char v596 = sub_23ABB8BA8();
  char v597 = sub_23ABBFBE0();
  uint64_t v598 = sub_23ABBFBE8();
  uint64_t v599 = sub_23ABBFBE8();
  *((void *)&v762 + 1) = v593;
  uint64_t v779 = v598;
  *(void *)&long long v762 = v837;
  uint64_t v600 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001BLL, 0x800000023AC52D40, v589, MEMORY[0x263F8EE78], v595, v596 & 1, v597 & 1, v876, v892 + 6720, v762, v779, v599, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v601 = swift_allocObject();
  *(_OWORD *)(v601 + 16) = xmmword_23AC2C700;
  uint64_t v602 = swift_allocObject();
  *(_OWORD *)(v602 + 16) = xmmword_23AC2C700;
  *(void *)(v602 + 32) = 0x61686320776F6853;
  *(void *)(v602 + 40) = 0xEF73726574636172;
  *(void *)(v601 + 32) = v602;
  *(unsigned char *)(v601 + 40) = 0;
  uint64_t v603 = swift_allocObject();
  *(_OWORD *)(v603 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v603 + 32) = 134545921;
  uint64_t v841 = sub_23AB60324(v603, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v600 + 16)) {
    uint64_t v838 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v838 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v604 = swift_allocObject();
  *(_OWORD *)(v604 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v604 + 32) = 768;
  uint64_t v605 = sub_23AB60324(v604, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v606.value._uint64_t countAndFlagsBits = 0x72616843776F6873;
  v606.value._object = (void *)0xEE00737265746361;
  Action.init(_:mac:)(v606, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v607 = sub_23ABBFBD4();
  char v608 = sub_23ABB8BA8();
  char v609 = sub_23ABBFBE0();
  uint64_t v610 = sub_23ABBFBE8();
  uint64_t v611 = sub_23ABBFBE8();
  uint64_t v780 = v610;
  *((void *)&v763 + 1) = v605;
  *(void *)&long long v763 = v838;
  uint64_t v612 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC52D80, v601, MEMORY[0x263F8EE78], v607, v608 & 1, v609 & 1, v841, v892 + 6872, v763, v780, v611, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v613 = swift_allocObject();
  *(_OWORD *)(v613 + 16) = xmmword_23AC2C700;
  uint64_t v614 = swift_allocObject();
  *(_OWORD *)(v614 + 16) = xmmword_23AC2C700;
  *(void *)(v614 + 32) = 0x6E696C20776F6853;
  *(void *)(v614 + 40) = 0xEA00000000007365;
  *(void *)(v613 + 32) = v614;
  *(unsigned char *)(v613 + 40) = 0;
  uint64_t v615 = swift_allocObject();
  *(_OWORD *)(v615 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v615 + 32) = 84017408;
  *(unsigned char *)(v615 + 36) = 8;
  uint64_t v842 = sub_23AB60324(v615, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v612 + 16)) {
    uint64_t v839 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v839 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v616 = swift_allocObject();
  *(_OWORD *)(v616 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v616 + 32) = 3;
  uint64_t v617 = sub_23AB60324(v616, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  uint64_t v618 = swift_allocObject();
  *(_OWORD *)(v618 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v618 + 32) = 15;
  uint64_t v619 = sub_23AB60324(v618, &qword_268A5A338, (void (*)(void))sub_23AB60498, (uint64_t)&type metadata for VCCommand.Evaluation, (void (*)(void))sub_23AB604EC);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v620.value._uint64_t countAndFlagsBits = 0x656E694C776F6873;
  v620.value._object = (void *)0xE900000000000073;
  v621.value._uint64_t countAndFlagsBits = 0x656E694C776F6873;
  v621.value._object = (void *)0xEA00000000003A73;
  Action.init(_:mac:)(v620, v621);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v622 = sub_23ABBFBD4();
  char v623 = sub_23ABB8BA8();
  char v624 = sub_23ABBFBE0();
  uint64_t v625 = sub_23ABBFBE8();
  char v626 = v624 & 1;
  *((void *)&v764 + 1) = v617;
  *(void *)&long long v764 = v839;
  uint64_t v627 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x6F68532E74786554, 0xEE0073656E694C77, v613, MEMORY[0x263F8EE78], v622, v623 & 1, v626, v842, v892 + 7024, v764, v625, v619, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v628 = swift_allocObject();
  *(_OWORD *)(v628 + 16) = xmmword_23AC2C700;
  uint64_t v629 = swift_allocObject();
  *(_OWORD *)(v629 + 16) = xmmword_23AC2C700;
  *(void *)(v629 + 32) = 0x72617020776F6853;
  *(void *)(v629 + 40) = 0xEF73687061726761;
  *(void *)(v628 + 32) = v629;
  *(unsigned char *)(v628 + 40) = 0;
  uint64_t v630 = swift_allocObject();
  *(_OWORD *)(v630 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v630 + 32) = 134545921;
  uint64_t v848 = sub_23AB60324(v630, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v627 + 16)) {
    uint64_t v843 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v843 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v631 = swift_allocObject();
  *(_OWORD *)(v631 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v631 + 32) = 768;
  uint64_t v632 = sub_23AB60324(v631, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v633.value._uint64_t countAndFlagsBits = 0x61726150776F6873;
  v633.value._object = (void *)0xEE00736870617267;
  Action.init(_:mac:)(v633, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v634 = sub_23ABBFBD4();
  char v635 = sub_23ABB8BA8();
  char v636 = sub_23ABBFBE0();
  uint64_t v637 = sub_23ABBFBE8();
  uint64_t v638 = sub_23ABBFBE8();
  uint64_t v781 = v637;
  *((void *)&v765 + 1) = v632;
  *(void *)&long long v765 = v843;
  uint64_t v639 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000013, 0x800000023AC52DA0, v628, MEMORY[0x263F8EE78], v634, v635 & 1, v636 & 1, v848, v892 + 7176, v765, v781, v638, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v640 = swift_allocObject();
  *(_OWORD *)(v640 + 16) = xmmword_23AC2C700;
  uint64_t v641 = swift_allocObject();
  *(_OWORD *)(v641 + 16) = xmmword_23AC2C700;
  strcpy((char *)(v641 + 32), "Show sentences");
  *(unsigned char *)(v641 + 47) = -18;
  *(void *)(v640 + 32) = v641;
  *(unsigned char *)(v640 + 40) = 0;
  uint64_t v642 = swift_allocObject();
  *(_OWORD *)(v642 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v642 + 32) = 134545921;
  uint64_t v885 = sub_23AB60324(v642, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v639 + 16)) {
    uint64_t v849 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v849 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v643 = swift_allocObject();
  *(_OWORD *)(v643 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v643 + 32) = 768;
  uint64_t v644 = sub_23AB60324(v643, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v645.value._uint64_t countAndFlagsBits = 0x746E6553776F6873;
  v645.value._object = (void *)0xED00007365636E65;
  Action.init(_:mac:)(v645, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v646 = sub_23ABBFBD4();
  char v647 = sub_23ABB8BA8();
  char v648 = sub_23ABBFBE0();
  uint64_t v649 = sub_23ABBFBE8();
  uint64_t v650 = sub_23ABBFBE8();
  *((void *)&v766 + 1) = v644;
  uint64_t v782 = v649;
  *(void *)&long long v766 = v849;
  uint64_t v651 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000012, 0x800000023AC52DC0, v640, MEMORY[0x263F8EE78], v646, v647 & 1, v648 & 1, v885, v892 + 7328, v766, v782, v650, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v652 = swift_allocObject();
  *(_OWORD *)(v652 + 16) = xmmword_23AC2C700;
  uint64_t v653 = swift_allocObject();
  *(_OWORD *)(v653 + 16) = xmmword_23AC2C700;
  *(void *)(v653 + 32) = 0x726F7720776F6853;
  *(void *)(v653 + 40) = 0xEA00000000007364;
  *(void *)(v652 + 32) = v653;
  *(unsigned char *)(v652 + 40) = 0;
  uint64_t v654 = swift_allocObject();
  *(_OWORD *)(v654 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v654 + 32) = 134545921;
  uint64_t v886 = sub_23AB60324(v654, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v651 + 16)) {
    uint64_t v877 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v877 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v655 = swift_allocObject();
  *(_OWORD *)(v655 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v655 + 32) = 768;
  uint64_t v656 = sub_23AB60324(v655, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v657.value._uint64_t countAndFlagsBits = 0x64726F57776F6873;
  v657.value._object = (void *)0xE900000000000073;
  Action.init(_:mac:)(v657, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v658 = sub_23ABBFBD4();
  char v659 = sub_23ABB8BA8();
  char v660 = sub_23ABBFBE0();
  uint64_t v661 = sub_23ABBFBE8();
  uint64_t v662 = sub_23ABBFBE8();
  char v663 = v659 & 1;
  *((void *)&v767 + 1) = v656;
  *(void *)&long long v767 = v877;
  uint64_t v664 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0x6F68532E74786554, 0xEE007364726F5777, v652, MEMORY[0x263F8EE78], v658, v663, v660 & 1, v886, v892 + 7480, v767, v661, v662, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v665 = swift_allocObject();
  *(_OWORD *)(v665 + 16) = xmmword_23AC2C700;
  uint64_t v666 = swift_allocObject();
  *(_OWORD *)(v666 + 16) = xmmword_23AC2C700;
  *(void *)(v666 + 32) = 0xD000000000000022;
  *(void *)(v666 + 40) = 0x800000023AC52DE0;
  *(void *)(v665 + 32) = v666;
  *(unsigned char *)(v665 + 40) = 0;
  uint64_t v667 = swift_allocObject();
  *(_OWORD *)(v667 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v667 + 32) = 84017408;
  uint64_t v887 = sub_23AB60324(v667, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v664 + 16)) {
    uint64_t v878 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v878 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v668 = swift_allocObject();
  *(_OWORD *)(v668 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v668 + 32) = 2051;
  uint64_t v669 = sub_23AB60324(v668, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v670.value._object = (void *)0x800000023AC52E30;
  v670.value._uint64_t countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v670, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v671 = sub_23ABBFBD4();
  char v672 = sub_23ABB8BA8();
  char v673 = sub_23ABBFBE0();
  uint64_t v674 = sub_23ABBFBE8();
  uint64_t v675 = sub_23ABBFBE8();
  *((void *)&v768 + 1) = v669;
  *(void *)&long long v768 = v878;
  char v676 = v672 & 1;
  uint64_t v677 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC52E10, v665, MEMORY[0x263F8EE78], v671, v676, v673 & 1, v887, v892 + 7632, v768, v674, v675, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v678 = swift_allocObject();
  *(_OWORD *)(v678 + 16) = xmmword_23AC2C700;
  uint64_t v679 = swift_allocObject();
  *(_OWORD *)(v679 + 16) = xmmword_23AC2C710;
  *(void *)(v679 + 32) = 0xD00000000000004CLL;
  *(void *)(v679 + 40) = 0x800000023AC52E50;
  *(void *)(v679 + 48) = 0xD000000000000047;
  *(void *)(v679 + 56) = 0x800000023AC52EA0;
  *(void *)(v678 + 32) = v679;
  *(unsigned char *)(v678 + 40) = 0;
  uint64_t v680 = swift_allocObject();
  *(_OWORD *)(v680 + 16) = xmmword_23AC2C740;
  *(_DWORD *)(v680 + 32) = 84017408;
  uint64_t v889 = sub_23AB60324(v680, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v677 + 16)) {
    uint64_t v879 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v879 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v681 = swift_allocObject();
  *(_OWORD *)(v681 + 16) = xmmword_23AC2C710;
  *(_WORD *)(v681 + 32) = 2051;
  uint64_t v682 = sub_23AB60324(v681, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v683.value._object = (void *)0x800000023AC52F10;
  v683.value._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  Action.init(_:mac:)(v683, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v684 = sub_23ABBFBD4();
  char v685 = sub_23ABB8BA8();
  char v686 = sub_23ABBFBE0();
  uint64_t v687 = sub_23ABBFBE8();
  uint64_t v688 = sub_23ABBFBE8();
  uint64_t v783 = v687;
  *((void *)&v769 + 1) = v682;
  *(void *)&long long v769 = v879;
  uint64_t v689 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC52EF0, v678, MEMORY[0x263F8EE78], v684, v685 & 1, v686 & 1, v889, v892 + 7784, v769, v783, v688, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v690 = swift_allocObject();
  *(_OWORD *)(v690 + 16) = xmmword_23AC2C700;
  uint64_t v691 = swift_allocObject();
  *(_OWORD *)(v691 + 16) = xmmword_23AC2C700;
  *(void *)(v691 + 32) = 0xD000000000000022;
  *(void *)(v691 + 40) = 0x800000023AC52F30;
  *(void *)(v690 + 32) = v691;
  *(unsigned char *)(v690 + 40) = 0;
  uint64_t v692 = swift_allocObject();
  *(_OWORD *)(v692 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v692 + 32) = 84017408;
  *(unsigned char *)(v692 + 36) = 8;
  uint64_t v890 = sub_23AB60324(v692, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v689 + 16)) {
    uint64_t v888 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v888 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v693 = swift_allocObject();
  *(_OWORD *)(v693 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v693 + 32) = 3;
  uint64_t v694 = sub_23AB60324(v693, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v695.value._object = (void *)0x800000023AC52F80;
  v695.value._uint64_t countAndFlagsBits = 0xD000000000000015;
  Action.init(_:mac:)(v695, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v696 = sub_23ABBFBD4();
  char v697 = sub_23ABB8BA8();
  char v698 = sub_23ABBFBE0();
  uint64_t v699 = sub_23ABBFBE8();
  uint64_t v700 = sub_23ABBFBE8();
  *((void *)&v770 + 1) = v694;
  *(void *)&long long v770 = v888;
  char v701 = v698 & 1;
  uint64_t v702 = MEMORY[0x263F8EE78];
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD000000000000019, 0x800000023AC52F60, v690, MEMORY[0x263F8EE78], v696, v697 & 1, v701, v890, v892 + 7936, v770, v699, v700, v898, &v897, 0, 0, (uint64_t)&v893);
  uint64_t v703 = swift_allocObject();
  *(_OWORD *)(v703 + 16) = xmmword_23AC2C700;
  uint64_t v704 = swift_allocObject();
  *(_OWORD *)(v704 + 16) = xmmword_23AC2C710;
  *(void *)(v704 + 32) = 0xD00000000000004CLL;
  *(void *)(v704 + 40) = 0x800000023AC52FA0;
  *(void *)(v704 + 48) = 0xD000000000000047;
  *(void *)(v704 + 56) = 0x800000023AC52FF0;
  *(void *)(v703 + 32) = v704;
  *(unsigned char *)(v703 + 40) = 0;
  uint64_t v705 = swift_allocObject();
  *(_OWORD *)(v705 + 16) = xmmword_23AC2C720;
  *(_DWORD *)(v705 + 32) = 84017408;
  *(unsigned char *)(v705 + 36) = 8;
  uint64_t v706 = sub_23AB60324(v705, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  if (*(void *)(v702 + 16)) {
    uint64_t v707 = sub_23AB60324(MEMORY[0x263F8EE78], &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  }
  else {
    uint64_t v707 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v708 = swift_allocObject();
  *(_OWORD *)(v708 + 16) = xmmword_23AC2C700;
  *(unsigned char *)(v708 + 32) = 3;
  uint64_t v709 = sub_23AB60324(v708, &qword_268A5A350, (void (*)(void))sub_23AB60540, (uint64_t)&type metadata for VCCommand.Idiom, (void (*)(void))sub_23AB60594);
  swift_bridgeObjectRelease();
  v898[0] = 4;
  char v897 = 4;
  v710.value._object = (void *)0x800000023AC53060;
  v710.value._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  Action.init(_:mac:)(v710, (Swift::String_optional)0);
  long long v893 = v895;
  long long v894 = v896;
  uint64_t v711 = sub_23ABBFBD4();
  char v712 = sub_23ABB8BA8();
  char v713 = sub_23ABBFBE0();
  uint64_t v714 = sub_23ABBFBE8();
  uint64_t v715 = sub_23ABBFBE8();
  *(void *)&long long v771 = v707;
  *((void *)&v771 + 1) = v709;
  VCCommand.init(commandID:commandStrings:abstract:discussion:enabled:requiresConfirmation:supportedIdioms:plannedIdioms:unsupportedIdioms:visibilityEvaluations:contextEvaluations:contextSupportsInteractionLevel:contextRequiresInteractionLevel:contextRequiresOneOfAppIdentifiers:contextSpecialCaseGoBackWithAppIdentifiers:recognizerClassName:action:)(0xD00000000000001ELL, 0x800000023AC53040, v703, MEMORY[0x263F8EE78], v711, v712 & 1, v713 & 1, v706, v892 + 8088, v771, v714, v715, v898, &v897, 0, 0, (uint64_t)&v893);
  v716._uint64_t countAndFlagsBits = 0x6E6564646948;
  v716._object = (void *)0xE600000000000000;
  v717._uint64_t countAndFlagsBits = v821;
  v717._object = v820;
  VCCommandCollection.init(identifier:displayName:showInSettings:commands:)(&stru_268A62BC8, v716, v717, 0, (Swift::OpaquePointer)v892);
}

SpeechRecognitionCommandServices::VCCommandCollection *sub_23ABD3AB4()
{
  if (qword_268A62970 != -1) {
    swift_once();
  }
  return &stru_268A62BC8;
}

void CMDPFst::CMDPFst(CMDPFst *this, char a2)
{
  *(unsigned char *)this = a2;
  operator new();
}

void sub_23ABD3D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = v14[4];
  v14[4] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v14[3];
  v14[3] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v14[2];
  v14[2] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v14[1];
  v14[1] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_23ABD3EEC()
{
  MEMORY[0x23ECC24B0](v0, 0xA1C409BE6959DLL);
  JUMPOUT(0x23ABD3EE4);
}

void CMDPFst::setStart(CMDPFst *this, int __val)
{
  std::to_string(&v4, __val);
  uint64_t v3 = (*(uint64_t (**)(void, std::string *))(**((void **)this + 4) + 80))(*((void *)this + 4), &v4);
  if (v3 == -1)
  {
    uint64_t v3 = (*(int (**)(void))(**((void **)this + 1) + 176))(*((void *)this + 1));
    (*(void (**)(void, std::string *, uint64_t))(**((void **)this + 4) + 24))(*((void *)this + 4), &v4, v3);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 152))(*((void *)this + 1), v3);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_23ABD4014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CMDPFst::setFinal(CMDPFst *this, int __val, double a3)
{
  std::to_string(&v9, __val);
  uint64_t v5 = (*(uint64_t (**)(void, std::string *))(**((void **)this + 4) + 80))(*((void *)this + 4), &v9);
  if (v5 == -1)
  {
    uint64_t v5 = (*(int (**)(void))(**((void **)this + 1) + 176))(*((void *)this + 1));
    (*(void (**)(void, std::string *, uint64_t))(**((void **)this + 4) + 24))(*((void *)this + 4), &v9, v5);
  }
  uint64_t v6 = *((void *)this + 1);
  float v7 = a3;
  float v8 = v7;
  (*(void (**)(uint64_t, uint64_t, float *))(*(void *)v6 + 160))(v6, v5, &v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_23ABD414C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CMDPFst::setSymbols(CMDPFst *this)
{
  (*(void (**)(void, void))(**((void **)this + 1) + 256))(*((void *)this + 1), *((void *)this + 2));
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 1) + 264);
  return v2();
}

void CMDPFst::addArc(uint64_t a1, int __val, int a3, uint64_t a4, uint64_t a5, double a6)
{
  std::to_string(&v20, __val);
  uint64_t v11 = (*(uint64_t (**)(void, std::string *))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32), &v20);
  if (v11 == -1)
  {
    uint64_t v11 = (*(int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
    (*(void (**)(void, std::string *, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), &v20, v11);
  }
  std::to_string(&v19, a3);
  uint64_t v12 = (*(uint64_t (**)(void, std::string *))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32), &v19);
  LODWORD(v13) = v12;
  if (v12 == -1)
  {
    uint64_t v13 = (*(int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
    (*(void (**)(void, std::string *, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), &v19, v13);
  }
  int v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a4);
  int v15 = v14;
  if (*(unsigned char *)a1) {
    int v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a5);
  }
  uint64_t v16 = *(void *)(a1 + 8);
  float v17 = a6;
  v18[0] = v15;
  v18[1] = v14;
  *(float *)&v18[2] = v17;
  v18[3] = v13;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v16 + 184))(v16, v11, v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_23ABD4474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void CMDPFst::addArc(uint64_t a1, int a2, int a3, uint64_t a4, int __val, double a6)
{
  std::to_string(&v11, __val);
  CMDPFst::addArc(a1, a2, a3, a4, (uint64_t)&v11, a6);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_23ABD4538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cmdp_fst_util::compose(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 && a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 72))(a1, 0);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, 0);
    char v12 = 0;
    float v7 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
    float v8 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    fst::MergeSymbolTable(v7, v8, (const fst::SymbolTable *)&v12, v9);
  }
  uint64_t v10 = CMDPOSLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_23AB39000, v10, OS_LOG_TYPE_ERROR, "cmdp_fst_util::composeFst : null FSTs", (uint8_t *)&__p, 2u);
  }
  *a3 = 0;
}

void sub_23ABD49BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v19 = 0;
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, v6, a2, 1, v7, a3, 1);
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)__p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23ABD4C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)__p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23ABD4CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  uint64_t v4 = 0;
  v1[0] = 0;
  v1[1] = v6;
  uint64_t v1[2] = v5;
  v1[3] = &v4;
  long long v2 = 0u;
  long long v3 = 0u;
  fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t)v1);
}

void sub_23ABD4F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a13);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v27 = *(void **)(v25 - 104);
  if (v27) {
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void cmdp_fst_util::replace(uint64_t a1, void *a2)
{
  char v10 = 0;
  if (*a2 != a2[1])
  {
    uint64_t v3 = *(void *)(*a2 + 24);
    uint64_t v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
    uint64_t v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3);
    fst::MergeSymbolTable(v4, v5, (const fst::SymbolTable *)&v10, v6);
  }
  uint64_t v7 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  float v8 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  fst::MergeSymbolTable(v7, v8, (const fst::SymbolTable *)&v10, v9);
}

void sub_23ABD54BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  MEMORY[0x23ECC24B0](v21, 0xA1C409BE6959DLL);
  void *v19 = 0;
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  if (__p) {
    operator delete(__p);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t cmdp_fst_util::rmEpsilon(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    fst::TropicalWeightTpl<float>::Zero();
    fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v1);
  }
  return result;
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v1, a1);
}

void sub_23ABD5710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  fst::AutoQueue<int>::~AutoQueue((uint64_t)va);
  uint64_t v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(void *)(v5 - 80) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

int *fst::TropicalWeightTpl<float>::Zero()
{
  {
    fst::TropicalWeightTpl<float>::Zero(void)::zero = 2139095040;
  }
  return &fst::TropicalWeightTpl<float>::Zero(void)::zero;
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x23ECC22C0](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x23ECC2440](a1 + 52);
  return a1;
}

BOOL cmdp_fst_util::isEmpty(uint64_t a1)
{
  return !a1 || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == -1;
}

void cmdp_fst_util::shortestDistance(uint64_t a1)
{
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  memset(__p, 0, sizeof(__p));
  fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, (uint64_t)__p, 0);
}

void sub_23ABD5A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *fst::TropicalWeightTpl<float>::NoWeight()
{
  {
    fst::TropicalWeightTpl<float>::NoWeight(void)::no_weight = 2143289344;
  }
  return &fst::TropicalWeightTpl<float>::NoWeight(void)::no_weight;
}

void cmdp_fst_util::shortestPath(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 > 0)
  {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(buf);
    int v7 = *fst::TropicalWeightTpl<float>::Zero();
    fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  }
  uint64_t v6 = CMDPOSLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_23AB39000, v6, OS_LOG_TYPE_ERROR, "RXFstOp::copyNBestStrings : invalid n = %d, n should be > 0", buf, 8u);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_23ABD5C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  a15 = &unk_26EE2A7B0;
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v1, a1);
}

void sub_23ABD5DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  fst::AutoQueue<int>::~AutoQueue((uint64_t)va);
  uint64_t v9 = *(void **)(v7 - 104);
  if (v9)
  {
    *(void *)(v7 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, int a2)
{
  memset(__p, 0, sizeof(__p));
  fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, (uint64_t)__p, a2 == 0);
}

void sub_23ABD5EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cmdp_fst_util::pathImpl(void *a1, int a2, uint64_t a3, uint64_t *a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 24))(&v46);
  float v8 = fst::TropicalWeightTpl<float>::Zero();
  *(_DWORD *)buf = v46;
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *v8;
  v9.n128_u32[0] = v46;
  if (*(float *)&v46 != *(float *)__p)
  {
    unint64_t v10 = a4[1];
    if (v10 >= a4[2])
    {
      uint64_t v11 = std::vector<std::vector<std::pair<std::string,std::string>>>::__push_back_slow_path<std::vector<std::pair<std::string,std::string>> const&>(a4, (long long **)a3);
    }
    else
    {
      std::vector<std::vector<std::pair<std::string,std::string>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string,std::string>> const&>((uint64_t)a4, (long long **)a3);
      uint64_t v11 = v10 + 24;
    }
    a4[1] = v11;
  }
  uint64_t v12 = *(void *)(*(void *)(a1[1] + 56) + 8 * a2);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v14 = *(void *)(v12 + 32);
  if (v13 == v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)(v12 + 24);
  }
  if (v13 != v14)
  {
    unint64_t v16 = (v14 - v13) >> 4;
    if (v16 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    for (uint64_t i = (_DWORD *)(v15 + 12); *i == a2; i += 4)
    {
      std::string v19 = CMDPOSLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_23AB39000, v19, OS_LOG_TYPE_ERROR, "cmdp_fst_util::unionFst : Loop detected while computing paths", buf, 2u);
      }
LABEL_44:
      if (!--v17) {
        return;
      }
    }
    uint64_t v20 = (*(uint64_t (**)(void *, __n128))(*a1 + 96))(a1, v9);
    uint64_t v21 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
    (*(void (**)(uint8_t *__return_ptr, uint64_t, void))(*(void *)v20 + 72))(buf, v20, (int)*(i - 3));
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v21 + 72))(__p, v21, (int)*(i - 2));
    if (v45 < 0)
    {
      if (*(void *)&buf[8] != 5) {
        goto LABEL_26;
      }
      uint64_t v22 = *(uint8_t **)buf;
    }
    else
    {
      if (v45 != 5) {
        goto LABEL_26;
      }
      uint64_t v22 = buf;
    }
    int v23 = *(_DWORD *)v22;
    int v24 = v22[4];
    if (v23 != 1936745788 || v24 != 62) {
      goto LABEL_26;
    }
    if (v43 < 0)
    {
      if (__p[1] != (void *)5) {
        goto LABEL_26;
      }
      uint64_t v34 = (void **)__p[0];
    }
    else
    {
      if (v43 != 5) {
        goto LABEL_26;
      }
      uint64_t v34 = __p;
    }
    int v36 = *(_DWORD *)v34;
    int v37 = *((unsigned __int8 *)v34 + 4);
    if (v36 == 1936745788 && v37 == 62)
    {
LABEL_30:
      cmdp_fst_util::pathImpl(a1, *i, a3, a4);
      if (v45 < 0)
      {
        if (*(void *)&buf[8] != 5) {
          goto LABEL_39;
        }
        uint64_t v28 = *(uint8_t **)buf;
      }
      else
      {
        if (v45 != 5) {
          goto LABEL_39;
        }
        uint64_t v28 = buf;
      }
      int v29 = *(_DWORD *)v28;
      int v30 = v28[4];
      if (v29 != 1936745788 || v30 != 62) {
        goto LABEL_39;
      }
      char v33 = v43;
      if (v43 < 0)
      {
        if (__p[1] == (void *)5)
        {
          uint64_t v35 = (void **)__p[0];
LABEL_62:
          int v39 = *(_DWORD *)v35;
          int v40 = *((unsigned __int8 *)v35 + 4);
          if (v39 == 1936745788 && v40 == 62) {
            goto LABEL_40;
          }
        }
      }
      else if (v43 == 5)
      {
        uint64_t v35 = __p;
        goto LABEL_62;
      }
LABEL_39:
      uint64_t v32 = *(void *)(a3 + 8) - 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a3 + 16, v32);
      *(void *)(a3 + 8) = v32;
      char v33 = v43;
LABEL_40:
      if (v33 < 0) {
        operator delete(__p[0]);
      }
      if (v45 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_44;
    }
LABEL_26:
    unint64_t v26 = *(void *)(a3 + 8);
    if (v26 >= *(void *)(a3 + 16))
    {
      uint64_t v27 = std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string&,std::string&>((uint64_t *)a3, (long long *)buf, (long long *)__p);
    }
    else
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(*(std::string **)(a3 + 8), (long long *)buf, (long long *)__p);
      uint64_t v27 = v26 + 48;
      *(void *)(a3 + 8) = v26 + 48;
    }
    *(void *)(a3 + 8) = v27;
    goto LABEL_30;
  }
}

void sub_23ABD6288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

void *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(void *a1)
{
  *a1 = &unk_26EE2A7B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23ECC2300](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x23ECC2310](v13);
  return a1;
}

void sub_23ABD6508(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x23ECC2310](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x23ABD64E8);
}

void sub_23ABD655C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_23ABD66DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

std::string *std::vector<std::vector<std::pair<std::string,std::string>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string,std::string>> const&>(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  unint64_t result = std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(void *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_23ABD6890(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<std::string,std::string>>>::__push_back_slow_path<std::vector<std::pair<std::string,std::string>> const&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<std::pair<std::string,std::string>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::~__split_buffer(v14);
  return v12;
}

void sub_23ABD69A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_23ABD6A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23ABD6B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  unint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_23ABD6C00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::vector<std::vector<std::pair<std::string,std::string>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::string,std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::pair<std::string,std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string&,std::string&>(uint64_t *a1, long long *a2, long long *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v11) {
    char v12 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  __v.__first_ = v12;
  __v.__begin_ = v12 + v5;
  __v.__end_cap_.__value_ = &v12[v11];
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&__v.__begin_->first, a2, a3);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  return v13;
}

void sub_23ABD706C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_23ABD70FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

float fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<S0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *(float **)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2);
  float result = *v3;
  *a3 = *(_DWORD *)v3;
  return result;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *__p[2];
  char v10;
  BOOL v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_23ABD7540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23ABD7640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitMatcher()
{
  return 0;
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      LogMessage::LogMessage(&v12, (uint64_t)__p);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"TestProperties: stored FST properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (stored: props1, computed: props2)", 35);
      LogMessage::~LogMessage((LogMessage *)&v12);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 1);
  }
}

void sub_23ABD7800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (a4)
  {
    uint64_t v10 = v8 & 0xFFFFFFFF0000 | (2 * v8) & 0xAAAAAAAA0000 | (v8 >> 1) & 0x555555550000 | 7;
    if ((a2 & ~v10) == 0)
    {
      if (a3) {
        *a3 = v10;
      }
      return v9;
    }
  }
  unint64_t v9 = v8 & 7;
  uint64_t v47 = 0;
  unint64_t v48 = v9;
  char v45 = 0;
  uint64_t v46 = 0;
  uint64_t v11 = a2 & 0xCF3C00000000;
  if ((a2 & 0xCF3C00000000) != 0)
  {
    long long v40 = (unint64_t)&v45;
    *(void *)&long long v41 = 0;
    *((void *)&v41 + 1) = &v48;
    long long v43 = 0u;
    long long v44 = 0u;
    fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t)&v40);
  }
  if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
    goto LABEL_92;
  }
  uint64_t v34 = a2 & 0xC0000;
  uint64_t v35 = 0;
  uint64_t v12 = 0x10425A810000;
  if ((a2 & 0xC0000) != 0) {
    uint64_t v12 = 0x10425A850000;
  }
  unint64_t v13 = v9 | v12;
  uint64_t v33 = a2 & 0x300000;
  if ((a2 & 0x300000) != 0) {
    v13 |= 0x100000uLL;
  }
  unint64_t v48 = v13;
  uint64_t v38 = 0;
  int v39 = 0;
  int v36 = 0;
  unsigned int v37 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v35);
  int v14 = 0;
LABEL_13:
  if (!v35)
  {
    if ((int)v37 >= v36) {
      goto LABEL_84;
    }
    goto LABEL_18;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v35 + 16))(v35))
  {
    if (v35)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v35 + 24))();
LABEL_19:
      if (v34) {
        operator new();
      }
      if (v33) {
        operator new();
      }
      unint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v40);
      char v16 = 1;
      while ((void)v40)
      {
        if ((*(unsigned int (**)(void))(*(void *)v40 + 16))(v40))
        {
          if ((void)v40)
          {
            (*(void (**)(void))(*(void *)v40 + 8))();
            goto LABEL_71;
          }
LABEL_69:
          if (*((void *)&v41 + 1)) {
            --**((_DWORD **)&v41 + 1);
          }
LABEL_71:
          if (v14 > 0) {
            unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v49, a1, v15);
          uint64_t v27 = fst::TropicalWeightTpl<float>::Zero();
          LODWORD(v40) = v49;
          HIDWORD(v49) = 0;
          HIDWORD(v49) = *v27;
          if (*(float *)&v49 == *((float *)&v49 + 1))
          {
            if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 32))(a1, v15, *(float *)&v49) != 1) {
              unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            }
          }
          else
          {
            uint64_t v28 = fst::TropicalWeightTpl<float>::One();
            LODWORD(v40) = v49;
            HIDWORD(v49) = 0;
            HIDWORD(v49) = *v28;
            v29.n128_u32[0] = v49;
            if (*(float *)&v49 != *((float *)&v49 + 1)) {
              unint64_t v48 = v48 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
            }
            ++v14;
          }
          if (v35) {
            (*(void (**)(uint64_t, __n128))(*(void *)v35 + 32))(v35, v29);
          }
          else {
            ++v37;
          }
          goto LABEL_13;
        }
        if (!(void)v40) {
          goto LABEL_29;
        }
        uint64_t v17 = (int *)(*(uint64_t (**)(void))(*(void *)v40 + 24))();
LABEL_30:
        if (v39 && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v39, v17)) {
          unint64_t v48 = v48 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
        }
        if (v38
          && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v38, v17 + 1))
        {
          unint64_t v48 = v48 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
        }
        int v18 = *v17;
        int v19 = *v17;
        if (*v17 != v17[1])
        {
          unint64_t v48 = v48 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
          int v19 = v17[1];
        }
        if (v18 | v19)
        {
          if (v18)
          {
            if (!v19) {
              goto LABEL_46;
            }
            goto LABEL_42;
          }
          unint64_t v20 = v48;
        }
        else
        {
          unint64_t v20 = v48 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
        }
        unint64_t v48 = v20 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
        if (!v19)
        {
LABEL_46:
          unint64_t v48 = v48 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if (v16) {
            goto LABEL_51;
          }
          goto LABEL_47;
        }
LABEL_42:
        if (v16) {
          goto LABEL_51;
        }
LABEL_47:
        if (v18 < (int)v11) {
          unint64_t v48 = v48 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
        }
        if (v19 < SHIDWORD(v11)) {
          unint64_t v48 = v48 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
        }
LABEL_51:
        uint64_t v21 = fst::TropicalWeightTpl<float>::One();
        HIDWORD(v49) = 0;
        HIDWORD(v49) = v17[2];
        LODWORD(v49) = 0;
        LODWORD(v49) = *v21;
        v22.n128_u32[0] = HIDWORD(v49);
        if (*((float *)&v49 + 1) != *(float *)&v49)
        {
          int v23 = fst::TropicalWeightTpl<float>::Zero();
          HIDWORD(v49) = 0;
          HIDWORD(v49) = v17[2];
          LODWORD(v49) = 0;
          LODWORD(v49) = *v23;
          v22.n128_u32[0] = HIDWORD(v49);
          if (*((float *)&v49 + 1) != *(float *)&v49)
          {
            unint64_t v24 = v48;
            unint64_t v25 = v48 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
            unint64_t v48 = v25;
            if ((v24 & 0x800000000000) != 0 && v45[(int)v15] == v45[v17[3]]) {
              unint64_t v48 = v25 & 0xFFFF3FFDFFFFFFFFLL | 0x400000000000;
            }
          }
        }
        int v26 = v17[3];
        if (v26 <= (int)v15) {
          unint64_t v48 = v48 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
        }
        if (v26 != v15 + 1) {
          unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        }
        uint64_t v11 = *(void *)v17;
        if (v39) {
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v39, v17, v17);
        }
        if (v38) {
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v38, v17 + 1, v17 + 1);
        }
        if ((void)v40)
        {
          (*(void (**)(void, __n128))(*(void *)v40 + 32))(v40, v22);
          char v16 = 0;
        }
        else
        {
          char v16 = 0;
          ++v42;
        }
      }
      if (v42 >= (unint64_t)v41) {
        goto LABEL_69;
      }
LABEL_29:
      uint64_t v17 = (int *)(*((void *)&v40 + 1) + 16 * v42);
      goto LABEL_30;
    }
LABEL_18:
    uint64_t v15 = v37;
    goto LABEL_19;
  }
  if (v35) {
    (*(void (**)(void))(*(void *)v35 + 8))();
  }
LABEL_84:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != -1
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
  }
  if (v38)
  {
    uint64_t v30 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v38);
    MEMORY[0x23ECC24B0](v30, 0x10A0C408EF24B1CLL);
  }
  if (v39)
  {
    uint64_t v31 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v39);
    MEMORY[0x23ECC24B0](v31, 0x10A0C408EF24B1CLL);
  }
  unint64_t v9 = v48;
LABEL_92:
  if (a3) {
    *a3 = v9 & 0xFFFFFFFF0000 | (2 * v9) & 0xAAAAAAAA0000 | (v9 >> 1) & 0x555555550000 | 7;
  }
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  return v9;
}

void sub_23ABD80F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va1, 0);
  unint64_t v9 = *(void **)(v7 - 128);
  if (v9)
  {
    *(void *)(v7 - 120) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

BOOL fst::CompatProperties(unint64_t this, unint64_t a2)
{
  unint64_t v2 = (((2 * a2) & 0xAAAAAAAA0000 | a2 & 0xFFFFFFFF0000 | (a2 >> 1) & 0x555555550000) & ((this >> 1) & 0x555555550000 | (2 * this) & 0xAAAAAAAA0000 | this) | 7) & (a2 ^ this);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      if ((v6 & v2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        LogMessage::LogMessage(&v20, (uint64_t)__p);
        uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"CompatProperties: Mismatch: ", 28);
        size_t v8 = strlen(fst::PropertyNames[v5]);
        unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)fst::PropertyNames[v5], v8);
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": props1 = ", 11);
        if ((v6 & this) != 0) {
          uint64_t v11 = "true";
        }
        else {
          uint64_t v11 = "false";
        }
        if ((v6 & this) != 0) {
          uint64_t v12 = 4;
        }
        else {
          uint64_t v12 = 5;
        }
        unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
        int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", props2 = ", 11);
        if ((v6 & a2) != 0) {
          uint64_t v15 = "true";
        }
        else {
          uint64_t v15 = "false";
        }
        if ((v6 & a2) != 0) {
          uint64_t v16 = 4;
        }
        else {
          uint64_t v16 = 5;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        LogMessage::~LogMessage((LogMessage *)&v20);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 *= 2;
      ++v5;
    }
    while (v5 != 64);
  }
  return v2 == 0;
}

void sub_23ABD8358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(void *a1)
{
  uint64_t v4 = a1[10];
  unint64_t v2 = a1 + 10;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = (void **)a1[9];
  a1[9] = 0;
  if (v5) {
    std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100]((uint64_t)(a1 + 9), v5);
  }
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)(a1 + 8), v6);
  }
  uint64_t v7 = a1[7];
  a1[7] = 0;
  if (v7) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)(a1 + 7), v7);
  }
  return a1;
}

uint64_t std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result);
    JUMPOUT(0x23ECC24B0);
  }
  return result;
}

int *fst::TropicalWeightTpl<float>::One()
{
  {
    fst::TropicalWeightTpl<float>::One(void)::one = 0;
  }
  return &fst::TropicalWeightTpl<float>::One(void)::one;
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_23ABD8D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  __n128 v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(uint64_t a1)
{
  if (*(void *)a1)
  {
    unint64_t v2 = **(_DWORD ***)a1;
    uint64_t v3 = *(void *)(*(void *)a1 + 8) - (void)v2;
    if (v3)
    {
      unint64_t v4 = v3 >> 2;
      if (v4 <= 1) {
        unint64_t v4 = 1;
      }
      do
      {
        _DWORD *v2 = *(_DWORD *)(a1 + 48) + ~*v2;
        ++v2;
        --v4;
      }
      while (v4);
    }
  }
  if (*(unsigned char *)(a1 + 52))
  {
    int v5 = *(void ***)(a1 + 16);
    if (v5)
    {
      if (*v5) {
        operator delete(*v5);
      }
      MEMORY[0x23ECC24B0](v5, 0x1010C40113C0ABBLL);
    }
  }
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v6) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](a1 + 56, v6);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v7) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](a1 + 64, v7);
  }
  size_t v8 = *(void ***)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v8) {
    std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100](a1 + 72, v8);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v10 = (void *)(a1 + 80);
  uint64_t v9 = v11;
  *uint64_t v10 = 0;
  if (v11)
  {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)v10, v9);
  }
}

uint64_t fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1, 0))
  {
    unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 136);
    return v2(a1);
  }
  uint64_t v5 = 0;
  int v6 = 0;
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_23ABD9260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6 = a1[10];
  int v7 = *(_DWORD **)(v6 + 8);
  unint64_t v8 = *(void *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = *(_DWORD **)v6;
    uint64_t v11 = ((uint64_t)v7 - *(void *)v6) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      uint64_t v10 = *(_DWORD **)v6;
      int v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = a2;
    uint64_t v9 = v16 + 4;
    while (v7 != v10)
    {
      int v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)uint64_t v6 = v16;
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *int v7 = a2;
    uint64_t v9 = v7 + 1;
  }
  *(void *)(v6 + 8) = v9;
  unint64_t v19 = a2;
  uint64_t v20 = *(void *)a1[7];
  if (a2 >= (unint64_t)((*(void *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      uint64_t v21 = *a1;
      if (*a1)
      {
        unint64_t v22 = *(void *)(v21 + 16);
        int v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          unint64_t v25 = *(_DWORD **)v21;
          uint64_t v26 = ((uint64_t)v23 - *(void *)v21) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            goto LABEL_78;
          }
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            unint64_t v25 = *(_DWORD **)v21;
            int v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            uint64_t v30 = 0;
          }
          uint64_t v31 = &v30[4 * v26];
          *(_DWORD *)uint64_t v31 = -1;
          unint64_t v24 = v31 + 4;
          while (v23 != v25)
          {
            int v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(void *)uint64_t v21 = v31;
          *(void *)(v21 + 8) = v24;
          *(void *)(v21 + 16) = &v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          _DWORD *v23 = -1;
          unint64_t v24 = v23 + 1;
        }
        *(void *)(v21 + 8) = v24;
      }
      uint64_t v33 = a1[1];
      if (v33)
      {
        char v67 = 0;
        std::vector<BOOL>::push_back(v33, &v67);
      }
      uint64_t v34 = a1[2];
      char v66 = 0;
      std::vector<BOOL>::push_back(v34, &v66);
      uint64_t v35 = a1[7];
      int v36 = *(_DWORD **)(v35 + 8);
      unint64_t v37 = *(void *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        int v39 = *(_DWORD **)v35;
        uint64_t v40 = ((uint64_t)v36 - *(void *)v35) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_78;
        }
        uint64_t v42 = v37 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          long long v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          int v39 = *(_DWORD **)v35;
          int v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          long long v44 = 0;
        }
        char v45 = &v44[4 * v40];
        *(_DWORD *)char v45 = -1;
        uint64_t v38 = v45 + 4;
        while (v36 != v39)
        {
          int v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(void *)uint64_t v35 = v45;
        *(void *)(v35 + 8) = v38;
        *(void *)(v35 + 16) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *int v36 = -1;
        uint64_t v38 = v36 + 1;
      }
      *(void *)(v35 + 8) = v38;
      uint64_t v47 = a1[8];
      unint64_t v48 = *(_DWORD **)(v47 + 8);
      unint64_t v49 = *(void *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        uint64_t v51 = *(_DWORD **)v47;
        uint64_t v52 = ((uint64_t)v48 - *(void *)v47) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
LABEL_78:
        }
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        uint64_t v54 = v49 - (void)v51;
        if (v54 >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          char v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          uint64_t v51 = *(_DWORD **)v47;
          unint64_t v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          char v56 = 0;
        }
        char v57 = &v56[4 * v52];
        *(_DWORD *)char v57 = -1;
        uint64_t v50 = v57 + 4;
        while (v48 != v51)
        {
          int v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(void *)uint64_t v47 = v57;
        *(void *)(v47 + 8) = v50;
        *(void *)(v47 + 16) = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *unint64_t v48 = -1;
        uint64_t v50 = v48 + 1;
      }
      *(void *)(v47 + 8) = v50;
      uint64_t v59 = a1[9];
      char v65 = 0;
      std::vector<BOOL>::push_back(v59, &v65);
      uint64_t v20 = *(void *)a1[7];
    }
    while (v19 >= (*(void *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  uint64_t v60 = (void *)a1[9];
  *(_DWORD *)(*(void *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  unint64_t v61 = v19 >> 6;
  uint64_t v62 = 1 << v19;
  *(void *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  uint64_t v63 = (void *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) |= v62;
    }
  }
  else
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) &= ~v62;
    }
    *(void *)a1[3] = *(void *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
  return 1;
}

int *fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 24))(&v25);
  uint64_t result = fst::TropicalWeightTpl<float>::Zero();
  int v26 = v25;
  HIDWORD(v25) = 0;
  HIDWORD(v25) = *result;
  if (*(float *)&v25 != *((float *)&v25 + 1)) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) == *(_DWORD *)(**(void **)(a1 + 64) + 4 * a2))
  {
    char v7 = 0;
    unint64_t v8 = *(uint64_t **)(a1 + 80);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1] - *v8;
    uint64_t v11 = **(void **)(a1 + 16);
    unint64_t v12 = (int *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + v9 - 4);
    do
    {
      unint64_t v13 = *v12--;
      v7 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
    }
    while (v13 != a2);
    unint64_t v14 = *(void **)a1;
    do
    {
      uint64_t v15 = *(void *)(a1 + 80);
      uint64_t v16 = *(void *)(v15 + 8);
      unint64_t v19 = *(int *)(v16 - 4);
      uint64_t v17 = v16 - 4;
      unint64_t v18 = v19;
      if (v14) {
        *(_DWORD *)(*v14 + 4 * v18) = *(_DWORD *)(a1 + 48);
      }
      unint64_t v20 = v18 >> 6;
      uint64_t v21 = 1 << v18;
      if (v7) {
        *(void *)(v11 + 8 * v20) |= v21;
      }
      uint64_t result = **(int ***)(a1 + 72);
      *(void *)&result[2 * v20] &= ~v21;
      *(void *)(v15 + 8) = v17;
    }
    while (v18 != a2);
    if ((v7 & 1) == 0) {
      **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
    }
    ++*(_DWORD *)(a1 + 48);
  }
  if (a3 != -1)
  {
    uint64_t v22 = **(void **)(a1 + 16);
    if ((*(void *)(v22 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v22 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    uint64_t v23 = **(void **)(a1 + 64);
    int v24 = *(_DWORD *)(v23 + 4 * a2);
    if (v24 < *(_DWORD *)(v23 + 4 * a3)) {
      *(_DWORD *)(v23 + 4 * a3) = v24;
    }
  }
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  char v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *char v7 = v8;
  if (v3 == *(_DWORD *)(a1 + 40)) {
    *char v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

void *fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void std::default_delete<std::vector<int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x23ECC24B0);
  }
}

void std::default_delete<std::vector<BOOL>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    if (*a2) {
      operator delete(*a2);
    }
    JUMPOUT(0x23ECC24B0);
  }
}

void fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<48ul>::Size()
{
  return 48;
}

void *fst::internal::MemoryPoolImpl<48ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<48ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<56ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2A9C0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABD9CE4(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<56ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<56ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<56ul>::Size()
{
  return 56;
}

void std::__list_imp<std::unique_ptr<char []>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    unint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      int v5 = (uint64_t *)v2[1];
      std::__list_imp<std::unique_ptr<char []>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      unint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::unique_ptr<char []>>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
  uint64_t v3 = __p[2];
  __p[2] = 0;
  if (v3) {
    MEMORY[0x23ECC2490](v3, 0x1000C8077774924);
  }
  operator delete(__p);
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      unint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    uint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--unint64_t v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  char v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23ABDA2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t fst::internal::MemoryArenaImpl<56ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 56 * a2;
  unint64_t v4 = a1[1];
  if (224 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_23ABDA9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_23ABDB0B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

BOOL *LogMessage::LogMessage(BOOL *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    if (*(void *)(a2 + 8) != 5)
    {
LABEL_12:
      BOOL v8 = 0;
      goto LABEL_13;
    }
    uint64_t v4 = *(void *)a2;
  }
  else
  {
    uint64_t v4 = a2;
    if (v3 != 5) {
      goto LABEL_12;
    }
  }
  int v5 = *(_DWORD *)v4;
  int v6 = *(unsigned __int8 *)(v4 + 4);
  BOOL v8 = v5 == 1096040774 && v6 == 76;
LABEL_13:
  *a1 = v8;
  uint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v10 = v9;
  }
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
  return a1;
}

void LogMessage::~LogMessage(LogMessage *this)
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
  int8x8_t v2 = std::locale::use_facet(&v3, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v3);
  std::ostream::put();
  std::ostream::flush();
  if (*(unsigned char *)this) {
    exit(1);
  }
}

void sub_23ABDB488(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int8x8_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    std::locale v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

std::string *std::allocate_shared[abi:ne180100]<fst::internal::SymbolTableImpl,std::allocator<fst::internal::SymbolTableImpl>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (std::string *)operator new(0x130uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<fst::internal::SymbolTableImpl>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_23ABDB590(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<fst::internal::SymbolTableImpl>,0>(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26EE2AA10;
  fst::internal::SymbolTableImpl::SymbolTableImpl(a1 + 1, a2);
  return a1;
}

void sub_23ABDB5EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2AA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2AA10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23ECC24B0);
}

void std::__shared_ptr_emplace<fst::internal::SymbolTableImpl>::__on_zero_shared(uint64_t a1)
{
}

std::string *fst::internal::SymbolTableImpl::SymbolTableImpl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2]);
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = (std::string::size_type)&this[6];
  this[6].__r_.__value_.__s.__data_[16] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  this[9].__r_.__value_.__r.__words[0] = 850045863;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[2] = 0u;
  this[11].__r_.__value_.__l.__size_ = 0;
  return this;
}

void sub_23ABDB71C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void fst::internal::SymbolTableImpl::~SymbolTableImpl(fst::internal::SymbolTableImpl *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(void *a1)
{
  *a1 = &unk_26EE2A7B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x23ECC24B0);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  int v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 56) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 64) - *(void *)(*(void *)(a1 + 8) + 56)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,void>(a2, &v7);
    uint64_t v4 = v7;
    uint64_t v3 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return a1;
}

unint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 80) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  *(void *)(v4 + 8) = result & 0xCCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

float fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(v6, a2, (float *)&v8);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a3 & 4) != (a3 & 4 & a2)) {
    fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 16))(v2) & 0xEAFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x806A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && !*(void *)(v2 + 8))
  {
    uint64_t v10 = *(void **)(a1 + 8);
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v10);
    uint64_t result = (*(uint64_t (**)(void *))(*v10 + 16))(v10);
    v10[1] = (*((_DWORD *)v10 + 2) | result) & 4 | 0x956A5A950003;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v4 = *(void *)(v3 + 48);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v11);
    uint64_t v7 = v11;
    uint64_t v6 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v6;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(*(void *)(a1 + 8), v5);
    return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(*(void *)(a1 + 8), v4);
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(*(void **)(v6[7] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 16))(v6);
  v6[1] = v6[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(v4[7] + 8 * a2);
  v5[1] = 0;
  uint64_t v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 56);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(v4, a2);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitMutableArcIterator()
{
}

void sub_23ABDC0D0(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)long long v31 = 0u;
  *(_OWORD *)long long v32 = 0u;
  uint64_t v6 = -1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = -1;
  uint64_t v35 = (*(int (**)(void *))(*a1 + 16))(a1);
  uint64_t v36 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 1, 0)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(unsigned char *)(a3 + 28) == 0;
  }
  if (!v7)
  {
    uint64_t v6 = 0;
LABEL_6:
    int v8 = 0;
    uint64_t v36 = (int)fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1);
    goto LABEL_9;
  }
  uint64_t v9 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v9[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v9 + 5) + 32))(__p);
    uint64_t v6 = v39;
    if (v39 != -1) {
      goto LABEL_6;
    }
  }
  int v8 = 1;
LABEL_9:
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v11 = v10 | 3;
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v11, (uint64_t)&v30 + 4);
  uint64_t v29 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v12 = *(void *)(a1[1] + 64) - *(void *)(a1[1] + 56);
  unint64_t v13 = v12 >> 3;
  if ((int)(v12 >> 3) < 1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = (v12 >> 3);
    do
    {
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 24))(&v30, a1, v14);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = v30;
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, v14);
      std::ostream::write();
      uint64_t v16 = *(void *)(*(void *)(a1[1] + 56) + 8 * v14);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      if (v17 == v18) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *(void *)(v16 + 24);
      }
      if (v17 != v18)
      {
        unint64_t v20 = (v18 - v17) >> 4;
        if (v20 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v20;
        }
        uint64_t v22 = (_DWORD *)(v19 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v22;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v22[1];
          std::ostream::write();
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"VectorFst::Write: Write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_33:
    LogMessage::~LogMessage((LogMessage *)&v30);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_36;
  }
  if (!v8)
  {
    if (v36 == v13)
    {
      uint64_t updated = 1;
      goto LABEL_36;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_33;
  }
  uint64_t v36 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v11, (uint64_t)&v30 + 4, v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_36:
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(v31[0]);
  }
  return updated;
}

void sub_23ABDC5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    unint64_t v13 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 144))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 144);
    return v22();
  }
  return result;
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  MEMORY[0x23ECC2300](v26);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long __p = 0u;
    long long v29 = 0u;
    uint64_t v36 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v27);
    if (v27[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x23ECC2310](v26);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v22 = *(char *)(a3 + 23);
      if (v22 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v22 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x23ECC2300](v27, a2);
      uint64_t v23 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v23[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v23 + 5) + 32))(&__p);
        if (v36 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x23ECC2310](v27);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v24 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
  LogMessage::~LogMessage((LogMessage *)v27);
  if (SBYTE7(v29) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_23ABDCBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void fst::FstHeader::~FstHeader(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type(void)::type;
}

void sub_23ABDCD70(_Unwind_Exception *a1)
{
}

uint64_t fst::TropicalWeightTpl<float>::Type()
{
  {
    operator new();
  }
  return fst::TropicalWeightTpl<float>::Type(void)::type;
}

void sub_23ABDCE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x23ECC24B0](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFile(uint64_t a1, uint64_t a2)
{
  v28[19] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::ofstream::basic_ofstream((uint64_t *)&v22);
    if ((v27[*(void *)(v22.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage(&v21, (uint64_t)&__p);
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write: Can't open file: ", 29);
      int v6 = *(char *)(a2 + 23);
      if (v6 >= 0) {
        BOOL v7 = (const std::string::value_type *)a2;
      }
      else {
        BOOL v7 = *(const std::string::value_type **)a2;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      goto LABEL_31;
    }
    char v10 = FLAGS_fst_align;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    __int16 v17 = 257;
    char v18 = 1;
    char v19 = v10;
    char v20 = 0;
    char v12 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)a1 + 80))(a1, &v22, &__p);
    char v13 = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v13) {
        goto LABEL_23;
      }
    }
    else if (v12)
    {
LABEL_23:
      uint64_t v11 = 1;
LABEL_34:
      v22.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
      *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words
                                + *(void *)(v22.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                                  + 24);
      MEMORY[0x23ECC22C0](&v22.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x23ECC2440](v28);
      return v11;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage(&v21, (uint64_t)&__p);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write failed: ", 19);
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      BOOL v7 = (const std::string::value_type *)a2;
    }
    else {
      BOOL v7 = *(const std::string::value_type **)a2;
    }
    if (v14 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
LABEL_31:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    LogMessage::~LogMessage((LogMessage *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = 0;
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v9 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v22 = __p;
  }
  __int16 v23 = 257;
  char v24 = 1;
  char v25 = v9;
  char v26 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, std::string *))(*(void *)a1 + 80))(a1, MEMORY[0x263F8C100], &v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_23ABDD234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  int v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x23ECC22B0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_23ABDD450(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x23ECC2440](v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_23ABDD4D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2AE20;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_23ABDD52C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2AE20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2AE20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26EE2AF10;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = (void *)(a1 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)a1 = &unk_26EE2AE70;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  std::string::operator=(v4, (const std::string *)__p);
  if (SBYTE7(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 56), v8);
  }
  uint64_t v17 = 0;
  int v18 = 0;
  unsigned int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 112))(a2, &v17);
  while (1)
  {
    if (!v17)
    {
      if ((int)v19 >= v18) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v19;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      break;
    }
    if (!v17) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v17 + 24))();
LABEL_12:
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState((void *)a1);
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&v16, a2, v9);
    **(_DWORD **)(*v5 + 8 * (int)v9) = v16;
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    unint64_t v15 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v14 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 120))(a2, v9, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v15 >= (unint64_t)v14) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (char *)__p[1] + 16 * v15;
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 16))(__p[0])) {
        break;
      }
      if (!__p[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p[0] + 24))();
LABEL_19:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(void *)__p[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (*((void *)&v14 + 1)) {
      --**((_DWORD **)&v14 + 1);
    }
LABEL_26:
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v17) {
    (*(void (**)(void))(*(void *)v17 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0xFFFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_23ABDDAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v3 = fst::TropicalWeightTpl<float>::Zero();
  unint64_t v4 = a1[9];
  *(_DWORD *)uint64_t v2 = *v3;
  *((void *)v2 + 5) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  uint64_t v5 = (void *)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[7];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 9), v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = &v12[8 * v8];
    long long v14 = &v12[8 * v11];
    *(void *)char v13 = v2;
    uint64_t v6 = v13 + 8;
    int v16 = (char *)a1[7];
    unint64_t v15 = (char *)a1[8];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      unint64_t v15 = (char *)a1[7];
    }
    a1[7] = v13;
    a1[8] = v6;
    a1[9] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = v2;
    uint64_t v6 = v5 + 1;
  }
  a1[8] = v6;
  return (((unint64_t)v6 - a1[7]) >> 3) - 1;
}

uint64_t fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_26EE2AEE0;
  uint64_t v2 = (void **)a1[8];
  if (v2 != (void **)a1[7])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[7];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[7];
    }
    while (v3 < (uint64_t)(a1[8] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl((uint64_t)a1);
}

void fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstImpl(void *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2AF10;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    char v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    uint64_t v10 = (char *)__p + 16 * v6;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_23ABDE140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v2 + v5 - 4);
      v5 -= 16;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  void *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[1];
  }
  if (!a2[1]) {
    ++a1[2];
  }
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(a1 + 3, (uint64_t)a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(_DWORD *)(v3 + 8) = a2[2];
    *(_DWORD *)(v3 + 12) = a2[3];
    uint64_t result = v3 + 16;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v7, v9);
  uint64_t v11 = &v10[16 * v4];
  std::string __p = v10;
  int v16 = v11;
  int v18 = &v10[16 * v12];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  uint64_t v17 = v11 + 16;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    v17 += (v16 - v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_23ABDE3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(void *__p)
{
  if (__p)
  {
    uint64_t v2 = (void *)__p[3];
    if (v2)
    {
      __p[4] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2 || *(void *)(v2 + 8))
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,void>(a1, &v6);
    uint64_t v4 = v6;
    uint64_t v3 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_23ABDE4EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2AE20;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_23ABDE548(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

float fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(void *a1, int a2, float *a3)
{
  int v9 = **(_DWORD **)(a1[7] + 8 * a2);
  unint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v7 = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v6, (float *)&v9, a3);
  float result = *a3;
  **(float **)(a1[7] + 8 * a2) = *a3;
  a1[1] = a1[1] & 4 | v7;
  return result;
}

uint64_t fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(unint64_t a1, float *a2, float *a3)
{
  if (*a2 != *(float *)fst::TropicalWeightTpl<float>::Zero() && *a2 != *(float *)fst::TropicalWeightTpl<float>::One()) {
    a1 &= ~0x100000000uLL;
  }
  if (*a3 != *(float *)fst::TropicalWeightTpl<float>::Zero() && *a3 != *(float *)fst::TropicalWeightTpl<float>::One()) {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0xC3FFFFFF0007;
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[7] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[7] + 8 * a2) + 24)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v8, a2, a3, v7);
  int v9 = *(void **)(a1[7] + 8 * a2);
  return fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v6 = *a3;
  int v7 = *((_DWORD *)a3 + 1);
  unint64_t v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v7) {
    unint64_t v8 = a1;
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7) {
    unint64_t v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v6 == 0.0) {
    unint64_t v8 = v9;
  }
  if (v7) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 <= SLODWORD(v6)) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v7) {
      unint64_t v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  if (a3[2] != *(float *)fst::TropicalWeightTpl<float>::Zero()
    && a3[2] != *(float *)fst::TropicalWeightTpl<float>::One())
  {
    unint64_t v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 3) <= a2) {
    unint64_t v12 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  else {
    unint64_t v12 = v10;
  }
  if ((v12 & 0x4000000000) != 0) {
    return v12 & 0x45D7FFEB0007 | 0x2800000000;
  }
  else {
    return v12 & 0x45D7FFEB0007;
  }
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 56);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v36, v5, &__x);
  float v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v36.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v36.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v36.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 56);
    }
    while (v12 < (*(void *)(a1 + 64) - v11) >> 3);
  }
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v21 = v18 - v17;
      BOOL v20 = v18 == v17;
      if (v18 == v17) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)(v16 + 24);
      }
      if (v20)
      {
        int64x2_t v34 = *(int64x2_t *)(v16 + 8);
        uint64_t v24 = 0;
        uint64_t v31 = v21 >> 4;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
        char v25 = (int *)(v22 + 12);
        do
        {
          int v26 = v36.__begin_[*v25];
          if (v26 == -1)
          {
            uint64_t v28 = *(void *)(v25 - 3);
            v29.i64[0] = v28;
            v29.i64[1] = HIDWORD(v28);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v29));
          }
          else
          {
            *char v25 = v26;
            if (v23 != v24)
            {
              uint64_t v27 = v22 + 16 * v24;
              *(void *)uint64_t v27 = *(void *)(v25 - 3);
              *(_DWORD *)(v27 + 8) = *(v25 - 1);
              *(_DWORD *)(v27 + 12) = v26;
              uint64_t v14 = *v4;
            }
            ++v24;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v23;
          uint64_t v30 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v25 += 4;
        }
        while (v23 < v30 >> 4);
        int64x2_t v34 = v19;
        uint64_t v31 = v30 >> 4;
      }
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs((void *)v16, v31 - v24);
      uint64_t v14 = *(void *)(a1 + 56);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v34;
    }
    while (v15 < (*(void *)(a1 + 64) - v14) >> 3);
  }
  uint64_t v32 = *(int *)(a1 + 80);
  if (v32 == -1)
  {
    long long v33 = v36.__begin_;
    if (!v36.__begin_) {
      return;
    }
  }
  else
  {
    long long v33 = v36.__begin_;
    *(_DWORD *)(a1 + 80) = v36.__begin_[v32];
  }
  v36.__end_ = v33;
  operator delete(v33);
}

void sub_23ABDEAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append((void **)a1, a2 - v2);
  }
}

void *fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result[4];
    uint64_t v3 = -16 * a2;
    uint64_t v4 = (_DWORD *)(v2 - 16);
    std::vector<int>::size_type v5 = (_DWORD *)(v2 - 16);
    do
    {
      int v6 = *v5;
      v5 -= 4;
      if (!v6) {
        --result[1];
      }
      if (!v4[1]) {
        --result[2];
      }
      uint64_t v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_23ABDEBFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  std::vector<int>::size_type v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    unint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *_ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  float result = _ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEEC2B8ne180100IJESD_Li0EEESD_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_23ABDEDA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEEC2B8ne180100IJESD_Li0EEESD_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2AE20;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl((uint64_t)(a1 + 3));
  return a1;
}

void sub_23ABDEE04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2AF10;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)a1 = &unk_26EE2AE70;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x956A5A950003;
  return a1;
}

void sub_23ABDEEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 != *(void *)(a1 + 56))
  {
    unint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 56);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)(v2 + 8 * v3++));
      uint64_t v2 = *(void *)(a1 + 56);
    }
    while (v3 < (*(void *)(a1 + 64) - v2) >> 3);
  }
  *(void *)(a1 + 64) = v2;
  *(_DWORD *)(a1 + 80) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MutableArcIterator()
{
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Done(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Position(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Reset(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Seek(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Flags()
{
  return 15;
}

int *fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24);
  int v6 = (int *)(v5 + 16 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (v7 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      unint64_t v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      *unint64_t v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    unint64_t v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *unint64_t v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 16 * v4;
  int v13 = fst::TropicalWeightTpl<float>::Zero();
  float v15 = *(float *)(v12 + 8);
  uint64_t v14 = (float *)(v12 + 8);
  if (v15 != *(float *)v13 && *v14 != *(float *)fst::TropicalWeightTpl<float>::One()) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(*(void **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v16 = *(_DWORD *)a2;
  int v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(unint64_t **)(a1 + 16);
      unint64_t v19 = *v18;
LABEL_19:
      unint64_t *v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v18 = *(unint64_t **)(a1 + 16);
    unint64_t v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    unint64_t *v18 = v20;
    if (!v17)
    {
      unint64_t v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      unint64_t *v18 = v19;
      goto LABEL_19;
    }
  }
  float result = fst::TropicalWeightTpl<float>::Zero();
  if (*(float *)(a2 + 8) != *(float *)result)
  {
    float result = fst::TropicalWeightTpl<float>::One();
    if (*(float *)(a2 + 8) != *(float *)result) {
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
    }
  }
  **(void **)(a1 + 16) &= 0x30FC30007uLL;
  return result;
}

float fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = (_DWORD *)(v3 + 16 * a3);
  if (!*v4) {
    --a1[1];
  }
  if (!v4[1]) {
    --a1[2];
  }
  if (!*(_DWORD *)a2) {
    ++a1[1];
  }
  if (!*(_DWORD *)(a2 + 4)) {
    ++a1[2];
  }
  *(void *)uint64_t v4 = *(void *)a2;
  uint64_t v5 = v3 + 16 * a3;
  float result = *(float *)(a2 + 8);
  *(float *)(v5 + 8) = result;
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<int>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<int>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - ++*(void *)(result + 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, (uint64_t)v16, a4, a5, a6, (uint64_t)__p, a7);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_23ABDF568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = a1;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  if (a2 && a3)
  {
    uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a4 + 8);
    }
    if (v16)
    {
      int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, a4);
      if (v17 == -1)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
          LogMessage::LogMessage((BOOL *)v84, (uint64_t)&__p);
          uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Input symbol '", 14);
          int v19 = *(char *)(a4 + 23);
          uint64_t v20 = v19 >= 0 ? a4 : *(void *)a4;
          uint64_t v21 = v19 >= 0 ? *(unsigned __int8 *)(a4 + 23) : *(void *)(a4 + 8);
          uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"' missing from target symbol table", 34);
          LogMessage::~LogMessage((LogMessage *)v84);
          if (SHIBYTE(v88) < 0) {
            operator delete(__p);
          }
        }
        int v17 = -1;
        uint64_t v79 = 1;
      }
      else
      {
        uint64_t v79 = 0;
      }
    }
    else
    {
      uint64_t v79 = 0;
      int v17 = -1;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 64))(a2, 0);
    uint64_t v77 = a8;
    if (v23)
    {
      uint64_t v25 = v24;
      uint64_t v26 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 72))(&__p, a2, v25);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 72))(v84, a2, v25);
        uint64_t v27 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 80))(a3, v84);
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        BOOL v28 = v27 == -1;
        if (v27 == -1) {
          LODWORD(v27) = v17;
        }
        if (v28 && v17 == -1)
        {
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v84, "INFO");
            LogMessage::LogMessage((BOOL *)v82, (uint64_t)v84);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Input symbol ID ", 16);
            uint64_t v30 = (void *)std::ostream::operator<<();
            uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" symbol '", 9);
            uint64_t v32 = SHIBYTE(v88) >= 0 ? &__p : (void **)__p;
            uint64_t v33 = SHIBYTE(v88) >= 0 ? HIBYTE(v88) : (uint64_t)v87;
            int64x2_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"' missing from target symbol table", 34);
            LogMessage::~LogMessage((LogMessage *)v82);
            if ((char)v85 < 0) {
              operator delete(v84[0]);
            }
          }
          ++v79;
          LODWORD(v27) = -1;
        }
        long long v35 = v90;
        if (v90 >= v91)
        {
          uint64_t v37 = ((char *)v90 - (char *)v89) >> 3;
          if ((unint64_t)(v37 + 1) >> 61) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v38 = v91 - v89;
          if (v38 <= v37 + 1) {
            unint64_t v38 = v37 + 1;
          }
          if ((unint64_t)((char *)v91 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v91, v39);
          }
          else {
            uint64_t v40 = 0;
          }
          unint64_t v41 = (int *)&v40[8 * v37];
          *(void *)unint64_t v41 = v25 | ((unint64_t)v27 << 32);
          std::vector<int> v36 = v41 + 2;
          unint64_t v43 = v89;
          uint64_t v42 = v90;
          if (v90 != v89)
          {
            do
            {
              uint64_t v44 = *((void *)v42 - 1);
              v42 -= 2;
              *((void *)v41 - 1) = v44;
              v41 -= 2;
            }
            while (v42 != v43);
            uint64_t v42 = v89;
          }
          uint64_t v89 = v41;
          uint64_t v90 = v36;
          uint64_t v91 = (int *)&v40[8 * v39];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(void *)uint64_t v90 = v25 | ((unint64_t)v27 << 32);
          std::vector<int> v36 = v35 + 2;
        }
        uint64_t v90 = v36;
        if (SHIBYTE(v88) < 0) {
          operator delete(__p);
        }
        if (++v26 < v23) {
          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v26);
        }
      }
      while (v26 != v23);
    }
    a8 = v77;
    uint64_t v11 = a1;
    if (v79)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
      LogMessage::LogMessage((BOOL *)v84, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Target symbol table missing: ", 29);
      uint64_t v45 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" input symbols", 14);
      LogMessage::~LogMessage((LogMessage *)v84);
      if (SHIBYTE(v88) < 0)
      {
        operator delete(__p);
        if (!a5) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }
    }
    if (a5) {
LABEL_64:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a3);
  }
LABEL_65:
  std::string __p = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  if (a6 && a7)
  {
    uint64_t v46 = *(unsigned __int8 *)(a8 + 23);
    if ((v46 & 0x80u) != 0) {
      uint64_t v46 = *(void *)(a8 + 8);
    }
    if (v46)
    {
      int v47 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a7 + 80))(a7, a8);
      if (v47 == -1)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v84, "INFO");
          LogMessage::LogMessage((BOOL *)v82, (uint64_t)v84);
          uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Output symbol '", 15);
          int v50 = *(char *)(a8 + 23);
          uint64_t v51 = v50 >= 0 ? a8 : *(void *)a8;
          uint64_t v52 = v50 >= 0 ? *(unsigned __int8 *)(a8 + 23) : *(void *)(a8 + 8);
          unint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"' missing from target symbol table", 34);
          LogMessage::~LogMessage((LogMessage *)v82);
          if ((char)v85 < 0) {
            operator delete(v84[0]);
          }
        }
        int v47 = -1;
        uint64_t v48 = 1;
      }
      else
      {
        uint64_t v48 = 0;
      }
    }
    else
    {
      uint64_t v48 = 0;
      int v47 = -1;
    }
    unint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 120))(a6);
    uint64_t v55 = (*(uint64_t (**)(uint64_t, void))(*(void *)a6 + 64))(a6, 0);
    if (v54)
    {
      uint64_t v56 = v55;
      uint64_t v57 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a6 + 72))(v84, a6, v56);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a6 + 72))(v82, a6, v56);
        uint64_t v58 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a7 + 80))(a7, v82);
        if (v83 < 0) {
          operator delete(v82[0]);
        }
        BOOL v59 = v58 == -1;
        if (v58 == -1) {
          LODWORD(v58) = v47;
        }
        if (v59 && v47 == -1)
        {
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v82, "INFO");
            LogMessage::LogMessage(&v81, (uint64_t)v82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Output symbol ID ", 17);
            unint64_t v61 = (void *)std::ostream::operator<<();
            uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" symbol '", 9);
            uint64_t v63 = (v85 & 0x80u) == 0 ? v84 : (void **)v84[0];
            uint64_t v64 = (v85 & 0x80u) == 0 ? (void *)v85 : v84[1];
            char v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, (uint64_t)v64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"' missing from target symbol table", 34);
            LogMessage::~LogMessage((LogMessage *)&v81);
            if (v83 < 0) {
              operator delete(v82[0]);
            }
          }
          ++v48;
          LODWORD(v58) = -1;
        }
        char v66 = v87;
        if (v87 >= v88)
        {
          uint64_t v68 = ((char *)v87 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v68 + 1) >> 61) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v69 = ((char *)v88 - (unsigned char *)__p) >> 2;
          if (v69 <= v68 + 1) {
            unint64_t v69 = v68 + 1;
          }
          if ((unint64_t)((char *)v88 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v69;
          }
          if (v70) {
            uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v88, v70);
          }
          else {
            uint64_t v71 = 0;
          }
          uint64_t v72 = (unint64_t *)&v71[8 * v68];
          *uint64_t v72 = v56 | ((unint64_t)v58 << 32);
          char v67 = v72 + 1;
          uint64_t v74 = (char *)__p;
          uint64_t v73 = (char *)v87;
          if (v87 != __p)
          {
            do
            {
              unint64_t v75 = *((void *)v73 - 1);
              v73 -= 8;
              *--uint64_t v72 = v75;
            }
            while (v73 != v74);
            uint64_t v73 = (char *)__p;
          }
          std::string __p = v72;
          uint64_t v87 = v67;
          uint64_t v88 = (unint64_t *)&v71[8 * v70];
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          *uint64_t v87 = v56 | ((unint64_t)v58 << 32);
          char v67 = v66 + 1;
        }
        uint64_t v87 = v67;
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (++v57 < v54) {
          uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a6 + 64))(a6, v57);
        }
      }
      while (v57 != v54);
    }
    uint64_t v11 = a1;
    if (v48)
    {
      std::string::basic_string[abi:ne180100]<0>(v84, "WARNING");
      LogMessage::LogMessage((BOOL *)v82, (uint64_t)v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Target symbol table missing: ", 29);
      uint64_t v76 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" output symbols", 15);
      LogMessage::~LogMessage((LogMessage *)v82);
      if ((char)v85 < 0) {
        operator delete(v84[0]);
      }
    }
    if (a9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 264))(a1, a7);
    }
  }
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v11, &v89, (int **)&__p);
  if (__p)
  {
    uint64_t v87 = (unint64_t *)__p;
    operator delete(__p);
  }
  if (v89)
  {
    uint64_t v90 = v89;
    operator delete(v89);
  }
}

void sub_23ABDFF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  unint64_t v38 = *(void **)(v36 - 112);
  if (v38)
  {
    *(void *)(v36 - 104) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, int **a2, int **a3)
{
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  std::unordered_map<int,int>::unordered_map<std::__wrap_iter<std::pair<int,int> const*>>((uint64_t)v26, *a2, a2[1]);
  std::unordered_map<int,int>::unordered_map<std::__wrap_iter<std::pair<int,int> const*>>((uint64_t)v25, *a3, a3[1]);
  uint64_t v22 = 0;
  int v23 = 0;
  unsigned int v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v22);
  while (1)
  {
    if (!v22)
    {
      if ((int)v24 >= v23) {
        goto LABEL_39;
      }
LABEL_7:
      uint64_t v7 = v24;
      goto LABEL_8;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22)) {
      break;
    }
    if (!v22) {
      goto LABEL_7;
    }
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v22 + 24))();
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 272))(a1, v7, &v21);
    while (((*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21) & 1) == 0)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21);
      uint64_t v18 = *(void *)v8;
      int v19 = *(_DWORD *)(v8 + 8);
      int v20 = *(_DWORD *)(v8 + 12);
      uint64_t v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v26, (int *)&v18);
      if (v9)
      {
        if (*((_DWORD *)v9 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          }
          LogMessage::LogMessage(&v17, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Input symbol ID ", 16);
          uint64_t v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" missing from target vocabulary", 31);
          goto LABEL_30;
        }
        LODWORD(v18) = *((_DWORD *)v9 + 5);
      }
      long long v10 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v25, (int *)&v18 + 1);
      if (v10)
      {
        if (*((_DWORD *)v10 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          }
          LogMessage::LogMessage(&v17, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Output symbol id ", 17);
          uint64_t v12 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" missing from target vocabulary", 31);
LABEL_30:
          LogMessage::~LogMessage((LogMessage *)&v17);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, 4, 4);
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          }
          goto LABEL_36;
        }
        HIDWORD(v18) = *((_DWORD *)v10 + 5);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 80))(v21, &v18);
      (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
    }
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    }
    else {
      ++v24;
    }
  }
  if (v22) {
    (*(void (**)(void))(*(void *)v22 + 8))();
  }
LABEL_39:
  unint64_t v14 = fst::RelabelProperties(v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v14, 0xFFFFFFFF0007);
LABEL_36:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v25);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v26);
}

void sub_23ABE05B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v25 - 72);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,int>::unordered_map<std::__wrap_iter<std::pair<int,int> const*>>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int> const&>(a1, v5, v5);
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_23ABE070C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int> const&>(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = operator new(0x18uLL);
  *long long v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *long long v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *long long v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_23ABE0928(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result == -1) {
    return result;
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v6);
  uint64_t v11 = 0;
  int v12 = 0;
  unsigned int v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v11);
  while (1)
  {
    if (!v11)
    {
      if ((int)v13 >= v12) {
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0xFFFFFFFF0007);
      }
LABEL_8:
      uint64_t v7 = v13;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
      break;
    }
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v11 + 24))();
LABEL_9:
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, v7);
    for (unint64_t i = a2[5]; ; a2[5] = i)
    {
      uint64_t v9 = a2[2];
      if (i >= (a2[3] - v9) >> 4) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 184))(a1, v7, v9 + 16 * i);
      unint64_t i = a2[5] + 1;
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(v10);
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 160))(a1, v7, v10);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
    else {
      ++v13;
    }
  }
  if (v11) {
    (*(void (**)(void))(*(void *)v11 + 8))();
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0xFFFFFFFF0007);
}

void sub_23ABE0C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  uint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 32))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  long long v14 = 0u;
  long long v15 = 0u;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v6 + 120))(v6, a2, &v14);
  while (1)
  {
    if (!(void)v14)
    {
      if (v16 >= (unint64_t)v15) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14 + 16))(v14)) {
      break;
    }
    if ((void)v14)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = *((void *)&v14 + 1) + 16 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v7 + 12);
      uint64_t v9 = v8 + 16;
    }
    a1[3] = v9;
    if ((void)v14) {
      (*(void (**)(void))(*(void *)v14 + 32))(v14);
    }
    else {
      ++v16;
    }
  }
  if ((void)v14)
  {
    (*(void (**)(void))(*(void *)v14 + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (*((void *)&v15 + 1)) {
    --**((_DWORD **)&v15 + 1);
  }
LABEL_18:
  long long v10 = (uint64_t *)a1[2];
  uint64_t v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 4);
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(v10, v11, (uint64_t)&v14, v13, 1);
}

void sub_23ABE0ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState();
  }
  else {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((_DWORD *)a2 - 3) < *((_DWORD *)v11 + 1))
          {
            uint64_t v24 = *v11;
            int v25 = *((_DWORD *)v11 + 2);
            int v26 = *((_DWORD *)v11 + 3);
            *uint64_t v11 = *(a2 - 2);
            *((_DWORD *)v11 + 2) = *((_DWORD *)a2 - 2);
            *((_DWORD *)v11 + 3) = *((_DWORD *)a2 - 1);
            *(a2 - 2) = v24;
            *((_DWORD *)a2 - 2) = v25;
            *((_DWORD *)a2 - 1) = v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, (uint64_t)(v11 + 2), (uint64_t)(v11 + 4), (uint64_t)(v11 + 6), (uint64_t)(a2 - 2));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *v11;
      int v19 = *((_DWORD *)v11 + 2);
      int v20 = *((_DWORD *)v11 + 3);
      *uint64_t v11 = *v17;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v17 + 2);
      *((_DWORD *)v11 + 3) = *((_DWORD *)v17 + 3);
      uint64_t *v17 = v18;
      *((_DWORD *)v17 + 2) = v19;
      *((_DWORD *)v17 + 3) = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*((_DWORD *)v11 - 3) >= *((_DWORD *)v11 + 1))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(v11, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, (uint64_t)v21);
    uint64_t v11 = v21 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)(v21 + 2), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = v21 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v11, a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(a2 - 4) < *v11)
          {
            uint64_t v24 = *(void *)v11;
            int v25 = v11[2];
            int v26 = v11[3];
            *(void *)uint64_t v11 = *((void *)a2 - 2);
            v11[2] = *(a2 - 2);
            void v11[3] = *(a2 - 1);
            *((void *)a2 - 2) = v24;
            *(a2 - 2) = v25;
            *(a2 - 1) = v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)v11, v11 + 4, a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, (uint64_t *)v11 + 2, v11 + 8, (uint64_t *)a2 - 2);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, (uint64_t)(v11 + 4), (uint64_t *)v11 + 4, (uint64_t *)v11 + 6, (uint64_t *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)v11, &v11[4 * (v15 >> 1)], a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)v11 + 2, v17 - 4, a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)v11 + 4, &v11[4 * v16 + 4], a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)v17 - 2, v17, &v11[4 * v16 + 4]);
      uint64_t v18 = *(void *)v11;
      int v19 = v11[2];
      int v20 = v11[3];
      *(void *)uint64_t v11 = *(void *)v17;
      v11[2] = v17[2];
      void v11[3] = v17[3];
      *(void *)size_t v17 = v18;
      v17[2] = v19;
      v17[3] = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)&v11[4 * (v15 >> 1)], v11, a2 - 4);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 4) >= *v11)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(v11, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>((uint64_t *)v11, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, v21);
    uint64_t v11 = (int *)(v21 + 2);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)(v21 + 2), a2))
    {
      a4 = -v13;
      a2 = (int *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(a1, v21, a3, -v13, a5 & 1);
      uint64_t v11 = (int *)(v21 + 2);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(v11, a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (_DWORD *)result;
      do
      {
        char v5 = v2;
        if (v4[5] < v4[1])
        {
          uint64_t v6 = *v2;
          int v7 = v4[6];
          int v8 = v4[7];
          uint64_t v9 = HIDWORD(*v5);
          uint64_t v10 = v3;
          while (1)
          {
            uint64_t v11 = result + v10;
            *(void *)(v11 + 16) = *(void *)(result + v10);
            *(_DWORD *)(v11 + ++*(void *)(result + 24) = *(_DWORD *)(result + v10 + 8);
            *(_DWORD *)(v11 + 28) = *(_DWORD *)(result + v10 + 12);
            if (!v10) {
              break;
            }
            v10 -= 16;
            if (*(_DWORD *)(v11 - 12) <= (int)v9)
            {
              uint64_t v12 = result + v10 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          *(void *)uint64_t v12 = v6;
          *(_DWORD *)(v12 + 8) = v7;
          *(_DWORD *)(v12 + 12) = v8;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(_DWORD *result, void *a2)
{
  if (result != (_DWORD *)a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != (_DWORD *)a2)
    {
      uint64_t v3 = result + 7;
      do
      {
        uint64_t v4 = v2;
        if (result[5] < result[1])
        {
          uint64_t v5 = *v2;
          int v6 = result[6];
          int v7 = result[7];
          uint64_t v8 = HIDWORD(*v4);
          uint64_t v9 = v3;
          do
          {
            uint64_t v10 = v9;
            *(void *)(v9 - 3) = *(void *)(v9 - 7);
            *(v9 - 1) = *(v9 - 5);
            int v11 = *(v9 - 4);
            v9 -= 4;
            *uint64_t v10 = v11;
          }
          while (*(v10 - 10) > (int)v8);
          *(void *)(v9 - 3) = v5;
          *(v9 - 1) = v6;
          *uint64_t v9 = v7;
        }
        uint64_t v2 = v4 + 2;
        v3 += 4;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 1);
  int v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 2);
    int v7 = *((_DWORD *)a1 + 3);
    if (v4 < v3)
    {
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a1 + 3) = *((_DWORD *)a3 + 3);
      *a3 = v5;
      *((_DWORD *)a3 + 2) = v6;
      *((_DWORD *)a3 + 3) = v7;
      return 1;
    }
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
    *a2 = v5;
    *((_DWORD *)a2 + 2) = v6;
    *((_DWORD *)a2 + 3) = v7;
    if (*((_DWORD *)a3 + 1) >= SHIDWORD(v5)) {
      return 1;
    }
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
    *a3 = v5;
    *((_DWORD *)a3 + 2) = v6;
    *((_DWORD *)a3 + 3) = v7;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v8 = *a2;
    int v9 = *((_DWORD *)a2 + 2);
    int v10 = *((_DWORD *)a2 + 3);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
    *a3 = v8;
    *((_DWORD *)a3 + 2) = v9;
    *((_DWORD *)a3 + 3) = v10;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1)) {
      return 1;
    }
    uint64_t v11 = *a1;
    int v12 = *((_DWORD *)a1 + 2);
    int v13 = *((_DWORD *)a1 + 3);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
    *a2 = v11;
    *((_DWORD *)a2 + 2) = v12;
    *((_DWORD *)a2 + 3) = v13;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  if (*(_DWORD *)(a2 - 12) <= (int)v3)
  {
    int v7 = a1 + 2;
    do
    {
      uint64_t v5 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = *((_DWORD *)v7 + 1);
      v7 += 2;
    }
    while (v8 <= (int)v3);
  }
  else
  {
    int v4 = a1;
    do
    {
      uint64_t v5 = v4 + 2;
      int v6 = *((_DWORD *)v4 + 5);
      v4 += 2;
    }
    while (v6 <= (int)v3);
  }
  if ((unint64_t)v5 >= a2)
  {
    unint64_t v9 = a2;
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 16;
      int v10 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
    }
    while (v10 > (int)v3);
  }
  int v11 = *((_DWORD *)a1 + 2);
  int v12 = *((_DWORD *)a1 + 3);
  while ((unint64_t)v5 < v9)
  {
    uint64_t v13 = *v5;
    int v14 = *((_DWORD *)v5 + 2);
    int v15 = *((_DWORD *)v5 + 3);
    *uint64_t v5 = *(void *)v9;
    *((_DWORD *)v5 + 2) = *(_DWORD *)(v9 + 8);
    *((_DWORD *)v5 + 3) = *(_DWORD *)(v9 + 12);
    *(void *)unint64_t v9 = v13;
    *(_DWORD *)(v9 + 8) = v14;
    *(_DWORD *)(v9 + 12) = v15;
    do
    {
      int v16 = *((_DWORD *)v5 + 5);
      v5 += 2;
    }
    while (v16 <= (int)v3);
    do
    {
      int v17 = *(_DWORD *)(v9 - 12);
      v9 -= 16;
    }
    while (v17 > (int)v3);
  }
  if (v5 - 2 != a1)
  {
    *a1 = *(v5 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v5 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v5 - 1);
  }
  *(v5 - 2) = v2;
  *((_DWORD *)v5 - 2) = v11;
  *((_DWORD *)v5 - 1) = v12;
  return v5;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *((_DWORD *)a1 + 3);
  unint64_t v6 = HIDWORD(*a1);
  do
  {
    int v7 = HIDWORD(a1[v2 + 2]);
    v2 += 2;
  }
  while (v7 < (int)v6);
  int v8 = &a1[v2];
  if (v2 == 2)
  {
    while ((unint64_t)v8 < a2)
    {
      unint64_t v9 = a2 - 16;
      int v11 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
      if (v11 < (int)v6) {
        goto LABEL_9;
      }
    }
    unint64_t v9 = a2;
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 16;
      int v10 = *(_DWORD *)(a2 - 12);
      a2 -= 16;
    }
    while (v10 >= (int)v6);
  }
LABEL_9:
  int v12 = v8;
  if ((unint64_t)v8 < v9)
  {
    unint64_t v13 = v9;
    do
    {
      uint64_t v14 = *v12;
      int v15 = *((_DWORD *)v12 + 2);
      int v16 = *((_DWORD *)v12 + 3);
      *int v12 = *(void *)v13;
      *((_DWORD *)v12 + 2) = *(_DWORD *)(v13 + 8);
      *((_DWORD *)v12 + 3) = *(_DWORD *)(v13 + 12);
      *(void *)unint64_t v13 = v14;
      *(_DWORD *)(v13 + 8) = v15;
      *(_DWORD *)(v13 + 12) = v16;
      do
      {
        int v17 = *((_DWORD *)v12 + 5);
        v12 += 2;
      }
      while (v17 < (int)v6);
      do
      {
        int v18 = *(_DWORD *)(v13 - 12);
        v13 -= 16;
      }
      while (v18 >= (int)v6);
    }
    while ((unint64_t)v12 < v13);
  }
  if (v12 - 2 != a1)
  {
    *a1 = *(v12 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v12 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v12 - 1);
  }
  *(v12 - 2) = v3;
  *((_DWORD *)v12 - 2) = v4;
  *((_DWORD *)v12 - 1) = v5;
  return v12 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        uint64_t v6 = *(void *)a1;
        int v7 = *(_DWORD *)(a1 + 8);
        int v8 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *(void *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(void *)(a2 - 16) = v6;
        *(_DWORD *)(a2 - 8) = v7;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v10 + 4) < *(_DWORD *)(v9 + 4))
    {
      uint64_t v13 = *(void *)v10;
      int v14 = *(_DWORD *)(v10 + 8);
      int v15 = *(_DWORD *)(v10 + 12);
      uint64_t v16 = HIDWORD(*(void *)v10);
      uint64_t v17 = v11;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        *(void *)(v18 + 48) = *(void *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 56) = *(_DWORD *)(a1 + v17 + 40);
        *(_DWORD *)(v18 + 60) = *(_DWORD *)(a1 + v17 + 44);
        if (v17 == -32) {
          break;
        }
        v17 -= 16;
        if (*(_DWORD *)(v18 + 20) <= (int)v16)
        {
          uint64_t v19 = a1 + v17 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *(void *)uint64_t v19 = v13;
      *(_DWORD *)(v19 + 8) = v14;
      *(_DWORD *)(v19 + 12) = v15;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    uint64_t v9 = *(void *)a3;
    float result = *(float *)(a3 + 8);
    int v10 = *(_DWORD *)(a3 + 12);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
    *(void *)a4 = v9;
    *(float *)(a4 + 8) = result;
    *(_DWORD *)(a4 + 12) = v10;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      uint64_t v11 = *(void *)a2;
      float result = *(float *)(a2 + 8);
      int v12 = *(_DWORD *)(a2 + 12);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(void *)a3 = v11;
      *(float *)(a3 + 8) = result;
      *(_DWORD *)(a3 + 12) = v12;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        uint64_t v13 = *(void *)a1;
        float result = *(float *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        *(void *)a2 = v13;
        *(float *)(a2 + 8) = result;
        *(_DWORD *)(a2 + 12) = v14;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 4) < *(_DWORD *)(a4 + 4))
  {
    uint64_t v11 = *(void *)a4;
    float result = *(float *)(a4 + 8);
    int v12 = *(_DWORD *)(a4 + 12);
    *(void *)a4 = *(void *)a5;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a5 + 12);
    *(void *)a5 = v11;
    *(float *)(a5 + 8) = result;
    *(_DWORD *)(a5 + 12) = v12;
    if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
    {
      uint64_t v13 = *(void *)a3;
      float result = *(float *)(a3 + 8);
      int v14 = *(_DWORD *)(a3 + 12);
      *(void *)a3 = *(void *)a4;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(void *)a4 = v13;
      *(float *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 12) = v14;
      if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
      {
        uint64_t v15 = *(void *)a2;
        float result = *(float *)(a2 + 8);
        int v16 = *(_DWORD *)(a2 + 12);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(void *)a3 = v15;
        *(float *)(a3 + 8) = result;
        *(_DWORD *)(a3 + 12) = v16;
        if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
        {
          uint64_t v17 = *(void *)a1;
          float result = *(float *)(a1 + 8);
          int v18 = *(_DWORD *)(a1 + 12);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(void *)a2 = v17;
          *(float *)(a2 + 8) = result;
          *(_DWORD *)(a2 + 12) = v18;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (*((_DWORD *)v14 + 1) < *(_DWORD *)(a1 + 4))
        {
          uint64_t v15 = *v14;
          int v16 = *((_DWORD *)v14 + 2);
          int v17 = *((_DWORD *)v14 + 3);
          *int v14 = *(void *)a1;
          *((_DWORD *)v14 + 2) = *(_DWORD *)(a1 + 8);
          *((_DWORD *)v14 + 3) = *(_DWORD *)(a1 + 12);
          *(void *)a1 = v15;
          *(_DWORD *)(a1 + 8) = v16;
          *(_DWORD *)(a1 + 12) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      uint64_t v19 = a2 - 2;
      do
      {
        uint64_t v20 = *(void *)a1;
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a1 + 12);
        uint64_t v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v18);
        if (v19 == (uint64_t *)v23)
        {
          *(void *)uint64_t v23 = v20;
          *(_DWORD *)(v23 + 8) = v21;
          *(_DWORD *)(v23 + 12) = v22;
        }
        else
        {
          *(void *)uint64_t v23 = *v19;
          *(_DWORD *)(v23 + 8) = *((_DWORD *)v19 + 2);
          *(_DWORD *)(v23 + 12) = *((_DWORD *)v19 + 3);
          uint64_t *v19 = v20;
          *((_DWORD *)v19 + 2) = v21;
          *((_DWORD *)v19 + 3) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (uint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = *((_DWORD *)v8 + 1);
        int v11 = *((_DWORD *)v8 + 5);
        v8 += 2 * (v10 < v11);
        if (v10 < v11) {
          uint64_t v7 = v9;
        }
      }
      if (*((_DWORD *)v8 + 1) >= *((_DWORD *)a4 + 1))
      {
        uint64_t v12 = *a4;
        int v13 = *((_DWORD *)a4 + 2);
        int v14 = *((_DWORD *)a4 + 3);
        unint64_t v15 = HIDWORD(*a4);
        do
        {
          int v16 = a4;
          a4 = v8;
          *int v16 = *v8;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v8 + 2);
          *((_DWORD *)v16 + 3) = *((_DWORD *)v8 + 3);
          if (v5 < v7) {
            break;
          }
          uint64_t v17 = (2 * v7) | 1;
          uint64_t v8 = (uint64_t *)(result + 16 * v17);
          uint64_t v18 = 2 * v7 + 2;
          if (v18 < a3)
          {
            int v19 = *((_DWORD *)v8 + 1);
            int v20 = *((_DWORD *)v8 + 5);
            v8 += 2 * (v19 < v20);
            if (v19 < v20) {
              uint64_t v17 = v18;
            }
          }
          uint64_t v7 = v17;
        }
        while (*((_DWORD *)v8 + 1) >= (int)v15);
        *a4 = v12;
        *((_DWORD *)a4 + 2) = v13;
        *((_DWORD *)a4 + 3) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1 + 16 * (v3 + 1);
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int v9 = *(_DWORD *)(v6 + 4);
      int v10 = *(_DWORD *)(v6 + 20);
      v6 += 16 * (v9 < v10);
      if (v9 < v10) {
        uint64_t v7 = v8;
      }
    }
    *(void *)a1 = *(void *)v6;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(v6 + 12);
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    if (*(_DWORD *)(result + 16 * v4 + 4) < *(_DWORD *)(a2 - 12))
    {
      unint64_t v7 = *(void *)(a2 - 16);
      uint64_t v5 = a2 - 16;
      unint64_t v6 = v7;
      int v8 = *(_DWORD *)(v5 + 8);
      int v9 = *(_DWORD *)(v5 + 12);
      unint64_t v10 = HIDWORD(v7);
      do
      {
        uint64_t v11 = v5;
        uint64_t v5 = result + 16 * v4;
        *(void *)uint64_t v11 = *(void *)v5;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v5 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v5 + 12);
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v4 + 4) < (int)v10);
      *(void *)uint64_t v5 = v6;
      *(_DWORD *)(v5 + 8) = v8;
      *(_DWORD *)(v5 + 12) = v9;
    }
  }
  return result;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result == -1) {
    return result;
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v6);
  uint64_t v11 = 0;
  int v12 = 0;
  unsigned int v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v11);
  while (1)
  {
    if (!v11)
    {
      if ((int)v13 >= v12) {
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0xFFFFFFFF0007);
      }
LABEL_8:
      uint64_t v7 = v13;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
      break;
    }
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v11 + 24))();
LABEL_9:
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, v7);
    for (unint64_t i = a2[5]; ; a2[5] = i)
    {
      uint64_t v9 = a2[2];
      if (i >= (a2[3] - v9) >> 4) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 184))(a1, v7, v9 + 16 * i);
      unint64_t i = a2[5] + 1;
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(v10);
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 160))(a1, v7, v10);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
    else {
      ++v13;
    }
  }
  if (v11) {
    (*(void (**)(void))(*(void *)v11 + 8))();
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v5 & 0xFFFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0xFFFFFFFF0007);
}

void sub_23ABE2284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  unint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 32))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  long long v14 = 0u;
  long long v15 = 0u;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v6 + 120))(v6, a2, &v14);
  while (1)
  {
    if (!(void)v14)
    {
      if (v16 >= (unint64_t)v15) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14 + 16))(v14)) {
      break;
    }
    if ((void)v14)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = *((void *)&v14 + 1) + 16 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v7 + 12);
      uint64_t v9 = v8 + 16;
    }
    a1[3] = v9;
    if ((void)v14) {
      (*(void (**)(void))(*(void *)v14 + 32))(v14);
    }
    else {
      ++v16;
    }
  }
  if ((void)v14)
  {
    (*(void (**)(void))(*(void *)v14 + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (*((void *)&v15 + 1)) {
    --**((_DWORD **)&v15 + 1);
  }
LABEL_18:
  unint64_t v10 = (int *)a1[2];
  uint64_t v11 = (int *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 4);
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(v10, v11, (uint64_t)&v14, v13, 1);
}

void sub_23ABE24E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState();
  }
  else {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = (_DWORD *)result;
      do
      {
        char v5 = v2;
        if (v4[4] < *v4)
        {
          uint64_t v6 = *v2;
          int v7 = v4[6];
          uint64_t v8 = v3;
          int v9 = v4[7];
          while (1)
          {
            uint64_t v10 = result + v8;
            *(void *)(v10 + 16) = *(void *)(result + v8);
            *(_DWORD *)(v10 + ++*(void *)(result + 24) = *(_DWORD *)(result + v8 + 8);
            *(_DWORD *)(v10 + 28) = *(_DWORD *)(result + v8 + 12);
            if (!v8) {
              break;
            }
            v8 -= 16;
            if (*(_DWORD *)(v10 - 16) <= (int)v6)
            {
              uint64_t v11 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *(void *)uint64_t v11 = v6;
          *(_DWORD *)(v11 + 8) = v7;
          *(_DWORD *)(v11 + 12) = v9;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != a2)
    {
      uint64_t v3 = result + 7;
      do
      {
        unint64_t v4 = v2;
        if (result[4] < *result)
        {
          uint64_t v5 = *v2;
          int v6 = result[6];
          int v7 = v3;
          int v8 = result[7];
          do
          {
            int v9 = v7;
            *(void *)(v7 - 3) = *(void *)(v7 - 7);
            *(v7 - 1) = *(v7 - 5);
            int v10 = *(v7 - 4);
            v7 -= 4;
            *int v9 = v10;
          }
          while (*(v9 - 11) > (int)v5);
          *(void *)(v7 - 3) = v5;
          *(v7 - 1) = v6;
          *int v7 = v8;
        }
        uint64_t v2 = v4 + 2;
        v3 += 4;
        uint64_t result = v4;
      }
      while (v4 + 2 != (void *)a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 2);
    int v7 = *((_DWORD *)a1 + 3);
    if (v4 < v3)
    {
      *a1 = *(void *)a3;
      *((_DWORD *)a1 + 2) = a3[2];
      *((_DWORD *)a1 + 3) = a3[3];
      *(void *)a3 = v5;
      a3[2] = v6;
      a3[3] = v7;
      return 1;
    }
    *a1 = *(void *)a2;
    *((_DWORD *)a1 + 2) = a2[2];
    *((_DWORD *)a1 + 3) = a2[3];
    *(void *)a2 = v5;
    a2[2] = v6;
    a2[3] = v7;
    if (*a3 >= (int)v5) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    a2[2] = a3[2];
    a2[3] = a3[3];
    *(void *)a3 = v5;
    a3[2] = v6;
    a3[3] = v7;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v8 = *(void *)a2;
    int v9 = a2[2];
    int v10 = a2[3];
    *(void *)a2 = *(void *)a3;
    a2[2] = a3[2];
    a2[3] = a3[3];
    *(void *)a3 = v8;
    a3[2] = v9;
    a3[3] = v10;
    if (*a2 >= *(_DWORD *)a1) {
      return 1;
    }
    uint64_t v11 = *a1;
    int v12 = *((_DWORD *)a1 + 2);
    int v13 = *((_DWORD *)a1 + 3);
    *a1 = *(void *)a2;
    *((_DWORD *)a1 + 2) = a2[2];
    *((_DWORD *)a1 + 3) = a2[3];
    *(void *)a2 = v11;
    a2[2] = v12;
    a2[3] = v13;
    return 2;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(_DWORD *a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(_DWORD *)(a2 - 16) <= (int)*(void *)a1)
  {
    uint64_t v5 = a1 + 4;
    do
    {
      int v3 = v5;
      if ((unint64_t)v5 >= a2) {
        break;
      }
      v5 += 4;
    }
    while (*v3 <= (int)v2);
  }
  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[4];
      v3 += 4;
    }
    while (v4 <= (int)v2);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      int v6 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v6 > (int)v2);
  }
  int v7 = a1[2];
  int v8 = a1[3];
  while ((unint64_t)v3 < a2)
  {
    uint64_t v9 = *(void *)v3;
    int v10 = v3[2];
    int v11 = v3[3];
    *(void *)int v3 = *(void *)a2;
    v3[2] = *(_DWORD *)(a2 + 8);
    v3[3] = *(_DWORD *)(a2 + 12);
    *(void *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = v11;
    do
    {
      int v12 = v3[4];
      v3 += 4;
    }
    while (v12 <= (int)v2);
    do
    {
      int v13 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v13 > (int)v2);
  }
  if (v3 - 4 != a1)
  {
    *(void *)a1 = *((void *)v3 - 2);
    a1[2] = *(v3 - 2);
    a1[3] = *(v3 - 1);
  }
  *((void *)v3 - 2) = v2;
  *(v3 - 2) = v7;
  *(v3 - 1) = v8;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *((_DWORD *)a1 + 3);
  do
  {
    int v6 = a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < (int)v3);
  unint64_t v7 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      int v9 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v9 >= (int)v3);
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
    }
    while (v8 >= (int)v3);
  }
  int v10 = &a1[v2];
  if (v7 < a2)
  {
    unint64_t v11 = a2;
    do
    {
      uint64_t v12 = *v10;
      int v13 = *((_DWORD *)v10 + 2);
      int v14 = *((_DWORD *)v10 + 3);
      *int v10 = *(void *)v11;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(v11 + 8);
      *((_DWORD *)v10 + 3) = *(_DWORD *)(v11 + 12);
      *(void *)unint64_t v11 = v12;
      *(_DWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 12) = v14;
      do
      {
        int v15 = *((_DWORD *)v10 + 4);
        v10 += 2;
      }
      while (v15 < (int)v3);
      do
      {
        int v16 = *(_DWORD *)(v11 - 16);
        v11 -= 16;
      }
      while (v16 >= (int)v3);
    }
    while ((unint64_t)v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    *a1 = *(v10 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v10 - 2);
    *((_DWORD *)a1 + 3) = *((_DWORD *)v10 - 1);
  }
  *(v10 - 2) = v3;
  *((_DWORD *)v10 - 2) = v4;
  *((_DWORD *)v10 - 1) = v5;
  return v10 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 4) < *(_DWORD *)a1)
      {
        uint64_t v6 = *(void *)a1;
        int v7 = *(_DWORD *)(a1 + 8);
        int v8 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *((void *)a2 - 2);
        *(_DWORD *)(a1 + 8) = *(a2 - 2);
        *(_DWORD *)(a1 + 12) = *(a2 - 1);
        *((void *)a2 - 2) = v6;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (int *)(a1 + 16), a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, (uint64_t *)(a1 + 16), (int *)(a1 + 32), (uint64_t *)a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a1 + 16, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 48), (uint64_t *)a2 - 2);
      return 1;
    default:
      int v9 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      int v10 = (_DWORD *)(a1 + 48);
      if ((_DWORD *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (*v10 < *v9)
    {
      uint64_t v13 = *(void *)v10;
      int v14 = v10[2];
      uint64_t v15 = v11;
      int v16 = v10[3];
      while (1)
      {
        uint64_t v17 = a1 + v15;
        *(void *)(v17 + 48) = *(void *)(a1 + v15 + 32);
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v15 + 40);
        *(_DWORD *)(v17 + 60) = *(_DWORD *)(a1 + v15 + 44);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (*(_DWORD *)(v17 + 16) <= (int)v13)
        {
          uint64_t v18 = a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v13;
      *(_DWORD *)(v18 + 8) = v14;
      *(_DWORD *)(v18 + 12) = v16;
      if (++v12 == 8) {
        return v10 + 4 == a2;
      }
    }
    int v9 = v10;
    v11 += 16;
    v10 += 4;
    if (v10 == a2) {
      return 1;
    }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t *)a1, (int *)a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    float result = *((float *)a3 + 2);
    int v10 = a3[3];
    *(void *)a3 = *a4;
    a3[2] = *((_DWORD *)a4 + 2);
    a3[3] = *((_DWORD *)a4 + 3);
    *a4 = v9;
    *((float *)a4 + 2) = result;
    *((_DWORD *)a4 + 3) = v10;
    if (*a3 < *(_DWORD *)a2)
    {
      uint64_t v11 = *a2;
      float result = *((float *)a2 + 2);
      int v12 = *((_DWORD *)a2 + 3);
      *a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = a3[2];
      *((_DWORD *)a2 + 3) = a3[3];
      *(void *)a3 = v11;
      *((float *)a3 + 2) = result;
      a3[3] = v12;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        uint64_t v13 = *(void *)a1;
        float result = *(float *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
        *a2 = v13;
        *((float *)a2 + 2) = result;
        *((_DWORD *)a2 + 3) = v14;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, (uint64_t *)a2, (int *)a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    uint64_t v11 = *a4;
    float result = *((float *)a4 + 2);
    int v12 = *((_DWORD *)a4 + 3);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = *((_DWORD *)a5 + 2);
    *((_DWORD *)a4 + 3) = *((_DWORD *)a5 + 3);
    *a5 = v11;
    *((float *)a5 + 2) = result;
    *((_DWORD *)a5 + 3) = v12;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      uint64_t v13 = *a3;
      float result = *((float *)a3 + 2);
      int v14 = *((_DWORD *)a3 + 3);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = *((_DWORD *)a4 + 2);
      *((_DWORD *)a3 + 3) = *((_DWORD *)a4 + 3);
      *a4 = v13;
      *((float *)a4 + 2) = result;
      *((_DWORD *)a4 + 3) = v14;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        uint64_t v15 = *(void *)a2;
        float result = *(float *)(a2 + 8);
        int v16 = *(_DWORD *)(a2 + 12);
        *(void *)a2 = *a3;
        *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
        *(_DWORD *)(a2 + 12) = *((_DWORD *)a3 + 3);
        *a3 = v15;
        *((float *)a3 + 2) = result;
        *((_DWORD *)a3 + 3) = v16;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          uint64_t v17 = *(void *)a1;
          float result = *(float *)(a1 + 8);
          int v18 = *(_DWORD *)(a1 + 12);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(void *)a2 = v17;
          *(float *)(a2 + 8) = result;
          *(_DWORD *)(a2 + 12) = v18;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (*v14 < *a1)
        {
          uint64_t v15 = *(void *)v14;
          int v16 = v14[2];
          int v17 = v14[3];
          *(void *)int v14 = *(void *)a1;
          v14[2] = a1[2];
          v14[3] = a1[3];
          *(void *)a1 = v15;
          a1[2] = v16;
          a1[3] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      int v19 = a2 - 4;
      do
      {
        uint64_t v20 = *(void *)a1;
        int v21 = a1[2];
        int v22 = a1[3];
        BOOL v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a4, v18);
        if (v19 == v23)
        {
          *(void *)BOOL v23 = v20;
          v23[2] = v21;
          v23[3] = v22;
        }
        else
        {
          *(void *)BOOL v23 = *(void *)v19;
          v23[2] = v19[2];
          v23[3] = v19[3];
          *(void *)int v19 = v20;
          v19[2] = v21;
          v19[3] = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, (uint64_t)(v23 + 4), a4, ((char *)(v23 + 4) - (char *)a1) >> 4);
        }
        v19 -= 4;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        int v10 = *v8;
      }
      else
      {
        int v10 = *v8;
        int v11 = v8[4];
        if (*v8 <= v11) {
          int v10 = v8[4];
        }
        if (*v8 < v11)
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      if (v10 >= *a4)
      {
        uint64_t v12 = *(void *)a4;
        int v13 = a4[2];
        int v14 = a4[3];
        do
        {
          uint64_t v15 = a4;
          a4 = v8;
          *(void *)uint64_t v15 = *(void *)v8;
          v15[2] = v8[2];
          v15[3] = v8[3];
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v17 = *v8;
            uint64_t v7 = v16;
          }
          else
          {
            int v17 = *v8;
            int v18 = v8[4];
            if (*v8 <= v18) {
              int v17 = v8[4];
            }
            if (*v8 >= v18) {
              uint64_t v7 = v16;
            }
            else {
              v8 += 4;
            }
          }
        }
        while (v17 >= (int)v12);
        *(void *)a4 = v12;
        a4[2] = v13;
        a4[3] = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[4 * v3 + 4];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int v9 = *v6;
      int v10 = v6[4];
      if (*v6 < v10) {
        v6 += 4;
      }
      if (v9 < v10) {
        uint64_t v7 = v8;
      }
    }
    *(void *)a1 = *(void *)v6;
    a1[2] = v6[2];
    a1[3] = v6[3];
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 16 * (v4 >> 1);
    uint64_t v7 = a2 - 16;
    if (*(_DWORD *)v6 < *(_DWORD *)(a2 - 16))
    {
      uint64_t v8 = *(void *)(a2 - 16);
      int v9 = *(_DWORD *)(a2 - 8);
      int v10 = *(_DWORD *)(a2 - 4);
      do
      {
        uint64_t v11 = v7;
        uint64_t v7 = v6;
        *(void *)uint64_t v11 = *(void *)v6;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v6 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v6 + 12);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = result + 16 * v5;
      }
      while (*(_DWORD *)v6 < (int)v8);
      *(void *)uint64_t v7 = v8;
      *(_DWORD *)(v7 + 8) = v9;
      *(_DWORD *)(v7 + 12) = v10;
    }
  }
  return result;
}

void cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SpecialMatcher()
{
}

void sub_23ABE3634(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v2, 0x10E1C4054F459C6);
  uint64_t v4 = v1[1];
  void *v1 = &unk_26EE2B330;
  v1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::RhoMatcher(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_26EE2B330;
  if (!a6) {
    operator new();
  }
  *(void *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = -1;
  *(unsigned char *)(a1 + 56) = 0;
  if (a3 == 3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"RhoMatcher: Bad match type", 26);
    LogMessage::~LogMessage((LogMessage *)&v17);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 4;
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v12, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v12, "ERROR");
    }
    LogMessage::LogMessage(&v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"RhoMatcher: 0 cannot be used as rho_label", 41);
    LogMessage::~LogMessage((LogMessage *)&v14);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    *(_DWORD *)(a1 + 20) = -1;
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (a5 == 1)
  {
    BOOL v10 = 1;
  }
  else
  {
    if (a5)
    {
      *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
      return a1;
    }
    BOOL v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = v10;
  return a1;
}

void sub_23ABE3920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void *)(v24 + 8);
  *(void *)(v24 + 8) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(exception_object);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, 0);
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(a1, v7, a3, a4);
}

{
  int v5;

  *(void *)a1 = &unk_26EE2B140;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 44) = a4;
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = *fst::TropicalWeightTpl<float>::One();
  *(void *)(a1 + 64) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 76) = -1;
  *(unsigned char *)(a1 + 82) = 0;
  *(void *)(a1 + 88) = &unk_26EE2B230;
  fst::internal::MemoryArenaImpl<48ul>::MemoryArenaImpl((void *)(a1 + 96), 1);
}

void *cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~SpecialMatcher(void *a1)
{
  *a1 = &unk_26EE2AFE8;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = &unk_26EE2B330;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~SpecialMatcher(void *a1)
{
  *a1 = &unk_26EE2AFE8;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = &unk_26EE2B330;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x23ECC24B0);
}

void cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy()
{
}

void sub_23ABE3C8C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40A8D10E09);
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 52) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 52) = a2;
    float result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(void *)(result + 8), a2);
    *(unsigned char *)(v2 + 56) = *(_DWORD *)(v2 + 20) != -1;
  }
  return result;
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    BOOL result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(*(void *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 56)) {
        return result;
      }
      BOOL result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
      *(unsigned char *)(a1 + 56) = result;
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  LogMessage::LogMessage(&v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"RhoMatcher::Find: bad label (rho)", 33);
  LogMessage::~LogMessage((LogMessage *)&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

void sub_23ABE3E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Done(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a1 + 8) + 8)
                                                                                                  + 8));
}

void *fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  BOOL result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value(*(void *)(a1 + 8));
  uint64_t v4 = result;
  if (v2 != -1)
  {
    uint64_t v5 = *result;
    *(void *)(a1 + 32) = *result;
    BOOL result = (void *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v4 + 2);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v4 + 3);
    if (!*(unsigned char *)(a1 + 24))
    {
      int v7 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16) == 1)
      {
        *(_DWORD *)BOOL result = v7;
        return result;
      }
      goto LABEL_10;
    }
    int v6 = *(_DWORD *)(a1 + 20);
    if (v6 == v5) {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
    }
    if (v6 == HIDWORD(v5))
    {
      int v7 = *(_DWORD *)(a1 + 28);
LABEL_10:
      *(_DWORD *)(a1 + 36) = v7;
    }
  }
  return result;
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Next(uint64_t a1)
{
  return fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(void *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Properties(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 48)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v5 = result & 0xFFFFEFFF3FFAFFFFLL;
      unint64_t v6 = 0xFFFFEFFF0FF3FFFFLL;
LABEL_8:
      unint64_t v7 = result & v6;
      if (v4) {
        return v7;
      }
      else {
        return v5;
      }
    }
    if (v3 == 1)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v5 = result & 0xFFFFEFFFCFEEFFFFLL;
      unint64_t v6 = 0xFFFFEFFF0FCFFFFFLL;
      goto LABEL_8;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"RhoMatcher: Bad match type: ", 28);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v10);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_23ABE409C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 4) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 88);
  return v1();
}

int *fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  return fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(void *)(*(void *)(a1 + 8) + 8), a2, a3);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 52) = a2;
  fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(void *)(a1 + 8), a2);
  BOOL v4 = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
  *(unsigned char *)(a1 + 56) = v4;
  if (v4) {
    return -1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  return fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Priority(v6, a2);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(uint64_t a1, uint64_t a2, int a3, int a4, char a5, int a6, uint64_t a7)
{
  *(void *)a1 = &unk_26EE2B0A8;
  if (!a7) {
    operator new();
  }
  *(void *)(a1 + 8) = a7;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 48) = -1;
  *(unsigned char *)(a1 + 56) = a5;
  *(unsigned char *)(a1 + 57) = 0;
  if (a3 == 3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"PhiMatcher: Bad match type", 26);
    LogMessage::~LogMessage((LogMessage *)&v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 4;
    *(unsigned char *)(a1 + 57) = 1;
  }
  if (a6 == 1)
  {
    BOOL v10 = 1;
  }
  else
  {
    if (a6)
    {
      *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
      return a1;
    }
    BOOL v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = v10;
  return a1;
}

void sub_23ABE438C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = *(void *)(v18 + 8);
  *(void *)(v18 + 8) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  _Unwind_Resume(exception_object);
}

void *fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~PhiMatcher(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26EE2B0A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~PhiMatcher(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26EE2B0A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x23ECC24B0);
}

void fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy()
{
}

void sub_23ABE456C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C4068031F8ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 48) != a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    uint64_t result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(void *)(result + 8), a2);
    *(_DWORD *)(v3 + 48) = v2;
    *(unsigned char *)(v3 + 25) = *(_DWORD *)(v3 + 20) != -1;
  }
  return result;
}

BOOL fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 20) == a2 && (a2 + 1) >= 2)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v23, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v23, "ERROR");
    }
    LogMessage::LogMessage((BOOL *)__p, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"PhiMatcher::Find: bad label (phi): ", 35);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)__p);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    BOOL v6 = 0;
    *(unsigned char *)(a1 + 57) = 1;
    return v6;
  }
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(void *)(a1 + 8), *(unsigned int *)(a1 + 48));
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 52) = *fst::TropicalWeightTpl<float>::One();
  if (*(_DWORD *)(a1 + 20)) {
    goto LABEL_6;
  }
  if (a2 == -1) {
    return 0;
  }
  if (!a2)
  {
    if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(void *)(a1 + 8), -1))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      int v17 = 0;
      goto LABEL_43;
    }
    *(_DWORD *)(a1 + 28) = 0;
    return 1;
  }
LABEL_6:
  if ((a2 + 1) >= 2 && *(unsigned char *)(a1 + 25))
  {
    LODWORD(v5) = *(_DWORD *)(a1 + 48);
    BOOL v6 = 1;
    if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(void *)(a1 + 8), a2))
    {
      unint64_t v7 = (void *)MEMORY[0x263F8C0F8];
      while (1)
      {
        if (*(_DWORD *)(a1 + 20)) {
          int v8 = *(_DWORD *)(a1 + 20);
        }
        else {
          int v8 = -1;
        }
        BOOL v6 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(void *)(a1 + 8), v8);
        if (!v6) {
          return v6;
        }
        if (*(unsigned char *)(a1 + 56)
          && *(_DWORD *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(void *)(a1 + 8))
                       + 12) == v5)
        {
          *(_DWORD *)(a1 + 28) = a2;
          return 1;
        }
        uint64_t v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(void *)(a1 + 8));
        float v10 = *(float *)(a1 + 52);
        if (v10 == -INFINITY || (float v11 = *(float *)(v9 + 8), v11 >= -INFINITY) && v11 <= -INFINITY)
        {
          float v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else
        {
          BOOL v13 = v11 == INFINITY || v10 == INFINITY;
          float v12 = v10 + v11;
          if (v13) {
            float v12 = INFINITY;
          }
        }
        *(float *)(a1 + 52) = v12;
        uint64_t v5 = *(unsigned int *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(void *)(a1 + 8))
                             + 12);
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(*(void *)(a1 + 8));
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(a1 + 8))) {
          break;
        }
LABEL_36:
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(void *)(a1 + 8), v5);
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(void *)(a1 + 8), a2)) {
          return v6;
        }
      }
      int v14 = FLAGS_fst_error_fatal;
      if (FLAGS_fst_error_fatal)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "FATAL");
        LogMessage::LogMessage(&v22, (uint64_t)v23);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        LogMessage::LogMessage(&v21, (uint64_t)__p);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"PhiMatcher: Phi non-determinism not supported", 45);
      if (v14)
      {
        LogMessage::~LogMessage((LogMessage *)&v22);
        if (v24 < 0)
        {
          uint64_t v15 = v23[0];
LABEL_34:
          operator delete(v15);
        }
      }
      else
      {
        LogMessage::~LogMessage((LogMessage *)&v21);
        if (v20 < 0)
        {
          uint64_t v15 = __p[0];
          goto LABEL_34;
        }
      }
      *(unsigned char *)(a1 + 57) = 1;
      goto LABEL_36;
    }
    return v6;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  int v17 = a2;
LABEL_43:
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(v16, v17);
}

void sub_23ABE4944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(a1 + 8));
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  if (v2 != -1)
  {
    if (v2)
    {
LABEL_3:
      uint64_t v3 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(void *)(a1 + 8));
      *(void *)(a1 + 32) = *(void *)v3;
      BOOL v4 = (_DWORD *)(a1 + 32);
      float v5 = *(float *)(v3 + 8);
      *(float *)(a1 + 40) = v5;
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(v3 + 12);
      float v6 = *(float *)(a1 + 52);
      if (v6 == -INFINITY || v5 >= -INFINITY && v5 <= -INFINITY)
      {
        float v7 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        BOOL v10 = v5 == INFINITY || v6 == INFINITY;
        float v7 = v6 + v5;
        if (v10) {
          float v7 = INFINITY;
        }
      }
      *(float *)(a1 + 40) = v7;
      int v11 = *(_DWORD *)(a1 + 28);
      if (v11 == -1) {
        return (uint64_t)v4;
      }
      if (*(unsigned char *)(a1 + 24))
      {
        int v12 = *(_DWORD *)(a1 + 20);
        if (*(_DWORD *)(a1 + 32) == v12) {
          *BOOL v4 = v11;
        }
        if (*(_DWORD *)(a1 + 36) != v12) {
          return (uint64_t)v4;
        }
      }
      else if (*(_DWORD *)(a1 + 16) == 1)
      {
        *BOOL v4 = v11;
        return (uint64_t)v4;
      }
      *(_DWORD *)(a1 + 36) = v11;
      return (uint64_t)v4;
    }
LABEL_23:
    int v13 = *fst::TropicalWeightTpl<float>::One();
    *(void *)(a1 + 32) = 0xFFFFFFFFLL;
    int v14 = (_DWORD *)(a1 + 32);
    int v15 = v14[4];
    BOOL v4 = v14;
    v14[2] = v13;
    v14[3] = v15;
    if (*(v14 - 4) == 2) {
      *(void *)int v14 = 0xFFFFFFFF00000000;
    }
    return (uint64_t)v4;
  }
  if (*(float *)(a1 + 52) != *(float *)fst::TropicalWeightTpl<float>::One())
  {
    if (*(_DWORD *)(a1 + 28)) {
      goto LABEL_3;
    }
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(v8);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(*(void *)(a1 + 8));
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 57)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (v3 == 2)
    {
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v5 = result;
      }
      else {
        uint64_t v5 = result | 0x8800000;
      }
      int v6 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v7 = v5 & 0xFFFFEFFF0FFAFFFFLL;
      unint64_t v4 = 0xFFFFEFFF0FF3FFFFLL;
      goto LABEL_14;
    }
    if (v3 == 1)
    {
      unint64_t v4 = 0xFFFFEFFF0FCFFFFFLL;
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v5 = result;
      }
      else {
        uint64_t v5 = result | 0x2800000;
      }
      int v6 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v7 = v5 & 0xFFFFEFFF0FEEFFFFLL;
LABEL_14:
      unint64_t v8 = v5 & v4;
      if (v6) {
        return v8;
      }
      else {
        return v7;
      }
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"PhiMatcher: Bad match type: ", 28);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_23ABE4CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 4) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 88);
  return v1();
}

int *fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
  uint64_t result = (int *)(*(void *(**)(char *__return_ptr))(*(void *)v6 + 24))((char *)&v19 + 4);
  if (*(_DWORD *)(a1 + 20) == -1)
  {
    float v8 = *((float *)&v19 + 1);
  }
  else
  {
    uint64_t result = fst::TropicalWeightTpl<float>::Zero();
    float v8 = *((float *)&v19 + 1);
    LODWORD(v21) = HIDWORD(v19);
    float v20 = 0.0;
    float v20 = *(float *)result;
    if (*((float *)&v19 + 1) == v20)
    {
      HIDWORD(v19) = *fst::TropicalWeightTpl<float>::One();
      while (1)
      {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(void *)(a1 + 8), a2);
        uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 24))(&v19);
        char v10 = fst::TropicalWeightTpl<float>::Zero();
        LODWORD(v21) = v19;
        float v20 = 0.0;
        float v20 = *(float *)v10;
        v11.n128_u32[0] = v19;
        if (*(float *)&v19 != v20) {
          break;
        }
        int v12 = *(_DWORD *)(a1 + 20) ? *(_DWORD *)(a1 + 20) : -1;
        if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(void *)(a1 + 8), v12)) {
          break;
        }
        uint64_t v13 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(void *)(a1 + 8));
        if (*((float *)&v19 + 1) == -INFINITY || (float v14 = *(float *)(v13 + 8), v14 >= -INFINITY) && v14 <= -INFINITY)
        {
          float v15 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else
        {
          BOOL v16 = v14 == INFINITY || *((float *)&v19 + 1) == INFINITY;
          float v15 = *((float *)&v19 + 1) + v14;
          if (v16) {
            float v15 = INFINITY;
          }
        }
        *((float *)&v19 + 1) = v15;
        if (a2 == *(_DWORD *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(void *)(a1 + 8))
                                     + 12))
        {
          uint64_t result = fst::TropicalWeightTpl<float>::Zero();
          goto LABEL_26;
        }
        a2 = *(unsigned int *)(fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(*(void *)(a1 + 8))
                             + 12);
      }
      uint64_t v17 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v11);
      uint64_t result = (int *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v17 + 24))(&v21);
      if (*((float *)&v19 + 1) == -INFINITY || *(float *)&v21 >= -INFINITY && *(float *)&v21 <= -INFINITY)
      {
        uint64_t result = fst::TropicalWeightTpl<float>::NoWeight();
LABEL_26:
        float v8 = *(float *)result;
        goto LABEL_32;
      }
      BOOL v18 = *(float *)&v21 == INFINITY || *((float *)&v19 + 1) == INFINITY;
      float v8 = *((float *)&v19 + 1) + *(float *)&v21;
      if (v18) {
        float v8 = INFINITY;
      }
    }
  }
LABEL_32:
  *a3 = v8;
  return result;
}

uint64_t fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v3 != -1)
  {
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(v4, a2);
    if (*(_DWORD *)(a1 + 20)) {
      int v5 = *(_DWORD *)(a1 + 20);
    }
    else {
      int v5 = -1;
    }
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(*(void *)(a1 + 8), v5)) {
      return -1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v7 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 72))(v4) + 32);
  return v7();
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Flags()
{
  return 0;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Final(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 24);
  return v1();
}

void fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::PhiMatcher(void *a1)
{
  *a1 = &unk_26EE2B0A8;
  operator new();
}

void sub_23ABE524C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C4054F459C6);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26EE2B140;
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), a3);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = &unk_26EE2B230;
  fst::internal::MemoryArenaImpl<48ul>::MemoryArenaImpl((void *)(a1 + 96), 1);
}

void sub_23ABE536C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(a1);
  JUMPOUT(0x23ECC24B0);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_23ABE541C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C4054F459C6);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 4) {
    return 4;
  }
  if (v2 == 1) {
    uint64_t v6 = 0x10000000;
  }
  else {
    uint64_t v6 = 0x40000000;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v2 == 1) {
    uint64_t v8 = 805306368;
  }
  else {
    uint64_t v8 = 3221225472;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 56))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 40);
  }
  uint64_t v10 = 0x80000000;
  if (v2 == 1) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 4;
  }
  else {
    return 5;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + ++*(void *)(result + 24) = a2;
    if (*(_DWORD *)(result + 40) == 4)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      LogMessage::LogMessage(&v8, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"SortedMatcher: Bad match type", 29);
      LogMessage::~LogMessage((LogMessage *)&v8);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 82) = 1;
    }
    fst::Destroy<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(*(void *)(v3 + 32), v3 + 88);
    uint64_t v4 = *(void **)(v3 + 144);
    if (v4)
    {
      *(void *)(v3 + 144) = v4[5];
    }
    else
    {
      uint64_t v4 = (void *)fst::internal::MemoryArenaImpl<48ul>::Allocate((void *)(v3 + 96), 1);
      v4[5] = 0;
    }
    uint64_t v5 = *(void *)(v3 + 16);
    v4[4] = 0;
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 120))(v5, a2, v4);
    *(void *)(v3 + 32) = v4;
    if (*v4) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v4 + 72))(*v4, 16, 16);
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 16) + 32))(*(void *)(v3 + 16), a2);
    *(void *)(v3 + 56) = result;
    *(_DWORD *)(v3 + 76) = a2;
  }
  return result;
}

void sub_23ABE56A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 81) = 1;
  if (*(unsigned char *)(a1 + 82))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 48) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 80) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 48) = v4;
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Search(a1)
        || *(unsigned char *)(a1 + 80) != 0;
  }
  return result;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 16))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 81)) {
    return 0;
  }
  uint64_t v4 = **(void **)(a1 + 32);
  if (v4)
  {
    if (*(_DWORD *)(a1 + 40) == 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = 2;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 72))(v4, v5, 15);
  }
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetLabel(a1) != *(_DWORD *)(a1 + 48);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    return a1 + 64;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 72))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 32);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)*v3 + 24);
  return v4();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 80))
  {
    *(unsigned char *)(result + 80) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 32);
    BOOL result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 32))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2 | (4 * *(unsigned __int8 *)(a1 + 82));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 24);
  return v1();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Priority(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 32);
  return v1();
}

void *fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B230;
  a1[1] = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B230;
  a1[1] = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<40ul>::Size()
{
  return 40;
}

void *fst::internal::MemoryPoolImpl<40ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B230;
  a1[1] = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<40ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B230;
  a1[1] = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<48ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2B258;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABE5CC4(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<48ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<48ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<48ul>::Size()
{
  return 48;
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_26EE2B140;
  fst::Destroy<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1[4], (uint64_t)(a1 + 11));
  a1[11] = &unk_26EE2B230;
  a1[12] = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 15);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::Destroy<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    BOOL result = *(void *)result;
    if (result)
    {
      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    else
    {
      uint64_t v4 = *(_DWORD **)(v3 + 24);
      if (v4) {
        --*v4;
      }
    }
    *(void *)(v3 + 40) = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = v3;
  }
  return result;
}

uint64_t fst::internal::MemoryArenaImpl<48ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 48 * a2;
  unint64_t v4 = a1[1];
  if (192 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Search(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 32);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 40) == 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 72))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
  {
    unint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v6 + ((v5 - v6) >> 1);
        BOOL v8 = *(void **)(a1 + 32);
        if (*v8) {
          (*(void (**)(void, unint64_t))(*(void *)*v8 + 56))(*v8, v6 + ((v5 - v6) >> 1));
        }
        else {
          v8[4] = v7;
        }
        if ((int)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetLabel(a1) >= *(_DWORD *)(a1 + 48)) {
          unint64_t v5 = v6 + ((v5 - v6) >> 1);
        }
        else {
          unint64_t v6 = v7 + 1;
        }
      }
      while (v6 < v5);
    }
    else
    {
      unint64_t v6 = 0;
    }
    BOOL v16 = *(void **)(a1 + 32);
    if (*v16) {
      (*(void (**)(void, unint64_t))(*(void *)*v16 + 56))(*v16, v6);
    }
    else {
      v16[4] = v6;
    }
    if (v6 < *(void *)(a1 + 56)) {
      return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetLabel(a1) == *(_DWORD *)(a1 + 48);
    }
  }
  else
  {
    unint64_t v4 = *(void **)(a1 + 32);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 48))(*v4);
    }
    else {
      v4[4] = 0;
    }
    while (1)
    {
      uint64_t v9 = *(void **)(a1 + 32);
      if (*v9)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v9 + 16))(*v9)) {
          return 0;
        }
      }
      else if (v9[4] >= v9[2])
      {
        return 0;
      }
      int Label = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetLabel(a1);
      int v11 = *(_DWORD *)(a1 + 48);
      BOOL v12 = Label == v11;
      int v13 = 2 * (Label > v11);
      if (v12) {
        int v13 = 1;
      }
      if (v13) {
        break;
      }
      float v14 = *(void **)(a1 + 32);
      if (*v14) {
        (*(void (**)(void))(*(void *)*v14 + 32))(*v14);
      }
      else {
        ++v14[4];
      }
    }
    if (v13 == 1) {
      return 1;
    }
  }
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetLabel(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (*v2) {
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*v2 + 24))(*v2);
  }
  else {
    uint64_t v3 = v2[1] + 16 * v2[4];
  }
  if (*(_DWORD *)(a1 + 40) == 1) {
    unint64_t v4 = (unsigned int *)v3;
  }
  else {
    unint64_t v4 = (unsigned int *)(v3 + 4);
  }
  return *v4;
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_26EE2B298;
  if (!a6) {
    operator new();
  }
  *(void *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  if (a3 == 3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"SigmaMatcher: Bad match type", 28);
    LogMessage::~LogMessage((LogMessage *)&v17);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 4;
    *(unsigned char *)(a1 + 52) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v12, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v12, "ERROR");
    }
    LogMessage::LogMessage(&v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"SigmaMatcher: 0 cannot be used as sigma_label", 45);
    LogMessage::~LogMessage((LogMessage *)&v14);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    *(_DWORD *)(a1 + 20) = -1;
    *(unsigned char *)(a1 + 52) = 1;
  }
  if (a5 == 1)
  {
    BOOL v10 = 1;
  }
  else
  {
    if (a5)
    {
      *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
      return a1;
    }
    BOOL v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = v10;
  return a1;
}

void sub_23ABE64B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(void *)(v24 + 8);
  *(void *)(v24 + 8) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(exception_object);
}

void *fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~SigmaMatcher(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26EE2B298;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~SigmaMatcher(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26EE2B298;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x23ECC24B0);
}

void fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Copy()
{
}

void sub_23ABE66C4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 56) != a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    *(_DWORD *)(result + 56) = a2;
    uint64_t v4 = *(void *)(result + 8);
    if (*(_DWORD *)(v4 + 48) != a2)
    {
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(void *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 48) = v2;
      *(unsigned char *)(v4 + 25) = *(_DWORD *)(v4 + 20) != -1;
    }
    int v5 = *(_DWORD *)(v3 + 20);
    BOOL result = v5 != -1
          && fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(v3 + 8), v5);
    *(unsigned char *)(v3 + 25) = result;
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Find(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 48) = a2;
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    BOOL result = fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 25)) {
        return result;
      }
      BOOL result = fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  LogMessage::LogMessage(&v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"SigmaMatcher::Find: bad label (sigma)", 37);
  LogMessage::~LogMessage((LogMessage *)&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + 52) = 1;
  return result;
}

void sub_23ABE68AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Done(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(a1 + 8)
                                                                                                  + 8));
}

void *fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  BOOL result = (void *)fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(void *)(a1 + 8));
  uint64_t v4 = result;
  if (v2 != -1)
  {
    uint64_t v5 = *result;
    *(void *)(a1 + 32) = *result;
    BOOL result = (void *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v4 + 2);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)v4 + 3);
    if (!*(unsigned char *)(a1 + 24))
    {
      int v7 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16) == 1)
      {
        *(_DWORD *)BOOL result = v7;
        return result;
      }
      goto LABEL_10;
    }
    int v6 = *(_DWORD *)(a1 + 20);
    if (v6 == v5) {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
    }
    if (v6 == HIDWORD(v5))
    {
      int v7 = *(_DWORD *)(a1 + 28);
LABEL_10:
      *(_DWORD *)(a1 + 36) = v7;
    }
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(uint64_t a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(*(void *)(*(void *)(a1 + 8) + 8));
  BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(a1 + 8) + 8));
  if (result && *(unsigned char *)(a1 + 25) && *(_DWORD *)(a1 + 28) == -1 && *(int *)(a1 + 48) >= 1)
  {
    BOOL result = fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Properties(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 52)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 4)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = -4030464001;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 2)
    {
      uint64_t v4 = -3225223169;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 1)
    {
      uint64_t v4 = -809304065;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"SigmaMatcher: Bad match type: ", 30);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_23ABE6B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 4) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 88);
  return v1();
}

int *fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  return fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) != -1)
  {
    fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(a1, a2);
    if (*(unsigned char *)(a1 + 25)) {
      return -1;
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  return fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Priority(v5, a2);
}

void fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SigmaMatcher(void *a1)
{
  *a1 = &unk_26EE2B298;
  operator new();
}

void sub_23ABE6D38(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C4068031F8ALL);
  _Unwind_Resume(a1);
}

void *fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~RhoMatcher(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26EE2B330;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~RhoMatcher(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26EE2B330;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x23ECC24B0);
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Copy()
{
}

void sub_23ABE6EAC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C405FEA184BLL);
  _Unwind_Resume(a1);
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::RhoMatcher(void *a1)
{
  *a1 = &unk_26EE2B330;
  operator new();
}

void sub_23ABE6F70(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

void sub_23ABE7128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  v18[11] = v19;
  v18[12] = &unk_26EE2B258;
  std::__list_imp<std::unique_ptr<char []>>::clear(v18 + 15);
  uint64_t v21 = v18[1];
  v18[1] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

double fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase1<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  v7[0] = *(unsigned char *)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = 0;
  char v10 = 1;
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v11 = *(_OWORD *)(a3 + 16);
  long long v12 = v5;
  __int16 v13 = 1;
  std::allocate_shared[abi:ne180100]<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>(a1, a2, (uint64_t)v7, v14);
  double result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

void *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(void *a1)
{
  *a1 = &unk_26EE2C748;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(void *a1)
{
  *a1 = &unk_26EE2C748;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_23ABE742C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator()
{
}

void sub_23ABE7520(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1, a2);
}

void *std::allocate_shared[abi:ne180100]<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23ABE75DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,fst::ComposeFstImplOptions<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2B478;
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_23ABE7638(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2B478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2B478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t std::__shared_ptr_emplace<fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(a1, a4) = &unk_26EE2B4C8;
  uint64_t v8 = *(uint64_t **)(a4 + 48);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = *v8;
  *(void *)(a1 + 144) = *v8;
  *(void *)(a1 + 152) = v8[1];
  *(void *)(a1 + 160) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 72))(v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 72))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 56);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a4 + 64) != 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  long long v11 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
  long long v12 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (!fst::CompatSymbols(v11, v12, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    }
    LogMessage::LogMessage(&v24, (uint64_t)&__str);
    __int16 v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ComposeFst: Output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    LogMessage::~LogMessage((LogMessage *)&v24);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 96))(*(void *)(a1 + 160));
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v14);
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 104))(*(void *)(a1 + 168));
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v15);
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    LogMessage::LogMessage(&v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ComposeFstImpl: Match type: ", 28);
    std::ostream::operator<<();
    LogMessage::~LogMessage((LogMessage *)&v23);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(_DWORD *)(a1 + 188) == 4) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 56))(a3, 0xFFFFFFFF0007, 0);
  unint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 80))(*(void *)(a1 + 144), v16);
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 80))(*(void *)(a1 + 152), v17);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFF00000000FFFFLL | fst::ComposeProperties(v18, v19) & 0xFFFFFFFF0004;
  return a1;
}

void sub_23ABE7B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  BOOL v28 = *v26;
  *uint64_t v26 = 0;
  if (v28) {
    std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100]((uint64_t)v26, v28);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v25);
  _Unwind_Resume(a1);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 88))(*(void *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) != 2)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ComposeFst: 1st argument cannot perform required matching ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(sort?).", 8);
  }
  else if (((*(uint64_t (**)(void))(**(void **)(a1 + 152) + 88))(*(void *)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1) != 1)
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ComposeFst: 2nd argument cannot perform required matching ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(sort?).", 8);
  }
  else
  {
    int v2 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0);
    int v3 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0);
    if (v3 == 1 && v2 == 2) {
      int v5 = 3;
    }
    else {
      int v5 = 2;
    }
    BOOL v6 = v2 == 2;
    if (v2 == 2) {
      int v7 = v5;
    }
    else {
      int v7 = 1;
    }
    if (v6 || v3 == 1) {
      goto LABEL_36;
    }
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) == 2)
    {
      int v7 = 2;
      goto LABEL_36;
    }
    int v7 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1) == 1) {
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  LogMessage::~LogMessage((LogMessage *)&v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  int v7 = 4;
LABEL_36:
  *(_DWORD *)(a1 + 188) = v7;
}

void sub_23ABE7F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(uint64_t a1)
{
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 80))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 80))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_23ABE81A4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10F3C40FFC02FA9);
  _Unwind_Resume(a1);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 104) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  int v7 = (int *)a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(v7, v5, v6, &v16);
  if (fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_23ABE834C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C402D4BD5F2);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 16))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 16))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

int *fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(void *a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1[22] + 104);
  int v7 = (unsigned int *)(v6 + 12 * a2);
  uint64_t v8 = *v7;
  fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(void *)(*(void *)(a1[18] + 8) + 8), v8, &v15);
  uint64_t result = fst::TropicalWeightTpl<float>::Zero();
  float v10 = v15;
  float v17 = v15;
  float v16 = 0.0;
  float v16 = *(float *)result;
  if (v15 != v16)
  {
    uint64_t v11 = v7[1];
    fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(*(void *)(*(void *)(a1[19] + 8) + 8), v11, &v14);
    uint64_t result = fst::TropicalWeightTpl<float>::Zero();
    float v10 = v14;
    float v17 = v14;
    float v16 = 0.0;
    float v16 = *(float *)result;
    if (v14 != v16)
    {
      int v12 = (int *)a1[17];
      LOBYTE(v17) = *(unsigned char *)(v6 + 12 * a2 + 8);
      uint64_t result = fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(v12, v8, v11, &v17);
      if (v15 == -INFINITY || v14 >= -INFINITY && v14 <= -INFINITY)
      {
        uint64_t result = fst::TropicalWeightTpl<float>::NoWeight();
        float v10 = *(float *)result;
      }
      else
      {
        BOOL v13 = v14 == INFINITY || v15 == INFINITY;
        float v10 = v15 + v14;
        if (v13) {
          float v10 = INFINITY;
        }
      }
    }
  }
  *a3 = v10;
  return result;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26EE2AF10;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26EE2B5C0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 60) = 0xFFFFFFFFLL;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    operator new();
  }
  *(void *)(a1 + 120) = v4;
  BOOL v5 = v4 == 0;
  *(unsigned char *)(a1 + 128) = v5;
  if (*(unsigned char *)(a2 + 24)) {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 129) = v5;
  return a1;
}

void sub_23ABE86C0(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v2, 0x10A0C40690396FALL);
  if (*v3) {
    operator delete(*v3);
  }
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitMatcher()
{
  return 0;
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(uint64_t a1)
{
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(uint64_t a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_23ABE8840(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 7);
  uint64_t v6 = *v3;
  if (*v3)
  {
    uint64_t v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void *)(v2 + 8 * v3++), a1 + 9);
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
}

uint64_t fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (uint64_t *)(result + 24);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(v3 + 48));
    uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a2);
    *(void *)(v3 + 64) = *(void *)(result + 56);
    *(void *)(result + 56) = v3;
  }
  return result;
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)**a1;
  if (v2)
  {
    v1[1] = (uint64_t)v2;
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(v1 + 3, v2, (v1[2] - (uint64_t)v2) >> 4);
  }
}

void fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    if (!__p) {
      return;
    }
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    if (!__p) {
      return;
    }
    __p[2] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    if (!__p) {
      return;
    }
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    if (!__p) {
      return;
    }
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    if (!__p) {
      return;
    }
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    if (!__p) {
      return;
    }
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    if (!__p) {
      return;
    }
    __p[128] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x11uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_23ABE8BB8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__append(a1, v5);
  }
}

void std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v12);
    }
    else {
      BOOL v13 = 0;
    }
    float v14 = v13;
    float v15 = &v13[8 * v10];
    float v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    float v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer(&v14);
  }
}

void sub_23ABE8D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::MemoryPoolBase>>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::MemoryPoolBase>>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::MemoryPoolBase>>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::MemoryPoolBase>>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::MemoryPoolBase>>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::MemoryPoolBase>>,std::reverse_iterator<std::unique_ptr<fst::MemoryPoolBase>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<fst::MemoryPoolBase>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<16ul>::Size()
{
  return 16;
}

void *fst::internal::MemoryPoolImpl<16ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<16ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<24ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2B670;
  a1[1] = 24 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABE9268(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<24ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<24ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<24ul>::Size()
{
  return 24;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x21uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_23ABE9418(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<32ul>::Size()
{
  return 32;
}

void *fst::internal::MemoryPoolImpl<32ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<32ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<40ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2B730;
  a1[1] = 40 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABE96B8(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<40ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<40ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<40ul>::Size()
{
  return 40;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_23ABE9868(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<64ul>::Size()
{
  return 64;
}

void *fst::internal::MemoryPoolImpl<64ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<64ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<72ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2B7F0;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABE9B08(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<72ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<72ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<72ul>::Size()
{
  return 72;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_23ABE9CB8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<128ul>::Size()
{
  return 128;
}

void *fst::internal::MemoryPoolImpl<128ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<128ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<136ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2B8B0;
  a1[1] = 136 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABE9F58(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<136ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<136ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<136ul>::Size()
{
  return 136;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_23ABEA108(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<256ul>::Size()
{
  return 256;
}

void *fst::internal::MemoryPoolImpl<256ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<256ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<264ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2B970;
  a1[1] = 264 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEA3A8(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<264ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<264ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<264ul>::Size()
{
  return 264;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_23ABEA55C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<512ul>::Size()
{
  return 512;
}

void *fst::internal::MemoryPoolImpl<512ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<512ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<520ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2BA30;
  a1[1] = 520 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEA7FC(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<520ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<520ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<520ul>::Size()
{
  return 520;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x401uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_23ABEA9B0(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<1024ul>::Size()
{
  return 1024;
}

void *fst::internal::MemoryPoolImpl<1024ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<1024ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<1032ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2BAF0;
  a1[1] = 1032 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEAC50(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<1032ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<1032ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<1032ul>::Size()
{
  return 1032;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_23ABEAE00(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_23ABEB000(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_23ABEB200(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_23ABEB404(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x401uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_23ABEB608(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x800)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x801uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x4000)) {
    operator new();
  }
  return *(void *)(v1 + 0x4000);
}

void sub_23ABEB80C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BCC8;
  a1[1] = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BCC8;
  a1[1] = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<2048ul>::Size()
{
  return 2048;
}

void *fst::internal::MemoryPoolImpl<2048ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BCC8;
  a1[1] = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<2048ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BCC8;
  a1[1] = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<2056ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2BCF0;
  a1[1] = 2056 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEBAAC(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<2056ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<2056ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<2056ul>::Size()
{
  return 2056;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x8007)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x1001uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x8000)) {
    operator new();
  }
  return *(void *)(v1 + 0x8000);
}

void sub_23ABEBC68(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BD88;
  a1[1] = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BD88;
  a1[1] = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<4096ul>::Size()
{
  return 4096;
}

void *fst::internal::MemoryPoolImpl<4096ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BD88;
  a1[1] = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<4096ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BD88;
  a1[1] = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<4104ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2BDB0;
  a1[1] = 4104 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEBF08(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<4104ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<4104ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<4104ul>::Size()
{
  return 4104;
}

void *std::__list_imp<int,fst::PoolAllocator<int>>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v3 = *result;
    uint64_t v2 = (uint64_t *)result[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*result + 8);
    **(void **)(v3 + 8) = v4;
    result[2] = 0;
    while (v2 != (uint64_t *)v1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      uint64_t result = (void *)std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(v1, (uint64_t)v2);
      uint64_t v2 = v5;
    }
  }
  return result;
}

uint64_t std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(uint64_t a1, uint64_t a2)
{
  uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(*(void *)(a1 + 24));
  if (a2)
  {
    *(void *)(a2 + ++*(void *)(result + 24) = *(void *)(result + 56);
    *(void *)(result + 56) = a2;
  }
  return result;
}

void fst::PoolAllocator<std::__list_node<int,void *>>::deallocate(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>(*a1);
    if (!__p) {
      return;
    }
    __p[6] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(*a1);
    if (!__p) {
      return;
    }
    __p[3] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>(*a1);
    if (!__p) {
      return;
    }
    __p[12] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>(*a1);
    if (!__p) {
      return;
    }
    __p[24] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>(*a1);
    if (!__p) {
      return;
    }
    __p[48] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>(*a1);
    if (!__p) {
      return;
    }
    __p[96] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>(*a1);
    if (!__p) {
      return;
    }
    __p[192] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x19uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_23ABEC278(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<24ul>::Size()
{
  return 24;
}

void *fst::internal::MemoryPoolImpl<24ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<24ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<32ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2BE70;
  a1[1] = 32 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEC514(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<32ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<32ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<32ul>::Size()
{
  return 32;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x187)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x31uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 384)) {
    operator new();
  }
  return *(void *)(v1 + 384);
}

void sub_23ABEC6C4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x307)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x61uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 768)) {
    operator new();
  }
  return *(void *)(v1 + 768);
}

void sub_23ABEC8C4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<96ul>::Size()
{
  return 96;
}

void *fst::internal::MemoryPoolImpl<96ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<96ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<104ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2BF70;
  a1[1] = 104 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABECB64(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<104ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<104ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<104ul>::Size()
{
  return 104;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x607)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0xC1uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1536)) {
    operator new();
  }
  return *(void *)(v1 + 1536);
}

void sub_23ABECD14(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<192ul>::Size()
{
  return 192;
}

void *fst::internal::MemoryPoolImpl<192ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<192ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<200ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2C030;
  a1[1] = 200 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABECFB4(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<200ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<200ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<200ul>::Size()
{
  return 200;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC07)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x181uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 3072)) {
    operator new();
  }
  return *(void *)(v1 + 3072);
}

void sub_23ABED164(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<384ul>::Size()
{
  return 384;
}

void *fst::internal::MemoryPoolImpl<384ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<384ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<392ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2C0F0;
  a1[1] = 392 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABED404(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<392ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<392ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<392ul>::Size()
{
  return 392;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x300)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x301uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 6144)) {
    operator new();
  }
  return *(void *)(v1 + 6144);
}

void sub_23ABED5B8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<768ul>::Size()
{
  return 768;
}

void *fst::internal::MemoryPoolImpl<768ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<768ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<776ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2C1B0;
  a1[1] = 776 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABED858(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<776ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<776ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<776ul>::Size()
{
  return 776;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x600)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x601uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 12288)) {
    operator new();
  }
  return *(void *)(v1 + 12288);
}

void sub_23ABEDA0C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<1536ul>::Size()
{
  return 1536;
}

void *fst::internal::MemoryPoolImpl<1536ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<1536ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<1544ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2C270;
  a1[1] = 1544 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEDCAC(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<1544ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<1544ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<1544ul>::Size()
{
  return 1544;
}

uint64_t *fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8) - 1;
  *(void *)(*a1 + 8) = v3;
  if (!v3)
  {
    uint64_t v5 = (void **)(v2 + 16);
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x23ECC24B0](v2, 0x1020C40DB654AE0);
  }
  return a1;
}

void std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<fst::MemoryPoolBase>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2B5C0;
  if (*(unsigned char *)(a1 + 129))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 120);
    if (v2)
    {
      uint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorCacheStore(v2);
      MEMORY[0x23ECC24B0](v3, 0x10A0C40690396FALL);
    }
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4) {
    operator delete(v4);
  }
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorCacheStore(uint64_t *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(a1);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 10);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 7);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 72))(a4);
  *(void *)(a1 + ++*(void *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_23ABEE074(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v2, 0x10A1C40A8D10E09);
  uint64_t v4 = *v1;
  uint64_t *v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::CompactHashBiTable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  *a1 = a3;
  if (!a4) {
    operator new();
  }
  a1[1] = a4;
  a1[2] = a1;
  a1[3] = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set();
}

void sub_23ABEE1B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x23ECC24B0](v3, 0xC400A2AC0F1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>(v3, a2);
    uint64_t v7 = &v6[12 * v5];
    unint64_t v9 = &v6[12 * v8];
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      uint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set()
{
}

void sub_23ABEE3EC(_Unwind_Exception *a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  }
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 16));
  return a1;
}

void std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
}

void fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::deallocate(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(*a1);
    if (!__p) {
      return;
    }
    __p[2] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(*a1);
    if (!__p) {
      return;
    }
    __p[1] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(*a1);
    if (!__p) {
      return;
    }
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(*a1);
    if (!__p) {
      return;
    }
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(*a1);
    if (!__p) {
      return;
    }
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(*a1);
    if (!__p) {
      return;
    }
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(*a1);
    if (!__p) {
      return;
    }
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x47)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 9uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 64)) {
    operator new();
  }
  return *(void *)(v1 + 64);
}

void sub_23ABEE67C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C308;
  a1[1] = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C308;
  a1[1] = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryPoolImpl<8ul>::Size()
{
  return 8;
}

void *fst::internal::MemoryPoolImpl<8ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C308;
  a1[1] = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::internal::MemoryPoolImpl<8ul>::~MemoryPoolImpl(void *a1)
{
  *a1 = &unk_26EE2C308;
  a1[1] = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::MemoryArenaImpl<16ul>::MemoryArenaImpl(void *a1, uint64_t a2)
{
  *a1 = &unk_26EE2C330;
  a1[1] = 16 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_23ABEE918(_Unwind_Exception *a1)
{
  std::__list_imp<std::unique_ptr<char []>>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::internal::MemoryArenaImpl<16ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  return a1;
}

void fst::internal::MemoryArenaImpl<16ul>::~MemoryArenaImpl(void *a1)
{
  *a1 = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 3);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::MemoryArenaImpl<16ul>::Size()
{
  return 16;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x11uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_23ABEEAC8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x21uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_23ABEECC8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_23ABEEEC8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_23ABEF0C8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_23ABEF2C8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_23ABEF4CC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + 8);
  if (a2)
  {
    unint64_t v5 = fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate((uint64_t *)(a1 + 16), a2);
    uint8x8_t v6 = *(void **)a1;
    *(void *)a1 = v5;
    if (v6) {
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100]((uint64_t)v3, v6);
    }
    uint64_t v7 = 0;
    unint64_t *v3 = a2;
    do
      *(void *)(*(void *)a1 + 8 * v7++) = 0;
    while (a2 != v7);
    uint64_t v8 = *(void **)(a1 + 24);
    if (v8)
    {
      unint64_t v9 = v8[1];
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
      }
      else
      {
        v9 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v9) = a1 + 24;
      unint64_t v12 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v9)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v8;
              goto LABEL_23;
            }
            *uint64_t v8 = *v12;
            *unint64_t v12 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
            unint64_t v12 = v8;
          }
          unint64_t v13 = v9;
LABEL_23:
          uint64_t v8 = v12;
          unint64_t v12 = (void *)*v12;
          unint64_t v9 = v13;
        }
        while (v12);
      }
    }
  }
  else
  {
    uint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v11);
    }
    unint64_t *v3 = 0;
  }
}

void *fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<24ul>::Allocate((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<16ul>::Allocate((void *)(v2 + 8), 1);
      result[1] = 0;
      return result;
    }
    uint64_t v4 = result[1];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<40ul>::Allocate((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<72ul>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<136ul>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<264ul>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<520ul>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t fst::internal::MemoryArenaImpl<16ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 16 * a2;
  unint64_t v4 = a1[1];
  if (v4 < a2 << 6) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<24ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 24 * a2;
  unint64_t v4 = a1[1];
  if (96 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<40ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 40 * a2;
  unint64_t v4 = a1[1];
  if (160 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<72ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 72 * a2;
  unint64_t v4 = a1[1];
  if (288 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<136ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 136 * a2;
  unint64_t v4 = a1[1];
  if (544 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<264ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 264 * a2;
  unint64_t v4 = a1[1];
  if (1056 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<520ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 520 * a2;
  unint64_t v4 = a1[1];
  if (2080 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(a1, *(void **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      unint64_t v4 = (void *)*v2;
      uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*(void *)(v3 + 32));
      v2[3] = *(void *)(result + 56);
      *(void *)(result + 56) = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x19uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_23ABF0220(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x187)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x31uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 384)) {
    operator new();
  }
  return *(void *)(v1 + 384);
}

void sub_23ABF0420(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x307)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x61uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 768)) {
    operator new();
  }
  return *(void *)(v1 + 768);
}

void sub_23ABF0620(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x607)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0xC1uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1536)) {
    operator new();
  }
  return *(void *)(v1 + 1536);
}

void sub_23ABF0820(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC07)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x181uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 3072)) {
    operator new();
  }
  return *(void *)(v1 + 3072);
}

void sub_23ABF0A20(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x300)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x301uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 6144)) {
    operator new();
  }
  return *(void *)(v1 + 6144);
}

void sub_23ABF0C24(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x600)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x601uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 12288)) {
    operator new();
  }
  return *(void *)(v1 + 12288);
}

void sub_23ABF0E28(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[1];
    a2[1] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    JUMPOUT(0x23ECC24B0);
  }
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2B4C8;
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 176);
    if (v2)
    {
      uint64_t v3 = (void *)v2[13];
      if (v3)
      {
        v2[14] = (uint64_t)v3;
        operator delete(v3);
      }
      std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(v2 + 4));
      uint64_t v4 = v2[1];
      v2[1] = 0;
      if (v4) {
        MEMORY[0x23ECC24B0](v4, 0xC400A2AC0F1);
      }
      uint64_t v5 = *v2;
      uint64_t *v2 = 0;
      if (v5) {
        MEMORY[0x23ECC24B0](v5, 0xC400A2AC0F1);
      }
      MEMORY[0x23ECC24B0](v2, 0x10E0C401DE81863);
    }
  }
  uint64_t v6 = *(uint64_t **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v6) {
    std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100](a1 + 136, v6);
  }
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_23ABF1224(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v3, 0x10E0C401DE81863);
  uint64_t v5 = *v2;
  uint64_t *v2 = 0;
  if (v5) {
    std::default_delete<fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator()[abi:ne180100]((uint64_t)v2, v5);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_23ABF1340(_Unwind_Exception *a1)
{
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26EE2AF10;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26EE2B5C0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 60) = 0xFFFFFFFFLL;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_23ABF14E8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v3, 0x10A0C40690396FALL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        uint64_t v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 64) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    if (*(_DWORD *)(a2 + 92) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 96) = MutableState;
  }
  return a1;
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v13 = a2;
  uint64_t v3 = a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 8;
  if (a2 >= (unint64_t)((v6 - v5) >> 3))
  {
    uint64_t v12 = 0;
    std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(v4, a2 + 1, &v12);
  }
  else
  {
    uint64_t v7 = *(void **)(v5 + 8 * a2);
    if (v7) {
      return v7;
    }
  }
  uint64_t v7 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate((uint64_t *)(a1 + 72), 1uLL);
  *(_DWORD *)uint64_t v7 = *fst::TropicalWeightTpl<float>::Zero();
  v7[5] = 0;
  *(_OWORD *)(v7 + 3) = 0u;
  *(_OWORD *)(v7 + 1) = 0u;
  uint64_t v8 = *(void *)(a1 + 80);
  v7[6] = v8;
  ++*(void *)(v8 + 8);
  v7[7] = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = v7;
  if (*(unsigned char *)a1)
  {
    unint64_t v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(a1 + 32, 0, 0, &v13);
    uint64_t v10 = *(void *)(a1 + 32);
    *unint64_t v9 = v10;
    v9[1] = a1 + 32;
    *(void *)(v10 + 8) = v9;
    *(void *)(a1 + 32) = v9;
    ++*(void *)(a1 + 48);
  }
  return v7;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  int v23 = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        uint64_t v8 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate(a1 + 9, 1uLL);
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v7 + 8);
        std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::vector<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,0>(v8 + 3, *(void *)(v7 + 24), *(void *)(v7 + 32), a1 + 10);
        *((_DWORD *)v8 + 14) = *(_DWORD *)(v7 + 56);
        *((_DWORD *)v8 + 15) = 0;
        if (*(unsigned char *)a1)
        {
          unint64_t v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>((uint64_t)(a1 + 4), 0, 0, &v23);
          uint64_t v10 = a1[4];
          *unint64_t v9 = v10;
          v9[1] = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v8;
        int v13 = v19 + 8;
        uint64_t v21 = (char *)a1[1];
        float v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          float v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        int v13 = v12 + 1;
      }
      a1[2] = v13;
      unint64_t v6 = ++v23;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

void *fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<136ul>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<72ul>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<264ul>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<520ul>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<1032ul>::Allocate((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<2056ul>::Allocate((void *)(v2 + 8), 1);
      result[256] = 0;
      return result;
    }
    uint64_t v4 = result[256];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<4104ul>::Allocate((void *)(v2 + 8), 1);
      result[512] = 0;
      return result;
    }
    uint64_t v4 = result[512];
    goto LABEL_26;
  }
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t fst::internal::MemoryArenaImpl<1032ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 1032 * a2;
  unint64_t v4 = a1[1];
  if (4128 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<2056ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 2056 * a2;
  unint64_t v4 = a1[1];
  if (8224 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<4104ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 4104 * a2;
  unint64_t v4 = a1[1];
  if (16416 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::vector<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *a4;
  a1[3] = *a4;
  ++*(void *)(v5 + 8);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>>(a1, a2, a3, (a3 - a2) >> 4);
  return a1;
}

void sub_23ABF1DF4(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 12) = *(_DWORD *)(a2 + 12);
      v7 += 16;
      a2 += 16;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23ABF1E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(a1 + 3, a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * a2];
  return result;
}

void *fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<40ul>::Allocate((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<24ul>::Allocate((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<72ul>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<136ul>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<264ul>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<520ul>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<1032ul>::Allocate((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void *std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v9 = *(void *)(a1 + 24);
  ++*(void *)(v9 + 8);
  std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__allocation_guard[abi:ne180100]<fst::PoolAllocator<std::__list_node<int,void *>>>(v10, &v9, 1uLL);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(&v9);
  uint64_t v7 = v11;
  *unint64_t v11 = a2;
  v7[1] = a3;
  *((_DWORD *)v7 + 4) = *a4;
  unint64_t v11 = 0;
  std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__destroy[abi:ne180100](v10);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v10);
  return v7;
}

void sub_23ABF2138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__allocation_guard[abi:ne180100]<fst::PoolAllocator<std::__list_node<int,void *>>>(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = *a2;
  *(void *)(v4 + 8) = *(void *)(*a2 + 8) + 1;
  *a1 = v4;
  a1[1] = a3;
  a1[2] = (uint64_t)fst::PoolAllocator<std::__list_node<int,void *>>::allocate(a1, a3);
  return a1;
}

void sub_23ABF2194(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1);
  _Unwind_Resume(a1);
}

void *fst::PoolAllocator<std::__list_node<int,void *>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<2>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<56ul>::Allocate((void *)(v2 + 8), 1);
      result[6] = 0;
      return result;
    }
    uint64_t v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<32ul>::Allocate((void *)(v2 + 8), 1);
      result[3] = 0;
      return result;
    }
    uint64_t v4 = result[3];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<4>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<104ul>::Allocate((void *)(v2 + 8), 1);
      result[12] = 0;
      return result;
    }
    uint64_t v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<8>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<200ul>::Allocate((void *)(v2 + 8), 1);
      result[24] = 0;
      return result;
    }
    uint64_t v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<16>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<392ul>::Allocate((void *)(v2 + 8), 1);
      result[48] = 0;
      return result;
    }
    uint64_t v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<32>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<776ul>::Allocate((void *)(v2 + 8), 1);
      result[96] = 0;
      return result;
    }
    uint64_t v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<64>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<1544ul>::Allocate((void *)(v2 + 8), 1);
      result[192] = 0;
      return result;
    }
    uint64_t v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t fst::internal::MemoryArenaImpl<32ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 32 * a2;
  unint64_t v4 = a1[1];
  if (v4 < a2 << 7) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<104ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 104 * a2;
  unint64_t v4 = a1[1];
  if (416 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<200ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 200 * a2;
  unint64_t v4 = a1[1];
  if (800 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<392ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 392 * a2;
  unint64_t v4 = a1[1];
  if (1568 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<776ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 776 * a2;
  unint64_t v4 = a1[1];
  if (3104 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::internal::MemoryArenaImpl<1544ul>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 1544 * a2;
  unint64_t v4 = a1[1];
  if (6176 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void std::__allocation_guard<fst::PoolAllocator<std::__list_node<int,void *>>>::__destroy[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    fst::PoolAllocator<std::__list_node<int,void *>>::deallocate(a1, v1, a1[1]);
  }
}

void std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    BOOL v24 = (char *)*a1;
    int v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      int v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter()
{
}

void sub_23ABF2B4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[1];
  v1[1] = 0;
  if (v3) {
    fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(v3);
  }
  uint64_t v4 = *v1;
  uint64_t *v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::CompactHashBiTable()
{
}

void sub_23ABF2C68(_Unwind_Exception *a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v2);
  uint64_t v4 = v1[1];
  v1[1] = 0;
  if (v4) {
    MEMORY[0x23ECC24B0](v4, 0xC400A2AC0F1);
  }
  uint64_t v5 = *v1;
  uint64_t *v1 = 0;
  if (v5) {
    MEMORY[0x23ECC24B0](v5, 0xC400A2AC0F1);
  }
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_23ABF2D40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unsigned int v7 = *a2;
  if (*a2 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v7 == -1) {
      uint64_t v9 = *(int **)(v8 + 128);
    }
    else {
      uint64_t v9 = (int *)(*(void *)(v8 + 104) + 12 * v7);
    }
    unint64_t v10 = *v9 + 7853 * v9[1] + 7867 * *((char *)v9 + 8);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t *)(a1 + 32), 1uLL);
  *unint64_t i = 0;
  i[1] = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *unint64_t i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  *unint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(void *)(result + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_23ABF304C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 == a3) {
    return 1;
  }
  BOOL result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    uint64_t v5 = *a1;
    if (a2 == -1) {
      uint64_t v6 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v6 = *(void *)(v5 + 104) + 12 * a2;
    }
    if (a3 == -1) {
      uint64_t v7 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v7 = *(void *)(v5 + 104) + 12 * a3;
    }
    if (v6 == v7) {
      return 1;
    }
    return *(_DWORD *)v6 == *(_DWORD *)v7
        && *(_DWORD *)(v6 + 4) == *(_DWORD *)(v7 + 4)
        && *(unsigned __int8 *)(v6 + 8) == *(unsigned __int8 *)(v7 + 8);
  }
  return result;
}

void *fst::PoolAllocator<std::__hash_node<int,void *>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<2>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<56ul>::Allocate((void *)(v2 + 8), 1);
      result[6] = 0;
      return result;
    }
    uint64_t v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<32ul>::Allocate((void *)(v2 + 8), 1);
      result[3] = 0;
      return result;
    }
    uint64_t v4 = result[3];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<4>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<104ul>::Allocate((void *)(v2 + 8), 1);
      result[12] = 0;
      return result;
    }
    uint64_t v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<8>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<200ul>::Allocate((void *)(v2 + 8), 1);
      result[24] = 0;
      return result;
    }
    uint64_t v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<16>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<392ul>::Allocate((void *)(v2 + 8), 1);
      result[48] = 0;
      return result;
    }
    uint64_t v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<32>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<776ul>::Allocate((void *)(v2 + 8), 1);
      result[96] = 0;
      return result;
    }
    uint64_t v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<64>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<1544ul>::Allocate((void *)(v2 + 8), 1);
      result[192] = 0;
      return result;
    }
    uint64_t v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](uint64_t result, uint64_t a2)
{
  if (a2)
  {
    BOOL result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(**(void **)result);
    *(void *)(a2 + ++*(void *)(result + 24) = *(void *)(result + 56);
    *(void *)(result + 56) = a2;
  }
  return result;
}

int *fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(int *result, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v5 = result;
  if (result[6] != a2 || result[7] != a3 || *a4 != *((unsigned char *)result + 32))
  {
    result[6] = a2;
    result[7] = a3;
    *((unsigned char *)result + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)result + 2) + 32))(*((void *)result + 2), a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)v5 + 2) + 48))(*((void *)v5 + 2), a2);
    (*(void (**)(uint64_t *__return_ptr))(**((void **)v5 + 2) + 24))(&v10);
    BOOL result = fst::TropicalWeightTpl<float>::Zero();
    int v11 = v10;
    HIDWORD(v10) = 0;
    HIDWORD(v10) = *result;
    BOOL v9 = *(float *)&v10 == *((float *)&v10 + 1) && v6 == v7;
    *((unsigned char *)v5 + 33) = v9;
    *((unsigned char *)v5 + 34) = v7 == 0;
  }
  return result;
}

uint64_t fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 188);
  if (v3 == 1) {
    return 1;
  }
  if (v3 == 2) {
    return 0;
  }
  uint64_t v7 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Priority(*(void *)(a1 + 144), a2);
  uint64_t v8 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Priority(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ComposeFst: Both sides can't require match", 42);
    LogMessage::~LogMessage((LogMessage *)&v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  BOOL v11 = v8 == -1 || v7 <= v8;
  return v7 != -1 && v11;
}

void sub_23ABF3568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (*(_DWORD *)(a7 + 52) != a4)
  {
    *(_DWORD *)(a7 + 52) = a4;
    fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(void *)(a7 + 8), a4);
    *(unsigned char *)(a7 + 56) = *(_DWORD *)(a7 + 20) != -1;
  }
  int v14 = *fst::TropicalWeightTpl<float>::One();
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  v19[2] = v14;
  v19[3] = a6;
  fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a7, v19, a8);
  unint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a5 + 120))(a5, a6, &v16);
  while (1)
  {
    if (!(void)v16)
    {
      if (v18 >= (unint64_t)v17) {
        goto LABEL_15;
      }
LABEL_9:
      uint64_t v15 = (int *)(*((void *)&v16 + 1) + 16 * v18);
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16 + 16))(v16)) {
      break;
    }
    if (!(void)v16) {
      goto LABEL_9;
    }
    uint64_t v15 = (int *)(*(uint64_t (**)(void))(*(void *)v16 + 24))();
LABEL_10:
    fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a7, v15, a8);
    if ((void)v16) {
      (*(void (**)(void))(*(void *)v16 + 32))(v16);
    }
    else {
      ++v18;
    }
  }
  if ((void)v16)
  {
    (*(void (**)(void))(*(void *)v16 + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (*((void *)&v17 + 1)) {
    --**((_DWORD **)&v17 + 1);
  }
LABEL_17:
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_23ABF37B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState();
  }
  else {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

BOOL fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  BOOL result = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a3, *v10);
  if (result)
  {
    for (BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8));
          !result;
          BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8)))
    {
      uint8x8_t v12 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a3);
      unint64_t v13 = *v12;
      unint64_t v31 = *v12;
      int v32 = *((_DWORD *)v12 + 2);
      int v33 = *((_DWORD *)v12 + 3);
      unint64_t v14 = *(void *)a4;
      unint64_t v28 = *(void *)a4;
      int v29 = a4[2];
      int v30 = a4[3];
      if (a5)
      {
        unint64_t v15 = HIDWORD(v14);
        long long v16 = *(unsigned __int8 **)(a1 + 136);
        if (v15 != -1)
        {
          if (v13 == -1)
          {
            int v17 = v16[32];
            if (v16[32]) {
              char v18 = -1;
            }
            else {
              char v18 = 0;
            }
            char v27 = v18;
            if (v17) {
              goto LABEL_35;
            }
          }
          else
          {
            if (v15) {
              char v23 = 0;
            }
            else {
              char v23 = -1;
            }
            char v27 = v23;
            if (!v15) {
              goto LABEL_35;
            }
          }
LABEL_28:
          unint64_t v24 = (float *)&v28;
          uint64_t v25 = (uint64_t *)&v31;
LABEL_34:
          fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v24, (uint64_t)v25, &v27);
          goto LABEL_35;
        }
        if (!v16[33])
        {
          char v27 = v16[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v19 = HIDWORD(v13);
        unint64_t v20 = *(unsigned __int8 **)(a1 + 136);
        if (v19 != -1)
        {
          if (v14 == -1)
          {
            int v21 = v20[32];
            if (v21) {
              char v22 = -1;
            }
            else {
              char v22 = 0;
            }
            char v27 = v22;
            if (v21) {
              goto LABEL_35;
            }
          }
          else
          {
            if (v19) {
              char v26 = 0;
            }
            else {
              char v26 = -1;
            }
            char v27 = v26;
            if (!v19) {
              goto LABEL_35;
            }
          }
LABEL_33:
          unint64_t v24 = (float *)&v31;
          uint64_t v25 = (uint64_t *)&v28;
          goto LABEL_34;
        }
        if (!v20[33])
        {
          char v27 = v20[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(void *)(a3 + 8));
    }
  }
  return result;
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(uint64_t a1, int a2)
{
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = MutableState[3];
  uint64_t v6 = MutableState[4] - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 4;
    int v8 = *(_DWORD *)(a1 + 64);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    BOOL v9 = (int *)(v5 + 12);
    do
    {
      int v11 = *v9;
      v9 += 4;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 64) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 14) |= 0xAu;
}

uint64_t *fst::internal::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v19 = a3[3];
  HIDWORD(v19) = v7;
  char v20 = *a5;
  float v8 = *a3;
  int v9 = *(_DWORD *)(a4 + 4);
  float v10 = a3[2];
  if (v10 == -INFINITY || (float v11 = *(float *)(a4 + 8), v11 >= -INFINITY) && v11 <= -INFINITY)
  {
    float v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    BOOL v13 = v11 == INFINITY || v10 == INFINITY;
    float v14 = v10 + v11;
    if (v13) {
      float v12 = INFINITY;
    }
    else {
      float v12 = v14;
    }
  }
  int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(*(void **)(a1 + 176), &v19, 1);
  *(float *)char v18 = v8;
  v18[1] = v9;
  *(float *)&v18[2] = v12;
  v18[3] = Id;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  return std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](MutableState + 3, (uint64_t)v18);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(void *a1, uint64_t *a2, int a3)
{
  a1[16] = a2;
  uint64_t v4 = a1 + 4;
  if (!a3)
  {
    uint64_t v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(v4, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::kCurrentKey);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v4, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::kCurrentKey, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::kCurrentKey);
  if (!v7) {
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v8 = a1[13];
  unint64_t v9 = a1[14];
  uint64_t v10 = (uint64_t)(v9 - v8) / 12;
  *((_DWORD *)v6 + 4) = v10;
  unint64_t v11 = a1[15];
  if (v9 >= v11)
  {
    if ((unint64_t)(v10 + 1) > 0x1555555555555555) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v8) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v10 + 1) {
      uint64_t v15 = v10 + 1;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>((uint64_t)(a1 + 15), v16);
    }
    else {
      int v17 = 0;
    }
    char v18 = &v17[12 * v10];
    uint64_t v19 = &v17[12 * v16];
    uint64_t v20 = *a2;
    *((_DWORD *)v18 + 2) = *((_DWORD *)a2 + 2);
    *(void *)char v18 = v20;
    BOOL v13 = v18 + 12;
    char v22 = (_DWORD *)a1[13];
    int v21 = (_DWORD *)a1[14];
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *(void *)(v21 - 3);
        v21 -= 3;
        int v24 = v21[2];
        *(void *)(v18 - 12) = v23;
        v18 -= 12;
        *((_DWORD *)v18 + 2) = v24;
      }
      while (v21 != v22);
      int v21 = (_DWORD *)a1[13];
    }
    a1[13] = v18;
    a1[14] = v13;
    a1[15] = v19;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    uint64_t v12 = *a2;
    *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v9 = v12;
    BOOL v13 = (char *)(v9 + 12);
  }
  a1[14] = v13;
  return v10;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(void *a1, int *a2)
{
  unsigned int v3 = *a2;
  if (*a2 < -1)
  {
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = a1[6];
    if (v3 == -1) {
      uint64_t v5 = *(int **)(v4 + 128);
    }
    else {
      uint64_t v5 = (int *)(*(void *)(v4 + 104) + 12 * v3);
    }
    unint64_t v6 = *v5 + 7853 * v5[1] + 7867 * *((char *)v5 + 8);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *v11;
  if (*v11)
  {
    BOOL v13 = a1 + 8;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

void *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 104))
  {
    int v5 = *((_DWORD *)MutableState + 14);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 14) = v5 | 4;
      unint64_t v6 = MutableState[4] - MutableState[3] + *(void *)(a1 + 128) + 64;
      *(void *)(a1 + 128) = v6;
      *(unsigned char *)(a1 + 120) = 1;
      if (v6 > *(void *)(a1 + 112)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

void *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2) {
    return *(void **)(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 96) = MutableState;
      *((_DWORD *)MutableState + 14) |= 4u;
      std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(MutableState + 3, 0x80uLL);
      return *(void **)(a1 + 96);
    }
    uint64_t v5 = *(void *)(a1 + 96);
    if (!*(_DWORD *)(v5 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)uint64_t v5 = *fst::TropicalWeightTpl<float>::Zero();
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 32) = *(void *)(v5 + 24);
      BOOL result = *(void **)(a1 + 96);
      *((_DWORD *)result + 14) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 56) &= ~4u;
    *(unsigned char *)(a1 + 88) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(uint64_t a1, void *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v32, (uint64_t)__p);
      uint8x8_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      unint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      unint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache size = ", 15);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      BOOL v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)v32);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * a4);
    uint64_t v15 = *(void *)(a1 + 40);
LABEL_6:
    *(void *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      int v16 = *(_DWORD *)(v15 + 16);
      if (v16) {
        int v17 = v16 - 1;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 92);
      }
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, v17);
      unint64_t v19 = *(void *)(a1 + 128);
      if (v19 <= v14 || *((_DWORD *)MutableState + 15))
      {
LABEL_23:
        *((_DWORD *)MutableState + 14) &= ~8u;
        uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
        goto LABEL_6;
      }
      if (a3)
      {
        if (MutableState == a2) {
          goto LABEL_23;
        }
        int v20 = *((_DWORD *)MutableState + 14);
      }
      else
      {
        int v20 = *((_DWORD *)MutableState + 14);
        if ((v20 & 8) != 0 || MutableState == a2) {
          goto LABEL_23;
        }
      }
      if ((v20 & 4) != 0)
      {
        unint64_t v21 = MutableState[4] - MutableState[3] + 64;
        BOOL v22 = v19 > v21;
        unint64_t v23 = v19 - v21;
        if (v22) {
          *(void *)(a1 + 128) = v23;
        }
      }
      fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete((void *)a1);
      uint64_t v15 = *(void *)(a1 + 64);
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 128) <= v14)
    {
      unint64_t v24 = *(void *)(a1 + 128);
      if (v14)
      {
        if (v24 > v14)
        {
          uint64_t v25 = *(void *)(a1 + 112);
          do
          {
            v25 *= 2;
            BOOL v22 = v24 > 2 * v14;
            v14 *= 2;
          }
          while (v22);
          *(void *)(a1 + 112) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        LogMessage::LogMessage(&v35, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        LogMessage::~LogMessage((LogMessage *)&v35);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "INFO");
      LogMessage::LogMessage(&v34, (uint64_t)v32);
      char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      char v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"), free recently cached = ", 26);
      unint64_t v28 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", cache size = ", 15);
      int v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", cache frac = ", 15);
      int v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", cache limit = ", 16);
      unint64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)&v34);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
}

void sub_23ABF42C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    int v3 = result;
    if (a2 >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = result[1] - *result;
    v5[4] = result + 3;
    v5[0] = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(result + 3, a2);
    v5[1] = v5[0] + v4;
    uint64_t v5[2] = v5[0] + v4;
    v5[3] = v5[0] + 16 * a2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v5);
    return (uint64_t *)std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_23ABF43CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(void *)a1) {
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(*(uint64_t **)(a1 + 32), *(void **)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[8] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 23))
  {
    *((_DWORD *)a1 + 23) = -1;
    a1[12] = 0;
  }
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Delete(a1);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Delete(void *a1)
{
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)), a1 + 9);
  *(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)) = 0;
  uint64_t v2 = (uint64_t *)a1[8];
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  a1[8] = v3;
  *(void *)(v4 + 8) = v3;
  *(void *)v2[1] = v4;
  --a1[6];
  return std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>((uint64_t)(a1 + 4), (uint64_t)v2);
}

uint64_t *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[1];
  unint64_t v5 = result[2];
  if (v4 >= v5)
  {
    uint64_t v7 = (uint64_t)(v4 - *result) >> 4;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = result + 3;
    uint64_t v10 = v5 - *v3;
    if (v10 >> 3 > v8) {
      unint64_t v8 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    v14[4] = v3 + 3;
    uint64_t v12 = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(v9, v11);
    BOOL v13 = &v12[2 * v7];
    v14[0] = v12;
    v14[1] = v13;
    double v14[3] = &v12[2 * v11];
    *BOOL v13 = *(void *)a2;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
    *((_DWORD *)v13 + 3) = *(_DWORD *)(a2 + 12);
    v14[2] = v13 + 2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v14);
    uint64_t v6 = v3[1];
    BOOL result = (uint64_t *)std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    *(void *)unint64_t v4 = *(void *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v6 = v4 + 16;
    result[1] = v4 + 16;
  }
  v3[1] = v6;
  return result;
}

void sub_23ABF45F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 120))
  {
    if ((*(unsigned char *)(a2 + 56) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 32) - *(void *)(a2 + 24) + *(void *)(a1 + 128);
      *(void *)(a1 + 128) = v4;
      if (v4 > *(void *)(a1 + 112))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, (void *)a2, 0, 0.666);
      }
    }
  }
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 100) < a2) {
    *(_DWORD *)(a1 + 100) = a2;
  }
  int v2 = *(_DWORD *)(a1 + 96);
  if (v2 <= a2)
  {
    if (v2 == a2) {
      *(_DWORD *)(a1 + 96) = a2 + 1;
    }
    if (*(unsigned char *)(a1 + 104) || !*(void *)(a1 + 112))
    {
      uint64_t v3 = (void *)(a1 + 72);
      unint64_t v4 = a2;
      if (*(void *)(a1 + 80) <= (unint64_t)a2) {
        std::vector<BOOL>::resize(a1 + 72, a2 + 1, 0);
      }
      *(void *)(*v3 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
    }
  }
}

void *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(void *result)
{
  int v1 = (_DWORD *)result[3];
  int v2 = (_DWORD *)result[4];
  while (v1 != v2)
  {
    if (!*v1) {
      ++result[1];
    }
    if (!v1[1]) {
      ++result[2];
    }
    v1 += 4;
  }
  return result;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      unint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      BOOL v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      unint64_t v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      int v17 = v19;
      LODWORD(v18) = v20;
      uint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      unint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      int v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        unint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_23ABF48D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    long long v16 = *(unint64_t **)a5;
  }
  else
  {
    unint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    long long v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *long long v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    BOOL result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26EE2C6B0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + ++*(void *)(result + 24) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 36) = a3;
  cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy();
}

void sub_23ABF4C34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[6];
  v1[6] = 0;
  if (v3) {
    fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(v3);
  }
  uint64_t v4 = v1[5];
  v1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[1];
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_26EE2C6B0;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_26EE2C6B0;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  JUMPOUT(0x23ECC24B0);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_23ABF4ED8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C402D4BD5F2);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
  if (result != 4)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2);
    if (result != 4)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) != 5
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2), result != 5))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == 5
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2) == *(_DWORD *)(a1 + 36))
        {
          return 5;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) != *(_DWORD *)(a1 + 36)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2), result != 5))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) != *(_DWORD *)(a1 + 36))return 4; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2);
          }
          if (result != *(_DWORD *)(a1 + 36)) {
            return 4;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 32) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 32) = a2;
    uint64_t v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 24) + 176) + 104) + 12 * a2);
    uint64_t v4 = *(void *)(result + 40);
    uint64_t v5 = *v3;
    if (*(_DWORD *)(v4 + 52) != v5)
    {
      *(_DWORD *)(v4 + 52) = v5;
      uint64_t result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(void *)(v4 + 8), v5);
      *(unsigned char *)(v4 + 56) = *(_DWORD *)(v4 + 20) != -1;
    }
    uint64_t v6 = *(void *)(v2 + 48);
    uint64_t v7 = v3[1];
    if (*(_DWORD *)(v6 + 52) != v7)
    {
      *(_DWORD *)(v6 + 52) = v7;
      uint64_t result = fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetState(*(void *)(v6 + 8), v7);
      *(unsigned char *)(v6 + 56) = *(_DWORD *)(v6 + 20) != -1;
    }
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(v2 + 32);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 56) = a2 == 0;
  if (*(_DWORD *)(a1 + 36) == 1)
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      uint64_t v3 = (uint64_t *)(a1 + 48);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 48);
    uint64_t v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)
    || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8)
                                                                                                 + 8)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8) + 8);
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    return a1 + 60;
  }
  else {
    return a1 + 76;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 56))
  {
    *(unsigned char *)(result + 56) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 36) == 1)
    {
      uint64_t v1 = *(void *)(result + 40);
      uint64_t v2 = *(void *)(result + 48);
    }
    else
    {
      uint64_t v2 = *(void *)(result + 40);
      uint64_t v1 = *(void *)(result + 48);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26EE2C6B0;
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), a3);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + ++*(void *)(result + 24) = *(void *)(v5 + 8);
  int v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 36) = v6;
  cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy();
}

void sub_23ABF5410(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[6];
  v1[6] = 0;
  if (v3) {
    fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(v3);
  }
  uint64_t v4 = v1[5];
  v1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[1];
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a3, a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 36);
    unint64_t v9 = (int *)fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a3);
    int64_t v10 = v9 + 1;
    if (v8 != 1) {
      int64_t v10 = v9;
    }
    fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a2 + 8) + 8) + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8)))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a3 + 8) + 8)
                                                                                                  + 8)))
    {
      fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(void *)(a2 + 8));
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a2 + 8) + 8) + 8)))
      {
        int v6 = *(_DWORD *)(a1 + 36);
        uint64_t v7 = (int *)fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a2);
        int v8 = v7 + 1;
        if (v6 != 1) {
          int v8 = v7;
        }
        if (fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Find(a3, *v8))
        {
          break;
        }
        fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(void *)(a2 + 8));
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8)))
    {
      unint64_t v9 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a2);
      int64_t v10 = fst::RhoMatcher<fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(a3);
      fst::SigmaMatcher<fst::PhiMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next(*(void *)(a3 + 8));
      uint64_t v11 = *(unsigned int *)(a1 + 32);
      int v12 = *(_DWORD *)(a1 + 36);
      BOOL v13 = v12 == 1;
      if (v12 == 1) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = v10;
      }
      uint64_t v20 = *v14;
      int v21 = *((_DWORD *)v14 + 2);
      int v22 = *((_DWORD *)v14 + 3);
      if (v13) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v9;
      }
      uint64_t v17 = *v15;
      int v18 = *((_DWORD *)v15 + 2);
      int v19 = *((_DWORD *)v15 + 3);
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, (uint64_t)&v20, (uint64_t)&v17))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,cmdp_fst_util::SpecialMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(unsigned __int8 **)(v5 + 136);
  int v7 = *(_DWORD *)(a3 + 4);
  if (v7 == -1)
  {
    if (v6[33]) {
      return 0;
    }
    LOBYTE(v6) = v6[34] ^ 1;
  }
  else if (*(_DWORD *)a4 == -1)
  {
    uint64_t v8 = 0;
    LODWORD(v6) = v6[32];
    if (v6) {
      return v8;
    }
  }
  else
  {
    LOBYTE(v6) = 0;
    if (!v7) {
      return 0;
    }
  }
  int v9 = *(_DWORD *)(a4 + 12);
  LODWORD(v16) = *(_DWORD *)(a3 + 12);
  HIDWORD(v16) = v9;
  char v17 = (char)v6;
  int v10 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 80) = v10;
  float v11 = *(float *)(a3 + 8);
  if (v11 == -INFINITY || (float v12 = *(float *)(a4 + 8), v12 >= -INFINITY) && v12 <= -INFINITY)
  {
    float v13 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    uint64_t v5 = *(void *)(a1 + 24);
  }
  else
  {
    BOOL v14 = v12 == INFINITY || v11 == INFINITY;
    float v13 = v11 + v12;
    if (v14) {
      float v13 = INFINITY;
    }
  }
  *(float *)(a1 + 84) = v13;
  uint64_t v8 = 1;
  *(_DWORD *)(a1 + 88) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::FindId(*(void **)(v5 + 176), &v16, 1);
  return v8;
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 4))
    {
      *(unsigned char *)(a1 + 56) = 1;
    }
    else if (!*(unsigned char *)(a1 + 56))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 60) = v3;
        *(unsigned char *)(a1 + 56) = 1;
        if (*(_DWORD *)(a1 + 64) <= v3) {
          *(_DWORD *)(a1 + 64) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 60);
}

float fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 64))(&v11, a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1[15], a2);
    _DWORD *MutableState = v11;
    MutableState[14] |= 9u;
  }
  uint64_t v7 = a1[15];
  if (*(_DWORD *)(v7 + 92) == a2) {
    uint64_t v8 = (float **)(v7 + 96);
  }
  else {
    uint64_t v8 = (float **)(*(void *)(v7 + 8) + 8 * ((int)a2 + 1));
  }
  int v9 = *v8;
  float result = *v9;
  *a3 = *(_DWORD *)v9;
  return result;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 92) == a2)
  {
    int v3 = (uint64_t *)(v2 + 96);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 56);
  if ((v8 & 1) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 56) = v8 | 8;
  return 1;
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 40))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 92) == a2)
  {
    int v3 = (uint64_t *)(v2 + 96);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 56);
  if ((v8 & 2) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 56) = v8 | 8;
  return 1;
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 40))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 40))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFst(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
    std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::shared_ptr[abi:ne180100]<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,void>(&v8, v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[1] = v4;
  a1[2] = v6;
  *a1 = &unk_26EE2B3B0;
  return a1;
}

void std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::shared_ptr[abi:ne180100]<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23ABF5C80(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::shared_ptr[abi:ne180100]<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,void>();
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_default_delete<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t std::__shared_ptr_pointer<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_default_delete<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::shared_ptr<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__shared_ptr_default_delete<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 64)) {
    return 0;
  }
  uint64_t v5 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 64)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *(void *)(v20 + 24);
    uint64_t v9 = *(void *)(v20 + 32) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 64);
      float v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 64) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 64);
    --*(_DWORD *)(v20 + 60);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    uint64_t v6 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 64));
  return v4;
}

void sub_23ABF5E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 96);
  if ((int)v1 <= *(_DWORD *)(a1 + 100))
  {
    while (1)
    {
      int v3 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ExpandedState(a1, v1);
      int v4 = *(_DWORD *)(a1 + 96);
      if (!v3) {
        break;
      }
      uint64_t v1 = (v4 + 1);
      *(_DWORD *)(a1 + 96) = v1;
      if (v4 >= *(_DWORD *)(a1 + 100)) {
        return v1;
      }
    }
    return *(unsigned int *)(a1 + 96);
  }
  return v1;
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ExpandedState(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 104) || !*(void *)(a1 + 112)) {
    return (*(void *)(*(void *)(a1 + 72) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  }
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v3 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v3 + 92) == a2)
    {
      int v4 = (void *)(v3 + 96);
      return *v4 != 0;
    }
    unint64_t v5 = a2 + 1;
    uint64_t v7 = v3 + 8;
    uint64_t v6 = *(void *)(v3 + 8);
    if (v5 < (*(void *)(v7 + 8) - v6) >> 3)
    {
      int v4 = (void *)(v6 + 8 * v5);
      return *v4 != 0;
    }
  }
  return 0;
}

void *fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 15);
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_23ABF6034(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2); {
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (*(_DWORD *)(v3 + 92) == a2) {
    int v4 = (uint64_t *)(v3 + 96);
  }
  else {
    int v4 = (uint64_t *)(*(void *)(v3 + 8) + 8 * (a2 + 1));
  }
  uint64_t v5 = *v4;
  int v8 = *(_DWORD *)(v5 + 60);
  uint64_t v6 = (_DWORD *)(v5 + 60);
  int v7 = v8;
  uint64_t v9 = *(void *)(v6 - 9);
  uint64_t v10 = (*(void *)(v6 - 7) - v9) >> 4;
  if (*(void *)(v6 - 7) == v9) {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  _DWORD *v6 = v7 + 1;
  return result;
}

void *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(void *a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&,void>(a2, &v4);
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToMutableFst(a1, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *a1 = &unk_26EE2AA60;
  return a1;
}

void sub_23ABF6188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToMutableFst(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[1] = v4;
  a1[2] = v3;
  *a1 = &unk_26EE2ACF8;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *a1 = &unk_26EE2ABD0;
  return a1;
}

void *fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFst(void *a1)
{
  *a1 = &unk_26EE2CDF8;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFst(void *a1)
{
  *a1 = &unk_26EE2CDF8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(*(void *)(a1 + 8));
}

_DWORD *fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_23ABF6434(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator()
{
}

void sub_23ABF6528(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher(void *a1, int a2)
{
  if (!*(unsigned char *)(a1[1] + 160))
  {
    if (a2 == 2)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*a1 + 56);
    }
    else
    {
      if (a2 != 1) {
        goto LABEL_2;
      }
      uint64_t v3 = *(uint64_t (**)(void))(*a1 + 56);
    }
    if (v3()) {
      operator new();
    }
  }
LABEL_2:
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    LogMessage::LogMessage(&v6, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Not using replace matcher", 25);
    LogMessage::~LogMessage((LogMessage *)&v6);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_23ABF6690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  MEMORY[0x23ECC24B0](v18, 0x10E1C40A5BE1C0BLL);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,std::vector<std::pair<int,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>> const&,fst::ReplaceFstOptions<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x128uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<int,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>> const&,fst::ReplaceFstOptions<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23ABF672C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<int,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>> const&,fst::ReplaceFstOptions<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2C9E0;
  fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_23ABF6788(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2C9E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2C9E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(a1, a3);
  *(void *)uint64_t v6 = &unk_26EE2CA30;
  *(void *)(v6 + 132) = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(a3 + 40);
  *(void *)&long long v8 = (int)v7;
  *((void *)&v8 + 1) = SHIDWORD(v7);
  *(_OWORD *)(v6 + 144) = v8;
  uint64_t v9 = *(void *)(a3 + 56);
  if (!v9) {
    operator new();
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v56 = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(void *)(a1 + 240) = 0;
  uint64_t v57 = (uint64_t *)(a1 + 240);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "replace");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (!*(void *)(a1 + 144)) {
    *(_DWORD *)(a1 + 132) = 1;
  }
  if (!*(void *)(a1 + 152)) {
    *(_DWORD *)(a1 + 136) = 1;
  }
  if (*a2 != a2[1])
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8) + 96))(*(void *)(*a2 + 8));
    fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v10);
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8) + 104))(*(void *)(*a2 + 8));
    fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v11);
  }
  float v13 = *(void **)(a1 + 248);
  unint64_t v12 = *(void *)(a1 + 256);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = ((uint64_t)v13 - *v57) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v12 - *v57;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v77 = a1 + 256;
    if (v18) {
      int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 256, v18);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = &v19[8 * v15];
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    uint64_t v76 = &v19[8 * v18];
    *(void *)uint64_t v20 = 0;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 8);
    std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__swap_out_circular_buffer(v57, &__str);
    int v14 = *(void **)(a1 + 248);
    std::__split_buffer<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::~__split_buffer((void **)&__str.__r_.__value_.__l.__data_);
  }
  else
  {
    *float v13 = 0;
    int v14 = v13 + 1;
    *(void *)(a1 + 248) = v14;
  }
  *(void *)(a1 + 248) = v14;
  uint64_t v21 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      LODWORD(v58[0]) = 0;
      uint64_t v24 = v21 + v22;
      LODWORD(v58[0]) = *(_DWORD *)v24;
      uint64_t v25 = *(void *)(v24 + 8);
      uint64_t v27 = *(void *)(a1 + 240);
      uint64_t v26 = *(void *)(a1 + 248);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v56, (int *)v58, (uint64_t)&std::piecewise_construct, &__str)+ 5) = (unint64_t)(v26 - v27) >> 3;
      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)(a1 + 176), (int *)v58, v58);
      uint64_t v28 = v25;
      if (!*(unsigned char *)(a3 + 48)) {
        uint64_t v28 = (*(uint64_t (**)(uint64_t, void))(*(void *)v25 + 72))(v25, 0);
      }
      int v30 = *(uint64_t **)(a1 + 248);
      unint64_t v29 = *(void *)(a1 + 256);
      if ((unint64_t)v30 >= v29)
      {
        uint64_t v32 = ((uint64_t)v30 - *v57) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = v29 - *v57;
        uint64_t v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        uint64_t v77 = a1 + 256;
        if (v35) {
          uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 256, v35);
        }
        else {
          uint64_t v36 = 0;
        }
        char v37 = (uint64_t *)&v36[8 * v32];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
        uint64_t v76 = &v36[8 * v35];
        uint64_t *v37 = v28;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v37 + 1);
        std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__swap_out_circular_buffer(v57, &__str);
        unint64_t v31 = *(void **)(a1 + 248);
        std::__split_buffer<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::~__split_buffer((void **)&__str.__r_.__value_.__l.__data_);
      }
      else
      {
        uint64_t *v30 = v28;
        unint64_t v31 = v30 + 1;
        *(void *)(a1 + 248) = v31;
      }
      *(void *)(a1 + 248) = v31;
      if (!v23) {
        goto LABEL_62;
      }
      unint64_t v38 = *(fst **)(a1 + 40);
      unint64_t v39 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 96))(v25);
      if (!fst::CompatSymbols(v38, v39, (const fst::SymbolTable *)1)) {
        break;
      }
LABEL_51:
      unint64_t v43 = *(fst **)(a1 + 48);
      uint64_t v44 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 104))(v25);
      if (!fst::CompatSymbols(v43, v44, (const fst::SymbolTable *)1))
      {
        int v45 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v65, "FATAL");
          LogMessage::LogMessage(&v67, (uint64_t)v65);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v62, "ERROR");
          LogMessage::LogMessage(&v64, (uint64_t)v62);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ReplaceFstImpl: Output symbols of FST ", 38);
        uint64_t v46 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" do not match output symbols of base FST (0th FST)", 50);
        if (v45)
        {
          LogMessage::~LogMessage((LogMessage *)&v67);
          if (v66 < 0)
          {
            int v47 = (void *)v65[0];
            goto LABEL_60;
          }
        }
        else
        {
          LogMessage::~LogMessage((LogMessage *)&v64);
          if (v63 < 0)
          {
            int v47 = v62[0];
LABEL_60:
            operator delete(v47);
          }
        }
        *(void *)(a1 + 8) |= 4uLL;
      }
LABEL_62:
      ++v23;
      uint64_t v21 = *a2;
      v22 += 16;
      if (v23 >= (a2[1] - *a2) >> 4) {
        goto LABEL_63;
      }
    }
    int v40 = FLAGS_fst_error_fatal;
    if (FLAGS_fst_error_fatal)
    {
      std::string::basic_string[abi:ne180100]<0>(v71, "FATAL");
      LogMessage::LogMessage(&v73, (uint64_t)v71);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      LogMessage::LogMessage(&v70, (uint64_t)__p);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ReplaceFstImpl: Input symbols of FST ", 37);
    unint64_t v41 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" do not match input symbols of base FST (0th FST)", 49);
    if (v40)
    {
      LogMessage::~LogMessage((LogMessage *)&v73);
      if (v72 < 0)
      {
        uint64_t v42 = (void *)v71[0];
LABEL_49:
        operator delete(v42);
      }
    }
    else
    {
      LogMessage::~LogMessage((LogMessage *)&v70);
      if (v69 < 0)
      {
        uint64_t v42 = __p[0];
        goto LABEL_49;
      }
    }
    *(void *)(a1 + 8) |= 4uLL;
    goto LABEL_51;
  }
LABEL_63:
  uint64_t v48 = (int *)(a3 + 28);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
  int v49 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v56, v48, (uint64_t)&std::piecewise_construct, &__str)+ 5);
  if (!v49 && *(void *)(a1 + 248) - *(void *)(a1 + 240) >= 9uLL)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    }
    LogMessage::LogMessage(&v74, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ReplaceFstImpl: No FST corresponding to root label ", 51);
    int v50 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" in the input tuple vector", 26);
    LogMessage::~LogMessage((LogMessage *)&v74);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  if (v49 <= 1) {
    int v51 = 1;
  }
  else {
    int v51 = v49;
  }
  *(_DWORD *)(a1 + 264) = v51;
  char v61 = 0;
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | fst::ReplaceFstProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(*v48, a2, *(_DWORD *)(a1 + 132), *(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 144), &v61);
  *(unsigned char *)(a1 + 1--*(_DWORD *)(a9 + 60) = v61 ^ 1;
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "INFO");
    LogMessage::LogMessage(&v60, (uint64_t)v58);
    uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ReplaceFstImpl::ReplaceFstImpl: always_cache = ", 47);
    if (*(unsigned char *)(a1 + 160)) {
      unint64_t v53 = "true";
    }
    else {
      unint64_t v53 = "false";
    }
    if (*(unsigned char *)(a1 + 160)) {
      uint64_t v54 = 4;
    }
    else {
      uint64_t v54 = 5;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
    LogMessage::~LogMessage((LogMessage *)&v60);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
  }
  return a1;
}

void sub_23ABF6FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, void **a13)
{
  if (*(char *)(v15 - 105) < 0) {
    operator delete(*(void **)(v15 - 128));
  }
  a13 = a12;
  std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a11);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v14, *a10);
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(v13 + 168), 0);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v13);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(int a1, uint64_t *a2, int a3, int a4, int a5, unsigned char *a6)
{
  uint64_t v6 = a6;
  std::string __p = 0;
  char v59 = 0;
  BOOL v60 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1] - *a2;
  if (v8)
  {
    int v48 = a3;
    int v49 = a5;
    int v50 = a4;
    unint64_t v9 = 0;
    int v10 = 0;
    unint64_t v11 = v8 >> 4;
    int v12 = 1;
    char v13 = 1;
    char v14 = 1;
    int v15 = 1;
    int v16 = 1;
    do
    {
      int v56 = v16;
      int v57 = v12;
      int v17 = v15;
      unint64_t v18 = (int *)(v7 + 16 * v9);
      uint64_t v19 = *v18;
      BOOL v20 = v11 >= v19 && v19 > 0;
      BOOL v54 = v20;
      BOOL v55 = v19 < 0;
      if (v19 == a1) {
        int v10 = v9;
      }
      uint64_t v21 = *((void *)v18 + 1);
      BOOL v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21) != -1;
      BOOL v23 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 56))(v21, 0x10000000, 0) != 0;
      BOOL v24 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 56))(v21, 0x40000000, 0) != 0;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v21 + 56))(v21, 0xFFFFFFFF0004, 0);
      uint64_t v26 = v25;
      uint64_t v27 = v59;
      if (v59 >= v60)
      {
        unint64_t v31 = (char *)__p;
        uint64_t v32 = (v59 - (unsigned char *)__p) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = v60 - (unsigned char *)__p;
        if ((v60 - (unsigned char *)__p) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)&v60, v35);
          unint64_t v31 = (char *)__p;
          uint64_t v27 = v59;
        }
        else
        {
          uint64_t v36 = 0;
        }
        char v37 = (uint64_t *)&v36[8 * v32];
        uint64_t *v37 = v26;
        uint64_t v28 = (char *)(v37 + 1);
        int v29 = v17;
        while (v27 != v31)
        {
          uint64_t v38 = *((void *)v27 - 1);
          v27 -= 8;
          *--char v37 = v38;
        }
        std::string __p = v37;
        char v59 = v28;
        BOOL v60 = &v36[8 * v35];
        int v30 = v57;
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(void *)char v59 = v25;
        uint64_t v28 = v27 + 8;
        int v29 = v17;
        int v30 = v57;
      }
      v14 &= v55;
      v13 &= v54;
      int v15 = v22 & v29;
      int v12 = v23 & v30;
      int v16 = v24 & v56;
      char v59 = v28;
      ++v9;
      uint64_t v7 = *a2;
      unint64_t v11 = (a2[1] - *a2) >> 4;
    }
    while (v11 > v9);
    uint64_t v39 = v10;
    unsigned __int8 v40 = v14 | v13;
    uint64_t v6 = a6;
    a5 = v49;
    a4 = v50;
    a3 = v48;
  }
  else
  {
    uint64_t v39 = 0;
    LOBYTE(v16) = 1;
    int v15 = 1;
    unsigned __int8 v40 = 1;
    LOBYTE(v12) = 1;
  }
  BOOL v43 = a3 == 4 && a5 != -1 || (a4 & 0xFFFFFFFE) == 2;
  int v44 = (a3 & 0xFFFFFFFE) == 2 || v43;
  uint64_t v45 = fst::ReplaceProperties((uint64_t **)&__p, v39, (a3 & 0xFFFFFFFD) == 1, (a4 & 0xFFFFFFFD) == 1, (a3 - 1) < 2, (a4 - 1) < 2, v44, v15, v12, v16, v40);
  if ((v45 & 0x50000000) != 0) {
    char v46 = v15;
  }
  else {
    char v46 = 0;
  }
  unsigned char *v6 = v46;
  if (__p)
  {
    char v59 = (char *)__p;
    operator delete(__p);
  }
  return v45;
}

void sub_23ABF74C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2CA30;
  uint64_t v3 = (void **)(a1 + 240);
  std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 176, *(void **)(a1 + 184));
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(a1 + 168), 0);
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

{
  uint64_t v2;
  void **v4;

  *(void *)a1 = &unk_26EE2CA30;
  uint64_t v4 = (void **)(a1 + 240);
  std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 200);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 176, *(void **)(a1 + 184));
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(a1 + 168), 0);
  int v2 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
  return MEMORY[0x23ECC24B0](v2, 0x10B3C4075DE3A39);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(void *a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    uint64_t v4 = a1[30];
    if ((unint64_t)(a1[31] - v4) >= 9)
    {
      unint64_t v5 = 1;
      do
      {
        if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(v4 + 8 * v5) + 56))(*(void *)(v4 + 8 * v5), 4, 0))
        {
          a1[1] |= 4uLL;
        }
        ++v5;
        uint64_t v4 = a1[30];
      }
      while (v5 < (a1[31] - v4) >> 3);
    }
  }
  return a1[1] & a2;
}

void fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::DefaultReplaceStateTable(void *a1)
{
}

{
  fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::CompactHashBiTable(a1, 0, 0, 0);
}

void sub_23ABF770C(_Unwind_Exception *a1)
{
  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(uint64_t *a1)
{
  int v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = (uint64_t)v2;
    operator delete(v2);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    MEMORY[0x23ECC24B0](v3, 0xC400A2AC0F1);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    MEMORY[0x23ECC24B0](v4, 0xC400A2AC0F1);
  }
  return a1;
}

void fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::CompactHashBiTable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  *a1 = a3;
  if (!a4) {
    operator new();
  }
  a1[1] = a4;
  a1[2] = a1;
  a1[3] = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set();
}

void sub_23ABF7840(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x23ECC24B0](v3, 0xC400A2AC0F1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::ReplaceStateTuple<int,long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::unordered_set<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::unordered_set()
{
}

void sub_23ABF7A48(_Unwind_Exception *a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(a1, *(void **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*(void *)(v3 + 32));
      v2[3] = *(void *)(result + 56);
      *(void *)(result + 56) = v2;
      int v2 = v4;
    }
    while (v4);
  }
  return result;
}

void fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::CompactHashBiTable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  *a1 = a3;
  if (!a4) {
    operator new();
  }
  a1[1] = a4;
  a1[2] = a1;
  a1[3] = a1;
  std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::unordered_set();
}

void sub_23ABF7BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *v10;
  *int v10 = 0;
  if (v12) {
    MEMORY[0x23ECC24B0](v12, 0xC400A2AC0F1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23ABF7CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unordered_set<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::unordered_set()
{
}

void sub_23ABF7DBC(_Unwind_Exception *a1)
{
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<long,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  }
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 16));
  return a1;
}

void std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
}

void fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::deallocate(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>(*a1);
    if (!__p) {
      return;
    }
    __p[2] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>(*a1);
    if (!__p) {
      return;
    }
    __p[1] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>(*a1);
    if (!__p) {
      return;
    }
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>(*a1);
    if (!__p) {
      return;
    }
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>(*a1);
    if (!__p) {
      return;
    }
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>(*a1);
    if (!__p) {
      return;
    }
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>(*a1);
    if (!__p) {
      return;
    }
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x47)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 9uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 64)) {
    operator new();
  }
  return *(void *)(v1 + 64);
}

void sub_23ABF804C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C308;
  a1[1] = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C308;
  a1[1] = &unk_26EE2C330;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x11uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_23ABF824C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x21uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_23ABF844C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_23ABF864C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_23ABF884C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_23ABF8A4C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_23ABF8C50(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + 8);
  if (a2)
  {
    unint64_t v5 = fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::allocate((uint64_t *)(a1 + 16), a2);
    uint8x8_t v6 = *(void **)a1;
    *(void *)a1 = v5;
    if (v6) {
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100]((uint64_t)v3, v6);
    }
    uint64_t v7 = 0;
    unint64_t *v3 = a2;
    do
      *(void *)(*(void *)a1 + 8 * v7++) = 0;
    while (a2 != v7);
    uint64_t v8 = *(void **)(a1 + 24);
    if (v8)
    {
      unint64_t v9 = v8[1];
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
      }
      else
      {
        v9 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v9) = a1 + 24;
      uint64_t v12 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v9)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v8;
              goto LABEL_23;
            }
            *uint64_t v8 = *v12;
            *uint64_t v12 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
            uint64_t v12 = v8;
          }
          unint64_t v13 = v9;
LABEL_23:
          uint64_t v8 = v12;
          uint64_t v12 = (void *)*v12;
          unint64_t v9 = v13;
        }
        while (v12);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v11);
    }
    unint64_t *v3 = 0;
  }
}

void *fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<2>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<24ul>::Allocate((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<1>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<16ul>::Allocate((void *)(v2 + 8), 1);
      result[1] = 0;
      return result;
    }
    uint64_t v4 = result[1];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<4>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<40ul>::Allocate((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<8>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<72ul>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<16>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<136ul>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<32>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<264ul>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>::TN<64>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<520ul>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__deallocate_node(a1, *(void **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<long,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<long,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>(*(void *)(v3 + 32));
      v2[3] = *(void *)(result + 56);
      *(void *)(result + 56) = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x19uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_23ABF9300(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BE48;
  a1[1] = &unk_26EE2BE70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x187)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x31uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 384)) {
    operator new();
  }
  return *(void *)(v1 + 384);
}

void sub_23ABF9500(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x307)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x61uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 768)) {
    operator new();
  }
  return *(void *)(v1 + 768);
}

void sub_23ABF9700(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BF48;
  a1[1] = &unk_26EE2BF70;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x607)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0xC1uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1536)) {
    operator new();
  }
  return *(void *)(v1 + 1536);
}

void sub_23ABF9900(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C008;
  a1[1] = &unk_26EE2C030;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC07)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x181uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 3072)) {
    operator new();
  }
  return *(void *)(v1 + 3072);
}

void sub_23ABF9B00(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C0C8;
  a1[1] = &unk_26EE2C0F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x300)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x301uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 6144)) {
    operator new();
  }
  return *(void *)(v1 + 6144);
}

void sub_23ABF9D04(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C188;
  a1[1] = &unk_26EE2C1B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x600)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x601uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 12288)) {
    operator new();
  }
  return *(void *)(v1 + 12288);
}

void sub_23ABF9F08(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2C248;
  a1[1] = &unk_26EE2C270;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      uint8x8_t v10 = (void *)(v7 - 24);
      uint64_t v10[2] = 0;
      unint64_t v11 = *(const void **)(v9 - 24);
      uint64_t v12 = *(void *)(v9 - 16);
      v9 -= 24;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v10, v11, v12, (v12 - (uint64_t)v11) >> 3);
      uint64_t v7 = *((void *)&v18 + 1) - 24;
      *((void *)&v18 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_23ABFA148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23ABFA1BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,std::reverse_iterator<fst::ReplaceStackPrefix<int,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<fst::ReplaceStackPrefix<int,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<fst::ReplaceStackPrefix<int,int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<fst::ReplaceStackPrefix<int,int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_23ABFA844(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t *std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::~DefaultReplaceStateTable(result);
    JUMPOUT(0x23ECC24B0);
  }
  return result;
}

uint64_t *fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>::~DefaultReplaceStateTable(uint64_t *a1)
{
  unint64_t v8 = (void **)(a1 + 30);
  std::vector<fst::ReplaceStackPrefix<int,int>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table((uint64_t)(a1 + 21));
  uint64_t v2 = a1[18];
  a1[18] = 0;
  if (v2) {
    MEMORY[0x23ECC24B0](v2, 0xC400A2AC0F1);
  }
  uint64_t v3 = a1[17];
  a1[17] = 0;
  if (v3) {
    MEMORY[0x23ECC24B0](v3, 0xC400A2AC0F1);
  }
  unint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = (uint64_t)v4;
    operator delete(v4);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    MEMORY[0x23ECC24B0](v5, 0xC400A2AC0F1);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    MEMORY[0x23ECC24B0](v6, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    return *(unsigned int *)(a1 + 60);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 4))
  {
    *(unsigned char *)(a1 + 56) = 1;
    return *(unsigned int *)(a1 + 60);
  }
  if (*(unsigned char *)(a1 + 56)) {
    return *(unsigned int *)(a1 + 60);
  }
  uint64_t v3 = *(void *)(a1 + 240);
  if (*(void *)(a1 + 248) - v3 == 8)
  {
    uint64_t result = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 60) = -1;
    *(unsigned char *)(a1 + 56) = 1;
    if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0) {
      *(_DWORD *)(a1 + 64) = 0;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v3 + 8 * *(int *)(a1 + 264));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (result != -1)
    {
      unsigned int v5 = result;
      memset(__p, 0, sizeof(__p));
      int Id = (void *)fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId((void *)(*(void *)(a1 + 168) + 136), (uint64_t)__p, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      int v7 = *(void **)(a1 + 168);
      unsigned int v8 = *(_DWORD *)(a1 + 264);
      __p[0] = Id;
      __p[1] = (void *)__PAIR64__(v5, v8);
      uint64_t result = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v7, __p, 1);
      *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 60) = result;
      *(unsigned char *)(a1 + 56) = 1;
      if (*(_DWORD *)(a1 + 64) <= (int)result) {
        *(_DWORD *)(a1 + 64) = result + 1;
      }
    }
  }
  return result;
}

void sub_23ABFAC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId(void *a1, uint64_t a2, int a3)
{
  a1[16] = a2;
  uint64_t v4 = a1 + 4;
  if (!a3)
  {
    uint64_t v6 = std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::find<long>(v4, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::kCurrentKey);
    if (!v6) {
      return -1;
    }
    return v6[2];
  }
  uint64_t v6 = std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__emplace_unique_key_args<long,long const&>((uint64_t)v4, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::kCurrentKey, &fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::kCurrentKey);
  if (!v7) {
    return v6[2];
  }
  unint64_t v8 = a1[14];
  unint64_t v9 = a1[15];
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - a1[13]) >> 3);
  v6[2] = v10;
  uint64_t v11 = a1 + 13;
  if (v8 >= v9)
  {
    uint64_t v12 = std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(v11, a2);
  }
  else
  {
    std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>((uint64_t)v11, a2);
    uint64_t v12 = v8 + 24;
  }
  a1[14] = v12;
  return v10;
}

void *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__emplace_unique_key_args<long,long const&>(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v7 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc::operator()((uint64_t *)(a1 + 48), *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual::operator()((uint64_t **)(a1 + 64), i[2], *a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = fst::PoolAllocator<std::__hash_node<long,void *>>::allocate((uint64_t *)(a1 + 32), 1uLL);
  *unint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v16 = *(float *)(a1 + 56);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_23ABFAF80(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<long,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc::operator()(uint64_t *a1, uint64_t a2)
{
  if (a2 < -1) {
    return 0;
  }
  uint64_t v2 = *a1;
  unint64_t v3 = a2 == -1 ? *(int ***)(v2 + 128) : (int **)(*(void *)(v2 + 104) + 24 * a2);
  uint64_t v4 = *v3;
  unsigned int v5 = v3[1];
  if (v4 == v5) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v7 = *v4;
    int v8 = v4[1];
    v4 += 2;
    result += v7 + 7863 * v8;
  }
  while (v4 != v5);
  return result;
}

BOOL fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual::operator()(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  BOOL result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    unsigned int v5 = *a1;
    if (a2 == -1) {
      uint64_t v6 = v5[16];
    }
    else {
      uint64_t v6 = v5[13] + 24 * a2;
    }
    if (a3 == -1) {
      uint64_t v7 = v5[16];
    }
    else {
      uint64_t v7 = v5[13] + 24 * a3;
    }
    return std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](v5[1], v6, v7);
  }
  return result;
}

BOOL std::equal_to<fst::ReplaceStackPrefix<int,int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD **)a2;
  unint64_t v3 = *(_DWORD **)(a2 + 8);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a2) >> 3;
  uint64_t v6 = *(_DWORD **)a3;
  if (v5 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : ((uint64_t)v3 - *(void *)a2) >> 3;
  if (*v4 != *v6 || v4[1] != v6[1]) {
    return 0;
  }
  int v8 = v6 + 3;
  unint64_t v9 = v4 + 3;
  uint64_t v10 = 1;
  do
  {
    unint64_t v11 = v10;
    if (v7 == v10) {
      break;
    }
    if (*(v9 - 1) != *(v8 - 1)) {
      break;
    }
    int v13 = *v9;
    v9 += 2;
    int v12 = v13;
    int v14 = *v8;
    v8 += 2;
    ++v10;
  }
  while (v12 == v14);
  return v11 >= v5;
}

void *fst::PoolAllocator<std::__hash_node<long,void *>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<2>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<56ul>::Allocate((void *)(v2 + 8), 1);
      result[6] = 0;
      return result;
    }
    uint64_t v4 = result[6];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<32ul>::Allocate((void *)(v2 + 8), 1);
      result[3] = 0;
      return result;
    }
    uint64_t v4 = result[3];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<4>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<104ul>::Allocate((void *)(v2 + 8), 1);
      result[12] = 0;
      return result;
    }
    uint64_t v4 = result[12];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<8>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<200ul>::Allocate((void *)(v2 + 8), 1);
      result[24] = 0;
      return result;
    }
    uint64_t v4 = result[24];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<16>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<392ul>::Allocate((void *)(v2 + 8), 1);
      result[48] = 0;
      return result;
    }
    uint64_t v4 = result[48];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<32>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<776ul>::Allocate((void *)(v2 + 8), 1);
      result[96] = 0;
      return result;
    }
    uint64_t v4 = result[96];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<64>>(*a1);
    BOOL result = *(void **)(v2 + 56);
    if (!result)
    {
      BOOL result = (void *)fst::internal::MemoryArenaImpl<1544ul>::Allocate((void *)(v2 + 8), 1);
      result[192] = 0;
      return result;
    }
    uint64_t v4 = result[192];
    goto LABEL_26;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<long,void *>>>::operator()[abi:ne180100](uint64_t result, uint64_t a2)
{
  if (a2)
  {
    BOOL result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<long,void *>>::TN<1>>(**(void **)result);
    *(void *)(a2 + ++*(_DWORD *)(result + 24) = *(void *)(result + 56);
    *(void *)(result + 56) = a2;
  }
  return result;
}

void *std::vector<fst::ReplaceStackPrefix<int,int>>::__construct_one_at_end[abi:ne180100]<fst::ReplaceStackPrefix<int,int> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  BOOL result = std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_23ABFB364(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceStackPrefix<int,int>>::__push_back_slow_path<fst::ReplaceStackPrefix<int,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  float v15 = v11;
  float v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_23ABFB470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReplaceStackPrefix<int,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::find<long>(void *a1, uint64_t *a2)
{
  unint64_t v4 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc::operator()(a1 + 6, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t **)(a1 + 8);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual::operator()(v12, v11[2], *a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(void *a1, _OWORD *a2, int a3)
{
  a1[16] = a2;
  unint64_t v4 = a1 + 4;
  if (!a3)
  {
    unint64_t v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(v4, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::kCurrentKey);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
    return *((unsigned int *)v6 + 4);
  }
  unint64_t v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v4, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::kCurrentKey, &fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::kCurrentKey);
  if (!v7) {
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v8 = a1[13];
  unint64_t v9 = (_OWORD *)a1[14];
  uint64_t v10 = ((uint64_t)v9 - v8) >> 4;
  *((_DWORD *)v6 + 4) = v10;
  unint64_t v11 = a1[15];
  if ((unint64_t)v9 >= v11)
  {
    unint64_t v13 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v11 - v8;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a1 + 15), v15);
    }
    else {
      float v16 = 0;
    }
    BOOL v17 = &v16[16 * v10];
    unint64_t v18 = &v16[16 * v15];
    *(_OWORD *)BOOL v17 = *a2;
    uint64_t v12 = v17 + 16;
    size_t v20 = (char *)a1[13];
    unint64_t v19 = (char *)a1[14];
    if (v19 != v20)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)a1[13];
    }
    a1[13] = v17;
    a1[14] = v12;
    a1[15] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v9 = *a2;
    uint64_t v12 = v9 + 1;
  }
  a1[14] = v12;
  return v10;
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v7 == -1) {
      uint64_t v9 = *(void *)(v8 + 128);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 104) + 16 * v7;
    }
    unint64_t v10 = *(void *)v9 + 7853 * *(int *)(v9 + 8) + 7867 * *(int *)(v9 + 12);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t *)(a1 + 32), 1uLL);
  *unint64_t i = 0;
  i[1] = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *unint64_t i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  *unint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_23ABFB964(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 == a3) {
    return 1;
  }
  BOOL result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    uint64_t v5 = *a1;
    if (a2 == -1) {
      uint64_t v6 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v6 = *(void *)(v5 + 104) + 16 * a2;
    }
    if (a3 == -1) {
      uint64_t v7 = *(void *)(v5 + 128);
    }
    else {
      uint64_t v7 = *(void *)(v5 + 104) + 16 * a3;
    }
    return *(void *)v6 == *(void *)v7
        && *(_DWORD *)(v6 + 8) == *(_DWORD *)(v7 + 8)
        && *(_DWORD *)(v6 + 12) == *(_DWORD *)(v7 + 12);
  }
  return result;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v3 = *a2;
  if ((int)v3 < -1)
  {
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = a1[6];
    if (v3 == -1) {
      uint64_t v5 = *(void *)(v4 + 128);
    }
    else {
      uint64_t v5 = *(void *)(v4 + 104) + 16 * v3;
    }
    unint64_t v6 = *(void *)v5 + 7853 * *(int *)(v5 + 8) + 7867 * *(int *)(v5 + 12);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint8x8_t v12 = *v11;
  if (*v11)
  {
    unint64_t v13 = a1 + 8;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint8x8_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

_DWORD *fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  BOOL result = (_DWORD *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal(a1, a2);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v7 + 92) == a2) {
      uint8x8_t v8 = (int **)(v7 + 96);
    }
    else {
      uint8x8_t v8 = (int **)(*(void *)(v7 + 8) + 8 * a2 + 8);
    }
    *a3 = **v8;
  }
  else
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 168) + 104);
    unint64_t v10 = fst::TropicalWeightTpl<float>::Zero();
    int v11 = *v10;
    *a3 = *v10;
    if (!*(void *)(v9 + 16 * a2))
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 240)
                                                                  + 8 * *(int *)(v9 + 16 * a2 + 8))
                                                    + 24))(&v12);
      int v11 = v12;
      *a3 = v12;
    }
    if (*(unsigned char *)(a1 + 160)
      || (BOOL result = (_DWORD *)fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(a1, a2), result))
    {
      BOOL result = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      _DWORD *result = v11;
      result[14] |= 9u;
    }
  }
  return result;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  if (!fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(a1, a2))
  {
    if (!*(unsigned char *)(a1 + 160))
    {
      long long v9 = *(_OWORD *)(*(void *)(*(void *)(a1 + 168) + 104) + 16 * a2);
      if (HIDWORD(v9) == -1) {
        return 0;
      }
      uint64_t v7 = *(void *)(*(void *)(a1 + 240) + 8 * SDWORD2(v9));
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
      return v8
           + fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(a1, (uint64_t *)&v9, 0, 15);
    }
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand((uint64_t *)a1, a2);
  }
  uint64_t v4 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(uint64_t *a1, int a2)
{
  long long v12 = *(_OWORD *)(*(void *)(a1[21] + 104) + 16 * a2);
  if (HIDWORD(v12) != -1)
  {
    uint64_t v4 = *(void *)(a1[30] + 8 * SDWORD2(v12));
    long long v9 = 0u;
    long long v10 = 0u;
    unint64_t v11 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 120))(v4);
    if (fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v12, v8, 15))
    {
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1[15], a2);
      std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](MutableState + 3, (uint64_t)v8);
    }
    while (1)
    {
      if ((void)v9)
      {
        if ((*(uint64_t (**)(void))(*(void *)v9 + 16))(v9))
        {
LABEL_15:
          fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((uint64_t)a1, a2);
          if ((void)v9)
          {
            (*(void (**)(void))(*(void *)v9 + 8))(v9);
          }
          else if (*((void *)&v10 + 1))
          {
            --**((_DWORD **)&v10 + 1);
          }
          return;
        }
        if ((void)v9)
        {
          unint64_t v6 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v9 + 24))(v9);
          goto LABEL_8;
        }
      }
      else if (v11 >= (unint64_t)v10)
      {
        goto LABEL_15;
      }
      unint64_t v6 = (unsigned int *)(*((void *)&v9 + 1) + 16 * v11);
LABEL_8:
      if (fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc((uint64_t)a1, (uint64_t)&v12, v6, (uint64_t)v8, 15))
      {
        uint64_t v7 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1[15], a2);
        std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::push_back[abi:ne180100](v7 + 3, (uint64_t)v8);
      }
      if ((void)v9) {
        (*(void (**)(void))(*(void *)v9 + 32))(v9);
      }
      else {
        ++v11;
      }
    }
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((uint64_t)a1, a2);
}

void sub_23ABFBF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(uint64_t a1, uint64_t *a2, _DWORD *a3, char a4)
{
  if (*((_DWORD *)a2 + 3) == -1) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 240) + 8 * *((int *)a2 + 2)) + 24))(&v23);
  uint64_t v8 = fst::TropicalWeightTpl<float>::Zero();
  LODWORD(v19) = v23;
  HIDWORD(v23) = 0;
  HIDWORD(v23) = *v8;
  v9.n128_u32[0] = v23;
  if (*(float *)&v23 == *((float *)&v23 + 1)) {
    return 0;
  }
  uint64_t v10 = *a2;
  if (!*a2) {
    return 0;
  }
  if (a3)
  {
    int v11 = *(_DWORD *)(a1 + 136);
    if ((v11 & 0xFFFFFFFD) == 1) {
      int v12 = 0;
    }
    else {
      int v12 = *(_DWORD *)(a1 + 152);
    }
    *a3 = v12;
    if ((v11 - 1) >= 2) {
      int v14 = *(_DWORD *)(a1 + 152);
    }
    else {
      int v14 = 0;
    }
    a3[1] = v14;
    if ((a4 & 8) != 0)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 168) + 240) + 24 * v10;
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      std::string __p = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      v21 -= 8;
      uint64_t Id = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId((void *)(*(void *)(a1 + 168) + 136), (uint64_t)&__p, 1);
      if (__p)
      {
        unint64_t v21 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v17 = *(void *)(v15 + 8);
      float v18 = *(void **)(a1 + 168);
      *(void *)&long long v19 = Id;
      *((void *)&v19 + 1) = *(void *)(v17 - 8);
      a3[3] = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v18, &v19, 1);
    }
    if ((a4 & 4) != 0)
    {
      (*(void (**)(long long *__return_ptr, __n128))(**(void **)(*(void *)(a1 + 240)
                                                                           + 8 * *((int *)a2 + 2))
                                                             + 24))(&v19, v9);
      a3[2] = v19;
    }
  }
  return 1;
}

void sub_23ABFC1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5)
{
  BOOL v7 = (a5 & 0xFFFFFFFA) != 0 || (*(_DWORD *)(a1 + 132) & 0xFFFFFFFD) == 1;
  if (!v7)
  {
    *(void *)a4 = *(void *)a3;
    *(_DWORD *)(a4 + 8) = a3[2];
    int Id = a3[3];
LABEL_24:
    *(_DWORD *)(a4 + 12) = Id;
    return 1;
  }
  char v8 = a5;
  int v12 = a3 + 1;
  signed int v11 = a3[1];
  if (!v11 || v11 < *(_DWORD *)(*(void *)(a1 + 176) + 28)) {
    goto LABEL_19;
  }
  uint64_t v13 = a1 + 184;
  uint64_t v14 = *(void *)(a1 + 184);
  if (v14)
  {
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14);
  }
  else
  {
    do
    {
      uint64_t v15 = *(void *)(v13 + 16);
      BOOL v7 = *(void *)v15 == v13;
      uint64_t v13 = v15;
    }
    while (v7);
  }
  if (v11 > *(_DWORD *)(v15 + 28)
    || (unint64_t v16 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 200), (int *)a3 + 1)) == 0)
  {
LABEL_19:
    if ((v8 & 8) != 0)
    {
      uint64_t v23 = *(void **)(a1 + 168);
      unsigned int v24 = *(_DWORD *)(a2 + 8);
      unsigned int v25 = a3[3];
      *(void *)&long long v36 = *(void *)a2;
      *((void *)&v36 + 1) = __PAIR64__(v25, v24);
      int Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v23, &v36, 1);
    }
    else
    {
      int Id = -1;
    }
    uint64_t v26 = *(void *)a3;
    unsigned int v27 = a3[2];
    goto LABEL_23;
  }
  unsigned int v17 = *((_DWORD *)v16 + 5);
  uint64_t v18 = *(void *)(*(void *)(a1 + 168) + 240) + 24 * *(void *)a2;
  std::string __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(&__p, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
  fst::ReplaceStackPrefix<int,int>::Push(&__p, *(_DWORD *)(a2 + 8), a3[3]);
  uint64_t v19 = fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::FindId((void *)(*(void *)(a1 + 168) + 136), (uint64_t)&__p, 1);
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  uint64_t v20 = *(void *)(*(void *)(a1 + 240) + 8 * (int)v17);
  unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
  if (v21 != -1)
  {
    if ((v8 & 8) != 0)
    {
      int v29 = *(void **)(a1 + 168);
      *(void *)&long long v36 = v19;
      *((void *)&v36 + 1) = __PAIR64__(v21, v17);
      int Id = fst::CompactHashBiTable<int,fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>,std::equal_to<fst::ReplaceStateTuple<int,long>>,(fst::HSType)3>::FindId(v29, &v36, 1);
    }
    else
    {
      int Id = -1;
    }
    uint64_t v30 = 0;
    int v31 = *(_DWORD *)(a1 + 132);
    if ((v31 & 0xFFFFFFFD) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a3;
    }
    if ((v31 - 1) >= 2)
    {
      uint64_t v30 = *(void *)(a1 + 144);
      if (v30 == -1) {
        uint64_t v30 = *v12;
      }
    }
    unsigned int v27 = a3[2];
    uint64_t v26 = v32 | (v30 << 32);
LABEL_23:
    *(void *)a4 = v26;
    *(_DWORD *)(a4 + 8) = v27;
    goto LABEL_24;
  }
  return 0;
}

void sub_23ABFC424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReplaceStackPrefix<int,int>::Push(void **a1, unsigned int a2, uint64_t a3)
{
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  __n128 v9 = *(unint64_t **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = ((char *)v9 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - (void)*a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    unsigned int v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = a2 | (unint64_t)(a3 << 32);
    uint64_t v10 = v16 + 8;
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *__n128 v9 = a2 | (unint64_t)(a3 << 32);
    uint64_t v10 = v9 + 1;
  }
  a1[1] = v10;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t *a1, int a2)
{
  if (!fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2))
  {
    if (!*((unsigned char *)a1 + 160) && (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 24))(a1, 0x10000000))
    {
      long long v9 = *(_OWORD *)(*(void *)(a1[21] + 104) + 16 * a2);
      if (HIDWORD(v9) == -1) {
        return 0;
      }
      uint64_t v8 = *(void *)(a1[30] + 8 * SDWORD2(v9));
      if ((*((_DWORD *)a1 + 33) & 0xFFFFFFFD) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 120))(v8);
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
      }
      if ((a1[17] & 0xFFFFFFFD) == 1) {
        v6 += fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v9, 0, 15);
      }
      return v6;
    }
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(a1, a2);
  }
  uint64_t v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
  }
  return *(void *)(*(void *)v5 + 8);
}

void sub_23ABFC818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState();
  }
  else {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

BOOL fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::IsNonTerminal(void *a1, int a2)
{
  int v7 = a2;
  if (*(_DWORD *)(a1[22] + 28) > a2) {
    return 0;
  }
  uint64_t v2 = a1 + 23;
  uint64_t v3 = a1[23];
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    do
    {
      uint64_t v4 = v2[2];
      BOOL v5 = *(void *)v4 == (void)v2;
      uint64_t v2 = (void *)v4;
    }
    while (v5);
  }
  return *(_DWORD *)(v4 + 28) >= a2
      && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 25, &v7) != 0;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t *a1, int a2)
{
  if (!fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2))
  {
    if (!*((unsigned char *)a1 + 160) && (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 24))(a1, 0x40000000))
    {
      long long v9 = *(_OWORD *)(*(void *)(a1[21] + 104) + 16 * a2);
      if (HIDWORD(v9) == -1) {
        return 0;
      }
      uint64_t v8 = *(void *)(a1[30] + 8 * SDWORD2(v9));
      if ((*((_DWORD *)a1 + 33) - 1) >= 2)
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
      }
      else
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 120))(v8);
        uint64_t v6 = 0;
      }
      if ((*((_DWORD *)a1 + 34) - 1) <= 1) {
        v6 += fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc((uint64_t)a1, (uint64_t *)&v9, 0, 15);
      }
      return v6;
    }
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(a1, a2);
  }
  uint64_t v4 = a1[15];
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * a2 + 8;
  }
  return *(void *)(*(void *)v5 + 16);
}

void sub_23ABFCBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState();
  }
  else {
    fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToFst(void *a1, uint64_t a2, int a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2CDF8;
  if (a3) {
    std::allocate_shared[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,void>((uint64_t)&v8, *(void *)(a2 + 8));
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    uint64_t v6 = (std::__shared_weak_count *)a1[2];
    a1[1] = v5;
    a1[2] = v4;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    a1[1] = v5;
    a1[2] = 0;
  }
  return a1;
}

void sub_23ABFCC84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0x128uLL);
  std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(v3, a2);
}

void sub_23ABFCCE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>&,std::allocator<fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2C9E0;
  fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl((uint64_t)(a1 + 3), a2);
}

void sub_23ABFCD40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_23ABFD084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__split_buffer<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::~__split_buffer(&__p);
  std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v20);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a10, *(void **)(v19 + 184));
  std::unique_ptr<fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>>::reset[abi:ne180100]((uint64_t **)(v19 + 168), 0);
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v19);
  _Unwind_Resume(a1);
}

void **std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  BOOL result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_23ABFD1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const,std::default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_23ABFD210(_Unwind_Exception *a1)
{
  fst::CompactHashStateTable<fst::ReplaceStateTuple<int,long>,fst::ReplaceHash<int,long>>::~CompactHashStateTable(v1);
  _Unwind_Resume(a1);
}

void fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::CompactHashBiTable()
{
}

void sub_23ABFD2F4(_Unwind_Exception *a1)
{
  std::__hash_table<long,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<long,fst::ReplaceStackPrefix<int,int>,fst::ReplaceStackPrefixHash<int,int>,std::equal_to<fst::ReplaceStackPrefix<int,int>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<long>>::~__hash_table(v2);
  uint64_t v4 = v1[1];
  v1[1] = 0;
  if (v4) {
    MEMORY[0x23ECC24B0](v4, 0xC400A2AC0F1);
  }
  uint64_t v5 = *v1;
  uint64_t *v1 = 0;
  if (v5) {
    MEMORY[0x23ECC24B0](v5, 0xC400A2AC0F1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<fst::ReplaceStackPrefix<int,int>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<fst::ReplaceStackPrefix<int,int>>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23ABFD3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::ReplaceStackPrefix<int,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<fst::ReplaceStackPrefix<int,int>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<CMDPToken>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*,fst::ReplaceStackPrefix<int,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__init_with_size[abi:ne180100]<fst::ReplaceStackPrefix<int,int>::PrefixTuple*,fst::ReplaceStackPrefix<int,int>::PrefixTuple*>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23ABFD4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceStackPrefix<int,int>>,fst::ReplaceStackPrefix<int,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_23ABFD5BC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      BOOL result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          char v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    char v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      unsigned int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unsigned int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::unordered_map<int,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(int **)(a2 + 16); i; unint64_t i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(a1, i + 4, (void *)i + 2);
  return a1;
}

void sub_23ABFD8F0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int const,int> const&>(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  uint64_t v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_23ABFDB10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 64)) {
    return 0;
  }
  int v5 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 64)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(v15, *(void *)(a1 + 8), v6);
    fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFlags((int *)v15, 15, 31);
    uint64_t v7 = v16;
    uint64_t v8 = v17;
    while (v7 < v8)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      signed int v10 = fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(v15)[3];
      if (*(_DWORD *)(v9 + 64) <= v10) {
        *(_DWORD *)(v9 + 64) = v10 + 1;
      }
      uint64_t v8 = v17;
      uint64_t v7 = ++v16;
    }
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(*(void *)(a1 + 16), v6);
    int v11 = *(_DWORD *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 64);
    BOOL v4 = v11 >= v13;
    if (v18) {
      --*v18;
    }
    if (v19) {
      --*v19;
    }
    if (v11 < v13) {
      break;
    }
    int v6 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MinUnexpandedState(v12);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 64));
  return v4;
}

void sub_23ABFDC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,_DWORD *a26)
{
  if (a22) {
    --*a22;
  }
  if (a26) {
    --*a26;
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
}

uint64_t fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFlags(int *a1, int a2, int a3)
{
  char v3 = a2;
  int v5 = a1[14] & ~a3;
  uint64_t result = *(void *)(*(void *)a1 + 8);
  if (*(unsigned char *)(result + 160)) {
    int v7 = 15;
  }
  else {
    int v7 = 31;
  }
  int v8 = v7 & a2 | v5;
  a1[14] = v8;
  if ((v8 & 0x10) == 0 && a1[38] != 15)
  {
    uint64_t result = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(result, a1[2]);
    if ((result & 1) == 0) {
      a1[38] = 0;
    }
  }
  if ((v3 & 0x10) != 0 && !a1[38])
  {
    return (uint64_t)fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Init(a1);
  }
  return result;
}

unsigned int *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(void *a1)
{
  int v2 = *((_DWORD *)a1 + 38);
  if (v2)
  {
    uint64_t v3 = a1[5];
    int v4 = v2 ^ 0xF;
  }
  else
  {
    if ((a1[7] & 0x10) != 0)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      LogMessage::LogMessage(&v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ReplaceFst: Inconsistent arc iterator flags", 43);
      LogMessage::~LogMessage((LogMessage *)&v15);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(void, void, void *))(*(void *)*a1 + 120))(*a1, *((unsigned int *)a1 + 2), a1 + 10);
    int v4 = 0;
    uint64_t v3 = 0;
    a1[18] = a1[11];
    *((_DWORD *)a1 + 38) = 15;
    a1[5] = 0;
  }
  uint64_t v5 = a1[4] - v3;
  if (v5 < 0)
  {
    int v11 = *((_DWORD *)a1 + 14);
    if (((*((_DWORD *)a1 + 43) ^ 0xF) & v11) != 0)
    {
      fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(void *)(*a1 + 8), a1 + 2, (_DWORD *)a1 + 39, v11 & 0xF);
      *((_DWORD *)a1 + 43) = a1[7] & 0xF;
    }
    return (unsigned int *)a1 + 39;
  }
  else
  {
    int v6 = (unsigned int *)(a1[18] + 16 * v5);
    int v7 = *((_DWORD *)a1 + 14);
    if ((v4 & v7) != 0)
    {
      uint64_t v8 = (uint64_t)(a1 + 2);
      uint64_t v10 = *a1;
      uint64_t v9 = (uint64_t)a1 + 60;
      fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc(*(void *)(v10 + 8), v8, v6, v9, v7 & 0xF);
      return (unsigned int *)v9;
    }
  }
  return v6;
}

void sub_23ABFDF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(uint64_t *a1, uint64_t a2, int a3)
{
  *a1 = a2;
  *((_DWORD *)a1 + 2) = a3;
  a1[2] = -1;
  int v4 = a1 + 2;
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = -1;
  *((_DWORD *)a1 + 14) = 15;
  *((_OWORD *)a1 + 5) = 0u;
  uint64_t v5 = a1 + 10;
  *((_OWORD *)a1 + 7) = 0u;
  int v6 = a1 + 14;
  *((_DWORD *)a1 + 43) = 0;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *(_OWORD *)((char *)a1 + 140) = 0u;
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(unsigned char *)(v7 + 160))
  {
    char HasArcs = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(v7, a3);
    a2 = *a1;
    a3 = *((_DWORD *)a1 + 2);
    if ((HasArcs & 1) == 0)
    {
      fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(*(uint64_t **)(a2 + 8), *((_DWORD *)a1 + 2));
      a2 = *a1;
      a3 = *((_DWORD *)a1 + 2);
    }
  }
  int v9 = fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs(*(void *)(a2 + 8), a3);
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(*a1 + 8);
  if (v9)
  {
    fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(v11, *((_DWORD *)a1 + 2), v5);
    uint64_t v12 = a1[11];
    a1[6] = a1[12];
    a1[18] = v12;
    *((_DWORD *)a1 + 38) = 15;
  }
  else
  {
    *(_OWORD *)int v4 = *(_OWORD *)(*(void *)(*(void *)(v11 + 168) + 104) + 16 * *((int *)a1 + 2));
    uint64_t v13 = *((unsigned int *)a1 + 7);
    if (v13 == -1)
    {
      a1[6] = 0;
    }
    else
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(v10 + 8) + 240) + 8 * *((int *)a1 + 6));
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v14 + 120))(v14, v13, v6);
      a1[18] = a1[15];
      unsigned int v15 = fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(void *)(*a1 + 8), v4, (_DWORD *)a1 + 39, 7);
      *((_DWORD *)a1 + 43) = 7;
      uint64_t v16 = a1[16] + v15;
      a1[5] = v15;
      a1[6] = v16;
      *((_DWORD *)a1 + 38) = 0;
    }
  }
  return a1;
}

unsigned char *fst::ArcIterator<fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Init(unsigned char *result)
{
  uint64_t v1 = result;
  if ((result[56] & 0x10) != 0)
  {
    uint64_t v3 = *((void *)result + 16);
    *((void *)result + 18) = *((void *)result + 15);
    if ((*(_DWORD *)(*(void *)(*(void *)result + 8) + 132) & 0xFFFFFFFD) == 1) {
      int v4 = 4;
    }
    else {
      int v4 = 5;
    }
    *((_DWORD *)result + 38) = v4;
    uint64_t v2 = *((void *)result + 6) - v3;
  }
  else
  {
    uint64_t result = (unsigned char *)(*(uint64_t (**)(void))(**(void **)result + 120))();
    uint64_t v2 = 0;
    *((void *)v1 + 18) = *((void *)v1 + 11);
    *((_DWORD *)v1 + 38) = 15;
  }
  *((void *)v1 + 5) = v2;
  return result;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t *a1, int a2, void *a3)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Expand(a1, a2); {
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator((uint64_t)a1, a2, a3);
  }
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26EE2CF40;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = a3;
  *(_WORD *)(a1 + 77) = 0;
  *(void *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = -1;
  int v4 = *fst::TropicalWeightTpl<float>::One();
  *(void *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 120) = v4;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 24) = -1;
  if (*(_DWORD *)(a1 + 72) == 2) {
    *(void *)(a1 + 112) = 0xFFFFFFFF00000000;
  }
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatchers(a1);
  return a1;
}

void sub_23ABFE288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  a10 = v12;
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v14 = *(void *)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v14) {
    fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher();
  }
  _Unwind_Resume(a1);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatchers(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::resize(a1 + 40, (uint64_t)(*(void *)(v1 + 248) - *(void *)(v1 + 240)) >> 3);
  uint64_t v2 = *(void *)(v1 + 240);
  if (*(void *)(v1 + 248) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      if (*(void *)(v2 + 8 * v3)) {
        operator new();
      }
      ++v3;
      uint64_t v2 = *(void *)(v1 + 240);
    }
    while (v3 < (*(void *)(v1 + 248) - v2) >> 3);
  }
}

void sub_23ABFE3D8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x1020C403A3A3D98);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ReplaceFstMatcher(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2CF40;
  int v4 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;
  void **v4;

  *(void *)a1 = &unk_26EE2CF40;
  int v4 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return MEMORY[0x23ECC24B0](a1, 0x10E1C40A5BE1C0BLL);
}

void fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_23ABFE578(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C40A5BE1C0BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 72);
  if (v2 == 4) {
    return 4;
  }
  if (v2 == 1) {
    uint64_t v6 = 0x10000000;
  }
  else {
    uint64_t v6 = 0x40000000;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v2 == 1) {
    uint64_t v8 = 805306368;
  }
  else {
    uint64_t v8 = 3221225472;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 56))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 72);
  }
  uint64_t v10 = 0x80000000;
  if (v2 == 1) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 4;
  }
  else {
    return 5;
  }
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 64) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 64) = a2;
    *(_OWORD *)(result + 80) = *(_OWORD *)(*(void *)(*(void *)(*(void *)(result + 24) + 168) + 104) + 16 * a2);
    uint64_t v3 = *(unsigned int *)(result + 92);
    if (v3 == -1)
    {
      *(unsigned char *)(result + 76) = 1;
    }
    else
    {
      int v4 = *(_DWORD **)(*(void *)(result + 40) + 8 * *(int *)(result + 88));
      *(void *)(result + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v4 + 8) + 32))(*(void *)(*(void *)v4 + 8), v3);
      v4[18] = v3;
      *(_DWORD *)(v2 + 1++*(_DWORD *)(result + 24) = *(_DWORD *)(v2 + 64);
      *(unsigned char *)(v2 + 78) = 0;
    }
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 68) = a2;
  if ((a2 + 1) > 1)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    return fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(v8, a2);
  }
  else
  {
    if (!a2) {
      *(unsigned char *)(a1 + 77) = 1;
    }
    *(unsigned char *)(a1 + 78) = fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(void *)(a1 + 24), (uint64_t *)(a1 + 80), 0, 15);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)(v4 + 24);
    *(void *)(v4 + 48) = v4 + 24;
    *(unsigned char *)(v4 + 56) = 0;
    if (*(unsigned char *)(v4 + 8))
    {
      uint64_t v9 = *(void **)(v4 + 16);
      while (1)
      {
        *(void *)(v4 + 48) = v9;
        if (v9 == v5) {
          break;
        }
        char v10 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)v4 + 8) + 40))(*(void *)(*(void *)v4 + 8), *((unsigned int *)v9 + 7));
        uint64_t v11 = *(void **)(v4 + 48);
        if (v10)
        {
          if (v11 == v5) {
            break;
          }
          *(unsigned char *)(v4 + 76) = 0;
          return 1;
        }
        uint64_t v12 = (void *)v11[1];
        if (v12)
        {
          do
          {
            uint64_t v9 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v11[2];
            BOOL v13 = *v9 == (void)v11;
            uint64_t v11 = v9;
          }
          while (!v13);
        }
      }
    }
    char v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v4 + 8) + 40))(*(void *)(*(void *)v4 + 8), 0xFFFFFFFFLL);
    *(unsigned char *)(v4 + 76) = v6 ^ 1;
    if (v6)
    {
      return 1;
    }
    else
    {
      if (a2) {
        BOOL v13 = *(unsigned char *)(a1 + 78) == 0;
      }
      else {
        BOOL v13 = 0;
      }
      return !v13;
    }
  }
}

BOOL fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 77) && !*(unsigned char *)(a1 + 78) && *(unsigned char *)(*(void *)(a1 + 32) + 76) != 0;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 77)) {
    return a1 + 112;
  }
  if (*(unsigned char *)(a1 + 78))
  {
    uint64_t v2 = a1 + 96;
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeFinalArc(*(void *)(a1 + 24), (uint64_t *)(a1 + 80), (_DWORD *)(a1 + 96), 15);
  }
  else
  {
    uint64_t v3 = *(unsigned int **)(a1 + 32);
    if (*((unsigned char *)v3 + 56)) {
      uint64_t v4 = v3 + 15;
    }
    else {
      uint64_t v4 = (unsigned int *)(*(uint64_t (**)(void))(**(void **)(*(void *)v3 + 8) + 56))(*(void *)(*(void *)v3 + 8));
    }
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = a1 + 80;
    uint64_t v2 = a1 + 96;
    fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComputeArc(v5, v6, v4, v2, 15);
  }
  return v2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 77))
  {
    *(unsigned char *)(result + 77) = 0;
  }
  else if (*(unsigned char *)(result + 78))
  {
    *(unsigned char *)(result + 78) = 0;
  }
  else
  {
    return fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(*(void *)(result + 32));
  }
  return result;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Priority(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

void std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 8 * a2;
      while (v3 != (uint64_t *)v6)
        std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100](--v3, 0);
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__append((char **)a1, v5);
  }
}

uint64_t std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(result);
    JUMPOUT(0x23ECC24B0);
  }
  return result;
}

void fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = a1 + 16;
    fst::CompactSet<int,-1>::Insert(v2, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    LogMessage::LogMessage(&v5, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    LogMessage::~LogMessage((LogMessage *)&v5);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23ABFEB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  BOOL v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    uint64_t v24 = v4;
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unsigned int v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    uint64_t v23 = v16;
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    *((void *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *(void *)uint64_t v7 = 0;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      uint64_t v17 = (char *)*((void *)&v22 + 1);
      uint64_t v16 = v23;
    }
    long long v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    long long v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v16;
    uint64_t v23 = v20;
    uint64_t v21 = v19;
    std::__split_buffer<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v2 = *(uint64_t **)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = v2[1];
      v2[1] = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      MEMORY[0x23ECC24B0](v2, 0x60C405C6656D0);
    }
  }
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, char a6)
{
  if (!a5) {
    operator new();
  }
  *(void *)a1 = a5;
  *(_DWORD *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 12) = a6;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  if (a3 == 1) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  if (a3 == 1) {
    int v8 = 0;
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 60) = v7;
  *(_DWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 68) = *fst::TropicalWeightTpl<float>::One();
  *(_DWORD *)(a1 + 72) = -1;
  return a1;
}

void sub_23ABFEEA8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x60C405C6656D0);
  _Unwind_Resume(a1);
}

uint64_t *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, 0);
  *a1 = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, a3);
  a1[1] = v6;
  if (!v6) {
    operator new();
  }
  return a1;
}

void sub_23ABFEFCC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v2, 0x10E1C4054F459C6);
  uint64_t v4 = v1[1];
  v1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *v1;
  uint64_t *v1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t **fst::CompactSet<int,-1>::Insert(uint64_t a1, int a2)
{
  int v9 = a2;
  uint64_t result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a1, &v9, &v9);
  int v4 = *(_DWORD *)(a1 + 24);
  int v5 = v9;
  if (v4 == -1 || v9 < v4) {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v9;
  }
  int v7 = *(_DWORD *)(a1 + 28);
  if (v7 == -1 || v7 < v5) {
    *(_DWORD *)(a1 + 28) = v5;
  }
  return result;
}

void std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    int v4 = (uint64_t *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26EE2CF40;
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16), a3);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v5 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v6;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 77) = 0;
  *(void *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = -1;
  int v7 = *fst::TropicalWeightTpl<float>::One();
  *(void *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 120) = v7;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 24) = -1;
  if (*(_DWORD *)(a1 + 72) == 2) {
    *(void *)(a1 + 112) = 0xFFFFFFFF00000000;
  }
  fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatchers(a1);
  return a1;
}

void sub_23ABFF238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::unique_ptr<fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v4) {
    fst::ReplaceFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ReplaceFstMatcher();
  }
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(uint64_t a1, int a2)
{
  uint64_t v3 = (void *)(a1 + 24);
  *(void *)(a1 + 48) = a1 + 24;
  *(unsigned char *)(a1 + 56) = 0;
  if (a2 == -1)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v6 = *(void **)(a1 + 16);
      while (1)
      {
        *(void *)(a1 + 48) = v6;
        if (v6 == v3) {
          break;
        }
        char v7 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)a1 + 8) + 40))(*(void *)(*(void *)a1 + 8), *((unsigned int *)v6 + 7));
        int v8 = *(void **)(a1 + 48);
        if (v7)
        {
          if (v8 == v3) {
            break;
          }
          uint64_t result = 1;
          goto LABEL_11;
        }
        int v9 = (void *)v8[1];
        if (v9)
        {
          do
          {
            uint64_t v6 = v9;
            int v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v8[2];
            BOOL v10 = *v6 == (void)v8;
            int v8 = v6;
          }
          while (!v10);
        }
      }
    }
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 8) + 40);
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 8) + 40);
LABEL_10:
    uint64_t result = v4();
    goto LABEL_11;
  }
  if ((*(unsigned char *)(a1 + 8) & 2) == 0 || v3 == (void *)fst::CompactSet<int,-1>::Find(a1 + 16, a2))
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 8) + 40);
    goto LABEL_10;
  }
  uint64_t result = 1;
  *(unsigned char *)(a1 + 56) = 1;
LABEL_11:
  *(unsigned char *)(a1 + 76) = result ^ 1;
  return result;
}

uint64_t fst::CompactSet<int,-1>::Find(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  BOOL v3 = v2 != -1 && v2 <= a2;
  if (!v3 || *(_DWORD *)(a1 + 28) < a2) {
    return a1 + 8;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v5 = a1 + 8;
  uint64_t v6 = v7;
  if (!v7) {
    return v5;
  }
  uint64_t v4 = v5;
  do
  {
    int v8 = *(_DWORD *)(v6 + 28);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      BOOL v10 = (uint64_t *)v6;
    }
    else {
      BOOL v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v4 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v4 == v5 || *(_DWORD *)(v4 + 28) > a2) {
    return v5;
  }
  return v4;
}

uint64_t fst::MultiEpsMatcher<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  uint64_t v1 = (unsigned char *)result;
  if (*(unsigned char *)(result + 56))
  {
    char v2 = 1;
LABEL_3:
    v1[76] = v2;
  }
  else
  {
    (*(void (**)(void))(**(void **)(*(void *)result + 8) + 64))(*(void *)(*(void *)result + 8));
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)v1 + 8) + 48))(*(void *)(*(void *)v1 + 8));
    v1[76] = result;
    if (result)
    {
      BOOL v3 = v1 + 24;
      uint64_t v4 = (void *)*((void *)v1 + 6);
      if (v4 != (void *)(v1 + 24))
      {
        uint64_t v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          *((void *)v1 + 6) = v6;
          if (v6 == (void *)v3) {
            goto LABEL_19;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(*(void *)v1 + 8) + 40))(*(void *)(*(void *)v1 + 8), *((unsigned int *)v6 + 7));
          int v8 = (void *)*((void *)v1 + 6);
          if (result) {
            break;
          }
          BOOL v9 = (void *)v8[1];
          if (v9)
          {
            do
            {
              uint64_t v6 = v9;
              BOOL v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v6 = (void *)v8[2];
              BOOL v7 = *v6 == (void)v8;
              int v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == (void *)v3)
        {
LABEL_19:
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v1 + 8) + 40))(*(void *)(*(void *)v1 + 8), 0xFFFFFFFFLL);
          char v2 = result ^ 1;
          goto LABEL_3;
        }
        v1[76] = 0;
      }
    }
  }
  return result;
}

uint64_t fst::internal::ReplaceFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CyclicDependencies(uint64_t a1)
{
  v5[0] = *(int *)(a1 + 264);
  v5[1] = 0x100000002;
  uint64_t v5[2] = 0;
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceUtil((uint64_t)v3, (uint64_t *)(a1 + 240), a1 + 200, v5);
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetDependencies((uint64_t)v3, 0);
  uint64_t v1 = (v4 >> 34) & 1;
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~ReplaceUtil((uint64_t)v3);
  return v1;
}

void sub_23ABFF648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~ReplaceUtil((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceUtil(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  uint64_t v9 = a4[2];
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  BOOL v10 = (char **)(a1 + 24);
  *(_DWORD *)(a1 + 4) = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  uint64_t v11 = (uint64_t *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::vector<int>::vector((std::vector<int> *)(a1 + 72), (a2[1] - *a2) >> 3);
  int v44 = v11;
  std::unordered_map<int,int>::unordered_map(a1 + 96, a3);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst((void *)(a1 + 136));
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0u;
  *(_OWORD *)(a1 + 2++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  uint64_t v12 = *(void **)(a1 + 32);
  unint64_t v13 = *(void *)(a1 + 40);
  if ((unint64_t)v12 >= v13)
  {
    uint64_t v15 = ((char *)v12 - *v10) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v13 - (void)*v10;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 40, v18);
    }
    else {
      long long v19 = 0;
    }
    unint64_t v20 = &v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    *(void *)unint64_t v20 = 0;
    uint64_t v14 = v20 + 8;
    uint64_t v23 = *(char **)(a1 + 24);
    long long v22 = *(char **)(a1 + 32);
    if (v22 != v23)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      long long v22 = *v10;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *uint64_t v12 = 0;
    uint64_t v14 = v12 + 1;
  }
  *(void *)(a1 + 32) = v14;
  uint64_t v25 = *a2;
  if ((unint64_t)(a2[1] - *a2) >= 9)
  {
    unint64_t v26 = 1;
    do
    {
      uint64_t v27 = (*(uint64_t (**)(void, void))(**(void **)(v25 + 8 * v26) + 72))(*(void *)(v25 + 8 * v26), 0);
      uint64_t v28 = v27;
      uint64_t v30 = *(uint64_t **)(a1 + 32);
      unint64_t v29 = *(void *)(a1 + 40);
      if ((unint64_t)v30 >= v29)
      {
        uint64_t v32 = ((char *)v30 - *v10) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = v29 - (void)*v10;
        uint64_t v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35) {
          long long v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(a1 + 40, v35);
        }
        else {
          long long v36 = 0;
        }
        char v37 = (uint64_t *)&v36[8 * v32];
        uint64_t *v37 = v28;
        int v31 = v37 + 1;
        uint64_t v39 = *(char **)(a1 + 24);
        uint64_t v38 = *(char **)(a1 + 32);
        if (v38 != v39)
        {
          do
          {
            uint64_t v40 = *((void *)v38 - 1);
            v38 -= 8;
            *--char v37 = v40;
          }
          while (v38 != v39);
          uint64_t v38 = *v10;
        }
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = v37;
        *(void *)(a1 + 32) = v31;
        *(void *)(a1 + 40) = &v36[8 * v35];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        uint64_t *v30 = v27;
        int v31 = v30 + 1;
      }
      *(void *)(a1 + 32) = v31;
      ++v26;
      uint64_t v25 = *a2;
    }
    while (v26 < (a2[1] - *a2) >> 3);
  }
  unint64_t v41 = *(uint64_t **)(a3 + 16);
  for (uint64_t i = *v44; v41; v41 = (uint64_t *)*v41)
    *(_DWORD *)(i + 4 * *((int *)v41 + 5)) = *((_DWORD *)v41 + 4);
  *(_DWORD *)a1 = *(_DWORD *)(i + 4 * *(int *)(a1 + 4));
  return a1;
}

void sub_23ABFF930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14)
{
  unint64_t v18 = (void *)v14[31];
  if (v18)
  {
    v14[32] = v18;
    operator delete(v18);
  }
  a14 = a9;
  std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__destroy_vector::operator()[abi:ne180100](&a14);
  long long v19 = (void *)v14[23];
  if (v19) {
    operator delete(v19);
  }
  unint64_t v20 = *v16;
  if (*v16)
  {
    v14[21] = v20;
    operator delete(v20);
  }
  v14[17] = &unk_26EE2A7B0;
  uint64_t v21 = (std::__shared_weak_count *)v14[19];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a11);
  long long v22 = *a13;
  if (*a13)
  {
    v14[10] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)v14[6];
  if (v23)
  {
    v14[7] = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v15;
  if (*v15)
  {
    v14[4] = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_23ABFFA5C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 24;
    do
    {
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v5, *(void **)(v5 + 8));
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(v5 - 24, *(void **)(v5 - 16));
      uint64_t v6 = v5 - 56;
      v5 -= 80;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats::~ReplaceStats(uint64_t a1)
{
  return a1;
}

uint64_t fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetDependencies(uint64_t result, int a2)
{
  char v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result + 136;
  if ((int)((*(void *)(*(void *)(result + 144) + 64) - *(void *)(*(void *)(result + 144) + 56)) >> 3) < 1)
  {
    *(unsigned char *)(result + 216) = a2;
    uint64_t v5 = (unsigned char *)(result + 216);
    if (!a2)
    {
LABEL_7:
      if (*(void *)(v3 + 32) != *(void *)(v3 + 24))
      {
        unint64_t v6 = 0;
        do
        {
          fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(v4);
          int v7 = *fst::TropicalWeightTpl<float>::One();
          fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v4);
          uint64_t v8 = *(void **)(v3 + 144);
          LODWORD(v40) = v7;
          fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(v8, v6, (float *)&v40);
          if (*(unsigned char *)(v3 + 216))
          {
            BOOL v43 = 0;
            uint64_t v44 = 0;
            long long v40 = 0uLL;
            LODWORD(v41) = 0;
            *((void *)&v41 + 1) = 0;
            unint64_t v42 = (unint64_t)&v43;
            *((void *)&v45 + 1) = 0;
            *(void *)&long long v46 = 0;
            *(void *)&long long v45 = (char *)&v45 + 8;
            unint64_t v9 = *(void *)(v3 + 232);
            if (v9 >= *(void *)(v3 + 240))
            {
              uint64_t v14 = std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__push_back_slow_path<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>((uint64_t *)(v3 + 224), (uint64_t)&v40);
            }
            else
            {
              long long v10 = v41;
              *(_OWORD *)unint64_t v9 = v40;
              *(_OWORD *)(v9 + 16) = v10;
              *(void *)(v9 + 32) = v42;
              uint64_t v11 = v43;
              *(void *)(v9 + 40) = v43;
              unint64_t v12 = v9 + 40;
              uint64_t v13 = v44;
              *(void *)(v9 + 48) = v44;
              if (v13)
              {
                v11[2] = v12;
                unint64_t v42 = (unint64_t)&v43;
                BOOL v43 = 0;
                uint64_t v44 = 0;
              }
              else
              {
                *(void *)(v9 + 32) = v12;
              }
              *(void *)(v9 + 56) = v45;
              uint64_t v15 = *((void *)&v45 + 1);
              *(void *)(v9 + 64) = *((void *)&v45 + 1);
              unint64_t v16 = v9 + 64;
              uint64_t v17 = v46;
              *(void *)(v9 + 72) = v46;
              if (v17)
              {
                *(void *)(v15 + 16) = v16;
                *(void *)&long long v45 = (char *)&v45 + 8;
                *((void *)&v45 + 1) = 0;
                *(void *)&long long v46 = 0;
              }
              else
              {
                *(void *)(v9 + 56) = v16;
              }
              uint64_t v14 = v9 + 80;
            }
            *(void *)(v3 + 232) = v14;
            std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)&v45, *((void **)&v45 + 1));
            std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)&v42, v43);
          }
          ++v6;
        }
        while (v6 < (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 3);
      }
      fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetStart(v4, *(_DWORD *)(v3 + 4));
      int v54 = 0;
      uint64_t v19 = *(void *)(v3 + 24);
      uint64_t v18 = *(void *)(v3 + 32);
      if (v18 == v19)
      {
LABEL_61:
        *(void *)&long long v40 = v3 + 160;
        *((void *)&v40 + 1) = v3 + 184;
        *(void *)&long long v41 = 0;
        *((void *)&v41 + 1) = v3 + 208;
        long long v45 = 0u;
        long long v46 = 0u;
        fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v4, (uint64_t)&v40);
      }
      int v20 = 0;
      uint64_t v21 = 0;
      while (1)
      {
        uint64_t v22 = *(void *)(v19 + 8 * v21);
        if (!v22) {
          goto LABEL_60;
        }
        uint64_t v51 = 0;
        int v52 = 0;
        unsigned int v53 = 0;
        uint64_t v39 = v22;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 112))(v22, &v51);
LABEL_25:
        if (!v51) {
          break;
        }
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v51 + 16))(v51))
        {
          if (v51)
          {
            uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v51 + 24))();
            goto LABEL_31;
          }
LABEL_30:
          uint64_t v23 = v53;
LABEL_31:
          uint64_t v24 = v39;
          if (*v5)
          {
            ++*(_DWORD *)(*(void *)(v3 + 224) + 80 * v54);
            (*(void (**)(float *__return_ptr))(*(void *)v39 + 24))(&v50);
            uint64_t v25 = fst::TropicalWeightTpl<float>::Zero();
            *(float *)&long long v40 = v50;
            LODWORD(v47) = 0;
            LODWORD(v47) = *v25;
            uint64_t v24 = v39;
            if (v50 != *(float *)&v47)
            {
              uint64_t v26 = *(void *)(v3 + 224) + 80 * v54;
              ++*(_DWORD *)(v26 + 4);
            }
          }
          unint64_t v42 = 0;
          long long v40 = 0u;
          long long v41 = 0u;
          (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v24 + 120))(v24, v23, &v40);
          while (1)
          {
            if ((void)v40)
            {
              if ((*(unsigned int (**)(void))(*(void *)v40 + 16))(v40))
              {
                if ((void)v40)
                {
                  (*(void (**)(void))(*(void *)v40 + 8))(v40);
                }
                else
                {
LABEL_52:
                  if (*((void *)&v41 + 1)) {
                    --**((_DWORD **)&v41 + 1);
                  }
                }
                if (v51) {
                  (*(void (**)(uint64_t))(*(void *)v51 + 32))(v51);
                }
                else {
                  ++v53;
                }
                goto LABEL_25;
              }
            }
            else if (v42 >= (unint64_t)v41)
            {
              goto LABEL_52;
            }
            if (*v5)
            {
              uint64_t v27 = *(void *)(v3 + 224) + 80 * v54;
              ++*(void *)(v27 + 8);
            }
            if ((void)v40) {
              uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v40 + 24))(v40);
            }
            else {
              uint64_t v28 = *((void *)&v40 + 1) + 16 * v42;
            }
            unint64_t v29 = (int *)(v28 + 4);
            uint64_t v30 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v3 + 96), (int *)(v28 + 4));
            if (v30)
            {
              float v50 = *((float *)v30 + 5);
              int v31 = v54;
              int v32 = *v29;
              int v33 = *fst::TropicalWeightTpl<float>::One();
              LODWORD(v47) = v32;
              HIDWORD(v47) = v32;
              int v48 = v33;
              float v49 = v50;
              fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v4);
              fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(void **)(v3 + 144), v31, (float *)&v47);
              if (*v5)
              {
                uint64_t v34 = *(void *)(v3 + 224);
                ++*(_DWORD *)(v34 + 80 * v54 + 16);
                uint64_t v35 = v34 + 80 * SLODWORD(v50);
                ++*(void *)(v35 + 24);
                int v47 = &v54;
                long long v36 = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v35 + 32), &v54, (uint64_t)&std::piecewise_construct, &v47);
                v36[5] = (uint64_t *)((char *)v36[5] + 1);
                char v37 = (uint64_t **)(*(void *)(v3 + 224) + 80 * v54 + 56);
                int v47 = (int *)&v50;
                uint64_t v38 = std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v37, (int *)&v50, (uint64_t)&std::piecewise_construct, &v47);
                v38[5] = (uint64_t *)((char *)v38[5] + 1);
              }
            }
            if ((void)v40) {
              (*(void (**)(void))(*(void *)v40 + 32))(v40);
            }
            else {
              ++v42;
            }
          }
        }
        if (v51) {
          (*(void (**)(void))(*(void *)v51 + 8))();
        }
LABEL_59:
        int v20 = v54;
        uint64_t v19 = *(void *)(v3 + 24);
        uint64_t v18 = *(void *)(v3 + 32);
LABEL_60:
        int v54 = ++v20;
        uint64_t v21 = v20;
        if (v20 >= (unint64_t)((v18 - v19) >> 3)) {
          goto LABEL_61;
        }
      }
      if ((int)v53 >= v52) {
        goto LABEL_59;
      }
      goto LABEL_30;
    }
LABEL_6:
    std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::reserve((uint64_t *)(v3 + 224), (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 3);
    goto LABEL_7;
  }
  if (a2)
  {
    uint64_t v5 = (unsigned char *)(result + 216);
    if (!*(unsigned char *)(result + 216))
    {
      fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(result + 136);
      std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__base_destruct_at_end[abi:ne180100](v3 + 224, *(void *)(v3 + 224));
      *(void *)(v3 + 208) = 0;
      *(void *)(v3 + 256) = *(void *)(v3 + 248);
      *(unsigned char *)(v3 + 216) = v2;
      goto LABEL_6;
    }
  }
  return result;
}

void sub_23AC00250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23AC003B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80;
      std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>::construct[abi:ne180100]<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>(a1, v7 - 80, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>::construct[abi:ne180100]<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  uint64_t v4 = (void *)(a3 + 40);
  uint64_t v5 = *(void *)(a3 + 40);
  *(void *)(a2 + 40) = v5;
  uint64_t v6 = a2 + 40;
  uint64_t v7 = *(void *)(a3 + 48);
  *(void *)(a2 + 48) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a3 + 32) = v4;
    *uint64_t v4 = 0;
    *(void *)(a3 + 48) = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  uint64_t v8 = (void *)(a3 + 64);
  uint64_t v9 = *(void *)(a3 + 64);
  *(void *)(a2 + 64) = v9;
  uint64_t v10 = a2 + 64;
  uint64_t v11 = *(void *)(a3 + 72);
  *(void *)(a2 + 72) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a3 + 56) = v8;
    *uint64_t v8 = 0;
    *(void *)(a3 + 72) = 0;
  }
  else
  {
    *(void *)(a2 + 56) = v10;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>,std::reverse_iterator<std::reverse_iterator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i + 56, *(void **)(i + 64));
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i + 32, *(void **)(i + 40));
    uint64_t i = *(void *)(a2 + 32) + 80;
  }
}

uint64_t std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i - 24, *(void **)(i - 16));
    std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy(i - 48, *(void **)(i - 40));
  }
}

uint64_t std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__push_back_slow_path<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[80 * v3];
  uint64_t v13 = &v7[80 * v6];
  std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>::construct[abi:ne180100]<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 80;
  std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_23AC00868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~ReplaceUtil(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v3 = *(void *)(a1 + 24);
        uint64_t v2 = *(void *)(a1 + 32);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  unint64_t v6 = *(void **)(a1 + 248);
  if (v6)
  {
    *(void *)(a1 + 256) = v6;
    operator delete(v6);
  }
  uint64_t v14 = (void **)(a1 + 224);
  std::vector<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats,std::allocator<fst::ReplaceUtil<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReplaceStats>>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v7 = *(void **)(a1 + 184);
  if (v7) {
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 160);
  if (v8)
  {
    *(void *)(a1 + 168) = v8;
    operator delete(v8);
  }
  *(void *)(a1 + 136) = &unk_26EE2A7B0;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 152);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 96);
  int v10 = *(void **)(a1 + 72);
  if (v10)
  {
    *(void *)(a1 + 80) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 48);
  if (v11)
  {
    *(void *)(a1 + 56) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 24);
  if (v12)
  {
    *(void *)(a1 + 32) = v12;
    operator delete(v12);
  }
  return a1;
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>(void *a1, void *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*(void *)a1 + 16))(a1) == -1) {
    return;
  }
  int v6 = (*(uint64_t (**)(void *))(*(void *)a1 + 136))(a1);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v64, v6, (unsigned __int8 *)__p);
  int v7 = (*(uint64_t (**)(void *))(*(void *)a1 + 16))(a1);
  unint64_t v8 = 0;
  *(void *)&v64[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if (v8 < (*(int (**)(void *))(*(void *)a1 + 136))(a1))
  {
    unint64_t v39 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v38 = 0u;
    (*(void (**)(void *, unint64_t, void **))(*(void *)a1 + 120))(a1, v8, __p);
    while (1)
    {
      if (__p[0])
      {
        if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 16))(__p[0]))
        {
          if (__p[0])
          {
            (*(void (**)(void))(*(void *)__p[0] + 8))();
            goto LABEL_20;
          }
LABEL_18:
          if (*((void *)&v38 + 1)) {
            --**((_DWORD **)&v38 + 1);
          }
LABEL_20:
          ++v8;
          goto LABEL_3;
        }
        if (__p[0])
        {
          uint64_t v9 = (char *)(*(uint64_t (**)(void))(*(void *)__p[0] + 24))();
          goto LABEL_11;
        }
      }
      else if (v39 >= (unint64_t)v38)
      {
        goto LABEL_18;
      }
      uint64_t v9 = (char *)__p[1] + 16 * v39;
LABEL_11:
      if (*(void *)v9) {
        *(void *)&v64[((unint64_t)*((int *)v9 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *((_DWORD *)v9 + 3);
      }
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
      }
      else {
        ++v39;
      }
    }
  }
  memset(&v63, 0, sizeof(v63));
  int v10 = (*(uint64_t (**)(void *))(*(void *)a1 + 136))(a1);
  std::vector<int>::reserve(&v63, v10);
  if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 56))(a1, 0x4000000000, 0) & 0x4000000000) == 0)
  {
    if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 56))(a1, 0x800000000, 0) & 0x800000000) == 0)
    {
      uint64_t v62 = 0;
      char v65 = 0;
      char v66 = 0;
      uint64_t v67 = 0;
      __p[0] = &v65;
      __p[1] = 0;
      *(void *)&long long v38 = 0;
      *((void *)&v38 + 1) = &v62;
      long long v43 = 0u;
      long long v44 = 0u;
      fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)a1, (uint64_t)__p);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v38 = 0;
    LOBYTE(v61.__begin_) = 0;
    char v65 = __p;
    char v66 = &v61;
    uint64_t v67 = 0;
    fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>();
  }
  for (unint64_t i = 0; i < (*(int (**)(void *))(*(void *)a1 + 136))(a1); ++i)
  {
    std::vector<int>::pointer end = v63.__end_;
    if (v63.__end_ >= v63.__end_cap_.__value_)
    {
      std::vector<int>::pointer begin = v63.__begin_;
      int64_t v15 = v63.__end_ - v63.__begin_;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v17 = (char *)v63.__end_cap_.__value_ - (char *)v63.__begin_;
      if (((char *)v63.__end_cap_.__value_ - (char *)v63.__begin_) >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v63.__end_cap_, v18);
        std::vector<int>::pointer begin = v63.__begin_;
        std::vector<int>::pointer end = v63.__end_;
      }
      else
      {
        uint64_t v19 = 0;
      }
      int v20 = (int *)&v19[4 * v15];
      int *v20 = i;
      uint64_t v13 = v20 + 1;
      while (end != begin)
      {
        int v21 = *--end;
        *--int v20 = v21;
      }
      v63.__begin_ = v20;
      v63.__end_ = v13;
      v63.__end_cap_.__value_ = (int *)&v19[4 * v18];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *v63.__end_ = i;
      uint64_t v13 = end + 1;
    }
    v63.__end_ = v13;
  }
  __p[0] = a1;
  __p[1] = a2;
  *(void *)&long long v38 = a1;
  *((void *)&v38 + 1) = a2;
  unint64_t v39 = *(void *)a3;
  int v40 = *(_DWORD *)(a3 + 16);
  char v41 = *(unsigned char *)(a3 + 20);
  char v42 = 1;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  a2[1] = *a2;
  long long v49 = 0u;
  long long v50 = 0u;
  int v51 = 1065353216;
  int v60 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v58 = 0;
  while (v63.__begin_ != v63.__end_)
  {
    unint64_t v22 = *--v63.__end_;
    if (((*(void *)&v64[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v22) & 1) == 0)
    {
      if (*(unsigned char *)(a3 + 21)) {
        continue;
      }
      uint64_t v25 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v65) = 0;
      LODWORD(v65) = *(_DWORD *)(a3 + 24);
      LODWORD(v61.__begin_) = 0;
      LODWORD(v61.__begin_) = *v25;
      if (*(float *)&v65 != *(float *)&v61.__begin_ || *(_DWORD *)(a3 + 28) != -1) {
        continue;
      }
    }
    fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Expand((uint64_t *)__p, v22);
    int v36 = v59;
    (*(void (**)(void *, unint64_t, int *))(*(void *)a1 + 160))(a1, v22, &v36);
    (*(void (**)(void *, unint64_t))(*(void *)a1 + 216))(a1, v22);
    (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 232))(a1, v22, (uint64_t)(*((void *)&v57 + 1) - v57) >> 4);
    uint64_t v23 = *((void *)&v57 + 1);
    uint64_t v24 = v57;
    while (v24 != v23)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 184))(a1, v22, v23 - 16);
      uint64_t v24 = v57;
      uint64_t v23 = *((void *)&v57 + 1) - 16;
      *((void *)&v57 + 1) -= 16;
    }
  }
  if (*(unsigned char *)(a3 + 21)
    || (uint64_t v28 = fst::TropicalWeightTpl<float>::Zero(),
        LODWORD(v65) = 0,
        LODWORD(v65) = *(_DWORD *)(a3 + 24),
        LODWORD(v61.__begin_) = 0,
        LODWORD(v61.__begin_) = *v28,
        *(float *)&v65 != *(float *)&v61.__begin_)
    || *(_DWORD *)(a3 + 28) != -1)
  {
    for (unint64_t j = 0; j < (*(int (**)(void *))(*(void *)a1 + 136))(a1); ++j)
    {
      if (((*(void *)&v64[(j >> 3) & 0x1FFFFFFFFFFFFFF8] >> j) & 1) == 0) {
        (*(void (**)(void *, unint64_t))(*(void *)a1 + 216))(a1, j);
      }
    }
  }
  if (v48[20]) {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, 4, 4);
  }
  unint64_t v29 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  unint64_t v30 = fst::RmEpsilonProperties(v29, 0);
  (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 168))(a1, v30, 0xFFFFFFFF0007);
  int v31 = fst::TropicalWeightTpl<float>::Zero();
  LODWORD(v65) = 0;
  float v32 = *(float *)(a3 + 24);
  *(float *)&char v65 = v32;
  LODWORD(v61.__begin_) = 0;
  LODWORD(v61.__begin_) = *v31;
  unsigned int v33 = *(_DWORD *)(a3 + 28);
  if (v32 != *(float *)&v61.__begin_ || v33 != -1)
  {
    char v65 = (void **)__PAIR64__(v33, LODWORD(v32));
    uint64_t v67 = 0;
    int v68 = 981467136;
    char v69 = 0;
    fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,(void *)0>((uint64_t)a1, (uint64_t)&v65);
  }
  if (*(unsigned char *)(a3 + 21))
  {
    uint64_t v35 = fst::TropicalWeightTpl<float>::Zero();
    LODWORD(v65) = 0;
    LODWORD(v65) = *(_DWORD *)(a3 + 24);
    LODWORD(v61.__begin_) = 0;
    LODWORD(v61.__begin_) = *v35;
    if (*(float *)&v65 == *(float *)&v61.__begin_ && *(_DWORD *)(a3 + 28) == -1) {
      fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1);
    }
  }
  fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(__p);
  if (v63.__begin_)
  {
    v63.__end_ = v63.__begin_;
    operator delete(v63.__begin_);
  }
  if (v64) {
    operator delete(v64);
  }
}

void sub_23AC01648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (*(char *)(v16 - 177) < 0) {
    operator delete(*(void **)(v15 + 360));
  }
  uint64_t v18 = *(void *)(v15 + 448);
  *(void *)(v15 + 448) = 0;
  if (v18) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v14, v18);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v19 = *(void **)(v15 + 384);
  if (v19)
  {
    *(void *)(v15 + 392) = v19;
    operator delete(v19);
  }
  int v20 = *(void **)(v15 + 408);
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_26EE2CFD8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = (void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v8 = 0;
        __p[0] = v3;
        __p[1] = 0;
        __p[2] = 0;
        __p[3] = &v8;
        long long v6 = 0u;
        long long v7 = 0u;
        fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2, (uint64_t)__p);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_23AC022B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  LogMessage::~LogMessage((LogMessage *)&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28)
    {
LABEL_10:
      MEMORY[0x23ECC24B0](v28, 0x60C405BB7FD7CLL);
      if (!v29)
      {
LABEL_7:
        if (a18)
        {
          a19 = (uint64_t)a18;
          operator delete(a18);
        }
        fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a21);
        float v32 = *v27;
        if (*v27)
        {
          *(void *)(v26 + 56) = v32;
          operator delete(v32);
        }
        std::vector<std::unique_ptr<fst::QueueBase<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        uint64_t v33 = *v30;
        uint64_t *v30 = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        _Unwind_Resume(a1);
      }
LABEL_6:
      MEMORY[0x23ECC24B0](v29, 0xC400A2AC0F1);
      goto LABEL_7;
    }
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (!v29) {
    goto LABEL_7;
  }
  goto LABEL_6;
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_23AC02D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  uint64_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  uint64_t v32 = 0;
  int v33 = 0;
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v14) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v29);
    uint64_t v17 = (int)v15;
    while (1)
    {
      if (!(void)v29)
      {
        if (v31 >= (unint64_t)v30) {
          goto LABEL_39;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29 + 16))(v29)) {
        break;
      }
      if ((void)v29)
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v18 = *((void *)&v29 + 1) + 16 * v31;
LABEL_19:
      if (*(void *)v18) {
        goto LABEL_29;
      }
      uint64_t v19 = *(int *)(*a2 + 4 * v17);
      if (v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 12)))
      {
        int v20 = *(_DWORD **)a3;
        if (!a4
          || (int v21 = fst::TropicalWeightTpl<float>::One(),
              unint64_t v22 = (float *)(v18 + 8),
              fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(a4, (float *)(v18 + 8), (float *)v21)))
        {
          int v23 = 1;
          goto LABEL_24;
        }
        if ((v20[v19] | 2) == 2)
        {
          uint64_t v26 = fst::TropicalWeightTpl<float>::Zero();
          float v36 = 0.0;
          float v36 = *v22;
          float v35 = 0.0;
          float v35 = *(float *)v26;
          if (v36 == v35
            || (uint64_t v27 = fst::TropicalWeightTpl<float>::One(),
                float v36 = 0.0,
                float v36 = *v22,
                float v35 = 0.0,
                float v35 = *(float *)v27,
                v36 == v35))
          {
            int v23 = 2;
          }
          else
          {
            int v23 = 3;
          }
LABEL_24:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      uint64_t v24 = fst::TropicalWeightTpl<float>::Zero();
      float v36 = 0.0;
      float v36 = *(float *)(v18 + 8);
      float v35 = 0.0;
      float v35 = *(float *)v24;
      v16.n128_f32[0] = v36;
      if (v36 != v35)
      {
        uint64_t v25 = fst::TropicalWeightTpl<float>::One();
        float v36 = 0.0;
        float v36 = *(float *)(v18 + 8);
        float v35 = 0.0;
        float v35 = *(float *)v25;
        v16.n128_f32[0] = v36;
        if (v36 != v35) {
          *a6 = 0;
        }
      }
LABEL_29:
      if ((void)v29) {
        (*(void (**)(void, __n128))(*(void *)v29 + 32))(v29, v16);
      }
      else {
        ++v31;
      }
    }
    if ((void)v29)
    {
      (*(void (**)(void))(*(void *)v29 + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (*((void *)&v30 + 1)) {
      --**((_DWORD **)&v30 + 1);
    }
LABEL_41:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_23AC03264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<fst::QueueBase<int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<fst::QueueBase<int>>>::__append(a1, v5);
  }
}

void fst::AutoQueue<int>::~AutoQueue(uint64_t a1)
{
  fst::AutoQueue<int>::~AutoQueue(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::AutoQueue<int>::Head(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t fst::AutoQueue<int>::Enqueue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t fst::AutoQueue<int>::Dequeue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t fst::AutoQueue<int>::Update(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t fst::AutoQueue<int>::Empty(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t fst::AutoQueue<int>::Clear(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

void *fst::StateOrderQueue<int>::~StateOrderQueue(void *a1)
{
  *a1 = &unk_26EE2D050;
  uint64_t v2 = (void *)a1[3];
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void fst::StateOrderQueue<int>::~StateOrderQueue(void *a1)
{
  *a1 = &unk_26EE2D050;
  uint64_t v1 = (void *)a1[3];
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::StateOrderQueue<int>::Head(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void fst::StateOrderQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  if (v3 > v4)
  {
    *(_DWORD *)(a1 + 20) = a2;
LABEL_6:
    *(_DWORD *)(a1 + 16) = a2;
    goto LABEL_7;
  }
  if (v4 < a2)
  {
    *(_DWORD *)(a1 + 20) = a2;
    goto LABEL_7;
  }
  if (v3 > a2) {
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v5 = (void *)(a1 + 24);
  unint64_t v6 = a2;
  while (*(void *)(a1 + 32) <= v6)
  {
    char v7 = 0;
    std::vector<BOOL>::push_back(a1 + 24, &v7);
  }
  *(void *)(*v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
}

uint64_t fst::StateOrderQueue<int>::Dequeue(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  int v2 = *(_DWORD *)(result + 20);
  unint64_t v3 = *(int *)(result + 16);
  *(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
  if ((int)v3 <= v2)
  {
    int v4 = v3 - 1;
    do
    {
      if ((*(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
        break;
      }
      ++v3;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

BOOL fst::StateOrderQueue<int>::Empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::StateOrderQueue<int>::Clear(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  unint64_t v2 = *(int *)(a1 + 16);
  if ((int)v2 <= v1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    int v4 = v1 - v2 + 1;
    do
    {
      *(void *)(v3 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_26EE2D0B8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v4 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v4;
  uint64_t v3 = 0;
  fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>();
}

void sub_23AC03874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v23, a21);
  }
  uint64_t v26 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 56) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v24;
  if (*v24)
  {
    *(void *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>()
{
}

void sub_23AC041D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  long long v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void fst::TopOrderQueue<int>::~TopOrderQueue(void *a1)
{
  fst::TopOrderQueue<int>::~TopOrderQueue(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::TopOrderQueue<int>::Head(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 16));
}

uint64_t fst::TopOrderQueue<int>::Enqueue(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 16);
  int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = *(void *)(result + 24);
  int v5 = *(_DWORD *)(v4 + 4 * a2);
  if (v2 > v3)
  {
    *(_DWORD *)(result + 20) = v5;
LABEL_6:
    *(_DWORD *)(result + 16) = v5;
    goto LABEL_7;
  }
  if (v5 <= v3)
  {
    if (v5 < v2) {
      goto LABEL_6;
    }
  }
  else
  {
    *(_DWORD *)(result + 20) = v5;
  }
LABEL_7:
  *(_DWORD *)(*(void *)(result + 48) + 4 * *(int *)(v4 + 4 * a2)) = a2;
  return result;
}

uint64_t fst::TopOrderQueue<int>::Dequeue(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(_DWORD *)(v1 + 4 * *(int *)(result + 16)) = -1;
  int v2 = *(_DWORD *)(result + 20);
  uint64_t v3 = *(int *)(result + 16);
  if ((int)v3 <= v2)
  {
    uint64_t v4 = (int *)(v1 + 4 * v3);
    int v5 = v3 - 1;
    do
    {
      int v6 = *v4++;
      if (v6 != -1) {
        break;
      }
      *(_DWORD *)(result + 16) = v5 + 2;
      ++v5;
    }
    while (v2 != v5);
  }
  return result;
}

BOOL fst::TopOrderQueue<int>::Empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::TopOrderQueue<int>::Clear(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if ((int)v1 <= *(_DWORD *)(a1 + 20))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    do
      *(_DWORD *)(v2 + 4 * v1) = -1;
    while (v1++ < *(int *)(a1 + 20));
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit()
{
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(uint64_t **a1)
{
  if (*(unsigned char *)a1[1])
  {
    (*a1)[1] = **a1;
    uint64_t v3 = a1 + 2;
    uint64_t v2 = a1[2];
    uint64_t v4 = v2[1];
    if (v4 == *v2)
    {
      unint64_t v18 = (v4 - *v2) >> 2;
      if (v18)
      {
LABEL_22:
        uint64_t v19 = 0;
        uint64_t v20 = **a1;
        uint64_t v21 = (int *)(v4 + 4 * v18 - 4);
        do
        {
          uint64_t v22 = *v21--;
          *(_DWORD *)(v20 + 4 * v22) = v19++;
        }
        while (v18 != v19);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v5 = 0;
      do
      {
        int v6 = (char **)*a1;
        char v7 = (char *)(*a1)[1];
        unint64_t v8 = (*a1)[2];
        if ((unint64_t)v7 >= v8)
        {
          int v10 = *v6;
          uint64_t v11 = (v7 - *v6) >> 2;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 1 > v12) {
            unint64_t v12 = v13 >> 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(*a1 + 2), v14);
            int v10 = *v6;
            char v7 = v6[1];
          }
          else
          {
            uint64_t v15 = 0;
          }
          __n128 v16 = &v15[4 * v11];
          *(_DWORD *)__n128 v16 = -1;
          uint64_t v9 = v16 + 4;
          while (v7 != v10)
          {
            int v17 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          void *v6 = v16;
          v6[1] = v9;
          v6[2] = &v15[4 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(_DWORD *)char v7 = -1;
          uint64_t v9 = v7 + 4;
        }
        v6[1] = v9;
        ++v5;
        uint64_t v2 = *v3;
        uint64_t v4 = **v3;
        unint64_t v18 = ((*v3)[1] - v4) >> 2;
      }
      while (v18 > v5);
      if (v18) {
        goto LABEL_22;
      }
    }
    void *v3 = 0;
    goto LABEL_31;
  }
  uint64_t v2 = a1[2];
LABEL_26:
  a1[2] = 0;
  uint64_t v23 = a1 + 2;
  if (!v2) {
    return;
  }
  uint64_t v3 = v23;
LABEL_31:
  std::default_delete<std::vector<int>>::operator()[abi:ne180100]((uint64_t)v3, (uint64_t)v2);
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(_DWORD **)(v3 + 8);
  unint64_t v5 = *(void *)(v3 + 16);
  if ((unint64_t)v4 >= v5)
  {
    char v7 = *(_DWORD **)v3;
    uint64_t v8 = ((uint64_t)v4 - *(void *)v3) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3 + 16, v11);
      char v7 = *(_DWORD **)v3;
      uint64_t v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    unint64_t v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    int v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v6;
    *(void *)(v3 + 16) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v4 = a2;
    int v6 = v4 + 1;
  }
  *(void *)(v3 + 8) = v6;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  char v7 = value;
  unint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      int v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    }
    else {
      int v15 = 0;
    }
    unint64_t v18 = (int *)&v15[4 * v12];
    uint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = (int *)&v15[4 * v14];
    std::vector<int>::pointer begin = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--unint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *fst::TopOrderQueue<int>::~TopOrderQueue(void *a1)
{
  *a1 = &unk_26EE2D0B8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void *fst::LifoQueue<int>::~LifoQueue(void *a1)
{
  *a1 = &unk_26EE2D120;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  return a1;
}

void fst::LifoQueue<int>::~LifoQueue(void *a1)
{
  *a1 = &unk_26EE2D120;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::LifoQueue<int>::Head(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 24) + ((*(void *)(a1 + 48) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*(void *)(a1 + 48) & 0x3FFLL));
}

void fst::LifoQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::LifoQueue<int>::Dequeue(int64x2_t *a1)
{
  a1[3] = vaddq_s64(a1[3], (int64x2_t)xmmword_23AC2FE90);
  return std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1[1].i64, 1);
}

BOOL fst::LifoQueue<int>::Empty(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

void fst::LifoQueue<int>::Clear(void *a1)
{
  int v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      int v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[6] = v6;
}

uint64_t std::deque<int>::~deque[abi:ne180100](void *a1)
{
  int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    char v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::~__split_buffer((uint64_t)a1);
}

void std::deque<int>::push_front(uint64_t a1, _DWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<int>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 10));
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 4 * (v4 & 0x3FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(_DWORD *)(v7 - 4) = *a2;
  uint64_t v8 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 40) = v8;
}

void std::deque<int>::__add_front_capacity(void **a1)
{
  int v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 7) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x400)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      long long v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v7, v11);
      long long v43 = (char *)__p;
      long long v44 = (char *)__p;
      long long v45 = (char *)__p + 8 * v12;
      char v41 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        int v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                long long v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)long long v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v31 = __p;
              std::string __p = v24;
              long long v43 = &v24[8 * (v23 >> 2)];
              long long v44 = v14;
              long long v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              std::vector<int>::size_type v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              long long v43 = v22;
              long long v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        int v33 = (char *)a1[1];
      }
      float v36 = *a1;
      char v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      long long v43 = v33;
      long long v38 = (char *)a1[3];
      unint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      long long v44 = v13;
      long long v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 512;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 1024;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        long long v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0x1000uLL);
        std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &__p);
        unsigned int v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0x1000uLL);
      }
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 512;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 1024;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 1024;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_23AC04E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void *std::vector<fst::QueueType>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_23AC04F14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 == *a3) {
    return 0;
  }
  if (v3 == -INFINITY || v4 >= -INFINITY && v4 <= -INFINITY)
  {
    float v4 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    float v3 = *a2;
  }
  else if (v3 < v4)
  {
    float v4 = *a2;
  }
  return v4 == v3;
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_26EE2D0B8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::vector<int>::vector((std::vector<int> *)(a1 + 48), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_23AC05084(_Unwind_Exception *exception_object)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23AC05100(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<fst::QueueBase<int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v13;
    int64_t v15 = &v13[8 * v10];
    BOOL v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    uint64_t v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<fst::QueueBase<int>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<fst::QueueBase<int>>>::~__split_buffer(&v14);
  }
}

void sub_23AC0520C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<fst::QueueBase<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<fst::QueueBase<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::QueueBase<int>>>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::QueueBase<int>>>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::QueueBase<int>>>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::QueueBase<int>>>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::QueueBase<int>>>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::QueueBase<int>>>,std::reverse_iterator<std::unique_ptr<fst::QueueBase<int>>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  unint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<fst::QueueBase<int>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<fst::QueueBase<int>>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::~ShortestFirstQueue(void *a1)
{
  fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::~ShortestFirstQueue(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Head(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Enqueue(uint64_t a1, int a2)
{
  int v3 = a2;
  return fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Dequeue(uint64_t a1)
{
  return fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::Clear(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void *fst::ShortestFirstQueue<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_26EE2D188;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 64;
  uint64_t v4 = *(int **)(a1 + 64);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
      uint64_t v4 = *(int **)(a1 + 64);
      uint64_t v7 = *(int **)(a1 + 72);
    }
    else
    {
      char v14 = 0;
    }
    long long v15 = (int *)&v14[4 * v8];
    long long v16 = &v14[4 * v13];
    *long long v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--long long v15 = v17;
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 72) = v10;
  uint64_t v19 = *(char **)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    int64_t v21 = *(char **)(a1 + 16);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
      int64_t v21 = *(char **)(a1 + 16);
      uint64_t v19 = *(char **)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)(a1 + 88);
    std::vector<int>::size_type v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
    *(void *)(a1 + 32) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 88);
    std::vector<int>::size_type v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 56);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
  unint64_t v31 = *(char **)(a1 + 48);
  if ((unint64_t)v31 >= v30)
  {
    int v33 = *(char **)(a1 + 40);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        int v33 = *(char **)(a1 + 40);
        unint64_t v31 = *(char **)(a1 + 48);
      }
      else
      {
        long long v38 = 0;
      }
      unint64_t v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)unint64_t v39 = *(_DWORD *)(a1 + 88);
      uint64_t v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 40) = v39;
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)unint64_t v31 = *(_DWORD *)(a1 + 88);
  uint64_t v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 48) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(*(void *)(a1 + 8), (float *)(**(void **)a1 + 4 * *(int *)(v6 + 4 * v8)), (float *)(**(void **)a1 + 4 * *a2)))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      uint64_t v6 = *(void *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Pop(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 88) - 1;
  uint64_t v4 = *(int **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  *uint64_t v4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  _DWORD *v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::internal::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>>::Heapify(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = (2 * a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 88)
      || !(uint64_t result = fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(*(void *)(v3 + 8), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v4)), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)a2)))))
    {
      uint64_t v4 = a2;
    }
    unsigned int v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 88))
    {
      uint64_t result = fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(*(void *)(v3 + 8), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5)), (float *)(**(void **)v3 + 4 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v4)));
      if (result) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = v4;
      }
    }
    if (v4 == a2) {
      break;
    }
    uint64_t v6 = *(void *)(v3 + 40);
    uint64_t v7 = *(int *)(v6 + 4 * (int)a2);
    uint64_t v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    uint64_t v9 = *(void *)(v3 + 16);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    uint64_t v10 = *(void *)(v3 + 64);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

void *fst::FifoQueue<int>::~FifoQueue(void *a1)
{
  *a1 = &unk_26EE2D1F0;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  return a1;
}

void fst::FifoQueue<int>::~FifoQueue(void *a1)
{
  *a1 = &unk_26EE2D1F0;
  std::deque<int>::~deque[abi:ne180100](a1 + 2);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::FifoQueue<int>::Head(void *a1)
{
  unint64_t v1 = a1[7] + a1[6] - 1;
  return *(unsigned int *)(*(void *)(a1[3] + ((v1 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1 & 0x3FF));
}

void fst::FifoQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::FifoQueue<int>::Dequeue(uint64_t a1)
{
  return std::deque<int>::__maybe_remove_back_spare[abi:ne180100]((void *)(a1 + 16), 1);
}

BOOL fst::FifoQueue<int>::Empty(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

void fst::FifoQueue<int>::Clear(void *a1)
{
  int v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      int v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[6] = v6;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(void *a1)
{
  *a1 = &unk_26EE2D258;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(void *a1)
{
  *a1 = &unk_26EE2D258;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Head(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 <= *(_DWORD *)(a1 + 36))
  {
    while (1)
    {
      uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v4)
      {
        char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
        int v3 = *(_DWORD *)(a1 + 32);
        if (v5) {
          goto LABEL_10;
        }
        unint64_t v6 = v3;
        if (*(void *)(**(void **)(a1 + 16) + 8 * v3)) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v6 = v2;
        int v3 = v2;
      }
      uint64_t v7 = *(void *)(a1 + 40);
      if (v6 < (*(void *)(a1 + 48) - v7) >> 2 && *(_DWORD *)(v7 + 4 * v6) != -1) {
        goto LABEL_11;
      }
LABEL_10:
      int v2 = v3 + 1;
      *(_DWORD *)(a1 + 32) = v3 + 1;
      if (v3++ >= *(_DWORD *)(a1 + 36)) {
        goto LABEL_11;
      }
    }
  }
  int v3 = *(_DWORD *)(a1 + 32);
LABEL_11:
  uint64_t v9 = *(void *)(**(void **)(a1 + 16) + 8 * v3);
  if (!v9) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 4 * v3);
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 16);
  return v10();
}

char *fst::SccQueue<int,fst::QueueBase<int>>::Enqueue(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = a2;
  uint64_t v7 = **(void **)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 4 * a2);
  if (v4 > v5)
  {
    *(_DWORD *)(a1 + 36) = v8;
LABEL_3:
    *(_DWORD *)(a1 + 32) = v8;
    goto LABEL_7;
  }
  if (v8 <= v5)
  {
    if (v8 < v4) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
  }
LABEL_7:
  unint64_t v9 = *(int *)(v7 + 4 * a2);
  uint64_t v10 = *(void *)(**(void **)(a1 + 16) + 8 * v9);
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 24);
    return (char *)v11();
  }
  else
  {
    uint64_t result = *(char **)(a1 + 40);
    unint64_t v13 = *(char **)(a1 + 48);
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 <= v9)
    {
      long long v15 = (void *)(a1 + 56);
      do
      {
        if ((unint64_t)v13 >= *v15)
        {
          unint64_t v17 = v14 + 1;
          if ((v14 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = *v15 - (void)result;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            std::vector<int>::size_type v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v19);
            uint64_t result = *(char **)(a1 + 40);
            unint64_t v13 = *(char **)(a1 + 48);
          }
          else
          {
            std::vector<int>::size_type v20 = 0;
          }
          int64_t v21 = &v20[4 * v14];
          *(_DWORD *)int64_t v21 = -1;
          long long v16 = v21 + 4;
          while (v13 != result)
          {
            int v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v16;
          *(void *)(a1 + 56) = &v20[4 * v19];
          if (result)
          {
            operator delete(result);
            uint64_t result = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t result = v21;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = -1;
          long long v16 = v13 + 4;
        }
        *(void *)(a1 + 48) = v16;
        unint64_t v14 = (v16 - result) >> 2;
        unint64_t v9 = *(int *)(**(void **)(a1 + 24) + 4 * v6);
        unint64_t v13 = v16;
      }
      while (v14 <= v9);
    }
    *(_DWORD *)&result[4 * v9] = a2;
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Dequeue(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  uint64_t v5 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v2 < (*(void *)(v5 + 8) - v4) >> 2) {
    *(_DWORD *)(v4 + 4 * v2) = -1;
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Update(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * *(int *)(**(void **)(a1 + 24) + 4 * a2));
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Empty(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 < v1) {
    return 0;
  }
  if ((int)v2 > v1) {
    return 1;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (v4) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 48))(*(void *)(**(void **)(a1 + 16) + 8 * v2));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v2 >= (*(void *)(a1 + 48) - v5) >> 2) {
    return 1;
  }
  return *(_DWORD *)(v5 + 4 * v2) == -1;
}

double fst::SccQueue<int,fst::QueueBase<int>>::Clear(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 <= *(_DWORD *)(a1 + 36))
  {
    do
    {
      uint64_t v3 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 40);
        if (v2 < (*(void *)(a1 + 48) - v4) >> 2) {
          *(_DWORD *)(v4 + 4 * v2) = -1;
        }
      }
    }
    while ((uint64_t)v2++ < *(int *)(a1 + 36));
  }
  double result = NAN;
  *(void *)(a1 + 32) = 0xFFFFFFFF00000000;
  return result;
}

void std::vector<std::unique_ptr<fst::QueueBase<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::QueueBase<int>>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<fst::QueueBase<int>>>::__clear[abi:ne180100](void *result)
{
  int v1 = result;
  unint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    double result = v4;
    void *v3 = 0;
    if (v4) {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>()
{
}

void sub_23AC06C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  int v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void fst::DfsVisit<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_23AC0760C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  int v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

int *fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Expand(uint64_t *a1, int a2)
{
  int v45 = a2;
  *((_DWORD *)a1 + 78) = *fst::TropicalWeightTpl<float>::Zero();
  a1[37] = a1[36];
  double result = (int *)fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(a1 + 2, a2);
  if (*((unsigned char *)a1 + 156)) {
    return result;
  }
  std::deque<int>::push_back(a1 + 26, &v45);
  uint64_t v5 = a1[31];
  if (!v5) {
    goto LABEL_67;
  }
  uint64_t v6 = a1 + 32;
  do
  {
    uint64_t v7 = v5 - 1;
    uint64_t v8 = *(unsigned int *)(*(void *)(a1[27] + (((unint64_t)(a1[30] + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[30] + v7) & 0x3FF));
    a1[31] = v7;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 26, 1);
    while (a1[33] <= (unint64_t)(int)v8)
    {
      LOBYTE(v42) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 32), &v42);
    }
    uint64_t v9 = *(void *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6));
    if ((v9 & (1 << v8)) != 0) {
      goto LABEL_66;
    }
    *(void *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6)) = v9 | (1 << v8);
    uint64_t v10 = a1[35];
    uint64_t v11 = operator new(0x10uLL);
    *(void *)uint64_t v11 = v10;
    v11[2] = v8;
    a1[35] = (uint64_t)v11;
    uint64_t v12 = *a1;
    long long v42 = 0u;
    long long v43 = 0u;
    unint64_t v44 = 0;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v12 + 120))(v12, v8, &v42);
    while (1)
    {
      if (!(void)v42)
      {
        if (v44 >= (unint64_t)v43) {
          goto LABEL_48;
        }
LABEL_13:
        uint64_t v13 = *((void *)&v42 + 1) + 16 * v44;
        goto LABEL_14;
      }
      if ((*(unsigned int (**)(void))(*(void *)v42 + 16))(v42)) {
        break;
      }
      if (!(void)v42) {
        goto LABEL_13;
      }
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v42 + 24))();
LABEL_14:
      unint64_t v14 = *(void *)v13;
      unint64_t v39 = *(void *)v13;
      float v15 = *(float *)(v13 + 8);
      float v40 = v15;
      int v41 = *(_DWORD *)(v13 + 12);
      float v16 = *(float *)(*(void *)a1[1] + 4 * (int)v8);
      if (v16 == -INFINITY || v15 >= -INFINITY && v15 <= -INFINITY)
      {
        float v17 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        LODWORD(v14) = v39;
        LODWORD(v18) = HIDWORD(v39);
      }
      else
      {
        unint64_t v18 = HIDWORD(v14);
        BOOL v19 = v16 == INFINITY || v15 == INFINITY;
        float v17 = v15 + v16;
        if (v19) {
          float v17 = INFINITY;
        }
      }
      float v40 = v17;
      if (v14 | v18)
      {
        uint64_t v20 = (a1[37] - a1[36]) >> 4;
        uint64_t v21 = *((unsigned int *)a1 + 79);
        v36[0] = v14;
        v36[1] = v18;
        v36[2] = v41;
        uint64_t v37 = v21;
        uint64_t v38 = v20;
        int v22 = std::__hash_table<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,true>,std::allocator<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 20), v36, (uint64_t)v36);
        if (v23)
        {
          unint64_t v24 = a1[37];
          if (v24 < a1[38]) {
            goto LABEL_37;
          }
          goto LABEL_28;
        }
        int v26 = *((_DWORD *)a1 + 79);
        if (*((_DWORD *)v22 + 8) != v26)
        {
          *((_DWORD *)v22 + 8) = v26;
          unint64_t v24 = a1[37];
          v22[5] = (uint64_t)(v24 - a1[36]) >> 4;
          if (v24 < a1[38])
          {
LABEL_37:
            *(void *)unint64_t v24 = v39;
            *(float *)(v24 + 8) = v40;
            *(_DWORD *)(v24 + 12) = v41;
            uint64_t v25 = v24 + 16;
            goto LABEL_38;
          }
LABEL_28:
          uint64_t v25 = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::TropicalWeightTpl<float>> const&>(a1 + 36, (uint64_t)&v39);
LABEL_38:
          a1[37] = v25;
          goto LABEL_39;
        }
        uint64_t v27 = a1[36] + 16 * v22[5];
        float v29 = *(float *)(v27 + 8);
        uint64_t v28 = (float *)(v27 + 8);
        float v30 = v29;
        if (v29 == -INFINITY || v40 >= -INFINITY && v40 <= -INFINITY)
        {
          float v30 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else if (v30 >= v40)
        {
          float v30 = v40;
        }
        *uint64_t v28 = v30;
      }
      else
      {
        while (a1[33] <= (unint64_t)v41)
        {
          LOBYTE(v36[0]) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 32), v36);
        }
        if (((*(void *)(*v6 + (((unint64_t)v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
          std::deque<int>::push_back(a1 + 26, &v41);
        }
      }
LABEL_39:
      if ((void)v42) {
        (*(void (**)(void))(*(void *)v42 + 32))(v42);
      }
      else {
        ++v44;
      }
    }
    if ((void)v42)
    {
      (*(void (**)(void))(*(void *)v42 + 8))();
      goto LABEL_50;
    }
LABEL_48:
    if (*((void *)&v43 + 1)) {
      --**((_DWORD **)&v43 + 1);
    }
LABEL_50:
    uint64_t v31 = *(void *)a1[1];
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 24))(&v42);
    float v32 = *(float *)(v31 + 4 * (int)v8);
    if (v32 == -INFINITY || *(float *)&v42 >= -INFINITY && *(float *)&v42 <= -INFINITY)
    {
      float v33 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else
    {
      BOOL v34 = *(float *)&v42 == INFINITY || v32 == INFINITY;
      float v33 = v32 + *(float *)&v42;
      if (v34) {
        float v33 = INFINITY;
      }
    }
    float v35 = *((float *)a1 + 78);
    if (v35 == -INFINITY || v33 >= -INFINITY && v33 <= -INFINITY)
    {
      float v33 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v35 < v33)
    {
      float v33 = *((float *)a1 + 78);
    }
    *((float *)a1 + 78) = v33;
LABEL_66:
    uint64_t v5 = a1[31];
  }
  while (v5);
LABEL_67:
  for (double result = (int *)a1[35]; result; double result = (int *)a1[35])
  {
    *(void *)(a1[32] + (((unint64_t)result[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << result[2]);
    a1[35] = *(void *)result;
    operator delete(result);
  }
  ++*((_DWORD *)a1 + 79);
  return result;
}

void sub_23AC07C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  if (a17)
  {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  else if (a20)
  {
    --*a20;
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *fst::MemoryPool<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23AC081A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<int>::pointer end = this->__end_;
    }
    else
    {
      BOOL v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 56))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    uint64_t v181 = (char *)a1 + 140;
    goto LABEL_270;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1[1];
  uint64_t v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2))
  {
    char v185 = (void **)(a1 + 5);
    uint64_t v7 = (void **)(a1 + 8);
    do
    {
      unint64_t v8 = fst::TropicalWeightTpl<float>::Zero();
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        unint64_t v13 = *(int **)v5;
        uint64_t v14 = ((uint64_t)v11 - *(void *)v5) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5 + 16, v17);
          uint64_t v11 = *v6;
          unint64_t v13 = *(int **)v5;
        }
        else
        {
          int v18 = 0;
        }
        BOOL v19 = (int *)&v18[4 * v14];
        int *v19 = *v9;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *--v11;
          *--BOOL v19 = v20;
        }
        *(void *)uint64_t v5 = v19;
        char *v6 = v12;
        *(void *)(v5 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = *v8;
        uint64_t v12 = v11 + 1;
      }
      char *v6 = v12;
      int v21 = *fst::TropicalWeightTpl<float>::Zero();
      uint64_t v23 = (int *)a1[6];
      unint64_t v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        unint64_t v25 = (int *)*v185;
        uint64_t v26 = ((char *)v23 - (unsigned char *)*v185) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_276:
        }
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
          unint64_t v25 = (int *)a1[5];
          uint64_t v23 = (int *)a1[6];
        }
        else
        {
          long long v30 = 0;
        }
        long long v31 = (int *)&v30[4 * v26];
        int *v31 = v21;
        uint64_t v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *--v23;
          *--long long v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        int *v23 = v21;
        uint64_t v24 = v23 + 1;
      }
      a1[6] = v24;
      int v33 = *fst::TropicalWeightTpl<float>::Zero();
      float v35 = (int *)a1[9];
      unint64_t v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = (int *)*v7;
        uint64_t v38 = ((char *)v35 - (unsigned char *)*v7) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 10), v41);
          uint64_t v37 = (int *)a1[8];
          float v35 = (int *)a1[9];
        }
        else
        {
          uint64_t v42 = 0;
        }
        long long v43 = (int *)&v42[4 * v38];
        *long long v43 = v33;
        uint64_t v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *--v35;
          *--long long v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        int *v35 = v33;
        uint64_t v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
      uint64_t v5 = a1[1];
      uint64_t v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v45 = (char *)a1[14];
    unint64_t v46 = (char *)a1[15];
    unint64_t v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      int v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          unint64_t v50 = v47 + 1;
          if ((v47 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = *v48 - (void)v45;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v52);
            uint64_t v45 = (char *)a1[14];
            unint64_t v46 = (char *)a1[15];
          }
          else
          {
            long long v53 = 0;
          }
          long long v54 = &v53[4 * v47];
          *(_DWORD *)long long v54 = -1;
          uint64_t v49 = v54 + 4;
          while (v46 != v45)
          {
            int v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            uint64_t v45 = (char *)a1[14];
          }
          else
          {
            uint64_t v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v46 = -1;
          uint64_t v49 = v46 + 4;
        }
        a1[15] = v49;
        unint64_t v47 = (v49 - v45) >> 2;
        unint64_t v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(void *)a1[1] + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  uint64_t v56 = a1[5];
  uint64_t v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  uint64_t v57 = a1[8];
  char v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  *(void *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  uint64_t v182 = (uint64_t)(a1 + 10);
  uint64_t v183 = (uint64_t)(a1 + 7);
  uint64_t v58 = a1 + 16;
  uint64_t v181 = (char *)a1 + 140;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_266;
    }
    int v60 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v61 = v60;
    while (1)
    {
      uint64_t v62 = (int **)a1[1];
      std::vector<int> v63 = v62 + 1;
      if (v61 < v62[1] - *v62) {
        break;
      }
      BOOL v64 = fst::TropicalWeightTpl<float>::Zero();
      char v65 = v64;
      unint64_t v66 = (unint64_t)v62[2];
      uint64_t v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        char v69 = *v62;
        uint64_t v70 = v67 - *v62;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v66 - (void)v69;
        if (v72 >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          BOOL v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 2), v73);
          uint64_t v67 = *v63;
          char v69 = *v62;
        }
        else
        {
          BOOL v74 = 0;
        }
        unint64_t v75 = (int *)&v74[4 * v70];
        *unint64_t v75 = *v65;
        int v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *--v67;
          *--unint64_t v75 = v76;
        }
        *uint64_t v62 = v75;
        *std::vector<int> v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *uint64_t v67 = *v64;
        int v68 = v67 + 1;
      }
      *std::vector<int> v63 = v68;
      int v77 = *fst::TropicalWeightTpl<float>::Zero();
      uint64_t v79 = (int *)a1[6];
      unint64_t v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        BOOL v81 = (int *)*v184;
        uint64_t v82 = ((char *)v79 - (unsigned char *)*v184) >> 2;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v84 = v78 - (void)v81;
        if (v84 >> 1 > v83) {
          unint64_t v83 = v84 >> 1;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v85);
          BOOL v81 = (int *)a1[5];
          uint64_t v79 = (int *)a1[6];
        }
        else
        {
          uint64_t v86 = 0;
        }
        uint64_t v87 = (int *)&v86[4 * v82];
        *uint64_t v87 = v77;
        uint64_t v80 = v87 + 1;
        while (v79 != v81)
        {
          int v88 = *--v79;
          *--uint64_t v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81) {
          operator delete(v81);
        }
      }
      else
      {
        *uint64_t v79 = v77;
        uint64_t v80 = v79 + 1;
      }
      a1[6] = v80;
      int v89 = *fst::TropicalWeightTpl<float>::Zero();
      uint64_t v91 = (int *)a1[9];
      unint64_t v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        Swift::String_optional v93 = (int *)*v186;
        uint64_t v94 = ((char *)v91 - (unsigned char *)*v186) >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          goto LABEL_276;
        }
        uint64_t v96 = v90 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          char v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v97);
          Swift::String_optional v93 = (int *)a1[8];
          uint64_t v91 = (int *)a1[9];
        }
        else
        {
          char v98 = 0;
        }
        uint64_t v99 = (int *)&v98[4 * v94];
        *uint64_t v99 = v89;
        uint64_t v92 = v99 + 1;
        while (v91 != v93)
        {
          int v100 = *--v91;
          *--uint64_t v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *uint64_t v91 = v89;
        uint64_t v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v190);
      uint64_t v101 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v187) = v190;
      HIDWORD(v190) = 0;
      HIDWORD(v190) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_266:
        ++*((_DWORD *)a1 + 34);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, __n128))(*(void *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result) {
          return result;
        }
LABEL_270:
        *uint64_t v181 = 1;
        return result;
      }
    }
    *(void *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    uint64_t v102 = a1[8];
    float v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *fst::TropicalWeightTpl<float>::Zero();
    uint64_t v104 = *a1;
    long long v187 = 0u;
    long long v188 = 0u;
    unint64_t v189 = 0;
    (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if (!(void)v187)
      {
        if (v189 >= (unint64_t)v188)
        {
LABEL_258:
          char v179 = 1;
          goto LABEL_259;
        }
LABEL_140:
        uint64_t v105 = *((void *)&v187 + 1) + 16 * v189;
        goto LABEL_141;
      }
      if ((*(uint64_t (**)(void))(*(void *)v187 + 16))(v187)) {
        goto LABEL_258;
      }
      if (!(void)v187) {
        goto LABEL_140;
      }
      uint64_t v105 = (*(uint64_t (**)(void))(*(void *)v187 + 24))(v187);
LABEL_141:
      if (!*(void *)v105)
      {
        uint64_t v106 = a1[1];
        char v107 = (int **)(v106 + 8);
        for (unint64_t i = *(int *)(v105 + 12); i >= (uint64_t)(*(void *)(v106 + 8) - *(void *)v106) >> 2; unint64_t i = *(int *)(v105 + 12))
        {
          uint64_t v109 = fst::TropicalWeightTpl<float>::Zero();
          uint64_t v110 = v109;
          char v111 = *v107;
          unint64_t v112 = *(void *)(v106 + 16);
          if ((unint64_t)*v107 >= v112)
          {
            uint64_t v114 = *(int **)v106;
            uint64_t v115 = ((uint64_t)v111 - *(void *)v106) >> 2;
            unint64_t v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 62) {
              std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v117 = v112 - (void)v114;
            if (v117 >> 1 > v116) {
              unint64_t v116 = v117 >> 1;
            }
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v116;
            }
            if (v118)
            {
              uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v106 + 16, v118);
              char v111 = *v107;
              uint64_t v114 = *(int **)v106;
            }
            else
            {
              uint64_t v119 = 0;
            }
            char v120 = (int *)&v119[4 * v115];
            *char v120 = *v110;
            uint64_t v113 = v120 + 1;
            while (v111 != v114)
            {
              int v121 = *--v111;
              *--char v120 = v121;
            }
            *(void *)uint64_t v106 = v120;
            *char v107 = v113;
            *(void *)(v106 + 16) = &v119[4 * v118];
            if (v114) {
              operator delete(v114);
            }
          }
          else
          {
            *char v111 = *v109;
            uint64_t v113 = v111 + 1;
          }
          *char v107 = v113;
          int v122 = *fst::TropicalWeightTpl<float>::Zero();
          char v124 = (int *)a1[6];
          unint64_t v123 = a1[7];
          if ((unint64_t)v124 >= v123)
          {
            uint64_t v126 = (int *)*v184;
            uint64_t v127 = ((char *)v124 - (unsigned char *)*v184) >> 2;
            unint64_t v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 62) {
              std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v129 = v123 - (void)v126;
            if (v129 >> 1 > v128) {
              unint64_t v128 = v129 >> 1;
            }
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v128;
            }
            if (v130)
            {
              Swift::String_optional v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v130);
              uint64_t v126 = (int *)a1[5];
              char v124 = (int *)a1[6];
            }
            else
            {
              Swift::String_optional v131 = 0;
            }
            uint64_t v132 = (int *)&v131[4 * v127];
            *uint64_t v132 = v122;
            uint64_t v125 = v132 + 1;
            while (v124 != v126)
            {
              int v133 = *--v124;
              *--uint64_t v132 = v133;
            }
            a1[5] = v132;
            a1[6] = v125;
            a1[7] = &v131[4 * v130];
            if (v126) {
              operator delete(v126);
            }
          }
          else
          {
            *char v124 = v122;
            uint64_t v125 = v124 + 1;
          }
          a1[6] = v125;
          int v134 = *fst::TropicalWeightTpl<float>::Zero();
          uint64_t v136 = (int *)a1[9];
          unint64_t v135 = a1[10];
          if ((unint64_t)v136 >= v135)
          {
            uint64_t v138 = (int *)*v186;
            uint64_t v139 = ((char *)v136 - (unsigned char *)*v186) >> 2;
            unint64_t v140 = v139 + 1;
            if ((unint64_t)(v139 + 1) >> 62) {
              std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v141 = v135 - (void)v138;
            if (v141 >> 1 > v140) {
              unint64_t v140 = v141 >> 1;
            }
            if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v142 = v140;
            }
            if (v142)
            {
              uint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v142);
              uint64_t v138 = (int *)a1[8];
              uint64_t v136 = (int *)a1[9];
            }
            else
            {
              uint64_t v143 = 0;
            }
            Swift::String_optional v144 = (int *)&v143[4 * v139];
            *Swift::String_optional v144 = v134;
            char v137 = v144 + 1;
            while (v136 != v138)
            {
              int v145 = *--v136;
              *--Swift::String_optional v144 = v145;
            }
            a1[8] = v144;
            a1[9] = v137;
            a1[10] = &v143[4 * v142];
            if (v138) {
              operator delete(v138);
            }
          }
          else
          {
            *uint64_t v136 = v134;
            char v137 = v136 + 1;
          }
          a1[9] = v137;
          BYTE4(v190) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 11), (unsigned char *)&v190 + 4);
          uint64_t v106 = a1[1];
          char v107 = (int **)(v106 + 8);
        }
        if (*((unsigned char *)a1 + 33))
        {
          char v146 = (char *)a1[14];
          char v147 = (char *)a1[15];
          unint64_t v148 = (v147 - v146) >> 2;
          if (v148 <= (int)i)
          {
            do
            {
              if ((unint64_t)v147 >= *v58)
              {
                unint64_t v151 = v148 + 1;
                if ((v148 + 1) >> 62) {
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v152 = *v58 - (void)v146;
                if (v152 >> 1 > v151) {
                  unint64_t v151 = v152 >> 1;
                }
                if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v151;
                }
                if (v153)
                {
                  uint64_t v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v153);
                  char v146 = (char *)a1[14];
                  char v147 = (char *)a1[15];
                }
                else
                {
                  uint64_t v154 = 0;
                }
                uint64_t v155 = &v154[4 * v148];
                *(_DWORD *)uint64_t v155 = -1;
                char v150 = v155 + 4;
                while (v147 != v146)
                {
                  int v156 = *((_DWORD *)v147 - 1);
                  v147 -= 4;
                  *((_DWORD *)v155 - 1) = v156;
                  v155 -= 4;
                }
                a1[14] = v155;
                a1[15] = v150;
                a1[16] = &v154[4 * v153];
                if (v146)
                {
                  operator delete(v146);
                  char v146 = (char *)a1[14];
                }
                else
                {
                  char v146 = v155;
                }
              }
              else
              {
                *(_DWORD *)char v147 = -1;
                char v150 = v147 + 4;
              }
              a1[15] = v150;
              unint64_t v148 = (v150 - v146) >> 2;
              int v157 = *(_DWORD *)(v105 + 12);
              char v147 = v150;
            }
            while (v148 <= v157);
            uint64_t v149 = v157;
            LODWORD(i) = *(_DWORD *)(v105 + 12);
          }
          else
          {
            uint64_t v149 = (int)i;
          }
          if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
          {
            uint64_t v158 = fst::TropicalWeightTpl<float>::Zero();
            uint64_t v159 = *(int *)(v105 + 12);
            *(_DWORD *)(*(void *)a1[1] + 4 * v159) = *v158;
            uint64_t v160 = a1[5];
            *(_DWORD *)(v160 + 4 * v159) = *fst::TropicalWeightTpl<float>::Zero();
            uint64_t v161 = *(int *)(v105 + 12);
            unint64_t i = (unint64_t)*v186;
            *(_DWORD *)(i + 4 * v161) = *fst::TropicalWeightTpl<float>::Zero();
            unint64_t v162 = *(int *)(v105 + 12);
            *(void *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
            *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
            LODWORD(i) = *(_DWORD *)(v105 + 12);
          }
        }
        uint64_t v163 = *(void *)a1[1];
        uint64_t v164 = a1[5];
        uint64_t v165 = a1[8];
        if (v103 == -INFINITY || (float v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
        {
          float v167 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else
        {
          BOOL v168 = v166 == INFINITY || v103 == INFINITY;
          float v169 = v103 + v166;
          float v167 = v168 ? INFINITY : v169;
        }
        float v170 = *(float *)(v163 + 4 * (int)i);
        if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
        {
          float v171 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
          float v170 = *(float *)(v163 + 4 * (int)i);
        }
        else
        {
          float v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
        }
        float v172 = *((float *)a1 + 7);
        float v173 = v171 + v172;
        float v174 = v172 + v170;
        if (v170 > v173 || v171 > v174) {
          break;
        }
      }
LABEL_255:
      if ((void)v187) {
        (*(void (**)(void))(*(void *)v187 + 32))(v187);
      }
      else {
        ++v189;
      }
    }
    float v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v176 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v176 >= v167)
    {
      float v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    float v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v177 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v177 >= v167)
    {
      float v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      uint64_t v178 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)))
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_255;
    }
    char v179 = 0;
    *uint64_t v181 = 1;
LABEL_259:
    uint64_t result = v187;
    if ((void)v187)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v187 + 8))(v187);
    }
    else if (*((void *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_23AC093B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23AC09790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementEqual,fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::ElementHash,true>,std::allocator<std::__hash_value_type<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>(uint64_t a1, int *a2, uint64_t a3)
{
  int v7 = a2[1];
  uint64_t v6 = a2[2];
  int v8 = *a2;
  unint64_t v9 = v6 + 7853 * *a2 + 7867 * v7;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = v6 + 7853 * v8 + 7867 * v7;
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *(void *)((char *)v13 + 20) == __PAIR64__(v6, v7)) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x30uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  v13[2] = *(void *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v13 + 2) = *(_OWORD *)(a3 + 16);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
      else {
        uint64_t v3 = v9;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v13 = *v22;
LABEL_39:
    void *v22 = v13;
    goto LABEL_40;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_23AC09A20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,(void *)0>(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (v4 < 1) {
    return;
  }
  unint64_t v5 = v4;
  uint64_t v6 = fst::TropicalWeightTpl<float>::Zero();
  std::vector<fst::TropicalWeightTpl<float>>::vector(v100, v5, v6);
  unint64_t v97 = 0;
  char v98 = 0;
  uint64_t v99 = 0;
  if (!*(void *)(a2 + 16))
  {
    std::vector<fst::TropicalWeightTpl<float>>::reserve(&v97, v5);
    fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, (uint64_t)&v97, 1);
  }
  int v7 = *(uint64_t **)(a2 + 16);
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *v7;
    if ((*(int (**)(uint64_t))(*(void *)a1 + 16))(a1) < (unint64_t)((v9 - v10) >> 2))
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      uint64_t v12 = *v7;
      uint64_t v13 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v92[0]) = 0;
      LODWORD(v92[0]) = *(_DWORD *)(v12 + 4 * v11);
      LODWORD(v90) = 0;
      LODWORD(v90) = *v13;
      if (*(float *)v92 != *(float *)&v90)
      {
        v92[0] = v100;
        v92[1] = v7;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        memset(v96, 0, 28);
        LOBYTE(v89[0]) = 0;
        std::vector<BOOL>::vector(&v90, v5, (unsigned __int8 *)v89);
        std::string __p = (void *)-1;
        std::vector<unsigned long>::vector(v89, v5, &__p);
        std::string __p = 0;
        uint64_t v87 = 0;
        int v88 = 0;
        int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
        int v15 = v14;
        float v16 = v87;
        if (v87 >= v88)
        {
          unint64_t v18 = (char *)__p;
          uint64_t v19 = (v87 - (unsigned char *)__p) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v88 - (unsigned char *)__p;
          if ((v88 - (unsigned char *)__p) >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v88, v22);
            unint64_t v18 = (char *)__p;
            float v16 = v87;
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v24 = &v23[4 * v19];
          unint64_t v25 = &v23[4 * v22];
          *(_DWORD *)uint64_t v24 = v15;
          BOOL v17 = v24 + 4;
          while (v16 != v18)
          {
            int v26 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v24 - 1) = v26;
            v24 -= 4;
          }
          std::string __p = v24;
          uint64_t v87 = v17;
          int v88 = v25;
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v87 = v14;
          BOOL v17 = v16 + 4;
        }
        uint64_t v87 = v17;
        unsigned int v84 = 0;
        int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        unsigned int v84 = v27;
        if (*(unsigned char *)(a2 + 28))
        {
          float v28 = *(float *)a2;
          if (*(float *)a2 == -INFINITY || (float v29 = *(float *)(*v7 + 4 * v27), v29 >= -INFINITY) && v29 <= -INFINITY)
          {
LABEL_37:
            float v30 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
LABEL_43:
            float v83 = v30;
            if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v85, &v83, (float *)(*v7 + 4 * (int)v84)))
            {
              int v32 = 0;
            }
            else
            {
              *((_DWORD *)v100[0] + (int)v84) = *fst::TropicalWeightTpl<float>::One();
              int v33 = fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert((uint64_t)v92, (int *)&v84);
              *((void *)v89[0] + (int)v84) = v33;
              int v32 = 1;
            }
            while (LODWORD(v96[3]))
            {
              unsigned int v84 = *(_DWORD *)v96[0];
              fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Pop((uint64_t)v92);
              int v34 = v84;
              uint64_t v35 = (int)v84;
              *((void *)v89[0] + (int)v84) = -1;
              *(void *)((char *)v90 + (((unint64_t)v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
              uint64_t v36 = (float *)v100[0];
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v81, a1);
              float v37 = v36[v35];
              if (v37 == -INFINITY || *(float *)&v81 >= -INFINITY && *(float *)&v81 <= -INFINITY)
              {
                float v38 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
              }
              else
              {
                BOOL v39 = *(float *)&v81 == INFINITY || v37 == INFINITY;
                float v38 = v37 + *(float *)&v81;
                if (v39) {
                  float v38 = INFINITY;
                }
              }
              *(float *)&uint64_t v78 = v38;
              if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v85, &v83, (float *)&v78))
              {
                uint64_t v40 = v84;
                int v82 = *fst::TropicalWeightTpl<float>::Zero();
                (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 160))(a1, v40, &v82);
              }
              (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 272))(a1, v84, &v81);
              while (!(*(unsigned int (**)(uint64_t))(*(void *)v81 + 16))(v81))
              {
                uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 24))(v81);
                uint64_t v78 = *(void *)v41;
                float v42 = *(float *)(v41 + 8);
                float v79 = v42;
                int v43 = *(_DWORD *)(v41 + 12);
                int v80 = v43;
                float v44 = *((float *)v100[0] + (int)v84);
                if (v44 == -INFINITY || v42 >= -INFINITY && v42 <= -INFINITY)
                {
                  float v45 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                  int v43 = v80;
                }
                else
                {
                  BOOL v46 = v44 == INFINITY || v42 == INFINITY;
                  float v47 = v42 + v44;
                  if (v46) {
                    float v45 = INFINITY;
                  }
                  else {
                    float v45 = v47;
                  }
                }
                if (v43 >= (unint64_t)((*(void *)(v8 + 8) - *v7) >> 2)) {
                  int v48 = fst::TropicalWeightTpl<float>::Zero();
                }
                else {
                  int v48 = (int *)(*v7 + 4 * v43);
                }
                if (v45 == -INFINITY || (float v49 = *(float *)v48, *(float *)v48 >= -INFINITY) && *(float *)v48 <= -INFINITY)
                {
                  float v50 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                }
                else
                {
                  BOOL v51 = v49 == INFINITY || v45 == INFINITY;
                  float v50 = v45 + v49;
                  if (v51) {
                    float v50 = INFINITY;
                  }
                }
                float v77 = v50;
                if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v85, &v83, &v77))
                {
                  int v80 = *(_DWORD *)__p;
                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v81 + 80))(v81, &v78);
                }
                else
                {
                  uint64_t v52 = (float *)v100[0];
                  float v53 = *((float *)v100[0] + (int)v84);
                  if (v53 == -INFINITY || v79 >= -INFINITY && v79 <= -INFINITY)
                  {
                    float v54 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                    uint64_t v52 = (float *)v100[0];
                  }
                  else
                  {
                    BOOL v55 = v79 == INFINITY || v53 == INFINITY;
                    float v54 = v53 + v79;
                    if (v55) {
                      float v54 = INFINITY;
                    }
                  }
                  float v76 = v54;
                  if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v85, &v76, &v52[v80]))
                  {
                    uint64_t v56 = (float *)v100[0];
                    float v57 = *((float *)v100[0] + (int)v84);
                    if (v57 == -INFINITY || v79 >= -INFINITY && v79 <= -INFINITY)
                    {
                      float v58 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
                      uint64_t v56 = (float *)v100[0];
                    }
                    else
                    {
                      BOOL v60 = v79 == INFINITY || v57 == INFINITY;
                      float v58 = v57 + v79;
                      if (v60) {
                        float v58 = INFINITY;
                      }
                    }
                    unint64_t v59 = v80;
                    v56[v80] = v58;
                  }
                  else
                  {
                    unint64_t v59 = v80;
                  }
                  if (((*(void *)((char *)v90 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
                  {
                    int v61 = *(_DWORD *)(a2 + 4);
                    if (v61 == -1 || v32 < v61)
                    {
                      uint64_t v62 = *((void *)v89[0] + v59);
                      if (v62 == -1)
                      {
                        int v63 = fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert((uint64_t)v92, &v80);
                        *((void *)v89[0] + v80) = v63;
                        ++v32;
                      }
                      else
                      {
                        fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Update((uint64_t)v92, v62, &v80);
                      }
                    }
                  }
                }
                (*(void (**)(uint64_t))(*(void *)v81 + 32))(v81);
              }
              if (v81) {
                (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
              }
            }
            unint64_t v64 = v91;
            if (v91)
            {
              unint64_t v65 = 0;
              do
              {
                if (((*(void *)((char *)v90 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
                {
                  unint64_t v66 = v87;
                  if (v87 >= v88)
                  {
                    int v68 = (char *)__p;
                    uint64_t v69 = (v87 - (unsigned char *)__p) >> 2;
                    unint64_t v70 = v69 + 1;
                    if ((unint64_t)(v69 + 1) >> 62) {
                      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v71 = v88 - (unsigned char *)__p;
                    if ((v88 - (unsigned char *)__p) >> 1 > v70) {
                      unint64_t v70 = v71 >> 1;
                    }
                    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v72 = v70;
                    }
                    if (v72)
                    {
                      unint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v88, v72);
                      int v68 = (char *)__p;
                      unint64_t v66 = v87;
                    }
                    else
                    {
                      unint64_t v73 = 0;
                    }
                    BOOL v74 = &v73[4 * v69];
                    *(_DWORD *)BOOL v74 = v65;
                    uint64_t v67 = v74 + 4;
                    while (v66 != v68)
                    {
                      int v75 = *((_DWORD *)v66 - 1);
                      v66 -= 4;
                      *((_DWORD *)v74 - 1) = v75;
                      v74 -= 4;
                    }
                    std::string __p = v74;
                    uint64_t v87 = v67;
                    int v88 = &v73[4 * v72];
                    if (v68) {
                      operator delete(v68);
                    }
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v87 = v65;
                    uint64_t v67 = v66 + 4;
                  }
                  uint64_t v87 = v67;
                  unint64_t v64 = v91;
                }
                ++v65;
              }
              while (v64 > v65);
            }
            (*(void (**)(uint64_t, void **))(*(void *)a1 + 192))(a1, &__p);
            if (__p)
            {
              uint64_t v87 = (char *)__p;
              operator delete(__p);
            }
            if (v89[0])
            {
              v89[1] = v89[0];
              operator delete(v89[0]);
            }
            if (v90) {
              operator delete(v90);
            }
            if (v96[0])
            {
              v96[1] = v96[0];
              operator delete(v96[0]);
            }
            if (*((void *)&v94 + 1))
            {
              *(void *)&long long v95 = *((void *)&v94 + 1);
              operator delete(*((void **)&v94 + 1));
            }
            if ((void)v93)
            {
              *((void *)&v93 + 1) = v93;
              operator delete((void *)v93);
            }
            goto LABEL_8;
          }
        }
        else
        {
          float v28 = *(float *)(*v7 + 4 * v27);
          if (v28 == -INFINITY) {
            goto LABEL_37;
          }
          float v29 = *(float *)a2;
          if (*(float *)a2 >= -INFINITY && *(float *)a2 <= -INFINITY) {
            goto LABEL_37;
          }
        }
        BOOL v31 = v29 == INFINITY || v28 == INFINITY;
        float v30 = v28 + v29;
        if (v31) {
          float v30 = INFINITY;
        }
        goto LABEL_43;
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
LABEL_8:
  if (v97)
  {
    char v98 = v97;
    operator delete(v97);
  }
  if (v100[0])
  {
    v100[1] = v100[0];
    operator delete(v100[0]);
  }
}

void sub_23AC0A458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::~Heap(&a25);
  int v27 = *(void **)(v25 - 152);
  if (v27)
  {
    *(void *)(v25 - 144) = v27;
    operator delete(v27);
  }
  float v28 = *(void **)(v25 - 128);
  if (v28)
  {
    *(void *)(v25 - 120) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void std::vector<fst::TropicalWeightTpl<float>>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    int v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(&v7);
    fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, &v7, 1);
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>((uint64_t)v8, (uint64_t)&v7);
  }
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v8, a1);
}

void sub_23AC0A834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 72;
  int v4 = *(int **)(a1 + 72);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 24) + 4 * *(int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 96))) = *(_DWORD *)(a1 + 96);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 88);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 88, v13);
      int v4 = *(int **)(a1 + 72);
      uint64_t v7 = *(int **)(a1 + 80);
    }
    else
    {
      int v14 = 0;
    }
    int v15 = (int *)&v14[4 * v8];
    float v16 = &v14[4 * v13];
    *int v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--int v15 = v17;
    }
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 40);
  *(void *)(a1 + 80) = v10;
  uint64_t v19 = *(char **)(a1 + 32);
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = *(char **)(a1 + 24);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v25);
      uint64_t v21 = *(char **)(a1 + 24);
      uint64_t v19 = *(char **)(a1 + 32);
    }
    else
    {
      int v26 = 0;
    }
    int v27 = &v26[4 * v22];
    float v28 = &v26[4 * v25];
    *(_DWORD *)int v27 = *(_DWORD *)(a1 + 96);
    unint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v27;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 40) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 96);
    unint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 64);
  *(void *)(a1 + 32) = v20;
  BOOL v31 = *(char **)(a1 + 56);
  if ((unint64_t)v31 >= v30)
  {
    int v33 = *(char **)(a1 + 48);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        float v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v37);
        int v33 = *(char **)(a1 + 48);
        BOOL v31 = *(char **)(a1 + 56);
      }
      else
      {
        float v38 = 0;
      }
      BOOL v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)BOOL v39 = *(_DWORD *)(a1 + 96);
      int v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 48) = v39;
      *(void *)(a1 + 56) = v32;
      *(void *)(a1 + 64) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)BOOL v31 = *(_DWORD *)(a1 + 96);
  int v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 56) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v42 + 1;
  return fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Pop(uint64_t a1)
{
  int v1 = *(_DWORD **)(a1 + 72);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 96) - 1;
  int v4 = *(int **)(a1 + 48);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  *int v4 = v6;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  _DWORD *v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 96);
  fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Heapify(a1, 0);
  return v2;
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Update(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(int *)(*(void *)(a1 + 24) + 4 * a2);
  int v6 = v5 - 1;
  if ((int)v5 < 1) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 24) + 4 * a2);
  }
  BOOL v7 = fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *a3, *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v6 >> 1)));
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v5) = *a3;
  if (v7)
  {
    return fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(a1, a3, v5);
  }
  else
  {
    return fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Heapify(a1, v5);
  }
}

void *fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::~Heap(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void *std::vector<fst::TropicalWeightTpl<float>>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (_DWORD *)a1[1];
    BOOL v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23AC0AD34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, void *a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v5[2] = *(void *)a3;
  int v6 = *(_DWORD *)(a3 + 16);
  char v7 = *(unsigned char *)(a3 + 20);
  char v8 = 0;
  *(_OWORD *)unint64_t v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)unint64_t v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v14, 0, sizeof(v14));
  a2[1] = *a2;
  fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(v5, *(_DWORD *)(a3 + 12));
  if (v14[20])
  {
    a2[1] = *a2;
    int v4 = fst::TropicalWeightTpl<float>::NoWeight();
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, v4);
  }
  if (__p[1])
  {
    *(void **)int v14 = __p[1];
    operator delete(__p[1]);
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_23AC0AE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 200))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 256))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 264))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 224))(a2, (v8 + 1));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v51 = 0;
  if (a3)
  {
LABEL_31:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 176))(a2);
    int v19 = 1;
    goto LABEL_32;
  }
  *(void *)&long long v42 = 0;
  DWORD2(v42) = 0;
  LODWORD(v43) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 112))(a1, &v42);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if ((void)v42)
    {
      char v11 = (*(uint64_t (**)(void))(*(void *)v42 + 16))(v42);
      uint64_t v12 = v42;
      if (v11) {
        goto LABEL_24;
      }
      if ((void)v42)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v42 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v43 >= SDWORD2(v42))
    {
      goto LABEL_26;
    }
    uint64_t v13 = v43;
LABEL_11:
    (*(void (**)(float *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v50, a1, v13);
    int v14 = fst::TropicalWeightTpl<float>::Zero();
    *(float *)&uint64_t v39 = v50;
    LODWORD(v47) = 0;
    LODWORD(v47) = *v14;
    int v15 = 2 * (v10 != -1);
    if (v10 == -1) {
      int v16 = v13;
    }
    else {
      int v16 = -1;
    }
    if (*(float *)&v39 == *(float *)&v47) {
      int v15 = 4;
    }
    uint64_t v10 = v50 == *(float *)&v47 ? v10 : v16;
    if ((v15 | 4) != 4) {
      break;
    }
    if ((void)v42) {
      (*(void (**)(void))(*(void *)v42 + 32))(v42);
    }
    else {
      LODWORD(v43) = v43 + 1;
    }
  }
  uint64_t v12 = v42;
LABEL_24:
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_26:
  if (v10 == -1) {
    goto LABEL_31;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v47, a1, v10);
  int v17 = fst::TropicalWeightTpl<float>::One();
  LODWORD(v42) = v47;
  LODWORD(v39) = 0;
  v18.n128_u32[0] = v47;
  if (*(float *)&v47 != *(float *)v17)
  {
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    long long v42 = (unint64_t)&v47;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = &v51;
    long long v45 = 0u;
    long long v46 = 0u;
    fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t)&v42);
  }
  int v19 = 0;
LABEL_32:
  uint64_t v39 = 0;
  int v40 = 0;
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)a1 + 112))(a1, &v39, v18);
  while (2)
  {
    if (!v39)
    {
      if ((int)v41 >= v40) {
        goto LABEL_84;
      }
      goto LABEL_38;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39))
    {
      if (v39)
      {
        uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v39 + 24))();
LABEL_39:
        int v21 = v20 + v19;
        while ((*(int (**)(uint64_t *))(*a2 + 136))(a2) <= v21)
          (*(void (**)(uint64_t *))(*a2 + 176))(a2);
        if (v20 == v9)
        {
          int v38 = *fst::TropicalWeightTpl<float>::One();
          (*(void (**)(uint64_t *, void, int *))(*a2 + 160))(a2, (v20 + v19), &v38);
        }
        (*(void (**)(float *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v50, a1, v20);
        uint64_t v22 = fst::TropicalWeightTpl<float>::Zero();
        *(float *)&long long v42 = v50;
        LODWORD(v47) = 0;
        LODWORD(v47) = *v22;
        char v23 = v19 ^ 1;
        if (v50 == *(float *)&v47) {
          char v23 = 1;
        }
        if ((v23 & 1) == 0)
        {
          *(void *)&long long v42 = 0;
          *((float *)&v42 + 2) = v50;
          HIDWORD(v42) = v20 + v19;
          (*(void (**)(uint64_t *, void, long long *))(*a2 + 184))(a2, 0, &v42);
        }
        unint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v20, &v42);
LABEL_49:
        if ((void)v42)
        {
          if ((*(unsigned int (**)(void))(*(void *)v42 + 16))(v42))
          {
            if ((void)v42)
            {
              (*(void (**)(void))(*(void *)v42 + 8))();
              goto LABEL_79;
            }
LABEL_77:
            if (*((void *)&v43 + 1)) {
              --**((_DWORD **)&v43 + 1);
            }
LABEL_79:
            if (v39) {
              (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
            }
            else {
              LODWORD(v41) = v41 + 1;
            }
            continue;
          }
          if ((void)v42)
          {
            uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v42 + 24))();
LABEL_55:
            uint64_t v25 = (*(_DWORD *)(v24 + 12) + v19);
            float v26 = *(float *)(v24 + 8);
            if (v25 == v10) {
              char v27 = v19;
            }
            else {
              char v27 = 1;
            }
            if ((v27 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v47, a1, v10);
              if (*(float *)&v47 == -INFINITY || v26 >= -INFINITY && v26 <= -INFINITY)
              {
                LODWORD(v26) = *fst::TropicalWeightTpl<float>::NoWeight();
              }
              else if (*(float *)&v47 == INFINITY || v26 == INFINITY)
              {
                float v26 = INFINITY;
              }
              else
              {
                float v26 = v26 + *(float *)&v47;
              }
            }
            uint64_t v47 = *(void *)v24;
            unint64_t v48 = __PAIR64__(v21, LODWORD(v26));
            while (1)
            {
              int v29 = (*(uint64_t (**)(uint64_t *))(*a2 + 136))(a2);
              uint64_t v30 = *a2;
              if (v29 > (int)v25) {
                break;
              }
              (*(void (**)(uint64_t *))(v30 + 176))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, uint64_t *))(v30 + 184))(a2, v25, &v47);
            if ((void)v42) {
              (*(void (**)(void))(*(void *)v42 + 32))(v42);
            }
            else {
              ++v44;
            }
            goto LABEL_49;
          }
        }
        else if (v44 >= (unint64_t)v43)
        {
          goto LABEL_77;
        }
        uint64_t v24 = *((void *)&v42 + 1) + 16 * v44;
        goto LABEL_55;
      }
LABEL_38:
      uint64_t v20 = v41;
      goto LABEL_39;
    }
    break;
  }
  if (v39) {
    (*(void (**)(void))(*(void *)v39 + 8))();
  }
LABEL_84:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 152))(a2, v10);
  if (v10 == v9) {
    char v31 = v19;
  }
  else {
    char v31 = 1;
  }
  if ((v31 & 1) == 0)
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v42, a1, v9);
    int v37 = v42;
    (*(void (**)(uint64_t *, uint64_t, int *))(*a2 + 160))(a2, v9, &v37);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  unint64_t v33 = v51 | v32;
  uint64_t v34 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  unint64_t v35 = fst::ReverseProperties(v33, v19);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 168))(a2, v34 | v35, 0xFFFFFFFF0007);
}

void sub_23AC0BB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(va);
  char v11 = *(void **)(v9 - 144);
  if (v11)
  {
    *(void *)(v9 - 136) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestDistance<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, void *a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v5[2] = *(void *)a3;
  int v6 = *(_DWORD *)(a3 + 16);
  char v7 = *(unsigned char *)(a3 + 20);
  char v8 = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v14, 0, sizeof(v14));
  a2[1] = *a2;
  fst::internal::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ShortestDistance(v5, *(_DWORD *)(a3 + 12));
  if (v14[20])
  {
    a2[1] = *a2;
    int v4 = fst::TropicalWeightTpl<float>::NoWeight();
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, v4);
  }
  if (__p[1])
  {
    *(void **)int v14 = __p[1];
    operator delete(__p[1]);
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_23AC0BCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<fst::TropicalWeightTpl<float>>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<fst::TropicalWeightTpl<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFst(void *a1)
{
  *a1 = &unk_26EE2D838;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_26EE2CFD8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  unint64_t v3 = (void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v8 = 0;
        __p[0] = v3;
        __p[1] = 0;
        __p[2] = 0;
        __p[3] = &v8;
        long long v6 = 0u;
        long long v7 = 0u;
        fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2, (uint64_t)__p);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_23AC0C888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  LogMessage::~LogMessage((LogMessage *)&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28)
    {
LABEL_10:
      MEMORY[0x23ECC24B0](v28, 0x60C405BB7FD7CLL);
      if (!v29)
      {
LABEL_7:
        if (a18)
        {
          a19 = (uint64_t)a18;
          operator delete(a18);
        }
        fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a21);
        uint64_t v32 = *v27;
        if (*v27)
        {
          *(void *)(v26 + 56) = v32;
          operator delete(v32);
        }
        std::vector<std::unique_ptr<fst::QueueBase<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        uint64_t v33 = *v30;
        uint64_t *v30 = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        _Unwind_Resume(a1);
      }
LABEL_6:
      MEMORY[0x23ECC24B0](v29, 0xC400A2AC0F1);
      goto LABEL_7;
    }
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (!v29) {
    goto LABEL_7;
  }
  goto LABEL_6;
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  uint64_t v32 = 0;
  int v33 = 0;
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v14) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v29);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!(void)v29)
      {
        if (v31 >= (unint64_t)v30) {
          goto LABEL_38;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29 + 16))(v29)) {
        break;
      }
      if ((void)v29)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = *((void *)&v29 + 1) + 16 * v31;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        int v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = fst::TropicalWeightTpl<float>::One(),
              int v21 = (float *)(v17 + 8),
              fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(a4, (float *)(v17 + 8), (float *)v20)))
        {
          int v22 = 1;
          goto LABEL_23;
        }
        if ((v19[v18] | 2) == 2)
        {
          uint64_t v26 = fst::TropicalWeightTpl<float>::Zero();
          float v36 = 0.0;
          float v36 = *v21;
          float v35 = 0.0;
          float v35 = *(float *)v26;
          if (v36 == v35
            || (char v27 = fst::TropicalWeightTpl<float>::One(),
                float v36 = 0.0,
                float v36 = *v21,
                float v35 = 0.0,
                float v35 = *(float *)v27,
                v36 == v35))
          {
            int v22 = 2;
          }
          else
          {
            int v22 = 3;
          }
LABEL_23:
          v19[v18] = v22;
        }
        *a5 = 0;
      }
      char v23 = fst::TropicalWeightTpl<float>::Zero();
      float v36 = 0.0;
      float v36 = *(float *)(v17 + 8);
      float v35 = 0.0;
      float v35 = *(float *)v23;
      v24.n128_f32[0] = v36;
      if (v36 != v35)
      {
        uint64_t v25 = fst::TropicalWeightTpl<float>::One();
        float v36 = 0.0;
        float v36 = *(float *)(v17 + 8);
        float v35 = 0.0;
        float v35 = *(float *)v25;
        v24.n128_f32[0] = v36;
        if (v36 != v35) {
          *a6 = 0;
        }
      }
      if ((void)v29) {
        (*(void (**)(void, __n128))(*(void *)v29 + 32))(v29, v24);
      }
      else {
        ++v31;
      }
    }
    if ((void)v29)
    {
      (*(void (**)(void))(*(void *)v29 + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (*((void *)&v30 + 1)) {
      --**((_DWORD **)&v30 + 1);
    }
LABEL_40:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_23AC0CE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_26EE2D0B8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v4 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v4;
  uint64_t v3 = 0;
  fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>();
}

void sub_23AC0D088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v23, a21);
  }
  uint64_t v26 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 56) = v26;
    operator delete(v26);
  }
  char v27 = *v24;
  if (*v24)
  {
    *(void *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>()
{
}

void sub_23AC0D9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  long long v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 56))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    uint64_t v181 = (char *)a1 + 140;
    goto LABEL_269;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1[1];
  long long v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2))
  {
    char v185 = (void **)(a1 + 5);
    long long v7 = (void **)(a1 + 8);
    do
    {
      uint64_t v8 = fst::TropicalWeightTpl<float>::Zero();
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(int **)v5;
        uint64_t v14 = ((uint64_t)v11 - *(void *)v5) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5 + 16, v17);
          uint64_t v11 = *v6;
          uint64_t v13 = *(int **)v5;
        }
        else
        {
          uint64_t v18 = 0;
        }
        int v19 = (int *)&v18[4 * v14];
        int *v19 = *v9;
        unint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *--v11;
          *--int v19 = v20;
        }
        *(void *)uint64_t v5 = v19;
        _DWORD *v6 = v12;
        *(void *)(v5 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = *v8;
        unint64_t v12 = v11 + 1;
      }
      _DWORD *v6 = v12;
      int v21 = *fst::TropicalWeightTpl<float>::Zero();
      uint64_t v23 = (int *)a1[6];
      unint64_t v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = (int *)*v185;
        uint64_t v26 = ((char *)v23 - (unsigned char *)*v185) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_275:
        }
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
          uint64_t v25 = (int *)a1[5];
          uint64_t v23 = (int *)a1[6];
        }
        else
        {
          long long v30 = 0;
        }
        unint64_t v31 = (int *)&v30[4 * v26];
        int *v31 = v21;
        __n128 v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *--v23;
          *--unint64_t v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        int *v23 = v21;
        __n128 v24 = v23 + 1;
      }
      a1[6] = v24;
      int v33 = *fst::TropicalWeightTpl<float>::Zero();
      float v35 = (int *)a1[9];
      unint64_t v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        int v37 = (int *)*v7;
        uint64_t v38 = ((char *)v35 - (unsigned char *)*v7) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          long long v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 10), v41);
          int v37 = (int *)a1[8];
          float v35 = (int *)a1[9];
        }
        else
        {
          long long v42 = 0;
        }
        long long v43 = (int *)&v42[4 * v38];
        *long long v43 = v33;
        float v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *--v35;
          *--long long v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        int *v35 = v33;
        float v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
      uint64_t v5 = a1[1];
      long long v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  }
  if (*((unsigned char *)a1 + 33))
  {
    long long v45 = (char *)a1[14];
    long long v46 = (char *)a1[15];
    unint64_t v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      unint64_t v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          unint64_t v50 = v47 + 1;
          if ((v47 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = *v48 - (void)v45;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            float v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v52);
            long long v45 = (char *)a1[14];
            long long v46 = (char *)a1[15];
          }
          else
          {
            float v53 = 0;
          }
          float v54 = &v53[4 * v47];
          *(_DWORD *)float v54 = -1;
          uint64_t v49 = v54 + 4;
          while (v46 != v45)
          {
            int v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            long long v45 = (char *)a1[14];
          }
          else
          {
            long long v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)long long v46 = -1;
          uint64_t v49 = v46 + 4;
        }
        a1[15] = v49;
        unint64_t v47 = (v49 - v45) >> 2;
        long long v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(void *)a1[1] + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  uint64_t v56 = a1[5];
  uint64_t v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  uint64_t v57 = a1[8];
  char v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  *(void *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  uint64_t v182 = (uint64_t)(a1 + 10);
  uint64_t v183 = (uint64_t)(a1 + 7);
  float v58 = a1 + 16;
  uint64_t v181 = (char *)a1 + 140;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_265;
    }
    int v60 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v61 = v60;
    while (1)
    {
      uint64_t v62 = (int **)a1[1];
      int v63 = v62 + 1;
      if (v61 < v62[1] - *v62) {
        break;
      }
      unint64_t v64 = fst::TropicalWeightTpl<float>::Zero();
      unint64_t v65 = v64;
      unint64_t v66 = (unint64_t)v62[2];
      uint64_t v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v69 = *v62;
        uint64_t v70 = v67 - *v62;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v66 - (void)v69;
        if (v72 >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          BOOL v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 2), v73);
          uint64_t v67 = *v63;
          uint64_t v69 = *v62;
        }
        else
        {
          BOOL v74 = 0;
        }
        int v75 = (int *)&v74[4 * v70];
        *int v75 = *v65;
        int v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *--v67;
          *--int v75 = v76;
        }
        *uint64_t v62 = v75;
        *int v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *uint64_t v67 = *v64;
        int v68 = v67 + 1;
      }
      *int v63 = v68;
      int v77 = *fst::TropicalWeightTpl<float>::Zero();
      float v79 = (int *)a1[6];
      unint64_t v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        uint64_t v81 = (int *)*v184;
        uint64_t v82 = ((char *)v79 - (unsigned char *)*v184) >> 2;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v84 = v78 - (void)v81;
        if (v84 >> 1 > v83) {
          unint64_t v83 = v84 >> 1;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v85);
          uint64_t v81 = (int *)a1[5];
          float v79 = (int *)a1[6];
        }
        else
        {
          uint64_t v86 = 0;
        }
        uint64_t v87 = (int *)&v86[4 * v82];
        *uint64_t v87 = v77;
        int v80 = v87 + 1;
        while (v79 != v81)
        {
          int v88 = *--v79;
          *--uint64_t v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81) {
          operator delete(v81);
        }
      }
      else
      {
        *float v79 = v77;
        int v80 = v79 + 1;
      }
      a1[6] = v80;
      int v89 = *fst::TropicalWeightTpl<float>::Zero();
      unint64_t v91 = (int *)a1[9];
      unint64_t v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        long long v93 = (int *)*v186;
        uint64_t v94 = ((char *)v91 - (unsigned char *)*v186) >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          goto LABEL_275;
        }
        uint64_t v96 = v90 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          char v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v97);
          long long v93 = (int *)a1[8];
          unint64_t v91 = (int *)a1[9];
        }
        else
        {
          char v98 = 0;
        }
        uint64_t v99 = (int *)&v98[4 * v94];
        *uint64_t v99 = v89;
        uint64_t v92 = v99 + 1;
        while (v91 != v93)
        {
          int v100 = *--v91;
          *--uint64_t v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *unint64_t v91 = v89;
        uint64_t v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v190);
      uint64_t v101 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v187) = v190;
      HIDWORD(v190) = 0;
      HIDWORD(v190) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_265:
        ++*((_DWORD *)a1 + 34);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, __n128))(*(void *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result) {
          return result;
        }
LABEL_269:
        *uint64_t v181 = 1;
        return result;
      }
    }
    *(void *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    uint64_t v102 = a1[8];
    float v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *fst::TropicalWeightTpl<float>::Zero();
    uint64_t v104 = *a1;
    long long v187 = 0u;
    long long v188 = 0u;
    unint64_t v189 = 0;
    (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if ((void)v187)
      {
        if ((*(uint64_t (**)(void))(*(void *)v187 + 16))(v187)) {
          goto LABEL_257;
        }
        if ((void)v187)
        {
          uint64_t v105 = (*(uint64_t (**)(void))(*(void *)v187 + 24))(v187);
          goto LABEL_141;
        }
      }
      else if (v189 >= (unint64_t)v188)
      {
LABEL_257:
        char v179 = 1;
        goto LABEL_259;
      }
      uint64_t v105 = *((void *)&v187 + 1) + 16 * v189;
LABEL_141:
      uint64_t v106 = a1[1];
      char v107 = (int **)(v106 + 8);
      for (unint64_t i = *(int *)(v105 + 12); i >= (uint64_t)(*(void *)(v106 + 8) - *(void *)v106) >> 2; unint64_t i = *(int *)(v105 + 12))
      {
        uint64_t v109 = fst::TropicalWeightTpl<float>::Zero();
        uint64_t v110 = v109;
        char v111 = *v107;
        unint64_t v112 = *(void *)(v106 + 16);
        if ((unint64_t)*v107 >= v112)
        {
          uint64_t v114 = *(int **)v106;
          uint64_t v115 = ((uint64_t)v111 - *(void *)v106) >> 2;
          unint64_t v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v117 = v112 - (void)v114;
          if (v117 >> 1 > v116) {
            unint64_t v116 = v117 >> 1;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v106 + 16, v118);
            char v111 = *v107;
            uint64_t v114 = *(int **)v106;
          }
          else
          {
            uint64_t v119 = 0;
          }
          char v120 = (int *)&v119[4 * v115];
          *char v120 = *v110;
          uint64_t v113 = v120 + 1;
          while (v111 != v114)
          {
            int v121 = *--v111;
            *--char v120 = v121;
          }
          *(void *)uint64_t v106 = v120;
          *char v107 = v113;
          *(void *)(v106 + 16) = &v119[4 * v118];
          if (v114) {
            operator delete(v114);
          }
        }
        else
        {
          *char v111 = *v109;
          uint64_t v113 = v111 + 1;
        }
        *char v107 = v113;
        int v122 = *fst::TropicalWeightTpl<float>::Zero();
        char v124 = (int *)a1[6];
        unint64_t v123 = a1[7];
        if ((unint64_t)v124 >= v123)
        {
          uint64_t v126 = (int *)*v184;
          uint64_t v127 = ((char *)v124 - (unsigned char *)*v184) >> 2;
          unint64_t v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v129 = v123 - (void)v126;
          if (v129 >> 1 > v128) {
            unint64_t v128 = v129 >> 1;
          }
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v130 = v128;
          }
          if (v130)
          {
            Swift::String_optional v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v130);
            uint64_t v126 = (int *)a1[5];
            char v124 = (int *)a1[6];
          }
          else
          {
            Swift::String_optional v131 = 0;
          }
          uint64_t v132 = (int *)&v131[4 * v127];
          *uint64_t v132 = v122;
          uint64_t v125 = v132 + 1;
          while (v124 != v126)
          {
            int v133 = *--v124;
            *--uint64_t v132 = v133;
          }
          a1[5] = v132;
          a1[6] = v125;
          a1[7] = &v131[4 * v130];
          if (v126) {
            operator delete(v126);
          }
        }
        else
        {
          *char v124 = v122;
          uint64_t v125 = v124 + 1;
        }
        a1[6] = v125;
        int v134 = *fst::TropicalWeightTpl<float>::Zero();
        uint64_t v136 = (int *)a1[9];
        unint64_t v135 = a1[10];
        if ((unint64_t)v136 >= v135)
        {
          uint64_t v138 = (int *)*v186;
          uint64_t v139 = ((char *)v136 - (unsigned char *)*v186) >> 2;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v141 = v135 - (void)v138;
          if (v141 >> 1 > v140) {
            unint64_t v140 = v141 >> 1;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            uint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v142);
            uint64_t v138 = (int *)a1[8];
            uint64_t v136 = (int *)a1[9];
          }
          else
          {
            uint64_t v143 = 0;
          }
          Swift::String_optional v144 = (int *)&v143[4 * v139];
          *Swift::String_optional v144 = v134;
          char v137 = v144 + 1;
          while (v136 != v138)
          {
            int v145 = *--v136;
            *--Swift::String_optional v144 = v145;
          }
          a1[8] = v144;
          a1[9] = v137;
          a1[10] = &v143[4 * v142];
          if (v138) {
            operator delete(v138);
          }
        }
        else
        {
          *uint64_t v136 = v134;
          char v137 = v136 + 1;
        }
        a1[9] = v137;
        BYTE4(v190) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 11), (unsigned char *)&v190 + 4);
        uint64_t v106 = a1[1];
        char v107 = (int **)(v106 + 8);
      }
      if (*((unsigned char *)a1 + 33))
      {
        char v146 = (char *)a1[14];
        char v147 = (char *)a1[15];
        unint64_t v148 = (v147 - v146) >> 2;
        if (v148 <= (int)i)
        {
          do
          {
            if ((unint64_t)v147 >= *v58)
            {
              unint64_t v151 = v148 + 1;
              if ((v148 + 1) >> 62) {
                std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v152 = *v58 - (void)v146;
              if (v152 >> 1 > v151) {
                unint64_t v151 = v152 >> 1;
              }
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v151;
              }
              if (v153)
              {
                uint64_t v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v153);
                char v146 = (char *)a1[14];
                char v147 = (char *)a1[15];
              }
              else
              {
                uint64_t v154 = 0;
              }
              uint64_t v155 = &v154[4 * v148];
              *(_DWORD *)uint64_t v155 = -1;
              char v150 = v155 + 4;
              while (v147 != v146)
              {
                int v156 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              a1[14] = v155;
              a1[15] = v150;
              a1[16] = &v154[4 * v153];
              if (v146)
              {
                operator delete(v146);
                char v146 = (char *)a1[14];
              }
              else
              {
                char v146 = v155;
              }
            }
            else
            {
              *(_DWORD *)char v147 = -1;
              char v150 = v147 + 4;
            }
            a1[15] = v150;
            unint64_t v148 = (v150 - v146) >> 2;
            int v157 = *(_DWORD *)(v105 + 12);
            char v147 = v150;
          }
          while (v148 <= v157);
          uint64_t v149 = v157;
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
        else
        {
          uint64_t v149 = (int)i;
        }
        if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
        {
          uint64_t v158 = fst::TropicalWeightTpl<float>::Zero();
          uint64_t v159 = *(int *)(v105 + 12);
          *(_DWORD *)(*(void *)a1[1] + 4 * v159) = *v158;
          uint64_t v160 = a1[5];
          *(_DWORD *)(v160 + 4 * v159) = *fst::TropicalWeightTpl<float>::Zero();
          uint64_t v161 = *(int *)(v105 + 12);
          unint64_t i = (unint64_t)*v186;
          *(_DWORD *)(i + 4 * v161) = *fst::TropicalWeightTpl<float>::Zero();
          unint64_t v162 = *(int *)(v105 + 12);
          *(void *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
          *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
      }
      uint64_t v163 = *(void *)a1[1];
      uint64_t v164 = a1[5];
      uint64_t v165 = a1[8];
      if (v103 == -INFINITY || (float v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
      {
        float v167 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        BOOL v168 = v166 == INFINITY || v103 == INFINITY;
        float v169 = v103 + v166;
        float v167 = v168 ? INFINITY : v169;
      }
      float v170 = *(float *)(v163 + 4 * (int)i);
      if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
      {
        float v171 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        float v170 = *(float *)(v163 + 4 * (int)i);
      }
      else
      {
        float v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
      }
      float v172 = *((float *)a1 + 7);
      float v173 = v171 + v172;
      float v174 = v172 + v170;
      if (v170 > v173 || v171 > v174) {
        break;
      }
LABEL_254:
      if ((void)v187) {
        (*(void (**)(void))(*(void *)v187 + 32))(v187);
      }
      else {
        ++v189;
      }
    }
    float v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v176 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v176 >= v167)
    {
      float v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    float v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v177 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v177 >= v167)
    {
      float v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      uint64_t v178 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)))
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_254;
    }
    char v179 = 0;
    *uint64_t v181 = 1;
LABEL_259:
    uint64_t result = v187;
    if ((void)v187)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v187 + 8))(v187);
    }
    else if (*((void *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_23AC0EB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

void *fst::internal::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[11];
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  return a1;
}

void *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(void *a1)
{
  _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v3);
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ImplToMutableFst(a1, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a1 = &unk_26EE2D300;
  return a1;
}

void sub_23AC0EC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ImplToMutableFst(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[1] = v4;
  a1[2] = v3;
  *a1 = &unk_26EE2D710;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *a1 = &unk_26EE2D5E8;
  return a1;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFst(void *a1)
{
  *a1 = &unk_26EE2D838;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

float fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<S0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *(float **)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2);
  float result = *v3;
  *a3 = *(_DWORD *)v3;
  return result;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    long long v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 56) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 64) - *(void *)(*(void *)(a1 + 8) + 56)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>(a2, &v7);
    uint64_t v4 = v7;
    uint64_t v3 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return a1;
}

unint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 80) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  *(void *)(v4 + 8) = result & 0xCCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

float fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetFinal(v6, a2, (float *)&v8);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a3 & 4) != (a3 & 4 & a2)) {
    fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 16))(v2) & 0xEAFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x806A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && !*(void *)(v2 + 8))
  {
    unint64_t v10 = *(void **)(a1 + 8);
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v10);
    uint64_t result = (*(uint64_t (**)(void *))(*v10 + 16))(v10);
    v10[1] = (*((_DWORD *)v10 + 2) | result) & 4 | 0x956A5A950003;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v4 = *(void *)(v3 + 48);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v11);
    uint64_t v7 = v11;
    uint64_t v6 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v6;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(*(void *)(a1 + 8), v5);
    return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(*(void *)(a1 + 8), v4);
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(*(void **)(v6[7] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 16))(v6);
  v6[1] = v6[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(v4[7] + 8 * a2);
  v5[1] = 0;
  uint64_t v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
  v4[1] = v4[1] & 4 | result & 0x8A6A5A950007;
  return result;
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 56);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(v4, a2);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * a2) + 24);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitMutableArcIterator()
{
}

void sub_23AC0F6C8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEEC2B8ne180100IJESF_Li0EEESF_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_23AC0F724(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN3fst8internal13VectorFstImplINS1_11VectorStateINS1_10ReverseArcINS1_6ArcTplINS1_17TropicalWeightTplIfEEEEEENS_9allocatorISA_EEEEEENSB_ISE_EEEC2B8ne180100IJESF_Li0EEESF_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2D4C8;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl((uint64_t)(a1 + 3));
  return a1;
}

void sub_23AC0F780(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2D4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2D4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2D5B8;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)a1 = &unk_26EE2D518;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x956A5A950003;
  return a1;
}

void sub_23AC0F904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_26EE2D588;
  uint64_t v2 = (void **)a1[8];
  if (v2 != (void **)a1[7])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[7];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[7];
    }
    while (v3 < (uint64_t)(a1[8] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl((uint64_t)a1);
}

void fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstImpl(void *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

void fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2D5B8;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *__p[2];
  char v10;
  BOOL v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  LogMessage::LogMessage(&v11, (uint64_t)__p);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" FST type", 9);
  LogMessage::~LogMessage((LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_23AC0FC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23AC0FD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      LogMessage::LogMessage(&v12, (uint64_t)__p);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"TestProperties: stored FST properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (stored: props1, computed: props2)", 35);
      LogMessage::~LogMessage((LogMessage *)&v12);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 1);
  }
}

void sub_23AC0FED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 0xFFFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (a4)
  {
    uint64_t v10 = v8 & 0xFFFFFFFF0000 | (2 * v8) & 0xAAAAAAAA0000 | (v8 >> 1) & 0x555555550000 | 7;
    if ((a2 & ~v10) == 0)
    {
      if (a3) {
        *a3 = v10;
      }
      return v9;
    }
  }
  unint64_t v9 = v8 & 7;
  uint64_t v47 = 0;
  unint64_t v48 = v9;
  long long v45 = 0;
  long long v46 = 0;
  uint64_t v11 = a2 & 0xCF3C00000000;
  if ((a2 & 0xCF3C00000000) != 0)
  {
    long long v40 = (unint64_t)&v45;
    *(void *)&long long v41 = 0;
    *((void *)&v41 + 1) = &v48;
    long long v43 = 0u;
    long long v44 = 0u;
    fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, (uint64_t)&v40);
  }
  if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
    goto LABEL_92;
  }
  uint64_t v34 = a2 & 0xC0000;
  uint64_t v35 = 0;
  uint64_t v12 = 0x10425A810000;
  if ((a2 & 0xC0000) != 0) {
    uint64_t v12 = 0x10425A850000;
  }
  unint64_t v13 = v9 | v12;
  uint64_t v33 = a2 & 0x300000;
  if ((a2 & 0x300000) != 0) {
    v13 |= 0x100000uLL;
  }
  unint64_t v48 = v13;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  int v36 = 0;
  unsigned int v37 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v35);
  int v14 = 0;
LABEL_13:
  if (!v35)
  {
    if ((int)v37 >= v36) {
      goto LABEL_84;
    }
    goto LABEL_18;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v35 + 16))(v35))
  {
    if (v35)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v35 + 24))();
LABEL_19:
      if (v34) {
        operator new();
      }
      if (v33) {
        operator new();
      }
      unint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v40);
      char v16 = 1;
      while ((void)v40)
      {
        if ((*(unsigned int (**)(void))(*(void *)v40 + 16))(v40))
        {
          if ((void)v40)
          {
            (*(void (**)(void))(*(void *)v40 + 8))();
            goto LABEL_71;
          }
LABEL_69:
          if (*((void *)&v41 + 1)) {
            --**((_DWORD **)&v41 + 1);
          }
LABEL_71:
          if (v14 > 0) {
            unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v49, a1, v15);
          unint64_t v27 = fst::TropicalWeightTpl<float>::Zero();
          LODWORD(v40) = v49;
          HIDWORD(v49) = 0;
          HIDWORD(v49) = *v27;
          if (*(float *)&v49 == *((float *)&v49 + 1))
          {
            if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 32))(a1, v15, *(float *)&v49) != 1) {
              unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            }
          }
          else
          {
            uint64_t v28 = fst::TropicalWeightTpl<float>::One();
            LODWORD(v40) = v49;
            HIDWORD(v49) = 0;
            HIDWORD(v49) = *v28;
            v29.n128_u32[0] = v49;
            if (*(float *)&v49 != *((float *)&v49 + 1)) {
              unint64_t v48 = v48 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
            }
            ++v14;
          }
          if (v35) {
            (*(void (**)(uint64_t, __n128))(*(void *)v35 + 32))(v35, v29);
          }
          else {
            ++v37;
          }
          goto LABEL_13;
        }
        if (!(void)v40) {
          goto LABEL_29;
        }
        unint64_t v17 = (int *)(*(uint64_t (**)(void))(*(void *)v40 + 24))();
LABEL_30:
        if (v39 && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v39, v17)) {
          unint64_t v48 = v48 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
        }
        if (v38
          && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v38, v17 + 1))
        {
          unint64_t v48 = v48 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
        }
        int v18 = *v17;
        int v19 = *v17;
        if (*v17 != v17[1])
        {
          unint64_t v48 = v48 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
          int v19 = v17[1];
        }
        if (v18 | v19)
        {
          if (v18)
          {
            if (!v19) {
              goto LABEL_46;
            }
            goto LABEL_42;
          }
          unint64_t v20 = v48;
        }
        else
        {
          unint64_t v20 = v48 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
        }
        unint64_t v48 = v20 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
        if (!v19)
        {
LABEL_46:
          unint64_t v48 = v48 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if (v16) {
            goto LABEL_51;
          }
          goto LABEL_47;
        }
LABEL_42:
        if (v16) {
          goto LABEL_51;
        }
LABEL_47:
        if (v18 < (int)v11) {
          unint64_t v48 = v48 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
        }
        if (v19 < SHIDWORD(v11)) {
          unint64_t v48 = v48 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
        }
LABEL_51:
        int v21 = fst::TropicalWeightTpl<float>::One();
        HIDWORD(v49) = 0;
        HIDWORD(v49) = v17[2];
        LODWORD(v49) = 0;
        LODWORD(v49) = *v21;
        v22.n128_u32[0] = HIDWORD(v49);
        if (*((float *)&v49 + 1) != *(float *)&v49)
        {
          uint64_t v23 = fst::TropicalWeightTpl<float>::Zero();
          HIDWORD(v49) = 0;
          HIDWORD(v49) = v17[2];
          LODWORD(v49) = 0;
          LODWORD(v49) = *v23;
          v22.n128_u32[0] = HIDWORD(v49);
          if (*((float *)&v49 + 1) != *(float *)&v49)
          {
            unint64_t v24 = v48;
            unint64_t v25 = v48 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
            unint64_t v48 = v25;
            if ((v24 & 0x800000000000) != 0 && v45[(int)v15] == v45[v17[3]]) {
              unint64_t v48 = v25 & 0xFFFF3FFDFFFFFFFFLL | 0x400000000000;
            }
          }
        }
        int v26 = v17[3];
        if (v26 <= (int)v15) {
          unint64_t v48 = v48 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
        }
        if (v26 != v15 + 1) {
          unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
        }
        uint64_t v11 = *(void *)v17;
        if (v39) {
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v39, v17, v17);
        }
        if (v38) {
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v38, v17 + 1, v17 + 1);
        }
        if ((void)v40)
        {
          (*(void (**)(void, __n128))(*(void *)v40 + 32))(v40, v22);
          char v16 = 0;
        }
        else
        {
          char v16 = 0;
          ++v42;
        }
      }
      if (v42 >= (unint64_t)v41) {
        goto LABEL_69;
      }
LABEL_29:
      unint64_t v17 = (int *)(*((void *)&v40 + 1) + 16 * v42);
      goto LABEL_30;
    }
LABEL_18:
    uint64_t v15 = v37;
    goto LABEL_19;
  }
  if (v35) {
    (*(void (**)(void))(*(void *)v35 + 8))();
  }
LABEL_84:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != -1
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    unint64_t v48 = v48 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
  }
  if (v38)
  {
    uint64_t v30 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v38);
    MEMORY[0x23ECC24B0](v30, 0x10A0C408EF24B1CLL);
  }
  if (v39)
  {
    uint64_t v31 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v39);
    MEMORY[0x23ECC24B0](v31, 0x10A0C408EF24B1CLL);
  }
  unint64_t v9 = v48;
LABEL_92:
  if (a3) {
    *a3 = v9 & 0xFFFFFFFF0000 | (2 * v9) & 0xAAAAAAAA0000 | (v9 >> 1) & 0x555555550000 | 7;
  }
  if (v45)
  {
    long long v46 = v45;
    operator delete(v45);
  }
  return v9;
}

void sub_23AC107C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<std::unordered_set<int>>::reset[abi:ne180100]((uint64_t *)va1, 0);
  unint64_t v9 = *(void **)(v7 - 128);
  if (v9)
  {
    *(void *)(v7 - 120) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_23AC1116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  __n128 v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 136);
    return v2(a1);
  }
  uint64_t v5 = 0;
  int v6 = 0;
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_23AC11578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>();
  }
  _Unwind_Resume(exception_object);
}

int *fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 24))(&v25);
  uint64_t result = fst::TropicalWeightTpl<float>::Zero();
  int v26 = v25;
  HIDWORD(v25) = 0;
  HIDWORD(v25) = *result;
  if (*(float *)&v25 != *((float *)&v25 + 1)) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) == *(_DWORD *)(**(void **)(a1 + 64) + 4 * a2))
  {
    char v7 = 0;
    unint64_t v8 = *(uint64_t **)(a1 + 80);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1] - *v8;
    uint64_t v11 = **(void **)(a1 + 16);
    uint64_t v12 = (int *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + v9 - 4);
    do
    {
      unint64_t v13 = *v12--;
      v7 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
    }
    while (v13 != a2);
    int v14 = *(void **)a1;
    do
    {
      uint64_t v15 = *(void *)(a1 + 80);
      uint64_t v16 = *(void *)(v15 + 8);
      unint64_t v19 = *(int *)(v16 - 4);
      uint64_t v17 = v16 - 4;
      unint64_t v18 = v19;
      if (v14) {
        *(_DWORD *)(*v14 + 4 * v18) = *(_DWORD *)(a1 + 48);
      }
      unint64_t v20 = v18 >> 6;
      uint64_t v21 = 1 << v18;
      if (v7) {
        *(void *)(v11 + 8 * v20) |= v21;
      }
      uint64_t result = **(int ***)(a1 + 72);
      *(void *)&result[2 * v20] &= ~v21;
      *(void *)(v15 + 8) = v17;
    }
    while (v18 != a2);
    if ((v7 & 1) == 0) {
      **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
    }
    ++*(_DWORD *)(a1 + 48);
  }
  if (a3 != -1)
  {
    uint64_t v22 = **(void **)(a1 + 16);
    if ((*(void *)(v22 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v22 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    uint64_t v23 = **(void **)(a1 + 64);
    int v24 = *(_DWORD *)(v23 + 4 * a2);
    if (v24 < *(_DWORD *)(v23 + 4 * a3)) {
      *(_DWORD *)(v23 + 4 * a3) = v24;
    }
  }
  return result;
}

void *fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2A998;
  a1[1] = &unk_26EE2A9C0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unsigned int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unsigned int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  __n128 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23AC11BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)long long v31 = 0u;
  *(_OWORD *)long long v32 = 0u;
  uint64_t v6 = -1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = -1;
  uint64_t v35 = (*(int (**)(void *))(*a1 + 16))(a1);
  uint64_t v36 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 1, 0)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(unsigned char *)(a3 + 28) == 0;
  }
  if (!v7)
  {
    uint64_t v6 = 0;
LABEL_6:
    int v8 = 0;
    uint64_t v36 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)a1);
    goto LABEL_9;
  }
  uint64_t v9 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v9[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v9 + 5) + 32))(__p);
    uint64_t v6 = v39;
    if (v39 != -1) {
      goto LABEL_6;
    }
  }
  int v8 = 1;
LABEL_9:
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 56))(a1, 0xFFFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v11 = v10 | 3;
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v11, (uint64_t)&v30 + 4);
  uint64_t v29 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v12 = *(void *)(a1[1] + 64) - *(void *)(a1[1] + 56);
  unint64_t v13 = v12 >> 3;
  if ((int)(v12 >> 3) < 1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = (v12 >> 3);
    do
    {
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 24))(&v30, a1, v14);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = v30;
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, v14);
      std::ostream::write();
      uint64_t v16 = *(void *)(*(void *)(a1[1] + 56) + 8 * v14);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      if (v17 == v18) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *(void *)(v16 + 24);
      }
      if (v17 != v18)
      {
        unint64_t v20 = (v18 - v17) >> 4;
        if (v20 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v20;
        }
        unint64_t v22 = (_DWORD *)(v19 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v22 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v22;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v22[1];
          std::ostream::write();
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"VectorFst::Write: Write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_33:
    LogMessage::~LogMessage((LogMessage *)&v30);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_36;
  }
  if (!v8)
  {
    if (v36 == v13)
    {
      uint64_t updated = 1;
      goto LABEL_36;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    LogMessage::LogMessage((BOOL *)&v30, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_33;
  }
  uint64_t v36 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v11, (uint64_t)&v30 + 4, v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_36:
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(v31[0]);
  }
  return updated;
}

void sub_23AC120F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    unint64_t v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + --*(_DWORD *)(a9 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 144))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (result && a3[26])
  {
    unint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 144);
    return v22();
  }
  return result;
}

uint64_t fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  MEMORY[0x23ECC2300](v26);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long __p = 0u;
    long long v29 = 0u;
    uint64_t v36 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v27);
    if (v27[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x23ECC2310](v26);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v22 = *(char *)(a3 + 23);
      if (v22 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v22 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x23ECC2300](v27, a2);
      uint64_t v23 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v23[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v23 + 5) + 32))(&__p);
        if (v36 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x23ECC2310](v27);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage((BOOL *)v27, (uint64_t)&__p);
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::UpdateFstHeader: Write failed: ", 36);
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v24 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
  LogMessage::~LogMessage((LogMessage *)v27);
  if (SBYTE7(v29) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_23AC1272C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type(void)::type;
}

void sub_23AC12820(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFile(uint64_t a1, uint64_t a2)
{
  v28[19] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::ofstream::basic_ofstream((uint64_t *)&v22);
    if ((v27[*(void *)(v22.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      LogMessage::LogMessage(&v21, (uint64_t)&__p);
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write: Can't open file: ", 29);
      int v6 = *(char *)(a2 + 23);
      if (v6 >= 0) {
        BOOL v7 = (const std::string::value_type *)a2;
      }
      else {
        BOOL v7 = *(const std::string::value_type **)a2;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      goto LABEL_31;
    }
    char v10 = FLAGS_fst_align;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    __int16 v17 = 257;
    char v18 = 1;
    char v19 = v10;
    char v20 = 0;
    char v12 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)a1 + 80))(a1, &v22, &__p);
    char v13 = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v13) {
        goto LABEL_23;
      }
    }
    else if (v12)
    {
LABEL_23:
      uint64_t v11 = 1;
LABEL_34:
      v22.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
      *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words
                                + *(void *)(v22.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                                  + 24);
      MEMORY[0x23ECC22C0](&v22.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x23ECC2440](v28);
      return v11;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    LogMessage::LogMessage(&v21, (uint64_t)&__p);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Fst::Write failed: ", 19);
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      BOOL v7 = (const std::string::value_type *)a2;
    }
    else {
      BOOL v7 = *(const std::string::value_type **)a2;
    }
    if (v14 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
LABEL_31:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    LogMessage::~LogMessage((LogMessage *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = 0;
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v9 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v22 = __p;
  }
  __int16 v23 = 257;
  char v24 = 1;
  char v25 = v9;
  char v26 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, std::string *))(*(void *)a1 + 80))(a1, MEMORY[0x263F8C100], &v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_23AC12BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_23AC12CA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2D4C8;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_23AC12CFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26EE2D5B8;
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = (void *)(a1 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)a1 = &unk_26EE2D518;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  std::string::operator=(v4, (const std::string *)__p);
  if (SBYTE7(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  fst::internal::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2);
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 56), v8);
  }
  uint64_t v17 = 0;
  int v18 = 0;
  unsigned int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 112))(a2, &v17);
  while (1)
  {
    if (!v17)
    {
      if ((int)v19 >= v18) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v19;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      break;
    }
    if (!v17) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v17 + 24))();
LABEL_12:
    fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState((void *)a1);
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&v16, a2, v9);
    **(_DWORD **)(*v5 + 8 * (int)v9) = v16;
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    unint64_t v15 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v14 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 120))(a2, v9, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v15 >= (unint64_t)v14) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (char *)__p[1] + 16 * v15;
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 16))(__p[0])) {
        break;
      }
      if (!__p[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p[0] + 24))();
LABEL_19:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(void *)__p[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (*((void *)&v14 + 1)) {
      --**((_DWORD **)&v14 + 1);
    }
LABEL_26:
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v17) {
    (*(void (**)(void))(*(void *)v17 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0xFFFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_23AC131F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v3, a2);
    int v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    unint64_t v10 = (char *)__p + 16 * v6;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      v9 += (v8 - v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_23AC1335C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[1];
  }
  if (!a2[1]) {
    ++a1[2];
  }
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&>(a1 + 3, (uint64_t)a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(_DWORD *)(v3 + 8) = a2[2];
    *(_DWORD *)(v3 + 12) = a2[3];
    uint64_t result = v3 + 16;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v19 = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v7, v9);
  uint64_t v11 = &v10[16 * v4];
  std::string __p = v10;
  int v16 = v11;
  int v18 = &v10[16 * v12];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  uint64_t v17 = v11 + 16;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    v17 += (v16 - v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_23AC13508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2 || *(void *)(v2 + 8))
  {
    std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,void>(a1, &v6);
    uint64_t v4 = v6;
    uint64_t v3 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void *std::allocate_shared[abi:ne180100]<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_23AC13600(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> &,std::allocator<fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2D4C8;
  fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_23AC1365C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

float fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetFinal(void *a1, int a2, float *a3)
{
  int v9 = **(_DWORD **)(a1[7] + 8 * a2);
  unint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v7 = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v6, (float *)&v9, a3);
  float result = *a3;
  **(float **)(a1[7] + 8 * a2) = *a3;
  a1[1] = a1[1] & 4 | v7;
  return result;
}

uint64_t fst::internal::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[7] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[7] + 8 * a2) + 24)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v8, a2, a3, v7);
  int v9 = *(void **)(a1[7] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(v9, a3);
}

void fst::internal::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 56);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v36, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v36.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v36.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v36.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 56);
    }
    while (v12 < (*(void *)(a1 + 64) - v11) >> 3);
  }
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v18 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v21 = v18 - v17;
      BOOL v20 = v18 == v17;
      if (v18 == v17) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)(v16 + 24);
      }
      if (v20)
      {
        int64x2_t v34 = *(int64x2_t *)(v16 + 8);
        uint64_t v24 = 0;
        uint64_t v31 = v21 >> 4;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
        char v25 = (int *)(v22 + 12);
        do
        {
          int v26 = v36.__begin_[*v25];
          if (v26 == -1)
          {
            uint64_t v28 = *(void *)(v25 - 3);
            v29.i64[0] = v28;
            v29.i64[1] = HIDWORD(v28);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v29));
          }
          else
          {
            *char v25 = v26;
            if (v23 != v24)
            {
              uint64_t v27 = v22 + 16 * v24;
              *(void *)uint64_t v27 = *(void *)(v25 - 3);
              *(_DWORD *)(v27 + 8) = *(v25 - 1);
              *(_DWORD *)(v27 + 12) = v26;
              uint64_t v14 = *v4;
            }
            ++v24;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v23;
          uint64_t v30 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v25 += 4;
        }
        while (v23 < v30 >> 4);
        int64x2_t v34 = v19;
        uint64_t v31 = v30 >> 4;
      }
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs((void *)v16, v31 - v24);
      uint64_t v14 = *(void *)(a1 + 56);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v34;
    }
    while (v15 < (*(void *)(a1 + 64) - v14) >> 3);
  }
  uint64_t v32 = *(int *)(a1 + 80);
  if (v32 == -1)
  {
    long long v33 = v36.__begin_;
    if (!v36.__begin_) {
      return;
    }
  }
  else
  {
    long long v33 = v36.__begin_;
    *(_DWORD *)(a1 + 80) = v36.__begin_[v32];
  }
  v36.__end_ = v33;
  operator delete(v33);
}

void sub_23AC139C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~MutableArcIterator()
{
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Done(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Next(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Position(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Reset(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Seek(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Flags()
{
  return 15;
}

int *fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v6 = (int *)(v5 + 16 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (v7 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      int v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      *int v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    int v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *int v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 16 * v4;
  int v13 = fst::TropicalWeightTpl<float>::Zero();
  float v15 = *(float *)(v12 + 8);
  uint64_t v14 = (float *)(v12 + 8);
  if (v15 != *(float *)v13 && *v14 != *(float *)fst::TropicalWeightTpl<float>::One()) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(*(void **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v16 = *(_DWORD *)a2;
  int v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(unint64_t **)(a1 + 16);
      unint64_t v19 = *v18;
LABEL_19:
      unint64_t *v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v18 = *(unint64_t **)(a1 + 16);
    unint64_t v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    unint64_t *v18 = v20;
    if (!v17)
    {
      unint64_t v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      unint64_t *v18 = v19;
      goto LABEL_19;
    }
  }
  float result = fst::TropicalWeightTpl<float>::Zero();
  if (*(float *)(a2 + 8) != *(float *)result)
  {
    float result = fst::TropicalWeightTpl<float>::One();
    if (*(float *)(a2 + 8) != *(float *)result) {
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
    }
  }
  **(void **)(a1 + 16) &= 0x30FC30007uLL;
  return result;
}

void fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_26EE2CFD8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = (void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v8 = 0;
        __p[0] = v3;
        __p[1] = 0;
        __p[2] = 0;
        __p[3] = &v8;
        long long v6 = 0u;
        long long v7 = 0u;
        fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a2, (uint64_t)__p);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_23AC1476C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  LogMessage::~LogMessage((LogMessage *)&a17);
  if (a14 < 0)
  {
    operator delete(__p);
    if (v28)
    {
LABEL_10:
      MEMORY[0x23ECC24B0](v28, 0x60C405BB7FD7CLL);
      if (!v29)
      {
LABEL_7:
        if (a18)
        {
          a19 = (uint64_t)a18;
          operator delete(a18);
        }
        fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~SccVisitor(&a21);
        uint64_t v32 = *v27;
        if (*v27)
        {
          *(void *)(v26 + 56) = v32;
          operator delete(v32);
        }
        std::vector<std::unique_ptr<fst::QueueBase<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        uint64_t v33 = *v30;
        uint64_t *v30 = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        _Unwind_Resume(a1);
      }
LABEL_6:
      MEMORY[0x23ECC24B0](v29, 0xC400A2AC0F1);
      goto LABEL_7;
    }
  }
  else if (v28)
  {
    goto LABEL_10;
  }
  if (!v29) {
    goto LABEL_7;
  }
  goto LABEL_6;
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>,void>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  uint64_t v32 = 0;
  int v33 = 0;
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 112))(a1, &v32);
  while (1)
  {
    uint64_t result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
    uint64_t result = v32;
    if (v14) {
      break;
    }
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_12:
    unint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v15, &v29);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!(void)v29)
      {
        if (v31 >= (unint64_t)v30) {
          goto LABEL_38;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v29 + 16))(v29)) {
        break;
      }
      if ((void)v29)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v29 + 24))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = *((void *)&v29 + 1) + 16 * v31;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        unint64_t v19 = *(_DWORD **)a3;
        if (!a4
          || (unint64_t v20 = fst::TropicalWeightTpl<float>::One(),
              uint64_t v21 = (float *)(v17 + 8),
              fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(a4, (float *)(v17 + 8), (float *)v20)))
        {
          int v22 = 1;
          goto LABEL_23;
        }
        if ((v19[v18] | 2) == 2)
        {
          uint64_t v26 = fst::TropicalWeightTpl<float>::Zero();
          float v36 = 0.0;
          float v36 = *v21;
          float v35 = 0.0;
          float v35 = *(float *)v26;
          if (v36 == v35
            || (uint64_t v27 = fst::TropicalWeightTpl<float>::One(),
                float v36 = 0.0,
                float v36 = *v21,
                float v35 = 0.0,
                float v35 = *(float *)v27,
                v36 == v35))
          {
            int v22 = 2;
          }
          else
          {
            int v22 = 3;
          }
LABEL_23:
          v19[v18] = v22;
        }
        *a5 = 0;
      }
      unint64_t v23 = fst::TropicalWeightTpl<float>::Zero();
      float v36 = 0.0;
      float v36 = *(float *)(v17 + 8);
      float v35 = 0.0;
      float v35 = *(float *)v23;
      v24.n128_f32[0] = v36;
      if (v36 != v35)
      {
        char v25 = fst::TropicalWeightTpl<float>::One();
        float v36 = 0.0;
        float v36 = *(float *)(v17 + 8);
        float v35 = 0.0;
        float v35 = *(float *)v25;
        v24.n128_f32[0] = v36;
        if (v36 != v35) {
          *a6 = 0;
        }
      }
      if ((void)v29) {
        (*(void (**)(void, __n128))(*(void *)v29 + 32))(v29, v24);
      }
      else {
        ++v31;
      }
    }
    if ((void)v29)
    {
      (*(void (**)(void))(*(void *)v29 + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (*((void *)&v30 + 1)) {
      --**((_DWORD **)&v30 + 1);
    }
LABEL_40:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    return (*(uint64_t (**)(void))(*(void *)v32 + 8))();
  }
  return result;
}

void sub_23AC14D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_26EE2D0B8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v4 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v4;
  uint64_t v3 = 0;
  fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>();
}

void sub_23AC14F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::default_delete<std::vector<int>>::operator()[abi:ne180100](v23, a21);
  }
  uint64_t v26 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 56) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v24;
  if (*v24)
  {
    *(void *)(v21 + 32) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>()
{
}

void sub_23AC15890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__list_imp<std::unique_ptr<char []>>::clear(&a23);
  std::deque<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::internal::DfsState<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::~deque[abi:ne180100](&a27);
  long long v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::internal::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 56))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    uint64_t v181 = (char *)a1 + 140;
    goto LABEL_269;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = a1[8];
    a1[12] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = a1[1];
  long long v6 = (int **)(v5 + 8);
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2))
  {
    char v185 = (void **)(a1 + 5);
    long long v7 = (void **)(a1 + 8);
    do
    {
      uint64_t v8 = fst::TropicalWeightTpl<float>::Zero();
      int v9 = v8;
      unint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(int **)(v5 + 8);
      if ((unint64_t)v11 >= v10)
      {
        int v13 = *(int **)v5;
        uint64_t v14 = ((uint64_t)v11 - *(void *)v5) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5 + 16, v17);
          uint64_t v11 = *v6;
          int v13 = *(int **)v5;
        }
        else
        {
          uint64_t v18 = 0;
        }
        unint64_t v19 = (int *)&v18[4 * v14];
        int *v19 = *v9;
        unint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *--v11;
          *--unint64_t v19 = v20;
        }
        *(void *)uint64_t v5 = v19;
        int *v6 = v12;
        *(void *)(v5 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = *v8;
        unint64_t v12 = v11 + 1;
      }
      int *v6 = v12;
      int v21 = *fst::TropicalWeightTpl<float>::Zero();
      uint64_t v23 = (int *)a1[6];
      unint64_t v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        char v25 = (int *)*v185;
        uint64_t v26 = ((char *)v23 - (unsigned char *)*v185) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_275:
        }
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
          char v25 = (int *)a1[5];
          uint64_t v23 = (int *)a1[6];
        }
        else
        {
          long long v30 = 0;
        }
        unint64_t v31 = (int *)&v30[4 * v26];
        int *v31 = v21;
        __n128 v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *--v23;
          *--unint64_t v31 = v32;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        int *v23 = v21;
        __n128 v24 = v23 + 1;
      }
      a1[6] = v24;
      int v33 = *fst::TropicalWeightTpl<float>::Zero();
      float v35 = (int *)a1[9];
      unint64_t v34 = a1[10];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = (int *)*v7;
        uint64_t v38 = ((char *)v35 - (unsigned char *)*v7) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 10), v41);
          uint64_t v37 = (int *)a1[8];
          float v35 = (int *)a1[9];
        }
        else
        {
          uint64_t v42 = 0;
        }
        long long v43 = (int *)&v42[4 * v38];
        *long long v43 = v33;
        float v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *--v35;
          *--long long v43 = v44;
        }
        a1[8] = v43;
        a1[9] = v36;
        a1[10] = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        int *v35 = v33;
        float v36 = v35 + 1;
      }
      a1[9] = v36;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
      uint64_t v5 = a1[1];
      long long v6 = (int **)(v5 + 8);
    }
    while (v4 >= (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v45 = (char *)a1[14];
    unint64_t v46 = (char *)a1[15];
    unint64_t v47 = (v46 - v45) >> 2;
    if (v47 <= v4)
    {
      unint64_t v48 = a1 + 16;
      do
      {
        if ((unint64_t)v46 >= *v48)
        {
          unint64_t v50 = v47 + 1;
          if ((v47 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = *v48 - (void)v45;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            float v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v52);
            uint64_t v45 = (char *)a1[14];
            unint64_t v46 = (char *)a1[15];
          }
          else
          {
            float v53 = 0;
          }
          long long v54 = &v53[4 * v47];
          *(_DWORD *)long long v54 = -1;
          uint64_t v49 = v54 + 4;
          while (v46 != v45)
          {
            int v55 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          a1[14] = v54;
          a1[15] = v49;
          a1[16] = &v53[4 * v52];
          if (v45)
          {
            operator delete(v45);
            uint64_t v45 = (char *)a1[14];
          }
          else
          {
            uint64_t v45 = v54;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v46 = -1;
          uint64_t v49 = v46 + 4;
        }
        a1[15] = v49;
        unint64_t v47 = (v49 - v45) >> 2;
        unint64_t v46 = v49;
      }
      while (v47 <= v4);
    }
    *(_DWORD *)&v45[4 * v4] = *((_DWORD *)a1 + 34);
  }
  *(_DWORD *)(*(void *)a1[1] + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  uint64_t v56 = a1[5];
  uint64_t v184 = (void **)(a1 + 5);
  *(_DWORD *)(v56 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  uint64_t v57 = a1[8];
  char v186 = (void **)(a1 + 8);
  *(_DWORD *)(v57 + 4 * v4) = *fst::TropicalWeightTpl<float>::One();
  *(void *)(a1[11] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  uint64_t v182 = (uint64_t)(a1 + 10);
  uint64_t v183 = (uint64_t)(a1 + 7);
  float v58 = a1 + 16;
  uint64_t v181 = (char *)a1 + 140;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_265;
    }
    int v60 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v61 = v60;
    while (1)
    {
      uint64_t v62 = (int **)a1[1];
      int v63 = v62 + 1;
      if (v61 < v62[1] - *v62) {
        break;
      }
      unint64_t v64 = fst::TropicalWeightTpl<float>::Zero();
      unint64_t v65 = v64;
      unint64_t v66 = (unint64_t)v62[2];
      uint64_t v67 = v62[1];
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v69 = *v62;
        uint64_t v70 = v67 - *v62;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v66 - (void)v69;
        if (v72 >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          BOOL v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 2), v73);
          uint64_t v67 = *v63;
          uint64_t v69 = *v62;
        }
        else
        {
          BOOL v74 = 0;
        }
        int v75 = (int *)&v74[4 * v70];
        *int v75 = *v65;
        int v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *--v67;
          *--int v75 = v76;
        }
        *uint64_t v62 = v75;
        *int v63 = v68;
        v62[2] = (int *)&v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *uint64_t v67 = *v64;
        int v68 = v67 + 1;
      }
      *int v63 = v68;
      int v77 = *fst::TropicalWeightTpl<float>::Zero();
      float v79 = (int *)a1[6];
      unint64_t v78 = a1[7];
      if ((unint64_t)v79 >= v78)
      {
        uint64_t v81 = (int *)*v184;
        uint64_t v82 = ((char *)v79 - (unsigned char *)*v184) >> 2;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v84 = v78 - (void)v81;
        if (v84 >> 1 > v83) {
          unint64_t v83 = v84 >> 1;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v85);
          uint64_t v81 = (int *)a1[5];
          float v79 = (int *)a1[6];
        }
        else
        {
          uint64_t v86 = 0;
        }
        uint64_t v87 = (int *)&v86[4 * v82];
        *uint64_t v87 = v77;
        int v80 = v87 + 1;
        while (v79 != v81)
        {
          int v88 = *--v79;
          *--uint64_t v87 = v88;
        }
        a1[5] = v87;
        a1[6] = v80;
        a1[7] = &v86[4 * v85];
        if (v81) {
          operator delete(v81);
        }
      }
      else
      {
        *float v79 = v77;
        int v80 = v79 + 1;
      }
      a1[6] = v80;
      int v89 = *fst::TropicalWeightTpl<float>::Zero();
      unint64_t v91 = (int *)a1[9];
      unint64_t v90 = a1[10];
      if ((unint64_t)v91 >= v90)
      {
        long long v93 = (int *)*v186;
        uint64_t v94 = ((char *)v91 - (unsigned char *)*v186) >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          goto LABEL_275;
        }
        uint64_t v96 = v90 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          char v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v97);
          long long v93 = (int *)a1[8];
          unint64_t v91 = (int *)a1[9];
        }
        else
        {
          char v98 = 0;
        }
        uint64_t v99 = (int *)&v98[4 * v94];
        *uint64_t v99 = v89;
        uint64_t v92 = v99 + 1;
        while (v91 != v93)
        {
          int v100 = *--v91;
          *--uint64_t v99 = v100;
        }
        a1[8] = v99;
        a1[9] = v92;
        a1[10] = &v98[4 * v97];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *unint64_t v91 = v89;
        uint64_t v92 = v91 + 1;
      }
      a1[9] = v92;
      LOBYTE(v187) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 11), &v187);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v190);
      uint64_t v101 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v187) = v190;
      HIDWORD(v190) = 0;
      HIDWORD(v190) = *v101;
      v59.n128_u32[0] = v190;
      if (*(float *)&v190 != *((float *)&v190 + 1))
      {
LABEL_265:
        ++*((_DWORD *)a1 + 34);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, __n128))(*(void *)*a1 + 56))(*a1, 4, 0, v59);
        if (!result) {
          return result;
        }
LABEL_269:
        *uint64_t v181 = 1;
        return result;
      }
    }
    *(void *)(a1[11] + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v61);
    uint64_t v102 = a1[8];
    float v103 = *(float *)(v102 + 4 * v61);
    *(_DWORD *)(v102 + 4 * v61) = *fst::TropicalWeightTpl<float>::Zero();
    uint64_t v104 = *a1;
    long long v187 = 0u;
    long long v188 = 0u;
    unint64_t v189 = 0;
    (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v104 + 120))(v104, v61, &v187);
    while (1)
    {
      if ((void)v187)
      {
        if ((*(uint64_t (**)(void))(*(void *)v187 + 16))(v187)) {
          goto LABEL_257;
        }
        if ((void)v187)
        {
          uint64_t v105 = (*(uint64_t (**)(void))(*(void *)v187 + 24))(v187);
          goto LABEL_141;
        }
      }
      else if (v189 >= (unint64_t)v188)
      {
LABEL_257:
        char v179 = 1;
        goto LABEL_259;
      }
      uint64_t v105 = *((void *)&v187 + 1) + 16 * v189;
LABEL_141:
      uint64_t v106 = a1[1];
      char v107 = (int **)(v106 + 8);
      for (unint64_t i = *(int *)(v105 + 12); i >= (uint64_t)(*(void *)(v106 + 8) - *(void *)v106) >> 2; unint64_t i = *(int *)(v105 + 12))
      {
        uint64_t v109 = fst::TropicalWeightTpl<float>::Zero();
        uint64_t v110 = v109;
        char v111 = *v107;
        unint64_t v112 = *(void *)(v106 + 16);
        if ((unint64_t)*v107 >= v112)
        {
          uint64_t v114 = *(int **)v106;
          uint64_t v115 = ((uint64_t)v111 - *(void *)v106) >> 2;
          unint64_t v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v117 = v112 - (void)v114;
          if (v117 >> 1 > v116) {
            unint64_t v116 = v117 >> 1;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v106 + 16, v118);
            char v111 = *v107;
            uint64_t v114 = *(int **)v106;
          }
          else
          {
            uint64_t v119 = 0;
          }
          char v120 = (int *)&v119[4 * v115];
          *char v120 = *v110;
          uint64_t v113 = v120 + 1;
          while (v111 != v114)
          {
            int v121 = *--v111;
            *--char v120 = v121;
          }
          *(void *)uint64_t v106 = v120;
          *char v107 = v113;
          *(void *)(v106 + 16) = &v119[4 * v118];
          if (v114) {
            operator delete(v114);
          }
        }
        else
        {
          *char v111 = *v109;
          uint64_t v113 = v111 + 1;
        }
        *char v107 = v113;
        int v122 = *fst::TropicalWeightTpl<float>::Zero();
        char v124 = (int *)a1[6];
        unint64_t v123 = a1[7];
        if ((unint64_t)v124 >= v123)
        {
          uint64_t v126 = (int *)*v184;
          uint64_t v127 = ((char *)v124 - (unsigned char *)*v184) >> 2;
          unint64_t v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v129 = v123 - (void)v126;
          if (v129 >> 1 > v128) {
            unint64_t v128 = v129 >> 1;
          }
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v130 = v128;
          }
          if (v130)
          {
            Swift::String_optional v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v183, v130);
            uint64_t v126 = (int *)a1[5];
            char v124 = (int *)a1[6];
          }
          else
          {
            Swift::String_optional v131 = 0;
          }
          uint64_t v132 = (int *)&v131[4 * v127];
          *uint64_t v132 = v122;
          uint64_t v125 = v132 + 1;
          while (v124 != v126)
          {
            int v133 = *--v124;
            *--uint64_t v132 = v133;
          }
          a1[5] = v132;
          a1[6] = v125;
          a1[7] = &v131[4 * v130];
          if (v126) {
            operator delete(v126);
          }
        }
        else
        {
          *char v124 = v122;
          uint64_t v125 = v124 + 1;
        }
        a1[6] = v125;
        int v134 = *fst::TropicalWeightTpl<float>::Zero();
        uint64_t v136 = (int *)a1[9];
        unint64_t v135 = a1[10];
        if ((unint64_t)v136 >= v135)
        {
          uint64_t v138 = (int *)*v186;
          uint64_t v139 = ((char *)v136 - (unsigned char *)*v186) >> 2;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v141 = v135 - (void)v138;
          if (v141 >> 1 > v140) {
            unint64_t v140 = v141 >> 1;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            uint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v182, v142);
            uint64_t v138 = (int *)a1[8];
            uint64_t v136 = (int *)a1[9];
          }
          else
          {
            uint64_t v143 = 0;
          }
          Swift::String_optional v144 = (int *)&v143[4 * v139];
          *Swift::String_optional v144 = v134;
          char v137 = v144 + 1;
          while (v136 != v138)
          {
            int v145 = *--v136;
            *--Swift::String_optional v144 = v145;
          }
          a1[8] = v144;
          a1[9] = v137;
          a1[10] = &v143[4 * v142];
          if (v138) {
            operator delete(v138);
          }
        }
        else
        {
          *uint64_t v136 = v134;
          char v137 = v136 + 1;
        }
        a1[9] = v137;
        BYTE4(v190) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 11), (unsigned char *)&v190 + 4);
        uint64_t v106 = a1[1];
        char v107 = (int **)(v106 + 8);
      }
      if (*((unsigned char *)a1 + 33))
      {
        char v146 = (char *)a1[14];
        char v147 = (char *)a1[15];
        unint64_t v148 = (v147 - v146) >> 2;
        if (v148 <= (int)i)
        {
          do
          {
            if ((unint64_t)v147 >= *v58)
            {
              unint64_t v151 = v148 + 1;
              if ((v148 + 1) >> 62) {
                std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v152 = *v58 - (void)v146;
              if (v152 >> 1 > v151) {
                unint64_t v151 = v152 >> 1;
              }
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v151;
              }
              if (v153)
              {
                uint64_t v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 16), v153);
                char v146 = (char *)a1[14];
                char v147 = (char *)a1[15];
              }
              else
              {
                uint64_t v154 = 0;
              }
              uint64_t v155 = &v154[4 * v148];
              *(_DWORD *)uint64_t v155 = -1;
              char v150 = v155 + 4;
              while (v147 != v146)
              {
                int v156 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              a1[14] = v155;
              a1[15] = v150;
              a1[16] = &v154[4 * v153];
              if (v146)
              {
                operator delete(v146);
                char v146 = (char *)a1[14];
              }
              else
              {
                char v146 = v155;
              }
            }
            else
            {
              *(_DWORD *)char v147 = -1;
              char v150 = v147 + 4;
            }
            a1[15] = v150;
            unint64_t v148 = (v150 - v146) >> 2;
            int v157 = *(_DWORD *)(v105 + 12);
            char v147 = v150;
          }
          while (v148 <= v157);
          uint64_t v149 = v157;
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
        else
        {
          uint64_t v149 = (int)i;
        }
        if (*(_DWORD *)&v146[4 * v149] != *((_DWORD *)a1 + 34))
        {
          uint64_t v158 = fst::TropicalWeightTpl<float>::Zero();
          uint64_t v159 = *(int *)(v105 + 12);
          *(_DWORD *)(*(void *)a1[1] + 4 * v159) = *v158;
          uint64_t v160 = a1[5];
          *(_DWORD *)(v160 + 4 * v159) = *fst::TropicalWeightTpl<float>::Zero();
          uint64_t v161 = *(int *)(v105 + 12);
          unint64_t i = (unint64_t)*v186;
          *(_DWORD *)(i + 4 * v161) = *fst::TropicalWeightTpl<float>::Zero();
          unint64_t v162 = *(int *)(v105 + 12);
          *(void *)(a1[11] + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
          *(_DWORD *)(a1[14] + 4 * v162) = *((_DWORD *)a1 + 34);
          LODWORD(i) = *(_DWORD *)(v105 + 12);
        }
      }
      uint64_t v163 = *(void *)a1[1];
      uint64_t v164 = a1[5];
      uint64_t v165 = a1[8];
      if (v103 == -INFINITY || (float v166 = *(float *)(v105 + 8), v166 >= -INFINITY) && v166 <= -INFINITY)
      {
        float v167 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        BOOL v168 = v166 == INFINITY || v103 == INFINITY;
        float v169 = v103 + v166;
        float v167 = v168 ? INFINITY : v169;
      }
      float v170 = *(float *)(v163 + 4 * (int)i);
      if (v170 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
      {
        float v171 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        float v170 = *(float *)(v163 + 4 * (int)i);
      }
      else
      {
        float v171 = v170 >= v167 ? v167 : *(float *)(v163 + 4 * (int)i);
      }
      float v172 = *((float *)a1 + 7);
      float v173 = v171 + v172;
      float v174 = v172 + v170;
      if (v170 > v173 || v171 > v174) {
        break;
      }
LABEL_254:
      if ((void)v187) {
        (*(void (**)(void))(*(void *)v187 + 32))(v187);
      }
      else {
        ++v189;
      }
    }
    float v176 = *(float *)(v164 + 4 * (int)i);
    if (v176 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v176 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v176 >= v167)
    {
      float v176 = v167;
    }
    *(float *)(v164 + 4 * (int)i) = v176;
    *(float *)(v163 + 4 * (int)i) = v176;
    float v177 = *(float *)(v165 + 4 * (int)i);
    if (v177 == -INFINITY || v167 >= -INFINITY && v167 <= -INFINITY)
    {
      float v177 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
    }
    else if (v177 >= v167)
    {
      float v177 = v167;
    }
    *(float *)(v165 + 4 * (int)i) = v177;
    if (*(float *)(v163 + 4 * (int)i) != -INFINITY && v177 != -INFINITY)
    {
      uint64_t v178 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v105 + 12)))
      {
        (*(void (**)(void))(v178 + 40))();
      }
      else
      {
        (*(void (**)(void))(v178 + 24))();
        *(void *)(a1[11] + (((unint64_t)*(int *)(v105 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v105 + 12);
      }
      goto LABEL_254;
    }
    char v179 = 0;
    *uint64_t v181 = 1;
LABEL_259:
    uint64_t result = v187;
    if ((void)v187)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v187 + 8))(v187);
    }
    else if (*((void *)&v188 + 1))
    {
      --**((_DWORD **)&v188 + 1);
    }
  }
  while ((v179 & 1) != 0);
  return result;
}

void sub_23AC169F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  else if (a18)
  {
    --*a18;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::TropicalWeightTpl<float>>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  long long v7 = v8;
  int v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      int v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v18 = &v15[4 * v12];
    unint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    int v21 = v18;
    do
    {
      *(_DWORD *)int v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = &v15[4 * v14];
    uint64_t v23 = (char *)*a1;
    for (unint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<fst::ReplaceStackPrefix<int,int>::PrefixTuple,std::allocator<fst::ReplaceStackPrefix<int,int>::PrefixTuple>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    long long v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23AC16C00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *(_DWORD *)(v6 + 4 * v8), *a2))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      uint64_t v6 = *(void *)(a1 + 72);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)v8);
}

BOOL fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = **a1;
  if (a2 >= (unint64_t)(((*a1)[1] - v6) >> 2)) {
    unsigned int v7 = fst::TropicalWeightTpl<float>::Zero();
  }
  else {
    unsigned int v7 = (int *)(v6 + 4 * a2);
  }
  float v8 = *(float *)v7;
  uint64_t v9 = *a1[1];
  if (v5 >= (a1[1][1] - v9) >> 2) {
    uint64_t v10 = fst::TropicalWeightTpl<float>::Zero();
  }
  else {
    uint64_t v10 = (int *)(v9 + 4 * v5);
  }
  if (v8 == -INFINITY || (float v11 = *(float *)v10, *(float *)v10 >= -INFINITY) && *(float *)v10 <= -INFINITY)
  {
    float v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    BOOL v13 = v11 == INFINITY || v8 == INFINITY;
    float v12 = v8 + v11;
    if (v13) {
      float v12 = INFINITY;
    }
  }
  float v24 = v12;
  uint64_t v14 = **a1;
  if (a3 >= (unint64_t)(((*a1)[1] - v14) >> 2)) {
    unint64_t v15 = fst::TropicalWeightTpl<float>::Zero();
  }
  else {
    unint64_t v15 = (int *)(v14 + 4 * a3);
  }
  float v16 = *(float *)v15;
  uint64_t v17 = *a1[1];
  if (a3 >= (unint64_t)((a1[1][1] - v17) >> 2)) {
    uint64_t v18 = fst::TropicalWeightTpl<float>::Zero();
  }
  else {
    uint64_t v18 = (int *)(v17 + 4 * a3);
  }
  if (v16 == -INFINITY || (float v19 = *(float *)v18, *(float *)v18 >= -INFINITY) && *(float *)v18 <= -INFINITY)
  {
    float v20 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    BOOL v21 = v19 == INFINITY || v16 == INFINITY;
    float v20 = v16 + v19;
    if (v21) {
      float v20 = INFINITY;
    }
  }
  float v23 = v20;
  return fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)(a1 + 2), &v24, &v23);
}

BOOL fst::Heap<int,fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>>::Heapify(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = (2 * a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 96)
      || !(uint64_t result = fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v4), *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)a2))))
    {
      uint64_t v4 = a2;
    }
    unsigned int v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 96))
    {
      uint64_t result = fst::internal::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v5), *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v4));
      if (result) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = v4;
      }
    }
    if (v4 == a2) {
      break;
    }
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = *(int *)(v6 + 4 * (int)a2);
    uint64_t v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    uint64_t v9 = *(void *)(v3 + 24);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    uint64_t v10 = *(void *)(v3 + 72);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

void *fst::internal::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(void *a1)
{
  uint64_t v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[35];
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  a1[35] = 0;
  unsigned int v5 = (void *)a1[32];
  if (v5) {
    operator delete(v5);
  }
  std::deque<int>::~deque[abi:ne180100](a1 + 26);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 20));
  uint64_t v6 = (void *)a1[16];
  if (v6)
  {
    a1[17] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[13];
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[10];
  if (v8)
  {
    a1[11] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t fst::AutoQueue<int>::~AutoQueue(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2CFD8;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  unsigned int v5 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<fst::QueueBase<int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(void *a1)
{
  _ZNSt3__115allocate_sharedB8ne180100IN3fst8internal13VectorFstImplINS1_11VectorStateINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS_9allocatorIS8_EEEEEENS9_ISC_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v3);
  fst::ImplToMutableFst<fst::internal::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ImplToMutableFst(a1, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a1 = &unk_26EE2AA60;
  return a1;
}

void sub_23AC170C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,(void *)0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a4 + 24);
  if (v8 == 1)
  {
    unint64_t v34 = 0;
    float v35 = 0;
    *(void *)float v36 = 0;
    LODWORD(v43[0]) = 0;
    if (fst::internal::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (int **)a3, (uint64_t *)a4, v43, (__n128 **)&v34))fst::internal::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v34, LODWORD(v43[0])); {
    else
    }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 4, 4);
    if (v34)
    {
      float v35 = v34;
      operator delete(v34);
    }
  }
  else if (v8 >= 1)
  {
    if (*(unsigned char *)(a4 + 29)
      || (fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (void *)a3, a4), uint64_t v9 = *(int **)a3, *(void *)(a3 + 8) - *(void *)a3 != 4)|| *(float *)v9 < -INFINITY|| *(float *)v9 > -INFINITY)
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(v43);
      fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, v43, 1);
      float v11 = *(float *)fst::TropicalWeightTpl<float>::Zero();
      float v42 = v11;
      uint64_t v12 = **(void **)(v43[1] + 56);
      uint64_t v13 = *(void *)(v12 + 24);
      uint64_t v14 = *(void *)(v12 + 32);
      if (v13 == v14) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *(void *)(v12 + 24);
      }
      if (v13 != v14)
      {
        unint64_t v16 = (v14 - v13) >> 4;
        if (v16 <= 1) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = v16;
        }
        uint64_t v18 = (float *)(v15 + 12);
        float v19 = v18;
        do
        {
          uint64_t v20 = *(int *)v19;
          v19 += 4;
          uint64_t v21 = v20 - 1;
          if (v20 - 1 < (unint64_t)((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2))
          {
            float v22 = *(v18 - 1);
            if (v22 == -INFINITY || (float v23 = *(float *)(*(void *)a3 + 4 * v21), v23 >= -INFINITY) && v23 <= -INFINITY)
            {
              float v24 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
            }
            else
            {
              BOOL v25 = v23 == INFINITY || v22 == INFINITY;
              float v24 = v22 + v23;
              if (v25) {
                float v24 = INFINITY;
              }
            }
            if (v11 == -INFINITY || v24 >= -INFINITY && v24 <= -INFINITY)
            {
              float v11 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
            }
            else if (v11 >= v24)
            {
              float v11 = v24;
            }
            float v42 = v11;
          }
          uint64_t v18 = v19;
          --v17;
        }
        while (v17);
      }
      std::vector<fst::TropicalWeightTpl<float>>::insert(a3, *(int **)a3, (int *)&v42);
      if (*(unsigned char *)(a4 + 28))
      {
        memset(__p, 0, sizeof(__p));
        int v26 = *(_DWORD *)(a4 + 16);
        LOBYTE(v34) = FLAGS_fst_default_cache_gc;
        float v35 = (void *)FLAGS_fst_default_cache_gc_limit;
        *(_DWORD *)float v36 = v26;
        *(void *)&int v36[4] = 0;
        char v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>((uint64_t)&v33, (uint64_t)v43, a3, (uint64_t)__p, (uint64_t)&v34);
      }
      int v27 = *(_DWORD *)(a4 + 24);
      float v28 = *(float *)(a4 + 16);
      int v41 = *(_DWORD *)(a4 + 32);
      fst::internal::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v43, a2, (uint64_t *)a3, v27, (float *)&v41, *(_DWORD *)(a4 + 36), v28);
      long long v30 = *(int **)a3;
      unint64_t v29 = *(unsigned char **)(a3 + 8);
      unint64_t v31 = (unsigned char *)(*(void *)a3 + 4);
      if (v31 != v29)
      {
        size_t v32 = ((v29 - (unsigned char *)v30) & 0xFFFFFFFFFFFFFFFCLL) - 4;
        memmove(*(void **)a3, v31, v32);
        long long v30 = (int *)((char *)v30 + v32);
      }
      *(void *)(a3 + 8) = v30;
      v43[0] = (uint64_t)&unk_26EE2D838;
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
    }
    else
    {
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168);
      v10(a2, 4, 4);
    }
  }
}

void sub_23AC174BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v21 - 104) = &unk_26EE2D838;
  float v23 = *(std::__shared_weak_count **)(v21 - 88);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, int **a2, uint64_t *a3, _DWORD *a4, __n128 **a5)
{
  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == -1) {
    return 1;
  }
  memset(__p, 0, sizeof(__p));
  uint64_t v8 = *a3;
  uint64_t v110 = *((unsigned int *)a3 + 3);
  if (v110 == -1) {
    uint64_t v110 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  }
  float v9 = *(float *)fst::TropicalWeightTpl<float>::Zero();
  a2[1] = *a2;
  (*(void (**)(void))(**(void **)(v8 + 16) + 56))(*(void *)(v8 + 16));
  for (unint64_t i = a3; (int)v110 > (unint64_t)(a2[1] - *a2); a5[1] = v25)
  {
    uint64_t v10 = fst::TropicalWeightTpl<float>::Zero();
    float v11 = v10;
    uint64_t v13 = a2[1];
    unint64_t v12 = (unint64_t)a2[2];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = *a2;
      uint64_t v16 = v13 - *a2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_182;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v19);
        uint64_t v15 = *a2;
        uint64_t v13 = a2[1];
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = (int *)&v20[4 * v16];
      int *v21 = *v11;
      uint64_t v14 = v21 + 1;
      while (v13 != v15)
      {
        int v22 = *--v13;
        *--uint64_t v21 = v22;
      }
      *a2 = v21;
      a2[1] = v14;
      a2[2] = (int *)&v20[4 * v19];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *uint64_t v13 = *v10;
      uint64_t v14 = v13 + 1;
    }
    a2[1] = v14;
    LOBYTE(v113) = 0;
    std::vector<BOOL>::push_back((uint64_t)__p, &v113);
    float v24 = a5[1];
    unint64_t v23 = (unint64_t)a5[2];
    if ((unint64_t)v24 >= v23)
    {
      uint64_t v26 = v24 - *a5;
      if ((unint64_t)(v26 + 1) >> 60) {
        std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v23 - (void)*a5;
      uint64_t v28 = v27 >> 3;
      if (v27 >> 3 <= (unint64_t)(v26 + 1)) {
        uint64_t v28 = v26 + 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29) {
        long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a5 + 2), v29);
      }
      else {
        long long v30 = 0;
      }
      unint64_t v31 = &v30[16 * v26];
      *(_OWORD *)unint64_t v31 = xmmword_23AC2FEA0;
      BOOL v25 = (__n128 *)(v31 + 16);
      uint64_t v33 = *a5;
      size_t v32 = (char *)a5[1];
      if (v32 != (char *)*a5)
      {
        do
        {
          *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
          v31 -= 16;
          v32 -= 16;
        }
        while (v32 != (char *)v33);
        size_t v32 = (char *)*a5;
      }
      *a5 = (__n128 *)v31;
      a5[1] = v25;
      a5[2] = (__n128 *)&v30[16 * v29];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      __n128 *v24 = (__n128)xmmword_23AC2FEA0;
      BOOL v25 = v24 + 1;
    }
  }
  unint64_t v34 = fst::TropicalWeightTpl<float>::One();
  float v35 = v34;
  unint64_t v36 = (unint64_t)a2[2];
  uint64_t v112 = (uint64_t)(a2 + 2);
  char v37 = a2[1];
  if ((unint64_t)v37 >= v36)
  {
    uint64_t v40 = *a2;
    uint64_t v41 = v37 - *a2;
    unint64_t v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 62) {
LABEL_182:
    }
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    uint64_t v43 = v36 - (void)v40;
    if (v43 >> 1 > v42) {
      unint64_t v42 = v43 >> 1;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v112, v44);
      uint64_t v40 = *a2;
      char v37 = a2[1];
    }
    else
    {
      uint64_t v45 = 0;
    }
    unint64_t v46 = (int *)&v45[4 * v41];
    unint64_t v47 = &v45[4 * v44];
    *unint64_t v46 = *v35;
    uint64_t v38 = v46 + 1;
    while (v37 != v40)
    {
      int v48 = *--v37;
      *--unint64_t v46 = v48;
    }
    *a2 = v46;
    a2[1] = v38;
    a2[2] = (int *)v47;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    int *v37 = *v34;
    uint64_t v38 = v37 + 1;
  }
  a2[1] = v38;
  unint64_t v49 = (unint64_t)a5[2];
  unint64_t v50 = a5[1];
  if ((unint64_t)v50 >= v49)
  {
    uint64_t v52 = v50 - *a5;
    if ((unint64_t)(v52 + 1) >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v53 = v49 - (void)*a5;
    uint64_t v54 = v53 >> 3;
    if (v53 >> 3 <= (unint64_t)(v52 + 1)) {
      uint64_t v54 = v52 + 1;
    }
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v55 = v54;
    }
    if (v55) {
      uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a5 + 2), v55);
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = &v56[16 * v52];
    float v58 = &v56[16 * v55];
    *(_OWORD *)uint64_t v57 = xmmword_23AC2FEA0;
    uint64_t v51 = (__n128 *)(v57 + 16);
    int v60 = *a5;
    __n128 v59 = (char *)a5[1];
    if (v59 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v57 - 1) = *((_OWORD *)v59 - 1);
        v57 -= 16;
        v59 -= 16;
      }
      while (v59 != (char *)v60);
      __n128 v59 = (char *)*a5;
    }
    *a5 = (__n128 *)v57;
    a5[1] = v51;
    a5[2] = (__n128 *)v58;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *unint64_t v50 = (__n128)xmmword_23AC2FEA0;
    uint64_t v51 = v50 + 1;
  }
  a5[1] = v51;
  (*(void (**)(void, uint64_t))(**(void **)(v8 + 16) + 24))(*(void *)(v8 + 16), v110);
  LOBYTE(v113) = 1;
  std::vector<BOOL>::push_back((uint64_t)__p, &v113);
  char v108 = 0;
LABEL_72:
  if (((*(uint64_t (**)(void))(**(void **)(v8 + 16) + 48))(*(void *)(v8 + 16)) & 1) != 0
    || (uint64_t v111 = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 16))(*(void *)(v8 + 16)),
        (*(void (**)(void))(**(void **)(v8 + 16) + 32))(*(void *)(v8 + 16)),
        *(void *)((char *)__p[0] + (((unint64_t)(int)v111 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v111),
        float v61 = *(float *)&(*a2)[(int)v111],
        ((*((unsigned char *)i + 30) != 0) & v108) == 1)
    && (float v116 = v9,
        float v117 = v61,
        fst::internal::FirstPathSelect<int,fst::TropicalWeightTpl<float>,fst::AutoQueue<int>>::operator()((uint64_t)&v113, v111, &v117, &v116)))
  {
    uint64_t v39 = 1;
    goto LABEL_177;
  }
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v119);
  uint64_t v62 = fst::TropicalWeightTpl<float>::Zero();
  LODWORD(v113) = v119[0];
  HIDWORD(v119[0]) = 0;
  HIDWORD(v119[0]) = *v62;
  if (*(float *)v119 == *((float *)v119 + 1)) {
    goto LABEL_94;
  }
  (*(void (**)(long long *__return_ptr, float))(*(void *)a1 + 24))(&v113, *(float *)v119);
  if (v61 == -INFINITY || *(float *)&v113 >= -INFINITY && *(float *)&v113 <= -INFINITY)
  {
    float v63 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    BOOL v64 = *(float *)&v113 == INFINITY || v61 == INFINITY;
    float v63 = v61 + *(float *)&v113;
    if (v64) {
      float v63 = INFINITY;
    }
  }
  if (v9 == -INFINITY || v63 >= -INFINITY && v63 <= -INFINITY)
  {
    float v63 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else if (v9 < v63)
  {
    float v63 = v9;
  }
  *(float *)&long long v113 = v9;
  *((float *)v119 + 1) = v63;
  if (v9 != v63)
  {
    *a4 = v111;
    float v9 = v63;
  }
  uint64_t v39 = 0;
  char v108 = 1;
  if (v9 != -INFINITY)
  {
LABEL_94:
    unint64_t v115 = 0;
    long long v113 = 0u;
    long long v114 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v111, &v113);
    while (1)
    {
      if ((void)v113)
      {
        char v66 = (*(uint64_t (**)(void))(*(void *)v113 + 16))(v113);
        uint64_t v67 = v113;
        if (v66)
        {
          char v100 = 1;
LABEL_169:
          if (v67)
          {
            (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
            goto LABEL_174;
          }
LABEL_172:
          if (*((void *)&v114 + 1)) {
            --**((_DWORD **)&v114 + 1);
          }
LABEL_174:
          if ((v100 & 1) == 0)
          {
            uint64_t v39 = 0;
            break;
          }
          goto LABEL_72;
        }
        if ((void)v113)
        {
          uint64_t v68 = (*(uint64_t (**)(void))(*(void *)v113 + 24))();
          goto LABEL_134;
        }
      }
      else if (v115 >= (unint64_t)v114)
      {
        char v100 = 1;
        goto LABEL_172;
      }
      uint64_t v68 = *((void *)&v113 + 1) + 16 * v115;
LABEL_134:
      while (1)
      {
        long long v93 = *a2;
        unint64_t v94 = *(int *)(v68 + 12);
        if (v94 < a2[1] - *a2) {
          break;
        }
        uint64_t v69 = fst::TropicalWeightTpl<float>::Zero();
        uint64_t v70 = v69;
        uint64_t v72 = a2[1];
        unint64_t v71 = (unint64_t)a2[2];
        if ((unint64_t)v72 >= v71)
        {
          BOOL v74 = *a2;
          uint64_t v75 = v72 - *a2;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 62) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v77 = v71 - (void)v74;
          if (v77 >> 1 > v76) {
            unint64_t v76 = v77 >> 1;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78)
          {
            float v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v112, v78);
            BOOL v74 = *a2;
            uint64_t v72 = a2[1];
          }
          else
          {
            float v79 = 0;
          }
          int v80 = (int *)&v79[4 * v75];
          *int v80 = *v70;
          unint64_t v73 = v80 + 1;
          while (v72 != v74)
          {
            int v81 = *--v72;
            *--int v80 = v81;
          }
          *a2 = v80;
          a2[1] = v73;
          a2[2] = (int *)&v79[4 * v78];
          if (v74) {
            operator delete(v74);
          }
        }
        else
        {
          *uint64_t v72 = *v69;
          unint64_t v73 = v72 + 1;
        }
        a2[1] = v73;
        BYTE4(v119[0]) = 0;
        std::vector<BOOL>::push_back((uint64_t)__p, (unsigned char *)v119 + 4);
        unint64_t v83 = a5[1];
        unint64_t v82 = (unint64_t)a5[2];
        if ((unint64_t)v83 >= v82)
        {
          uint64_t v85 = v83 - *a5;
          if ((unint64_t)(v85 + 1) >> 60) {
            std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v86 = v82 - (void)*a5;
          uint64_t v87 = v86 >> 3;
          if (v86 >> 3 <= (unint64_t)(v85 + 1)) {
            uint64_t v87 = v85 + 1;
          }
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v87;
          }
          if (v88) {
            int v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)(a5 + 2), v88);
          }
          else {
            int v89 = 0;
          }
          unint64_t v90 = &v89[16 * v85];
          __n128 v65 = (__n128)xmmword_23AC2FEA0;
          *(_OWORD *)unint64_t v90 = xmmword_23AC2FEA0;
          uint64_t v84 = (__n128 *)(v90 + 16);
          uint64_t v92 = *a5;
          unint64_t v91 = a5[1];
          if (v91 != *a5)
          {
            do
            {
              __n128 v65 = v91[-1];
              *((__n128 *)v90 - 1) = v65;
              v90 -= 16;
              --v91;
            }
            while (v91 != v92);
            unint64_t v91 = *a5;
          }
          *a5 = (__n128 *)v90;
          a5[1] = v84;
          a5[2] = (__n128 *)&v89[16 * v88];
          if (v91) {
            operator delete(v91);
          }
        }
        else
        {
          __n128 v65 = (__n128)xmmword_23AC2FEA0;
          *unint64_t v83 = (__n128)xmmword_23AC2FEA0;
          uint64_t v84 = v83 + 1;
        }
        a5[1] = v84;
      }
      if (v61 == -INFINITY || (float v95 = *(float *)(v68 + 8), v95 >= -INFINITY) && v95 <= -INFINITY)
      {
        float v96 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        BOOL v97 = v95 == INFINITY || v61 == INFINITY;
        float v98 = v61 + v95;
        if (v97) {
          float v96 = INFINITY;
        }
        else {
          float v96 = v98;
        }
      }
      v65.n128_u32[0] = v93[v94];
      if (v65.n128_f32[0] == -INFINITY || v96 >= -INFINITY && v96 <= -INFINITY)
      {
        v65.n128_u32[0] = *fst::TropicalWeightTpl<float>::NoWeight();
      }
      else if (v65.n128_f32[0] >= v96)
      {
        v65.n128_f32[0] = v96;
      }
      HIDWORD(v119[0]) = 0;
      HIDWORD(v119[0]) = v93[v94];
      LODWORD(v119[0]) = v65.n128_u32[0];
      v65.n128_u32[0] = HIDWORD(v119[0]);
      if (*((float *)v119 + 1) != *(float *)v119)
      {
        float v99 = *(float *)&v93[v94];
        if (v99 == -INFINITY || v96 >= -INFINITY && v96 <= -INFINITY)
        {
          float v99 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else if (v99 >= v96)
        {
          float v99 = v96;
        }
        char v100 = 0;
        *(float *)&v93[v94] = v99;
        uint64_t v67 = v113;
        if (v99 == -INFINITY) {
          goto LABEL_169;
        }
        if ((void)v113) {
          uint64_t v101 = (*(uint64_t (**)(void))(*(void *)v113 + 40))();
        }
        else {
          uint64_t v101 = v115;
        }
        unint64_t v102 = *(int *)(v68 + 12);
        uint64_t v103 = (uint64_t)&(*a5)[v102];
        *(_DWORD *)uint64_t v103 = v111;
        *(void *)(v103 + 8) = v101;
        uint64_t v104 = **(void **)(v8 + 16);
        if ((*(void *)((char *)__p[0] + ((v102 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v102))
        {
          (*(void (**)(void))(v104 + 40))();
        }
        else
        {
          (*(void (**)(void))(v104 + 24))();
          *(void *)((char *)__p[0] + (((unint64_t)*(int *)(v68 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v68 + 12);
        }
      }
      if ((void)v113) {
        (*(void (**)(void, __n128))(*(void *)v113 + 32))(v113, v65);
      }
      else {
        ++v115;
      }
    }
  }
LABEL_177:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v39;
}

void sub_23AC181A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 264))(a2, v9);
  if (a4 != -1)
  {
    int v10 = -1;
    uint64_t v11 = a4;
    int v12 = -1;
    while (1)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
      if (v10 != -1) {
        break;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v25, a1, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 160))(a2, v13, &v25);
LABEL_15:
      int v10 = v11;
      uint64_t v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      int v12 = v13;
      if (v11 == -1) {
        goto LABEL_18;
      }
    }
    uint64_t v24 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 120))(a1, v11, &v22);
    uint64_t v14 = *(void *)(*a3 + 16 * v10 + 8);
    if ((void)v22)
    {
      (*(void (**)(void, uint64_t))(*(void *)v22 + 56))(v22, v14);
      if ((void)v22)
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v22 + 24))(v22);
        goto LABEL_11;
      }
      uint64_t v14 = v24;
    }
    else
    {
      uint64_t v24 = *(void *)(*a3 + 16 * v10 + 8);
    }
    uint64_t v15 = *((void *)&v22 + 1) + 16 * v14;
LABEL_11:
    uint64_t v19 = *(void *)v15;
    int v20 = *(_DWORD *)(v15 + 8);
    int v21 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v13, &v19);
    if ((void)v22)
    {
      (*(void (**)(void))(*(void *)v22 + 8))(v22);
    }
    else if (*((void *)&v23 + 1))
    {
      --**((_DWORD **)&v23 + 1);
    }
    goto LABEL_15;
  }
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 152))(a2, v13);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 4, 4);
  }
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 56))(a2, 0xFFFFFFFF0007, 0);
  unint64_t v17 = fst::ShortestPathProperties(v16, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 168))(a2, v17, 0xFFFFFFFF0007);
}

void sub_23AC186B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<fst::TropicalWeightTpl<float>>::insert(uint64_t a1, int *a2, int *a3)
{
  uint64_t v6 = *(int **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (uint64_t)a2 - *(void *)a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (int *)(*(void *)a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v11 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  if (v5 >= v10)
  {
    unint64_t v17 = ((uint64_t)(v5 - (void)v6) >> 2) + 1;
    if (v17 >> 62) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v10 - (void)v6;
    if (v19 >> 1 > v17) {
      unint64_t v17 = v19 >> 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v17;
    }
    uint64_t v35 = a1 + 16;
    if (v20) {
      int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v20);
    }
    else {
      int v21 = 0;
    }
    long long v22 = &v21[4 * v8];
    std::string __p = v21;
    size_t v32 = v22;
    uint64_t v33 = v22;
    unint64_t v34 = &v21[4 * v20];
    if (v8 == v20)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v27 = 1;
        }
        else {
          unint64_t v27 = v7 >> 1;
        }
        uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11, v27);
        long long v22 = &v28[v27 & 0xFFFFFFFFFFFFFFFCLL];
        std::string __p = v28;
        size_t v32 = v22;
        unint64_t v34 = &v28[4 * v29];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        unint64_t v23 = v8 + 2;
        if (v8 >= -1) {
          unint64_t v23 = v8 + 1;
        }
        v22 -= 4 * (v23 >> 1);
        size_t v32 = v22;
      }
    }
    *(_DWORD *)long long v22 = *a3;
    uint64_t v33 = v22 + 4;
    uint64_t v9 = std::vector<fst::TropicalWeightTpl<float>>::__swap_out_circular_buffer((int **)a1, &__p, v9);
    if (v33 != v32) {
      v33 += (v32 - v33 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (v9 == (int *)v5)
  {
    *uint64_t v9 = *a3;
    *(void *)(a1 + 8) = v9 + 1;
  }
  else
  {
    int v12 = v9 + 1;
    uint64_t v13 = (_DWORD *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v15 = *(int **)(a1 + 8);
    }
    else
    {
      uint64_t v14 = (int *)(v5 - 4);
      uint64_t v15 = *(int **)(a1 + 8);
      do
      {
        int v16 = *v14++;
        *v15++ = v16;
      }
      while ((unint64_t)v14 < v5);
    }
    *(void *)(a1 + 8) = v15;
    if ((int *)v5 != v12)
    {
      uint64_t v24 = (uint64_t)(v5 - (void)v12) >> 2;
      do
        *v13-- = v6[v8 - 1 + v24--];
      while (v24 * 4);
    }
    BOOL v26 = v9 <= a3 && v15 > a3;
    *uint64_t v9 = a3[v26];
  }
  return v9;
}

void sub_23AC18930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, float *a5, int a6, float a7)
{
  if (a4 < 1) {
    return;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v13);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 264))(a2, v14);
  uint64_t v159 = 0;
  uint64_t v160 = 0;
  v161[0] = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != -1)
  {
    uint64_t v17 = *a3;
    uint64_t v16 = a3[1];
    if ((*(int (**)(uint64_t))(*(void *)a1 + 16))(a1) < (unint64_t)((v16 - v17) >> 2))
    {
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      uint64_t v19 = *a3;
      unint64_t v20 = fst::TropicalWeightTpl<float>::Zero();
      LODWORD(v144) = 0;
      LODWORD(v144) = *(_DWORD *)(v19 + 4 * v18);
      LODWORD(v154) = 0;
      LODWORD(v154) = *v20;
      v15.n128_u32[0] = v144;
      if (*(float *)&v144 != *(float *)&v154)
      {
        int v21 = fst::TropicalWeightTpl<float>::One();
        BOOL v22 = !fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v158, a5, (float *)v21);
        if (!a6) {
          LOBYTE(v22) = 0;
        }
        if (v22)
        {
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 152))(a2, v23);
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
          int v157 = *fst::TropicalWeightTpl<float>::One();
          (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 160))(a2, v24, &v157);
          if ((int)v24 >= (unint64_t)((v160 - v159) >> 3))
          {
            do
            {
              int v25 = *fst::TropicalWeightTpl<float>::Zero();
              BOOL v26 = v160;
              if ((unint64_t)v160 >= v161[0])
              {
                uint64_t v28 = (v160 - v159) >> 3;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 61) {
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v30 = v161[0] - (void)v159;
                if ((uint64_t)(v161[0] - (void)v159) >> 2 > v29) {
                  unint64_t v29 = v30 >> 2;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v161, v31);
                unint64_t v34 = &v33[8 * v28];
                *(_DWORD *)unint64_t v34 = -1;
                *((_DWORD *)v34 + 1) = v25;
                uint64_t v35 = v159;
                unint64_t v36 = v160;
                char v37 = v34;
                while (v36 != v35)
                {
                  int v38 = *((_DWORD *)v36 - 2);
                  v36 -= 8;
                  *((_DWORD *)v37 - 2) = v38;
                  v37 -= 8;
                  *((_DWORD *)v37 + 1) = *((_DWORD *)v36 + 1);
                }
                unint64_t v27 = v34 + 8;
                uint64_t v159 = v37;
                uint64_t v160 = v34 + 8;
                v161[0] = &v33[8 * v32];
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v160 = -1;
                *((_DWORD *)v26 + 1) = v25;
                unint64_t v27 = v26 + 8;
              }
              uint64_t v160 = v27;
            }
            while ((int)v24 >= (unint64_t)((v27 - v159) >> 3));
          }
          int v39 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
          int v40 = *fst::TropicalWeightTpl<float>::One();
          uint64_t v41 = &v159[8 * (int)v24];
          *(_DWORD *)uint64_t v41 = v39;
          *((_DWORD *)v41 + 1) = v40;
          int v156 = 0;
          unint64_t v42 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v156, 1uLL);
          *unint64_t v42 = v24;
          uint64_t v154 = v42;
          int v156 = &v42[v43];
          uint64_t v155 = v42 + 1;
          float v44 = *(float *)(*a3 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 16))(a1));
          if (v44 == -INFINITY || (float v45 = *a5, *a5 >= -INFINITY) && *a5 <= -INFINITY)
          {
            float v46 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
          }
          else
          {
            BOOL v47 = v45 == INFINITY || v44 == INFINITY;
            float v46 = v44 + v45;
            if (v47) {
              float v46 = INFINITY;
            }
          }
          float v153 = v46;
          std::string __p = 0;
          unint64_t v151 = 0;
          uint64_t v152 = 0;
          unint64_t v49 = v154;
          int v48 = (char *)v155;
          if (v154 == v155) {
            goto LABEL_178;
          }
          while (1)
          {
            v147[0] = &v159;
            v147[1] = a3;
            int v148 = -1;
            float v149 = a7;
            if (v48 - (char *)v49 >= 5)
            {
              int v50 = *v49;
              uint64_t v51 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(v49, (uint64_t)v147, (unint64_t)(v48 - (char *)v49) >> 2);
              uint64_t v52 = (int *)(v48 - 4);
              if (v48 - 4 == (char *)v51)
              {
                *uint64_t v51 = v50;
              }
              else
              {
                *uint64_t v51 = *v52;
                *uint64_t v52 = v50;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v49, (uint64_t)(v51 + 1), (uint64_t)v147, v51 + 1 - v49);
              }
            }
            uint64_t v53 = *(v155 - 1);
            uint64_t v54 = (float *)&v159[8 * v53];
            unint64_t v55 = *(int *)v54;
            float v56 = v54[1];
            --v155;
            if (v55 == -1)
            {
              uint64_t v57 = fst::TropicalWeightTpl<float>::One();
            }
            else if (v55 >= (a3[1] - *a3) >> 2)
            {
              uint64_t v57 = fst::TropicalWeightTpl<float>::Zero();
            }
            else
            {
              uint64_t v57 = (int *)(*a3 + 4 * v55);
            }
            float v58 = *(float *)v57;
            if (*(float *)v57 == -INFINITY || v56 >= -INFINITY && v56 <= -INFINITY)
            {
              float v59 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
            }
            else
            {
              BOOL v60 = v58 == INFINITY || v56 == INFINITY;
              float v59 = v56 + v58;
              if (v60) {
                float v59 = INFINITY;
              }
            }
            *(float *)&long long v144 = v59;
            if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()((uint64_t)&v158, &v153, (float *)&v144)
              || a6 != -1 && (*(int (**)(uint64_t))(*(void *)a2 + 136))(a2) >= a6)
            {
              goto LABEL_177;
            }
            unint64_t v61 = v55 + 1;
            uint64_t v62 = (char *)__p;
            float v63 = v151;
            unint64_t v64 = (v151 - (unsigned char *)__p) >> 2;
            while (v64 <= v61)
            {
              if (v63 >= v152)
              {
                unint64_t v66 = v64 + 1;
                if ((v64 + 1) >> 62) {
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v67 = v152 - v62;
                if ((v152 - v62) >> 1 > v66) {
                  unint64_t v66 = v67 >> 1;
                }
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v68 = v66;
                }
                if (v68)
                {
                  uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v152, v68);
                  uint64_t v62 = (char *)__p;
                  float v63 = v151;
                }
                else
                {
                  uint64_t v69 = 0;
                }
                uint64_t v70 = &v69[4 * v64];
                *(_DWORD *)uint64_t v70 = 0;
                __n128 v65 = v70 + 4;
                while (v63 != v62)
                {
                  int v71 = *((_DWORD *)v63 - 1);
                  v63 -= 4;
                  *((_DWORD *)v70 - 1) = v71;
                  v70 -= 4;
                }
                std::string __p = v70;
                unint64_t v151 = v65;
                uint64_t v152 = &v69[4 * v68];
                if (v62)
                {
                  operator delete(v62);
                  uint64_t v62 = (char *)__p;
                }
                else
                {
                  uint64_t v62 = v70;
                }
              }
              else
              {
                *(_DWORD *)float v63 = 0;
                __n128 v65 = v63 + 4;
              }
              unint64_t v151 = v65;
              unint64_t v64 = (v65 - v62) >> 2;
              float v63 = v65;
            }
            int v72 = *(_DWORD *)&v62[4 * v61];
            *(_DWORD *)&v62[4 * v61] = v72 + 1;
            if (v55 == -1)
            {
              uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
              int v105 = *fst::TropicalWeightTpl<float>::One();
              *(void *)&long long v144 = 0;
              *((void *)&v144 + 1) = __PAIR64__(v53, v105);
              (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 184))(a2, v104, &v144);
              if (*(_DWORD *)__p != a4) {
                goto LABEL_177;
              }
              goto LABEL_178;
            }
            if (v72 >= a4) {
              goto LABEL_177;
            }
            unint64_t v146 = 0;
            long long v144 = 0u;
            long long v145 = 0u;
            (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)a1 + 120))(a1, v55, &v144);
            while (1)
            {
              if (!(void)v144)
              {
                if (v146 >= (unint64_t)v145) {
                  goto LABEL_134;
                }
LABEL_87:
                uint64_t v73 = *((void *)&v144 + 1) + 16 * v146;
                goto LABEL_88;
              }
              if ((*(unsigned int (**)(void))(*(void *)v144 + 16))(v144)) {
                break;
              }
              if (!(void)v144) {
                goto LABEL_87;
              }
              uint64_t v73 = (*(uint64_t (**)(void))(*(void *)v144 + 24))();
LABEL_88:
              float v74 = *(float *)(v73 + 8);
              int v75 = *(_DWORD *)(v73 + 12);
              uint64_t v141 = *(void *)v73;
              float v142 = v74;
              int v143 = v75;
              if (v56 == -INFINITY || v74 >= -INFINITY && v74 <= -INFINITY)
              {
                float v76 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
              }
              else
              {
                BOOL v77 = v74 == INFINITY || v56 == INFINITY;
                float v78 = v56 + v74;
                if (v77) {
                  float v76 = INFINITY;
                }
                else {
                  float v76 = v78;
                }
              }
              uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
              int v80 = v143;
              int v81 = v160;
              if ((unint64_t)v160 >= v161[0])
              {
                uint64_t v83 = (v160 - v159) >> 3;
                unint64_t v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 61) {
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v85 = v161[0] - (void)v159;
                if ((uint64_t)(v161[0] - (void)v159) >> 2 > v84) {
                  unint64_t v84 = v85 >> 2;
                }
                if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v86 = v84;
                }
                unint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v161, v86);
                int v89 = &v88[8 * v83];
                *(_DWORD *)int v89 = v80;
                *((float *)v89 + 1) = v76;
                unint64_t v90 = v159;
                unint64_t v91 = v160;
                uint64_t v92 = v89;
                while (v91 != v90)
                {
                  int v93 = *((_DWORD *)v91 - 2);
                  v91 -= 8;
                  *((_DWORD *)v92 - 2) = v93;
                  v92 -= 8;
                  *((_DWORD *)v92 + 1) = *((_DWORD *)v91 + 1);
                }
                unint64_t v82 = v89 + 8;
                uint64_t v159 = v92;
                uint64_t v160 = v89 + 8;
                v161[0] = &v88[8 * v87];
                if (v90) {
                  operator delete(v90);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v160 = v143;
                *((float *)v81 + 1) = v76;
                unint64_t v82 = v81 + 8;
              }
              uint64_t v160 = v82;
              int v143 = v53;
              (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v79, &v141);
              unint64_t v94 = v155;
              if (v155 >= v156)
              {
                float v96 = v154;
                uint64_t v97 = v155 - v154;
                unint64_t v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 62) {
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v99 = (char *)v156 - (char *)v154;
                if (((char *)v156 - (char *)v154) >> 1 > v98) {
                  unint64_t v98 = v99 >> 1;
                }
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v100 = v98;
                }
                if (v100)
                {
                  uint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v156, v100);
                  float v96 = v154;
                  unint64_t v94 = v155;
                }
                else
                {
                  uint64_t v101 = 0;
                }
                unint64_t v102 = (int *)&v101[4 * v97];
                *unint64_t v102 = v79;
                uint64_t v95 = (uint64_t)(v102 + 1);
                while (v94 != v96)
                {
                  int v103 = *--v94;
                  *--unint64_t v102 = v103;
                }
                uint64_t v154 = v102;
                uint64_t v155 = (int *)v95;
                int v156 = (int *)&v101[4 * v100];
                if (v96) {
                  operator delete(v96);
                }
              }
              else
              {
                *uint64_t v155 = v79;
                uint64_t v95 = (uint64_t)(v94 + 1);
              }
              uint64_t v155 = (int *)v95;
              v138[0] = &v159;
              v138[1] = a3;
              int v139 = -1;
              float v140 = a7;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v154, v95, (uint64_t)v138, (v95 - (uint64_t)v154) >> 2);
              if ((void)v144) {
                (*(void (**)(void))(*(void *)v144 + 32))(v144);
              }
              else {
                ++v146;
              }
            }
            if ((void)v144)
            {
              (*(void (**)(void))(*(void *)v144 + 8))();
            }
            else
            {
LABEL_134:
              if (*((void *)&v145 + 1)) {
                --**((_DWORD **)&v145 + 1);
              }
            }
            (*(void (**)(long long *__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 24))(&v144, a1, v55);
            LODWORD(v106) = v144;
            char v107 = fst::TropicalWeightTpl<float>::Zero();
            *(float *)&long long v144 = v106;
            LODWORD(v141) = 0;
            LODWORD(v141) = *v107;
            if (v106 != *(float *)&v141)
            {
              if (v56 == -INFINITY || v106 >= -INFINITY && v106 <= -INFINITY)
              {
                float v108 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
              }
              else if (v106 == INFINITY || v56 == INFINITY)
              {
                float v108 = INFINITY;
              }
              else
              {
                float v108 = v56 + v106;
              }
              uint64_t v110 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
              uint64_t v111 = v160;
              if ((unint64_t)v160 >= v161[0])
              {
                uint64_t v113 = (v160 - v159) >> 3;
                unint64_t v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 61) {
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v115 = v161[0] - (void)v159;
                if ((uint64_t)(v161[0] - (void)v159) >> 2 > v114) {
                  unint64_t v114 = v115 >> 2;
                }
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v116 = v114;
                }
                unint64_t v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)v161, v116);
                uint64_t v119 = &v118[8 * v113];
                *(_DWORD *)uint64_t v119 = -1;
                *((float *)v119 + 1) = v108;
                char v120 = v159;
                int v121 = v160;
                int v122 = v119;
                while (v121 != v120)
                {
                  int v123 = *((_DWORD *)v121 - 2);
                  v121 -= 8;
                  *((_DWORD *)v122 - 2) = v123;
                  v122 -= 8;
                  *((_DWORD *)v122 + 1) = *((_DWORD *)v121 + 1);
                }
                uint64_t v112 = v119 + 8;
                uint64_t v159 = v122;
                uint64_t v160 = v119 + 8;
                v161[0] = &v118[8 * v117];
                if (v120) {
                  operator delete(v120);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v160 = -1;
                *((float *)v111 + 1) = v108;
                uint64_t v112 = v111 + 8;
              }
              uint64_t v160 = v112;
              *(void *)&long long v144 = 0;
              *((void *)&v144 + 1) = __PAIR64__(v53, LODWORD(v106));
              (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 184))(a2, v110, &v144);
              char v124 = v155;
              if (v155 >= v156)
              {
                uint64_t v126 = v154;
                uint64_t v127 = v155 - v154;
                unint64_t v128 = v127 + 1;
                if ((unint64_t)(v127 + 1) >> 62) {
                  std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v129 = (char *)v156 - (char *)v154;
                if (((char *)v156 - (char *)v154) >> 1 > v128) {
                  unint64_t v128 = v129 >> 1;
                }
                if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v130 = v128;
                }
                if (v130)
                {
                  Swift::String_optional v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v156, v130);
                  uint64_t v126 = v154;
                  char v124 = v155;
                }
                else
                {
                  Swift::String_optional v131 = 0;
                }
                uint64_t v132 = (int *)&v131[4 * v127];
                *uint64_t v132 = v110;
                uint64_t v125 = (uint64_t)(v132 + 1);
                while (v124 != v126)
                {
                  int v133 = *--v124;
                  *--uint64_t v132 = v133;
                }
                uint64_t v154 = v132;
                uint64_t v155 = (int *)v125;
                int v156 = (int *)&v131[4 * v130];
                if (v126) {
                  operator delete(v126);
                }
              }
              else
              {
                *uint64_t v155 = v110;
                uint64_t v125 = (uint64_t)(v124 + 1);
              }
              uint64_t v155 = (int *)v125;
              v135[0] = &v159;
              v135[1] = a3;
              int v136 = -1;
              float v137 = a7;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v154, v125, (uint64_t)v135, (v125 - (uint64_t)v154) >> 2);
            }
LABEL_177:
            unint64_t v49 = v154;
            int v48 = (char *)v155;
            if (v154 == v155) {
LABEL_178:
            }
              fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
          }
        }
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)a1 + 56))(a1, 4, 0, v15)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 4, 4);
  }
  if (v159)
  {
    uint64_t v160 = v159;
    operator delete(v159);
  }
}

void sub_23AC1994C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v36 = *(void **)(v34 - 176);
  if (v36)
  {
    *(void *)(v34 - 168) = v36;
    operator delete(v36);
  }
  char v37 = *(void **)(v34 - 144);
  if (v37)
  {
    *(void *)(v34 - 136) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFst(void *a1)
{
  *a1 = &unk_26EE2E010;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL fst::internal::FirstPathSelect<int,fst::TropicalWeightTpl<float>,fst::AutoQueue<int>>::operator()(uint64_t a1, uint64_t a2, float *a3, float *a4)
{
  float v5 = *a3;
  if (*a3 == -INFINITY || *a4 >= -INFINITY && *a4 <= -INFINITY)
  {
    float v5 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else if (v5 >= *a4)
  {
    float v5 = *a4;
  }
  return *a4 == v5;
}

int *std::vector<fst::TropicalWeightTpl<float>>::__swap_out_circular_buffer(int **a1, void *a2, int *a3)
{
  uint64_t result = (int *)a2[1];
  float v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = (int *)a2[1];
    do
    {
      int v8 = *--v7;
      *--uint64_t v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = a1[1];
  for (unint64_t i = (_DWORD *)a2[2]; a3 != v9; ++i)
  {
    int v11 = *a3++;
    *unint64_t i = v11;
  }
  a2[2] = i;
  int v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = (int *)a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = (int *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (int *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (int *)(a2 - 4);
    uint64_t result = fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (int *)(v6 + 4 * v7);
        uint64_t result = fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = **(void **)a1;
  unint64_t v7 = (int *)(v6 + 8 * a2);
  uint64_t v8 = (int *)(v6 + 8 * a3);
  fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::PWeight(a1, *v7, (int *)&v26);
  if (v26 == -INFINITY || (float v9 = *(float *)(v6 + 8 * a2 + 4), v9 >= -INFINITY) && v9 <= -INFINITY)
  {
    float v10 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    BOOL v11 = v9 == INFINITY || v26 == INFINITY;
    float v10 = v26 + v9;
    if (v11) {
      float v10 = INFINITY;
    }
  }
  float v27 = v10;
  fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::PWeight(a1, *v8, (int *)&v25);
  if (v25 == -INFINITY || (float v12 = *(float *)(v6 + 8 * a3 + 4), v12 >= -INFINITY) && v12 <= -INFINITY)
  {
    float v13 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
  }
  else
  {
    BOOL v14 = v12 == INFINITY || v25 == INFINITY;
    float v13 = v25 + v12;
    if (v14) {
      float v13 = INFINITY;
    }
  }
  float v26 = v13;
  int v15 = *v7;
  int v16 = *(_DWORD *)(a1 + 16);
  int v17 = *v8;
  uint64_t v18 = a1 + 24;
  if (*v7 != v16 || v17 == v16)
  {
    LODWORD(result) = fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(v18, &v26, &v27);
    int v21 = result;
    BOOL v22 = v15 != v16 && v17 == v16;
    if (v22) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (v22 && v21)
    {
      float v23 = *(float *)(a1 + 20);
      return v27 > (float)(v23 + v26) || v26 > (float)(v23 + v27);
    }
  }
  else if (fst::NaturalLess<fst::TropicalWeightTpl<float>,void>::operator()(v18, &v26, &v27))
  {
    return 1;
  }
  else
  {
    float v24 = *(float *)(a1 + 20);
    return v27 <= (float)(v24 + v26) && v26 <= (float)(v24 + v27);
  }
  return result;
}

float fst::internal::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::PWeight@<S0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 16) == a2)
  {
    unint64_t v4 = fst::TropicalWeightTpl<float>::One();
  }
  else
  {
    uint64_t v5 = **(void **)(a1 + 8);
    if (a2 >= (unint64_t)((*(void *)(*(void *)(a1 + 8) + 8) - v5) >> 2)) {
      unint64_t v4 = fst::TropicalWeightTpl<float>::Zero();
    }
    else {
      unint64_t v4 = (int *)(v5 + 4 * a2);
    }
  }
  float result = *(float *)v4;
  *a3 = *v4;
  return result;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  std::allocate_shared[abi:ne180100]<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,void>((uint64_t)&v7, a2, &v6, &v5, a5);
}

void sub_23AC1A088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *BOOL v14 = v15;
  int v17 = (std::__shared_weak_count *)v14[2];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFst(void *a1)
{
  *a1 = &unk_26EE2E010;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_23AC1A284(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator()
{
}

void sub_23AC1A378(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void std::allocate_shared[abi:ne180100]<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,void>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  float v9 = operator new(0xD8uLL);
  std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,0>(v9, a2, a3, a4, a5);
}

void sub_23AC1A40C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> const&,std::vector<fst::TropicalWeightTpl<float>> const*&,std::vector<fst::TropicalWeightTpl<float>>*&,fst::DeterminizeFstOptions<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>> const&,std::allocator<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26EE2DB10;
  fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl((uint64_t)(a1 + 3), a2, *a3, *a4, a5);
}

void sub_23AC1A470(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2DB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EE2DB10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t std::__shared_ptr_emplace<fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_23AC1A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100](v19, 0);
  int v21 = (uint64_t *)v18[22];
  v18[22] = 0;
  if (v21) {
    std::default_delete<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator()[abi:ne180100]((uint64_t)(v18 + 22), v21);
  }
  fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_23AC1A948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = *(void *)(v15 + 136);
  *(void *)(v15 + 136) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_26EE2DC10;
  uint64_t v2 = a1[17];
  a1[17] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl((uint64_t)a1);
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2DB60;
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100]((void **)(a1 + 184), 0);
  uint64_t v2 = *(uint64_t **)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v2) {
    std::default_delete<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator()[abi:ne180100](a1 + 176, v2);
  }
  *(void *)a1 = &unk_26EE2DC10;
  uint64_t v3 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2DB60;
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100]((void **)(a1 + 184), 0);
  uint64_t v2 = *(uint64_t **)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v2) {
    std::default_delete<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator()[abi:ne180100](a1 + 176, v2);
  }
  *(void *)a1 = &unk_26EE2DC10;
  uint64_t v3 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0xFFFFFFFF0007);
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 56))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_23AC1AC9C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10F3C4045AD4555);
  _Unwind_Resume(a1);
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (float ***)v9;
  fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  unint64_t v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, v4 + 5);
      unint64_t v5 = v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = (float ***)v5;
          unint64_t v5 = (float **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (float ***)v4[2];
          BOOL v7 = *v6 == (float **)v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
    }
    while (v6 != v9);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_23AC1AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136));
  if (result != -1)
  {
    fst::TropicalWeightTpl<float>::One();
    operator new();
  }
  return result;
}

int *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  unint64_t v5 = *(float ***)(*(void *)(*(void *)(a1 + 184) + 112) + 8 * a2);
  uint64_t result = fst::TropicalWeightTpl<float>::Zero();
  float v7 = *(float *)result;
  *a3 = *result;
  for (unint64_t i = *v5; i; unint64_t i = *(float **)i)
  {
    uint64_t result = (int *)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 24))(&v12);
    float v9 = i[3];
    if (v9 == -INFINITY || *(float *)&v12 >= -INFINITY && *(float *)&v12 <= -INFINITY)
    {
      uint64_t result = fst::TropicalWeightTpl<float>::NoWeight();
      float v10 = *(float *)result;
    }
    else
    {
      BOOL v11 = *(float *)&v12 == INFINITY || v9 == INFINITY;
      float v10 = v9 + *(float *)&v12;
      if (v11) {
        float v10 = INFINITY;
      }
    }
    if (v7 == -INFINITY || v10 >= -INFINITY && v10 <= -INFINITY)
    {
      uint64_t result = fst::TropicalWeightTpl<float>::NoWeight();
      float v7 = *(float *)result;
    }
    else if (v7 >= v10)
    {
      float v7 = v10;
    }
    *(float *)a3 = v7;
    if (v7 >= -INFINITY && v7 <= -INFINITY) {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return result;
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26EE2D5B8;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26EE2DC60;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + --*(_DWORD *)(a9 + 60) = 0xFFFFFFFFLL;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_26EE2D5B8;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26EE2DC60;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + --*(_DWORD *)(a9 + 60) = 0xFFFFFFFFLL;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_23AC1B0C4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v2, 0x10A0C40690396FALL);
  if (*v3) {
    operator delete(*v3);
  }
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(uint64_t a1)
{
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x23ECC24B0);
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(uint64_t a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_23AC1B23C(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1 + 7);
  uint64_t v6 = *v3;
  if (*v3)
  {
    uint64_t v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(void *)(v2 + 8 * v3++), a1 + 9);
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (uint64_t *)(result + 24);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(v3 + 48));
    uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*a2);
    *(void *)(v3 + 64) = *(void *)(result + 56);
    *(void *)(result + 56) = v3;
  }
  return result;
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)**a1;
  if (v2)
  {
    v1[1] = (uint64_t)v2;
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(v1 + 3, v2, (v1[2] - (uint64_t)v2) >> 4);
  }
}

void fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*a1);
    if (!__p) {
      return;
    }
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*a1);
    if (!__p) {
      return;
    }
    __p[2] = *(void *)(v4 + 56);
LABEL_22:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*a1);
    if (!__p) {
      return;
    }
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*a1);
    if (!__p) {
      return;
    }
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*a1);
    if (!__p) {
      return;
    }
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*a1);
    if (!__p) {
      return;
    }
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*a1);
    if (!__p) {
      return;
    }
    __p[128] = *(void *)(v4 + 56);
    goto LABEL_22;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x11uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_23AC1B5B4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B648;
  a1[1] = &unk_26EE2B670;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x21uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_23AC1B7B4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B708;
  a1[1] = &unk_26EE2B730;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_23AC1B9B4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_23AC1BBB4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_23AC1BDB4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_23AC1BFB8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x401uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_23AC1C1BC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x41uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_23AC1C3BC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B7C8;
  a1[1] = &unk_26EE2B7F0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x81uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_23AC1C5BC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B888;
  a1[1] = &unk_26EE2B8B0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x101uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_23AC1C7BC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2B948;
  a1[1] = &unk_26EE2B970;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x201uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_23AC1C9C0(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BA08;
  a1[1] = &unk_26EE2BA30;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x401uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_23AC1CBC4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BAC8;
  a1[1] = &unk_26EE2BAF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x800)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x801uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x4000)) {
    operator new();
  }
  return *(void *)(v1 + 0x4000);
}

void sub_23AC1CDC8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BCC8;
  a1[1] = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BCC8;
  a1[1] = &unk_26EE2BCF0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x8007)
  {
    std::vector<std::unique_ptr<fst::MemoryPoolBase>>::resize((uint64_t *)(a1 + 16), 0x1001uLL);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x8000)) {
    operator new();
  }
  return *(void *)(v1 + 0x8000);
}

void sub_23AC1CFD4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void *fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BD88;
  a1[1] = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  return a1;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = &unk_26EE2BD88;
  a1[1] = &unk_26EE2BDB0;
  std::__list_imp<std::unique_ptr<char []>>::clear(a1 + 4);
  JUMPOUT(0x23ECC24B0);
}

uint64_t fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26EE2DC60;
  if (*(unsigned char *)(a1 + 129))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 120);
    if (v2)
    {
      uint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorCacheStore(v2);
      MEMORY[0x23ECC24B0](v3, 0x10A0C40690396FALL);
    }
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4) {
    operator delete(v4);
  }
  return fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorCacheStore(uint64_t *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(a1);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 10);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 9);
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(a1 + 7);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  *a1 = a3;
  if (!a4) {
    operator new();
  }
  a1[1] = a4;
  a1[2] = a1;
  a1[3] = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set();
}

void sub_23AC1D274(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x23ECC24B0](v3, 0xC400A2AC0F1);
  }
  _Unwind_Resume(exception_object);
}

void std::unordered_set<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set()
{
}

void sub_23AC1D3C8(_Unwind_Exception *a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(a1, *(void **)(a1 + 24));
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator((uint64_t *)(a1 + 32));
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*(void *)(v3 + 32));
      v2[3] = *(void *)(result + 56);
      *(void *)(result + 56) = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

void *std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(result);
    JUMPOUT(0x23ECC24B0);
  }
  return result;
}

void *fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(void *a1)
{
  uint64_t v4 = a1 + 14;
  uint64_t v2 = (void *)a1[14];
  uint64_t v3 = v4[1];
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (void **)v2[v5];
      if (v6)
      {
        float v7 = *v6;
        if (*v6)
        {
          do
          {
            uint64_t v8 = (void *)*v7;
            operator delete(v7);
            float v7 = v8;
          }
          while (v8);
        }
        void *v6 = 0;
        MEMORY[0x23ECC24B0](v6, 0x1020C405F07FB98);
        uint64_t v2 = (void *)a1[14];
        uint64_t v3 = a1[15];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  uint64_t v9 = a1[2];
  a1[2] = 0;
  if (v9) {
    MEMORY[0x23ECC24B0](v9, 0xC400A2AC0F1);
  }
  uint64_t v10 = a1[1];
  a1[1] = 0;
  if (v10) {
    MEMORY[0x23ECC24B0](v10, 0xC400A2AC0F1);
  }
  return a1;
}

void std::default_delete<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x23ECC24B0);
  }
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_23AC1D7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::reset[abi:ne180100](v19, 0);
  int v21 = (uint64_t *)v18[22];
  v18[22] = 0;
  if (v21) {
    std::default_delete<fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator()[abi:ne180100]((uint64_t)(v18 + 22), v21);
  }
  fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_23AC1D980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 136);
  *(void *)(v15 + 136) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void sub_23AC1DB7C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECC24B0](v3, 0x10A0C40690396FALL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::internal::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 64) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    if (*(_DWORD *)(a2 + 92) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 96) = MutableState;
  }
  return a1;
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v13 = a2;
  uint64_t v3 = a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 8;
  if (a2 >= (unint64_t)((v6 - v5) >> 3))
  {
    uint64_t v12 = 0;
    std::vector<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(v4, a2 + 1, &v12);
  }
  else
  {
    float v7 = *(void **)(v5 + 8 * a2);
    if (v7) {
      return v7;
    }
  }
  float v7 = fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::allocate((uint64_t *)(a1 + 72), 1uLL);
  *(_DWORD *)float v7 = *fst::TropicalWeightTpl<float>::Zero();
  void v7[5] = 0;
  *(_OWORD *)(v7 + 3) = 0u;
  *(_OWORD *)(v7 + 1) = 0u;
  uint64_t v8 = *(void *)(a1 + 80);
  v7[6] = v8;
  ++*(void *)(v8 + 8);
  v7[7] = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = v7;
  if (*(unsigned char *)a1)
  {
    uint64_t v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(a1 + 32, 0, 0, &v13);
    uint64_t v10 = *(void *)(a1 + 32);
    *uint64_t v9 = v10;
    v9[1] = a1 + 32;
    *(void *)(v10 + 8) = v9;
    *(void *)(a1 + 32) = v9;
    ++*(void *)(a1 + 48);
  }
  return v7;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  int v23 = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        uint64_t v8 = fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::allocate(a1 + 9, 1uLL);
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v7 + 8);
        std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::vector<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,0>(v8 + 3, *(void *)(v7 + 24), *(void *)(v7 + 32), a1 + 10);
        *((_DWORD *)v8 + 14) = *(_DWORD *)(v7 + 56);
        *((_DWORD *)v8 + 15) = 0;
        if (*(unsigned char *)a1)
        {
          uint64_t v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>((uint64_t)(a1 + 4), 0, 0, &v23);
          uint64_t v10 = a1[4];
          *uint64_t v9 = v10;
          v9[1] = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v8;
        int v13 = v19 + 8;
        int v21 = (char *)a1[1];
        unint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          unint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        int v13 = v12 + 1;
      }
      a1[2] = v13;
      unint64_t v6 = ++v23;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

void *fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<2>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<136ul>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<72ul>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<4>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<264ul>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<8>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<520ul>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<16>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<1032ul>::Allocate((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<32>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<2056ul>::Allocate((void *)(v2 + 8), 1);
      result[256] = 0;
      return result;
    }
    uint64_t v4 = result[256];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<64>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<4104ul>::Allocate((void *)(v2 + 8), 1);
      result[512] = 0;
      return result;
    }
    uint64_t v4 = result[512];
    goto LABEL_26;
  }
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::vector<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *a4;
  a1[3] = *a4;
  ++*(void *)(v5 + 8);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>>(a1, a2, a3, (a3 - a2) >> 4);
  return a1;
}

void sub_23AC1E118(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~PoolAllocator(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 12) = *(_DWORD *)(a2 + 12);
      v7 += 16;
      a2 += 16;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23AC1E1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate(a1 + 3, a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * a2];
  return result;
}

void *fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<40ul>::Allocate((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<24ul>::Allocate((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<72ul>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<136ul>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<264ul>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<520ul>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*a1);
    uint64_t result = *(void **)(v2 + 56);
    if (!result)
    {
      uint64_t result = (void *)fst::internal::MemoryArenaImpl<1032ul>::Allocate((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, void *a3)
{
  uint64_t v5 = **(float ***)(*(void *)(a1[23] + 112) + 8 * a2);
  if (!v5) {
    goto LABEL_26;
  }
  do
  {
    uint64_t v6 = *((unsigned int *)v5 + 2);
    uint64_t v7 = a1[17];
    long long v20 = 0u;
    long long v21 = 0u;
    unint64_t v22 = 0;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v7 + 120))(v7, v6, &v20);
    while (1)
    {
      if (!(void)v20)
      {
        if (v22 >= (unint64_t)v21) {
          goto LABEL_23;
        }
LABEL_8:
        uint64_t v8 = *((void *)&v20 + 1) + 16 * v22;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v20 + 16))(v20)) {
        break;
      }
      if (!(void)v20) {
        goto LABEL_8;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v20 + 24))();
LABEL_9:
      int v9 = *(_DWORD *)(v8 + 12);
      float v10 = v5[3];
      if (v10 == -INFINITY || (float v11 = *(float *)(v8 + 8), v11 >= -INFINITY) && v11 <= -INFINITY)
      {
        float v12 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        BOOL v13 = v11 == INFINITY || v10 == INFINITY;
        float v12 = v10 + v11;
        if (v13) {
          float v12 = INFINITY;
        }
      }
      v19[0] = v9;
      *(float *)&v19[1] = v12;
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 2), v19, (uint64_t)a3);
      if ((void)v20) {
        (*(void (**)(void))(*(void *)v20 + 32))(v20);
      }
      else {
        ++v22;
      }
    }
    if ((void)v20)
    {
      (*(void (**)(void))(*(void *)v20 + 8))();
      goto LABEL_25;
    }
LABEL_23:
    if (*((void *)&v21 + 1)) {
      --**((_DWORD **)&v21 + 1);
    }
LABEL_25:
    uint64_t v5 = *(float **)v5;
  }
  while (v5);
LABEL_26:
  uint64_t v16 = (void *)*a3;
  uint64_t v14 = a3 + 1;
  uint64_t v15 = v16;
  if (v16 != v14)
  {
    do
    {
      fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      unint64_t v17 = (void *)v15[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          unint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v15[2];
          BOOL v13 = *v18 == (void)v15;
          uint64_t v15 = v18;
        }
        while (!v13);
      }
      uint64_t v15 = v18;
    }
    while (v18 != v14);
  }
}

void sub_23AC1E638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, float ***a3)
{
  int v5 = *(_DWORD *)a3;
  int v6 = *((_DWORD *)a3 + 1);
  int State = fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(a1, a3[1]);
  v10[0] = v5;
  v10[1] = v5;
  uint64_t v10[2] = v6;
  v10[3] = State;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::push_back[abi:ne180100](MutableState + 3, (uint64_t)v10);
}

void fst::internal::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = MutableState[3];
  uint64_t v6 = MutableState[4] - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 4;
    int v8 = *(_DWORD *)(a1 + 64);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (int *)(v5 + 12);
    do
    {
      int v11 = *v9;
      v9 += 4;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 64) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 14) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int v11 = a2;
  uint64_t v6 = std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v11);
  if (*((_DWORD *)v6 + 10) == -1)
  {
    fst::TropicalWeightTpl<float>::Zero();
    operator new();
  }
  unint64_t v7 = (uint64_t *)v6[6];
  uint64_t v8 = *v7;
  int v9 = operator new(0x10uLL);
  *(void *)int v9 = v8;
  _OWORD v9[2] = *a4;
  v9[3] = a4[1];
  *unint64_t v7 = (uint64_t)v9;
  return 1;
}

void fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t ***)(a2 + 8);
  std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::sort[abi:ne180100](v4);
  uint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = *v4;
    do
    {
      float v7 = *(float *)(a2 + 4);
      if (v7 == -INFINITY || (float v8 = *((float *)v6 + 3), v8 >= -INFINITY) && v8 <= -INFINITY)
      {
        float v7 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else if (v7 >= v8)
      {
        float v7 = *((float *)v6 + 3);
      }
      *(float *)(a2 + 4) = v7;
      if (v5 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v5 + 2))
      {
        int v11 = (uint64_t *)*v6;
        uint64_t v5 = v6;
      }
      else
      {
        float v9 = *((float *)v5 + 3);
        if (v9 == -INFINITY || (float v10 = *((float *)v6 + 3), v10 >= -INFINITY) && v10 <= -INFINITY)
        {
          float v9 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
        }
        else if (v9 >= v10)
        {
          float v9 = *((float *)v6 + 3);
        }
        *((float *)v5 + 3) = v9;
        if (v9 >= -INFINITY && v9 <= -INFINITY) {
          *(void *)(a1 + 8) |= 4uLL;
        }
        int v11 = (uint64_t *)*v6;
        float v12 = (void *)*v5;
        *uint64_t v5 = *(void *)*v5;
        operator delete(v12);
      }
      uint64_t v6 = v11;
    }
    while (v11);
    for (unint64_t i = *v4; i; unint64_t i = (uint64_t *)*i)
    {
      float v14 = *((float *)i + 3);
      if (v14 == -INFINITY || (float v15 = *(float *)(a2 + 4), v15 >= -INFINITY) && v15 <= -INFINITY)
      {
        float v16 = *(float *)fst::TropicalWeightTpl<float>::NoWeight();
      }
      else
      {
        BOOL v17 = v14 == INFINITY;
        float v16 = v14 - v15;
        if (v17) {
          float v16 = INFINITY;
        }
        if (v15 == INFINITY) {
          float v16 = NAN;
        }
      }
      if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
        float v16 = *(float *)(a1 + 144) * floorf((float)(v16 / *(float *)(a1 + 144)) + 0.5);
      }
      *((float *)i + 3) = v16;
    }
  }
}

uint64_t *std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        float v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    float v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

float std::__tree<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::internal::DeterminizeArc<fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<S0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  int v7 = fst::TropicalWeightTpl<float>::Zero();
  float result = *(float *)v7;
  v6[11] = *v7;
  *((void *)v6 + 6) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_23AC1EB80(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::sort[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2;
    do
    {
      ++v3;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v3 = 0;
  }
  float result = std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(v2, v3, (uint64_t)&v6);
  *a1 = result;
  return result;
}

uint64_t *std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a2 >= 2)
  {
    if (a2 == 2)
    {
      uint64_t v3 = (void *)*result;
      if (*(_DWORD *)(*result + 8) < *((_DWORD *)result + 2))
      {
        void *v3 = result;
        uint64_t *result = 0;
        return v3;
      }
    }
    else
    {
      if (a2 >= 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = a2 + 1;
      }
      uint64_t v7 = v6 >> 1;
      uint64_t v8 = a2 - (v6 >> 1);
      int v9 = result;
      if (a2 >= 4)
      {
        unint64_t v10 = v7;
        int v9 = result;
        do
        {
          --v10;
          int v9 = (uint64_t *)*v9;
        }
        while (v10 > 1);
      }
      int v11 = (uint64_t *)*v9;
      *int v9 = 0;
      float v12 = (uint64_t *)std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(result, v7, a3);
      BOOL v13 = (uint64_t *)std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(v11, v8, a3);
      return std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__merge<std::__less<void,void>>(v12, v13);
    }
  }
  return result;
}

uint64_t *std::forward_list<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__merge<std::__less<void,void>>(uint64_t *a1, uint64_t *a2)
{
  if (a1)
  {
    if (a2)
    {
      int v2 = *((_DWORD *)a1 + 2);
      if (*((_DWORD *)a2 + 2) >= v2)
      {
        uint64_t v3 = a2;
        a2 = a1;
      }
      else
      {
        uint64_t v3 = a2;
        do
        {
          uint64_t v4 = (uint64_t **)v3;
          uint64_t v3 = (uint64_t *)*v3;
        }
        while (v3 && *((_DWORD *)v3 + 2) < v2);
        *uint64_t v4 = a1;
      }
      uint64_t v5 = *a1;
      BOOL v6 = v3 != 0;
      if (*a1) {
        BOOL v7 = v3 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        do
        {
          uint64_t v8 = (uint64_t *)v5;
          int v9 = *(_DWORD *)(v5 + 8);
          if (*((_DWORD *)v3 + 2) < v9)
          {
            unint64_t v10 = v3;
            do
            {
              int v11 = (uint64_t **)v10;
              unint64_t v10 = (uint64_t *)*v10;
            }
            while (v10 && *((_DWORD *)v10 + 2) < v9);
            *a1 = (uint64_t)v3;
            uint64_t v3 = *v11;
            *int v11 = v8;
          }
          uint64_t v5 = *v8;
          BOOL v6 = v3 != 0;
          if (*v8) {
            BOOL v12 = v3 == 0;
          }
          else {
            BOOL v12 = 1;
          }
          a1 = v8;
        }
        while (!v12);
        a1 = v8;
      }
      if (v6) {
        *a1 = (uint64_t)v3;
      }
    }
    else
    {
      return a1;
    }
  }
  return a2;
}

uint64_t fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), (void **)a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if ((int)State >= (unint64_t)((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2))
    {
      fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, &v20);
      unint64_t v7 = *(void *)(v6 + 16);
      uint64_t v8 = *(_DWORD **)(v6 + 8);
      if ((unint64_t)v8 >= v7)
      {
        unint64_t v10 = *(_DWORD **)v6;
        uint64_t v11 = ((uint64_t)v8 - *(void *)v6) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
          unint64_t v10 = *(_DWORD **)v6;
          uint64_t v8 = *(_DWORD **)(v6 + 8);
        }
        else
        {
          float v15 = 0;
        }
        float v16 = &v15[4 * v11];
        BOOL v17 = &v15[4 * v14];
        *(_DWORD *)float v16 = v20;
        int v9 = v16 + 4;
        while (v8 != v10)
        {
          int v18 = *--v8;
          *((_DWORD *)v16 - 1) = v18;
          v16 -= 4;
        }
        *(void *)uint64_t v6 = v16;
        *(void *)(v6 + 8) = v9;
        *(void *)(v6 + 16) = v17;
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *uint64_t v8 = v20;
        int v9 = v8 + 1;
      }
      *(void *)(v6 + 8) = v9;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::FindState(void *a1, void **a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = (a1[15] - a1[14]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if (Id != v2)
  {
    uint64_t v4 = v8;
    if (v8)
    {
      uint64_t v5 = *v8;
      if (*v8)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          operator delete(v5);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      *uint64_t v4 = 0;
      MEMORY[0x23ECC24B0](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

int *fst::internal::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, float **a2@<X1>, int *a3@<X8>)
{
  float result = fst::TropicalWeightTpl<float>::Zero();
  float v7 = *(float *)result;
  *a3 = *result;
  for (unint64_t i = *a2; i; unint64_t i = *(float **)i)
  {
    unint64_t v9 = *((int *)i + 2);
    uint64_t v10 = **(void **)(a1 + 152);
    if (v9 >= (*(void *)(*(void *)(a1 + 152) + 8) - v10) >> 2) {
      float result = fst::TropicalWeightTpl<float>::Zero();
    }
    else {
      float result = (int *)(v10 + 4 * v9);
    }
    float v11 = i[3];
    if (v11 == -INFINITY || (float v12 = *(float *)result, *(float *)result >= -INFINITY) && *(float *)result <= -INFINITY)
    {
      float result = fst::TropicalWeightTpl<float>::NoWeight();
      float v13 = *(float *)result;
    }
    else
    {
      BOOL v14 = v11 == INFINITY || v12 == INFINITY;
      float v13 = v12 + v11;
      if (v14) {
        float v13 = INFINITY;
      }
    }
    if (v7 == -INFINITY || v13 >= -INFINITY && v13 <= -INFINITY)
    {
      float result = fst::TropicalWeightTpl<float>::NoWeight();
      float v7 = *(float *)result;
    }
    else if (v7 >= v13)
    {
      float v7 = v13;
    }
    *(float *)a3 = v7;
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[16] = a2;
  uint64_t v4 = a1 + 4;
  if (!a3)
  {
    uint64_t v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::find<int>(v4, &fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v6 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v4, &fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey, &fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (!v7) {
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v8 = a1[13];
  unint64_t v9 = (void *)a1[14];
  uint64_t v10 = ((uint64_t)v9 - v8) >> 3;
  *((_DWORD *)v6 + 4) = v10;
  unint64_t v11 = a1[15];
  if ((unint64_t)v9 >= v11)
  {
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v11 - v8;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v14 = v10 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<CMDPToken>>>((uint64_t)(a1 + 15), v15);
    }
    else {
      float v16 = 0;
    }
    BOOL v17 = &v16[8 * v10];
    int v18 = &v16[8 * v15];
    *(void *)BOOL v17 = *a2;
    float v12 = v17 + 8;
    int v20 = (char *)a1[13];
    uint64_t v19 = (char *)a1[14];
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)a1[13];
    }
    a1[13] = v17;
    a1[14] = v12;
    a1[15] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *unint64_t v9 = *a2;
    float v12 = v9 + 1;
  }
  a1[14] = v12;
  return v10;
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v7 = fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(a1 + 48), *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    float v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t *)(a1 + 32), 1uLL);
  *unint64_t i = 0;
  i[1] = v8;
  *((_DWORD *)i + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v16 = *(float *)(a1 + 56);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)3>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(void *)(result + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_23AC1F408(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

unint64_t fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(uint64_t *a1, int a2)
{
  if (a2 < -1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (a2 == -1) {
    unint64_t v3 = *(uint64_t ****)(v2 + 128);
  }
  else {
    unint64_t v3 = (uint64_t ***)(*(void *)(v2 + 104) + 8 * a2);
  }
  uint64_t v5 = *v3;
  for (unint64_t result = *((char *)v5 + 8);
        ;
        result ^= (2 * result) ^ (32 * *((int *)v5 + 2)) ^ ((unint64_t)*((int *)v5 + 2) >> 59) ^ *((unsigned int *)v5 + 3))
  {
    uint64_t v5 = (uint64_t **)*v5;
    if (!v5) {
      break;
    }
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 == a3) {
    return 1;
  }
  uint64_t result = 0;
  if (a2 >= -1 && a3 >= -1)
  {
    uint64_t v5 = *a1;
    if (a2 == -1) {
      uint64_t v6 = *(uint64_t **)(v5 + 128);
    }
    else {
      uint64_t v6 = (uint64_t *)(*(void *)(v5 + 104) + 8 * a2);
    }
    uint64_t v7 = *v6;
    if (a3 == -1) {
      unint64_t v8 = *(uint64_t ***)(v5 + 128);
    }
    else {
      unint64_t v8 = (uint64_t **)(*(void *)(v5 + 104) + 8 * a3);
    }
    if (*((unsigned __int8 *)*v8 + 8) == *(unsigned __int8 *)(v7 + 8)) {
      return std::operator==[abi:ne180100]<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(*v8, (uint64_t *)v7);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t std::operator==[abi:ne180100]<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,std::allocator<fst::internal::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t *a1, uint64_t *a2)
{
  while (1)
  {
    a1 = (uint64_t *)*a1;
    a2 = (uint64_t *)*a2;
    if (!a1 || a2 == 0) {
      break;
    }
    if (*((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2) || *((float *)a1 + 3) != *((float *)a2 + 3)) {
      return 0;
    }
  }
  return (a1 != 0) ^ (a2 == 0);
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::find<int>(void *a1, int *a2)
{
  unint64_t v4 = fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(a1 + 6, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    float v12 = a1 + 8;
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::internal::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v12, *((_DWORD *)v11 + 4), *a2))return v11; {
      }
        }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, a2);
  unint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 104))
  {
    int v5 = *((_DWORD *)MutableState + 14);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 14) = v5 | 4;
      unint64_t v6 = MutableState[4] - MutableState[3] + *(void *)(a1 + 128) + 64;
      *(void *)(a1 + 128) = v6;
      *(unsigned char *)(a1 + 120) = 1;
      if (v6 > *(void *)(a1 + 112)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

void *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2) {
    return *(void **)(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 96) = MutableState;
      *((_DWORD *)MutableState + 14) |= 4u;
      std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reserve(MutableState + 3, 0x80uLL);
      return *(void **)(a1 + 96);
    }
    uint64_t v5 = *(void *)(a1 + 96);
    if (!*(_DWORD *)(v5 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)uint64_t v5 = *fst::TropicalWeightTpl<float>::Zero();
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 32) = *(void *)(v5 + 24);
      uint64_t result = *(void **)(a1 + 96);
      *((_DWORD *)result + 14) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 56) &= ~4u;
    *(unsigned char *)(a1 + 88) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(uint64_t a1, void *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      LogMessage::LogMessage((BOOL *)v32, (uint64_t)__p);
      unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      unint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      uint8x8_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache size = ", 15);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      float v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)v32);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * a4);
    uint64_t v15 = *(void *)(a1 + 40);
LABEL_6:
    *(void *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      int v16 = *(_DWORD *)(v15 + 16);
      if (v16) {
        int v17 = v16 - 1;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 92);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, v17);
      unint64_t v19 = *(void *)(a1 + 128);
      if (v19 <= v14 || *((_DWORD *)MutableState + 15))
      {
LABEL_23:
        *((_DWORD *)MutableState + 14) &= ~8u;
        uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
        goto LABEL_6;
      }
      if (a3)
      {
        if (MutableState == a2) {
          goto LABEL_23;
        }
        int v20 = *((_DWORD *)MutableState + 14);
      }
      else
      {
        int v20 = *((_DWORD *)MutableState + 14);
        if ((v20 & 8) != 0 || MutableState == a2) {
          goto LABEL_23;
        }
      }
      if ((v20 & 4) != 0)
      {
        unint64_t v21 = MutableState[4] - MutableState[3] + 64;
        BOOL v22 = v19 > v21;
        unint64_t v23 = v19 - v21;
        if (v22) {
          *(void *)(a1 + 128) = v23;
        }
      }
      fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Delete((void *)a1);
      uint64_t v15 = *(void *)(a1 + 64);
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 128) <= v14)
    {
      unint64_t v24 = *(void *)(a1 + 128);
      if (v14)
      {
        if (v24 > v14)
        {
          uint64_t v25 = *(void *)(a1 + 112);
          do
          {
            v25 *= 2;
            BOOL v22 = v24 > 2 * v14;
            v14 *= 2;
          }
          while (v22);
          *(void *)(a1 + 112) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        LogMessage::LogMessage(&v35, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        LogMessage::~LogMessage((LogMessage *)&v35);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "INFO");
      LogMessage::LogMessage(&v34, (uint64_t)v32);
      float v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      float v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"), free recently cached = ", 26);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", cache size = ", 15);
      unint64_t v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", cache frac = ", 15);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", cache limit = ", 16);
      unint64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
      LogMessage::~LogMessage((LogMessage *)&v34);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
}

void sub_23AC1FB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    int v3 = result;
    if (a2 >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = result[1] - *result;
    v5[4] = result + 3;
    v5[0] = fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate(result + 3, a2);
    v5[1] = v5[0] + v4;
    uint64_t v5[2] = v5[0] + v4;
    void v5[3] = v5[0] + 16 * a2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v5);
    return (uint64_t *)std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_23AC1FC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(void *)a1) {
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(*(uint64_t **)(a1 + 32), *(void **)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[8] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 23))
  {
    *((_DWORD *)a1 + 23) = -1;
    a1[12] = 0;
  }
  return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(a1);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(void *a1)
{
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)), a1 + 9);
  *(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)) = 0;
  uint64_t v2 = (uint64_t *)a1[8];
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  a1[8] = v3;
  *(void *)(v4 + 8) = v3;
  *(void *)v2[1] = v4;
  --a1[6];
  return std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>((uint64_t)(a1 + 4), (uint64_t)v2);
}

uint64_t *std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::push_back[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[1];
  unint64_t v5 = result[2];
  if (v4 >= v5)
  {
    uint64_t v7 = (uint64_t)(v4 - *result) >> 4;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<std::pair<std::string,std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = result + 3;
    uint64_t v10 = v5 - *v3;
    if (v10 >> 3 > v8) {
      unint64_t v8 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    v14[4] = v3 + 3;
    float v12 = fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::allocate(v9, v11);
    unint64_t v13 = &v12[2 * v7];
    v14[0] = v12;
    v14[1] = v13;
    double v14[3] = &v12[2 * v11];
    *unint64_t v13 = *(void *)a2;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
    *((_DWORD *)v13 + 3) = *(_DWORD *)(a2 + 12);
    void v14[2] = v13 + 2;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::__swap_out_circular_buffer(v3, v14);
    uint64_t v6 = v3[1];
    uint64_t result = (uint64_t *)std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    *(void *)unint64_t v4 = *(void *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v6 = v4 + 16;
    result[1] = v4 + 16;
  }
  v3[1] = v6;
  return result;
}

void sub_23AC1FEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 120))
  {
    if ((*(unsigned char *)(a2 + 56) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 32) - *(void *)(a2 + 24) + *(void *)(a1 + 128);
      *(void *)(a1 + 128) = v4;
      if (v4 > *(void *)(a1 + 112))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, (void *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 4))
    {
      *(unsigned char *)(a1 + 56) = 1;
    }
    else if (!*(unsigned char *)(a1 + 56))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 60) = v3;
        *(unsigned char *)(a1 + 56) = 1;
        if (*(_DWORD *)(a1 + 64) <= v3) {
          *(_DWORD *)(a1 + 64) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 60);
}

float fst::internal::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if ((fst::internal::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 56))(&v11, a1, a2);
    Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(a1[15], a2);
    _DWORD *MutableState = v11;
    MutableState[14] |= 9u;
  }
  uint64_t v7 = a1[15];
  if (*(_DWORD *)(v7 + 92) == a2) {
    unint64_t v8 = (float **)(v7 + 96);
  }
  else {
    unint64_t v8 = (float **)(*(void *)(v7 + 8) + 8 * ((int)a2 + 1));
  }
  unint64_t v9 = *v8;
  float result = *v9;
  *a3 = *(_DWORD *)v9;
  return result;
}