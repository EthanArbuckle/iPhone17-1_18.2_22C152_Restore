uint64_t ciphersuiteForKeyByteCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E4F14708];
  v2 = MEMORY[0x1E4F14700];
  if (a1 != 384) {
    v2 = 0;
  }
  if (a1 != 512) {
    v1 = v2;
  }
  if (a1 == 256) {
    return MEMORY[0x1E4F146F8];
  }
  else {
    return v1;
  }
}

uint64_t static CKSecretSharing.HybridShareParameterSelection.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1DB0412C0()
{
  return 1;
}

double sub_1DB0412D0@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1DB0C6DE0;
  *(_OWORD *)(a1 + 16) = xmmword_1DB0C6DF0;
  *(void *)&double result = 32;
  *(_OWORD *)(a1 + 32) = xmmword_1DB0C6E00;
  *(void *)(a1 + 48) = 16;
  *(void *)(a1 + 56) = &unk_1F353B120;
  *(void *)(a1 + 64) = 0xD000000000000021;
  *(void *)(a1 + 72) = 0x80000001DB0CAD60;
  *(void *)(a1 + 80) = 0xD000000000000023;
  *(void *)(a1 + 88) = 0x80000001DB0CAD90;
  return result;
}

uint64_t static CKSecretSharing.ShamirGeneratorPrimeField.== infix(_:_:)()
{
  return 1;
}

uint64_t CKSecretSharing.ShamirGeneratorPrimeField.hash(into:)()
{
  return sub_1DB0C5488();
}

void *static CKSecretSharing.ShamirGeneratorPrimeField.allCases.getter()
{
  return &unk_1F353B0A0;
}

uint64_t _s16CryptoKitPrivate15CKSecretSharingO29HybridShareParameterSelectionO9hashValueSivg_0()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0413BC()
{
  return sub_1DB0C5488();
}

uint64_t sub_1DB0413E4()
{
  return sub_1DB0C54A8();
}

unint64_t sub_1DB041428()
{
  unint64_t result = qword_1EA8FDDE8;
  if (!qword_1EA8FDDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDDE8);
  }
  return result;
}

unint64_t sub_1DB041480()
{
  unint64_t result = qword_1EA8FDDF0;
  if (!qword_1EA8FDDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDDF0);
  }
  return result;
}

unint64_t sub_1DB0414D8()
{
  unint64_t result = qword_1EA8FDDF8;
  if (!qword_1EA8FDDF8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FDE00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDDF8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_1DB04157C(void *a1@<X8>)
{
  *a1 = &unk_1F353B0F8;
}

uint64_t sub_1DB04159C()
{
  return 0;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridShareParameterSelection()
{
  return &type metadata for CKSecretSharing.HybridShareParameterSelection;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwcp(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  sub_1DB0C5188();
  sub_1DB0C5188();
  sub_1DB0C5188();
  return a1;
}

void *_s29HybridShareParameterSelectionO11suiteParamsVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwta(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s29HybridShareParameterSelectionO11suiteParamsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridShareParameterSelection.suiteParams()
{
  return &type metadata for CKSecretSharing.HybridShareParameterSelection.suiteParams;
}

uint64_t _s16SimilarityMetricOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s29HybridShareParameterSelectionOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DB041978);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirGeneratorPrimeField()
{
  return &type metadata for CKSecretSharing.ShamirGeneratorPrimeField;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for ccss_shamir_share_generator(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for ccss_shamir_share(uint64_t a1)
{
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1DB041A40(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DB041A60(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void type metadata accessor for ccss_shamir_parameters(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for ccec_cp(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_1DB041ADC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DB041AFC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for cczp(uint64_t a1)
{
}

void sub_1DB041B3C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1DB041B84()
{
  return sub_1DB0C4A88();
}

uint64_t sub_1DB041BD0()
{
  return sub_1DB0C4A78();
}

uint64_t sub_1DB041C28()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB041C90()
{
  swift_getWitnessTable();
  return sub_1DB0C4A68();
}

uint64_t sub_1DB041CFC()
{
  return sub_1DB041D64(&qword_1EA8FDE30);
}

uint64_t sub_1DB041D30()
{
  return sub_1DB041D64(qword_1EA8FDE38);
}

uint64_t sub_1DB041D64(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB041DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 64);
}

uint64_t sub_1DB041DCC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_1DB041F78(void *a1, void *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  BOOL v12 = (v10 | (unint64_t)v5) <= 7 && ((*(_DWORD *)(v9 + 80) | v5) & 0x100000) == 0;
  if (v12
    && (uint64_t v13 = v7 + v5,
        uint64_t v14 = v7 + v10,
        uint64_t v15 = v11 + v10,
        ((v11
        + 7
        + ((v11
          + v10
          + ((v11
            + v10
            + ((v11
              + v10
              + ((v11
                + v10
                + ((v7 + v10 + ((v7 + v6 + ((v7 + v6 + ((v7 + v6 + ((v6 + 8) & ~v6)) & ~v6)) & ~v6)) & ~v6)) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    uint64_t v16 = ~v6;
    v49 = a1;
    uint64_t v17 = ~v10;
    void *v49 = *a2;
    v18 = (char *)a2 + v6;
    uint64_t v19 = ((unint64_t)v49 + v6 + 8) & ~v6;
    uint64_t v20 = (unint64_t)(v18 + 8) & v16;
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v46 = v8;
    uint64_t v48 = v11 + 7;
    uint64_t v45 = v14;
    v21(v19, v20, AssociatedTypeWitness);
    uint64_t v22 = (v13 + v19) & v16;
    uint64_t v23 = (v13 + v20) & v16;
    v21(v22, v23, AssociatedTypeWitness);
    uint64_t v24 = (v13 + v22) & v16;
    uint64_t v25 = (v13 + v23) & v16;
    v21(v24, v25, AssociatedTypeWitness);
    uint64_t v26 = (v13 + v24) & v16;
    uint64_t v27 = (v13 + v25) & v16;
    v21(v26, v27, AssociatedTypeWitness);
    uint64_t v28 = (v45 + v26) & v17;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v29(v28, (v45 + v27) & v17, v46);
    uint64_t v30 = (v15 + v28) & v17;
    uint64_t v31 = (v15 + ((v45 + v27) & v17)) & v17;
    v29(v30, v31, v46);
    uint64_t v32 = (v15 + v30) & v17;
    uint64_t v33 = (v15 + v31) & v17;
    v29(v32, v33, v46);
    uint64_t v34 = (v15 + v32) & v17;
    uint64_t v35 = (v15 + v33) & v17;
    v29(v34, v35, v46);
    uint64_t v36 = (v15 + v34) & v17;
    uint64_t v37 = (v15 + v35) & v17;
    v38 = v49;
    v29(v36, v37, v46);
    v39 = (void *)((v48 + v36) & 0xFFFFFFFFFFFFFFF8);
    v40 = (uint64_t *)((v48 + v37) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v41 = *v40;
    unint64_t v42 = v40[1];
    sub_1DB04239C(*v40, v42);
    void *v39 = v41;
    v39[1] = v42;
  }
  else
  {
    uint64_t v43 = *a2;
    *a1 = *a2;
    v38 = (void *)(v43 + (((v10 | v6) & 0xF8 ^ 0x1F8) & ((v10 | v6) + 16)));
    swift_retain();
  }
  return v38;
}

uint64_t sub_1DB04239C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1DB0423F4(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (a1 + v6 + 8) & ~v6;
  v4(v7, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 + 56);
  uint64_t v9 = (v8 + v6 + v7) & ~v6;
  v4(v9, AssociatedTypeWitness);
  uint64_t v10 = (v8 + v6 + v9) & ~v6;
  v4(v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v6 + v10) & ~v6;
  v4(v11, AssociatedTypeWitness);
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  uint64_t v15 = v13 + 8;
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v11 + v8 + v16) & ~v16;
  v14(v17, v12);
  uint64_t v18 = *(void *)(v15 + 56);
  uint64_t v19 = (v18 + v16 + v17) & ~v16;
  v14(v19, v12);
  uint64_t v20 = (v18 + v16 + v19) & ~v16;
  v14(v20, v12);
  uint64_t v21 = (v18 + v16 + v20) & ~v16;
  v14(v21, v12);
  uint64_t v22 = (v18 + v16 + v21) & ~v16;
  v14(v22, v12);
  uint64_t v23 = (uint64_t *)((v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  return sub_1DB042664(v24, v25);
}

uint64_t sub_1DB042664(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

void *sub_1DB0426BC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 48);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v20 = v18 + 16;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v15) & ~v21;
  uint64_t v23 = (v10 + v21 + v16) & ~v21;
  v19(v22, v23, v17);
  uint64_t v24 = *(void *)(v20 + 48);
  uint64_t v25 = (v24 + v21 + v22) & ~v21;
  uint64_t v26 = (v24 + v21 + v23) & ~v21;
  v19(v25, v26, v17);
  uint64_t v27 = (v24 + v21 + v25) & ~v21;
  uint64_t v28 = (v24 + v21 + v26) & ~v21;
  v19(v27, v28, v17);
  uint64_t v29 = (v24 + v21 + v27) & ~v21;
  uint64_t v30 = (v24 + v21 + v28) & ~v21;
  v19(v29, v30, v17);
  uint64_t v31 = (v24 + v21 + v29) & ~v21;
  uint64_t v32 = (v24 + v21 + v30) & ~v21;
  v19(v31, v32, v17);
  uint64_t v33 = (void *)((v24 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (uint64_t *)((v24 + 7 + v32) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  sub_1DB04239C(*v34, v36);
  *uint64_t v33 = v35;
  v33[1] = v36;
  return a1;
}

void *sub_1DB0429B8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24);
  uint64_t v20 = v18 + 24;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v15) & ~v21;
  uint64_t v23 = (v10 + v21 + v16) & ~v21;
  v19(v22, v23, v17);
  uint64_t v24 = *(void *)(v20 + 40);
  uint64_t v25 = (v24 + v21 + v22) & ~v21;
  uint64_t v26 = (v24 + v21 + v23) & ~v21;
  v19(v25, v26, v17);
  uint64_t v27 = (v24 + v21 + v25) & ~v21;
  uint64_t v28 = (v24 + v21 + v26) & ~v21;
  v19(v27, v28, v17);
  uint64_t v29 = (v24 + v21 + v27) & ~v21;
  uint64_t v30 = (v24 + v21 + v28) & ~v21;
  v19(v29, v30, v17);
  uint64_t v31 = (v24 + v21 + v29) & ~v21;
  uint64_t v32 = (v24 + v21 + v30) & ~v21;
  v19(v31, v32, v17);
  uint64_t v33 = (uint64_t *)((v24 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (uint64_t *)((v24 + 7 + v32) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  sub_1DB04239C(*v34, v36);
  uint64_t v37 = *v33;
  unint64_t v38 = v33[1];
  *uint64_t v33 = v35;
  v33[1] = v36;
  sub_1DB042664(v37, v38);
  return a1;
}

void *sub_1DB042CBC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 32);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  uint64_t v20 = v18 + 32;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v15) & ~v21;
  uint64_t v23 = (v10 + v21 + v16) & ~v21;
  v19(v22, v23, v17);
  uint64_t v24 = *(void *)(v20 + 32);
  uint64_t v25 = (v24 + v21 + v22) & ~v21;
  uint64_t v26 = (v24 + v21 + v23) & ~v21;
  v19(v25, v26, v17);
  uint64_t v27 = (v24 + v21 + v25) & ~v21;
  uint64_t v28 = (v24 + v21 + v26) & ~v21;
  v19(v27, v28, v17);
  uint64_t v29 = (v24 + v21 + v27) & ~v21;
  uint64_t v30 = (v24 + v21 + v28) & ~v21;
  v19(v29, v30, v17);
  uint64_t v31 = (v24 + v21 + v29) & ~v21;
  uint64_t v32 = (v24 + v21 + v30) & ~v21;
  v19(v31, v32, v17);
  *(_OWORD *)((v24 + 7 + v31) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v24 + 7 + v32) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_1DB042FAC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
  uint64_t v20 = v18 + 40;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v15) & ~v21;
  uint64_t v23 = (v10 + v21 + v16) & ~v21;
  v19(v22, v23, v17);
  uint64_t v24 = *(void *)(v20 + 24);
  uint64_t v25 = (v24 + v21 + v22) & ~v21;
  uint64_t v26 = (v24 + v21 + v23) & ~v21;
  v19(v25, v26, v17);
  uint64_t v27 = (v24 + v21 + v25) & ~v21;
  uint64_t v28 = (v24 + v21 + v26) & ~v21;
  v19(v27, v28, v17);
  uint64_t v29 = (v24 + v21 + v27) & ~v21;
  uint64_t v30 = (v24 + v21 + v28) & ~v21;
  v19(v29, v30, v17);
  uint64_t v31 = (v24 + v21 + v29) & ~v21;
  uint64_t v32 = (v24 + v21 + v30) & ~v21;
  v19(v31, v32, v17);
  uint64_t v33 = (uint64_t *)((v24 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = *v33;
  unint64_t v35 = v33[1];
  *(_OWORD *)uint64_t v33 = *(_OWORD *)((v24 + 7 + v32) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB042664(v34, v35);
  return a1;
}

uint64_t sub_1DB0432A4(_DWORD *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(swift_checkMetadataState() - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = *(void *)(v5 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(v7 + 64);
  if (v10 <= 0xC) {
    unsigned int v15 = 12;
  }
  else {
    unsigned int v15 = v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v12 + v11;
  uint64_t v17 = v12 + v13;
  uint64_t v18 = v14 + v13;
  uint64_t v19 = v14 + 7;
  if (v15 < a2)
  {
    unint64_t v20 = ((v19
          + ((v18
            + ((v18
              + ((v18
                + ((v18 + ((v17 + ((v16 + ((v16 + ((v16 + ((v11 + 8) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v13)) & ~v13)) & ~v13)) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v15 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v20);
        if (!*((unsigned char *)a1 + v20)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v20);
        if (*(_WORD *)((char *)a1 + v20)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1DB043674);
      case 4:
        int v24 = *(_DWORD *)((char *)a1 + v20);
        if (!v24) {
          break;
        }
LABEL_25:
        int v26 = v24 - 1;
        if ((v20 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v15 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  uint64_t v28 = ((unint64_t)a1 + v11 + 8) & ~v11;
  if (v6 == v15)
  {
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    return v29(v28, v6, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v30 = ~v13;
    uint64_t v31 = (v17 + ((v16 + ((v16 + ((v16 + v28) & ~v11)) & ~v11)) & ~v11)) & v30;
    if (v9 == v15)
    {
      uint64_t v32 = *(uint64_t (**)(uint64_t))(v8 + 48);
      return v32(v31);
    }
    else
    {
      uint64_t v33 = *(void *)(((v19 + ((v18 + ((v18 + ((v18 + ((v18 + v31) & v30)) & v30)) & v30)) & v30)) & 0xFFFFFFFFFFFFFFF8)
                      + 8) >> 60;
      if (((4 * v33) & 0xC) != 0) {
        return 16 - ((4 * v33) & 0xC | (v33 >> 2));
      }
      else {
        return 0;
      }
    }
  }
}

void sub_1DB043688(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_checkMetadataState() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(v7 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(v9 + 64);
  if (v12 <= 0xC) {
    unsigned int v17 = 12;
  }
  else {
    unsigned int v17 = v12;
  }
  uint64_t v18 = v14 + v13;
  uint64_t v19 = (v14 + v13 + ((v14 + v13 + ((v14 + v13 + ((v13 + 8) & ~v13)) & ~v13)) & ~v13)) & ~v13;
  uint64_t v20 = v14 + v15;
  uint64_t v21 = (v20 + v19) & ~v15;
  uint64_t v22 = v16 + v15;
  uint64_t v23 = (v16 + v15 + ((v16 + v15 + ((v16 + v15 + ((v16 + v15 + v21) & ~v15)) & ~v15)) & ~v15)) & ~v15;
  uint64_t v24 = v16 + 7;
  size_t v25 = ((v16 + 7 + v23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v17 >= a3)
  {
    int v28 = 0;
    int v29 = a2 - v17;
    if (a2 <= v17)
    {
LABEL_20:
      uint64_t v30 = ~v13;
      uint64_t v31 = ~v15;
      switch(v28)
      {
        case 1:
          *((unsigned char *)a1 + v25) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)((char *)a1 + v25) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v25) = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            uint64_t v34 = ((unint64_t)a1 + v13 + 8) & v30;
            if (v8 == v17)
            {
              unint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
              v35(v34, a2, v8, AssociatedTypeWitness);
            }
            else
            {
              uint64_t v36 = (v20 + ((v18 + ((v18 + ((v18 + v34) & v30)) & v30)) & v30)) & v31;
              if (v11 == v17)
              {
                uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v10 + 56);
                v37(v36, a2);
              }
              else
              {
                unint64_t v38 = (void *)((v24 + ((v22 + ((v22 + ((v22 + ((v22 + v36) & v31)) & v31)) & v31)) & v31)) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0xC)
                {
                  void *v38 = (a2 - 13);
                  v38[1] = 0;
                }
                else
                {
                  void *v38 = 0;
                  v38[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v16 + 7 + v23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v26 = a3 - v17 + 1;
    }
    else {
      unsigned int v26 = 2;
    }
    if (v26 >= 0x10000) {
      int v27 = 4;
    }
    else {
      int v27 = 2;
    }
    if (v26 < 0x100) {
      int v27 = 1;
    }
    if (v26 >= 2) {
      int v28 = v27;
    }
    else {
      int v28 = 0;
    }
    int v29 = a2 - v17;
    if (a2 <= v17) {
      goto LABEL_20;
    }
  }
  if (v25) {
    int v32 = 1;
  }
  else {
    int v32 = v29;
  }
  if (v25)
  {
    int v33 = ~v17 + a2;
    bzero(a1, v25);
    *a1 = v33;
  }
  switch(v28)
  {
    case 1:
      *((unsigned char *)a1 + v25) = v32;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v25) = v32;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1DB043AACLL);
    case 4:
      *(_DWORD *)((char *)a1 + v25) = v32;
      break;
    default:
      return;
  }
}

uint64_t _s6ServerVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1DB043B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_1DB043B24()
{
  uint64_t result = _s6ServerVMa_0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1DB043BB4(unint64_t a1, unint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 16) & (unint64_t)~v6) + 1 > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v11 = ~v6;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    uint64_t v12 = (a1 & 0xFFFFFFFFFFFFFFF8) + v6;
    uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFF8) + v6;
    uint64_t v14 = (v12 + 16) & v11;
    uint64_t v15 = (v13 + 16) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v14, v15, AssociatedTypeWitness);
    *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 + v7);
  }
  return a1;
}

uint64_t sub_1DB043D84(uint64_t a1)
{
  unint64_t v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (v1 + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return v4(v6, v5);
}

unint64_t sub_1DB043EB0(unint64_t a1, unint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 16 + v3) & ~v8;
  uint64_t v10 = (v8 + 16 + v4) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, v10, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v7 + 48) + v9) = *(unsigned char *)(*(void *)(v7 + 48) + v10);
  return a1;
}

unint64_t sub_1DB04400C(unint64_t a1, unint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 16 + v3) & ~v8;
  uint64_t v10 = (v8 + 16 + v4) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v9, v10, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v7 + 40) + v9) = *(unsigned char *)(*(void *)(v7 + 40) + v10);
  return a1;
}

unint64_t sub_1DB044168(unint64_t a1, unint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 16 + v3) & ~v8;
  uint64_t v10 = (v8 + 16 + v4) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v10, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v7 + 32) + v9) = *(unsigned char *)(*(void *)(v7 + 32) + v10);
  return a1;
}

unint64_t sub_1DB0442C4(unint64_t a1, unint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 16 + v3) & ~v8;
  uint64_t v10 = (v8 + 16 + v4) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v9, v10, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v7 + 24) + v9) = *(unsigned char *)(*(void *)(v7 + 24) + v10);
  return a1;
}

uint64_t sub_1DB044420(unint64_t a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v10 = v9 + ((v8 + 16) & ~v8) + 1;
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_7;
    }
    unsigned int v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)(a1 + v10);
      if (!v12) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v13 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v13 >= 2)
    {
LABEL_7:
      int v12 = *(unsigned __int8 *)(a1 + v10);
      if (!*(unsigned char *)(a1 + v10)) {
        goto LABEL_24;
      }
LABEL_14:
      int v14 = (v12 - 1) << v11;
      if (v10 > 3) {
        int v14 = 0;
      }
      if (v10)
      {
        if (v10 <= 3) {
          int v15 = v10;
        }
        else {
          int v15 = 4;
        }
        switch(v15)
        {
          case 2:
            int v16 = *(unsigned __int16 *)a1;
            break;
          case 3:
            int v16 = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
            break;
          case 4:
            int v16 = *(_DWORD *)a1;
            break;
          default:
            int v16 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v16 = 0;
      }
      int v21 = v7 + (v16 | v14);
      return (v21 + 1);
    }
  }
LABEL_24:
  unint64_t v17 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8;
  if (v6 < 0xFE)
  {
    unsigned int v20 = *(unsigned __int8 *)(v17 + v9);
    if (v20 < 2) {
      return 0;
    }
    int v21 = (v20 + 2147483646) & 0x7FFFFFFF;
    return (v21 + 1);
  }
  uint64_t v18 = *(uint64_t (**)(unint64_t))(v5 + 48);
  return v18(v17);
}

void sub_1DB0446D4(unint64_t a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v7 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  size_t v11 = v9 + ((v8 + 16) & ~v8) + 1;
  if (a3 <= v10)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v13 = ~v10 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v9 + ((v8 + 16) & ~v8) != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero((void *)a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          *(unsigned char *)(a1 + 2) = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *(unsigned char *)a1 = v16;
        }
      }
    }
    else
    {
      bzero((void *)a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        *(unsigned char *)(a1 + v11) = v14;
        return;
      case 2:
        *(_WORD *)(a1 + v11) = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)(a1 + v11) = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      *(unsigned char *)(a1 + v11) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v11) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1DB0449F8);
    case 4:
      *(_DWORD *)(a1 + v11) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v17 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8;
        if (v7 < 0xFE)
        {
          *(unsigned char *)(v17 + v9) = a2 + 1;
        }
        else
        {
          uint64_t v18 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v18(v17, a2);
        }
      }
      return;
  }
}

uint64_t _s16VerifiableServerVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SecureBytes.Backing()
{
  uint64_t result = qword_1EBE7D898;
  if (!qword_1EBE7D898) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1DB044A84()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1DB044AC4()
{
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  off_1EBE7D888 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_1DB044AF8(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v8 = (uint64_t)a1 + 32;
  uint64_t v9 = (uint64_t)a1 + result;
  uint64_t v10 = result - 32;
  uint64_t result = sub_1DB047D9C(0, a2, result - 32, v8, v9);
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = result;
  }
  if (v12 < 0) {
    goto LABEL_10;
  }
  v15[0] = v8;
  v15[1] = v8 + v12;
  uint64_t v16 = 0;
  sub_1DB059710(v15, &v16);
  if (!v3)
  {
    uint64_t v13 = *a3;
    uint64_t v14 = v16;
    swift_beginAccess();
    *(void *)(v13 + 16) = v14;
  }
  return swift_release();
}

uint64_t sub_1DB044BDC(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  size_t v9 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = (uint64_t)a1 + 32;
    uint64_t v11 = (uint64_t)a1 + v9;
    size_t v12 = v9 - 32;
    uint64_t v13 = sub_1DB047D9C(0, a2, v9 - 32, v10, v11);
    if (v14) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = v13;
    }
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (qword_1EA8FDDE0 == -1) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  swift_once();
LABEL_7:
  cckem_full_ctx_init();
  uint64_t result = cckem_generate_key();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = *a3;
    uint64_t result = swift_beginAccess();
    *(void *)(v17 + 16) = a5;
  }
  return result;
}

uint64_t sub_1DB044CE0(const void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t *), uint64_t a4, uint64_t *a5)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = (uint64_t)a1 + 32;
  uint64_t v12 = (uint64_t)a1 + result;
  uint64_t v13 = result - 32;
  uint64_t result = sub_1DB047D9C(0, a2, result - 32, v11, v12);
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = result;
  }
  if (v15 < 0) {
    goto LABEL_10;
  }
  v18[0] = v11;
  v18[1] = v11 + v15;
  uint64_t v19 = 0;
  uint64_t result = a3(v18, &v19);
  if (!v5)
  {
    uint64_t v16 = *a5;
    uint64_t v17 = v19;
    uint64_t result = swift_beginAccess();
    *(void *)(v16 + 16) = v17;
  }
  return result;
}

char *sub_1DB044DBC(char *result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  unsigned int v7 = result;
  uint64_t result = (char *)_swift_stdlib_malloc_size(result);
  if ((uint64_t)(result - 32) < a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t v8 = _swift_stdlib_malloc_size(v4) - 32;
  size_t v9 = v4 + 2;
  uint64_t result = (char *)swift_beginAccess();
  uint64_t v10 = v4[2];
  size_t v11 = v8 - v10;
  if (__OFSUB__(v8, v10))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v12 = __OFSUB__(a3, a2);
  size_t v13 = a3 - a2;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v12 = __OFSUB__(v11, v13);
  size_t v14 = v11 - v13;
  if (v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t result = (char *)_swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = (char *)memmove((char *)v4 + v10 + 32, &v7[a2 + 32], v13);
  size_t v15 = *v9 + v13;
  if (!__OFADD__(*v9, v13))
  {
    uint64_t result = (char *)swift_beginAccess();
    *size_t v9 = v15;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

size_t sub_1DB044ED0()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_1DB0C51F8();
  size_t v3 = _swift_stdlib_malloc_size(v1) - 32;
  size_t result = swift_beginAccess();
  int64_t v5 = v1[2];
  size_t v6 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v7 = __OFSUB__(v6, v2);
  size_t v8 = v6 - v2;
  if (v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t result = _swift_stdlib_malloc_size(v1);
  if ((uint64_t)(result - 32) < v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  size_t result = sub_1DB0C5278();
  uint64_t v9 = v1[2];
  BOOL v7 = __OFADD__(v9, v2);
  uint64_t v10 = v9 + v2;
  if (!v7)
  {
    v1[2] = v10;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1DB044FC0(int64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)*v2;
  size_t result = _swift_stdlib_malloc_size(*v2);
  if ((uint64_t)(result - 32) < a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (!HIDWORD(a1))
    {
      if (a1)
      {
        unsigned int v6 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
        unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
        int v8 = v7 | HIWORD(v7);
        if (v8 == -1) {
          uint64_t v9 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v9 = (v8 + 1);
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      type metadata accessor for SecureBytes.Backing();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = v9;
      size_t result = swift_beginAccess();
      uint64_t v11 = *((void *)v4 + 2);
      if ((v11 & 0x8000000000000000) == 0)
      {
        sub_1DB044DBC(v4, 0, v11);
        size_t result = swift_release();
        *uint64_t v2 = (const void *)v10;
        return result;
      }
LABEL_14:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1DB0450AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_1DB0C28B8(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

void sub_1DB045110(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1DB045118@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(v3 + 16);
  return result;
}

uint64_t (*sub_1DB045160(unsigned char *a1, void *a2))()
{
  *a1 = *(unsigned char *)(*v2 + *a2 + 32);
  return nullsub_1;
}

uint64_t sub_1DB045198@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1DB045214@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v5;
  }
  return result;
}

BOOL sub_1DB045264()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16) == 0;
}

void sub_1DB0452AC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1DB0452C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 16);
  if (v9 < a3 || (a3 | a1) < 0 || v9 < a1)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= a2) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v10 <= 0 && v10 > a2) {
    return 0;
  }
LABEL_11:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v9 < result) {
    goto LABEL_17;
  }
  return result;
}

uint64_t *sub_1DB045390(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_1DB0453AC(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_1DB0453C8(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_1DB0453E4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_1DB0453FC(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_1DB045414(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1DB045420()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16);
}

uint64_t sub_1DB045460()
{
  return 2;
}

uint64_t sub_1DB045468()
{
  uint64_t v1 = sub_1DB0478D0(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1DB0454A0(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return sub_1DB0454A8(a1, a2, a3, *v3);
}

uint64_t sub_1DB0454A8(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_14:
    *BOOL v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(a4 + 16);
    if (v8)
    {
      *a2 = *(unsigned char *)(a4 + 32);
      uint64_t v9 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v10 = 0;
        while (v9 != v10)
        {
          if (__OFSUB__(v8, v10 + 1)) {
            goto LABEL_16;
          }
          if (v8 - 1 == v10) {
            goto LABEL_13;
          }
          a2[v10 + 1] = *(unsigned char *)(a4 + 33 + v10);
          if (v9 == ++v10) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
LABEL_13:
      uint64_t v6 = v8;
    }
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1DB045580@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1DB0455A0(a1, a2, a3);
}

uint64_t sub_1DB0455A0@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1DB0467E4(a1, a2, a3);
}

void *sub_1DB0455C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *sub_1DB0455E0(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

void *sub_1DB0455F8@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t result = (void *)swift_beginAccess();
    if ((v5 & 0x8000000000000000) == 0 && *(void *)(v6 + 16) >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB045668@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1DB0452C4(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_1DB0456A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 >= v4 && ((v4 | v3) & 0x8000000000000000) == 0 && v7 >= v3) {
    return v4 - v3;
  }
  __break(1u);
  return result;
}

unsigned char *sub_1DB045714(unsigned char *result, void *a2)
{
  *(unsigned char *)(*v2 + *a2 + 32) = *result;
  return result;
}

uint64_t (*sub_1DB04572C(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  uint64_t v3 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(*v2 + v3 + 32);
  return sub_1DB045764;
}

uint64_t sub_1DB045764(uint64_t result)
{
  *(unsigned char *)(**(void **)result + *(void *)(result + 8) + 32) = *(unsigned char *)(result + 16);
  return result;
}

uint64_t sub_1DB04577C(uint64_t *a1, uint64_t *a2)
{
  sub_1DB0477B8(v2, *a2, a2[1], *a1, a1[1], a1[2]);
  return swift_release();
}

void (*sub_1DB0457C8(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1DB045870(v4, *a2, a2[1]);
  return sub_1DB045828;
}

void sub_1DB045828(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1DB045870(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  uint64_t v8 = *v3;
  uint64_t result = (void (*)(uint64_t **))swift_beginAccess();
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 >= a3)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    v7[2] = v8;
    swift_retain();
    return sub_1DB045928;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1DB045928(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1DB0477B8((uint64_t *)(*a1)[8], v1[6], (*a1)[7], *v1, v1[1], v1[2]);
  swift_release();
  free(v1);
}

uint64_t sub_1DB045978@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DB047C68(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_1DB0459A4(void *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else if (*a2 != *result)
  {
    uint64_t v5 = *v2 + 32;
    char v6 = *(unsigned char *)(v5 + v3);
    *(unsigned char *)(v5 + v3) = *(unsigned char *)(v5 + v4);
    *(unsigned char *)(v5 + v4) = v6;
  }
  return result;
}

uint64_t sub_1DB0459D8()
{
  return sub_1DB0C5008();
}

uint64_t sub_1DB0459FC()
{
  return sub_1DB0C4FF8();
}

uint64_t sub_1DB045A20(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  int64_t v13 = *v10 - v12;
  if (__OFSUB__(*v10, v12))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = sub_1DB0C51F8();
  BOOL v14 = __OFADD__(v13, result);
  uint64_t v15 = v13 + result;
  if (v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_1DB045BF0(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }
  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }
  else
  {
    uint64_t v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  unsigned int v20 = (const void *)result;
  int v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1DB044DBC(v21, 0, a1);
  sub_1DB044ED0();
  sub_1DB044DBC((char *)*v5, a2, v22);
  *uint64_t v5 = v20;
  return swift_release();
}

uint64_t sub_1DB045BF0(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790]();
  int64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v14);
  uint64_t v15 = v5 + 2;
  uint64_t result = swift_beginAccess();
  int64_t v17 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  int64_t v27 = a2;
  int64_t v18 = *v15 - v17;
  if (__OFSUB__(*v15, v17))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = sub_1DB0C51F8();
  BOOL v19 = __OFADD__(v18, result);
  int64_t v20 = v18 + result;
  if (v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v26 = a1;
  int64_t v21 = _swift_stdlib_malloc_size(v5) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  if (v21 < v20)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = sub_1DB0C51F8();
  uint64_t v22 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = v27;
  if (*v15 < v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1DB046CFC(v27, *v15, v22);
  sub_1DB046DC4(a3, v26, a4);
  uint64_t result = sub_1DB0C51F8();
  uint64_t v23 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  BOOL v19 = __OFADD__(*v15, v23);
  int64_t v24 = *v15 + v23;
  if (!v19)
  {
    *uint64_t v15 = v24;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1DB045DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790]();
  int64_t v12 = &v16[-v11];
  int64_t v17 = v3;
  uint64_t result = sub_1DB0C5128();
  if (v18 == 1)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    sub_1DB0C5118();
    swift_getAssociatedConformanceWitness();
    sub_1DB0C5268();
    if ((v20 & 1) == 0)
    {
      size_t v14 = v19;
      do
      {
        uint64_t v15 = *v3;
        swift_beginAccess();
        sub_1DB0A928C(*(void *)(v15 + 16), *(void *)(v15 + 16), v14);
        sub_1DB0C5268();
        size_t v14 = v19;
      }
      while (v20 != 1);
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1DB046048(void *a1, size_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  swift_beginAccess();
  return sub_1DB0A942C(*(void *)(v5 + 16), *(void *)(v5 + 16), a1, a2);
}

uint64_t sub_1DB0460BC@<X0>(void *a1@<X8>)
{
  if (qword_1EBE7D890 != -1) {
    swift_once();
  }
  *a1 = off_1EBE7D888;
  return swift_retain();
}

uint64_t sub_1DB046128(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1DB045A20(*a1, a1[1], a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v5(a2, a3);
}

void *sub_1DB0461AC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_1DB0482E0(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DB0461D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184548](a1, a4, a2, a5, a3);
}

uint64_t sub_1DB0461F0(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  size_t v3 = *a1;
  swift_beginAccess();
  return sub_1DB0A928C(*(void *)(v2 + 16), *(void *)(v2 + 16), v3);
}

uint64_t sub_1DB04624C(uint64_t a1, uint64_t a2)
{
  sub_1DB045DD8(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  return v4(a1, a2);
}

uint64_t sub_1DB0462B8(unsigned __int8 *a1, int64_t *a2)
{
  return sub_1DB0A928C(*a2, *a2, *a1);
}

uint64_t sub_1DB0462C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4184510](a1, a2, a5, a3, a6, a4);
}

uint64_t sub_1DB0462E0@<X0>(int64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  int64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_6;
  }
  int64_t v7 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= v4)
  {
    char v8 = *(unsigned char *)(v5 + v4 + 32);
    uint64_t result = sub_1DB0ABC80(v4, v7);
    *a2 = v8;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1DB046364(int64_t *a1)
{
  return sub_1DB0ABC80(*a1, a1[1]);
}

void sub_1DB046370(_WORD *a1@<X8>)
{
  *a1 = 256;
}

int64_t sub_1DB04637C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  char v6 = *(unsigned char *)(v3 + 32);
  int64_t result = sub_1DB0452C4(0, 1, v5, v3);
  if ((v7 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      int64_t result = sub_1DB0ABC80(0, result);
      *a1 = v6;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

int64_t sub_1DB046408(int64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = *v1;
      swift_beginAccess();
      int64_t result = sub_1DB0452C4(0, v2, *(void *)(v3 + 16), v3);
      if (v4)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) == 0) {
        return sub_1DB0ABC80(0, result);
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1DB046490(char a1)
{
  uint64_t v2 = *v1;
  if (a1)
  {
    swift_beginAccess();
    int64_t v3 = *(void *)(v2 + 16);
    if ((v3 & 0x8000000000000000) == 0) {
      return sub_1DB0ABC80(0, v3);
    }
    __break(1u);
    goto LABEL_9;
  }
  swift_release();
  if (qword_1EBE7D890 != -1) {
LABEL_9:
  }
    swift_once();
  *uint64_t v1 = (uint64_t)off_1EBE7D888;
  return swift_retain();
}

uint64_t sub_1DB046548(uint64_t (*a1)(char *))
{
  return sub_1DB046560(a1);
}

uint64_t sub_1DB046560(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)(*v1 + 16);
  swift_retain();
  uint64_t result = swift_beginAccess();
  int64_t v7 = 0;
  uint64_t v8 = v4 + 32;
  do
  {
    if (__OFSUB__(*v5, v7))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v7 == *v5) {
      goto LABEL_9;
    }
    char v12 = *(unsigned char *)(v4 + v7 + 32);
    uint64_t result = a1(&v12);
    if (v2) {
      return swift_release();
    }
    if (result)
    {
      uint64_t result = swift_release();
      int64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_14;
      }
      while (!__OFSUB__(*v5, v10))
      {
        if (*v5 == v10)
        {
          if (v10 < v7) {
            goto LABEL_29;
          }
          return sub_1DB0ABC80(v7, v10);
        }
        char v12 = *(unsigned char *)(v8 + v10);
        uint64_t result = a1(&v12);
        if ((result & 1) == 0)
        {
          if (__OFSUB__(v10, v7)) {
            goto LABEL_28;
          }
          if (v10 != v7)
          {
            char v11 = *(unsigned char *)(v8 + v7);
            *(unsigned char *)(v8 + v7) = *(unsigned char *)(v8 + v10);
            *(unsigned char *)(v8 + v10) = v11;
          }
LABEL_14:
          BOOL v9 = __OFADD__(v7++, 1);
          if (v9) {
            goto LABEL_27;
          }
        }
        BOOL v9 = __OFADD__(v10++, 1);
        if (v9) {
          goto LABEL_26;
        }
      }
      goto LABEL_25;
    }
    BOOL v9 = __OFADD__(v7++, 1);
  }
  while (!v9);
  __break(1u);
LABEL_9:
  swift_release();
  int64_t v10 = *(void *)(v4 + 16);
  int64_t v7 = v10;
  return sub_1DB0ABC80(v7, v10);
}

uint64_t sub_1DB0466F0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 32, a3 + 32 + *(void *)(a3 + 16));
}

uint64_t sub_1DB04676C(uint64_t (*a1)(uint64_t, uint64_t))
{
  swift_beginAccess();
  return a1(v1 + 32, v1 + 32 + *(void *)(v1 + 16));
}

uint64_t sub_1DB0467E4@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = a1(v3 + 32, *(void *)(v3 + 16));
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 0, 1, a2);
  }
  return result;
}

uint64_t sub_1DB0468A0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_1DB0466F0(a1, a2, *v2);
}

uint64_t sub_1DB0468BC@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1DB0468C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1F40E3440](a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_1DB0468EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1F40E3478](a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_1DB046914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40E3458](a1, a2, a3, a5, a4);
}

uint64_t sub_1DB046924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return MEMORY[0x1F40E3450](a1, a2, a3, a6, a4, a7, a5);
}

uint64_t sub_1DB04693C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1F40E3448](a1, a2, a3, a7, a4, a5, a8, a6);
}

uint64_t sub_1DB046958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40E41C8](a1, a4, a2, a5, a3);
}

uint64_t sub_1DB046970()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0469B8()
{
  return sub_1DB0C5488();
}

uint64_t sub_1DB0469E4()
{
  return sub_1DB0C54A8();
}

void *sub_1DB046A28(void *result, void *a2)
{
  if (!__OFSUB__(*a2, *result)) {
    return (void *)(*a2 == *result);
  }
  __break(1u);
  return result;
}

BOOL sub_1DB046A44(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1DB046A58(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1DB046A6C(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1DB046A80(void *a1, void *a2)
{
  return *a2 < *a1;
}

void *sub_1DB046A94@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, *v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - *v2;
  }
  return result;
}

void *sub_1DB046AB0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = *v2 + *result;
  }
  return result;
}

void *sub_1DB046ACC(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *uint64_t result = *a4 + *a6;
    return 0;
  }
  return result;
}

uint64_t sub_1DB046AF0()
{
  type metadata accessor for SecureBytes.Backing();
  sub_1DB0C4908();
  return v1;
}

size_t sub_1DB046B64@<X0>(size_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v4 = a2 - result;
  if (result) {
    size_t v5 = a2 - result;
  }
  else {
    size_t v5 = 0;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (HIDWORD(v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  char v6 = (const void *)result;
  if (v5)
  {
    unsigned int v7 = (v5 - 1) | ((v5 - 1) >> 1) | (((v5 - 1) | ((v5 - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  char v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = v10;
  _swift_stdlib_malloc_size(v11);
  if (v6) {
    memmove(v11 + 4, v6, v4);
  }
  else {
    int64_t v4 = 0;
  }
  swift_beginAccess();
  v11[2] = v4;
  uint64_t result = _swift_stdlib_malloc_size(v11);
  if ((uint64_t)(result - 32) >= v4)
  {
    *a3 = v11;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1DB046C80()
{
  swift_beginAccess();
  memset_s((void *)(v0 + 32), *(void *)(v0 + 24), 0, *(void *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_1DB046CD4()
{
  return type metadata accessor for SecureBytes.Backing();
}

ValueMetadata *type metadata accessor for SecureBytes.BackingHeader()
{
  return &type metadata for SecureBytes.BackingHeader;
}

ValueMetadata *type metadata accessor for SecureBytes()
{
  return &type metadata for SecureBytes;
}

size_t sub_1DB046CFC(size_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  int64_t v4 = v3;
  size_t v7 = result;
  uint64_t result = _swift_stdlib_malloc_size(v4);
  uint64_t v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v9 = __OFADD__(a2, a3);
  uint64_t v10 = a2 + a3;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < v8)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 < 1 || (uint64_t)(result - 32) < a2) {
    goto LABEL_15;
  }
  uint64_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  _swift_stdlib_malloc_size(v4);
  return (size_t)memmove(&v4[v8 + 32], &v4[v7 + 32], a2 - v7);
}

uint64_t sub_1DB046DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t result = MEMORY[0x1F4188790]();
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  uint64_t result = sub_1DB0C51F8();
  int64_t v13 = a2 + result;
  if (__OFADD__(a2, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  int64_t v14 = _swift_stdlib_malloc_size(v4) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  if (v14 < v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_1DB0C51F8();
  if (__OFADD__(a2, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 + result >= a2)
  {
    _swift_stdlib_malloc_size(v4);
    return sub_1DB0C5278();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1DB046F40(uint64_t (*a1)(uint64_t, uint64_t))
{
  return sub_1DB04676C(a1);
}

unint64_t sub_1DB046F68()
{
  unint64_t result = qword_1EA8FDF40;
  if (!qword_1EA8FDF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDF40);
  }
  return result;
}

uint64_t sub_1DB046FBC()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_1DB046FC8()
{
  return MEMORY[0x1E4FBB5A0];
}

unint64_t sub_1DB046FD8()
{
  unint64_t result = qword_1EA8FDF48;
  if (!qword_1EA8FDF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDF48);
  }
  return result;
}

unint64_t sub_1DB047030()
{
  unint64_t result = qword_1EA8FDF50;
  if (!qword_1EA8FDF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDF50);
  }
  return result;
}

unint64_t sub_1DB047088()
{
  unint64_t result = qword_1EA8FDF58;
  if (!qword_1EA8FDF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDF58);
  }
  return result;
}

unint64_t sub_1DB0470E0()
{
  unint64_t result = qword_1EA8FDF60;
  if (!qword_1EA8FDF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDF60);
  }
  return result;
}

unint64_t sub_1DB047138()
{
  unint64_t result = qword_1EA8FDF68;
  if (!qword_1EA8FDF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDF68);
  }
  return result;
}

uint64_t sub_1DB04718C()
{
  return sub_1DB047748(&qword_1EA8FDF70, (void (*)(void))sub_1DB0470E0);
}

uint64_t sub_1DB0471D4()
{
  return sub_1DB047748(&qword_1EA8FDF80, (void (*)(void))sub_1DB047088);
}

unint64_t sub_1DB047220()
{
  unint64_t result = qword_1EA8FDF88;
  if (!qword_1EA8FDF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDF88);
  }
  return result;
}

uint64_t sub_1DB047274()
{
  return sub_1DB047530(&qword_1EA8FDF90);
}

unint64_t sub_1DB0472A8()
{
  unint64_t result = qword_1EA8FDFA0;
  if (!qword_1EA8FDFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDFA0);
  }
  return result;
}

unint64_t sub_1DB0472FC()
{
  unint64_t result = qword_1EA8FDFA8;
  if (!qword_1EA8FDFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDFA8);
  }
  return result;
}

uint64_t sub_1DB047350()
{
  return sub_1DB047748(&qword_1EA8FDFB0, (void (*)(void))sub_1DB047398);
}

unint64_t sub_1DB047398()
{
  unint64_t result = qword_1EA8FDFB8;
  if (!qword_1EA8FDFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDFB8);
  }
  return result;
}

uint64_t sub_1DB0473EC()
{
  return sub_1DB047530(&qword_1EA8FDFC0);
}

uint64_t sub_1DB047420()
{
  return sub_1DB047748(&qword_1EA8FDFC8, (void (*)(void))sub_1DB047220);
}

uint64_t sub_1DB047468()
{
  return sub_1DB04761C(&qword_1EA8FDFD0, &qword_1EA8FDFD8);
}

unint64_t sub_1DB0474A8()
{
  unint64_t result = qword_1EA8FDFE0;
  if (!qword_1EA8FDFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FDFE0);
  }
  return result;
}

uint64_t sub_1DB0474FC()
{
  return sub_1DB047530(&qword_1EA8FDFE8);
}

uint64_t sub_1DB047530(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FDF98);
    sub_1DB0472A8();
    sub_1DB0472FC();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB0475A0()
{
  return sub_1DB04761C(&qword_1EA8FDFF0, &qword_1EA8FDF78);
}

uint64_t sub_1DB0475E0()
{
  return sub_1DB04761C(&qword_1EA8FDFF8, &qword_1EA8FE000);
}

uint64_t sub_1DB04761C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB047660()
{
  return sub_1DB047748(&qword_1EA8FE008, (void (*)(void))sub_1DB047030);
}

unint64_t sub_1DB0476AC()
{
  unint64_t result = qword_1EBE7D880;
  if (!qword_1EBE7D880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE7D880);
  }
  return result;
}

uint64_t sub_1DB047700()
{
  return sub_1DB047748(&qword_1EA8FE010, (void (*)(void))sub_1DB0476AC);
}

uint64_t sub_1DB047748(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FDF78);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB0477B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a1;
  uint64_t result = swift_beginAccess();
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a2 < 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v13 < a3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__OFSUB__(a3, a2))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a3 != a2)
  {
    if (__OFSUB__(a5, a4))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (a5 == a4)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    while (a4 < a5)
    {
      *(unsigned char *)(v11 + 32 + a2) = *(unsigned char *)(a6 + 32 + a4);
      uint64_t v14 = a2 + 1;
      if (__OFADD__(a2, 1)) {
        goto LABEL_19;
      }
      if (__OFSUB__(a3, v14)) {
        goto LABEL_20;
      }
      ++a4;
      if (v14 == a3) {
        goto LABEL_6;
      }
      if (__OFSUB__(a5, a4)) {
        goto LABEL_21;
      }
      ++a2;
      if (a5 == a4)
      {
        __break(1u);
        break;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_6:
  if (__OFSUB__(a5, a4))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a4 != a5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1DB0478D0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  if (v2 <= 0)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EBE7E138);
    uint64_t v3 = swift_allocObject();
    size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = 2 * v4 - 64;
  }
  uint64_t v5 = sub_1DB0454A8((uint64_t)&v7, (unsigned char *)(v3 + 32), v2, a1);
  swift_retain();
  uint64_t result = swift_release();
  if (v5 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

int64_t sub_1DB0479F4(int64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = a4 - a3;
  if (!a3) {
    int64_t v4 = 0;
  }
  if (result < 0 || (int64_t v5 = result, v4 < result))
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a2 < 0 || v4 < a2) {
    goto LABEL_20;
  }
  uint64_t v6 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x1E4FBC860];
  }
  if (v6 <= 0)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EBE7E138);
    uint64_t v7 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v7);
    v7[2] = v6;
    v7[3] = 2 * result - 64;
  }
  uint64_t v10 = MEMORY[0x1F4188790](result);
  MEMORY[0x1F4188790](v10);
  uint64_t result = (int64_t)sub_1DB047E9C(a3, a4, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB048574);
  uint64_t v12 = v5 + v11;
  if (__OFADD__(v5, v11)) {
    goto LABEL_21;
  }
  uint64_t v13 = a4 - a3;
  if (!a3) {
    uint64_t v13 = 0;
  }
  if (v12 < 0 || v13 < v12) {
    goto LABEL_22;
  }
  if (v11 == v6) {
    return (int64_t)v7;
  }
LABEL_23:
  __break(1u);
  return result;
}

void sub_1DB047B98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EA8FE018);
      uint64_t v7 = (void *)swift_allocObject();
      int64_t v8 = _swift_stdlib_malloc_size(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 25;
      }
      v7[2] = v5;
      v7[3] = 2 * (v9 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_1DB047C68(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5 < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = v4 + 32;
  uint64_t v8 = v4 + 31;
  do
  {
    char v14 = *(unsigned char *)(v7 + v6);
    char v9 = a1(&v14);
    if (v2) {
      break;
    }
    if (v9)
    {
      if (v6 >= v5 - 1) {
        return v6;
      }
      while (1)
      {
        char v14 = *(unsigned char *)(v8 + v5);
        uint64_t result = a1(&v14);
        uint64_t v11 = v5 - 1;
        if ((result & 1) == 0) {
          break;
        }
        uint64_t v12 = v5 - 2;
        if (__OFSUB__(v11, 1))
        {
          __break(1u);
          goto LABEL_17;
        }
        --v5;
        if (v6 >= v12) {
          return v6;
        }
      }
      if (!__OFSUB__(v11, v6))
      {
        char v13 = *(unsigned char *)(v7 + v6);
        *(unsigned char *)(v7 + v6) = *(unsigned char *)(v8 + v5);
        *(unsigned char *)(v8 + v5--) = v13;
        goto LABEL_3;
      }
LABEL_17:
      __break(1u);
      return result;
    }
LABEL_3:
    ++v6;
  }
  while (v6 < v5);
  return v6;
}

uint64_t sub_1DB047D9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 - a4;
  if (!a4) {
    uint64_t v5 = 0;
  }
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_14:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result) {
    goto LABEL_21;
  }
  return result;
}

char *sub_1DB047E24(char *__src, int64_t a2, void *__dst, int64_t a4)
{
  uint64_t v4 = __src;
  if (a2 && a4)
  {
    if (a2 >= a4) {
      size_t v5 = a4;
    }
    else {
      size_t v5 = a2;
    }
    memcpy(__dst, __src, v5);
    v4 += v5;
  }
  return v4;
}

void *sub_1DB047E9C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

void *sub_1DB047EF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *(*a3)(long long *__return_ptr, uint64_t, void *)@<X3>, _OWORD *a4@<X8>)
{
  unsigned __int8 v19 = a4;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v11 = sub_1DB08F7D0(0, *a2, v10, v9);
  uint64_t result = (void *)sub_1DB08F7D0(v7, v8, v10, v9);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a1) {
    uint64_t v14 = a1 + v11;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t result = a3(&v17, v14, v13);
  if (!v4)
  {
    uint64_t v15 = v18;
    unsigned int v16 = v19;
    *unsigned __int8 v19 = v17;
    *((void *)v16 + 2) = v15;
  }
  return result;
}

uint64_t sub_1DB047FC8()
{
  return sub_1DB046AF0();
}

unint64_t sub_1DB048010(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v2 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v3 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
    int v5 = v4 | HIWORD(v4);
    if (v5 == -1) {
      uint64_t v6 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v6 = (v5 + 1);
    }
  }
  else
  {
    uint64_t v6 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = v6;
  uint64_t v9 = v7;
  swift_retain();
  uint64_t v8 = (const void *)swift_retain();
  sub_1DB044AF8(v8, v2, &v9);
  swift_release();
  if (v1) {
    swift_release();
  }
  return v7;
}

unint64_t sub_1DB048108(unint64_t result, uint64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_1DB044BDC(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

unint64_t sub_1DB0481F4(unint64_t result, uint64_t (*a2)(void *, uint64_t *), uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | (((result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_1DB044CE0(v12, v4, a2, a3, &v13);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

void *sub_1DB0482E0(size_t a1, uint64_t a2)
{
  if (qword_1EBE7D890 != -1) {
    swift_once();
  }
  uint64_t result = off_1EBE7D888;
  int v5 = off_1EBE7D888;
  if (!a2) {
    return (void *)swift_retain();
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1DB0A928C(v5[2], v5[2], a1);
      --a2;
    }
    while (a2);
    return v5;
  }
  return result;
}

uint64_t sub_1DB0483A0(void *a1, size_t a2)
{
  uint64_t v5 = **(void **)(v2 + 16);
  swift_beginAccess();
  return sub_1DB0A942C(*(void *)(v5 + 16), *(void *)(v5 + 16), a1, a2);
}

uint64_t sub_1DB048414(int64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (HIDWORD(a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a1)
  {
    unsigned int v2 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
    unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
    int v4 = v3 | HIWORD(v3);
    if (v4 == -1) {
      uint64_t v5 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v5 = (v4 + 1);
    }
  }
  else
  {
    uint64_t v5 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = v5;
  size_t v7 = _swift_stdlib_malloc_size(v6);
  if (!a1) {
    goto LABEL_12;
  }
  if ((uint64_t)(v7 - 32) < a1)
  {
LABEL_15:
    __break(1u);
    __break(1u);
  }
  uint64_t result = ccrng();
  if (result)
  {
    ccrng_generate_bridge();
LABEL_12:
    swift_beginAccess();
    v6[2] = a1;
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

char *sub_1DB048540@<X0>(char *a1@<X0>, int64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t result = sub_1DB047E24(a1, a2, *(void **)(v3 + 16), *(void *)(v3 + 24));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }
  return result;
}

void *sub_1DB048574@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1DB047EF4(a1, *(uint64_t **)(v2 + 16), *(void *(**)(long long *__return_ptr, uint64_t, void *))(v2 + 24), a2);
}

uint64_t sub_1DB048594(uint64_t a1)
{
  uint64_t v2 = sub_1DB0C4958();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t (**)())((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *uint64_t v5 = sub_1DB04879C;
  v5[1] = (uint64_t (*)())v7;
  (*(void (**)(uint64_t (**)(), void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4F27758], v2);
  swift_retain();
  sub_1DB0C4948();
  if (v6)
  {
    sub_1DB0C48F8();
    swift_allocObject();
    swift_retain();
    uint64_t v8 = sub_1DB0C4888();
    uint64_t v9 = sub_1DB0C0CC8(v8, v6);
    swift_release();
  }
  else
  {
    uint64_t v10 = (void (*)(uint64_t, void))sub_1DB0C4948();
    v10(a1 + 32, 0);
    swift_release();
    swift_release();
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t (**)(), uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

uint64_t sub_1DB04878C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1DB04879C()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for SecureBytes.Index()
{
  return &type metadata for SecureBytes.Index;
}

ValueMetadata *type metadata accessor for HE.DcrtPlaintext()
{
  return &type metadata for HE.DcrtPlaintext;
}

uint64_t cryptokit_scrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t a8, void *a9)
{
  return scrypt(pass_len:pass:salt_len:salt:cost_N:block_size_r:parallelization:output_len:output:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t scrypt(pass_len:pass:salt_len:salt:cost_N:block_size_r:parallelization:output_len:output:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t a8, void *a9)
{
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, a2, a1);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, a4, a3);
  uint64_t v14 = (void *)_s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0(v12, v13, a8);
  if (v14)
  {
    id v15 = v14;
    memcpy(a9, objc_msgSend(v15, sel_bytes), (size_t)objc_msgSend(v15, sel_length));

    uint64_t v16 = 0;
    id v12 = v15;
  }
  else
  {
    uint64_t v16 = 4294899619;
  }

  return v16;
}

uint64_t sub_1DB0488FC()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proof();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1DB048A08(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  int v6 = *(_DWORD *)(v4 + 80);
  uint64_t v7 = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 & 0xF8;
  uint64_t v12 = v11 | 7;
  uint64_t v13 = *(void *)(v9 + 64);
  int v14 = (v10 | v6) & 0x100000;
  BOOL v15 = (v11 | 7 | v6) == 7 && v14 == 0;
  if (v15
    && (uint64_t v16 = v5 + v6,
        uint64_t v17 = v5 + 7,
        ((v13 + 7) & 0xFFFFFFFFFFFFFFF8)
      + ((v11
        + 23
        + ((v5
          + 7
          + ((v5
            + v7
            + ((v5
              + v7
              + ((v5
                + v7
                + ((v5 + v7 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7 + ((v5 + v7) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)) & ~v12)
      + 8 <= 0x18))
  {
    uint64_t v18 = ~v7;
    uint64_t v36 = ~v12;
    uint64_t v37 = v13 + 7;
    unsigned __int8 v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    char v20 = a1;
    uint64_t v38 = v8;
    uint64_t v35 = v11 + 23;
    v19(a1, a2, AssociatedTypeWitness);
    unint64_t v21 = ((unint64_t)a2 + v16) & v18;
    v19((uint64_t *)(((unint64_t)a1 + v16) & v18), (uint64_t *)v21, AssociatedTypeWitness);
    unint64_t v22 = (v16 + v21) & v18;
    v19((uint64_t *)((v16 + (((unint64_t)a1 + v16) & v18)) & v18), (uint64_t *)v22, AssociatedTypeWitness);
    unint64_t v23 = (v16 + v22) & v18;
    v19((uint64_t *)((v16 + ((v16 + (((unint64_t)a1 + v16) & v18)) & v18)) & v18), (uint64_t *)v23, AssociatedTypeWitness);
    uint64_t v24 = (v16 + v23) & v18;
    v19((uint64_t *)((v16 + ((v16 + ((v16 + (((unint64_t)a1 + v16) & v18)) & v18)) & v18)) & v18), (uint64_t *)v24, AssociatedTypeWitness);
    uint64_t v25 = (v16 + v24) & v18;
    v19((uint64_t *)((v16 + ((v16 + ((v16 + ((v16 + (((unint64_t)a1 + v16) & v18)) & v18)) & v18)) & v18)) & v18), (uint64_t *)v25, AssociatedTypeWitness);
    uint64_t v26 = (v16 + v25) & v18;
    v19((uint64_t *)((v16+ ((v16 + ((v16 + ((v16 + ((v16 + (((unint64_t)a1 + v16) & v18)) & v18)) & v18)) & v18)) & v18)) & v18), (uint64_t *)v26, AssociatedTypeWitness);
    uint64_t v27 = (v16 + v26) & v18;
    v19((uint64_t *)((v16+ ((v16+ ((v16 + ((v16 + ((v16 + ((v16 + (((unint64_t)a1 + v16) & v18)) & v18)) & v18)) & v18)) & v18)) & v18)) & v18), (uint64_t *)v27, AssociatedTypeWitness);
    uint64_t v28 = (v16 + v27) & v18;
    v19((uint64_t *)((v16+ ((v16+ ((v16+ ((v16 + ((v16 + ((v16 + ((v16 + (((unint64_t)a1 + v16) & v18)) & v18)) & v18)) & v18)) & v18)) & v18)) & v18)) & v18), (uint64_t *)v28, AssociatedTypeWitness);
    int v29 = (void *)((v17
                    + ((v16
                      + ((v16
                        + ((v16
                          + ((v16 + ((v16 + ((v16 + ((v16 + (((unint64_t)a1 + v16) & v18)) & v18)) & v18)) & v18)) & v18)) & v18)) & v18)) & v18)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = (uint64_t *)((v17 + v28) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    sub_1DB04239C(*v30, v32);
    *int v29 = v31;
    v29[1] = v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v29 + v35) & v36, ((unint64_t)v30 + v35) & v36, v38);
    *(void *)((v37 + (((unint64_t)v29 + v35) & v36)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v37 + (((unint64_t)v30 + v35) & v36)) & 0xFFFFFFFFFFFFFFF8);
    sub_1DB0C5188();
  }
  else
  {
    uint64_t v33 = *a2;
    *a1 = *a2;
    char v20 = (uint64_t *)(v33 + (((v12 | v7) + 16) & ~(v12 | v7)));
    swift_retain();
  }
  return v20;
}

uint64_t sub_1DB048E28(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 72);
  uint64_t v8 = (v6 + v7 + a1) & ~v7;
  v4(v8, AssociatedTypeWitness);
  uint64_t v9 = (v6 + v7 + v8) & ~v7;
  v4(v9, AssociatedTypeWitness);
  uint64_t v10 = (v6 + v7 + v9) & ~v7;
  v4(v10, AssociatedTypeWitness);
  uint64_t v11 = (v6 + v7 + v10) & ~v7;
  v4(v11, AssociatedTypeWitness);
  uint64_t v12 = (v6 + v7 + v11) & ~v7;
  v4(v12, AssociatedTypeWitness);
  uint64_t v13 = (v6 + v7 + v12) & ~v7;
  v4(v13, AssociatedTypeWitness);
  uint64_t v14 = (v6 + v7 + v13) & ~v7;
  v4(v14, AssociatedTypeWitness);
  uint64_t v15 = (v6 + v7 + v14) & ~v7;
  v4(v15, AssociatedTypeWitness);
  unint64_t v16 = (v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1DB042664(*(void *)v16, *(void *)(v16 + 8));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(_DWORD *)(v18 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t, uint64_t))(v18 + 8))((v19 + v16 + 16) & ~v19, v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DB0490A8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  uint64_t v13 = (v8 + v9 + v11) & ~v9;
  v6(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v8 + v9 + v12) & ~v9;
  uint64_t v15 = (v8 + v9 + v13) & ~v9;
  v6(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = (v8 + v9 + v14) & ~v9;
  uint64_t v17 = (v8 + v9 + v15) & ~v9;
  v6(v16, v17, AssociatedTypeWitness);
  uint64_t v18 = (v8 + v9 + v16) & ~v9;
  uint64_t v19 = (v8 + v9 + v17) & ~v9;
  v6(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = (v8 + v9 + v18) & ~v9;
  uint64_t v21 = (v8 + v9 + v19) & ~v9;
  v6(v20, v21, AssociatedTypeWitness);
  uint64_t v22 = (v8 + v9 + v20) & ~v9;
  uint64_t v23 = (v8 + v9 + v21) & ~v9;
  v6(v22, v23, AssociatedTypeWitness);
  uint64_t v24 = (v8 + v9 + v22) & ~v9;
  uint64_t v25 = (v8 + v9 + v23) & ~v9;
  v6(v24, v25, AssociatedTypeWitness);
  uint64_t v26 = (void *)((v8 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (uint64_t *)((v8 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_1DB04239C(*v27, v29);
  *uint64_t v26 = v28;
  v26[1] = v29;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = v31 + 16;
  uint64_t v33 = *(_DWORD *)(v31 + 80) & 0xF8;
  uint64_t v34 = v33 + 23;
  unint64_t v35 = (unint64_t)v26 + v33 + 23;
  unint64_t v36 = ~v33 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = v35 & v36;
  unint64_t v38 = ((unint64_t)v27 + v34) & v36;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v31 + 16))(v35 & v36, v38, v30);
  *(void *)((*(void *)(v32 + 48) + 7 + v37) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v32 + 48)
                                                                                       + 7
                                                                                       + v38) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  return a1;
}

uint64_t sub_1DB0493C8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  uint64_t v13 = (v8 + v9 + v11) & ~v9;
  v6(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v8 + v9 + v12) & ~v9;
  uint64_t v15 = (v8 + v9 + v13) & ~v9;
  v6(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = (v8 + v9 + v14) & ~v9;
  uint64_t v17 = (v8 + v9 + v15) & ~v9;
  v6(v16, v17, AssociatedTypeWitness);
  uint64_t v18 = (v8 + v9 + v16) & ~v9;
  uint64_t v19 = (v8 + v9 + v17) & ~v9;
  v6(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = (v8 + v9 + v18) & ~v9;
  uint64_t v21 = (v8 + v9 + v19) & ~v9;
  v6(v20, v21, AssociatedTypeWitness);
  uint64_t v22 = (v8 + v9 + v20) & ~v9;
  uint64_t v23 = (v8 + v9 + v21) & ~v9;
  v6(v22, v23, AssociatedTypeWitness);
  uint64_t v24 = (v8 + v9 + v22) & ~v9;
  uint64_t v25 = (v8 + v9 + v23) & ~v9;
  v6(v24, v25, AssociatedTypeWitness);
  uint64_t v26 = (uint64_t *)((v8 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (uint64_t *)((v8 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_1DB04239C(*v27, v29);
  uint64_t v30 = *v26;
  unint64_t v31 = v26[1];
  *uint64_t v26 = v28;
  v26[1] = v29;
  sub_1DB042664(v30, v31);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v33 + 24;
  uint64_t v35 = *(_DWORD *)(v33 + 80) & 0xF8;
  uint64_t v36 = v35 + 23;
  unint64_t v37 = (unint64_t)v26 + v35 + 23;
  unint64_t v38 = ~v35 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = v37 & v38;
  unint64_t v40 = ((unint64_t)v27 + v36) & v38;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 24))(v37 & v38, v40, v32);
  *(void *)((*(void *)(v34 + 40) + 7 + v39) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v34 + 40)
                                                                                       + 7
                                                                                       + v40) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB0496FC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  uint64_t v13 = (v8 + v9 + v11) & ~v9;
  v6(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v8 + v9 + v12) & ~v9;
  uint64_t v15 = (v8 + v9 + v13) & ~v9;
  v6(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = (v8 + v9 + v14) & ~v9;
  uint64_t v17 = (v8 + v9 + v15) & ~v9;
  v6(v16, v17, AssociatedTypeWitness);
  uint64_t v18 = (v8 + v9 + v16) & ~v9;
  uint64_t v19 = (v8 + v9 + v17) & ~v9;
  v6(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = (v8 + v9 + v18) & ~v9;
  uint64_t v21 = (v8 + v9 + v19) & ~v9;
  v6(v20, v21, AssociatedTypeWitness);
  uint64_t v22 = (v8 + v9 + v20) & ~v9;
  uint64_t v23 = (v8 + v9 + v21) & ~v9;
  v6(v22, v23, AssociatedTypeWitness);
  uint64_t v24 = (v8 + v9 + v22) & ~v9;
  uint64_t v25 = (v8 + v9 + v23) & ~v9;
  v6(v24, v25, AssociatedTypeWitness);
  uint64_t v26 = (_OWORD *)((v8 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (_OWORD *)((v8 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v26 = *v27;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = v29 + 32;
  uint64_t v31 = *(_DWORD *)(v29 + 80) & 0xF8;
  uint64_t v32 = v31 + 23;
  unint64_t v33 = (unint64_t)v26 + v31 + 23;
  unint64_t v34 = ~v31 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = v33 & v34;
  unint64_t v36 = ((unint64_t)v27 + v32) & v34;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 32))(v33 & v34, v36, v28);
  *(void *)((*(void *)(v30 + 32) + 7 + v35) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v30 + 32)
                                                                                       + 7
                                                                                       + v36) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1DB049A0C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  uint64_t v13 = (v8 + v9 + v11) & ~v9;
  v6(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v8 + v9 + v12) & ~v9;
  uint64_t v15 = (v8 + v9 + v13) & ~v9;
  v6(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = (v8 + v9 + v14) & ~v9;
  uint64_t v17 = (v8 + v9 + v15) & ~v9;
  v6(v16, v17, AssociatedTypeWitness);
  uint64_t v18 = (v8 + v9 + v16) & ~v9;
  uint64_t v19 = (v8 + v9 + v17) & ~v9;
  v6(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = (v8 + v9 + v18) & ~v9;
  uint64_t v21 = (v8 + v9 + v19) & ~v9;
  v6(v20, v21, AssociatedTypeWitness);
  uint64_t v22 = (v8 + v9 + v20) & ~v9;
  uint64_t v23 = (v8 + v9 + v21) & ~v9;
  v6(v22, v23, AssociatedTypeWitness);
  uint64_t v24 = (v8 + v9 + v22) & ~v9;
  uint64_t v25 = (v8 + v9 + v23) & ~v9;
  v6(v24, v25, AssociatedTypeWitness);
  uint64_t v26 = (uint64_t *)((v8 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (_OWORD *)((v8 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = *v26;
  unint64_t v29 = v26[1];
  *(_OWORD *)uint64_t v26 = *v27;
  sub_1DB042664(v28, v29);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = v31 + 40;
  uint64_t v33 = *(_DWORD *)(v31 + 80) & 0xF8;
  uint64_t v34 = v33 + 23;
  unint64_t v35 = (unint64_t)v26 + v33 + 23;
  unint64_t v36 = ~v33 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = v35 & v36;
  unint64_t v38 = ((unint64_t)v27 + v34) & v36;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v31 + 40))(v35 & v36, v38, v30);
  *(void *)((*(void *)(v32 + 24) + 7 + v37) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v32 + 24)
                                                                                       + 7
                                                                                       + v38) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB049D2C(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v6 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v6;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = v10 + 7;
  uint64_t v16 = *(_DWORD *)(v8 + 80) & 0xF8;
  unint64_t v17 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = v16 + 23;
  uint64_t v19 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  if (v13 < a2)
  {
    unint64_t v20 = (v19 & 0xFFFFFFFFFFFFFFF8)
        + ((v18
          + ((v15
            + ((v14
              + ((v14 + ((v14 + ((v14 + ((v14 + ((v14 + ((v14 + (v14 & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & 0xFFFFFFFFFFFFFFF8)) & v17)
        + 8;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v13 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v20);
        if (!*((unsigned char *)a1 + v20)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v20);
        if (*(_WORD *)((char *)a1 + v20)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1DB04A0F4);
      case 4:
        int v24 = *(_DWORD *)((char *)a1 + v20);
        if (!v24) {
          break;
        }
LABEL_25:
        int v26 = v24 - 1;
        if ((v20 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v13 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  if (v6 >= v12)
  {
    uint64_t v30 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
    return v30(a1, v6, AssociatedTypeWitness);
  }
  else
  {
    unint64_t v28 = (v18
         + ((v15
           + ((v14
             + ((v14
               + ((v14
                 + ((v14 + ((v14 + ((v14 + ((v14 + (((unint64_t)a1 + v14) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & 0xFFFFFFFFFFFFFFF8)) & v17;
    if (v9 < 0x7FFFFFFF)
    {
      unint64_t v31 = *(void *)((v19 + v28) & 0xFFFFFFFFFFFFFFF8);
      if (v31 >= 0xFFFFFFFF) {
        LODWORD(v31) = -1;
      }
      return (v31 + 1);
    }
    else
    {
      unint64_t v29 = *(uint64_t (**)(unint64_t))(v8 + 48);
      return v29(v28);
    }
  }
}

void sub_1DB04A108(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (v7 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = v7;
  }
  uint64_t v15 = v11 + v12;
  uint64_t v16 = v11 + 7;
  unint64_t v17 = (v11
       + 7
       + ((v11
         + v12
         + ((v11
           + v12
           + ((v11
             + v12
             + ((v11 + v12 + ((v11 + v12 + ((v11 + v12 + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(_DWORD *)(v9 + 80) & 0xF8;
  unint64_t v19 = ~v18 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = v18 + 23;
  uint64_t v21 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  size_t v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v23 = ((v20 + v17) & v19) + v22;
  if (v14 >= a3)
  {
    int v26 = 0;
  }
  else
  {
    if (v23) {
      unsigned int v24 = 2;
    }
    else {
      unsigned int v24 = a3 - v14 + 1;
    }
    if (v24 >= 0x10000) {
      int v25 = 4;
    }
    else {
      int v25 = 2;
    }
    if (v24 < 0x100) {
      int v25 = 1;
    }
    if (v24 >= 2) {
      int v26 = v25;
    }
    else {
      int v26 = 0;
    }
  }
  if (a2 > v14)
  {
    if (v23) {
      int v27 = 1;
    }
    else {
      int v27 = a2 - v14;
    }
    if (v23)
    {
      int v28 = ~v14 + a2;
      bzero(a1, v23);
      *a1 = v28;
    }
    switch(v26)
    {
      case 1:
        *((unsigned char *)a1 + v23) = v27;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v23) = v27;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)((char *)a1 + v23) = v27;
        return;
      default:
        return;
    }
  }
  uint64_t v29 = ~v12;
  switch(v26)
  {
    case 1:
      *((unsigned char *)a1 + v23) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)((char *)a1 + v23) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x1DB04A548);
    case 4:
      *(_DWORD *)((char *)a1 + v23) = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v7 >= v13)
        {
          uint64_t v32 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v32(a1, a2, v7, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v30 = (_DWORD *)((v20
                          + ((v16
                            + ((v15
                              + ((v15
                                + ((v15
                                  + ((v15
                                    + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & 0xFFFFFFFFFFFFFFF8)) & v19);
          if (v13 >= a2)
          {
            if (v10 < 0x7FFFFFFF)
            {
              uint64_t v34 = (void *)(((unint64_t)v30 + v21) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v35 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v35 = (a2 - 1);
              }
              *uint64_t v34 = v35;
            }
            else
            {
              uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
              v33((v20+ ((v16+ ((v15+ ((v15+ ((v15+ ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & 0xFFFFFFFFFFFFFFF8)) & v19, a2);
            }
          }
          else if ((v21 & 0xFFFFFFF8) != 0xFFFFFFF8)
          {
            int v31 = ~v13 + a2;
            bzero((void *)((v20+ ((v16+ ((v15+ ((v15+ ((v15+ ((v15+ ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v15) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & v29)) & 0xFFFFFFFFFFFFFFF8)) & v19), v22);
            *uint64_t v30 = v31;
          }
        }
      }
      return;
  }
}

uint64_t _s17EncryptedIssuanceVMa()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_1DB04A588@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1DB04A5A0(a1, a2);
}

void *sub_1DB04A5A0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB04A5B4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DB0C48A8();
  if (!result || (uint64_t result = sub_1DB0C48D8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1DB0C48C8();
      sub_1DB0C4F98();
      sub_1DB04A9EC();
      return sub_1DB0C4CD8();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB04A664(uint64_t a1, unint64_t a2)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1DB0C4F98();
  uint64_t v18 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1DB0C4D18();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DB04A9EC();
  sub_1DB0C4CF8();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v17 = v7;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      uint64_t v16 = 0;
      sub_1DB04239C(a1, a2);
      sub_1DB04A5B4((int)a1, a1 >> 32);
      sub_1DB042664(a1, a2);
      uint64_t v7 = v17;
      goto LABEL_9;
    case 2uLL:
      uint64_t v16 = 0;
      uint64_t v17 = v7;
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      sub_1DB04239C(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v13 = v12;
      uint64_t v7 = v17;
      sub_1DB04A5B4(v13, v11);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      memset(v19, 0, 14);
      goto LABEL_7;
    default:
      v19[0] = a1;
      LOWORD(v19[1]) = a2;
      BYTE2(v19[1]) = BYTE2(a2);
      BYTE3(v19[1]) = BYTE3(a2);
      BYTE4(v19[1]) = BYTE4(a2);
      BYTE5(v19[1]) = BYTE5(a2);
LABEL_7:
      sub_1DB0C4CD8();
LABEL_8:
      sub_1DB042664(a1, a2);
LABEL_9:
      sub_1DB0C4CE8();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v4);
      sub_1DB0C4D08();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return v19[0];
  }
}

unint64_t sub_1DB04A9EC()
{
  unint64_t result = qword_1EA8FE0A0;
  if (!qword_1EA8FE0A0)
  {
    sub_1DB0C4F98();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE0A0);
  }
  return result;
}

char *sub_1DB04AA44(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = sub_1DB0C4D18();
  uint64_t v8 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  unsigned int v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_1DB0C4F98();
  uint64_t v11 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1DB04A664(a1, a2);
  if (a4 < 0) {
    goto LABEL_30;
  }
  if (a4)
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    if (!a3) {
      goto LABEL_32;
    }
    uint64_t v15 = 0;
    unint64_t v40 = &v45;
    unint64_t v41 = bswap64(v14);
    unint64_t v38 = (void (**)(char *, uint64_t))(v11 + 8);
    unint64_t v39 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v16 = (char *)MEMORY[0x1E4FBC860];
    long long v34 = xmmword_1DB0C77B0;
    uint64_t v32 = a4;
    unint64_t v37 = a3;
    uint64_t v17 = v42;
    while (1)
    {
      if (v15 == a4) {
        goto LABEL_29;
      }
      uint64_t v33 = v15;
      sub_1DB0C4F88();
      unint64_t v44 = v41;
      sub_1DB0C4F58();
      sub_1DB0C5188();
      unint64_t v18 = sub_1DB04A9EC();
      uint64_t v19 = v42;
      unint64_t v36 = v18;
      sub_1DB0C4CD8();
      swift_bridgeObjectRelease();
      sub_1DB0C4F68();
      sub_1DB0C4D08();
      unint64_t v20 = v44 % a3;
      uint64_t v35 = *v39;
      v35(v10, v43);
      uint64_t v21 = *v38;
      (*v38)(v13, v19);
      uint64_t v22 = *((void *)v16 + 2);
      if (v22)
      {
        unsigned int v23 = 0;
        while (1)
        {
          if (*((void *)v16 + 4) != v20)
          {
            if (v22 == 1) {
              goto LABEL_20;
            }
            if (*((void *)v16 + 5) != v20) {
              break;
            }
          }
LABEL_12:
          if (v23 < 0xA)
          {
            ++v23;
            sub_1DB0C4F88();
            unint64_t v44 = v41;
            sub_1DB0C4F58();
            __swift_instantiateConcreteTypeFromMangledName(qword_1EBE7E138);
            uint64_t v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = v34;
            *(unsigned char *)(v24 + 32) = v23;
            sub_1DB0C5188();
            sub_1DB0C4CD8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1DB0C4F68();
            sub_1DB0C4D08();
            unint64_t v20 = v44 % v37;
            v35(v10, v43);
            v21(v13, v17);
            uint64_t v22 = *((void *)v16 + 2);
            if (v22) {
              continue;
            }
          }
          goto LABEL_20;
        }
        if (v22 != 2) {
          break;
        }
      }
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_1DB07E66C(0, v22 + 1, 1, v16);
      }
      a4 = v32;
      uint64_t v27 = v33;
      unint64_t v29 = *((void *)v16 + 2);
      unint64_t v28 = *((void *)v16 + 3);
      if (v29 >= v28 >> 1)
      {
        uint64_t v30 = sub_1DB07E66C((char *)(v28 > 1), v29 + 1, 1, v16);
        uint64_t v27 = v33;
        uint64_t v16 = v30;
      }
      uint64_t v15 = v27 + 1;
      *((void *)v16 + 2) = v29 + 1;
      *(void *)&v16[8 * v29 + 32] = v20;
      a3 = v37;
      if (v15 == a4) {
        return v16;
      }
    }
    uint64_t v25 = 6;
    while (1)
    {
      uint64_t v26 = v25 - 3;
      if (__OFADD__(v25 - 4, 1)) {
        break;
      }
      if (*(void *)&v16[8 * v25] == v20) {
        goto LABEL_12;
      }
      ++v25;
      if (v26 == v22) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  return (char *)MEMORY[0x1E4FBC860];
}

unint64_t static Padme.paddedMessageByteCount(_:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = __clz(result);
    unint64_t v2 = __clz(v1 ^ 0x3F);
    unint64_t v3 = ~v1;
    BOOL v5 = __OFADD__(v2, v3);
    uint64_t v6 = v2 + v3;
    BOOL v4 = v6 < 0;
    uint64_t v7 = 1 << v6;
    if (v4 != v5) {
      uint64_t v7 = 0;
    }
    BOOL v8 = v7 != 0;
    uint64_t v9 = v7 - 1;
    if (v8)
    {
      if (__CFADD__(result, v9)) {
        return 0;
      }
      else {
        return (result + v9) & ~v9;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Padme()
{
  return &type metadata for Padme;
}

uint64_t PEC.SimilarityClient.similarityConfig.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 17);
  uint64_t v3 = *(void *)(v1 + 24);
  char v4 = *(unsigned char *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 1) = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  sub_1DB0C5188();
  return sub_1DB0C5188();
}

uint64_t PEC.SimilarityClient.init(config:secretKey:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  char v5 = a1[1];
  unint64_t v6 = *((void *)a1 + 1);
  char v7 = a1[16];
  uint64_t v9 = *((void *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a1 + 5);
  uint64_t v11 = *a2;
  unint64_t v24 = a2[1];
  LOBYTE(v18) = v4;
  BYTE1(v18) = v5;
  unint64_t v19 = v6;
  char v20 = v7;
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  uint64_t v23 = v10;
  uint64_t result = sub_1DB04E638();
  if (v3)
  {
    sub_1DB042664(v11, v24);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = result;
  uint64_t v16 = v9;
  uint64_t v18 = v11;
  unint64_t v19 = v24;
  if ((result & 0xC000000000000001) != 0)
  {
    sub_1DB0C5188();
    uint64_t v14 = MEMORY[0x1E01881C0](0, v13);
    goto LABEL_6;
  }
  if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v14 = *(void *)(result + 32);
    sub_1DB0C5188();
    swift_retain();
LABEL_6:
    uint64_t v15 = sub_1DB0A208C(&v18, v14);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v13;
    *(void *)(a3 + 8) = v15;
    *(unsigned char *)(a3 + 16) = v4;
    *(unsigned char *)(a3 + 17) = v5;
    *(void *)(a3 + 24) = v6;
    *(unsigned char *)(a3 + 32) = v7;
    *(void *)(a3 + 40) = v16;
    *(void *)(a3 + 48) = v8;
    *(void *)(a3 + 56) = v10;
    return result;
  }
  __break(1u);
  return result;
}

void PEC.SimilarityClient.generateGaloisKey()(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[6];
  if ((*v1 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = MEMORY[0x1E01881C0](0);
    goto LABEL_4;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    swift_retain();
LABEL_4:
    sub_1DB0C5188();
    swift_retain();
    sub_1DB0B4838(v6, v5, v4, a1);
    return;
  }
  __break(1u);
}

int64_t PEC.SimilarityClient.query(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = PEC.SimilarityClient.queryCrt(values:)(a1);
  if (!v2)
  {
    int64_t v5 = result;
    if (*(void *)(result + 16))
    {
      char v6 = *(unsigned char *)(result + 48);
      uint64_t v7 = *(void *)(result + 56);
      *(_OWORD *)a2 = *(_OWORD *)(v5 + 32);
      *(unsigned char *)(a2 + 16) = v6;
      *(void *)(a2 + 24) = v7;
      sub_1DB0C5188();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

int64_t PEC.SimilarityClient.queryCrt(values:)(uint64_t a1)
{
  long long v4 = v1[2];
  long long v46 = v1[3];
  long long v5 = v1[1];
  v45[0] = *v1;
  v45[1] = v5;
  v45[2] = v4;
  long long v48 = v5;
  uint64_t v6 = v4;
  v47[0] = (unint64_t)v4 >> 8;
  *(_DWORD *)((char *)v47 + 3) = DWORD1(v4);
  uint64_t v7 = *((void *)&v4 + 1);
  long long v8 = v46;
  int64_t v9 = *(void *)(a1 + 16);
  if (*((void *)&v4 + 1) != -1)
  {
    if (!*((void *)&v4 + 1))
    {
      if (v9)
      {
LABEL_6:
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v10 = 1;
        *(unsigned char *)(v10 + 4) = 1;
        swift_willThrow();
        return v9;
      }
      __break(1u);
    }
    if (v9 % *((void *)&v4 + 1)) {
      goto LABEL_6;
    }
  }
  sub_1DB0C5188();
  uint64_t v11 = sub_1DB04D128(0, v9, v7, a1, v7);
  swift_bridgeObjectRelease();
  sub_1DB04D710((uint64_t)v45);
  uint64_t v12 = sub_1DB04D574(v11, (uint64_t)v45);
  sub_1DB04D764((uint64_t)v45);
  swift_bridgeObjectRelease();
  if (v7 < 1 || (uint64_t v36 = v9 / v7, v9 / v7 < 1))
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v27 = 1;
    *(unsigned char *)(v27 + 4) = 1;
    swift_willThrow();
  }
  else
  {
    long long v40 = v48;
    char v41 = v6;
    *(_DWORD *)uint64_t v42 = v47[0];
    *(_DWORD *)&v42[3] = *(_DWORD *)((char *)v47 + 3);
    uint64_t v43 = v7;
    long long v44 = v8;
    int64_t v9 = (int64_t)&v40;
    uint64_t v13 = sub_1DB04E638();
    if (!v2)
    {
      unint64_t v14 = v13;
      uint64_t v35 = *(void *)(*((void *)&v8 + 1) + 16);
      int64_t v39 = MEMORY[0x1E4FBC860];
      sub_1DB04C258(0, 0, 0);
      int64_t v9 = v39;
      if (v14 >> 62) {
        goto LABEL_26;
      }
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      sub_1DB0C5188();
      if (!v15)
      {
LABEL_27:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v9;
      }
LABEL_12:
      uint64_t v33 = *((void *)&v45[0] + 1);
      unint64_t v34 = v14 & 0xC000000000000001;
      uint64_t v16 = 4;
      uint64_t v31 = v7;
      unint64_t v32 = v14;
      uint64_t v30 = v12;
      while (1)
      {
        uint64_t v17 = v16 - 4;
        if (v34)
        {
          unint64_t v14 = MEMORY[0x1E01881C0](v16 - 4, v14);
          uint64_t v18 = v16 - 3;
          if (__OFADD__(v17, 1)) {
            goto LABEL_25;
          }
        }
        else
        {
          unint64_t v14 = *(void *)(v14 + 8 * v16);
          swift_retain();
          uint64_t v18 = v16 - 3;
          if (__OFADD__(v17, 1))
          {
LABEL_25:
            __break(1u);
LABEL_26:
            sub_1DB0C5188();
            uint64_t v15 = sub_1DB0C5368();
            if (!v15) {
              goto LABEL_27;
            }
            goto LABEL_12;
          }
        }
        uint64_t v49 = v18;
        v38[0] = v36;
        v38[1] = v7;
        unsigned __int8 v37 = v6;
        swift_retain();
        sub_1DB0C5188();
        swift_retain();
        sub_1DB0B56B4(v14, v38, &v37, v12, v33, v35 != 0, (uint64_t)&v40);
        uint64_t v19 = v15;
        uint64_t v20 = v6;
        swift_release();
        long long v21 = v40;
        char v22 = v41;
        uint64_t v23 = v43;
        int64_t v39 = v9;
        unint64_t v25 = *(void *)(v9 + 16);
        unint64_t v24 = *(void *)(v9 + 24);
        if (v25 >= v24 >> 1)
        {
          long long v29 = v40;
          sub_1DB04C258((char *)(v24 > 1), v25 + 1, 1);
          long long v21 = v29;
          int64_t v9 = v39;
        }
        *(void *)(v9 + 16) = v25 + 1;
        int64_t v26 = v9 + 32 * v25;
        *(_OWORD *)(v26 + 32) = v21;
        *(unsigned char *)(v26 + 48) = v22;
        *(void *)(v26 + 56) = v23;
        ++v16;
        uint64_t v15 = v19;
        uint64_t v6 = v20;
        uint64_t v12 = v30;
        uint64_t v7 = v31;
        unint64_t v14 = v32;
        if (v49 == v19) {
          goto LABEL_27;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1DB04B67C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  int64_t v5 = *(void *)(*a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v30 = MEMORY[0x1E4FBC860];
    sub_1DB04C2D0(0, v5, 0);
    uint64_t v6 = v30;
    uint64_t v7 = (float *)(v4 + 32);
    unint64_t v8 = *(void *)(v30 + 16);
    int64_t v9 = v5;
    do
    {
      float v10 = *v7;
      uint64_t v31 = v6;
      unint64_t v11 = *(void *)(v6 + 24);
      unint64_t v12 = v8 + 1;
      if (v8 >= v11 >> 1)
      {
        sub_1DB04C2D0((char *)(v11 > 1), v8 + 1, 1);
        uint64_t v6 = v31;
      }
      *(void *)(v6 + 16) = v12;
      *(float *)(v6 + 4 * v8 + 32) = v10 * v10;
      ++v7;
      ++v8;
      --v9;
    }
    while (v9);
  }
  else
  {
    unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v12)
    {
      uint64_t v21 = MEMORY[0x1E4FBC860];
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  if (v12 < 2)
  {
    unint64_t v13 = 0;
    float v14 = 0.0;
LABEL_13:
    unint64_t v17 = v12 - v13;
    uint64_t v18 = (float *)(v6 + 4 * v13 + 32);
    do
    {
      float v19 = *v18++;
      float v14 = v14 + v19;
      --v17;
    }
    while (v17);
    goto LABEL_15;
  }
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v15 = (float *)(v6 + 36);
  float v14 = 0.0;
  unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    float v14 = (float)(v14 + *(v15 - 1)) + *v15;
    v15 += 2;
    v16 -= 2;
  }
  while (v16);
  if (v12 != v13) {
    goto LABEL_13;
  }
LABEL_15:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = MEMORY[0x1E4FBC860];
  if (!v5)
  {
LABEL_28:
    *a3 = v21;
    return result;
  }
  float v22 = (float)*(uint64_t *)(a2 + 24);
  uint64_t v32 = MEMORY[0x1E4FBC860];
  float v23 = sqrtf(v14);
  uint64_t result = (uint64_t)sub_1DB04C2A8(0, v5, 0);
  uint64_t v21 = v32;
  unint64_t v24 = (float *)(v4 + 32);
  while (1)
  {
    if ((LODWORD(v23) & 0x7FFFFFFF) == 0)
    {
      uint64_t v26 = 0;
      goto LABEL_23;
    }
    float v25 = roundf((float)(*v24 * v22) / v23);
    if ((~LODWORD(v25) & 0x7F800000) == 0) {
      break;
    }
    if (v25 <= -9.2234e18) {
      goto LABEL_30;
    }
    if (v25 >= 9.2234e18) {
      goto LABEL_31;
    }
    uint64_t v26 = (uint64_t)v25;
LABEL_23:
    unint64_t v28 = *(void *)(v32 + 16);
    unint64_t v27 = *(void *)(v32 + 24);
    if (v28 >= v27 >> 1) {
      uint64_t result = (uint64_t)sub_1DB04C2A8((char *)(v27 > 1), v28 + 1, 1);
    }
    *(void *)(v32 + 16) = v28 + 1;
    *(void *)(v32 + 8 * v28 + 32) = v26;
    ++v24;
    if (!--v5) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1DB04B8E0(uint64_t a1, unint64_t a2, uint64_t (*a3)(long long *, uint64_t))
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v39 = *(void *)(a1 + 16);
  unint64_t v34 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_61;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v6 >= v39) {
      uint64_t v7 = v39;
    }
    else {
      uint64_t v7 = v6;
    }
    uint64_t v44 = MEMORY[0x1E4FBC860];
    sub_1DB04C2F0(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
LABEL_63:
      uint64_t result = swift_bridgeObjectRelease();
LABEL_64:
      __break(1u);
      return result;
    }
    uint64_t v8 = v44;
    unint64_t v28 = v4;
    uint64_t v26 = v5;
    if (v7)
    {
      uint64_t v35 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v29 = v4 + 32;
      unint64_t v31 = v4 & 0xC000000000000001;
      sub_1DB0C5188();
      uint64_t result = sub_1DB0C5188();
      uint64_t v10 = 0;
      unint64_t v11 = (uint64_t *)(v5 + 56);
      while (v7 != v10)
      {
        if (v39 == v10) {
          goto LABEL_64;
        }
        if (v10 >= v39) {
          goto LABEL_53;
        }
        long long v37 = *(_OWORD *)(v11 - 3);
        unint64_t v4 = *((unsigned __int8 *)v11 - 8);
        uint64_t v12 = *v11;
        if (v34)
        {
          sub_1DB0C5188();
          sub_1DB0C5188();
          uint64_t v5 = sub_1DB0C5368();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v5 = *(void *)(v35 + 16);
          sub_1DB0C5188();
        }
        if (v10 == v5) {
          goto LABEL_63;
        }
        if (v31)
        {
          uint64_t result = MEMORY[0x1E01881C0](v10, v28);
          uint64_t v5 = result;
        }
        else
        {
          if (v10 < 0) {
            goto LABEL_54;
          }
          if ((unint64_t)v10 >= *(void *)(v35 + 16)) {
            goto LABEL_55;
          }
          uint64_t v5 = *(void *)(v29 + 8 * v10);
          uint64_t result = swift_retain();
        }
        uint64_t v32 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_56;
        }
        long long v40 = v37;
        char v41 = v4;
        uint64_t v42 = v12;
        uint64_t v43 = v5;
        if (!v12) {
          goto LABEL_64;
        }
        uint64_t v13 = a3(&v40, v5);
        if (v3)
        {
LABEL_50:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_51;
        }
        uint64_t v14 = v13;
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v44 = v8;
        unint64_t v4 = *(void *)(v8 + 16);
        unint64_t v15 = *(void *)(v8 + 24);
        uint64_t v5 = v4 + 1;
        if (v4 >= v15 >> 1)
        {
          uint64_t result = (uint64_t)sub_1DB04C2F0((void *)(v15 > 1), v4 + 1, 1);
          uint64_t v8 = v44;
        }
        ++v10;
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 8 * v4 + 32) = v14;
        v11 += 4;
        if (v7 == v10)
        {
          unint64_t v4 = v28;
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    sub_1DB0C5188();
    sub_1DB0C5188();
    uint64_t v32 = 0;
    uint64_t v10 = 0;
LABEL_30:
    uint64_t v36 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v39 == v10) {
      break;
    }
    uint64_t v16 = 0;
    unint64_t v30 = v4 & 0xC000000000000001;
    uint64_t v17 = v4 + 8 * v32 + 32;
    unint64_t v4 = v26 + 32 * v10 + 56;
    uint64_t v27 = v17;
    while (v10 + v16 < v39)
    {
      long long v38 = *(_OWORD *)(v4 - 24);
      char v18 = *(unsigned char *)(v4 - 8);
      uint64_t v5 = *(void *)v4;
      if (v34)
      {
        sub_1DB0C5188();
        sub_1DB0C5188();
        uint64_t v19 = sub_1DB0C5368();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = *(void *)(v36 + 16);
        sub_1DB0C5188();
      }
      unint64_t v20 = v32 + v16;
      if (v32 + v16 == v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      if (v30)
      {
        uint64_t v21 = MEMORY[0x1E01881C0]();
      }
      else
      {
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_58;
        }
        if (v20 >= *(void *)(v36 + 16)) {
          goto LABEL_59;
        }
        uint64_t v21 = *(void *)(v27 + 8 * v16);
        swift_retain();
      }
      if (!(v32 - 0x7FFFFFFFFFFFFFFFLL + v16)) {
        goto LABEL_60;
      }
      long long v40 = v38;
      char v41 = v18;
      uint64_t v42 = v5;
      uint64_t v43 = v21;
      uint64_t v22 = a3(&v40, v21);
      if (v3) {
        goto LABEL_50;
      }
      uint64_t v23 = v22;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v44 = v8;
      unint64_t v25 = *(void *)(v8 + 16);
      unint64_t v24 = *(void *)(v8 + 24);
      uint64_t v5 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        sub_1DB04C2F0((void *)(v24 > 1), v25 + 1, 1);
        uint64_t v8 = v44;
      }
      *(void *)(v8 + 16) = v5;
      *(void *)(v8 + 8 * v25 + 32) = v23;
      ++v16;
      v4 += 32;
      if (v39 - v10 == v16) {
        goto LABEL_31;
      }
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    sub_1DB0C5188();
    uint64_t v6 = sub_1DB0C5368();
    swift_bridgeObjectRelease();
  }
LABEL_31:
  swift_bridgeObjectRelease();
LABEL_51:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t PEC.SimilarityClient.decrypt(reply:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  char v3 = *((unsigned char *)a1 + 16);
  uint64_t v4 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DB0C77B0;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v2;
  *(unsigned char *)(inited + 48) = v3;
  *(void *)(inited + 56) = v4;
  sub_1DB0C5188();
  uint64_t v6 = PEC.SimilarityClient.decryptCrt(reply:)();
  swift_setDeallocating();
  swift_arrayDestroy();
  return v6;
}

uint64_t PEC.SimilarityClient.decryptCrt(reply:)()
{
  long long v14 = *(_OWORD *)(v0 + 16);
  unint64_t v2 = *(void *)v0;
  sub_1DB0C5188();
  uint64_t v3 = sub_1DB0C5188();
  uint64_t v4 = sub_1DB04B8E0(v3, v2, (uint64_t (*)(long long *, uint64_t))sub_1DB04D7B4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    return v2;
  }
  uint64_t v5 = PEC.SimilarityClientConfig.plaintextModuli()();
  uint64_t v7 = sub_1DB06BAB0(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((unsigned __int128)(*((uint64_t *)&v14 + 1) * (__int128)*((uint64_t *)&v14 + 1)) >> 64 == (uint64_t)(*((void *)&v14 + 1) * *((void *)&v14 + 1)) >> 63)
  {
    int64_t v8 = *((void *)v7 + 2);
    if (v8)
    {
      unint64_t v13 = MEMORY[0x1E4FBC860];
      sub_1DB04C2D0(0, v8, 0);
      uint64_t v9 = 0;
      unint64_t v2 = v13;
      unint64_t v10 = *(void *)(v13 + 16);
      do
      {
        uint64_t v11 = *(void *)&v7[8 * v9 + 32];
        unint64_t v12 = *(void *)(v13 + 24);
        if (v10 >= v12 >> 1) {
          sub_1DB04C2D0((char *)(v12 > 1), v10 + 1, 1);
        }
        ++v9;
        *(void *)(v13 + 16) = v10 + 1;
        *(float *)(v13 + 4 * v10++ + 32) = (float)v11 / (float)(uint64_t)(*((void *)&v14 + 1) * *((void *)&v14 + 1));
      }
      while (v8 != v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E4FBC860];
    }
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB04C0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  uint64_t v8 = *(void *)(a3 + 8);
  swift_retain();
  swift_retain();
  uint64_t v9 = sub_1DB0C5188();
  uint64_t v10 = sub_1DB04D7D0(v9, a2, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    unsigned __int8 v18 = v7;
    sub_1DB052E2C(&v14, &v18, v10, (uint64_t)&v19);
    if (v21)
    {
      if (v21 != 1)
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v13 = 5;
        *(unsigned char *)(v13 + 4) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return v10;
      }
      uint64_t v14 = v19;
      uint64_t v15 = v20;
      char v16 = 1;
      uint64_t v17 = v22;
      sub_1DB05384C();
    }
    else
    {
      uint64_t v14 = v19;
      uint64_t v15 = v20;
      char v16 = 0;
      uint64_t v17 = v22;
      sub_1DB0532D0();
    }
    uint64_t v10 = v12;
    swift_bridgeObjectRelease();
  }
  return v10;
}

char *sub_1DB04C238(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04C488(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C258(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04C58C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_1DB04C278(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CD90(a1, a2, a3, *v3, &qword_1EA8FE130, qword_1EA8FE138);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C2A8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CA98(a1, a2, a3, *v3, &qword_1EA8FE128);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C2D0(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04C690(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_1DB04C2F0(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CD90(a1, a2, a3, *v3, &qword_1EA8FE118, &qword_1EA8FE120);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C320(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04C78C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C340(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04C890(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C360(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04C97C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_1DB04C380(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CD90(a1, a2, a3, *v3, &qword_1EA8FE0F8, &qword_1EBE7DFA8);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C3B0(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CA98(a1, a2, a3, *v3, &qword_1EA8FE0F0);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C3D8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CB90(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C3F8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CC8C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_1DB04C418(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CD90(a1, a2, a3, *v3, &qword_1EA8FE0D8, &qword_1EA8FE0E0);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C448(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CEB8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C468(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DB04CFB4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DB04C488(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0E8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1DB04C58C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0B0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1DB04C690(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE110);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1DB04C78C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EA8FE018);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1DB04C890(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE108);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_1DB04C97C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE100);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1DB04CA98(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return v11;
}

char *sub_1DB04CB90(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1DB04CC8C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0D0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_1DB04CD90(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *sub_1DB04CEB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0C0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1DB04CFB4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0B8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

unint64_t sub_1DB04D0D4()
{
  unint64_t result = qword_1EA8FE0A8;
  if (!qword_1EA8FE0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE0A8);
  }
  return result;
}

uint64_t sub_1DB04D128(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int64_t v7 = a1;
  int64_t v8 = 0;
  int64_t v9 = a1;
  while (1)
  {
    BOOL v10 = v9 <= a2;
    if (a3 > 0) {
      BOOL v10 = v9 >= a2;
    }
    if (v10) {
      break;
    }
    BOOL v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11) {
      int64_t v9 = (v9 >> 63) ^ 0x8000000000000000;
    }
    BOOL v11 = __OFADD__(v8++, 1);
    if (v11)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v44 = MEMORY[0x1E4FBC860];
  sub_1DB04C278(0, v8, 0);
  uint64_t result = v44;
  if (v8)
  {
    uint64_t v40 = *(void *)(a4 + 16);
    int64_t v13 = a2;
    while (1)
    {
      BOOL v14 = v7 <= v13;
      if (v6 > 0) {
        BOOL v14 = v7 >= v13;
      }
      if (v14) {
        break;
      }
      if (__OFADD__(v7, v6)) {
        int64_t v15 = ((v7 + v6) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v15 = v7 + v6;
      }
      if (__OFADD__(v7, a5)) {
        goto LABEL_70;
      }
      if (v40 >= v7 + a5) {
        uint64_t v16 = v7 + a5;
      }
      else {
        uint64_t v16 = v40;
      }
      uint64_t v17 = v16 - v7;
      if (v16 < v7) {
        goto LABEL_71;
      }
      if (v7 < 0) {
        goto LABEL_72;
      }
      uint64_t v43 = result;
      uint64_t v18 = v6;
      sub_1DB0C53E8();
      sub_1DB0C5188();
      swift_unknownObjectRetain_n();
      uint64_t v19 = swift_dynamicCastClass();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x1E4FBC860];
      }
      uint64_t v20 = *(void *)(v19 + 16);
      swift_release();
      if (v20 == v17)
      {
        char v21 = (void *)swift_dynamicCastClass();
        uint64_t v6 = v18;
        int64_t v13 = a2;
        if (!v21)
        {
          swift_bridgeObjectRelease();
          char v21 = (void *)MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        char v21 = (void *)MEMORY[0x1E4FBC860];
        uint64_t v6 = v18;
        int64_t v13 = a2;
        if (v16 != v7)
        {
          if (v17 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE110);
            char v21 = (void *)swift_allocObject();
            int64_t v24 = _swift_stdlib_malloc_size(v21);
            uint64_t v25 = v24 - 32;
            if (v24 < 32) {
              uint64_t v25 = v24 - 29;
            }
            v21[2] = v17;
            v21[3] = 2 * (v25 >> 2);
          }
          memcpy(v21 + 4, (const void *)(a4 + 32 + 4 * v7), 4 * v17);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t result = v43;
      unint64_t v23 = *(void *)(v43 + 16);
      unint64_t v22 = *(void *)(v43 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_1DB04C278((void *)(v22 > 1), v23 + 1, 1);
        int64_t v13 = a2;
        uint64_t result = v43;
      }
      *(void *)(result + 16) = v23 + 1;
      *(void *)(result + 8 * v23 + 32) = v21;
      int64_t v7 = v15;
      if (!--v8) {
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  int64_t v15 = v7;
  int64_t v13 = a2;
LABEL_40:
  BOOL v26 = v15 <= v13;
  if (v6 > 0) {
    BOOL v26 = v15 >= v13;
  }
  if (!v26)
  {
    while (1)
    {
      int64_t v27 = __OFADD__(v15, v6) ? ((v15 + v6) >> 63) ^ 0x8000000000000000 : v15 + v6;
      if (__OFADD__(v15, a5)) {
        break;
      }
      if (*(void *)(a4 + 16) >= v15 + a5) {
        uint64_t v28 = v15 + a5;
      }
      else {
        uint64_t v28 = *(void *)(a4 + 16);
      }
      uint64_t v29 = v28 - v15;
      if (v28 < v15) {
        goto LABEL_74;
      }
      if (v15 < 0) {
        goto LABEL_75;
      }
      uint64_t v30 = result;
      sub_1DB0C53E8();
      sub_1DB0C5188();
      swift_unknownObjectRetain_n();
      uint64_t v31 = swift_dynamicCastClass();
      if (!v31)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = MEMORY[0x1E4FBC860];
      }
      uint64_t v32 = *(void *)(v31 + 16);
      swift_release();
      if (v32 == v29)
      {
        uint64_t v33 = (void *)swift_dynamicCastClass();
        if (!v33)
        {
          swift_bridgeObjectRelease();
          uint64_t v33 = (void *)MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = (void *)MEMORY[0x1E4FBC860];
        if (v28 != v15)
        {
          if (v29 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE110);
            uint64_t v33 = (void *)swift_allocObject();
            int64_t v38 = _swift_stdlib_malloc_size(v33);
            uint64_t v39 = v38 - 32;
            if (v38 < 32) {
              uint64_t v39 = v38 - 29;
            }
            v33[2] = v29;
            v33[3] = 2 * (v39 >> 2);
          }
          memcpy(v33 + 4, (const void *)(a4 + 32 + 4 * v15), 4 * v29);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t result = v30;
      uint64_t v45 = v30;
      unint64_t v35 = *(void *)(v30 + 16);
      unint64_t v34 = *(void *)(v30 + 24);
      int64_t v36 = a2;
      if (v35 >= v34 >> 1)
      {
        sub_1DB04C278((void *)(v34 > 1), v35 + 1, 1);
        int64_t v36 = a2;
        uint64_t result = v45;
      }
      *(void *)(result + 16) = v35 + 1;
      *(void *)(result + 8 * v35 + 32) = v33;
      BOOL v37 = v27 <= v36;
      if (v6 > 0) {
        BOOL v37 = v27 >= v36;
      }
      int64_t v15 = v27;
      if (v37) {
        return result;
      }
    }
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB04D574(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  sub_1DB0C5188();
  uint64_t v5 = 0;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v19 = *(void *)(a1 + 8 * v5 + 32);
    sub_1DB0C5188();
    sub_1DB04B67C(&v19, a2, &v18);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v18;
    uint64_t v9 = *(void *)(v18 + 16);
    int64_t v10 = *(void *)(v6 + 16);
    int64_t v11 = v10 + v9;
    if (__OFADD__(v10, v9)) {
      break;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0 && v11 <= *(void *)(v6 + 24) >> 1)
    {
      if (*(void *)(v8 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v10 <= v11) {
        int64_t v12 = v10 + v9;
      }
      else {
        int64_t v12 = v10;
      }
      uint64_t result = (uint64_t)sub_1DB07E684((char *)result, v12, 1, (char *)v6);
      uint64_t v6 = result;
      if (*(void *)(v8 + 16))
      {
LABEL_15:
        uint64_t v13 = *(void *)(v6 + 16);
        if ((*(void *)(v6 + 24) >> 1) - v13 < v9) {
          goto LABEL_25;
        }
        uint64_t result = (uint64_t)memcpy((void *)(v6 + 8 * v13 + 32), (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          uint64_t v14 = *(void *)(v6 + 16);
          BOOL v15 = __OFADD__(v14, v9);
          uint64_t v16 = v14 + v9;
          if (v15) {
            goto LABEL_26;
          }
          *(void *)(v6 + 16) = v16;
        }
        goto LABEL_4;
      }
    }
    if (v9) {
      goto LABEL_24;
    }
LABEL_4:
    ++v5;
    swift_bridgeObjectRelease();
    if (v3 == v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1DB04D710(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB04D764(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB04D7B4(uint64_t a1, uint64_t a2)
{
  return sub_1DB04C0C4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1DB04D7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (!v3) {
    return v4;
  }
  uint64_t v36 = MEMORY[0x1E4FBC860];
  sub_1DB04C320(0, v3, 0);
  uint64_t v6 = a2;
  uint64_t v4 = v36;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v10 = *(v8 - 3);
    unint64_t v9 = *(v8 - 2);
    uint64_t v12 = *(v8 - 1);
    unint64_t v11 = *v8;
    sub_1DB04DDDC(v10, v9, v12, *v8);
    uint64_t v33 = v10;
    unint64_t v34 = v9;
    sub_1DB04DDDC(v10, v9, v12, v11);
    uint64_t v13 = qword_1EA8FDD70;
    uint64_t result = swift_retain();
    if (v13 != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v15 = qword_1EA903410;
    if (qword_1EA903410 < 0) {
      break;
    }
    if (HIDWORD(qword_1EA903410)) {
      goto LABEL_19;
    }
    uint64_t v30 = v8;
    int64_t v31 = v3;
    uint64_t v32 = v4;
    unint64_t v16 = v11;
    uint64_t v17 = cche_ciphertext_sizeof();
    type metadata accessor for HE.ObjectStorage();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v6;
    swift_retain();
    uint64_t v4 = swift_slowAlloc();
    inited[3] = v4;
    inited[4] = v4 + v17;
    sub_1DB0902B4(v7, v33, v34, v12, v11, v4, 1, v15, &v35);
    int v19 = v35;
    sub_1DB04DE48(v33, v34, v12, v11);
    if (v19)
    {
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v25 = v19;
      *(unsigned char *)(v25 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_16:
      swift_release();
      sub_1DB04DE48(v33, v34, v12, v16);
      swift_release();
      return v4;
    }
    swift_release();
    uint64_t v20 = cche_plaintext_sizeof();
    char v21 = (void *)swift_allocObject();
    v21[2] = v6;
    swift_retain();
    uint64_t result = swift_slowAlloc();
    v21[3] = result;
    v21[4] = result + v20;
    if (!*(void *)(a3 + 24)) {
      goto LABEL_20;
    }
    int v22 = cche_decrypt();
    if (v22)
    {
      int v26 = v22;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v27 = v26;
      *(unsigned char *)(v27 + 4) = 0;
      swift_willThrow();
      swift_release();
      goto LABEL_16;
    }
    swift_release();
    sub_1DB04DE48(v33, v34, v12, v16);
    uint64_t v4 = v32;
    uint64_t v36 = v32;
    unint64_t v24 = *(void *)(v32 + 16);
    unint64_t v23 = *(void *)(v32 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_1DB04C320((char *)(v23 > 1), v24 + 1, 1);
      uint64_t v6 = a2;
      uint64_t v4 = v36;
    }
    uint64_t v8 = v30 + 4;
    *(void *)(v4 + 16) = v24 + 1;
    *(void *)(v4 + 8 * v24 + 32) = v21;
    int64_t v3 = v31 - 1;
    if (v31 == 1) {
      return v4;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t _s16SimilarityClientVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s16SimilarityClientVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_1DB0C5188();
  swift_retain();
  sub_1DB0C5188();
  sub_1DB0C5188();
  return a1;
}

uint64_t _s16SimilarityClientVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s16SimilarityClientVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s16SimilarityClientVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s16SimilarityClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityClient()
{
  return &type metadata for PEC.SimilarityClient;
}

uint64_t sub_1DB04DDDC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0)
  {
    sub_1DB04239C(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return sub_1DB0C5188();
  }
  else
  {
    sub_1DB04239C(a1, a2);
    return sub_1DB04239C(a3, a4);
  }
}

uint64_t sub_1DB04DE48(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0)
  {
    sub_1DB042664(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1DB042664(a1, a2);
    return sub_1DB042664(a3, a4);
  }
}

uint64_t sub_1DB04DEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t sub_1DB04DEBC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1DB04E020(unint64_t a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v10 = v9 + ((v8 + 16) & ~v8) + 1;
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_7;
    }
    unsigned int v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)(a1 + v10);
      if (!v12) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v13 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v13 >= 2)
    {
LABEL_7:
      int v12 = *(unsigned __int8 *)(a1 + v10);
      if (!*(unsigned char *)(a1 + v10)) {
        goto LABEL_24;
      }
LABEL_14:
      int v14 = (v12 - 1) << v11;
      if (v10 > 3) {
        int v14 = 0;
      }
      if (v10)
      {
        if (v10 <= 3) {
          int v15 = v10;
        }
        else {
          int v15 = 4;
        }
        switch(v15)
        {
          case 2:
            int v16 = *(unsigned __int16 *)a1;
            break;
          case 3:
            int v16 = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
            break;
          case 4:
            int v16 = *(_DWORD *)a1;
            break;
          default:
            int v16 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v16 = 0;
      }
      int v21 = v7 + (v16 | v14);
      return (v21 + 1);
    }
  }
LABEL_24:
  unint64_t v17 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8;
  if (v6 < 0xFE)
  {
    unsigned int v20 = *(unsigned __int8 *)(v17 + v9);
    if (v20 < 2) {
      return 0;
    }
    int v21 = (v20 + 2147483646) & 0x7FFFFFFF;
    return (v21 + 1);
  }
  uint64_t v18 = *(uint64_t (**)(unint64_t))(v5 + 48);
  return v18(v17);
}

void sub_1DB04E2D4(unint64_t a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v7 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  size_t v11 = v9 + ((v8 + 16) & ~v8) + 1;
  if (a3 <= v10)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v13 = ~v10 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v9 + ((v8 + 16) & ~v8) != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero((void *)a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          *(unsigned char *)(a1 + 2) = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *(unsigned char *)a1 = v16;
        }
      }
    }
    else
    {
      bzero((void *)a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        *(unsigned char *)(a1 + v11) = v14;
        return;
      case 2:
        *(_WORD *)(a1 + v11) = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)(a1 + v11) = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      *(unsigned char *)(a1 + v11) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v11) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1DB04E5F8);
    case 4:
      *(_DWORD *)(a1 + v11) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v17 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8;
        if (v7 < 0xFE)
        {
          *(unsigned char *)(v17 + v9) = a2 + 1;
        }
        else
        {
          uint64_t v18 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v18(v17, a2);
        }
      }
      return;
  }
}

uint64_t _s6ServerVMa_0()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB04E638()
{
  char v2 = *v0;
  char v3 = v0[1];
  uint64_t v4 = PEC.SimilarityClientConfig.plaintextModuli()();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    sub_1DB0C5308();
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6 + 32);
      char v12 = v2;
      HE.RlweParams.init(inParams:plaintextModulus:)(&v12, v7, v11);
      if (v1) {
        break;
      }
      v11[1] = v3;
      _s12ParamContextCMa();
      swift_allocObject();
      sub_1DB06B4F8(v11);
      ++v6;
      sub_1DB0C52E8();
      sub_1DB0C5318();
      sub_1DB0C5328();
      sub_1DB0C52F8();
      if (v5 == v6)
      {
        uint64_t v8 = v10;
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    uint64_t v8 = v10;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v8;
}

uint64_t PEC.SimilarityClientConfig.plaintextModuli()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE1C0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1DB0C77B0;
  *(void *)(v0 + 32) = cche_encryption_params_plaintext_modulus();
  uint64_t v1 = sub_1DB0C5188();
  sub_1DB04E8E8(v1);
  return v0;
}

uint64_t PEC.SimilarityMetric.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t PEC.SimilarityMetric.rawValue.getter()
{
  return 0;
}

void *sub_1DB04E860@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void PEC.SimilarityClientConfig.encryptionParams.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t PEC.SimilarityClientConfig.scalingFactor.getter()
{
  return *(void *)(v0 + 8);
}

void PEC.SimilarityClientConfig.plaintextPacking.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t PEC.SimilarityClientConfig.embeddingDimension.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PEC.SimilarityClientConfig.galoisElements.getter()
{
  return sub_1DB0C5188();
}

uint64_t PEC.SimilarityClientConfig.extraPlaintextModuli.getter()
{
  return sub_1DB0C5188();
}

unsigned char *PEC.SimilarityClientConfig.init(encryptionParams:scalingFactor:plaintextPacking:embeddingDimension:galoisElements:similarityMetric:extraPlaintextModuli:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v7 = result[1];
  char v8 = *a3;
  *(unsigned char *)a7 = *result;
  *(unsigned char *)(a7 + 1) = v7;
  *(void *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 16) = v8;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  return result;
}

uint64_t sub_1DB04E8E8(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_1DB07E678((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1DB04E9CC(uint64_t result, unint64_t a2)
{
  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v10 = *((void *)v4 + 3) >> 1, v10 < v6))
  {
    if (v5 <= v6) {
      int64_t v11 = v6;
    }
    else {
      int64_t v11 = v5;
    }
    int64_t v4 = sub_1DB07E684(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    int64_t v10 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v12 = *((void *)v4 + 2);
  uint64_t v13 = v10 - v12;
  uint64_t result = (uint64_t)sub_1DB04EC44(&v38, (unint64_t *)&v4[8 * v12 + 32], v10 - v12, v8, a2);
  if (result < v8) {
    goto LABEL_15;
  }
  if (result >= 1)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      uint64_t v27 = v34 + v3 + 1;
      goto LABEL_35;
    }
    *((void *)v4 + 2) = v16;
  }
  if (result != v13)
  {
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_16:
  uint64_t v17 = v40;
  uint64_t v18 = v38;
  if (v40 == v38) {
    goto LABEL_13;
  }
  int64_t v19 = *((void *)v4 + 2);
  uint64_t v36 = v39;
  unsigned int v20 = sub_1DB04ED1C((uint64_t (*)())v37, v40, v38, v39);
  uint64_t v22 = *v21;
  uint64_t result = ((uint64_t (*)(unsigned char *, void))v20)(v37, 0);
  if (v17 < 0 || v17 >= v18) {
    goto LABEL_37;
  }
  uint64_t v23 = v17 + 1;
  uint64_t v24 = -v18;
LABEL_21:
  while (1)
  {
    unint64_t v25 = *((void *)v4 + 3);
    int64_t v26 = v25 >> 1;
    uint64_t v27 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1) {
      break;
    }
    if (v19 < v26) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v19;
  }
  uint64_t result = (uint64_t)sub_1DB07E684((char *)(v25 > 1), v19 + 1, 1, v4);
  int64_t v4 = (char *)result;
  int64_t v26 = *(void *)(result + 24) >> 1;
  if (v19 >= v26) {
    goto LABEL_20;
  }
LABEL_23:
  int64_t v35 = v26;
  uint64_t v28 = &v4[8 * v19];
  *((void *)v28 + 4) = v22;
  if (v23 == v18)
  {
LABEL_35:
    *((void *)v4 + 2) = v27;
    goto LABEL_13;
  }
  uint64_t v3 = 0;
  uint64_t v29 = v24 + v23;
  int64_t v34 = v19;
  int64_t v30 = ~v19 + v26;
  int64_t v31 = v28 + 40;
  while (1)
  {
    uint64_t v32 = sub_1DB04ED1C((uint64_t (*)())v37, v23 + v3, v18, v36);
    uint64_t v22 = *v33;
    uint64_t result = ((uint64_t (*)(unsigned char *, void))v32)(v37, 0);
    if (v23 < 0 || v23 + v3 >= v18) {
      break;
    }
    if (v30 == v3)
    {
      v23 += v3 + 1;
      int64_t v19 = v35;
      uint64_t v24 = -v18;
      *((void *)v4 + 2) = v35;
      goto LABEL_21;
    }
    *(void *)&v31[8 * v3++] = v22;
    if (!(v29 + v3)) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t *sub_1DB04EC44(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    uint64_t v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = a4;
  if (!a4)
  {
LABEL_23:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (uint64_t *)v5;
  }
  unint64_t v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6) {
        unint64_t v6 = a3 - 2;
      }
      if (v6 >= a3 - 1) {
        unint64_t v6 = a3 - 1;
      }
      unint64_t v7 = v6 + 1;
      if (v7 > 4)
      {
        uint64_t v10 = v7 & 3;
        if ((v7 & 3) == 0) {
          uint64_t v10 = 4;
        }
        unint64_t v11 = v7 - v10;
        uint64_t v8 = v7 - v10 + 1;
        BOOL v9 = &a2[v11];
        int64x2_t v12 = vdupq_n_s64(a5);
        uint64_t v13 = (int64x2_t *)(a2 + 3);
        do
        {
          v13[-1] = v12;
          *uint64_t v13 = v12;
          v13 += 2;
          v11 -= 4;
        }
        while (v11);
      }
      else
      {
        uint64_t v8 = 1;
        BOOL v9 = a2;
      }
      uint64_t v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          uint64_t v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8) {
          goto LABEL_22;
        }
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t (*sub_1DB04ED1C(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(void *)uint64_t result = a4;
    return nullsub_1;
  }
  return result;
}

BOOL _s16CryptoKitPrivate3PECO22SimilarityClientConfigV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int64_t v19 = *(void **)(a1 + 40);
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v18 = *(void **)(a2 + 40);
  unint64_t v9 = HE.RlweParams.rawValue.getter();
  uint64_t v11 = v10;
  if (v9 == HE.RlweParams.rawValue.getter() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v13 = sub_1DB0C53D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  if (v2) {
    uint64_t v14 = 5654338;
  }
  else {
    uint64_t v14 = 5654082;
  }
  if (v5) {
    uint64_t v15 = 5654338;
  }
  else {
    uint64_t v15 = 5654082;
  }
  if (v14 != v15)
  {
    char v16 = sub_1DB0C53D8();
    swift_bridgeObjectRelease_n();
    if (v16) {
      goto LABEL_14;
    }
    return 0;
  }
  swift_bridgeObjectRelease_n();
LABEL_14:
  if (v3 != v6 || v4 != v7 || v22 != v8 || !sub_1DB0B605C(v21, v20)) {
    return 0;
  }
  return sub_1DB0B60D0(v19, v18);
}

unint64_t sub_1DB04EF08()
{
  unint64_t result = qword_1EA8FE1C8[0];
  if (!qword_1EA8FE1C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FE1C8);
  }
  return result;
}

unsigned char *_s16SimilarityMetricOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DB04EFF8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityMetric()
{
  return &type metadata for PEC.SimilarityMetric;
}

uint64_t _s22SimilarityClientConfigVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s22SimilarityClientConfigVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_1DB0C5188();
  sub_1DB0C5188();
  return a1;
}

uint64_t _s22SimilarityClientConfigVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s22SimilarityClientConfigVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s22SimilarityClientConfigVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s22SimilarityClientConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.SimilarityClientConfig()
{
  return &type metadata for PEC.SimilarityClientConfig;
}

void sub_1DB04F26C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  int v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      isUniquelyReferenced_nonNull_native = sub_1DB07E684(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      int v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_19;
  }
  memcpy(&v7[8 * v14 + 32], (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    *unsigned int v4 = v7;
    return;
  }
  uint64_t v15 = *((void *)v7 + 2);
  BOOL v16 = __OFADD__(v15, v6);
  uint64_t v17 = v15 + v6;
  if (!v16)
  {
    *((void *)v7 + 2) = v17;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_1DB04F378(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1DB04F3CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t _s16VerifiableClientVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB04F428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_1DB04F430()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1DB04F5C4(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = v11 + v9;
  uint64_t v13 = (v11 + v9 + ((v11 + v9 + ((v6 + v9) & ~v9)) & ~v9)) & ~v9;
  uint64_t v14 = v11 + 7;
  unint64_t v15 = ((v11 + 7 + v13) & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v16 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v16 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v20 = v7;
    uint64_t v21 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v22 = ((unint64_t)a2 + v10) & v21;
    uint64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v23(((unint64_t)a1 + v10) & v21, v22, v20);
    unint64_t v24 = (v12 + v22) & v21;
    v23((v12 + (((unint64_t)a1 + v10) & v21)) & v21, v24, v20);
    unint64_t v25 = (v12 + v24) & v21;
    v23((v12 + ((v12 + (((unint64_t)a1 + v10) & v21)) & v21)) & v21, v25, v20);
    int64_t v26 = (void *)((v14 + ((v12 + ((v12 + (((unint64_t)a1 + v10) & v21)) & v21)) & v21)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (uint64_t *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    sub_1DB04239C(*v27, v29);
    *int64_t v26 = v28;
    v26[1] = v29;
  }
  return a1;
}

uint64_t sub_1DB04F890(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = swift_checkMetadataState();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v6 + 8;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v4 + a1 + v9) & ~v9;
  v7(v10, v5);
  uint64_t v11 = *(void *)(v8 + 56);
  uint64_t v12 = (v11 + v9 + v10) & ~v9;
  v7(v12, v5);
  uint64_t v13 = (v11 + v9 + v12) & ~v9;
  v7(v13, v5);
  uint64_t v14 = (uint64_t *)((v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  return sub_1DB042664(v15, v16);
}

uint64_t sub_1DB04FA5C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = v6 + v11;
  uint64_t v13 = (v6 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 48);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  uint64_t v18 = (v15 + v11 + v16) & ~v11;
  uint64_t v19 = (v15 + v11 + v17) & ~v11;
  v9(v18, v19, v7);
  uint64_t v20 = (void *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (uint64_t *)((v15 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  sub_1DB04239C(*v21, v23);
  *uint64_t v20 = v22;
  v20[1] = v23;
  return a1;
}

uint64_t sub_1DB04FC68(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  uint64_t v10 = v8 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = v6 + v11;
  uint64_t v13 = (v6 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 40);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  uint64_t v18 = (v15 + v11 + v16) & ~v11;
  uint64_t v19 = (v15 + v11 + v17) & ~v11;
  v9(v18, v19, v7);
  uint64_t v20 = (uint64_t *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (uint64_t *)((v15 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  sub_1DB04239C(*v21, v23);
  uint64_t v24 = *v20;
  unint64_t v25 = v20[1];
  *uint64_t v20 = v22;
  v20[1] = v23;
  sub_1DB042664(v24, v25);
  return a1;
}

uint64_t sub_1DB04FE7C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = v8 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = v6 + v11;
  uint64_t v13 = (v6 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 32);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  uint64_t v18 = (v15 + v11 + v16) & ~v11;
  uint64_t v19 = (v15 + v11 + v17) & ~v11;
  v9(v18, v19, v7);
  *(_OWORD *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v15 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1DB05007C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  uint64_t v10 = v8 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = v6 + v11;
  uint64_t v13 = (v6 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 24);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  uint64_t v18 = (v15 + v11 + v16) & ~v11;
  uint64_t v19 = (v15 + v11 + v17) & ~v11;
  v9(v18, v19, v7);
  uint64_t v20 = (uint64_t *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  *(_OWORD *)uint64_t v20 = *(_OWORD *)((v15 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB042664(v21, v22);
  return a1;
}

uint64_t sub_1DB050284(int *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(*(void *)(v7 - 8) + 64);
  if (v10 <= 0xC) {
    unsigned int v13 = 12;
  }
  else {
    unsigned int v13 = v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(void *)(v5 + 64) + v11;
  uint64_t v15 = v12 + v11;
  uint64_t v16 = v12 + 7;
  if (v13 < a2)
  {
    unint64_t v17 = ((v16 + ((v15 + ((v15 + (v14 & ~v11)) & ~v11)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v18 = v17 & 0xFFFFFFF8;
    if ((v17 & 0xFFFFFFF8) != 0) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = a2 - v13 + 1;
    }
    if (v19 >= 0x10000) {
      LODWORD(v20) = 4;
    }
    else {
      LODWORD(v20) = 2;
    }
    if (v19 < 0x100) {
      LODWORD(v20) = 1;
    }
    if (v19 >= 2) {
      uint64_t v20 = v20;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v17);
        if (!v21) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v17);
        if (v21) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1DB0505E4);
      case 4:
        int v21 = *(int *)((char *)a1 + v17);
        if (!v21) {
          break;
        }
LABEL_25:
        int v23 = v21 - 1;
        if (v18)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        return v13 + (v24 | v23) + 1;
      default:
        break;
    }
  }
  if (v6 == v13)
  {
    unint64_t v25 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48);
    return v25(a1, v6, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v26 = ~v11;
    unint64_t v27 = ((unint64_t)a1 + v14) & v26;
    if (v9 == v13)
    {
      uint64_t v28 = *(uint64_t (**)(unint64_t))(v8 + 48);
      return v28(v27);
    }
    else
    {
      uint64_t v29 = *(void *)(((v16 + ((v15 + ((v15 + v27) & v26)) & v26)) & 0xFFFFFFFFFFFFFFF8) + 8) >> 60;
      if (((4 * v29) & 0xC) != 0) {
        return 16 - ((4 * v29) & 0xC | (v29 >> 2));
      }
      else {
        return 0;
      }
    }
  }
}

void sub_1DB0505F8(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_checkMetadataState() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  if (v12 <= 0xC) {
    unsigned int v15 = 12;
  }
  else {
    unsigned int v15 = v12;
  }
  uint64_t v16 = *(void *)(v7 + 64) + v13;
  uint64_t v17 = v14 + v13;
  uint64_t v18 = v14 + 7;
  size_t v19 = ((v14 + 7 + ((v14 + v13 + ((v14 + v13 + (v16 & ~v13)) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 >= a3)
  {
    int v22 = 0;
    int v23 = a2 - v15;
    if (a2 <= v15)
    {
LABEL_20:
      uint64_t v24 = ~v13;
      switch(v22)
      {
        case 1:
          *((unsigned char *)a1 + v19) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)((char *)a1 + v19) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v19) = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v8 == v15)
            {
              unint64_t v27 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v7 + 56);
              v27(a1, a2, v8, AssociatedTypeWitness);
            }
            else
            {
              unint64_t v28 = ((unint64_t)a1 + v16) & v24;
              if (v11 == v15)
              {
                uint64_t v29 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
                v29(v28, a2);
              }
              else
              {
                int64_t v30 = (void *)((v18 + ((v17 + ((v17 + v28) & v24)) & v24)) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0xC)
                {
                  *int64_t v30 = (a2 - 13);
                  v30[1] = 0;
                }
                else
                {
                  *int64_t v30 = 0;
                  v30[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v14
         + 7
         + ((v14
           + v13
           + ((v14 + v13 + (v16 & ~v13)) & ~v13)) & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v20 = a3 - v15 + 1;
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    int v23 = a2 - v15;
    if (a2 <= v15) {
      goto LABEL_20;
    }
  }
  if (v19) {
    int v25 = 1;
  }
  else {
    int v25 = v23;
  }
  if (v19)
  {
    int v26 = ~v15 + a2;
    bzero(a1, v19);
    *a1 = v26;
  }
  switch(v22)
  {
    case 1:
      *((unsigned char *)a1 + v19) = v25;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v19) = v25;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1DB0509ACLL);
    case 4:
      *(_DWORD *)((char *)a1 + v19) = v25;
      break;
    default:
      return;
  }
}

uint64_t _s10CredentialVMa()
{
  return __swift_instantiateGenericMetadata();
}

BOOL static APSIC.SupportedCurves.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t APSIC.SupportedCurves.hash(into:)()
{
  return sub_1DB0C5488();
}

void *static APSIC.SupportedCurves.allCases.getter()
{
  return &unk_1F353BD58;
}

uint64_t APSIC.SupportedCurves.hashValue.getter()
{
  return sub_1DB0C54A8();
}

BOOL sub_1DB050A80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1DB050A94()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB050ADC()
{
  return sub_1DB0C5488();
}

uint64_t sub_1DB050B08()
{
  return sub_1DB0C54A8();
}

void sub_1DB050B4C(void *a1@<X8>)
{
  *a1 = &unk_1F353BD80;
}

uint64_t sub_1DB050B5C()
{
  uint64_t v0 = ccec_compressed_x962_export_pub_size();
  uint64_t v6 = sub_1DB065640(v0);
  unint64_t v7 = v1;
  int v5 = 0;
  sub_1DB0523B8(&v6, &v5);
  int v2 = v5;
  if (!v5) {
    return v6;
  }
  sub_1DB04D0D4();
  swift_allocError();
  *(_DWORD *)uint64_t v3 = v2;
  *(unsigned char *)(v3 + 4) = 0;
  swift_willThrow();
  return sub_1DB042664(v6, v7);
}

uint64_t sub_1DB050C00(uint64_t a1, unint64_t a2)
{
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    size_t v6 = result;
    if (result)
    {
      uint64_t v7 = sub_1DB0C51B8();
      *(void *)(v7 + 16) = v6;
      bzero((void *)(v7 + 32), v6);
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4FBC860];
      size_t v6 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    }
    sub_1DB050CC8(v7 + 32, v7 + 32 + v6, a1, a2, &v8);
    if (v2) {
      swift_bridgeObjectRelease();
    }
    return v7;
  }
  return result;
}

uint64_t sub_1DB050CC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  if (!a1) {
LABEL_35:
  }
    __break(1u);
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v8 = (a3 >> 32) - (int)a3;
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      sub_1DB04239C(a3, a4);
      uint64_t v9 = sub_1DB0C48A8();
      if (v9)
      {
        uint64_t v10 = sub_1DB0C48D8();
        if (!__OFSUB__((int)a3, v10))
        {
          v9 += (int)a3 - v10;
          goto LABEL_7;
        }
        goto LABEL_34;
      }
LABEL_7:
      uint64_t v11 = sub_1DB0C48C8();
      if (v11 >= v8) {
        uint64_t v12 = (a3 >> 32) - (int)a3;
      }
      else {
        uint64_t v12 = v11;
      }
      uint64_t v13 = v9 + v12;
      if (v9) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      sub_1DB050FB4(v9, v14, a5);
      return sub_1DB042664(a3, a4);
    case 2uLL:
      uint64_t v16 = *(void *)(a3 + 16);
      uint64_t v17 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v18 = sub_1DB0C48A8();
      if (!v18) {
        goto LABEL_17;
      }
      uint64_t v19 = sub_1DB0C48D8();
      if (__OFSUB__(v16, v19)) {
        goto LABEL_33;
      }
      v18 += v16 - v19;
LABEL_17:
      if (__OFSUB__(v17, v16)) {
        goto LABEL_32;
      }
      uint64_t v20 = sub_1DB0C48C8();
      if (v20 >= v17 - v16) {
        uint64_t v21 = v17 - v16;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = v18 + v21;
      if (v18) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_1DB050FB4(v18, v23, a5);
      swift_release();
      return swift_release();
    default:
      int v24 = ccec_x963_import_pub();
      *a5 = v24;
      if (v24)
      {
        int v25 = v24;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v26 = v25;
      }
      else
      {
        uint64_t result = ccec_validate_pub();
        if (result) {
          return result;
        }
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v26 = -19;
      }
      *(unsigned char *)(v26 + 4) = 0;
      return swift_willThrow();
  }
}

uint64_t sub_1DB050FB4(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (!result)
  {
    __break(1u);
    return result;
  }
  int v4 = ccec_x963_import_pub();
  *a3 = v4;
  if (v4)
  {
    int v5 = v4;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = v5;
  }
  else
  {
    uint64_t result = ccec_validate_pub();
    if (result) {
      return result;
    }
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = -19;
  }
  *(unsigned char *)(v6 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1DB051078(uint64_t a1, unint64_t a2)
{
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    size_t v5 = result;
    if (result)
    {
      uint64_t v6 = sub_1DB0C51B8();
      *(void *)(v6 + 16) = v5;
      bzero((void *)(v6 + 32), v5);
    }
    else
    {
      uint64_t v6 = MEMORY[0x1E4FBC860];
      size_t v5 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    }
    int v9 = 0;
    sub_1DB05117C(v6 + 32, v6 + 32 + v5, a1, a2, &v9);
    int v7 = v9;
    if (v9)
    {
      swift_bridgeObjectRelease();
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = v7;
      *(unsigned char *)(v8 + 4) = 0;
      swift_willThrow();
    }
    return v6;
  }
  return result;
}

uint64_t sub_1DB05117C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  if (!a1) {
    goto LABEL_18;
  }
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
      }
      sub_1DB04239C(a3, a4);
      if (!sub_1DB0C48A8())
      {
        sub_1DB0C48C8();
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x1DB0513E8);
      }
      if (__OFSUB__((int)a3, sub_1DB0C48D8())) {
        goto LABEL_16;
      }
      sub_1DB0C48C8();
      *a5 = ccec_x963_import_pub();
      return sub_1DB042664(a3, a4);
    case 2uLL:
      uint64_t v9 = *(void *)(a3 + 16);
      uint64_t v10 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v11 = sub_1DB0C48A8();
      if (!v11) {
        goto LABEL_10;
      }
      uint64_t v12 = sub_1DB0C48D8();
      if (__OFSUB__(v9, v12)) {
        goto LABEL_17;
      }
      v11 += v9 - v12;
LABEL_10:
      if (__OFSUB__(v10, v9)) {
        goto LABEL_15;
      }
      sub_1DB0C48C8();
      if (!v11) {
        goto LABEL_20;
      }
      *a5 = ccec_x963_import_pub();
      swift_release();
      return swift_release();
    default:
      uint64_t result = ccec_x963_import_pub();
      *a5 = result;
      return result;
  }
}

uint64_t APSIC.Client.init(publicKey:domainSeparationTag:curveType:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v13 = *a5;
  uint64_t v38 = 0;
  if (!v13)
  {
LABEL_5:
    uint64_t v14 = MEMORY[0x1E0188540]();
    if (!v14)
    {
      __break(1u);
LABEL_7:
      uint64_t v14 = ccec_cp_521();
      if (!v14)
      {
        __break(1u);
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (v13 != 1) {
    goto LABEL_7;
  }
  uint64_t v14 = MEMORY[0x1E0188550]();
  if (!v14)
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v35 = v14;
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v15) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_38;
      }
      uint64_t v15 = (int)v15;
LABEL_13:
      if (v15 > 128)
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v19 = 1;
        *(unsigned char *)(v19 + 4) = 1;
        swift_willThrow();
        sub_1DB042664(a3, a4);
        return sub_1DB042664(a1, a2);
      }
LABEL_15:
      uint64_t v21 = getccec_pub_ctx_size();
      uint64_t v36 = v21;
      if (v21 < 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        int v7 = sub_1DB05268C((uint64_t)v7);
        goto LABEL_22;
      }
      size_t v22 = v21;
      uint64_t v33 = a6;
      if (v21)
      {
        a6 = sub_1DB0C51B8();
        *(void *)(a6 + 16) = v22;
        bzero((void *)(a6 + 32), v22);
      }
      else
      {
        a6 = MEMORY[0x1E4FBC860];
      }
      uint64_t v23 = sub_1DB050C00(a1, a2);
      if (v6)
      {
        sub_1DB042664(a3, a4);
        sub_1DB042664(a1, a2);
        return swift_bridgeObjectRelease();
      }
      int v7 = (char *)v23;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_40;
      }
LABEL_22:
      uint64_t v24 = ccapsic_client_state_sizeof();
      *(void *)&long long v37 = v7;
      if ((v24 & 0x8000000000000000) == 0)
      {
        size_t v25 = v24;
        if (v24)
        {
          uint64_t v26 = sub_1DB0C51B8();
          *(void *)(v26 + 16) = v25;
          bzero((void *)(v26 + 32), v25);
        }
        else
        {
          uint64_t v26 = MEMORY[0x1E4FBC860];
        }
        int v34 = 0;
        a6 = v26 + 32;
        *((void *)&v37 + 1) = v26;
        uint64_t v38 = v26 + 32;
        switch(a4 >> 62)
        {
          case 0uLL:
          case 3uLL:
            sub_1DB0C5188();
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_30;
            }
            goto LABEL_42;
          case 1uLL:
            if (a3 >> 32 < (int)a3) {
              __break(1u);
            }
            sub_1DB04239C(a3, a4);
            sub_1DB0C5188();
            sub_1DB04239C(a3, a4);
            sub_1DB0526F0((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)&v35, &v34, v26 + 32, a3, a4);
            if (!v6) {
              goto LABEL_34;
            }
            goto LABEL_46;
          case 2uLL:
            uint64_t v27 = *(void *)(a3 + 24);
            uint64_t v32 = *(void *)(a3 + 16);
            sub_1DB04239C(a3, a4);
            sub_1DB0C5188();
            sub_1DB04239C(a3, a4);
            swift_retain();
            swift_retain();
            sub_1DB0526F0(v32, v27, a4 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)&v35, &v34, v26 + 32, a3, a4);
            if (v6) {
              goto LABEL_47;
            }
            swift_release();
            swift_release();
            break;
          default:
            JUMPOUT(0);
        }
        goto LABEL_34;
      }
      __break(1u);
LABEL_42:
      int v7 = sub_1DB05268C((uint64_t)v7);
LABEL_30:
      sub_1DB051A2C((uint64_t)(v7 + 32), (uint64_t)&v7[*((void *)v7 + 2) + 32], &v34, a6, a3, a4);
      if (v6)
      {
LABEL_45:
        sub_1DB042664(a3, a4);
LABEL_46:
        sub_1DB042664(a3, a4);
        __break(1u);
LABEL_47:
        sub_1DB042664(a3, a4);
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1DB051960);
      }
      *(void *)&long long v37 = v7;
      sub_1DB042664(a3, a4);
LABEL_34:
      sub_1DB042664(a3, a4);
      swift_bridgeObjectRelease();
      int v28 = v34;
      if (v34)
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v29 = v28;
        *(unsigned char *)(v29 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(a3, a4);
        sub_1DB042664(a1, a2);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      else
      {
        sub_1DB042664(a3, a4);
        uint64_t result = sub_1DB042664(a1, a2);
        uint64_t v30 = v36;
        uint64_t v31 = v38;
        *(void *)uint64_t v33 = v35;
        *(void *)(v33 + 8) = v30;
        *(_OWORD *)(v33 + 16) = v37;
        *(void *)(v33 + 32) = v31;
      }
      return result;
    case 2uLL:
      uint64_t v17 = *(void *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_13;
      }
      goto LABEL_39;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v15 = BYTE6(a4);
      goto LABEL_13;
  }
}

uint64_t sub_1DB051980(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (result)
  {
    uint64_t v12 = *(char **)(a3 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a3 + 16) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = sub_1DB05268C((uint64_t)v12);
      *(void *)(a3 + 16) = v12;
    }
    uint64_t result = sub_1DB051A2C((uint64_t)(v12 + 32), (uint64_t)&v12[*((void *)v12 + 2) + 32], a4, a5, a6, a7);
    *(void *)(a3 + 16) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB051A2C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1)
  {
    if (!ccrng()) {
      goto LABEL_11;
    }
    switch(a6 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_7;
        }
        __break(1u);
LABEL_9:
        __break(1u);
        break;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
          goto LABEL_7;
        }
        goto LABEL_9;
      default:
LABEL_7:
        uint64_t result = ccapsic_client_init();
        *a3 = result;
        return result;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t APSIC.Client.computeIntersectResponse(element:matchPoint:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v10 = *(_OWORD *)(v4 + 16);
  v24[0] = *(_OWORD *)v4;
  v24[1] = v10;
  uint64_t v25 = *(void *)(v4 + 32);
  uint64_t v11 = (char *)sub_1DB051078(a3, a4);
  if (!v5)
  {
    uint64_t v12 = v11;
    uint64_t v21 = v11;
    size_t v13 = *((void *)&v24[0] + 1);
    if ((*((void *)&v24[0] + 1) & 0x8000000000000000) == 0)
    {
      if (*((void *)&v24[0] + 1))
      {
        uint64_t v6 = sub_1DB0C51B8();
        *(void *)(v6 + 16) = *((void *)&v24[0] + 1);
        bzero((void *)(v6 + 32), v13);
        uint64_t v20 = (char *)v6;
        uint64_t v7 = sub_1DB0C51B8();
        *(void *)(v7 + 16) = v13;
        bzero((void *)(v7 + 32), v13);
      }
      else
      {
        uint64_t v7 = MEMORY[0x1E4FBC860];
        uint64_t v20 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v6 = MEMORY[0x1E4FBC860];
      }
      uint64_t v19 = (char *)v7;
      long long v22 = xmmword_1DB0C7A30;
      long long v23 = xmmword_1DB0C7A30;
      int v18 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          if (a1 >> 32 < (int)a1) {
            __break(1u);
          }
          sub_1DB04239C(a1, a2);
          sub_1DB0528DC((uint64_t)v24);
          sub_1DB04239C(a1, a2);
          sub_1DB0528DC((uint64_t)v24);
          sub_1DB0527D4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, &v21, &v20, &v19, (uint64_t *)v24, &v18, a1, a2, (uint64_t *)&v23, (uint64_t *)&v22);
          goto LABEL_15;
        case 2uLL:
          uint64_t v14 = *(void *)(a1 + 16);
          uint64_t v15 = *(void *)(a1 + 24);
          sub_1DB04239C(a1, a2);
          sub_1DB0528DC((uint64_t)v24);
          sub_1DB04239C(a1, a2);
          sub_1DB0528DC((uint64_t)v24);
          swift_retain();
          swift_retain();
          sub_1DB0527D4(v14, v15, a2 & 0x3FFFFFFFFFFFFFFFLL, &v21, &v20, &v19, (uint64_t *)v24, &v18, a1, a2, (uint64_t *)&v23, (uint64_t *)&v22);
          swift_release();
          swift_release();
          goto LABEL_15;
        case 3uLL:
          memset(v17, 0, 14);
          goto LABEL_12;
        default:
          v17[0] = a1;
          LOWORD(v17[1]) = a2;
          BYTE2(v17[1]) = BYTE2(a2);
          BYTE3(v17[1]) = BYTE3(a2);
          BYTE4(v17[1]) = BYTE4(a2);
          BYTE5(v17[1]) = BYTE5(a2);
LABEL_12:
          sub_1DB0528DC((uint64_t)v24);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_13;
          }
          goto LABEL_17;
      }
    }
    __break(1u);
LABEL_17:
    uint64_t v12 = sub_1DB05268C((uint64_t)v12);
LABEL_13:
    sub_1DB0520A8((void *)(v7 + 32), v7 + 32 + *(void *)(v7 + 16), (uint64_t *)(v6 + 32), (uint64_t *)v24, &v18, a1, a2, (uint64_t)v17, (uint64_t)(v12 + 32), (uint64_t *)&v23, (uint64_t *)&v22);
    uint64_t v19 = (char *)v7;
    uint64_t v20 = (char *)v6;
    uint64_t v21 = v12;
    sub_1DB042664(a1, a2);
LABEL_15:
    sub_1DB052914((uint64_t)v24);
    sub_1DB042664(a1, a2);
    uint64_t v4 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_1DB051F70(uint64_t result, uint64_t a2, char **a3, char **a4, char **a5, uint64_t *a6, _DWORD *a7, uint64_t a8, unint64_t a9, uint64_t *a10, uint64_t *a11)
{
  if (result)
  {
    uint64_t v17 = result;
    int v18 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v18 = sub_1DB05268C((uint64_t)v18);
      *a3 = v18;
    }
    uint64_t v20 = *a4;
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v20;
    uint64_t v24 = v17;
    if ((v21 & 1) == 0)
    {
      uint64_t v20 = sub_1DB05268C((uint64_t)v20);
      *a4 = v20;
    }
    long long v22 = *a5;
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    *a5 = v22;
    if ((v23 & 1) == 0)
    {
      long long v22 = sub_1DB05268C((uint64_t)v22);
      *a5 = v22;
    }
    uint64_t result = sub_1DB0520A8((void *)v22 + 4, (uint64_t)&v22[*((void *)v22 + 2) + 32], (uint64_t *)v20 + 4, a6, a7, a8, a9, v24, (uint64_t)(v18 + 32), a10, a11);
    *a5 = v22;
    *a4 = v20;
    *a3 = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB0520A8(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _DWORD *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  if (a1)
  {
    uint64_t v12 = *a4;
    *a3 = *a4;
    *a1 = v12;
    switch(a7 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a6), a6)) {
          goto LABEL_6;
        }
        __break(1u);
LABEL_12:
        __break(1u);
        break;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a6 + 24), *(void *)(a6 + 16))) {
          goto LABEL_6;
        }
        goto LABEL_12;
      default:
LABEL_6:
        int v14 = ccapsic_client_check_intersect_response();
        *a5 = v14;
        if (v14)
        {
          int v15 = v14;
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v16 = v15;
          *(unsigned char *)(v16 + 4) = 0;
          return swift_willThrow();
        }
        else
        {
          uint64_t result = sub_1DB050B5C();
          if (!v11)
          {
            uint64_t v19 = *a10;
            unint64_t v20 = a10[1];
            *a10 = result;
            a10[1] = v18;
            sub_1DB042664(v19, v20);
            uint64_t v21 = sub_1DB050B5C();
            uint64_t v22 = *a11;
            unint64_t v23 = a11[1];
            *a11 = v21;
            a11[1] = v24;
            return sub_1DB042664(v22, v23);
          }
        }
        return result;
    }
  }
  __break(1u);
  JUMPOUT(0x1DB052218);
}

void APSIC.Client.computeGuaranteedMatchResponse()()
{
  size_t v2 = v0[1];
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *v0;
    if (v2)
    {
      uint64_t v4 = sub_1DB0C51B8();
      *(void *)(v4 + 16) = v2;
      bzero((void *)(v4 + 32), v2);
      uint64_t v5 = sub_1DB0C51B8();
      *(void *)(v5 + 16) = v2;
      bzero((void *)(v5 + 32), v2);
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4FBC860];
      uint64_t v4 = MEMORY[0x1E4FBC860];
    }
    *(void *)(v4 + 32) = v3;
    *(void *)(v5 + 32) = v3;
    int match_response = ccapsic_client_generate_match_response();
    if (match_response)
    {
      int v7 = match_response;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = v7;
      *(unsigned char *)(v8 + 4) = 0;
      swift_willThrow();
LABEL_8:
      swift_bridgeObjectRelease();
      sub_1DB042664(0, 0xC000000000000000);
      swift_bridgeObjectRelease();
      return;
    }
    sub_1DB050B5C();
    if (v1) {
      goto LABEL_8;
    }
    sub_1DB050B5C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1DB0523B8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v8 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      if (v8 < (int)v3) {
        goto LABEL_22;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_23;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v11 = sub_1DB0C4888();
      swift_release();
      uint64_t v7 = v11;
LABEL_13:
      if (v8 < (int)v3) {
        goto LABEL_20;
      }
      if (!sub_1DB0C48A8()) {
        goto LABEL_25;
      }
      if (__OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_21;
      }
      sub_1DB0C48C8();
      uint64_t result = ccec_compressed_x962_export_pub();
      *a2 = result;
      unint64_t v10 = v7 | 0x4000000000000000;
      break;
    case 2uLL:
      uint64_t v12 = *a1;
      uint64_t v14 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v3 = v12;
      uint64_t v9 = *(void *)(v12 + 16);
      if (!sub_1DB0C48A8())
      {
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x1DB05267CLL);
      }
      if (__OFSUB__(v9, sub_1DB0C48D8()))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      sub_1DB0C48C8();
      uint64_t result = ccec_compressed_x962_export_pub();
      *a2 = result;
      unint64_t v10 = v14 | 0x8000000000000000;
      break;
    case 3uLL:
      uint64_t result = ccec_compressed_x962_export_pub();
      *a2 = result;
      return result;
    default:
      LOWORD(v13) = a1[1];
      BYTE2(v13) = BYTE2(a1[1]);
      HIBYTE(v13) = BYTE3(a1[1]);
      __int16 v15 = WORD2(a1[1]);
      unsigned __int8 v16 = BYTE6(a1[1]);
      uint64_t result = ccec_compressed_x962_export_pub();
      *a2 = result;
      *a1 = v3;
      a1[1] = v13 | ((unint64_t)v15 << 32) | ((unint64_t)HIBYTE(v15) << 40) | ((unint64_t)v16 << 48);
      return result;
  }
  *a1 = v3;
  a1[1] = v10;
  return result;
}

char *sub_1DB05268C(uint64_t a1)
{
  return sub_1DB07E358(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1DB0526A0(uint64_t a1)
{
  return sub_1DB07E684(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1DB0526B4(uint64_t a1)
{
  return sub_1DB07E66C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1DB0526C8(uint64_t a1)
{
  return sub_1DB07E678(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1DB0526DC(void *a1)
{
  return sub_1DB07EAA4(0, a1[2], 0, a1);
}

uint64_t sub_1DB0526F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v15 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  BOOL v16 = __OFSUB__(a2, a1);
  uint64_t v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v18 = sub_1DB0C48C8();
  if (v18 >= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = v15 + v19;
  if (v15) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  sub_1DB051980(v15, v21, a4, a5, a6, a7, a8);
  return sub_1DB042664(a7, a8);
}

uint64_t sub_1DB0527D4(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, char **a5, char **a6, uint64_t *a7, _DWORD *a8, uint64_t a9, unint64_t a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v19 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v19 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v20 = sub_1DB0C48C8();
  if (v20 >= a2 - a1) {
    uint64_t v21 = a2 - a1;
  }
  else {
    uint64_t v21 = v20;
  }
  uint64_t v22 = v19 + v21;
  if (v19) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  sub_1DB051F70(v19, v23, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  sub_1DB052914((uint64_t)a7);
  return sub_1DB042664(a9, a10);
}

uint64_t sub_1DB0528DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB052914(uint64_t a1)
{
  return a1;
}

unint64_t sub_1DB05294C()
{
  unint64_t result = qword_1EA8FE250;
  if (!qword_1EA8FE250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE250);
  }
  return result;
}

unint64_t sub_1DB0529A4()
{
  unint64_t result = qword_1EA8FE258;
  if (!qword_1EA8FE258)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EA8FE260);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE258);
  }
  return result;
}

ValueMetadata *type metadata accessor for APSIC()
{
  return &type metadata for APSIC;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OPRF.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for APSIC.SupportedCurves(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB052B78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1DB052BA0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1DB052BA8(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for APSIC.SupportedCurves()
{
  return &type metadata for APSIC.SupportedCurves;
}

uint64_t destroy for APSIC.Client()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for APSIC.Client(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_1DB0C5188();
  sub_1DB0C5188();
  return a1;
}

void *assignWithCopy for APSIC.Client(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for APSIC.Client(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for APSIC.Client(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for APSIC.Client(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for APSIC.Client()
{
  return &type metadata for APSIC.Client;
}

uint64_t PEC.PlaintextMatrixDims.init(rowCount:colCount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (result < 1 || a2 <= 0)
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = 1;
    *(unsigned char *)(v3 + 4) = 1;
    return swift_willThrow();
  }
  else
  {
    *a3 = result;
    a3[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.PlaintextMatrixDims()
{
  return &type metadata for PEC.PlaintextMatrixDims;
}

uint64_t sub_1DB052E2C@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v29 = a1[1];
    uint64_t v30 = *a1;
    int v33 = *a2;
    uint64_t v6 = *(void *)(*(void *)(a3 + 32) + 16);
    char v7 = *(unsigned char *)(v6 + 40);
    if (*(unsigned char *)(v6 + 41)) {
      uint64_t v8 = 5654338;
    }
    else {
      uint64_t v8 = 5654082;
    }
    uint64_t v31 = *(void *)(*(void *)(a3 + 32) + 16);
    swift_retain();
    sub_1DB0C5188();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = v4;
      uint64_t v11 = *(void *)(*(void *)(v4 + 8 * i + 32) + 16);
      int v12 = *(unsigned __int8 *)(v11 + 41);
      LOBYTE(v32[0]) = *(unsigned char *)(v11 + 40);
      v35[0] = v7;
      unint64_t v13 = HE.RlweParams.rawValue.getter();
      uint64_t v15 = v14;
      if (v13 == HE.RlweParams.rawValue.getter() && v15 == v16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v17 = sub_1DB0C53D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0) {
          goto LABEL_17;
        }
      }
      if (v12) {
        uint64_t v18 = 5654338;
      }
      else {
        uint64_t v18 = 5654082;
      }
      if (v18 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v19 = sub_1DB0C53D8();
        swift_bridgeObjectRelease_n();
        if ((v19 & 1) == 0)
        {
LABEL_17:
          swift_bridgeObjectRelease_n();
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v20 = 5;
          *(unsigned char *)(v20 + 4) = 1;
          swift_willThrow();
          return swift_release();
        }
      }
      uint64_t v4 = v10;
    }
    swift_bridgeObjectRelease();
    char v23 = *(unsigned char *)(v31 + 41);
    v35[0] = *(unsigned char *)(v31 + 40);
    v35[1] = v23;
    v32[0] = v30;
    v32[1] = v29;
    char v24 = v33;
    unsigned __int8 v34 = v33;
    uint64_t v25 = sub_1DB053CB4((uint64_t)v35, v32, &v34);
    if (v28)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)(v10 + 16) != v25)
      {
        swift_bridgeObjectRelease();
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v26 = 1;
        *(unsigned char *)(v26 + 4) = 1;
        swift_willThrow();
        return swift_release();
      }
      uint64_t result = swift_release();
      *(void *)a4 = v30;
      *(void *)(a4 + 8) = v29;
      *(unsigned char *)(a4 + 16) = v24;
      *(void *)(a4 + 24) = v10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 1;
    *(unsigned char *)(v22 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1DB053110@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *a2 * v8;
  if ((unsigned __int128)(*a2 * (__int128)v8) >> 64 == v10 >> 63)
  {
    if (v10 != *(void *)(a4 + 16) || v10 == 0)
    {
      swift_bridgeObjectRelease();
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v12 = 1;
    }
    else
    {
      if (!*a3)
      {
        *(void *)&long long v19 = *a2;
        *((void *)&v19 + 1) = v8;
        uint64_t v14 = sub_1DB053DCC(result, (uint64_t *)&v19, a4, a5 & 1);
        swift_bridgeObjectRelease();
        if (v6) {
          return swift_release();
        }
        uint64_t v17 = v9;
        uint64_t v18 = v8;
        unsigned __int8 v22 = 0;
LABEL_18:
        sub_1DB052E2C(&v17, &v22, (uint64_t)v14, (uint64_t)&v19);
        uint64_t result = swift_release();
        char v15 = v20;
        uint64_t v16 = v21;
        *(_OWORD *)a6 = v19;
        *(unsigned char *)(a6 + 16) = v15;
        *(void *)(a6 + 24) = v16;
        return result;
      }
      if (*a3 == 1)
      {
        *(void *)&long long v19 = *a2;
        *((void *)&v19 + 1) = v8;
        unint64_t v13 = sub_1DB054690(result, (uint64_t *)&v19, a4, a5 & 1);
        if (v6)
        {
          swift_bridgeObjectRelease();
          return swift_release();
        }
        uint64_t v14 = v13;
        swift_bridgeObjectRelease();
        uint64_t v17 = v9;
        uint64_t v18 = v8;
        unsigned __int8 v22 = 1;
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v12 = 5;
    }
    *(unsigned char *)(v12 + 4) = 1;
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
  return result;
}

void sub_1DB0532D0()
{
  if (*(unsigned char *)(v0 + 16))
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v1 = 5;
    *(unsigned char *)(v1 + 4) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v43 = *(void *)(v2 + 16);
  if (!v43) {
    goto LABEL_86;
  }
  uint64_t v3 = *(void *)v0;
  uint64_t v41 = *(void *)(v0 + 8);
  swift_retain();
  uint64_t v4 = sub_1DB06B8DC();
  swift_release();
  if (!v3)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v4 == 0x8000000000000000 && v3 == -1)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v6 = v4 / v3;
  if (v4 / v3 + 0x4000000000000000 < 0) {
    goto LABEL_88;
  }
  if ((unsigned __int128)(v3 * (__int128)v41) >> 64 != (v3 * v41) >> 63)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  uint64_t v46 = 2 * v6;
  long long v48 = sub_1DB07E684(0, (v3 * v41) & ~((v3 * v41) >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v44 = v3 * v6;
  BOOL v42 = (unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63;
  sub_1DB0C5188();
  uint64_t v7 = 0;
  uint64_t v47 = v2;
  uint64_t v45 = v3 * v41;
  do
  {
    uint64_t v10 = *(void *)(v2 + 8 * v7 + 32);
    unsigned int v11 = cche_param_ctx_polynomial_degree();
    swift_retain();
    swift_retain();
    if (v11)
    {
      uint64_t v12 = sub_1DB0C51B8();
      *(void *)(v12 + 16) = v11;
    }
    else
    {
      uint64_t v12 = MEMORY[0x1E4FBC860];
    }
    if (!*(void *)(v10 + 24)) {
      goto LABEL_93;
    }
    int v13 = cche_decode_simd_int64();
    if (v13)
    {
      int v30 = v13;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v31 = v30;
      *(unsigned char *)(v31 + 4) = 0;
      swift_willThrow();
      *(void *)(v12 + 16) = 0;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_64:
      swift_bridgeObjectRelease();
      return;
    }
    unsigned int v14 = cche_param_ctx_polynomial_degree();
    if (v11 < v14)
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    *(void *)(v12 + 16) = v14;
    swift_release();
    if (v46 <= 1)
    {
      uint64_t v26 = *((void *)v48 + 2) % v3;
      BOOL v17 = __OFSUB__(v3, v26);
      uint64_t v27 = v3 - v26;
      if (v17) {
        goto LABEL_74;
      }
      if (v27 >= *(void *)(v12 + 16)) {
        uint64_t v27 = *(void *)(v12 + 16);
      }
      if (v27 < 0) {
        goto LABEL_76;
      }
      unint64_t v28 = (2 * v27) | 1;
      uint64_t v29 = sub_1DB0C5188();
      sub_1DB04F26C(v29, v12 + 32, 0, v28);
      uint64_t v16 = v3 * v41;
    }
    else
    {
      if (v42) {
        goto LABEL_73;
      }
      uint64_t v15 = *((void *)v48 + 2);
      uint64_t v16 = v3 * v41;
      BOOL v17 = __OFSUB__(v45, v15);
      uint64_t v18 = v45 - v15;
      if (v17) {
        goto LABEL_75;
      }
      if (v18 >= v44) {
        uint64_t v18 = v44;
      }
      if (v18 < 0) {
        goto LABEL_77;
      }
      if (*(void *)(v12 + 16) < (unint64_t)v18) {
        goto LABEL_78;
      }
      unint64_t v19 = (2 * v18) | 1;
      uint64_t v20 = sub_1DB0C5188();
      sub_1DB04F26C(v20, v12 + 32, 0, v19);
      swift_bridgeObjectRelease();
      uint64_t v21 = *((void *)v48 + 2);
      BOOL v17 = __OFSUB__(v45, v21);
      uint64_t v22 = v45 - v21;
      if (v17) {
        goto LABEL_79;
      }
      if (v22 >= v44) {
        uint64_t v22 = v44;
      }
      BOOL v17 = __OFADD__(v4, v22);
      uint64_t v23 = v4 + v22;
      if (v17) {
        goto LABEL_80;
      }
      if (v23 < v4) {
        goto LABEL_81;
      }
      if (v4 < 0) {
        goto LABEL_82;
      }
      unint64_t v24 = *(void *)(v12 + 16);
      if (v24 < v4 || (uint64_t)v24 < v23) {
        goto LABEL_83;
      }
      unint64_t v8 = (2 * v23) | 1;
      uint64_t v9 = swift_unknownObjectRetain();
      sub_1DB04F26C(v9, v12 + 32, v4, v8);
    }
    ++v7;
    swift_release();
    swift_bridgeObjectRelease_n();
    uint64_t v2 = v47;
  }
  while (v43 != v7);
  swift_bridgeObjectRelease();
  if (*((void *)v48 + 2) != v16)
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v40 = 5;
    *(unsigned char *)(v40 + 4) = 1;
    swift_willThrow();
    goto LABEL_64;
  }
  if (v3 < 0) {
    goto LABEL_91;
  }
  uint64_t v32 = v41;
  if ((v41 & 0x8000000000000000) == 0)
  {
    sub_1DB0C5188();
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 32;
    uint64_t v36 = v48;
    while (v34 != v3)
    {
      if (v32)
      {
        if ((unsigned __int128)(v34 * (__int128)v32) >> 64 != (v34 * v32) >> 63) {
          goto LABEL_85;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v36 = sub_1DB0526A0((uint64_t)v36);
        }
        uint64_t v37 = 0;
        uint64_t v32 = v41;
        while (1)
        {
          uint64_t v38 = v37 * v3;
          if ((unsigned __int128)(v37 * (__int128)v3) >> 64 != (v37 * v3) >> 63) {
            break;
          }
          BOOL v17 = __OFADD__(v38, v34);
          unint64_t v39 = v38 + v34;
          if (v17) {
            goto LABEL_67;
          }
          if ((v39 & 0x8000000000000000) != 0) {
            goto LABEL_68;
          }
          if (v39 >= *((void *)v48 + 2)) {
            goto LABEL_69;
          }
          if (v33 < 0) {
            goto LABEL_70;
          }
          if ((unint64_t)(v33 + v37) >= *((void *)v36 + 2)) {
            goto LABEL_71;
          }
          *(void *)&v36[8 * v37++ + v35] = *(void *)&v48[8 * v39 + 32];
          if (v41 == v37) {
            goto LABEL_48;
          }
        }
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
LABEL_48:
      ++v34;
      v33 += v32;
      v35 += 8 * v41;
      if (v34 == v3) {
        goto LABEL_64;
      }
    }
    goto LABEL_84;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
}

void sub_1DB05384C()
{
  if (*((unsigned char *)v0 + 16) != 1)
  {
LABEL_51:
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v40 = 5;
    *(unsigned char *)(v40 + 4) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v2 = v0[3];
  uint64_t v42 = *(void *)(v2 + 16);
  if (!v42)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v3 = v1;
  uint64_t v4 = *v0;
  int64_t v5 = v0[1];
  uint64_t v6 = v2 + 32;
  swift_retain();
  uint64_t v7 = sub_1DB06B8DC();
  swift_release();
  unint64_t v8 = sub_1DB0A234C(v5);
  if (!v8)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v9 = v8;
  if (v7 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_75;
  }
  uint64_t v46 = v7;
  unint64_t v11 = sub_1DB0A234C(v5);
  int64_t v49 = v11 - v5;
  if (__OFSUB__(v11, v5)) {
    goto LABEL_73;
  }
  uint64_t v12 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    return;
  }
  uint64_t v13 = v46 / v9;
  unsigned int v14 = sub_1DB07E684(0, v12 & ~(v12 >> 63), 0, MEMORY[0x1E4FBC860]);
  sub_1DB0C5188();
  unint64_t v15 = 0;
  uint64_t v43 = v2;
  uint64_t v41 = v2 + 32;
  uint64_t v48 = v46 / v9;
  while (2)
  {
    if (v15 >= *(void *)(v2 + 16)) {
      goto LABEL_71;
    }
    unint64_t v44 = v15;
    uint64_t v16 = *(void *)(v6 + 8 * v15);
    uint64_t v17 = cche_param_ctx_polynomial_degree();
    swift_retain_n();
    swift_retain_n();
    uint64_t v51 = sub_1DB054DA8(v17, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      return;
    }
    swift_release();
    swift_release_n();
    if (v13 < 0) {
      goto LABEL_72;
    }
    uint64_t v18 = v14;
    char v19 = 0;
    uint64_t v20 = 0;
    unint64_t v45 = v44 + 1;
    do
    {
      char v47 = v19;
      if (v13)
      {
        uint64_t v21 = 0;
        uint64_t v50 = v20 * v46;
        while (v13 != v21)
        {
          int64_t v22 = v21 * v5;
          if ((unsigned __int128)(v21 * (__int128)v5) >> 64 != (v21 * v5) >> 63) {
            goto LABEL_56;
          }
          BOOL v23 = __OFADD__(v50, v22);
          uint64_t v24 = v50 + v22;
          if (v23) {
            goto LABEL_57;
          }
          int64_t v25 = v21 * v49;
          if ((unsigned __int128)(v21 * (__int128)v49) >> 64 != (v21 * v49) >> 63) {
            goto LABEL_58;
          }
          uint64_t v26 = v24 + v25;
          if (__OFADD__(v24, v25)) {
            goto LABEL_59;
          }
          int64_t v27 = *((void *)v18 + 2);
          int64_t v28 = v12 - v27;
          if (__OFSUB__(v12, v27)) {
            goto LABEL_60;
          }
          if (v28 >= v5) {
            int64_t v28 = v5;
          }
          uint64_t v29 = v26 + v28;
          if (__OFADD__(v26, v28)) {
            goto LABEL_61;
          }
          uint64_t v30 = v28;
          if (v29 < v26) {
            goto LABEL_62;
          }
          if (v26 < 0) {
            goto LABEL_63;
          }
          unint64_t v31 = *(void *)(v51 + 16);
          if (v31 < v26 || (uint64_t)v31 < v29) {
            goto LABEL_64;
          }
          int64_t v32 = v5;
          uint64_t v33 = v12;
          int64_t v34 = v27 + v30;
          if (__OFADD__(v27, v30)) {
            goto LABEL_65;
          }
          uint64_t v35 = v18;
          unint64_t v36 = *((void *)v18 + 3);
          sub_1DB0C5188();
          if (v34 > (uint64_t)(v36 >> 1))
          {
            if (v27 <= v34) {
              int64_t v39 = v27 + v30;
            }
            else {
              int64_t v39 = v27;
            }
            uint64_t v18 = sub_1DB07E684((char *)1, v39, 1, v35);
            int64_t v27 = *((void *)v18 + 2);
            uint64_t v12 = v33;
          }
          else
          {
            uint64_t v12 = v33;
            uint64_t v18 = v35;
          }
          int64_t v5 = v32;
          if (v29 == v26)
          {
            uint64_t v13 = v48;
            if (v30 > 0) {
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v13 = v48;
            if ((*((void *)v18 + 3) >> 1) - v27 < v30) {
              goto LABEL_67;
            }
            memcpy(&v18[8 * v27 + 32], (const void *)(v51 + 32 + 8 * v26), 8 * v30);
            if (v30 >= 1)
            {
              uint64_t v37 = *((void *)v18 + 2);
              BOOL v23 = __OFADD__(v37, v30);
              uint64_t v38 = v37 + v30;
              if (v23) {
                goto LABEL_68;
              }
              *((void *)v18 + 2) = v38;
            }
          }
          swift_bridgeObjectRelease();
          if (*((void *)v18 + 2) == v12)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return;
          }
          if (v13 == ++v21) {
            goto LABEL_15;
          }
        }
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
LABEL_15:
      char v19 = 1;
      uint64_t v20 = 1;
    }
    while ((v47 & 1) == 0);
    unsigned int v14 = v18;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = v43;
    uint64_t v3 = 0;
    unint64_t v15 = v45;
    uint64_t v6 = v41;
    if (v45 != v42) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  if (*((void *)v14 + 2) != v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
}

uint64_t sub_1DB053CB4(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a2;
  int64_t v4 = a2[1];
  int v5 = *a3;
  uint64_t result = cche_encryption_params_polynomial_degree();
  uint64_t v7 = result >> 1;
  if (v5)
  {
    if (v5 != 1)
    {
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = 5;
      *(unsigned char *)(v8 + 4) = 1;
      return swift_willThrow();
    }
    uint64_t result = sub_1DB0A234C(v4);
    if (result) {
      return sub_1DB07F724(2 * (v7 / result), v3);
    }
    __break(1u);
    goto LABEL_12;
  }
  if (!v3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v7 / v3 >= 1) {
    return sub_1DB07F724(2 * (v7 / v3), v4);
  }
  unsigned int v9 = cche_encryption_params_polynomial_degree();
  uint64_t v10 = sub_1DB07F724(v9, v3);
  uint64_t result = v4 * v10;
  if ((unsigned __int128)(v4 * (__int128)v10) >> 64 != (v4 * v10) >> 63) {
    goto LABEL_13;
  }
  return result;
}

char *sub_1DB053DCC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = cche_param_ctx_polynomial_degree();
  uint64_t v12 = sub_1DB06B8DC();
  char v13 = *(unsigned char *)(a1 + 41);
  v65[0] = *(unsigned char *)(a1 + 40);
  v65[1] = v13;
  v62[0] = v8;
  v62[1] = v9;
  unsigned __int8 v64 = 0;
  uint64_t v14 = sub_1DB053CB4((uint64_t)v65, v62, &v64);
  if (v4) {
    return v15;
  }
  uint64_t v55 = v12;
  unint64_t v58 = v10;
  int v63 = a4;
  uint64_t v56 = a1;
  unint64_t v16 = v11;
  int64_t v17 = MEMORY[0x1E4FBC860];
  v59 = sub_1DB07E788(0, v14 & ~(v14 >> 63), 0, MEMORY[0x1E4FBC860]);
  int64_t v61 = v11;
  uint64_t v18 = sub_1DB07E684(0, v11, 0, (char *)v17);
  if (v9 < 0) {
    goto LABEL_101;
  }
  uint64_t v20 = v18;
  if (v9)
  {
    if (v8 < 0) {
      goto LABEL_105;
    }
    uint64_t v21 = 0;
    uint64_t v57 = a3 + 32;
    int64_t v17 = v55 + 1;
    int64_t v19 = __OFADD__(v55, 1);
    char v52 = v19;
    int64_t v53 = v55 + 1;
    uint64_t v54 = a3;
    unint64_t v11 = v10;
    while (1)
    {
      if (v21 == v9)
      {
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        unint64_t v15 = sub_1DB07E788((char *)((unint64_t)v19 > 1), v17, 1, v15);
LABEL_91:
        *((void *)v15 + 2) = v17;
        *(void *)&v15[8 * v11 + 32] = v16;
        return v15;
      }
      uint64_t v60 = v21;
      if (v8)
      {
        int64_t v17 = 0;
        int64_t v22 = *(void *)(a3 + 16);
        while (v8 != v17)
        {
          int64_t v19 = v17 * v9;
          if ((unsigned __int128)(v17 * (__int128)v9) >> 64 != (v17 * v9) >> 63) {
            goto LABEL_94;
          }
          BOOL v23 = __OFADD__(v19, v21);
          v19 += v21;
          if (v23) {
            goto LABEL_95;
          }
          if (v19 < 0) {
            goto LABEL_96;
          }
          if (v19 >= v22) {
            goto LABEL_97;
          }
          unint64_t v16 = *(void *)(v57 + 8 * v19);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v20 = sub_1DB07E684(0, *((void *)v20 + 2) + 1, 1, v20);
          }
          unint64_t v25 = *((void *)v20 + 2);
          unint64_t v24 = *((void *)v20 + 3);
          unint64_t v26 = v25 + 1;
          if (v25 >= v24 >> 1) {
            uint64_t v20 = sub_1DB07E684((char *)(v24 > 1), v25 + 1, 1, v20);
          }
          *((void *)v20 + 2) = v26;
          *(void *)&v20[8 * v25 + 32] = v16;
          int64_t v19 = v61;
          if (v26 == v61)
          {
            unint64_t v11 = v58;
            unint64_t v16 = cche_plaintext_sizeof();
            type metadata accessor for HE.ObjectStorage();
            int64_t v27 = (void *)swift_allocObject();
            v27[2] = v56;
            sub_1DB0C5188();
            swift_retain();
            uint64_t v28 = swift_slowAlloc();
            v27[3] = v28;
            v27[4] = v28 + v16;
            int64_t v19 = HIDWORD(*((void *)v20 + 2));
            if (v19) {
              goto LABEL_98;
            }
            if (v63)
            {
              int v29 = cche_encode_simd_reduced_int64();
              if (v29) {
                goto LABEL_86;
              }
            }
            else
            {
              int v29 = cche_encode_simd_int64();
              if (v29) {
                goto LABEL_86;
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v30 = v59;
            unint64_t v16 = *((void *)v59 + 2);
            unint64_t v31 = *((void *)v59 + 3);
            if (v16 >= v31 >> 1) {
              uint64_t v30 = sub_1DB07E788((char *)(v31 > 1), v16 + 1, 1, v59);
            }
            *((void *)v30 + 2) = v16 + 1;
            v59 = v30;
            *(void *)&v30[8 * v16 + 32] = v27;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              int64_t v32 = *((void *)v20 + 2);
              uint64_t v21 = v60;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v20 = sub_1DB07E684(0, v32, 1, v20);
              }
              if (v32)
              {
                unint64_t v16 = *((void *)v20 + 2) - v32;
                memmove(v20 + 32, &v20[8 * v32 + 32], 8 * v16);
                *((void *)v20 + 2) = v16;
              }
            }
            else
            {
              unint64_t v16 = *((void *)v20 + 3);
              uint64_t v33 = (void *)MEMORY[0x1E4FBC860];
              uint64_t v21 = v60;
              if (v16 >= 2)
              {
                __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE128);
                uint64_t v33 = (void *)swift_allocObject();
                int64_t v34 = _swift_stdlib_malloc_size(v33);
                uint64_t v35 = v34 - 32;
                if (v34 < 32) {
                  uint64_t v35 = v34 - 25;
                }
                v33[2] = 0;
                v33[3] = 2 * (v35 >> 3);
              }
              swift_bridgeObjectRelease();
              uint64_t v20 = (char *)v33;
            }
          }
          else
          {
            unint64_t v11 = v58;
            uint64_t v21 = v60;
          }
          if (v8 == ++v17) {
            goto LABEL_44;
          }
        }
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
LABEL_44:
      unint64_t v16 = *((void *)v20 + 2);
      int64_t v19 = v16 + v8;
      if (__OFADD__(v16, v8)) {
        goto LABEL_100;
      }
      a3 = v54;
      int64_t v17 = v55 + 1;
      if ((uint64_t)v16 < v55)
      {
        if (v52) {
          goto LABEL_102;
        }
        if (v53 > v61) {
          goto LABEL_103;
        }
        if (v19 >= v53 && v19 <= v61) {
          break;
        }
      }
      if (v19 <= v61) {
        goto LABEL_11;
      }
      unint64_t v16 = cche_plaintext_sizeof();
      type metadata accessor for HE.ObjectStorage();
      uint64_t v38 = (void *)swift_allocObject();
      uint64_t v38[2] = v56;
      swift_retain();
      sub_1DB0C5188();
      uint64_t v39 = swift_slowAlloc();
      v38[3] = v39;
      v38[4] = v39 + v16;
      int64_t v19 = HIDWORD(*((void *)v20 + 2));
      if (v19) {
        goto LABEL_104;
      }
      if (v63) {
        int v40 = cche_encode_simd_reduced_int64();
      }
      else {
        int v40 = cche_encode_simd_int64();
      }
      int v29 = v40;
      if (v40)
      {
LABEL_86:
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v50 = v29;
        *(unsigned char *)(v50 + 4) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_release();
        return v15;
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = v59;
      unint64_t v16 = *((void *)v59 + 2);
      unint64_t v42 = *((void *)v59 + 3);
      if (v16 >= v42 >> 1) {
        uint64_t v41 = sub_1DB07E788((char *)(v42 > 1), v16 + 1, 1, v59);
      }
      *((void *)v41 + 2) = v16 + 1;
      v59 = v41;
      *(void *)&v41[8 * v16 + 32] = v38;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        int64_t v43 = *((void *)v20 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = sub_1DB07E684(0, v43, 1, v20);
        }
        uint64_t v21 = v60;
        if (v43)
        {
          unint64_t v16 = *((void *)v20 + 2) - v43;
          memmove(v20 + 32, &v20[8 * v43 + 32], 8 * v16);
          *((void *)v20 + 2) = v16;
        }
        goto LABEL_11;
      }
      unint64_t v16 = *((void *)v20 + 3);
      unint64_t v44 = (void *)MEMORY[0x1E4FBC860];
      if (v16 >= 2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE128);
        unint64_t v44 = (void *)swift_allocObject();
        int64_t v45 = _swift_stdlib_malloc_size(v44);
        uint64_t v46 = v45 - 32;
        if (v45 < 32) {
          uint64_t v46 = v45 - 25;
        }
        v44[2] = 0;
        v44[3] = 2 * (v46 >> 3);
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = (char *)v44;
LABEL_10:
      uint64_t v21 = v60;
LABEL_11:
      if (++v21 == v9) {
        goto LABEL_87;
      }
    }
    int64_t v19 = v61 - v16;
    uint64_t v36 = (uint64_t)(v61 - v16) % v55;
    if (v36 < 0) {
      goto LABEL_106;
    }
    if (v36)
    {
      uint64_t v37 = sub_1DB0C51B8();
      *(void *)(v37 + 16) = v36;
      bzero((void *)(v37 + 32), 8 * v36);
      unint64_t v16 = *((void *)v20 + 2);
      int64_t v17 = v16 + v36;
      if (__OFADD__(v16, v36)) {
        goto LABEL_107;
      }
    }
    else
    {
      uint64_t v37 = MEMORY[0x1E4FBC860];
      uint64_t v36 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      int64_t v17 = v16 + v36;
      if (__OFADD__(v16, v36)) {
        goto LABEL_107;
      }
    }
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v17 <= *((void *)v20 + 3) >> 1)
    {
      int64_t v19 = *(void *)(v37 + 16);
      if (v19) {
        goto LABEL_76;
      }
    }
    else
    {
      if ((uint64_t)v16 <= v17) {
        int64_t v49 = v17;
      }
      else {
        int64_t v49 = v16;
      }
      uint64_t v20 = sub_1DB07E684(isUniquelyReferenced_nonNull_native, v49, 1, v20);
      int64_t v19 = *(void *)(v37 + 16);
      if (v19)
      {
LABEL_76:
        int64_t v19 = *((void *)v20 + 2);
        if ((*((void *)v20 + 3) >> 1) - v19 < v36) {
          goto LABEL_109;
        }
        memcpy(&v20[8 * v19 + 32], (const void *)(v37 + 32), 8 * v36);
        if (v36)
        {
          uint64_t v48 = *((void *)v20 + 2);
          BOOL v23 = __OFADD__(v48, v36);
          int64_t v19 = v48 + v36;
          if (v23) {
            goto LABEL_110;
          }
          *((void *)v20 + 2) = v19;
        }
LABEL_85:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    if (v36) {
      goto LABEL_108;
    }
    goto LABEL_85;
  }
LABEL_87:
  if (*((void *)v20 + 2))
  {
    sub_1DB06B954((uint64_t)v20, v63 & 1, v62);
    swift_bridgeObjectRelease();
    unint64_t v16 = v62[0];
    unint64_t v15 = v59;
    unint64_t v11 = *((void *)v59 + 2);
    int64_t v19 = *((void *)v59 + 3);
    int64_t v17 = v11 + 1;
    if (v11 >= (unint64_t)v19 >> 1) {
      goto LABEL_111;
    }
    goto LABEL_91;
  }
  swift_bridgeObjectRelease();
  return v59;
}

unint64_t sub_1DB054588(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_1DB07E684((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13) {
    uint64_t result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_1DB054690(unint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v6 = v4;
  int v67 = a4;
  uint64_t v8 = *a2;
  int64_t v9 = a2[1];
  unsigned int v10 = cche_param_ctx_polynomial_degree();
  uint64_t v11 = sub_1DB06B8DC();
  if (v11 < v9)
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = 1;
    *(unsigned char *)(v12 + 4) = 1;
    swift_willThrow();
    return v5;
  }
  uint64_t v13 = v11;
  char v14 = *(unsigned char *)(a1 + 41);
  LOBYTE(v65) = *(unsigned char *)(a1 + 40);
  BYTE1(v65) = v14;
  v66[0] = v8;
  v66[1] = v9;
  unsigned __int8 v68 = 1;
  uint64_t v15 = sub_1DB053CB4((uint64_t)&v65, v66, &v68);
  if (v4) {
    return v5;
  }
  uint64_t v60 = v8;
  int64_t v5 = sub_1DB07E788(0, v15 & ~(v15 >> 63), 0, MEMORY[0x1E4FBC860]);
  unint64_t v17 = sub_1DB0A234C(v9);
  int64_t v19 = v17 - v9;
  if (__OFSUB__(v17, v9))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  if (v19 < 0)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (v19)
  {
    uint64_t v20 = sub_1DB0C51B8();
    *(void *)(v20 + 16) = v19;
    uint64_t v64 = v20;
    bzero((void *)(v20 + 32), 8 * v19);
  }
  else
  {
    uint64_t v64 = MEMORY[0x1E4FBC860];
  }
  uint64_t v21 = sub_1DB07E684(0, v10, 0, MEMORY[0x1E4FBC860]);
  v66[0] = (uint64_t)v21;
  uint64_t v22 = v8;
  if (v8 < 0) {
    goto LABEL_94;
  }
  unint64_t v59 = v10;
  if (!v8)
  {
    char v47 = v21;
    swift_bridgeObjectRelease();
    uint64_t v18 = *((void *)v47 + 2);
    if (v18) {
      goto LABEL_65;
    }
LABEL_71:
    swift_bridgeObjectRelease();
    return v5;
  }
  unint64_t v57 = 0;
  unint64_t v58 = a1;
  BOOL v23 = (char *)v9;
  if ((v9 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = 0;
    a1 = 0;
    uint64_t v18 = v64 + 32;
    uint64_t v62 = v13;
    do
    {
      if (a1 == v22) {
        goto LABEL_83;
      }
      int64_t v19 = v66[0];
      int v63 = v5;
      if (v23)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v19 = (int64_t)sub_1DB07E684(0, *(void *)(v19 + 16) + 1, 1, (char *)v19);
        }
        unint64_t v26 = *(void *)(a3 + 16);
        BOOL v27 = v26 >= v6;
        uint64_t v18 = v26 - v6;
        if (v27) {
          uint64_t v28 = v18;
        }
        else {
          uint64_t v28 = 0;
        }
        int64_t v5 = v23;
        while (v28)
        {
          uint64_t v29 = *(void *)(a3 + 32 + 8 * v6);
          unint64_t v31 = *(void *)(v19 + 16);
          unint64_t v30 = *(void *)(v19 + 24);
          int64_t v32 = v31 + 1;
          if (v31 >= v30 >> 1) {
            int64_t v19 = (int64_t)sub_1DB07E684((char *)(v30 > 1), v31 + 1, 1, (char *)v19);
          }
          *(void *)(v19 + 16) = v32;
          uint64_t v18 = v19 + 8 * v31;
          *(void *)(v18 + 32) = v29;
          v66[0] = v19;
          ++v6;
          --v28;
          if (!--v5) {
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      int64_t v32 = *(void *)(v66[0] + 16);
LABEL_33:
      uint64_t v33 = *(void *)(v64 + 16);
      int64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_84;
      }
      sub_1DB0C5188();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v34 > *(void *)(v19 + 24) >> 1)
      {
        if (v32 <= v34) {
          int64_t v36 = v32 + v33;
        }
        else {
          int64_t v36 = v32;
        }
        int64_t v19 = (int64_t)sub_1DB07E684(isUniquelyReferenced_nonNull_native, v36, 1, (char *)v19);
      }
      BOOL v23 = (char *)v9;
      int64_t v5 = v63;
      uint64_t v18 = *(void *)(v64 + 16);
      if (v18)
      {
        uint64_t v18 = *(void *)(v19 + 16);
        if ((*(void *)(v19 + 24) >> 1) - v18 < v33) {
          goto LABEL_87;
        }
        memcpy((void *)(v19 + 8 * v18 + 32), (const void *)(v64 + 32), 8 * v33);
        if (v33)
        {
          uint64_t v37 = *(void *)(v19 + 16);
          BOOL v38 = __OFADD__(v37, v33);
          uint64_t v18 = v37 + v33;
          if (v38) {
            goto LABEL_90;
          }
          *(void *)(v19 + 16) = v18;
        }
      }
      else if (v33)
      {
        goto LABEL_85;
      }
      swift_bridgeObjectRelease();
      v66[0] = v19;
      uint64_t v18 = *(void *)(v19 + 16);
      uint64_t v13 = v62;
      if (v62 > v18)
      {
        if (__OFADD__(v18, v9)) {
          goto LABEL_88;
        }
        if (v62 < v18 + v9)
        {
          if (v62 - v18 < 0) {
            goto LABEL_91;
          }
          sub_1DB04E9CC(v62 - v18, 0);
          int64_t v19 = v66[0];
          uint64_t v18 = *(void *)(v66[0] + 16);
        }
      }
      BOOL v38 = __OFADD__(v18, v9);
      v18 += v9;
      if (v38) {
        goto LABEL_86;
      }
      if (v18 > (uint64_t)v59)
      {
        uint64_t v39 = cche_plaintext_sizeof();
        type metadata accessor for HE.ObjectStorage();
        int v40 = (void *)swift_allocObject();
        v40[2] = v58;
        sub_1DB0C5188();
        swift_retain();
        uint64_t v41 = swift_slowAlloc();
        v40[3] = v41;
        v40[4] = v41 + v39;
        uint64_t v18 = HIDWORD(*(void *)(v19 + 16));
        if (v18) {
          goto LABEL_89;
        }
        if (v67) {
          int v42 = cche_encode_simd_reduced_int64();
        }
        else {
          int v42 = cche_encode_simd_int64();
        }
        int v43 = v42;
        if (v42)
        {
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v51 = v43;
          *(unsigned char *)(v51 + 4) = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v5;
        }
        swift_bridgeObjectRelease();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          sub_1DB054588(0, *(void *)(v19 + 16));
        }
        else
        {
          unint64_t v44 = (void *)MEMORY[0x1E4FBC860];
          if (*(void *)(v19 + 24) >= 2uLL)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE128);
            unint64_t v44 = (void *)swift_allocObject();
            int64_t v45 = _swift_stdlib_malloc_size(v44);
            uint64_t v46 = v45 - 32;
            if (v45 < 32) {
              uint64_t v46 = v45 - 25;
            }
            v44[2] = 0;
            v44[3] = 2 * (v46 >> 3);
          }
          v66[0] = (uint64_t)v44;
          swift_bridgeObjectRelease();
        }
        unint64_t v25 = *((void *)v63 + 2);
        unint64_t v24 = *((void *)v63 + 3);
        int64_t v19 = v25 + 1;
        swift_retain();
        if (v25 >= v24 >> 1) {
          int64_t v5 = sub_1DB07E788((char *)(v24 > 1), v25 + 1, 1, v63);
        }
        *((void *)v5 + 2) = v19;
        *(void *)&v5[8 * v25 + 32] = v40;
        swift_release();
        uint64_t v13 = v62;
        BOOL v23 = (char *)v9;
      }
      ++a1;
      uint64_t v22 = v60;
    }
    while (a1 != v60);
    while (1)
    {
      swift_bridgeObjectRelease();
      unint64_t v6 = v57;
      a1 = v58;
      uint64_t v18 = *(void *)(v66[0] + 16);
      if (!v18) {
        goto LABEL_71;
      }
LABEL_65:
      if (!v13) {
        goto LABEL_96;
      }
      uint64_t v48 = v18 % v13;
      if (!(v18 % v13))
      {
        uint64_t v50 = 0;
LABEL_74:
        int64_t v19 = (int64_t)v66;
        sub_1DB04E9CC(v50, 0);
        uint64_t v52 = 0;
        uint64_t v53 = v66[0];
        unint64_t v54 = *(void *)(v66[0] + 16);
        if (v13 < (uint64_t)v54)
        {
          uint64_t v52 = v13;
          if (v13 < 0) {
            goto LABEL_98;
          }
        }
        sub_1DB0C5188();
        if (v54 < v59)
        {
          do
          {
            uint64_t v55 = sub_1DB0C5188();
            sub_1DB04F26C(v55, v53 + 32, v52, (2 * v54) | 1);
            swift_bridgeObjectRelease();
          }
          while (*(void *)(v66[0] + 16) < v59);
        }
        uint64_t v56 = sub_1DB0C5188();
        sub_1DB06B954(v56, v67 & 1, &v65);
        if (v6)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v5;
        }
        swift_bridgeObjectRelease();
        unint64_t v6 = v65;
        a1 = *((void *)v5 + 2);
        uint64_t v18 = *((void *)v5 + 3);
        int64_t v19 = a1 + 1;
        if (a1 >= (unint64_t)v18 >> 1) {
          goto LABEL_99;
        }
        goto LABEL_81;
      }
      unint64_t v49 = sub_1DB0A234C(v18 % v13);
      BOOL v38 = __OFSUB__(v49, v48);
      uint64_t v50 = v49 - v48;
      if (v38) {
        goto LABEL_97;
      }
      if ((v50 & 0x8000000000000000) == 0) {
        goto LABEL_74;
      }
      __break(1u);
    }
  }
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  int64_t v5 = sub_1DB07E788((char *)((unint64_t)v18 > 1), v19, 1, v5);
LABEL_81:
  *((void *)v5 + 2) = v19;
  *(void *)&v5[8 * a1 + 32] = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1DB054DA8(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v3 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C51B8();
    *(void *)(result + 16) = v3;
    if (*(void *)(a2 + 24))
    {
      if (!HIDWORD(v3))
      {
        uint64_t v4 = result;
LABEL_8:
        int v5 = cche_decode_simd_int64();
        if (v5)
        {
          int v6 = v5;
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v7 = v6;
          *(unsigned char *)(v7 + 4) = 0;
          swift_willThrow();
          *(void *)(v4 + 16) = 0;
          swift_bridgeObjectRelease();
          return v4;
        }
        uint64_t result = cche_param_ctx_polynomial_degree();
        if (result <= v3)
        {
          *(void *)(v4 + 16) = result;
          return v4;
        }
        goto LABEL_15;
      }
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
    }
  }
  else if (*(void *)(a2 + 24))
  {
    uint64_t v4 = MEMORY[0x1E4FBC860];
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB054EB4()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proof();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1DB054FA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v21 = v4 + v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8 & 0xF8 | 7;
  uint64_t v10 = *(void *)(v7 + 64) + 7;
  int v11 = (v8 | v5) & 0x100000;
  if ((v9 | v5) != 7
    || v11 != 0
    || (v10 & 0xFFFFFFFFFFFFFFF8)
     + ((v4 + ((v4 + v5) & ~(unint64_t)v5) + v9) & ~v9)
     + 8 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    unint64_t v17 = (uint64_t *)(v14 + (((v9 | v5) + 16) & ~(v9 | v5)));
    swift_retain();
  }
  else
  {
    unint64_t v15 = ~(unint64_t)v5;
    uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16);
    unint64_t v17 = a1;
    uint64_t v22 = v6;
    v16(a1, a2, AssociatedTypeWitness);
    unint64_t v18 = ((unint64_t)a1 + v21) & v15;
    unint64_t v19 = ((unint64_t)a2 + v21) & v15;
    v16((uint64_t *)v18, (uint64_t *)v19, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((v18 + v4 + v9) & ~v9, (v19 + v4 + v9) & ~v9, v22);
    *(void *)((v10 + ((v18 + v4 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + ((v19 + v4 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
    sub_1DB0C5188();
  }
  return v17;
}

uint64_t sub_1DB055254(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  unint64_t v7 = (v6 + a1 + *(unsigned __int8 *)(v5 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 72);
  v4(v7, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))((v7 + v6 + v10) & ~v10, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DB0553F4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 16;
  uint64_t v15 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  uint64_t v16 = (v8 + v15 + v10) & ~v15;
  uint64_t v17 = (v8 + v15 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16, v17, v12);
  *(void *)((*(void *)(v14 + 48) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v14 + 48)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  return a1;
}

uint64_t sub_1DB0555C0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  uint64_t v16 = (v8 + v15 + v10) & ~v15;
  uint64_t v17 = (v8 + v15 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v16, v17, v12);
  *(void *)((*(void *)(v14 + 40) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v14 + 40)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB055798(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  uint64_t v16 = (v8 + v15 + v10) & ~v15;
  uint64_t v17 = (v8 + v15 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v16, v17, v12);
  *(void *)((*(void *)(v14 + 32) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v14 + 32)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1DB055960(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 40;
  uint64_t v15 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  uint64_t v16 = (v8 + v15 + v10) & ~v15;
  uint64_t v17 = (v8 + v15 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v16, v17, v12);
  *(void *)((*(void *)(v14 + 24) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v14 + 24)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB055B30(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= v6) {
    unsigned int v13 = v6;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v16 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  if (v13 < a2)
  {
    unint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + ((v10 + (v14 & ~v11) + v15) & ~v15) + 8;
    if ((v17 & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = a2 - v13 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v17);
        if (!*((unsigned char *)a1 + v17)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v17);
        if (*(_WORD *)((char *)a1 + v17)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1DB055E78);
      case 4:
        int v21 = *(_DWORD *)((char *)a1 + v17);
        if (!v21) {
          break;
        }
LABEL_25:
        int v23 = v21 - 1;
        if ((v17 & 0xFFFFFFF8) != 0)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        return v13 + (v24 | v23) + 1;
      default:
        break;
    }
  }
  if (v6 >= v12)
  {
    BOOL v27 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
    return v27(a1, v6, AssociatedTypeWitness);
  }
  else
  {
    unint64_t v25 = ((((unint64_t)a1 + v14) & ~v11) + v10 + v15) & ~v15;
    if (v9 < 0x7FFFFFFF)
    {
      unint64_t v28 = *(void *)((v16 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v28 >= 0xFFFFFFFF) {
        LODWORD(v28) = -1;
      }
      return (v28 + 1);
    }
    else
    {
      unint64_t v26 = *(uint64_t (**)(unint64_t))(v8 + 48);
      return v26(v25);
    }
  }
}

void sub_1DB055E8C(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (v13 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = v11 + v12;
  uint64_t v16 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v17 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  size_t v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v19 = ((v11 + ((v11 + v12) & ~v12) + v16) & ~v16) + v18;
  if (v14 >= a3)
  {
    int v22 = 0;
  }
  else
  {
    if (v19) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a3 - v14 + 1;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
  }
  if (a2 > v14)
  {
    if (v19) {
      int v23 = 1;
    }
    else {
      int v23 = a2 - v14;
    }
    if (v19)
    {
      int v24 = ~v14 + a2;
      bzero(a1, ((v11 + ((v11 + v12) & ~v12) + v16) & ~v16) + v18);
      *a1 = v24;
    }
    switch(v22)
    {
      case 1:
        *((unsigned char *)a1 + v19) = v23;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v19) = v23;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)((char *)a1 + v19) = v23;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v12;
  uint64_t v26 = ~v16;
  switch(v22)
  {
    case 1:
      *((unsigned char *)a1 + v19) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)((char *)a1 + v19) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x1DB05624CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v19) = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v7 >= v13)
        {
          uint64_t v29 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v29(a1, a2, v7, AssociatedTypeWitness);
        }
        else
        {
          BOOL v27 = (_DWORD *)(((((unint64_t)a1 + v15) & v25) + v11 + v16) & v26);
          if (v13 >= a2)
          {
            if (v10 < 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v31 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v31 = (a2 - 1);
              }
              *(void *)(((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8) = v31;
            }
            else
            {
              unint64_t v30 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
              v30(((((unint64_t)a1 + v15) & v25) + v11 + v16) & v26, a2);
            }
          }
          else if ((v17 & 0xFFFFFFF8) != 0xFFFFFFF8)
          {
            int v28 = ~v13 + a2;
            bzero((void *)(((((unint64_t)a1 + v15) & v25) + v11 + v16) & v26), v18);
            *BOOL v27 = v28;
          }
        }
      }
      return;
  }
}

uint64_t _s16EncryptedRequestVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB05628C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1DB097C70(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_1DB097BF4(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x1DB0563F8);
  }
LABEL_16:
  uint64_t v14 = sub_1DB0C49B8();
  uint64_t v16 = v15;
  uint64_t result = sub_1DB042664(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

void *sub_1DB056428(uint64_t a1, unint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE310);
  uint64_t result = (void *)((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  if (a3)
  {
    uint64_t result = (void *)MEMORY[0x1F4188790](result);
    *(void *)&v20[-32] = &v27;
    *(void *)&v20[-24] = a3;
    *(void *)&v20[-16] = a4;
    *(void *)&v20[-8] = a3;
    switch(a2 >> 62)
    {
      case 1uLL:
        if (a1 >> 32 < (int)a1) {
          goto LABEL_17;
        }
        sub_1DB04239C(a1, a2);
        char v12 = sub_1DB0C0C14((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB05A6DC);
        uint64_t result = (void *)sub_1DB042664(a1, a2);
        if (v12)
        {
LABEL_8:
          uint64_t v16 = v27;
          unint64_t v17 = v28;
          switch(v28 >> 62)
          {
            case 1uLL:
            case 2uLL:
              sub_1DB04239C(v27, v28);
              sub_1DB04239C(v16, v17);
              break;
            default:
              break;
          }
          sub_1DB0C4A48();
          sub_1DB042664(v16, v17);
          sub_1DB0C4A38();
          sub_1DB05A6FC(qword_1EBE7DE78, MEMORY[0x1E4F27788]);
          sub_1DB0C5268();
          uint64_t v18 = 0;
          if ((__src & 0x100) == 0)
          {
            uint64_t v19 = 0;
            do
            {
              uint64_t v18 = v19 + 1;
              if (__OFADD__(v19, 1))
              {
                __break(1u);
LABEL_17:
                __break(1u);
              }
              a3[v19] = __src;
              sub_1DB0C5268();
              ++v19;
            }
            while (BYTE1(__src) != 1);
          }
          *(void *)&v11[*(int *)(v8 + 36)] = v18;
          uint64_t result = (void *)sub_1DB05A744((uint64_t)v11);
        }
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(a1 + 16);
        uint64_t v14 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        char v15 = sub_1DB0C0C14(v13, v14, a2 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB05A6DC);
        swift_release();
        uint64_t result = (void *)swift_release();
        if (v15) {
          goto LABEL_8;
        }
        return result;
      case 3uLL:
        return result;
      default:
        uint64_t __src = a1;
        __int16 v22 = a2;
        char v23 = BYTE2(a2);
        char v24 = BYTE3(a2);
        char v25 = BYTE4(a2);
        char v26 = BYTE5(a2);
        return memcpy(a3, &__src, BYTE6(a2));
    }
  }
  return result;
}

uint64_t sub_1DB0567EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v7 = MEMORY[0x1F4188790](result);
    MEMORY[0x1F4188790](v7);
    return sub_1DB08F824(v5, v6, sub_1DB05A67C);
  }
  return result;
}

uint64_t CKSecretSharing.ShamirShare.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = 0xD000000000000021;
  unint64_t v5 = 0x80000001DB0CADF0;
  uint64_t v6 = 31;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (v9 < 6)
      {
        unint64_t v5 = 0x80000001DB0CADF0;
        uint64_t v6 = 31;
      }
      else
      {
        sub_1DB04239C(a1, a2);
        __int16 v13 = sub_1DB056BB0(a1, a2);
        sub_1DB042664(a1, a2);
        if ((v13 & 0x100) != 0)
        {
          __break(1u);
          JUMPOUT(0x1DB056B4CLL);
        }
        if (v13 == 1)
        {
          unsigned int v19 = 0;
          sub_1DB04239C(a1, a2);
          sub_1DB056D08(1, a1, a2, v20);
          sub_1DB05628C(4, v20[0], v20[1], v21);
          long long v14 = *(_OWORD *)v21;
          sub_1DB056428(v21[0], v21[1], &v19, (uint64_t)v20);
          sub_1DB042664(v14, *((unint64_t *)&v14 + 1));
          unsigned int v15 = bswap32(v19);
          uint64_t result = sub_1DB056D08(5, a1, a2, v21);
          long long v17 = *(_OWORD *)v21;
          *(unsigned char *)a3 = 1;
          *(_DWORD *)(a3 + 4) = v15;
          *(_OWORD *)(a3 + 8) = v17;
          return result;
        }
        unint64_t v4 = 0xD00000000000002BLL;
        unint64_t v5 = 0x80000001DB0CAE90;
        uint64_t v6 = 35;
      }
LABEL_12:
      sub_1DB056B5C();
      swift_allocError();
      *(unsigned char *)uint64_t v18 = 10;
      *(_DWORD *)(v18 + 4) = 0;
      *(unsigned char *)(v18 + 8) = 1;
      *(_DWORD *)(v18 + 12) = 0;
      *(_WORD *)(v18 + 16) = 256;
      *(void *)(v18 + 24) = v6;
      *(void *)(v18 + 32) = 0x293A5F2874696E69;
      *(void *)(v18 + 40) = 0xE800000000000000;
      *(void *)(v18 + 48) = 0xD00000000000006ELL;
      *(void *)(v18 + 56) = 0x80000001DB0CAE20;
      *(void *)(v18 + 64) = v4;
      *(void *)(v18 + 72) = v5;
      swift_willThrow();
      return sub_1DB042664(a1, a2);
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_14;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1DB056B5C()
{
  unint64_t result = qword_1EA8FE2E8;
  if (!qword_1EA8FE2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE2E8);
  }
  return result;
}

uint64_t sub_1DB056BB0(uint64_t a1, unint64_t a2)
{
  int v2 = 1;
  unsigned __int8 v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)a1;
      if ((int)a1 != a1 >> 32) {
        goto LABEL_15;
      }
      unsigned __int8 v3 = 0;
      return v3 | (v2 << 8);
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      if (v4 != v5)
      {
        if (a2 >> 62 == 2)
        {
          if (v4 >= v5) {
            goto LABEL_23;
          }
          uint64_t v6 = sub_1DB0C48A8();
          if (!v6) {
            goto LABEL_25;
          }
          uint64_t v7 = v6;
          a1 = sub_1DB0C48D8();
          uint64_t v8 = v4 - a1;
          if (!__OFSUB__(v4, a1)) {
            goto LABEL_19;
          }
          __break(1u);
        }
LABEL_15:
        if (v4 < (int)a1 || v4 >= a1 >> 32)
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
        }
        uint64_t v9 = sub_1DB0C48A8();
        if (v9)
        {
          uint64_t v7 = v9;
          uint64_t v10 = sub_1DB0C48D8();
          uint64_t v8 = v4 - v10;
          if (!__OFSUB__(v4, v10))
          {
LABEL_19:
            int v2 = 0;
            unsigned __int8 v3 = *(unsigned char *)(v7 + v8);
            return v3 | (v2 << 8);
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x1DB056CF8);
      }
      unsigned __int8 v3 = 0;
      int v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      int v2 = (a2 & 0xFF000000000000) == 0;
      if ((a2 & 0xFF000000000000) != 0) {
        unsigned __int8 v3 = a1;
      }
      else {
        unsigned __int8 v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

uint64_t sub_1DB056D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1DB097C70(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_1DB097BF4(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x1DB056E88);
    }
  }
  uint64_t v14 = sub_1DB0C49B8();
  uint64_t v16 = v15;
  uint64_t result = sub_1DB042664(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1DB056EB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v5 = a3 - a2;
  if (a2) {
    uint64_t v6 = a3 - a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = sub_1DB059220(0, result, v6, a2, a3);
  if (v7)
  {
    uint64_t result = v5;
    if (!a2) {
      return 0;
    }
  }
  else if (!a2)
  {
    uint64_t v5 = 0;
  }
  if (v5 < result) {
    goto LABEL_13;
  }
  return result;
}

uint64_t CKSecretSharing.ShamirShare.serialize()()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v1 = *v0;
  unsigned int v2 = *((_DWORD *)v0 + 1);
  long long v8 = xmmword_1DB0C7A30;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE2F0);
  unint64_t v7 = sub_1DB057070();
  LOBYTE(v5[0]) = v1;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  sub_1DB0C4998();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  unsigned int v4 = bswap32(v2);
  uint64_t v6 = MEMORY[0x1E4FBB2B8];
  unint64_t v7 = MEMORY[0x1E4F27EF0];
  v5[0] = &v4;
  v5[1] = v5;
  __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E4FBB2B8]);
  sub_1DB0C49A8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  sub_1DB0C4A18();
  return v8;
}

unint64_t sub_1DB057070()
{
  unint64_t result = qword_1EA8FE2F8;
  if (!qword_1EA8FE2F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FE2F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE2F8);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t static CKSecretSharing.ShamirShare.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)) {
    return sub_1DB059454(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

uint64_t sub_1DB057190(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)) {
    return sub_1DB059454(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

void *sub_1DB0571C0(uint64_t a1)
{
  unsigned int v2 = v1;
  v1[2] = a1;
  unint64_t v3 = a1 - 0x7FFFFFFF;
  if ((unint64_t)(a1 - 0x7FFFFFFF) >= 0xFFFFFFFF80000003)
  {
    ccss_sizeof_parameters_fix();
    uint64_t v9 = swift_slowAlloc();
    v1[3] = v9;
    int v10 = ccss_shamir_parameters_init();
    if (!v10)
    {
      ccss_sizeof_share();
      v1[4] = swift_slowAlloc();
      ccss_sizeof_generator();
      v1[5] = swift_slowAlloc();
      ccss_shamir_share_init();
      return v2;
    }
    int v7 = v10;
    MEMORY[0x1E0189230](v9, -1, -1);
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    unint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v6 = 3;
    uint64_t v8 = 89;
  }
  else
  {
    sub_1DB0C5288();
    swift_bridgeObjectRelease();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    unint64_t v4 = 0xD000000000000016;
    unint64_t v5 = 0x80000001DB0CB4A0;
    sub_1DB056B5C();
    swift_allocError();
    int v7 = 0;
    *(unsigned char *)uint64_t v6 = 1;
    uint64_t v8 = 78;
  }
  *(_DWORD *)(v6 + 4) = v7;
  *(unsigned char *)(v6 + 8) = v3 < 0xFFFFFFFF80000003;
  *(_WORD *)(v6 + 16) = 256;
  *(_DWORD *)(v6 + 12) = 0;
  *(void *)(v6 + 24) = v8;
  *(void *)(v6 + 32) = 0xD00000000000001FLL;
  *(void *)(v6 + 40) = 0x80000001DB0CB480;
  *(void *)(v6 + 48) = 0xD00000000000006ELL;
  *(void *)(v6 + 56) = 0x80000001DB0CAE20;
  *(void *)(v6 + 64) = v4;
  *(void *)(v6 + 72) = v5;
  swift_willThrow();
  _s32CKShamirShareSharedInternalStateCMa();
  swift_deallocPartialClassInstance();
  return v2;
}

uint64_t sub_1DB0574AC(uint64_t result)
{
  if (result)
  {
    unint64_t result = ccss_shamir_share_generator_deserialize();
    if (result)
    {
      int v1 = result;
      sub_1DB0C5288();
      sub_1DB0C50B8();
      sub_1DB0C53C8();
      sub_1DB0C50B8();
      swift_bridgeObjectRelease();
      sub_1DB056B5C();
      swift_allocError();
      *(unsigned char *)uint64_t v2 = 17;
      *(_DWORD *)(v2 + 4) = v1;
      *(unsigned char *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 12) = 0;
      *(_WORD *)(v2 + 16) = 256;
      *(_OWORD *)(v2 + 24) = xmmword_1DB0C7BB0;
      *(void *)(v2 + 40) = 0xE800000000000000;
      *(void *)(v2 + 48) = 0xD00000000000006ELL;
      *(void *)(v2 + 56) = 0x80000001DB0CAE20;
      *(void *)(v2 + 64) = 0;
      *(void *)(v2 + 72) = 0xE000000000000000;
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB0575FC()
{
  MEMORY[0x1E0189230](v0[3], -1, -1);
  MEMORY[0x1E0189230](v0[4], -1, -1);
  int v1 = (void *)v0[5];
  memset_s(v1, 8uLL, 0, 8uLL);
  MEMORY[0x1E0189230](v1, -1, -1);
  return swift_deallocClassInstance();
}

uint64_t CKSecretSharing.ShamirShareGenerator.init(threshold:secret:supportedPrime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  _s32CKShamirShareSharedInternalStateCMa();
  uint64_t v9 = swift_allocObject();
  sub_1DB0571C0(a1);
  if (v4) {
    return sub_1DB042664(a2, a3);
  }
  v20[0] = v9;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      sub_1DB04239C(a2, a3);
      int v13 = sub_1DB05A350((int)a2, a2 >> 32, a3 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v20, a2, a3);
      goto LABEL_10;
    case 2uLL:
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      sub_1DB04239C(a2, a3);
      swift_retain();
      swift_retain();
      int v13 = sub_1DB05A350(v11, v12, a3 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v20, a2, a3);
      swift_release();
      swift_release();
LABEL_10:
      sub_1DB042664(a2, a3);
      goto LABEL_11;
    case 3uLL:
      *(void *)((char *)&v19 + 6) = 0;
      *(void *)&long long v19 = 0;
      goto LABEL_7;
    default:
      *(void *)&long long v19 = a2;
      WORD4(v19) = a3;
      BYTE10(v19) = BYTE2(a3);
      BYTE11(v19) = BYTE3(a3);
      BYTE12(v19) = BYTE4(a3);
      BYTE13(v19) = BYTE5(a3);
LABEL_7:
      sub_1DB057A90((uint64_t)&v19, a2, a3, &v18);
      sub_1DB042664(a2, a3);
      int v13 = v18;
LABEL_11:
      if (v13 == -120)
      {
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v14 = 1;
        unint64_t v15 = 0xD00000000000004BLL;
        unint64_t v16 = 0x80000001DB0CAF30;
        uint64_t v17 = 152;
      }
      else
      {
        if (!v13)
        {
          uint64_t result = sub_1DB042664(a2, a3);
          *a4 = v9;
          return result;
        }
        *(void *)&long long v19 = 0;
        *((void *)&v19 + 1) = 0xE000000000000000;
        sub_1DB0C5288();
        sub_1DB0C50B8();
        int v18 = v13;
        sub_1DB0C53C8();
        sub_1DB0C50B8();
        swift_bridgeObjectRelease();
        unint64_t v16 = *((void *)&v19 + 1);
        unint64_t v15 = v19;
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v14 = 3;
        uint64_t v17 = 154;
      }
      *(_DWORD *)(v14 + 4) = v13;
      *(unsigned char *)(v14 + 8) = 0;
      *(_WORD *)(v14 + 16) = 256;
      *(_DWORD *)(v14 + 12) = 0;
      *(void *)(v14 + 24) = v17;
      *(void *)(v14 + 32) = 0xD000000000000026;
      *(void *)(v14 + 40) = 0x80000001DB0CAF00;
      *(void *)(v14 + 48) = 0xD00000000000006ELL;
      *(void *)(v14 + 56) = 0x80000001DB0CAE20;
      *(void *)(v14 + 64) = v15;
      *(void *)(v14 + 72) = v16;
      swift_willThrow();
      sub_1DB042664(a2, a3);
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t sub_1DB057A90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unint64_t a3@<X4>, _DWORD *a4@<X8>)
{
  if (ccrng())
  {
    if (!a1) {
      goto LABEL_11;
    }
    switch(a3 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a2), a2)) {
          goto LABEL_7;
        }
        __break(1u);
LABEL_9:
        __break(1u);
        break;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a2 + 24), *(void *)(a2 + 16))) {
          goto LABEL_7;
        }
        goto LABEL_9;
      default:
LABEL_7:
        uint64_t result = ccss_shamir_share_generator_init_with_secrets_less_than_prime();
        *a4 = result;
        return result;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CKSecretSharing.ShamirShareGenerator.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1DB059CBC(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

id sub_1DB057BF0(int a1)
{
  if (!a1)
  {
    sub_1DB056B5C();
    swift_allocError();
    int v6 = 0;
    *(unsigned char *)uint64_t v7 = 1;
    unint64_t v8 = 0xD000000000000022;
    unint64_t v9 = 0x80000001DB0CB290;
    uint64_t v10 = 173;
    goto LABEL_5;
  }
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 32);
  int share = ccss_shamir_share_generator_generate_share();
  if (share)
  {
    int v6 = share;
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 3;
    unint64_t v8 = 0xD000000000000041;
    unint64_t v9 = 0x80000001DB0CB2F0;
    uint64_t v10 = 177;
LABEL_5:
    *(_DWORD *)(v7 + 4) = v6;
    *(unsigned char *)(v7 + 8) = a1 == 0;
    *(_WORD *)(v7 + 16) = 256;
    *(_DWORD *)(v7 + 12) = 0;
    *(void *)(v7 + 24) = v10;
    *(void *)(v7 + 32) = 0xD000000000000020;
    *(void *)(v7 + 40) = 0x80000001DB0CB2C0;
    *(void *)(v7 + 48) = 0xD00000000000006ELL;
    *(void *)(v7 + 56) = 0x80000001DB0CAE20;
    *(void *)(v7 + 64) = v8;
    *(void *)(v7 + 72) = v9;
    return (id)swift_willThrow();
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E500]), sel_initWithParams_share_, *(void *)(v3 + 24), v4);
}

void CKSecretSharing.ShamirShareGenerator.generateShare(shareIndex:)(int a1@<W0>, uint64_t a2@<X8>)
{
  if ((a1 - 1) > 0x7FFFFFFC)
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 1;
    *(_DWORD *)(v13 + 4) = 0;
    *(unsigned char *)(v13 + 8) = 1;
    *(_DWORD *)(v13 + 12) = 0;
    *(_WORD *)(v13 + 16) = 256;
    *(_OWORD *)(v13 + 24) = xmmword_1DB0C7BC0;
    *(void *)(v13 + 40) = 0x80000001DB0CAFC0;
    *(void *)(v13 + 48) = 0xD00000000000006ELL;
    *(void *)(v13 + 56) = 0x80000001DB0CAE20;
    *(void *)(v13 + 64) = 0;
    *(void *)(v13 + 72) = 0xE000000000000000;
    swift_willThrow();
  }
  else
  {
    uint64_t v14 = *v2;
    id v5 = sub_1DB057BF0(a1);
    if (!v3)
    {
      int v6 = v5;
      unsigned int v7 = objc_msgSend(v5, sel_x, v14);
      id v8 = objc_msgSend(v6, sel_y);
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = sub_1DB0C4A08();
        uint64_t v12 = v11;

        *(unsigned char *)a2 = 1;
        *(_DWORD *)(a2 + 4) = v7;
        *(void *)(a2 + 8) = v10;
        *(void *)(a2 + 16) = v12;
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t CKSecretSharing.ShamirShareGenerator.generateShares(_:)(uint64_t result)
{
  if (*(void *)(*(void *)v1 + 16) > result)
  {
    sub_1DB056B5C();
    id v5 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v4 = 5;
    *(_DWORD *)(v4 + 4) = 0;
    *(unsigned char *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    long long v6 = xmmword_1DB0C7BE0;
LABEL_5:
    *(_OWORD *)(v4 + 24) = v6;
    *(void *)(v4 + 40) = 0x80000001DB0CB050;
    *(void *)(v4 + 48) = 0xD00000000000006ELL;
    *(void *)(v4 + 56) = 0x80000001DB0CAE20;
    *(void *)(v4 + 64) = 0;
    *(void *)(v4 + 72) = 0xE000000000000000;
    swift_willThrow();
    goto LABEL_6;
  }
  if (result > 2147483646)
  {
    sub_1DB056B5C();
    id v5 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v4 = 6;
    *(_DWORD *)(v4 + 4) = 0;
    *(unsigned char *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    long long v6 = xmmword_1DB0C7BD0;
    goto LABEL_5;
  }
  if (result)
  {
    unint64_t v9 = (result << 32) | 1;
    swift_retain();
    sub_1DB059A14(v9);
    id v5 = v2;
    if (!v2)
    {
      uint64_t v3 = v10;
      swift_release();
      return v3;
    }
    swift_release();
LABEL_6:
    id v7 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE300);
    if (swift_dynamicCast())
    {

      uint64_t v3 = v13;
      if (v14 == 1)
      {
        if (v13 == 1)
        {
          sub_1DB056B5C();
          swift_allocError();
          *(unsigned char *)uint64_t v8 = 1;
          *(_DWORD *)(v8 + 4) = 0;
          *(unsigned char *)(v8 + 8) = 1;
          *(_DWORD *)(v8 + 12) = 0;
          *(_WORD *)(v8 + 16) = 256;
          *(_OWORD *)(v8 + 24) = xmmword_1DB0C7C00;
          *(void *)(v8 + 40) = 0x80000001DB0CB050;
          *(void *)(v8 + 48) = 0xD00000000000006ELL;
          *(void *)(v8 + 56) = 0x80000001DB0CAE20;
          *(void *)(v8 + 64) = 0xD000000000000049;
          *(void *)(v8 + 72) = 0x80000001DB0CB070;
        }
        else
        {
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v12 = v13;
          *(unsigned char *)(v12 + 4) = 1;
        }
      }
      else
      {
        sub_1DB0C5288();
        sub_1DB0C50B8();
        sub_1DB0C5338();
        sub_1DB0C50B8();
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v11 = 3;
        *(_DWORD *)(v11 + 4) = v13;
        *(unsigned char *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 12) = 0;
        *(_WORD *)(v11 + 16) = 256;
        *(_OWORD *)(v11 + 24) = xmmword_1DB0C7BF0;
        *(void *)(v11 + 40) = 0x80000001DB0CB050;
        *(void *)(v11 + 48) = 0xD00000000000006ELL;
        *(void *)(v11 + 56) = 0x80000001DB0CAE20;
        *(void *)(v11 + 64) = 0;
        *(void *)(v11 + 72) = 0xE000000000000000;
      }
      swift_willThrow();
    }

    return v3;
  }
  __break(1u);
  return result;
}

uint64_t CKSecretSharing.ShamirShareGenerator.serializedData()()
{
  uint64_t v1 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = swift_retain();
  sub_1DB0583EC(v4, (uint64_t)v3);
  if (!v0)
  {
    sub_1DB05A6FC(&qword_1EBE7D820, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
    uint64_t v1 = sub_1DB0C4BB8();
    sub_1DB058E78(v3 + 2);
    sub_1DB05A414((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_1DB0583EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1DB0C4958();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_1DB0C7A30;
  type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  sub_1DB0C4AA8();
  uint64_t v32 = 0;
  int v8 = ccss_sizeof_shamir_share_generator_serialization();
  char v9 = v8;
  uint64_t v28 = a1;
  if (!v8)
  {
    unint64_t v15 = 0xD00000000000003ALL;
    unint64_t v16 = 0x80000001DB0CB210;
    int v14 = -7;
    uint64_t v17 = 303;
    goto LABEL_5;
  }
  uint64_t v27 = v4;
  uint64_t v10 = swift_slowAlloc();
  uint64_t v11 = v32;
  int v12 = ccss_shamir_share_generator_serialize();
  if (v12)
  {
    int v13 = v12;
    MEMORY[0x1E0189230](v10, -1, -1);
    unint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    int v29 = v13;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    int v14 = 0;
    unint64_t v15 = v30;
    unint64_t v16 = v31;
    uint64_t v17 = 311;
LABEL_5:
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v18 = 3;
    *(_DWORD *)(v18 + 4) = v14;
    *(unsigned char *)(v18 + 8) = v9;
    *(_DWORD *)(v18 + 12) = 0;
    *(_WORD *)(v18 + 16) = 256;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = 0x293A5F2874696E69;
    *(void *)(v18 + 40) = 0xE800000000000000;
    *(void *)(v18 + 48) = 0xD00000000000006ELL;
    *(void *)(v18 + 56) = 0x80000001DB0CAE20;
    *(void *)(v18 + 64) = v15;
    *(void *)(v18 + 72) = v16;
    swift_willThrow();
    swift_release();
    return sub_1DB05A414(a2);
  }
  uint64_t v20 = v27;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F27730], v27);
  sub_1DB0C4948();
  if (v11)
  {
    sub_1DB0C48F8();
    swift_allocObject();
    swift_retain();
    uint64_t v21 = sub_1DB0C4888();
    uint64_t v22 = sub_1DB0C0CC8(v21, v11);
    unint64_t v24 = v23;
    swift_release();
  }
  else
  {
    char v25 = (void (*)(uint64_t, void))sub_1DB0C4948();
    v25(v10, 0);
    swift_release();
    swift_release();
    uint64_t v22 = 0;
    unint64_t v24 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  *(_DWORD *)a2 = 1;
  *(_DWORD *)(a2 + 8) = *(void *)(v28 + 16);
  sub_1DB042664(*(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v22;
  *(void *)(a2 + 24) = v24;
  *(_DWORD *)(a2 + 4) = 1;
  return result;
}

void *CKSecretSharing.ShamirShareSecretReconstructor.init(threshold:supportedPrime:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _s32CKShamirShareSharedInternalStateCMa();
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1DB0571C0(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

void sub_1DB058814(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  if (a1 >> 62)
  {
    sub_1DB0C5188();
    uint64_t v6 = sub_1DB0C5368();
    swift_bridgeObjectRelease();
    if (v6 < v4) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < v4)
  {
LABEL_3:
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 5;
    *(_DWORD *)(v5 + 4) = 0;
    *(unsigned char *)(v5 + 8) = 1;
    *(_DWORD *)(v5 + 12) = 0;
    *(_WORD *)(v5 + 16) = 256;
    *(_OWORD *)(v5 + 24) = xmmword_1DB0C7C20;
    *(void *)(v5 + 40) = 0x80000001DB0CB170;
    *(void *)(v5 + 48) = 0xD00000000000006ELL;
    *(void *)(v5 + 56) = 0x80000001DB0CAE20;
    *(void *)(v5 + 64) = 0xD00000000000002DLL;
    *(void *)(v5 + 72) = 0x80000001DB0CB1A0;
    swift_willThrow();
    return;
  }
  ccss_sizeof_share_bag();
  uint64_t v7 = swift_slowAlloc();
  ccss_shamir_share_bag_init();
  uint64_t v8 = *(void *)(v3 + 16);
  sub_1DB0C5188();
  sub_1DB059880(v8, a1);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  int64_t v15 = v14 >> 1;
  if (v12 == v14 >> 1)
  {
LABEL_9:
    swift_unknownObjectRelease();
    unint64_t v18 = qword_1F353B0D8;
    swift_retain();
    sub_1DB048010(v18);
    swift_release();
    MEMORY[0x1E0189230](v7, -1, -1);
  }
  else
  {
    while (v12 < v15)
    {
      id v16 = *(id *)(v10 + 8 * v12);
      objc_msgSend(v16, sel_share);
      int v17 = ccss_shamir_share_bag_add_share();
      if (v17)
      {
        int v19 = v17;
        sub_1DB0C5288();
        sub_1DB0C50B8();
        sub_1DB0C53C8();
        sub_1DB0C50B8();
        swift_bridgeObjectRelease();
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v20 = 3;
        *(_DWORD *)(v20 + 4) = v19;
        *(unsigned char *)(v20 + 8) = 0;
        *(_DWORD *)(v20 + 12) = 0;
        *(_WORD *)(v20 + 16) = 256;
        *(_OWORD *)(v20 + 24) = xmmword_1DB0C7C10;
        *(void *)(v20 + 40) = 0x80000001DB0CB170;
        *(void *)(v20 + 48) = 0xD00000000000006ELL;
        *(void *)(v20 + 56) = 0x80000001DB0CAE20;
        *(void *)(v20 + 64) = 0;
        *(void *)(v20 + 72) = 0xE000000000000000;
        swift_willThrow();
        swift_unknownObjectRelease();

        MEMORY[0x1E0189230](v7, -1, -1);
        return;
      }

      if (v15 == ++v12) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
}

unint64_t CKSecretSharing.ShamirShareSecretReconstructor.recoverSecret(shares:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_retain();
  unint64_t v5 = sub_1DB059B98(a1, v4);
  swift_release();
  sub_1DB058814(v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    unint64_t v5 = sub_1DB048594(v7);
    swift_release();
  }
  return v5;
}

uint64_t sub_1DB058C04@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_1DB04239C(a2, a3);
      uint64_t v10 = (char *)sub_1DB0C48A8();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_1DB0C48D8();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_1DB0C48C8();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1DB058E68);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_1DB042664(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      int v17 = (char *)sub_1DB0C48A8();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_1DB0C48D8();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_1DB0C48C8();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1DB058E78(uint64_t *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1DB0C7A30;
      uint64_t v7 = v2 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_17;
      }
      if (v7 < (int)v2) {
        goto LABEL_30;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v2, sub_1DB0C48D8())) {
        goto LABEL_31;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v19 = sub_1DB0C4888();
      swift_release();
      uint64_t v6 = v19;
LABEL_17:
      if (v7 < (int)v2) {
        goto LABEL_27;
      }
      uint64_t v20 = sub_1DB0C48A8();
      if (!v20) {
        goto LABEL_33;
      }
      uint64_t v21 = v20;
      uint64_t v22 = sub_1DB0C48D8();
      uint64_t v23 = (int)v2 - v22;
      if (__OFSUB__((int)v2, v22)) {
        goto LABEL_29;
      }
      uint64_t v24 = sub_1DB0C48C8();
      if (v24 >= v7 - (int)v2) {
        rsize_t v25 = v7 - (int)v2;
      }
      else {
        rsize_t v25 = v24;
      }
      uint64_t result = memset_s((void *)(v21 + v23), v25, 0, v25);
      unint64_t v18 = v6 | 0x4000000000000000;
      *a1 = v2;
      goto LABEL_24;
    case 2uLL:
      *(void *)&long long __s = *a1;
      *((void *)&__s + 1) = v1 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v8 = *(void *)(__s + 16);
      uint64_t v9 = *(void *)(__s + 24);
      uint64_t v10 = sub_1DB0C48A8();
      if (!v10)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        JUMPOUT(0x1DB05915CLL);
      }
      uint64_t v11 = v10;
      uint64_t v12 = sub_1DB0C48D8();
      uint64_t v13 = v8 - v12;
      if (__OFSUB__(v8, v12))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      BOOL v14 = __OFSUB__(v9, v8);
      int64_t v15 = v9 - v8;
      if (v14)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      uint64_t v16 = sub_1DB0C48C8();
      if (v16 >= v15) {
        rsize_t v17 = v15;
      }
      else {
        rsize_t v17 = v16;
      }
      uint64_t result = memset_s((void *)(v11 + v13), v17, 0, v17);
      unint64_t v18 = *((void *)&__s + 1) | 0x8000000000000000;
      *a1 = __s;
LABEL_24:
      a1[1] = v18;
      return result;
    case 3uLL:
      *(void *)((char *)&__s + 7) = 0;
      *(void *)&long long __s = 0;
      return memset_s(&__s, 0, 0, 0);
    default:
      *(void *)&long long __s = *a1;
      WORD4(__s) = v1;
      BYTE10(__s) = BYTE2(v1);
      BYTE11(__s) = BYTE3(v1);
      BYTE12(__s) = BYTE4(v1);
      BYTE13(__s) = BYTE5(v1);
      BYTE14(__s) = BYTE6(v1);
      uint64_t result = memset_s(&__s, BYTE6(v1), 0, BYTE6(v1));
      unint64_t v5 = DWORD2(__s) | ((unint64_t)BYTE12(__s) << 32) | ((unint64_t)BYTE13(__s) << 40) | ((unint64_t)BYTE14(__s) << 48);
      *a1 = __s;
      a1[1] = v5;
      return result;
  }
}

uint64_t sub_1DB05916C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v5 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_1DB0C48C8();
    sub_1DB0574AC(v5);
    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1DB059220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1DB08F7D0(a1, a3, a4, a5);
  if (a2 > 0)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2) {
      goto LABEL_8;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_8:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v11 = a5 - a4;
  if (!a4) {
    uint64_t v11 = 0;
  }
  if (result < 0 || v11 < result) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1DB0592C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1DB058C04((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1DB05939C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1DB0C48C8();
  sub_1DB058C04(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1DB059454(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1DB0596BCLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_1DB04239C(a3, a4);
                  sub_1DB04239C(a1, a2);
                  char v17 = sub_1DB05939C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_1DB042664(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_1DB04239C(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1DB05939C(v21, v22, v20, a3, a4);
                  sub_1DB042664(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_1DB04239C(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_1DB04239C(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1DB0592C4(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_1DB042664(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t _s32CKShamirShareSharedInternalStateCMa()
{
  return self;
}

void *sub_1DB059710(void *result, void *a2)
{
  if (*result)
  {
    uint64_t result = (void *)ccss_shamir_share_bag_recover_secret();
    if (result)
    {
      int v3 = (int)result;
      sub_1DB0C5288();
      sub_1DB0C50B8();
      sub_1DB0C53C8();
      sub_1DB0C50B8();
      swift_bridgeObjectRelease();
      sub_1DB056B5C();
      swift_allocError();
      *(unsigned char *)uint64_t v4 = 3;
      *(_DWORD *)(v4 + 4) = v3;
      *(unsigned char *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      *(_WORD *)(v4 + 16) = 256;
      *(_OWORD *)(v4 + 24) = xmmword_1DB0C7C30;
      *(void *)(v4 + 40) = 0x80000001DB0CB170;
      *(void *)(v4 + 48) = 0xD00000000000006ELL;
      *(void *)(v4 + 56) = 0x80000001DB0CAE20;
      *(void *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 0xE000000000000000;
      return (void *)swift_willThrow();
    }
    else
    {
      *a2 = qword_1F353B0D8;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB059880(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  sub_1DB0C5188();
  uint64_t v5 = sub_1DB0C5368();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 < 0) {
    uint64_t v6 = v3;
  }
  if (v3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4)
  {
    sub_1DB0C5188();
    uint64_t v9 = sub_1DB0C5368();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    sub_1DB0C5188();
    uint64_t v8 = sub_1DB0C5368();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1DB05A69C();
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      sub_1DB0C52A8();
      uint64_t v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    sub_1DB0C5188();
    uint64_t v12 = sub_1DB0C5378();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v2 & 0xFFFFFFFFFFFFFF8;
    sub_1DB0C5188();
  }
  return v12;
}

void sub_1DB059A14(unint64_t a1)
{
  int v2 = a1;
  unint64_t v16 = HIDWORD(a1);
  if (HIDWORD(a1) < a1) {
    uint64_t v3 = -(uint64_t)(a1 - HIDWORD(a1));
  }
  else {
    uint64_t v3 = (HIDWORD(a1) - a1);
  }
  uint64_t v4 = v3 + 1;
  if (v3 != -1)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    int64_t v5 = v4 & ~(v4 >> 63);
    sub_1DB04C360(0, v5, 0);
    if (v3 >= -1)
    {
      BOOL v6 = 0;
      uint64_t v7 = v20;
      while (v5)
      {
        if (v6) {
          goto LABEL_23;
        }
        CKSecretSharing.ShamirShareGenerator.generateShare(shareIndex:)(v2, (uint64_t)v17);
        if (v1)
        {
          swift_release();
          return;
        }
        char v8 = v17[0];
        int v9 = v18;
        long long v10 = v19;
        uint64_t v20 = v7;
        unint64_t v12 = *(void *)(v7 + 16);
        unint64_t v11 = *(void *)(v7 + 24);
        if (v12 >= v11 >> 1)
        {
          long long v15 = v19;
          sub_1DB04C360((char *)(v11 > 1), v12 + 1, 1);
          long long v10 = v15;
          uint64_t v7 = v20;
        }
        *(void *)(v7 + 16) = v12 + 1;
        uint64_t v13 = v7 + 24 * v12;
        *(unsigned char *)(v13 + 32) = v8;
        *(_DWORD *)(v13 + 36) = v9;
        *(_OWORD *)(v13 + 40) = v10;
        BOOL v6 = v2 == v16;
        if (v2 == v16)
        {
          int v2 = 0;
        }
        else if (__CFADD__(v2++, 1))
        {
          goto LABEL_21;
        }
        --v5;
        if (!--v4) {
          return;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t sub_1DB059B98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    sub_1DB0C5308();
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = (unint64_t *)(a1 + 48);
    do
    {
      uint64_t v8 = *((unsigned int *)v7 - 3);
      uint64_t v9 = *(v7 - 1);
      unint64_t v10 = *v7;
      id v11 = objc_allocWithZone(MEMORY[0x1E4F5E500]);
      sub_1DB04239C(v9, v10);
      unint64_t v12 = (void *)sub_1DB0C49E8();
      objc_msgSend(v11, sel_initWithParams_x_y_, v6, v8, v12);

      sub_1DB042664(v9, v10);
      sub_1DB0C52E8();
      sub_1DB0C5318();
      sub_1DB0C5328();
      sub_1DB0C52F8();
      v7 += 3;
      --v3;
    }
    while (v3);
    return v13;
  }
  return result;
}

uint64_t sub_1DB059CBC(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = sub_1DB0C4AD8();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  sub_1DB04239C(a1, a2);
  sub_1DB0C4AC8();
  sub_1DB05A6FC(&qword_1EBE7D820, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
  uint64_t v9 = v6;
  sub_1DB0C4BA8();
  if (v2)
  {
    sub_1DB042664(a1, a2);
    return v9;
  }
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (*((_DWORD *)v8 + 1) == 1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v28[0] = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1DB04C340(0, *(void *)(v9 + 16) + 1, 1);
      uint64_t v9 = *(void *)&v28[0];
    }
    unint64_t v12 = *(void *)(v9 + 16);
    unint64_t v11 = *(void *)(v9 + 24);
    unint64_t v13 = v12 + 1;
    if (v12 >= v11 >> 1)
    {
      sub_1DB04C340((char *)(v11 > 1), v12 + 1, 1);
      uint64_t v9 = *(void *)&v28[0];
    }
    *(void *)(v9 + 16) = v13;
  }
  else if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
    swift_release();
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 17;
    *(_DWORD *)(v21 + 4) = 0;
    *(unsigned char *)(v21 + 8) = 1;
    *(_DWORD *)(v21 + 12) = 0;
    *(_WORD *)(v21 + 16) = 256;
    *(_OWORD *)(v21 + 24) = xmmword_1DB0C7C40;
    *(void *)(v21 + 40) = 0xE800000000000000;
    *(void *)(v21 + 48) = 0xD00000000000006ELL;
    *(void *)(v21 + 56) = 0x80000001DB0CAE20;
    *(void *)(v21 + 64) = 0xD000000000000078;
    *(void *)(v21 + 72) = 0x80000001DB0CB380;
    goto LABEL_15;
  }
  swift_release();
  int v14 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 != 1)
  {
    *(void *)&v28[0] = 0;
    *((void *)&v28[0] + 1) = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    int v27 = v14;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    uint64_t v19 = *((void *)&v28[0] + 1);
    uint64_t v9 = *(void *)&v28[0];
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v20 = 18;
    *(_DWORD *)(v20 + 4) = 0;
    *(unsigned char *)(v20 + 8) = 1;
    *(_DWORD *)(v20 + 12) = 0;
    *(_WORD *)(v20 + 16) = 256;
    *(_OWORD *)(v20 + 24) = xmmword_1DB0C7C50;
    *(void *)(v20 + 40) = 0xE800000000000000;
    *(void *)(v20 + 48) = 0xD00000000000006ELL;
    *(void *)(v20 + 56) = 0x80000001DB0CAE20;
    *(void *)(v20 + 64) = v9;
    *(void *)(v20 + 72) = v19;
LABEL_15:
    swift_willThrow();
    sub_1DB058E78((uint64_t *)v8 + 2);
    sub_1DB042664(a1, a2);
    sub_1DB05A414((uint64_t)v8);
    return v9;
  }
  uint64_t v15 = *((unsigned int *)v8 + 2);
  _s32CKShamirShareSharedInternalStateCMa();
  uint64_t v9 = swift_allocObject();
  sub_1DB0571C0(v15);
  uint64_t v18 = *((void *)v8 + 2);
  unint64_t v17 = *((void *)v8 + 3);
  unint64_t v16 = (uint64_t *)(v8 + 16);
  switch(v17 >> 62)
  {
    case 1uLL:
      __int16 v26 = (uint64_t *)(v8 + 16);
      if (v18 >> 32 < (int)v18) {
        __break(1u);
      }
      unint64_t v25 = v17 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain_n();
      sub_1DB04239C(v18, v17);
      sub_1DB05916C((int)v18, v18 >> 32);
      goto LABEL_22;
    case 2uLL:
      __int16 v26 = (uint64_t *)(v8 + 16);
      uint64_t v23 = *(void *)(v18 + 16);
      unint64_t v25 = *(void *)(v18 + 24);
      swift_retain_n();
      sub_1DB04239C(v18, v17);
      swift_retain();
      swift_retain();
      sub_1DB05916C(v23, v25);
      swift_release();
      swift_release();
LABEL_22:
      sub_1DB042664(v18, v17);
      swift_release();
      unint64_t v16 = v26;
      goto LABEL_23;
    case 3uLL:
      *(void *)((char *)v28 + 6) = 0;
      *(void *)&v28[0] = 0;
      swift_retain_n();
      goto LABEL_21;
    default:
      *(void *)&v28[0] = *((void *)v8 + 2);
      WORD4(v28[0]) = v17;
      BYTE10(v28[0]) = BYTE2(v17);
      BYTE11(v28[0]) = BYTE3(v17);
      BYTE12(v28[0]) = BYTE4(v17);
      BYTE13(v28[0]) = BYTE5(v17);
      swift_retain_n();
LABEL_21:
      sub_1DB0574AC((uint64_t)v28);
      sub_1DB042664(v18, v17);
      swift_release_n();
LABEL_23:
      sub_1DB058E78(v16);
      sub_1DB042664(a1, a2);
      sub_1DB05A414((uint64_t)v8);
      break;
  }
  return v9;
}

uint64_t sub_1DB05A350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v12 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1DB0C48C8();
  uint64_t result = sub_1DB057A90(v12, a5, a6, &v13);
  if (!v6) {
    return v13;
  }
  return result;
}

uint64_t sub_1DB05A414(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s11ShamirShareVwxx(uint64_t a1)
{
  return sub_1DB042664(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s11ShamirShareVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_1DB04239C(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s11ShamirShareVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_1DB04239C(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_1DB042664(v5, v6);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s11ShamirShareVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1DB042664(v3, v4);
  return a1;
}

uint64_t _s11ShamirShareVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s11ShamirShareVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShare()
{
  return &type metadata for CKSecretSharing.ShamirShare;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShareGenerator()
{
  return &type metadata for CKSecretSharing.ShamirShareGenerator;
}

ValueMetadata *type metadata accessor for CKSecretSharing.ShamirShareSecretReconstructor()
{
  return &type metadata for CKSecretSharing.ShamirShareSecretReconstructor;
}

void *sub_1DB05A65C(void *a1, size_t a2)
{
  return sub_1DB08F804(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1DB05A67C(uint64_t a1, uint64_t a2)
{
  return sub_1DB08F85C(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

unint64_t sub_1DB05A69C()
{
  unint64_t result = qword_1EA8FE308;
  if (!qword_1EA8FE308)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA8FE308);
  }
  return result;
}

void *sub_1DB05A6DC(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0) {
      __break(1u);
    }
    else {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }
  return __src;
}

uint64_t sub_1DB05A6FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB05A744(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE310);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1DB05A7A4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0 || (uint64_t v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a1 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a1;
  }
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    goto LABEL_27;
  }
  double v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14[0] = sub_1DB065640(a2);
  v14[1] = v9;
  sub_1DB09788C(v14, 0);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 - v8 < a2)
  {
    uint64_t v10 = -v8;
    while (1)
    {
      uint64_t v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10)) {
        break;
      }
      if ((unint64_t)(v3 - (a2 + v10) - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_25;
      }
      BOOL v13 = __CFADD__(v10++, 1);
      sub_1DB0C49C8();
      if (v13) {
        return;
      }
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

void sub_1DB05A93C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  id v35 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v37);
  id v15 = objc_msgSend(v14, sel_serializedPublicKey_, 1);
  if (v15)
  {
    unint64_t v16 = v15;
    uint64_t v33 = v11;
    int64_t v34 = v12;
    uint64_t v17 = sub_1DB0C4A08();
    unint64_t v19 = v18;

    uint64_t v20 = sub_1DB05C118(0xD000000000000023, 0x80000001DB0CB8E0);
    unint64_t v22 = v21;
    sub_1DB073FA8(v17, v19, v20, v21);
    uint64_t v24 = v23;
    sub_1DB042664(v20, v22);
    sub_1DB042664(v17, v19);
    id v25 = sub_1DB072A88((uint64_t)v35, v14);
    id v26 = sub_1DB072A88((uint64_t)v13, v24);
    id v27 = sub_1DB07A220(v25, (uint64_t)v26);

    id v28 = sub_1DB072A88((uint64_t)v33, v24);
    id v29 = sub_1DB072A88((uint64_t)v34, v24);
    uint64_t v32 = sub_1DB0657A0(v27, v28, v29);
    uint64_t v31 = v30;

    *a6 = a1;
    a6[1] = v35;
    a6[2] = v33;
    a6[3] = v34;
    a6[4] = v13;
    a6[5] = v27;
    a6[6] = v28;
    a6[7] = v29;
    a6[8] = v14;
    a6[9] = v24;
    a6[10] = v32;
    a6[11] = v31;
  }
  else
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }
}

void sub_1DB05ABD0(id a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v12 = (void *)v5[8];
  id v11 = (void *)v5[9];
  char v13 = sub_1DB05AD94(v12, v11, a1, a2, a3, a4);
  if (!v6)
  {
    if (v13)
    {
      id v27 = (void *)v5[4];
      id v29 = (void *)v5[1];
      unint64_t v19 = (void *)v5[5];
      unint64_t v21 = (void *)v5[3];
      uint64_t v23 = (void *)v5[6];
      uint64_t v24 = (void *)v5[2];
      id v26 = (void *)v5[7];
      uint64_t v32 = v5[10];
      unint64_t v31 = v5[11];
      id v35 = a1;
      id v34 = a2;
      id v33 = a3;
      sub_1DB0C5188();
      id v30 = v29;
      id v28 = v27;
      id v25 = v24;
      id v22 = v21;
      id v20 = v19;
      id v14 = v23;
      id v15 = v26;
      id v16 = v12;
      id v17 = v11;
      sub_1DB04239C(v32, v31);
      sub_1DB05B220(v35, v34, v33, v30, v28, (uint64_t)v25, v22, a5, v20, v14, v15, v16, v17, v32, v31);
    }
    else
    {
      sub_1DB0698FC();
      swift_allocError();
      unsigned char *v18 = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_1DB05AD94(void *a1, void *a2, id a3, void *a4, void *a5, uint64_t a6)
{
  if ((objc_msgSend(a3, sel_isEqual_, a1) & 1) != 0
    || (objc_msgSend(a3, sel_isEqual_, a2) & 1) != 0)
  {
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  sub_1DB0C5188();
  id v17 = sub_1DB07A220(v14, (uint64_t)v14);
  unsigned __int8 v18 = objc_msgSend(v14, sel_isEqual_, v17);
  swift_bridgeObjectRelease();

  if (v18)
  {
LABEL_8:
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  id v19 = v14;
  id v20 = v15;
  id v21 = v16;
  sub_1DB0C5188();
  id v22 = a1;
  id v23 = a2;
  if ((objc_msgSend(v20, sel_isEqual_, v22) & 1) != 0
    || objc_msgSend(v20, sel_isEqual_, v23))
  {

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  id v25 = v19;
  id v26 = v20;
  id v27 = v21;
  sub_1DB0C5188();
  id v28 = sub_1DB07A220(v26, (uint64_t)v26);
  unsigned __int8 v29 = objc_msgSend(v26, sel_isEqual_, v28);

  swift_bridgeObjectRelease_n();
  if (v29) {
    goto LABEL_8;
  }
  *(void *)&long long v57 = 0xD000000000000029;
  *((void *)&v57 + 1) = 0x80000001DB0CB8B0;
  *((void *)&v58 + 1) = MEMORY[0x1E4FBC860];
  *(void *)&long long v59 = MEMORY[0x1E4FBC860];
  *((void *)&v59 + 1) = MEMORY[0x1E4FBC860];
  id v30 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v31 = *((void *)v30 + 2);
  unint64_t v32 = *((void *)v30 + 3);
  unint64_t v33 = v32 >> 1;
  unint64_t v34 = v31 + 1;
  if (v32 >> 1 <= v31)
  {
    unint64_t v47 = *((void *)v30 + 2);
    uint64_t v48 = sub_1DB07E444((char *)(v32 > 1), v31 + 1, 1, v30);
    unint64_t v31 = v47;
    id v30 = v48;
    unint64_t v32 = *((void *)v48 + 3);
    unint64_t v33 = v32 >> 1;
  }
  *((void *)v30 + 2) = v34;
  id v35 = &v30[16 * v31];
  *((void *)v35 + 4) = 12653;
  *((void *)v35 + 5) = 0xE200000000000000;
  unint64_t v36 = v31 + 2;
  if (v33 <= v34)
  {
    unint64_t v54 = v31 + 2;
    unint64_t v49 = v31;
    uint64_t v50 = sub_1DB07E444((char *)(v32 > 1), v31 + 2, 1, v30);
    unint64_t v36 = v54;
    unint64_t v31 = v49;
    id v30 = v50;
  }
  *((void *)v30 + 2) = v36;
  uint64_t v37 = &v30[16 * v34];
  *((void *)v37 + 4) = 12909;
  *((void *)v37 + 5) = 0xE200000000000000;
  *(void *)&long long v58 = v30;
  unint64_t v39 = *((void *)v30 + 2);
  unint64_t v38 = *((void *)v30 + 3);
  uint64_t v40 = v39 - 1;
  unint64_t v41 = v38 >> 1;
  if (v38 >> 1 <= v39)
  {
    unint64_t v55 = v31;
    uint64_t v51 = sub_1DB07E444((char *)(v38 > 1), v39 + 1, 1, v30);
    uint64_t v40 = v39 - 1;
    unint64_t v31 = v55;
    id v30 = v51;
    unint64_t v38 = *((void *)v51 + 3);
    unint64_t v41 = v38 >> 1;
  }
  *((void *)v30 + 2) = v39 + 1;
  int v42 = &v30[16 * v39];
  *((void *)v42 + 4) = 12658;
  *((void *)v42 + 5) = 0xE200000000000000;
  *(void *)&long long v58 = v30;
  unint64_t v43 = *((void *)v30 + 2);
  unint64_t v44 = v43 + 1;
  if (v41 <= v43)
  {
    unint64_t v56 = v31;
    uint64_t v53 = v40;
    uint64_t v52 = sub_1DB07E444((char *)(v38 > 1), v43 + 1, 1, v30);
    uint64_t v40 = v53;
    unint64_t v44 = v43 + 1;
    unint64_t v31 = v56;
    id v30 = v52;
  }
  *((void *)v30 + 2) = v44;
  int64_t v45 = &v30[16 * v43];
  *((void *)v45 + 4) = 12914;
  *((void *)v45 + 5) = 0xE200000000000000;
  *(void *)&long long v58 = v30;
  sub_1DB05DC90((uint64_t)&v57, v22, v23, v25, v26, v31, v40, v43 - 1, *((void *)v30 + 2) - 1);
  long long v60 = v57;
  long long v61 = v58;
  long long v62 = v59;
  char v13 = &v60;
  char v46 = sub_1DB074C90((uint64_t)v27, a6);
  if (v6)
  {
    long long v68 = v60;
    sub_1DB0697C0((uint64_t)&v68);
    uint64_t v69 = v61;
    sub_1DB0697EC((uint64_t)&v69);
    uint64_t v70 = *((void *)&v61 + 1);
    sub_1DB0697EC((uint64_t)&v70);
    uint64_t v71 = v62;
    sub_1DB0697EC((uint64_t)&v71);
    uint64_t v72 = *((void *)&v62 + 1);
    sub_1DB0697EC((uint64_t)&v72);
  }
  else
  {
    LOBYTE(v13) = v46;
    long long v63 = v60;
    sub_1DB0697C0((uint64_t)&v63);
    uint64_t v64 = v61;
    sub_1DB0697EC((uint64_t)&v64);
    uint64_t v65 = *((void *)&v61 + 1);
    sub_1DB0697EC((uint64_t)&v65);
    uint64_t v66 = v62;
    sub_1DB0697EC((uint64_t)&v66);
    uint64_t v67 = *((void *)&v62 + 1);
    sub_1DB0697EC((uint64_t)&v67);
  }
  return v13 & 1;
}

void sub_1DB05B220(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, void *a7@<X7>, void *a8@<X8>, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, unint64_t a15)
{
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v95);
  if (v18)
  {
    id v19 = v18;
    id v80 = sub_1DB072A88((uint64_t)v18, a12);
    id v20 = sub_1DB093C64(v19, (uint64_t)a5);
    id v79 = sub_1DB072A88((uint64_t)v20, a13);

    id v77 = sub_1DB072A88((uint64_t)v19, a10);
    id v76 = sub_1DB072A88((uint64_t)v19, a11);
    id v21 = sub_1DB072A88((uint64_t)v19, a13);
    id v22 = (void *)a6;
    v81 = a1;
    id v23 = sub_1DB072A88(a6, a1);
    id v24 = sub_1DB07A220(a9, (uint64_t)v23);

    id v25 = sub_1DB072A88((uint64_t)a7, a2);
    id v26 = sub_1DB07A220(v24, (uint64_t)v25);

    id v75 = sub_1DB072A88((uint64_t)v19, v26);
    *(void *)&long long v89 = 0xD00000000000002ALL;
    *((void *)&v89 + 1) = 0x80000001DB0CB880;
    *(void *)&long long v90 = MEMORY[0x1E4FBC860];
    *(void *)&long long v91 = MEMORY[0x1E4FBC860];
    *((void *)&v91 + 1) = MEMORY[0x1E4FBC860];
    uint64_t v92 = MEMORY[0x1E4FBC860];
    id v27 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    if (v29 >= v28 >> 1) {
      id v27 = sub_1DB07E444((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    v78 = v21;
    *((void *)v27 + 2) = v29 + 1;
    id v30 = &v27[16 * v29];
    *((void *)v30 + 4) = 12408;
    *((void *)v30 + 5) = 0xE200000000000000;
    *((void *)&v90 + 1) = v27;
    id v31 = a4;
    MEMORY[0x1E0188080]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    uint64_t v67 = v31;
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v71 = *(void *)(v90 + 16);
    unint64_t v33 = *((void *)v27 + 2);
    unint64_t v32 = *((void *)v27 + 3);
    if (v33 >= v32 >> 1) {
      id v27 = sub_1DB07E444((char *)(v32 > 1), v33 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v33 + 1;
    unint64_t v34 = &v27[16 * v33];
    *((void *)v34 + 4) = 12664;
    *((void *)v34 + 5) = 0xE200000000000000;
    *((void *)&v90 + 1) = v27;
    id v35 = v22;
    MEMORY[0x1E0188080]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v69 = *(void *)(v90 + 16);
    unint64_t v37 = *((void *)v27 + 2);
    unint64_t v36 = *((void *)v27 + 3);
    if (v37 >= v36 >> 1) {
      id v27 = sub_1DB07E444((char *)(v36 > 1), v37 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v37 + 1;
    unint64_t v38 = &v27[16 * v37];
    *((void *)v38 + 4) = 12920;
    *((void *)v38 + 5) = 0xE200000000000000;
    *((void *)&v90 + 1) = v27;
    id v39 = a7;
    MEMORY[0x1E0188080]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    v86 = v39;
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v68 = *(void *)(v90 + 16);
    unint64_t v41 = *((void *)v27 + 2);
    unint64_t v40 = *((void *)v27 + 3);
    if (v41 >= v40 >> 1) {
      id v27 = sub_1DB07E444((char *)(v40 > 1), v41 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v41 + 1;
    int v42 = &v27[16 * v41];
    *((void *)v42 + 4) = 0x69646E696C423078;
    *((void *)v42 + 5) = 0xEA0000000000676ELL;
    *((void *)&v90 + 1) = v27;
    id v43 = a5;
    MEMORY[0x1E0188080]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    uint64_t v66 = v43;
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v44 = *(void *)(v90 + 16);
    unint64_t v46 = *((void *)v27 + 2);
    unint64_t v45 = *((void *)v27 + 3);
    if (v46 >= v45 >> 1) {
      id v27 = sub_1DB07E444((char *)(v45 > 1), v46 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v46 + 1;
    unint64_t v47 = &v27[16 * v46];
    *((void *)v47 + 4) = 98;
    *((void *)v47 + 5) = 0xE100000000000000;
    *((void *)&v90 + 1) = v27;
    id v48 = v19;
    MEMORY[0x1E0188080]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v74 = *(void *)(v90 + 16);
    id v49 = sub_1DB093C64(v48, (uint64_t)v35);
    unint64_t v51 = *((void *)v27 + 2);
    unint64_t v50 = *((void *)v27 + 3);
    if (v51 >= v50 >> 1) {
      id v27 = sub_1DB07E444((char *)(v50 > 1), v51 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v51 + 1;
    uint64_t v52 = &v27[16 * v51];
    *((void *)v52 + 4) = 12660;
    *((void *)v52 + 5) = 0xE200000000000000;
    *((void *)&v90 + 1) = v27;
    id v53 = v49;
    MEMORY[0x1E0188080]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v54 = *(void *)(v90 + 16);

    id v55 = sub_1DB093C64(v48, (uint64_t)v86);
    unint64_t v57 = *((void *)v27 + 2);
    unint64_t v56 = *((void *)v27 + 3);
    if (v57 >= v56 >> 1) {
      id v27 = sub_1DB07E444((char *)(v56 > 1), v57 + 1, 1, v27);
    }
    uint64_t v70 = v69 - 1;
    uint64_t v72 = v71 - 1;
    uint64_t v58 = v44 - 1;
    uint64_t v59 = v54 - 1;
    *((void *)v27 + 2) = v57 + 1;
    long long v60 = &v27[16 * v57];
    *((void *)v60 + 4) = 12916;
    *((void *)v60 + 5) = 0xE200000000000000;
    *((void *)&v90 + 1) = v27;
    id v61 = v55;
    MEMORY[0x1E0188080]();
    if (*(void *)(v90 + 16) >= *(void *)(v90 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v62 = *(void *)(v90 + 16);

    sub_1DB065D68((uint64_t)&v89, v81, a2, a12, a13, v80, v75, a9, a10, a11, v79, v77, v76, v78, v72, v58, v70, v68 - 1, v74 - 1,
      v59,
      v62 - 1);
    v93[0] = v89;
    v93[1] = v90;
    v93[2] = v91;
    uint64_t v94 = v92;
    long long v63 = sub_1DB074B34();
    if (v83)
    {
      sub_1DB069950((uint64_t)v93);
      sub_1DB042664(a14, a15);

      swift_bridgeObjectRelease();
    }
    else
    {
      v84 = v63;
      uint64_t v73 = v64;
      sub_1DB069950((uint64_t)v93);

      swift_bridgeObjectRelease();
      *a8 = v80;
      a8[1] = v75;
      a8[2] = a9;
      a8[3] = a10;
      a8[4] = a11;
      a8[5] = v79;
      a8[6] = v77;
      a8[7] = v76;
      a8[8] = v78;
      a8[9] = a14;
      a8[11] = v84;
      a8[12] = v73;
      a8[10] = a15;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1DB05BAF0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7, void *a8, void *a9)
{
  if ((sub_1DB059454(*(void *)(v9 + 24), *(void *)(v9 + 32), a6, a7) & 1) == 0) {
    goto LABEL_3;
  }
  unint64_t v41 = a8;
  int v42 = a4;
  id v17 = *(void **)v9;
  sub_1DB0696E0(v9);
  id v18 = sub_1DB07A220(v17, (uint64_t)v17);
  unsigned __int8 v19 = objc_msgSend(v18, sel_isEqual_, v17);

  sub_1DB069750(v9);
  if ((v19 & 1) == 0)
  {
    id v22 = sub_1DB072A88(a1, v17);
    unint64_t v40 = *(void **)(v9 + 16);
    id v23 = sub_1DB072A88(a2, v40);
    id v24 = sub_1DB07A220(v22, (uint64_t)v23);

    id v25 = sub_1DB093C64(a3, a5);
    id v26 = sub_1DB072A88((uint64_t)v25, v17);

    id v27 = sub_1DB07A220(v24, (uint64_t)v26);
    unint64_t v28 = *(void **)(v9 + 8);
    id v39 = sub_1DB07A33C(v27, (uint64_t)v28);

    *(void *)&long long v43 = 0xD000000000000025;
    *((void *)&v43 + 1) = 0x80000001DB0CB800;
    *((void *)&v44 + 1) = MEMORY[0x1E4FBC860];
    *(void *)&long long v45 = MEMORY[0x1E4FBC860];
    *((void *)&v45 + 1) = MEMORY[0x1E4FBC860];
    unint64_t v29 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v31 = *((void *)v29 + 2);
    unint64_t v30 = *((void *)v29 + 3);
    unint64_t v32 = v30 >> 1;
    unint64_t v33 = v31 + 1;
    if (v30 >> 1 <= v31)
    {
      unint64_t v29 = sub_1DB07E444((char *)(v30 > 1), v31 + 1, 1, v29);
      unint64_t v30 = *((void *)v29 + 3);
      unint64_t v32 = v30 >> 1;
    }
    *((void *)v29 + 2) = v33;
    unint64_t v34 = &v29[16 * v31];
    *((void *)v34 + 4) = 12653;
    *((void *)v34 + 5) = 0xE200000000000000;
    if (v32 <= v33) {
      unint64_t v29 = sub_1DB07E444((char *)(v30 > 1), v31 + 2, 1, v29);
    }
    *((void *)v29 + 2) = v31 + 2;
    id v35 = &v29[16 * v33];
    *((void *)v35 + 4) = 122;
    *((void *)v35 + 5) = 0xE100000000000000;
    *(void *)&long long v44 = v29;
    unint64_t v37 = *((void *)v29 + 2);
    unint64_t v36 = *((void *)v29 + 3);
    if (v37 >= v36 >> 1) {
      unint64_t v29 = sub_1DB07E444((char *)(v36 > 1), v37 + 1, 1, v29);
    }
    *((void *)v29 + 2) = v37 + 1;
    unint64_t v38 = &v29[16 * v37];
    *((void *)v38 + 4) = 29229;
    *((void *)v38 + 5) = 0xE200000000000000;
    *(void *)&long long v44 = v29;
    sub_1DB0638DC((uint64_t)&v43, v41, a9, v17, v28, v40, v39, v42, v31, v37 - 1, *((void *)v29 + 2) - 1);
    long long v46 = v43;
    long long v47 = v44;
    long long v48 = v45;
    char v20 = sub_1DB074C90(*(void *)(v9 + 40), *(void *)(v9 + 48));

    if (v10)
    {
      long long v54 = v46;
      sub_1DB0697C0((uint64_t)&v54);
      uint64_t v55 = v47;
      sub_1DB0697EC((uint64_t)&v55);
      uint64_t v56 = *((void *)&v47 + 1);
      sub_1DB0697EC((uint64_t)&v56);
      uint64_t v57 = v48;
      sub_1DB0697EC((uint64_t)&v57);
      uint64_t v58 = *((void *)&v48 + 1);
      sub_1DB0697EC((uint64_t)&v58);
    }
    else
    {
      long long v49 = v46;
      sub_1DB0697C0((uint64_t)&v49);
      uint64_t v50 = v47;
      sub_1DB0697EC((uint64_t)&v50);
      uint64_t v51 = *((void *)&v47 + 1);
      sub_1DB0697EC((uint64_t)&v51);
      uint64_t v52 = v48;
      sub_1DB0697EC((uint64_t)&v52);
      uint64_t v53 = *((void *)&v48 + 1);
      sub_1DB0697EC((uint64_t)&v53);
    }
  }
  else
  {
LABEL_3:
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_1DB05BE64(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  v28[3] = MEMORY[0x1E4F277C0];
  v28[4] = MEMORY[0x1E4F277B0];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1DB04239C(a1, a2);
      sub_1DB04239C(v5, v6);
      uint64_t v8 = (unsigned char *)sub_1DB0C48A8();
      if (v8)
      {
        uint64_t v9 = sub_1DB0C48D8();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_1DB0C48C8();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      id v12 = &v8[v11];
      if (v8) {
        char v13 = v12;
      }
      else {
        char v13 = 0;
      }
      sub_1DB0C07E8(v8, v13, &v27);
      sub_1DB042664(v5, v6);
LABEL_27:
      sub_1DB042664(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1DB04239C(a1, a2);
      swift_retain();
      swift_retain();
      id v16 = (unsigned char *)sub_1DB0C48A8();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_1DB0C48D8();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_1DB0C48C8();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      id v22 = &v16[v21];
      if (v16) {
        id v23 = v22;
      }
      else {
        id v23 = 0;
      }
      sub_1DB0C07E8(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1DB04239C(a1, a2);
      double v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1DB04239C(a1, a2);
      double v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_1DB0C07E8(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_1DB05C118(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  sub_1DB0C5188();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7D840);
  if (swift_dynamicCast())
  {
    sub_1DB069BC8(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    sub_1DB0C4908();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_1DB069AE8((uint64_t)v38);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      double v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_1DB0C52D8();
      }
      if (v4) {
        unint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        unint64_t v6 = 0;
      }
      double v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_1DB0655DC(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    uint64_t v11 = sub_1DB0C50C8();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_1DB065640(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x1F4188790](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)sub_1DB065088((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1DB069B48);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        sub_1DB0C4998();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_1DB0654D4(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = sub_1DB0C50F8();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = sub_1DB0C52D8();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_1DB0654D4(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = sub_1DB0C50D8();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      sub_1DB0C49A8();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    sub_1DB0C49A8();
    sub_1DB069BB4(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_1DB069BB4((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_1DB05C640(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1E4FBB2B8];
  v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = a1;
  v8[1] = a2;
  unint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  unint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1DB0C0A50(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1DB0C0B14((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_1DB0C0B90((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_1DB05C6FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X5>, void *a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>, void *a9, void *a10)
{
  char v17 = sub_1DB066DF8(a2, a3, a9, a10);
  if (!v10)
  {
    uint64_t v28 = a4;
    uint64_t v27 = a8;
    if (v17)
    {
      id v18 = sub_1DB07A33C(*(void **)(a1 + 8), *(void *)(a1 + 40));
      id v19 = sub_1DB072A88((uint64_t)a6, *(id *)(a1 + 48));
      id v20 = sub_1DB07A33C(v18, (uint64_t)v19);

      id v21 = sub_1DB072A88((uint64_t)a7, *(id *)(a1 + 56));
      id v26 = sub_1DB07A33C(v20, (uint64_t)v21);

      swift_bridgeObjectRelease();
      id v33 = *(id *)a1;
      id v32 = *(id *)(a1 + 24);
      long long v31 = *(_OWORD *)(a1 + 72);
      sub_1DB069A20(&v33);
      sub_1DB069A20(&v32);
      sub_1DB069818((uint64_t)&v31);
      uint64_t result = sub_1DB069848(a1);
      id v23 = v33;
      *(void *)uint64_t v27 = a5;
      *(void *)(v27 + 8) = v23;
      id v24 = v32;
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = v24;
      *(_OWORD *)(v27 + 32) = v31;
      return result;
    }
    sub_1DB0698FC();
    swift_allocError();
    *unint64_t v25 = 0;
    swift_willThrow();
  }

  swift_bridgeObjectRelease();
  return sub_1DB069848(a1);
}

void sub_1DB05C8E4(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  sub_1DB0C4F38();
  id v13 = a1;
  id v12 = a2;
  id v8 = a3;
  sub_1DB067970(v4);
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v15);
  if (v9)
  {
    uint64_t v10 = v9;
    sub_1DB0C4D78();
    swift_dynamicCast();
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v15);
    if (v11)
    {
      sub_1DB05CA78(v4, v10, v11, v13, v12, v8, a4);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

double sub_1DB05CA78@<D0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  id v13 = sub_1DB072A88((uint64_t)a2, *(id *)(a1 + 8));
  unint64_t v14 = *(void **)a1;
  uint64_t v55 = v13;
  id v15 = sub_1DB072A88(*(void *)a1, v13);
  id v16 = sub_1DB072A88((uint64_t)a4, a6);
  id v53 = sub_1DB07A220(v15, (uint64_t)v16);

  id v17 = sub_1DB072A88((uint64_t)a2, *(id *)(a1 + 16));
  id v18 = sub_1DB072A88((uint64_t)a3, a5);
  uint64_t v50 = v17;
  id v51 = sub_1DB07A220(v17, (uint64_t)v18);

  long long v46 = *(void **)(a1 + 24);
  uint64_t v47 = a1;
  id v19 = sub_1DB072A88((uint64_t)a4, v46);
  id v63 = a3;
  id v20 = sub_1DB072A88((uint64_t)a3, a5);
  id v48 = sub_1DB07A33C(v19, (uint64_t)v20);

  *(void *)&long long v56 = 0xD000000000000025;
  *((void *)&v56 + 1) = 0x80000001DB0CB800;
  *(void *)&long long v57 = MEMORY[0x1E4FBC860];
  *(void *)&long long v58 = MEMORY[0x1E4FBC860];
  *((void *)&v58 + 1) = MEMORY[0x1E4FBC860];
  uint64_t v59 = MEMORY[0x1E4FBC860];
  id v21 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v23 = *((void *)v21 + 2);
  unint64_t v22 = *((void *)v21 + 3);
  if (v23 >= v22 >> 1) {
    id v21 = sub_1DB07E444((char *)(v22 > 1), v23 + 1, 1, v21);
  }
  long long v54 = a6;
  *((void *)v21 + 2) = v23 + 1;
  id v24 = &v21[16 * v23];
  *((void *)v24 + 4) = 12653;
  *((void *)v24 + 5) = 0xE200000000000000;
  *((void *)&v57 + 1) = v21;
  id v25 = v14;
  MEMORY[0x1E0188080]();
  if (*(void *)(v57 + 16) >= *(void *)(v57 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v26 = *(void *)(v57 + 16);
  unint64_t v28 = *((void *)v21 + 2);
  unint64_t v27 = *((void *)v21 + 3);
  if (v28 >= v27 >> 1) {
    id v21 = sub_1DB07E444((char *)(v27 > 1), v28 + 1, 1, v21);
  }
  uint64_t v52 = a5;
  *((void *)v21 + 2) = v28 + 1;
  unint64_t v29 = &v21[16 * v28];
  *((void *)v29 + 4) = 122;
  *((void *)v29 + 5) = 0xE100000000000000;
  *((void *)&v57 + 1) = v21;
  id v30 = a4;
  MEMORY[0x1E0188080]();
  if (*(void *)(v57 + 16) >= *(void *)(v57 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v31 = *(void *)(v57 + 16);
  id v32 = (void *)sub_1DB07A624((uint64_t)v63);
  unint64_t v34 = *((void *)v21 + 2);
  unint64_t v33 = *((void *)v21 + 3);
  if (v34 >= v33 >> 1) {
    id v21 = sub_1DB07E444((char *)(v33 > 1), v34 + 1, 1, v21);
  }
  uint64_t v35 = v26 - 1;
  uint64_t v36 = v31 - 1;
  *((void *)v21 + 2) = v34 + 1;
  unint64_t v37 = &v21[16 * v34];
  *((void *)v37 + 4) = 29229;
  *((void *)v37 + 5) = 0xE200000000000000;
  *((void *)&v57 + 1) = v21;
  id v38 = v32;
  MEMORY[0x1E0188080]();
  if (*(void *)(v57 + 16) >= *(void *)(v57 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v39 = *(void *)(v57 + 16);

  sub_1DB063600((uint64_t)&v56, v52, v54, v55, v51, v53, v48, v46, v35, v36, v39 - 1);
  v61[0] = v56;
  v61[1] = v57;
  v61[2] = v58;
  uint64_t v62 = v59;
  long long v40 = sub_1DB074B34();
  if (v49)
  {
    sub_1DB069950((uint64_t)v61);

    sub_1DB0679CC(v47);
  }
  else
  {
    uint64_t v43 = v40;
    uint64_t v44 = v41;
    sub_1DB069950((uint64_t)v61);

    long long v60 = *(_OWORD *)(v47 + 32);
    sub_1DB069818((uint64_t)&v60);
    sub_1DB0679CC(v47);
    *(void *)a7 = v55;
    *(void *)(a7 + 8) = v51;
    *(void *)(a7 + 16) = v53;
    *(void *)(a7 + 40) = v43;
    *(void *)(a7 + 48) = v44;
    double result = *(double *)&v60;
    *(_OWORD *)(a7 + 24) = v60;
  }
  return result;
}

void sub_1DB05CF00(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  unint64_t v38 = a2;
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v30);
  if (!v7)
  {
    __break(1u);
    goto LABEL_6;
  }
  id v8 = v7;
  uint64_t v28 = a3;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v30);
  id v10 = objc_msgSend(v9, sel_serializedPublicKey_, 1);
  if (!v10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v11 = v10;
  uint64_t v12 = sub_1DB0C4A08();
  unint64_t v14 = v13;

  uint64_t v15 = sub_1DB05C118(0xD000000000000023, 0x80000001DB0CB8E0);
  unint64_t v17 = v16;
  sub_1DB073FA8(v12, v14, v15, v16);
  if (!v4)
  {
    id v19 = v18;
    sub_1DB042664(v15, v17);
    sub_1DB042664(v12, v14);
    sub_1DB05C8E4(v8, v9, v19, (uint64_t)&v34);
    id v20 = v34;
    id v21 = *v5;
    id v22 = v8;
    id v23 = v20;
    id v24 = v19;
    unint64_t v25 = v38;
    sub_1DB04239C(a1, v38);
    sub_1DB05D240(v21, (uint64_t)v22, a1, v25, v23, v24, &v30);

    uint64_t v26 = v30;
    *(void *)uint64_t v28 = v23;
    *(_OWORD *)(v28 + 8) = v35;
    *(_OWORD *)(v28 + 24) = v36;
    *(_OWORD *)(v28 + 40) = v37;
    *(void *)(v28 + 56) = v26;
    long long v27 = v32;
    *(_OWORD *)(v28 + 64) = v31;
    *(_OWORD *)(v28 + 80) = v27;
    *(_OWORD *)(v28 + 96) = v33;
    return;
  }
LABEL_7:
  swift_unexpectedError();
  __break(1u);
}

void sub_1DB05D240(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  id v51 = a5;
  uint64_t v13 = sub_1DB05C118(0xD00000000000001CLL, 0x80000001DB0CB830);
  unint64_t v15 = v14;
  uint64_t v43 = a3;
  unint64_t v44 = a4;
  sub_1DB073FA8(a3, a4, v13, v14);
  if (v7)
  {
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    unint64_t v17 = v16;
    sub_1DB042664(v13, v15);
    uint64_t v41 = v17;
    id v42 = sub_1DB072A88((uint64_t)a1, v17);
    id v18 = sub_1DB072A88((uint64_t)a1, v51);
    long long v40 = (void *)a2;
    id v19 = sub_1DB072A88(a2, a6);
    id v20 = sub_1DB07A220(v18, (uint64_t)v19);

    *(void *)&long long v45 = 0xD00000000000001CLL;
    *((void *)&v45 + 1) = 0x80000001DB0CB830;
    *(void *)&long long v46 = MEMORY[0x1E4FBC860];
    *(void *)&long long v47 = MEMORY[0x1E4FBC860];
    *((void *)&v47 + 1) = MEMORY[0x1E4FBC860];
    uint64_t v48 = MEMORY[0x1E4FBC860];
    id v21 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v23 = *((void *)v21 + 2);
    unint64_t v22 = *((void *)v21 + 3);
    if (v23 >= v22 >> 1) {
      id v21 = sub_1DB07E444((char *)(v22 > 1), v23 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v23 + 1;
    id v24 = &v21[16 * v23];
    *((void *)v24 + 4) = 12653;
    *((void *)v24 + 5) = 0xE200000000000000;
    *((void *)&v46 + 1) = v21;
    id v25 = a1;
    MEMORY[0x1E0188080]();
    if (*(void *)(v46 + 16) >= *(void *)(v46 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    uint64_t v39 = v25;
    sub_1DB0C51C8();
    sub_1DB0C5198();
    uint64_t v26 = *(void *)(v46 + 16) - 1;
    unint64_t v28 = *((void *)v21 + 2);
    unint64_t v27 = *((void *)v21 + 3);
    unint64_t v29 = v20;
    if (v28 >= v27 >> 1) {
      id v21 = sub_1DB07E444((char *)(v27 > 1), v28 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v28 + 1;
    uint64_t v30 = &v21[16 * v28];
    *((void *)v30 + 4) = 122;
    *((void *)v30 + 5) = 0xE100000000000000;
    *((void *)&v46 + 1) = v21;
    id v31 = v40;
    MEMORY[0x1E0188080]();
    if (*(void *)(v46 + 16) >= *(void *)(v46 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    sub_1DB0C51C8();
    sub_1DB0C5198();
    long long v32 = a6;
    long long v33 = a6;
    unint64_t v34 = v51;
    sub_1DB063E3C((uint64_t)&v45, v33, v41, v42, v51, v29, v26, *(void *)(v46 + 16) - 1);
    v49[0] = v45;
    v49[1] = v46;
    v49[2] = v47;
    uint64_t v50 = v48;
    long long v35 = sub_1DB074B34();
    uint64_t v37 = v36;
    sub_1DB069950((uint64_t)v49);

    a7[4] = v34;
    a7[5] = v35;
    a7[6] = v37;
    *a7 = v42;
    a7[1] = v43;
    a7[2] = v44;
    a7[3] = v29;
  }
}

void sub_1DB05D5C0(void *a1, void *a2, void *a3, uint64_t a4, id a5, void *a6)
{
  id v12 = sub_1DB072A88((uint64_t)a1, a5);
  id v13 = sub_1DB072A88((uint64_t)a3, a6);
  id v45 = sub_1DB07A220(v12, (uint64_t)v13);

  id v46 = a5;
  id v14 = sub_1DB072A88((uint64_t)a2, a5);
  id v42 = (void *)a4;
  id v53 = a6;
  id v15 = sub_1DB072A88(a4, a6);
  id v44 = sub_1DB07A220(v14, (uint64_t)v15);

  *(void *)&long long v47 = 0xD000000000000029;
  *((void *)&v47 + 1) = 0x80000001DB0CB8B0;
  *(void *)&long long v48 = MEMORY[0x1E4FBC860];
  *(void *)&long long v49 = MEMORY[0x1E4FBC860];
  *((void *)&v49 + 1) = MEMORY[0x1E4FBC860];
  uint64_t v50 = MEMORY[0x1E4FBC860];
  unint64_t v16 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v18 = *((void *)v16 + 2);
  unint64_t v17 = *((void *)v16 + 3);
  if (v18 >= v17 >> 1) {
    unint64_t v16 = sub_1DB07E444((char *)(v17 > 1), v18 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v18 + 1;
  id v19 = &v16[16 * v18];
  *((void *)v19 + 4) = 12653;
  *((void *)v19 + 5) = 0xE200000000000000;
  *((void *)&v48 + 1) = v16;
  id v20 = a1;
  MEMORY[0x1E0188080]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  uint64_t v41 = v20;
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v21 = *(void *)(v48 + 16);
  unint64_t v23 = *((void *)v16 + 2);
  unint64_t v22 = *((void *)v16 + 3);
  if (v23 >= v22 >> 1) {
    unint64_t v16 = sub_1DB07E444((char *)(v22 > 1), v23 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v23 + 1;
  id v24 = &v16[16 * v23];
  *((void *)v24 + 4) = 12909;
  *((void *)v24 + 5) = 0xE200000000000000;
  *((void *)&v48 + 1) = v16;
  id v25 = a2;
  MEMORY[0x1E0188080]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  long long v40 = v25;
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v26 = *(void *)(v48 + 16);
  unint64_t v28 = *((void *)v16 + 2);
  unint64_t v27 = *((void *)v16 + 3);
  if (v28 >= v27 >> 1) {
    unint64_t v16 = sub_1DB07E444((char *)(v27 > 1), v28 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v28 + 1;
  unint64_t v29 = &v16[16 * v28];
  *((void *)v29 + 4) = 12658;
  *((void *)v29 + 5) = 0xE200000000000000;
  *((void *)&v48 + 1) = v16;
  id v30 = a3;
  MEMORY[0x1E0188080]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  uint64_t v31 = v21 - 1;
  uint64_t v32 = v26 - 1;
  uint64_t v39 = v30;
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v33 = *(void *)(v48 + 16) - 1;
  unint64_t v35 = *((void *)v16 + 2);
  unint64_t v34 = *((void *)v16 + 3);
  if (v35 >= v34 >> 1) {
    unint64_t v16 = sub_1DB07E444((char *)(v34 > 1), v35 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v35 + 1;
  uint64_t v36 = &v16[16 * v35];
  *((void *)v36 + 4) = 12914;
  *((void *)v36 + 5) = 0xE200000000000000;
  *((void *)&v48 + 1) = v16;
  id v37 = v42;
  MEMORY[0x1E0188080]();
  if (*(void *)(v48 + 16) >= *(void *)(v48 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  sub_1DB0C51C8();
  sub_1DB0C5198();
  unint64_t v38 = v53;
  sub_1DB05DA38((uint64_t)&v47, v46, v53, v45, v44, v31, v32, v33, *(void *)(v48 + 16) - 1);
  v51[0] = v47;
  v51[1] = v48;
  v51[2] = v49;
  uint64_t v52 = v50;
  sub_1DB074B34();
  sub_1DB069950((uint64_t)v51);
  if (v43)
  {
  }
}

uint64_t sub_1DB05DA38(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v15 = a2;
  uint64_t v16 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004772, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004872, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_1DB07B7E8(0x636E45316DLL, 0xE500000000000000, v19, a1);

  id v21 = a5;
  uint64_t v32 = sub_1DB07B7E8(0x636E45326DLL, 0xE500000000000000, v21, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1DB0C7D30;
  *(void *)(v22 + 32) = a6;
  *(void *)(v22 + 40) = v16;
  *(void *)(v22 + 48) = a8;
  *(void *)(v22 + 56) = v18;
  unint64_t v23 = *(void **)(a1 + 48);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v23 = sub_1DB07E548(0, v23[2] + 1, 1, v23);
  }
  unint64_t v25 = v23[2];
  unint64_t v24 = v23[3];
  if (v25 >= v24 >> 1) {
    unint64_t v23 = sub_1DB07E548((void *)(v24 > 1), v25 + 1, 1, v23);
  }
  v23[2] = v25 + 1;
  uint64_t v26 = &v23[2 * v25];
  v26[4] = v20;
  v26[5] = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v23;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1DB0C7D30;
  *(void *)(v27 + 32) = a7;
  *(void *)(v27 + 40) = v16;
  *(void *)(v27 + 48) = a9;
  *(void *)(v27 + 56) = v18;
  unint64_t v28 = v23[2];
  unint64_t v29 = v23[3];
  sub_1DB0C5188();
  if (v28 >= v29 >> 1) {
    unint64_t v23 = sub_1DB07E548((void *)(v29 > 1), v28 + 1, 1, v23);
  }
  v23[2] = v28 + 1;
  id v30 = &v23[2 * v28];
  v30[4] = v32;
  v30[5] = v27;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v23;
  return result;
}

uint64_t sub_1DB05DC90(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v15 = a2;
  uint64_t v16 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004772, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004872, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_1DB07B95C(0x636E45316DLL, 0xE500000000000000, v19, a1);

  id v21 = a5;
  uint64_t v32 = sub_1DB07B95C(0x636E45326DLL, 0xE500000000000000, v21, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1DB0C7D30;
  *(void *)(v22 + 32) = a6;
  *(void *)(v22 + 40) = v16;
  *(void *)(v22 + 48) = a8;
  *(void *)(v22 + 56) = v18;
  unint64_t v23 = *(void **)(a1 + 40);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v23 = sub_1DB07E548(0, v23[2] + 1, 1, v23);
  }
  unint64_t v25 = v23[2];
  unint64_t v24 = v23[3];
  if (v25 >= v24 >> 1) {
    unint64_t v23 = sub_1DB07E548((void *)(v24 > 1), v25 + 1, 1, v23);
  }
  v23[2] = v25 + 1;
  uint64_t v26 = &v23[2 * v25];
  v26[4] = v20;
  v26[5] = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v23;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1DB0C7D30;
  *(void *)(v27 + 32) = a7;
  *(void *)(v27 + 40) = v16;
  *(void *)(v27 + 48) = a9;
  *(void *)(v27 + 56) = v18;
  unint64_t v28 = v23[2];
  unint64_t v29 = v23[3];
  sub_1DB0C5188();
  if (v28 >= v29 >> 1) {
    unint64_t v23 = sub_1DB07E548((void *)(v29 > 1), v28 + 1, 1, v23);
  }
  v23[2] = v28 + 1;
  id v30 = &v23[2 * v28];
  v30[4] = v32;
  v30[5] = v27;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v23;
  return result;
}

uint64_t sub_1DB05DEE8(uint64_t a1, unint64_t a2)
{
  v10[5] = *MEMORY[0x1E4F143B8];
  v10[3] = MEMORY[0x1E4F277C0];
  v10[4] = MEMORY[0x1E4F277B0];
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_1DB04239C(a1, a2);
      sub_1DB04239C(v5, v6);
      sub_1DB065440((int)v5, v5 >> 32);
      sub_1DB042664(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_1DB04239C(a1, a2);
      swift_retain();
      swift_retain();
      sub_1DB065440(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_1DB04239C(a1, a2);
      sub_1DB0C49A8();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t KVACRequestWrapper.requestData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData + 8));
  return v1;
}

id sub_1DB05E168(void *a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v28 = v4;
  id result = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (result)
  {
    id v11 = result;
    uint64_t v32 = sub_1DB0C4A08();
    unint64_t v27 = v12;

    id result = objc_msgSend(a2, sel_serializedPublicKey_, 1);
    if (result)
    {
      id v13 = result;
      uint64_t v14 = sub_1DB0C4A08();
      unint64_t v16 = v15;

      if (*(void *)(a4 + 16) == 4)
      {
        uint64_t v17 = sub_1DB0673BC(a3, a4);
        if (!v5)
        {
          uint64_t v21 = v17;
          unint64_t v22 = v18;
          *(void *)&long long v30 = v32;
          *((void *)&v30 + 1) = v27;
          sub_1DB04239C(v32, v27);
          sub_1DB04239C(v14, v16);
          sub_1DB05DEE8(v14, v16);
          sub_1DB042664(v14, v16);
          long long v31 = v30;
          sub_1DB04239C(v32, v27);
          sub_1DB04239C(v21, v22);
          sub_1DB05DEE8(v21, v22);
          sub_1DB042664(v21, v22);
          sub_1DB042664(v14, v16);
          sub_1DB042664(v32, v27);
          sub_1DB042664(v32, v27);
          sub_1DB042664(v21, v22);
          *(_OWORD *)&v28[OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_requestData] = v30;
          unint64_t v23 = &v28[OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request];
          *(void *)unint64_t v23 = a1;
          *((void *)v23 + 1) = a2;
          *((void *)v23 + 2) = a3;
          *((void *)v23 + 3) = a4;
          id v24 = a1;
          id v25 = a2;
          id v26 = a3;
          sub_1DB0C5188();

          v29.receiver = v28;
          v29.super_class = (Class)type metadata accessor for KVACRequestWrapper();
          id v19 = objc_msgSendSuper2(&v29, sel_init);
          swift_bridgeObjectRelease();

          return v19;
        }
        swift_bridgeObjectRelease();

        a3 = a2;
        a2 = a1;
        id v19 = v28;
        a1 = v28;
      }
      else
      {
        id v19 = v28;

        sub_1DB05F254();
        swift_allocError();
        *uint64_t v20 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
      }

      sub_1DB042664(v14, v16);
      sub_1DB042664(v32, v27);
      type metadata accessor for KVACRequestWrapper();
      swift_deallocPartialClassInstance();
      return v19;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void KVACRequestWrapper.init()()
{
}

id KVACRequestWrapper.__deallocating_deinit()
{
  return sub_1DB0631E0(type metadata accessor for KVACRequestWrapper);
}

uint64_t type metadata accessor for KVACRequestWrapper()
{
  return self;
}

uint64_t KVACCredentialWrapper.credentialData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData + 8));
  return v1;
}

uint64_t KVACCredentialWrapper.serverKeyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId + 8));
  return v1;
}

id sub_1DB05E5D8(uint64_t a1)
{
  id v3 = *(id *)a1;
  uint64_t v4 = v1;
  id v5 = objc_msgSend(v3, sel_serializedBigEndianScalar);
  if (!v5)
  {

    sub_1DB05F254();
    swift_allocError();
    *id v25 = 1;
    swift_willThrow();
    sub_1DB0679CC(a1);
    type metadata accessor for KVACCredentialWrapper();
    swift_deallocPartialClassInstance();
    return v3;
  }
  unint64_t v6 = v5;
  uint64_t v36 = sub_1DB0C4A08();
  unint64_t v8 = v7;

  id result = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v10 = result;
  uint64_t v11 = sub_1DB0C4A08();
  unint64_t v30 = v12;

  id result = objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v13 = result;
  uint64_t v14 = sub_1DB0C4A08();
  unint64_t v28 = v15;
  uint64_t v29 = v14;

  id result = objc_msgSend(*(id *)(a1 + 24), sel_serializedPublicKey_, 1);
  if (result)
  {
    unint64_t v16 = result;
    uint64_t v17 = sub_1DB0C4A08();
    unint64_t v31 = v18;

    long long v35 = *(_OWORD *)(a1 + 32);
    unint64_t v27 = (uint64_t *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId];
    *(_OWORD *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId] = v35;
    id v19 = &v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential];
    long long v20 = *(_OWORD *)(a1 + 32);
    long long v21 = *(_OWORD *)a1;
    *((_OWORD *)v19 + 1) = *(_OWORD *)(a1 + 16);
    *((_OWORD *)v19 + 2) = v20;
    *(_OWORD *)id v19 = v21;
    uint64_t v22 = v36;
    *(void *)&long long v33 = v36;
    *((void *)&v33 + 1) = v8;
    sub_1DB069818((uint64_t)&v35);
    sub_1DB067970(a1);
    sub_1DB04239C(v22, v8);
    sub_1DB04239C(v11, v30);
    sub_1DB05DEE8(v11, v30);
    sub_1DB042664(v11, v30);
    long long v34 = v33;
    sub_1DB04239C(v33, v8);
    sub_1DB04239C(v29, v28);
    sub_1DB05DEE8(v29, v28);
    sub_1DB042664(v29, v28);
    sub_1DB042664(v33, v8);
    sub_1DB04239C(v33, v8);
    uint64_t v26 = v17;
    sub_1DB04239C(v17, v31);
    sub_1DB05DEE8(v17, v31);
    sub_1DB042664(v17, v31);
    sub_1DB042664(v33, v8);
    uint64_t v24 = *v27;
    unint64_t v23 = v27[1];
    long long v34 = v33;
    sub_1DB04239C(v24, v23);
    sub_1DB04239C(v33, v8);
    sub_1DB05DEE8(v24, v23);
    sub_1DB042664(v26, v31);
    sub_1DB042664(v29, v28);
    sub_1DB042664(v11, v30);
    sub_1DB042664(v36, v8);
    sub_1DB042664(v24, v23);
    sub_1DB042664(v33, v8);
    *(_OWORD *)&v4[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData] = v33;

    v32.receiver = v4;
    v32.super_class = (Class)type metadata accessor for KVACCredentialWrapper();
    id v3 = objc_msgSendSuper2(&v32, sel_init);
    sub_1DB0679CC(a1);
    return v3;
  }
LABEL_10:
  __break(1u);
  return result;
}

id KVACCredentialWrapper.__allocating_init(credentialData:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return KVACCredentialWrapper.init(credentialData:)(a1, a2);
}

id KVACCredentialWrapper.init(credentialData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_50;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      unint64_t v7 = self;
      sub_1DB0C4F38();
      sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      uint64_t v59 = v2;
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      unint64_t v8 = (unint64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v64);
      if ((v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_41;
      }
      unint64_t v9 = v8;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v10 = (uint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v64);
      if (v10 < 0)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v11 = 3 * v10;
      if ((unsigned __int128)(v10 * (__int128)3) >> 64 != (3 * v10) >> 63)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      unint64_t v12 = v9 + v11;
      if (__OFADD__(v9, v11))
      {
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      uint64_t v13 = sub_1DB0C4F78();
      if (__OFADD__(v12, v13))
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v4 != v12 + v13)
      {
        id v27 = v59;

        sub_1DB05F254();
        swift_allocError();
        *unint64_t v28 = 2;
        swift_willThrow();
        uint64_t v29 = a1;
        unint64_t v30 = a2;
LABEL_22:
        sub_1DB042664(v29, v30);
        goto LABEL_23;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v64) & 0x8000000000000000) != 0)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v14 = sub_1DB0C4A28();
      unint64_t v16 = v15;
      int v63 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v17 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v18 = (void *)sub_1DB0C49E8();
      id v19 = objc_msgSend(v17, sel_initWithData_inGroup_reduction_corecryptoError_, v18, v64, 0, &v63);

      if (!v19)
      {
        int v31 = v63;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v32 = v31;
        *(unsigned char *)(v32 + 4) = 0;
        swift_willThrow();
        id v27 = v59;

        sub_1DB042664(a1, a2);
        uint64_t v29 = v14;
        unint64_t v30 = v16;
        goto LABEL_22;
      }
      sub_1DB042664(v14, v16);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v20 = (unint64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v64);
      if ((v20 & 0x8000000000000000) != 0)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      long long v21 = (char *)v20;
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v22 = (int64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v64);
      if (v22 < 0)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if (__OFADD__(v21, v22))
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if ((uint64_t)&v21[v22] < (uint64_t)v21) {
        goto LABEL_49;
      }
      uint64_t v23 = sub_1DB0C4A28();
      unint64_t v25 = v24;
      id v26 = sub_1DB0677F8();
      if (!v3)
      {
        id v58 = v26;
        sub_1DB042664(v23, v25);
        sub_1DB0C4D78();
        swift_dynamicCast();
        unint64_t v34 = (unint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v64);
        if ((v34 & 0x8000000000000000) == 0)
        {
          BOOL v35 = __OFADD__(v21, v34);
          uint64_t v36 = &v21[v34];
          if (!v35)
          {
            sub_1DB0C4D78();
            swift_dynamicCast();
            int64_t v37 = (int64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v64);
            if ((v37 & 0x8000000000000000) == 0)
            {
              if (!__OFADD__(v36, v37))
              {
                if ((uint64_t)&v36[v37] >= (uint64_t)v36)
                {
                  uint64_t v38 = sub_1DB0C4A28();
                  unint64_t v40 = v39;
                  id v57 = sub_1DB0677F8();
                  sub_1DB042664(v38, v40);
                  sub_1DB0C4D78();
                  swift_dynamicCast();
                  unint64_t v41 = (unint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v64);
                  if ((v41 & 0x8000000000000000) == 0)
                  {
                    BOOL v35 = __OFADD__(v36, v41);
                    id v42 = &v36[v41];
                    if (!v35)
                    {
                      sub_1DB0C4D78();
                      swift_dynamicCast();
                      int64_t v43 = (int64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v64);
                      if ((v43 & 0x8000000000000000) == 0)
                      {
                        if (!__OFADD__(v42, v43))
                        {
                          if ((uint64_t)&v42[v43] >= (uint64_t)v42)
                          {
                            uint64_t v44 = sub_1DB0C4A28();
                            unint64_t v46 = v45;
                            id v56 = sub_1DB0677F8();
                            sub_1DB042664(v44, v46);
                            sub_1DB0C4D78();
                            swift_dynamicCast();
                            unint64_t v47 = (unint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v64);
                            if ((v47 & 0x8000000000000000) == 0)
                            {
                              long long v48 = &v42[v47];
                              if (!__OFADD__(v42, v47))
                              {
                                uint64_t v49 = sub_1DB0C4F78();
                                if (!__OFADD__(v48, v49))
                                {
                                  if ((uint64_t)&v48[v49] >= (uint64_t)v48)
                                  {
                                    uint64_t v50 = sub_1DB0C4A28();
                                    unint64_t v52 = v51;
                                    id v53 = (uint64_t *)&v59[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_serverKeyId];
                                    *id v53 = v50;
                                    v53[1] = v51;
                                    long long v54 = (uint64_t *)&v59[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credentialData];
                                    *long long v54 = a1;
                                    v54[1] = a2;
                                    uint64_t v55 = &v59[OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential];
                                    *(void *)uint64_t v55 = v19;
                                    *((void *)v55 + 1) = v58;
                                    *((void *)v55 + 2) = v57;
                                    *((void *)v55 + 3) = v56;
                                    *((void *)v55 + 4) = v50;
                                    *((void *)v55 + 5) = v51;
                                    sub_1DB04239C(a1, a2);
                                    sub_1DB04239C(v50, v52);

                                    v62.receiver = v59;
                                    v62.super_class = (Class)type metadata accessor for KVACCredentialWrapper();
                                    id v27 = objc_msgSendSuper2(&v62, sel_init);
                                    sub_1DB042664(a1, a2);
                                    return v27;
                                  }
LABEL_65:
                                  __break(1u);
                                }
LABEL_64:
                                __break(1u);
                                goto LABEL_65;
                              }
LABEL_63:
                              __break(1u);
                              goto LABEL_64;
                            }
LABEL_62:
                            __break(1u);
                            goto LABEL_63;
                          }
LABEL_61:
                          __break(1u);
                          goto LABEL_62;
                        }
LABEL_60:
                        __break(1u);
                        goto LABEL_61;
                      }
LABEL_59:
                      __break(1u);
                      goto LABEL_60;
                    }
LABEL_58:
                    __break(1u);
                    goto LABEL_59;
                  }
LABEL_57:
                  __break(1u);
                  goto LABEL_58;
                }
LABEL_56:
                __break(1u);
                goto LABEL_57;
              }
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      sub_1DB042664(v23, v25);
      id v27 = v59;

      sub_1DB042664(a1, a2);
LABEL_23:
      type metadata accessor for KVACCredentialWrapper();
      swift_deallocPartialClassInstance();
      return v27;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_51;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1DB05F254()
{
  unint64_t result = qword_1EA8FE330;
  if (!qword_1EA8FE330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE330);
  }
  return result;
}

uint64_t type metadata accessor for KVACCredentialWrapper()
{
  return self;
}

char *sub_1DB05F2E4(uint64_t a1, unint64_t a2)
{
  long long v6 = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential + 16);
  v11[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential);
  v11[1] = v6;
  char v11[2] = *(_OWORD *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate21KVACCredentialWrapper_credential + 32);
  sub_1DB067970((uint64_t)v11);
  sub_1DB05CF00(a1, a2, (uint64_t)v9);
  sub_1DB0679CC((uint64_t)v11);
  if (v3)
  {
    unint64_t result = (char *)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v10[4] = v9[4];
    v10[5] = v9[5];
    void v10[6] = v9[6];
    v10[0] = v9[0];
    v10[1] = v9[1];
    v10[2] = v9[2];
    v10[3] = v9[3];
    id v7 = objc_allocWithZone((Class)type metadata accessor for KVACPresentationWrapper());
    return sub_1DB05F78C((uint64_t)v10);
  }
  return result;
}

void KVACCredentialWrapper.init()()
{
}

id KVACCredentialWrapper.__deallocating_deinit()
{
  return sub_1DB0631E0(type metadata accessor for KVACCredentialWrapper);
}

uint64_t KVACPresentationWrapper.serverKeyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.tag.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.prefix.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix + 8));
  return v1;
}

uint64_t KVACPresentationWrapper.presentationData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData + 8));
  return v1;
}

char *sub_1DB05F78C(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v59 = *(_OWORD *)a1;
  *(_OWORD *)long long v60 = v4;
  *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 32);
  uint64_t v61 = *(void *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 88);
  long long v6 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)(a1 + 56);
  long long v56 = v6;
  long long v57 = v5;
  uint64_t v58 = *(void *)(a1 + 104);
  id v7 = (void *)v59;
  uint64_t v8 = v5;
  unint64_t v9 = v1;
  sub_1DB0696E0((uint64_t)&v59);
  sub_1DB069C00((uint64_t)v55);
  if (!objc_msgSend(v7, sel_isEqual_, v8)
    || (uint64_t v10 = *(void **)v60, (objc_msgSend(*(id *)v60, sel_isEqual_, *((void *)&v56 + 1)) & 1) == 0))
  {
    sub_1DB05F254();
    swift_allocError();
    *int64_t v37 = 1;
    swift_willThrow();
    sub_1DB069194(a1);
    sub_1DB069C70((uint64_t)v55);
    sub_1DB069750((uint64_t)&v59);
LABEL_12:

    type metadata accessor for KVACPresentationWrapper();
    swift_deallocPartialClassInstance();
    return v9;
  }
  long long v62 = *(_OWORD *)&v60[8];
  uint64_t v11 = &v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId];
  *(_OWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_serverKeyId] = *(_OWORD *)&v60[8];
  sub_1DB069818((uint64_t)&v62);
  unint64_t result = (char *)objc_msgSend(v7, sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v13 = result;
  uint64_t v14 = sub_1DB0C4A08();
  unint64_t v16 = v15;

  unint64_t result = (char *)objc_msgSend(*((id *)&v59 + 1), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v17 = result;
  uint64_t v51 = sub_1DB0C4A08();
  unint64_t v63 = v18;

  unint64_t result = (char *)objc_msgSend(v10, sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v19 = result;
  uint64_t v20 = sub_1DB0C4A08();
  unint64_t v50 = v21;

  if (*(void *)(v61 + 16) != 3)
  {
    sub_1DB05F254();
    swift_allocError();
    unsigned char *v38 = 0;
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v22 = sub_1DB0673BC(*(void **)&v60[24], v61);
  if (v2)
  {
LABEL_15:
    sub_1DB069194(a1);
    int v39 = 0;
LABEL_16:
    sub_1DB042664(v20, v50);
    sub_1DB042664(v51, v63);
    sub_1DB042664(v14, v16);
    sub_1DB069C70((uint64_t)v55);
    sub_1DB069750((uint64_t)&v59);
    sub_1DB042664(*(void *)v11, *((void *)v11 + 1));
    if (v39)
    {
      sub_1DB042664(*(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag], *(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag + 8]);
      sub_1DB042664(*(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix], *(void *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix + 8]);
    }
    goto LABEL_12;
  }
  uint64_t v49 = v22;
  *(void *)&long long v54 = v14;
  *((void *)&v54 + 1) = v16;
  uint64_t v47 = v14;
  unint64_t v48 = v16;
  unint64_t v24 = v23;
  sub_1DB04239C(v14, v16);
  unint64_t v25 = v63;
  sub_1DB04239C(v51, v63);
  sub_1DB05DEE8(v51, v25);
  sub_1DB042664(v51, v25);
  long long v53 = v54;
  sub_1DB04239C(v14, *((unint64_t *)&v54 + 1));
  sub_1DB04239C(v20, v50);
  sub_1DB05DEE8(v20, v50);
  sub_1DB042664(v20, v50);
  sub_1DB042664(v14, *((unint64_t *)&v54 + 1));
  sub_1DB04239C(v14, *((unint64_t *)&v54 + 1));
  sub_1DB04239C(v49, v24);
  sub_1DB05DEE8(v49, v24);
  unint64_t v46 = v24;
  sub_1DB042664(v49, v24);
  sub_1DB042664(v14, *((unint64_t *)&v54 + 1));
  long long v26 = v54;
  unint64_t result = (char *)objc_msgSend(v55[0], sel_serializedPublicKey_, 1);
  if (result)
  {
    id v27 = result;
    uint64_t v28 = sub_1DB0C4A08();
    uint64_t v30 = v29;

    int v31 = (uint64_t *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_tag];
    *(void *)&long long v45 = v28;
    *((void *)&v45 + 1) = v30;
    *int v31 = v28;
    v31[1] = v30;
    id v32 = v55[1];
    unint64_t v33 = v56;
    unint64_t v34 = &v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_prefix];
    *(id *)unint64_t v34 = v55[1];
    *((void *)v34 + 1) = v33;
    uint64_t v35 = v58;
    if (*(void *)(v58 + 16) == 2)
    {
      uint64_t v36 = (void *)*((void *)&v57 + 1);
      sub_1DB04239C((uint64_t)v32, v33);
      uint64_t v44 = sub_1DB0673BC(v36, v35);
      long long v53 = v45;
      unint64_t v43 = v41;
      sub_1DB04239C(v45, *((unint64_t *)&v45 + 1));
      sub_1DB04239C((uint64_t)v32, v33);
      sub_1DB04239C(v45, *((unint64_t *)&v45 + 1));
      sub_1DB05DEE8((uint64_t)v32, v33);
      sub_1DB042664((uint64_t)v32, v33);
      sub_1DB042664(v45, *((unint64_t *)&v45 + 1));
      long long v54 = v45;
      sub_1DB04239C(v45, *((unint64_t *)&v45 + 1));
      sub_1DB04239C(v44, v43);
      sub_1DB05DEE8(v44, v43);
      sub_1DB042664(v44, v43);
      sub_1DB042664(v45, *((unint64_t *)&v45 + 1));
      unint64_t v42 = *((void *)v11 + 1);
      *(void *)&long long v53 = *(void *)v11;
      *((void *)&v53 + 1) = v42;
      sub_1DB04239C(v53, v42);
      sub_1DB04239C(v53, v42);
      sub_1DB04239C(v26, *((unint64_t *)&v26 + 1));
      sub_1DB05DEE8(v26, *((unint64_t *)&v26 + 1));
      sub_1DB042664(v26, *((unint64_t *)&v26 + 1));
      sub_1DB042664(v53, v42);
      long long v54 = v53;
      sub_1DB04239C(v53, v42);
      sub_1DB04239C(v45, *((unint64_t *)&v45 + 1));
      sub_1DB05DEE8(v45, *((unint64_t *)&v45 + 1));
      sub_1DB042664(v45, *((unint64_t *)&v45 + 1));
      sub_1DB042664(v44, v43);
      sub_1DB042664(v26, *((unint64_t *)&v26 + 1));
      sub_1DB042664(v49, v46);
      sub_1DB042664(v20, v50);
      sub_1DB042664(v51, v63);
      sub_1DB042664(v47, v48);
      sub_1DB069C70((uint64_t)v55);
      sub_1DB069750((uint64_t)&v59);
      sub_1DB042664(v53, v42);
      sub_1DB042664(v45, *((unint64_t *)&v45 + 1));
      *(_OWORD *)&v9[OBJC_IVAR____TtC16CryptoKitPrivate23KVACPresentationWrapper_presentationData] = v53;

      v52.receiver = v9;
      v52.super_class = (Class)type metadata accessor for KVACPresentationWrapper();
      unint64_t v9 = (char *)objc_msgSendSuper2(&v52, sel_init);
      sub_1DB069194(a1);
      return v9;
    }
    sub_1DB05F254();
    swift_allocError();
    unsigned char *v40 = 0;
    sub_1DB04239C((uint64_t)v32, v33);
    swift_willThrow();
    sub_1DB069194(a1);
    sub_1DB042664(v26, *((unint64_t *)&v26 + 1));
    sub_1DB042664(v49, v24);
    int v39 = 1;
    uint64_t v14 = v47;
    unint64_t v16 = v48;
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
  return result;
}

void KVACPresentationWrapper.init()()
{
}

id KVACPresentationWrapper.__deallocating_deinit()
{
  return sub_1DB0631E0(type metadata accessor for KVACPresentationWrapper);
}

char *KVACClient.__allocating_init(tokenChallenge:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return KVACClient.init(tokenChallenge:)(a1, a2);
}

char *KVACClient.init(tokenChallenge:)(uint64_t a1, unint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v4 = sub_1DB0C5088();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v34 = v2;
  uint64_t v8 = sub_1DB05C118(0xD000000000000027, 0x80000001DB0CB580);
  unint64_t v10 = v9;
  sub_1DB0C5058();
  uint64_t v11 = sub_1DB0C5048();
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v13 >> 60 == 15)
  {
    __break(1u);
LABEL_14:
    unint64_t result = (char *)swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v38 = v11;
  *(void *)&long long v39 = v13;
  sub_1DB067A4C(v11, v13);
  sub_1DB04239C(v8, v10);
  sub_1DB05DEE8(v8, v10);
  sub_1DB042664(v8, v10);
  sub_1DB069BB4(v11, v13);
  uint64_t v15 = v38;
  unint64_t v14 = v39;
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  uint64_t v16 = sub_1DB0C4D68();
  uint64_t v17 = v35;
  uint64_t v18 = v36;
  uint64_t v19 = sub_1DB0632DC(v36, a2, 1, v15, v14, v16, 0);
  uint64_t v35 = v17;
  if (v17)
  {
    sub_1DB042664(v15, v14);
    uint64_t v20 = v34;

    sub_1DB042664(v18, a2);
    sub_1DB042664(v8, v10);
    goto LABEL_10;
  }
  unint64_t v33 = a2;
  if (!*(void *)(v19 + 16)) {
    goto LABEL_14;
  }
  id v21 = *(id *)(v19 + 32);
  swift_bridgeObjectRelease();
  sub_1DB042664(v15, v14);
  sub_1DB042664(v8, v10);
  id v22 = v21;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  unint64_t result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v42);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v24 = (uint64_t)result;
  sub_1DB0C4D78();
  swift_dynamicCast();
  unint64_t result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v42);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v25 = (uint64_t)result;
  sub_1DB0C4D78();
  swift_dynamicCast();
  unint64_t result = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v42);
  if (result)
  {
    uint64_t v26 = v35;
    sub_1DB060420(4, v24, (uint64_t)v22, v25, (uint64_t)result, &v38);
    unint64_t v27 = v33;
    uint64_t v28 = v36;
    if (!v26)
    {

      id v29 = v34;
      uint64_t v30 = &v34[OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client];
      *(void *)uint64_t v30 = v38;
      *(_OWORD *)(v30 + 8) = v39;
      *(_OWORD *)(v30 + 24) = v40;
      *(_OWORD *)(v30 + 40) = v41;

      int v31 = (objc_class *)type metadata accessor for KVACClient();
      v37.receiver = v29;
      v37.super_class = v31;
      uint64_t v20 = (char *)objc_msgSendSuper2(&v37, sel_init);
      sub_1DB042664(v28, v27);
      return v20;
    }
    sub_1DB042664(v36, v33);

    uint64_t v20 = v34;
LABEL_10:
    type metadata accessor for KVACClient();
    swift_deallocPartialClassInstance();
    return v20;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1DB060420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v25);
  id v10 = objc_msgSend(v9, sel_serializedPublicKey_, 1);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = sub_1DB0C4A08();
    unint64_t v14 = v13;

    uint64_t v15 = sub_1DB05C118(0xD000000000000023, 0x80000001DB0CB8E0);
    unint64_t v17 = v16;
    sub_1DB073FA8(v12, v14, v15, v16);
    if (!v6)
    {
      uint64_t v19 = v18;
      sub_1DB042664(v15, v17);
      uint64_t result = sub_1DB042664(v12, v14);
      *a6 = a1;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      a6[4] = a5;
      a6[5] = v9;
      a6[6] = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

id sub_1DB060608()
{
  sub_1DB05D5C0(*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 8), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 16), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 24), (uint64_t)*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 32), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 40), *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 48));
  if (v1)
  {
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v2;
    id v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    id v10 = objc_allocWithZone((Class)type metadata accessor for KVACRequestWrapper());
    return sub_1DB05E168(v6, v7, v8, v9);
  }
  return result;
}

id sub_1DB060860(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 8);
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 24);
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 32);
  id v7 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 40);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACClient_client + 48);
  long long v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 80);
  v27[4] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 64);
  v27[5] = v8;
  uint64_t v28 = *(void *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 96);
  long long v9 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 16);
  v27[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance);
  v27[1] = v9;
  long long v10 = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 48);
  v27[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance + 32);
  v27[3] = v10;
  uint64_t v11 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request);
  uint64_t v12 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request + 8);
  unint64_t v13 = *(void **)(a2 + OBJC_IVAR____TtC16CryptoKitPrivate18KVACRequestWrapper_request + 16);
  sub_1DB067A84((uint64_t)v27);
  id v14 = v11;
  id v15 = v12;
  id v16 = v13;
  sub_1DB0C5188();
  id v17 = v3;
  id v18 = v4;
  id v19 = v5;
  id v20 = v7;
  id v21 = v6;
  uint64_t v22 = v29;
  sub_1DB05C6FC((uint64_t)v27, v14, v15, v16, v17, v18, v19, (uint64_t)v25, v20, v21);
  if (v22)
  {
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v26[0] = v25[0];
    v26[1] = v25[1];
    v26[2] = v25[2];
    id v23 = objc_allocWithZone((Class)type metadata accessor for KVACCredentialWrapper());
    return sub_1DB05E5D8((uint64_t)v26);
  }
  return result;
}

id KVACClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void KVACClient.init()()
{
}

id KVACClient.__deallocating_deinit()
{
  return sub_1DB0631E0(type metadata accessor for KVACClient);
}

uint64_t KVACIssuanceWrapper.keyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId + 8));
  return v1;
}

uint64_t KVACIssuanceWrapper.issuanceData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData + 8));
  return v1;
}

id sub_1DB060C5C(uint64_t a1)
{
  long long v67 = *(_OWORD *)(a1 + 72);
  uint64_t v4 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId];
  *(_OWORD *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId] = v67;
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = v1;
  sub_1DB069818((uint64_t)&v67);
  id result = objc_msgSend(v5, sel_serializedPublicKey_, 1);
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  long long v8 = result;
  uint64_t v9 = sub_1DB0C4A08();
  unint64_t v11 = v10;

  id result = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v12 = result;
  uint64_t v68 = sub_1DB0C4A08();
  unint64_t v14 = v13;

  id result = objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v15 = result;
  uint64_t v62 = sub_1DB0C4A08();
  unint64_t v63 = v16;

  id result = objc_msgSend(*(id *)(a1 + 24), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v17 = result;
  uint64_t v54 = sub_1DB0C4A08();
  unint64_t v61 = v18;

  id result = objc_msgSend(*(id *)(a1 + 32), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v19 = result;
  uint64_t v59 = sub_1DB0C4A08();
  unint64_t v60 = v20;

  id result = objc_msgSend(*(id *)(a1 + 40), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v21 = result;
  uint64_t v53 = sub_1DB0C4A08();
  unint64_t v58 = v22;

  id result = objc_msgSend(*(id *)(a1 + 48), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v23 = result;
  uint64_t v56 = sub_1DB0C4A08();
  unint64_t v57 = v24;

  id result = objc_msgSend(*(id *)(a1 + 56), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v25 = result;
  uint64_t v49 = v4;
  uint64_t v26 = sub_1DB0C4A08();
  unint64_t v51 = v27;
  uint64_t v52 = v26;

  id result = objc_msgSend(*(id *)(a1 + 64), sel_serializedPublicKey_, 1);
  uint64_t v50 = a1;
  if (result)
  {
    uint64_t v28 = result;
    uint64_t v55 = sub_1DB0C4A08();
    unint64_t v30 = v29;

    *(void *)&long long v65 = v9;
    *((void *)&v65 + 1) = v11;
    unint64_t v48 = v11;
    sub_1DB04239C(v9, v11);
    uint64_t v31 = v68;
    sub_1DB04239C(v68, v14);
    sub_1DB05DEE8(v31, v14);
    sub_1DB042664(v31, v14);
    sub_1DB04239C(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v62, v63);
    sub_1DB05DEE8(v62, v63);
    sub_1DB042664(v62, v63);
    sub_1DB042664(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v54, v61);
    sub_1DB05DEE8(v54, v61);
    sub_1DB042664(v54, v61);
    sub_1DB042664(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v59, v60);
    sub_1DB05DEE8(v59, v60);
    sub_1DB042664(v59, v60);
    sub_1DB042664(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v53, v58);
    sub_1DB05DEE8(v53, v58);
    sub_1DB042664(v53, v58);
    sub_1DB042664(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v56, v57);
    sub_1DB05DEE8(v56, v57);
    sub_1DB042664(v56, v57);
    sub_1DB042664(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v52, v51);
    sub_1DB05DEE8(v52, v51);
    sub_1DB042664(v52, v51);
    sub_1DB042664(v9, *((unint64_t *)&v65 + 1));
    long long v66 = v65;
    sub_1DB04239C(v9, *((unint64_t *)&v65 + 1));
    sub_1DB04239C(v55, v30);
    sub_1DB05DEE8(v55, v30);
    sub_1DB042664(v55, v30);
    sub_1DB042664(v9, *((unint64_t *)&v65 + 1));
    long long v32 = v65;
    uint64_t v33 = *(void *)(v50 + 96);
    if (*(void *)(v33 + 16) == 7)
    {
      uint64_t v34 = sub_1DB0673BC(*(void **)(v50 + 88), v33);
      uint64_t v36 = v4;
      if (!v2)
      {
        uint64_t v37 = v34;
        unint64_t v38 = *((void *)v4 + 1);
        *(void *)&long long v65 = *(void *)v49;
        *((void *)&v65 + 1) = v38;
        unint64_t v47 = v35;
        sub_1DB04239C(v65, v38);
        sub_1DB04239C(v65, v38);
        sub_1DB04239C(v32, *((unint64_t *)&v32 + 1));
        sub_1DB05DEE8(v32, *((unint64_t *)&v32 + 1));
        sub_1DB042664(v32, *((unint64_t *)&v32 + 1));
        sub_1DB042664(v65, v38);
        long long v66 = v65;
        sub_1DB04239C(v65, v38);
        sub_1DB04239C(v37, v47);
        sub_1DB05DEE8(v37, v47);
        sub_1DB042664(v37, v47);
        sub_1DB042664(v32, *((unint64_t *)&v32 + 1));
        sub_1DB042664(v55, v30);
        sub_1DB042664(v52, v51);
        sub_1DB042664(v56, v57);
        sub_1DB042664(v53, v58);
        sub_1DB042664(v59, v60);
        sub_1DB042664(v54, v61);
        sub_1DB042664(v62, v63);
        sub_1DB042664(v68, v14);
        sub_1DB042664(v9, v48);
        sub_1DB042664(v65, v38);
        sub_1DB042664(v37, v47);
        *(_OWORD *)&v6[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData] = v65;
        long long v39 = &v6[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance];
        long long v41 = *(_OWORD *)(v50 + 16);
        long long v40 = *(_OWORD *)(v50 + 32);
        *(_OWORD *)long long v39 = *(_OWORD *)v50;
        *((_OWORD *)v39 + 1) = v41;
        *((_OWORD *)v39 + 2) = v40;
        long long v43 = *(_OWORD *)(v50 + 64);
        long long v42 = *(_OWORD *)(v50 + 80);
        long long v44 = *(_OWORD *)(v50 + 48);
        *((void *)v39 + 12) = *(void *)(v50 + 96);
        *((_OWORD *)v39 + 4) = v43;
        *((_OWORD *)v39 + 5) = v42;
        *((_OWORD *)v39 + 3) = v44;
        sub_1DB067A84(v50);

        v64.receiver = v6;
        v64.super_class = (Class)type metadata accessor for KVACIssuanceWrapper();
        id v45 = objc_msgSendSuper2(&v64, sel_init);
        sub_1DB069848(v50);
        return v45;
      }
    }
    else
    {
      sub_1DB05F254();
      swift_allocError();
      *unint64_t v46 = 0;
      swift_willThrow();
      uint64_t v36 = v4;
    }
    sub_1DB069848(v50);
    sub_1DB042664(v32, *((unint64_t *)&v32 + 1));
    sub_1DB042664(v55, v30);
    sub_1DB042664(v52, v51);
    sub_1DB042664(v56, v57);
    sub_1DB042664(v53, v58);
    sub_1DB042664(v59, v60);
    sub_1DB042664(v54, v61);
    sub_1DB042664(v62, v63);
    sub_1DB042664(v68, v14);
    sub_1DB042664(v9, v48);
    sub_1DB042664(*(void *)v36, *((void *)v36 + 1));
    id v45 = v6;

    type metadata accessor for KVACIssuanceWrapper();
    swift_deallocPartialClassInstance();
    return v45;
  }
LABEL_24:
  __break(1u);
  return result;
}

unint64_t KVACIssuanceWrapper.__allocating_init(issuanceData:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return KVACIssuanceWrapper.init(issuanceData:)(a1, a2);
}

unint64_t KVACIssuanceWrapper.init(issuanceData:)(uint64_t a1, unint64_t a2)
{
  id v7 = (char *)self;
  unint64_t v8 = sub_1DB0C4F38();
  uint64_t v9 = sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  unint64_t v10 = v3;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  uint64_t v11 = (uint64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v95);
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_57;
  }
  if ((unint64_t)(v11 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v93 = 8 * v11;
  unint64_t v2 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
      unint64_t v2 = HIDWORD(a1) - (int)a1;
LABEL_8:
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v11 = (uint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v95);
      if (v11 < 0) {
        goto LABEL_58;
      }
      uint64_t v15 = 9 * v11;
      if ((unsigned __int128)(v11 * (__int128)9) >> 64 != (9 * v11) >> 63) {
        goto LABEL_59;
      }
      uint64_t v16 = v15 + v93;
      if (__OFADD__(v15, v93)) {
        goto LABEL_60;
      }
      uint64_t v11 = sub_1DB0C4F78();
      if (__OFADD__(v16, v11)) {
        goto LABEL_61;
      }
      if (v2 == v16 + v11)
      {
        unint64_t v2 = (unint64_t)&v10[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuanceData];
        *(void *)unint64_t v2 = a1;
        *(void *)(v2 + 8) = a2;
        sub_1DB04239C(a1, a2);
        uint64_t v11 = sub_1DB0C4F78();
        if ((v11 & 0x8000000000000000) == 0)
        {
          uint64_t v92 = a1;
          uint64_t v17 = sub_1DB0C4A28();
          unint64_t v18 = (uint64_t *)&v10[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_keyId];
          uint64_t *v18 = v17;
          v18[1] = v19;
          long long v90 = v18;
          uint64_t v20 = sub_1DB0C4F78();
          uint64_t v21 = v9;
          uint64_t v22 = v20;
          a1 = v21;
          sub_1DB0C4D78();
          swift_dynamicCast();
          long long v91 = v7;
          uint64_t v11 = (uint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v95);
          if ((v11 & 0x8000000000000000) == 0)
          {
            if (!__OFADD__(v22, v11))
            {
              if (v22 + v11 >= v22)
              {
                unint64_t v88 = v2;
                long long v89 = v10;
                uint64_t v23 = sub_1DB0C4A28();
                unint64_t v2 = v24;
                id v25 = sub_1DB0677F8();
                if (v4)
                {
                  sub_1DB042664(v23, v2);
                  sub_1DB042664(v92, a2);
LABEL_87:
                  sub_1DB042664(*v90, v90[1]);
                  sub_1DB042664(*(void *)v88, *(void *)(v88 + 8));
                  unint64_t v10 = v89;
                  goto LABEL_88;
                }
                v87 = v25;
                sub_1DB042664(v23, v2);
                sub_1DB0C4D78();
                swift_dynamicCast();
                uint64_t v11 = (uint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v95);
                if ((v11 & 0x8000000000000000) == 0)
                {
                  id v7 = (char *)(v22 + v11);
                  if (!__OFADD__(v22, v11))
                  {
                    uint64_t v27 = a1;
                    sub_1DB0C4D78();
                    swift_dynamicCast();
                    uint64_t v11 = (uint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                    if ((v11 & 0x8000000000000000) == 0)
                    {
                      int64_t v12 = (int64_t)&v7[v11];
                      a1 = v92;
                      if (!__OFADD__(v7, v11))
                      {
                        if (v12 >= (uint64_t)v7)
                        {
                          uint64_t v28 = sub_1DB0C4A28();
                          unint64_t v30 = v29;
                          id v86 = sub_1DB0677F8();
                          sub_1DB042664(v28, v30);
                          sub_1DB0C4D78();
                          swift_dynamicCast();
                          unint64_t v31 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                          if ((v31 & 0x8000000000000000) != 0)
                          {
                            __break(1u);
                          }
                          else
                          {
                            BOOL v33 = __OFADD__(v7, v31);
                            uint64_t v34 = &v7[v31];
                            if (!v33)
                            {
                              sub_1DB0C4D78();
                              swift_dynamicCast();
                              unint64_t v31 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                              if ((v31 & 0x8000000000000000) == 0)
                              {
                                long long v32 = &v34[v31];
                                if (!__OFADD__(v34, v31))
                                {
                                  if ((uint64_t)v32 >= (uint64_t)v34)
                                  {
                                    uint64_t v35 = sub_1DB0C4A28();
                                    unint64_t v37 = v36;
                                    id v85 = sub_1DB0677F8();
                                    sub_1DB042664(v35, v37);
                                    sub_1DB0C4D78();
                                    swift_dynamicCast();
                                    unint64_t v38 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                    if ((v38 & 0x8000000000000000) != 0)
                                    {
                                      __break(1u);
                                    }
                                    else
                                    {
                                      BOOL v33 = __OFADD__(v34, v38);
                                      long long v39 = &v34[v38];
                                      if (!v33)
                                      {
                                        sub_1DB0C4D78();
                                        swift_dynamicCast();
                                        int64_t v40 = (int64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                        if ((v40 & 0x8000000000000000) == 0)
                                        {
                                          if (!__OFADD__(v39, v40))
                                          {
                                            if ((uint64_t)&v39[v40] >= (uint64_t)v39)
                                            {
                                              uint64_t v41 = sub_1DB0C4A28();
                                              unint64_t v43 = v42;
                                              id v84 = sub_1DB0677F8();
                                              sub_1DB042664(v41, v43);
                                              sub_1DB0C4D78();
                                              swift_dynamicCast();
                                              unint64_t v44 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                              if ((v44 & 0x8000000000000000) == 0)
                                              {
                                                BOOL v33 = __OFADD__(v39, v44);
                                                id v45 = &v39[v44];
                                                if (!v33)
                                                {
                                                  sub_1DB0C4D78();
                                                  swift_dynamicCast();
                                                  int64_t v46 = (int64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                                  if ((v46 & 0x8000000000000000) == 0)
                                                  {
                                                    if (!__OFADD__(v45, v46))
                                                    {
                                                      if ((uint64_t)&v45[v46] >= (uint64_t)v45)
                                                      {
                                                        uint64_t v47 = sub_1DB0C4A28();
                                                        unint64_t v49 = v48;
                                                        id v83 = sub_1DB0677F8();
                                                        sub_1DB042664(v47, v49);
                                                        sub_1DB0C4D78();
                                                        swift_dynamicCast();
                                                        unint64_t v50 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                                        if ((v50 & 0x8000000000000000) == 0)
                                                        {
                                                          BOOL v33 = __OFADD__(v45, v50);
                                                          unint64_t v51 = &v45[v50];
                                                          if (!v33)
                                                          {
                                                            sub_1DB0C4D78();
                                                            swift_dynamicCast();
                                                            int64_t v52 = (int64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                                            if ((v52 & 0x8000000000000000) == 0)
                                                            {
                                                              if (!__OFADD__(v51, v52))
                                                              {
                                                                if ((uint64_t)&v51[v52] >= (uint64_t)v51)
                                                                {
                                                                  uint64_t v53 = sub_1DB0C4A28();
                                                                  unint64_t v55 = v54;
                                                                  id v82 = sub_1DB0677F8();
                                                                  sub_1DB042664(v53, v55);
                                                                  sub_1DB0C4D78();
                                                                  swift_dynamicCast();
                                                                  unint64_t v56 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                                                  if ((v56 & 0x8000000000000000) == 0)
                                                                  {
                                                                    BOOL v33 = __OFADD__(v51, v56);
                                                                    unint64_t v57 = &v51[v56];
                                                                    if (!v33)
                                                                    {
                                                                      sub_1DB0C4D78();
                                                                      swift_dynamicCast();
                                                                      int64_t v58 = (int64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                                                      if ((v58 & 0x8000000000000000) == 0)
                                                                      {
                                                                        if (!__OFADD__(v57, v58))
                                                                        {
                                                                          if ((uint64_t)&v57[v58] >= (uint64_t)v57)
                                                                          {
                                                                            uint64_t v59 = sub_1DB0C4A28();
                                                                            unint64_t v61 = v60;
                                                                            id v81 = sub_1DB0677F8();
                                                                            sub_1DB042664(v59, v61);
                                                                            sub_1DB0C4D78();
                                                                            swift_dynamicCast();
                                                                            unint64_t v62 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                                                            if ((v62 & 0x8000000000000000) == 0)
                                                                            {
                                                                              BOOL v33 = __OFADD__(v57, v62);
                                                                              id v7 = &v57[v62];
                                                                              if (!v33)
                                                                              {
                                                                                sub_1DB0C4D78();
                                                                                swift_dynamicCast();
                                                                                unint64_t v63 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                                                                                if ((v63 & 0x8000000000000000) == 0)
                                                                                {
                                                                                  if (!__OFADD__(v7, v63))
                                                                                  {
                                                                                    if ((uint64_t)&v7[v63] >= (uint64_t)v7)
                                                                                    {
                                                                                      unint64_t v10 = (char *)sub_1DB0C4A28();
                                                                                      unint64_t v2 = v64;
                                                                                      uint64_t v11 = (uint64_t)sub_1DB0677F8();
                                                                                      goto LABEL_66;
                                                                                    }
LABEL_120:
                                                                                    __break(1u);
                                                                                    goto LABEL_121;
                                                                                  }
LABEL_119:
                                                                                  __break(1u);
                                                                                  goto LABEL_120;
                                                                                }
LABEL_118:
                                                                                __break(1u);
                                                                                goto LABEL_119;
                                                                              }
LABEL_117:
                                                                              __break(1u);
                                                                              goto LABEL_118;
                                                                            }
LABEL_116:
                                                                            __break(1u);
                                                                            goto LABEL_117;
                                                                          }
LABEL_115:
                                                                          __break(1u);
                                                                          goto LABEL_116;
                                                                        }
LABEL_114:
                                                                        __break(1u);
                                                                        goto LABEL_115;
                                                                      }
LABEL_113:
                                                                      __break(1u);
                                                                      goto LABEL_114;
                                                                    }
LABEL_112:
                                                                    __break(1u);
                                                                    goto LABEL_113;
                                                                  }
LABEL_111:
                                                                  __break(1u);
                                                                  goto LABEL_112;
                                                                }
LABEL_110:
                                                                __break(1u);
                                                                goto LABEL_111;
                                                              }
LABEL_109:
                                                              __break(1u);
                                                              goto LABEL_110;
                                                            }
LABEL_108:
                                                            __break(1u);
                                                            goto LABEL_109;
                                                          }
LABEL_107:
                                                          __break(1u);
                                                          goto LABEL_108;
                                                        }
LABEL_106:
                                                        __break(1u);
                                                        goto LABEL_107;
                                                      }
LABEL_105:
                                                      __break(1u);
                                                      goto LABEL_106;
                                                    }
LABEL_104:
                                                    __break(1u);
                                                    goto LABEL_105;
                                                  }
LABEL_103:
                                                  __break(1u);
                                                  goto LABEL_104;
                                                }
LABEL_102:
                                                __break(1u);
                                                goto LABEL_103;
                                              }
LABEL_101:
                                              __break(1u);
                                              goto LABEL_102;
                                            }
LABEL_100:
                                            __break(1u);
                                            goto LABEL_101;
                                          }
LABEL_99:
                                          __break(1u);
                                          goto LABEL_100;
                                        }
LABEL_98:
                                        __break(1u);
                                        goto LABEL_99;
                                      }
                                    }
                                    __break(1u);
                                    goto LABEL_98;
                                  }
LABEL_94:
                                  __break(1u);
                                  goto LABEL_95;
                                }
LABEL_93:
                                __break(1u);
                                goto LABEL_94;
                              }
LABEL_92:
                              __break(1u);
                              goto LABEL_93;
                            }
                          }
                          __break(1u);
                          goto LABEL_92;
                        }
LABEL_79:
                        __break(1u);
                        goto LABEL_80;
                      }
LABEL_78:
                      __break(1u);
                      goto LABEL_79;
                    }
LABEL_77:
                    __break(1u);
                    goto LABEL_78;
                  }
LABEL_76:
                  __break(1u);
                  goto LABEL_77;
                }
LABEL_75:
                __break(1u);
                goto LABEL_76;
              }
LABEL_65:
              __break(1u);
LABEL_66:
              id v80 = (void *)v11;
              sub_1DB042664((uint64_t)v10, v2);
              sub_1DB0C4D78();
              swift_dynamicCast();
              unint64_t v65 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
              if ((v65 & 0x8000000000000000) == 0)
              {
                BOOL v33 = __OFADD__(v7, v65);
                v7 += v65;
                if (!v33)
                {
                  sub_1DB0C4D78();
                  swift_dynamicCast();
                  unint64_t v66 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                  if ((v66 & 0x8000000000000000) == 0)
                  {
                    if (!__OFADD__(v7, v66))
                    {
                      if ((uint64_t)&v7[v66] >= (uint64_t)v7)
                      {
                        uint64_t v67 = sub_1DB0C4A28();
                        unint64_t v2 = v68;
                        id v79 = sub_1DB0677F8();
                        uint64_t v11 = v67;
                        int64_t v12 = v2;
                        if (v4)
                        {
                          sub_1DB042664(v67, v2);
                          sub_1DB042664(a1, a2);

                          uint64_t v69 = v80;
LABEL_86:

                          goto LABEL_87;
                        }
LABEL_80:
                        sub_1DB042664(v11, v12);
                        sub_1DB0C4D78();
                        swift_dynamicCast();
                        unint64_t v70 = (unint64_t)objc_msgSend(v91, sel_compressedx962PointByteCountForCurveParameters_, v95);
                        if ((v70 & 0x8000000000000000) == 0)
                        {
                          BOOL v33 = __OFADD__(v7, v70);
                          uint64_t v71 = &v7[v70];
                          if (!v33)
                          {
                            if (!__OFADD__(v71, v93))
                            {
                              if ((uint64_t)&v71[v93] >= (uint64_t)v71)
                              {
                                a1 = v92;
                                uint64_t v27 = sub_1DB0C4A28();
                                unint64_t v8 = v72;
                                sub_1DB067B58(v27, v72);
                                if (v4)
                                {
                                  sub_1DB042664(v92, a2);
                                  sub_1DB042664(v27, v8);

                                  uint64_t v69 = v79;
                                  goto LABEL_86;
                                }
LABEL_95:
                                unint64_t v74 = v31;
                                id v75 = v32;
                                sub_1DB042664(v27, v8);
                                uint64_t v76 = *v90;
                                unint64_t v77 = v90[1];
                                v78 = &v89[OBJC_IVAR____TtC16CryptoKitPrivate19KVACIssuanceWrapper_issuance];
                                *(void *)v78 = v87;
                                *((void *)v78 + 1) = v86;
                                *((void *)v78 + 2) = v85;
                                *((void *)v78 + 3) = v84;
                                *((void *)v78 + 4) = v83;
                                *((void *)v78 + 5) = v82;
                                *((void *)v78 + 6) = v81;
                                *((void *)v78 + 7) = v80;
                                *((void *)v78 + 8) = v79;
                                *((void *)v78 + 9) = v76;
                                *((void *)v78 + 10) = v77;
                                *((void *)v78 + 11) = v74;
                                *((void *)v78 + 12) = v75;
                                sub_1DB04239C(v76, v77);

                                v94.receiver = v89;
                                v94.super_class = (Class)type metadata accessor for KVACIssuanceWrapper();
                                unint64_t v2 = (unint64_t)objc_msgSendSuper2(&v94, sel_init);
                                sub_1DB042664(a1, a2);
                                return v2;
                              }
LABEL_129:
                              __break(1u);
                              JUMPOUT(0x1DB06230CLL);
                            }
LABEL_128:
                            __break(1u);
                            goto LABEL_129;
                          }
LABEL_127:
                          __break(1u);
                          goto LABEL_128;
                        }
LABEL_126:
                        __break(1u);
                        goto LABEL_127;
                      }
LABEL_125:
                      __break(1u);
                      goto LABEL_126;
                    }
LABEL_124:
                    __break(1u);
                    goto LABEL_125;
                  }
LABEL_123:
                  __break(1u);
                  goto LABEL_124;
                }
LABEL_122:
                __break(1u);
                goto LABEL_123;
              }
LABEL_121:
              __break(1u);
              goto LABEL_122;
            }
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      sub_1DB05F254();
      swift_allocError();
      *uint64_t v26 = 3;
      swift_willThrow();
      sub_1DB042664(a1, a2);
LABEL_88:

      type metadata accessor for KVACIssuanceWrapper();
      swift_deallocPartialClassInstance();
      return v2;
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      unint64_t v2 = v13 - v14;
      if (!__OFSUB__(v13, v14)) {
        goto LABEL_8;
      }
      goto LABEL_74;
    case 3uLL:
      goto LABEL_8;
    default:
      unint64_t v2 = BYTE6(a2);
      goto LABEL_8;
  }
}

uint64_t sub_1DB062334(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6 = a3;
  uint64_t v7 = sub_1DB0C4A08();
  uint64_t v9 = v8;

  return a5(v7, v9);
}

void KVACIssuanceWrapper.init()()
{
}

id KVACIssuanceWrapper.__deallocating_deinit()
{
  return sub_1DB0631E0(type metadata accessor for KVACIssuanceWrapper);
}

id sub_1DB06255C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(a1 + *a3);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_1DB04239C(*v3, v5);
  id v6 = (void *)sub_1DB0C49E8();
  sub_1DB042664(v4, v5);
  return v6;
}

uint64_t KVACServer.keyId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId + 8));
  return v1;
}

id KVACServer.init()()
{
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  uint64_t v1 = v0;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = result;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = result;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v12);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v5 = result;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v12);
  if (result)
  {
    sub_1DB05A93C(4, v3, v4, v5, result, &v13);
    uint64_t v7 = v18;
    uint64_t v6 = v19;
    unint64_t v8 = v20;
    uint64_t v9 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
    *(void *)uint64_t v9 = v13;
    *(_OWORD *)(v9 + 8) = v14;
    *(_OWORD *)(v9 + 24) = v15;
    *(_OWORD *)(v9 + 40) = v16;
    *(_OWORD *)(v9 + 56) = v17;
    *((void *)v9 + 9) = v7;
    *((void *)v9 + 10) = v6;
    *((void *)v9 + 11) = v8;
    unint64_t v10 = (uint64_t *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId];
    *unint64_t v10 = v6;
    v10[1] = v8;
    sub_1DB04239C(v6, v8);

    v11.receiver = v1;
    v11.super_class = (Class)type metadata accessor for KVACServer();
    return objc_msgSendSuper2(&v11, sel_init);
  }
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1DB0628B8(uint64_t a1, unint64_t a2)
{
  sub_1DB0681F4(a1, a2);
  if (!v3)
  {
    unint64_t v8 = v4;
    uint64_t v9 = v5;
    unint64_t v10 = v6;
    uint64_t v11 = v7;
    long long v12 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 48];
    void v20[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 32];
    v20[3] = v12;
    long long v13 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 80];
    v20[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 64];
    v20[5] = v13;
    long long v14 = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 16];
    v20[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
    v20[1] = v14;
    sub_1DB068684((uint64_t)v20);
    sub_1DB05ABD0(v8, v9, v10, v11, v16);
    sub_1DB06871C((uint64_t)v20);
    v18[4] = v16[4];
    v18[5] = v16[5];
    uint64_t v19 = v17;
    v18[0] = v16[0];
    v18[1] = v16[1];
    void v18[2] = v16[2];
    v18[3] = v16[3];
    objc_allocWithZone((Class)type metadata accessor for KVACIssuanceWrapper());
    unint64_t v2 = (char *)sub_1DB060C5C((uint64_t)v18);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_1DB062AE0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_1DB0C5088();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DB0687B8(a1, a2, &v58);
  uint64_t v12 = sub_1DB05C118(0xD000000000000027, 0x80000001DB0CB580);
  unint64_t v14 = v13;
  sub_1DB0C5058();
  uint64_t v15 = sub_1DB0C5048();
  unint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v17 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_17;
  }
  *(void *)&long long v70 = v15;
  *((void *)&v70 + 1) = v17;
  sub_1DB067A4C(v15, v17);
  sub_1DB04239C(v12, v14);
  sub_1DB05DEE8(v12, v14);
  sub_1DB042664(v12, v14);
  sub_1DB069BB4(v15, v17);
  uint64_t v15 = *((void *)&v70 + 1);
  uint64_t v11 = (char *)v70;
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  uint64_t v18 = sub_1DB0C4D68();
  uint64_t v19 = sub_1DB0632DC(a3, a4, 1, (uint64_t)v11, v15, v18, 0);
  unint64_t v56 = 0;
  if (!*(void *)(v19 + 16))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    sub_1DB042664((uint64_t)v11, v15);
    sub_1DB042664(v12, v14);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  id v20 = *(id *)(v19 + 32);
  swift_bridgeObjectRelease();
  sub_1DB042664((uint64_t)v11, v15);
  sub_1DB042664(v12, v14);
  long long v71 = v59;
  long long v72 = v60;
  long long v70 = v58;
  uint64_t v73 = v61;
  uint64_t v21 = *((void *)&v59 + 1);
  unint64_t v22 = v60;
  uint64_t v23 = v57;
  uint64_t v24 = *(void *)&v57[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId];
  unint64_t v25 = *(void *)&v57[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_keyId + 8];
  sub_1DB04239C(*((uint64_t *)&v59 + 1), v60);
  LOBYTE(v24) = sub_1DB059454(v21, v22, v24, v25);
  sub_1DB042664(v21, v22);
  if ((v24 & 1) == 0)
  {

    goto LABEL_8;
  }
  uint64_t v26 = &v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server];
  uint64_t v27 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 8];
  uint64_t v28 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 16];
  id v55 = v20;
  unint64_t v30 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 24];
  unint64_t v29 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 32];
  unint64_t v31 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 40];
  long long v32 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 48];
  BOOL v33 = *(void **)&v23[OBJC_IVAR____TtC16CryptoKitPrivate10KVACServer_server + 56];
  id v50 = (id)*((void *)v26 + 8);
  uint64_t v34 = *((void *)v26 + 10);
  unint64_t v57 = (char *)*((void *)v26 + 9);
  uint64_t v35 = (char *)*((void *)v26 + 11);
  long long v66 = v62;
  long long v67 = v63;
  long long v68 = v64;
  uint64_t v69 = v65;
  uint64_t v52 = *((void *)&v62 + 1);
  unint64_t v51 = v63;
  id v36 = v27;
  id v54 = v28;
  id v37 = v30;
  id v53 = v29;
  id v38 = v31;
  id v39 = v32;
  id v40 = v33;
  id v41 = v50;
  unint64_t v42 = v57;
  unint64_t v57 = v35;
  sub_1DB04239C(v34, (unint64_t)v35);
  unint64_t v43 = v56;
  int v44 = sub_1DB063BB8(v52, v51, v42);
  if (v43)
  {

    sub_1DB042664(v34, (unint64_t)v57);
LABEL_8:
    sub_1DB069194((uint64_t)&v58);
    return 0;
  }
  LODWORD(v56) = v44;
  int v46 = sub_1DB05BAF0((uint64_t)v36, (uint64_t)v54, v37, v39, (uint64_t)v55, v34, (unint64_t)v57, v41, v42);
  id v47 = v53;
  uint64_t v52 = v34;
  if (objc_msgSend(*((id *)&v67 + 1), sel_isEqual_, (void)v71))
  {
    unsigned int v48 = objc_msgSend((id)v68, sel_isEqual_, (void)v70);

    sub_1DB042664(v52, (unint64_t)v57);
    sub_1DB069194((uint64_t)&v58);
    if (v56) {
      return v46 & v48;
    }
    return 0;
  }

  sub_1DB042664(v52, (unint64_t)v57);
  sub_1DB069194((uint64_t)&v58);
  unsigned int v48 = 0;
  uint64_t result = 0;
  if (v56) {
    return v46 & v48;
  }
  return result;
}

id KVACServer.__deallocating_deinit()
{
  return sub_1DB0631E0(type metadata accessor for KVACServer);
}

id sub_1DB0631E0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_1DB0632DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a3 < 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a6;
  if ((unsigned __int128)(a3 * (__int128)a6) >> 64 != (a3 * a6) >> 63)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v11 = sub_1DB0642F4(a1, a2, a4, a5, a3 * a6);
  if (v7) {
    return v8;
  }
  unint64_t v13 = v11;
  unint64_t v14 = v12;
  uint64_t v32 = MEMORY[0x1E01881D0](0, a3, 0, MEMORY[0x1E4FBC860]);
  sub_1DB0C5198();
  sub_1DB0C4F38();
  uint64_t v15 = 0;
  unsigned int v29 = a7 & 1;
  uint64_t v27 = v8;
  uint64_t v28 = v13;
  do
  {
    if (a3 == v15)
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    uint64_t v16 = v15 * v8;
    if ((unsigned __int128)(v15 * (__int128)v8) >> 64 != (v15 * v8) >> 63) {
      goto LABEL_19;
    }
    if (__OFADD__(v16, v8)) {
      goto LABEL_20;
    }
    if (v16 + v8 < v16) {
      goto LABEL_21;
    }
    unint64_t v17 = v14;
    uint64_t v18 = sub_1DB0C4A28();
    unint64_t v20 = v19;
    unsigned int v31 = 0;
    sub_1DB04239C(v18, v19);
    sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
    sub_1DB0C4D78();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
    swift_dynamicCast();
    id v21 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
    unint64_t v22 = (void *)sub_1DB0C49E8();
    id v23 = objc_msgSend(v21, sel_initWithData_inGroup_reduction_corecryptoError_, v22, v30, v29, &v31);
    sub_1DB042664(v18, v20);

    if (!v23)
    {
      uint64_t v8 = v31;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v24 = v8;
      *(unsigned char *)(v24 + 4) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      sub_1DB042664(v28, v17);
      sub_1DB042664(v18, v20);
      return v8;
    }
    MEMORY[0x1E0188080]();
    if (*(void *)(v32 + 16) >= *(void *)(v32 + 24) >> 1) {
      sub_1DB0C51A8();
    }
    ++v15;
    sub_1DB0C51C8();
    sub_1DB0C5198();
    sub_1DB042664(v18, v20);
    unint64_t v14 = v17;
    uint64_t v8 = v27;
  }
  while (a3 != v15);
  uint64_t v8 = v32;
  uint64_t v26 = *(void *)(v32 + 16);
  sub_1DB042664(v28, v17);
  if (v26 != a3) {
LABEL_24:
  }
    __break(1u);
  return v8;
}

uint64_t sub_1DB063600(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v18 = a2;
  uint64_t v40 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004772, v18, a1);

  id v19 = a3;
  uint64_t v20 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004872, v19, a1);

  id v21 = a4;
  uint64_t v22 = sub_1DB07B7E8(85, 0xE100000000000000, v21, a1);

  id v23 = a5;
  sub_1DB07B7E8(0x6F43656D69725055, 0xEC00000074696D6DLL, v23, a1);

  id v24 = a6;
  uint64_t v25 = sub_1DB07B7E8(0x74696D6D6F43316DLL, 0xE800000000000000, v24, a1);

  id v26 = a7;
  uint64_t v39 = sub_1DB07B7E8(86, 0xE100000000000000, v26, a1);

  id v27 = a8;
  uint64_t v28 = sub_1DB07B7E8(12632, 0xE200000000000000, v27, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1DB0C7D30;
  *(void *)(v29 + 32) = a9;
  *(void *)(v29 + 40) = v22;
  *(void *)(v29 + 48) = a10;
  *(void *)(v29 + 56) = v20;
  uint64_t v30 = *(void **)(a1 + 48);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v30 = sub_1DB07E548(0, v30[2] + 1, 1, v30);
  }
  unint64_t v32 = v30[2];
  unint64_t v31 = v30[3];
  if (v32 >= v31 >> 1) {
    uint64_t v30 = sub_1DB07E548((void *)(v31 > 1), v32 + 1, 1, v30);
  }
  v30[2] = v32 + 1;
  uint64_t v33 = &v30[2 * v32];
  v33[4] = v25;
  v33[5] = v29;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v30;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1DB0C7D30;
  *(void *)(v34 + 32) = a10;
  *(void *)(v34 + 40) = v28;
  *(void *)(v34 + 48) = a11;
  *(void *)(v34 + 56) = v40;
  unint64_t v35 = v30[2];
  unint64_t v36 = v30[3];
  sub_1DB0C5188();
  if (v35 >= v36 >> 1) {
    uint64_t v30 = sub_1DB07E548((void *)(v36 > 1), v35 + 1, 1, v30);
  }
  v30[2] = v35 + 1;
  id v37 = &v30[2 * v35];
  v37[4] = v39;
  v37[5] = v34;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v30;
  return result;
}

uint64_t sub_1DB0638DC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v18 = a2;
  uint64_t v40 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004772, v18, a1);

  id v19 = a3;
  uint64_t v20 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004872, v19, a1);

  id v21 = a4;
  uint64_t v22 = sub_1DB07B95C(85, 0xE100000000000000, v21, a1);

  id v23 = a5;
  sub_1DB07B95C(0x6F43656D69725055, 0xEC00000074696D6DLL, v23, a1);

  id v24 = a6;
  uint64_t v25 = sub_1DB07B95C(0x74696D6D6F43316DLL, 0xE800000000000000, v24, a1);

  id v26 = a7;
  uint64_t v39 = sub_1DB07B95C(86, 0xE100000000000000, v26, a1);

  id v27 = a8;
  uint64_t v28 = sub_1DB07B95C(12632, 0xE200000000000000, v27, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1DB0C7D30;
  *(void *)(v29 + 32) = a9;
  *(void *)(v29 + 40) = v22;
  *(void *)(v29 + 48) = a10;
  *(void *)(v29 + 56) = v20;
  uint64_t v30 = *(void **)(a1 + 40);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v30 = sub_1DB07E548(0, v30[2] + 1, 1, v30);
  }
  unint64_t v32 = v30[2];
  unint64_t v31 = v30[3];
  if (v32 >= v31 >> 1) {
    uint64_t v30 = sub_1DB07E548((void *)(v31 > 1), v32 + 1, 1, v30);
  }
  v30[2] = v32 + 1;
  uint64_t v33 = &v30[2 * v32];
  v33[4] = v25;
  v33[5] = v29;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v30;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1DB0C7D30;
  *(void *)(v34 + 32) = a10;
  *(void *)(v34 + 40) = v28;
  *(void *)(v34 + 48) = a11;
  *(void *)(v34 + 56) = v40;
  unint64_t v35 = v30[2];
  unint64_t v36 = v30[3];
  sub_1DB0C5188();
  if (v35 >= v36 >> 1) {
    uint64_t v30 = sub_1DB07E548((void *)(v36 > 1), v35 + 1, 1, v30);
  }
  v30[2] = v35 + 1;
  id v37 = &v30[2 * v35];
  v37[4] = v39;
  v37[5] = v34;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v30;
  return result;
}

uint64_t sub_1DB063BB8(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v8 = sub_1DB05C118(0xD00000000000001CLL, 0x80000001DB0CB830);
  unint64_t v10 = v9;
  sub_1DB073FA8(a1, a2, v8, v9);
  if (v4)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    unint64_t v12 = v11;
    sub_1DB042664(v8, v10);
    *(void *)&long long v22 = 0xD00000000000001CLL;
    *((void *)&v22 + 1) = 0x80000001DB0CB830;
    *((void *)&v23 + 1) = MEMORY[0x1E4FBC860];
    *(void *)&long long v24 = MEMORY[0x1E4FBC860];
    *((void *)&v24 + 1) = MEMORY[0x1E4FBC860];
    unint64_t v13 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v15 = *((void *)v13 + 2);
    unint64_t v14 = *((void *)v13 + 3);
    unint64_t v16 = v14 >> 1;
    unint64_t v17 = v15 + 1;
    if (v14 >> 1 <= v15)
    {
      unint64_t v13 = sub_1DB07E444((char *)(v14 > 1), v15 + 1, 1, v13);
      unint64_t v14 = *((void *)v13 + 3);
      unint64_t v16 = v14 >> 1;
    }
    *((void *)v13 + 2) = v17;
    id v18 = &v13[16 * v15];
    *((void *)v18 + 4) = 12653;
    *((void *)v18 + 5) = 0xE200000000000000;
    if (v16 <= v17) {
      unint64_t v13 = sub_1DB07E444((char *)(v14 > 1), v15 + 2, 1, v13);
    }
    *((void *)v13 + 2) = v15 + 2;
    id v19 = &v13[16 * v17];
    *((void *)v19 + 4) = 122;
    *((void *)v19 + 5) = 0xE100000000000000;
    *(void *)&long long v23 = v13;
    sub_1DB064098((uint64_t)&v22, a3, v12, *(void **)v3, *(void **)(v3 + 32), *(void **)(v3 + 24), v15, *((void *)v13 + 2) - 1);
    long long v25 = v22;
    long long v26 = v23;
    long long v27 = v24;
    char v20 = sub_1DB074C90(*(void *)(v3 + 40), *(void *)(v3 + 48));

    long long v28 = v25;
    sub_1DB0697C0((uint64_t)&v28);
    uint64_t v29 = v26;
    sub_1DB0697EC((uint64_t)&v29);
    uint64_t v30 = *((void *)&v26 + 1);
    sub_1DB0697EC((uint64_t)&v30);
    uint64_t v31 = v27;
    sub_1DB0697EC((uint64_t)&v31);
    uint64_t v32 = *((void *)&v27 + 1);
    sub_1DB0697EC((uint64_t)&v32);
    return v20 & 1;
  }
  return result;
}

uint64_t sub_1DB063E3C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v15 = a2;
  uint64_t v16 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004872, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000005472, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_1DB07B7E8(84, 0xE100000000000000, v19, a1);

  id v21 = a5;
  uint64_t v22 = sub_1DB07B7E8(85, 0xE100000000000000, v21, a1);

  id v23 = a6;
  uint64_t v24 = sub_1DB07B7E8(0x74696D6D6F43316DLL, 0xE800000000000000, v23, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1DB0C7D30;
  *(void *)(v25 + 32) = a7;
  *(void *)(v25 + 40) = v22;
  *(void *)(v25 + 48) = a8;
  *(void *)(v25 + 56) = v16;
  long long v26 = *(void **)(a1 + 48);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v26 = sub_1DB07E548(0, v26[2] + 1, 1, v26);
  }
  unint64_t v28 = v26[2];
  unint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    long long v26 = sub_1DB07E548((void *)(v27 > 1), v28 + 1, 1, v26);
  }
  v26[2] = v28 + 1;
  uint64_t v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v26;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1DB0C77B0;
  *(void *)(v30 + 32) = a7;
  *(void *)(v30 + 40) = v18;
  unint64_t v31 = v26[2];
  unint64_t v32 = v26[3];
  sub_1DB0C5188();
  if (v31 >= v32 >> 1) {
    long long v26 = sub_1DB07E548((void *)(v32 > 1), v31 + 1, 1, v26);
  }
  v26[2] = v31 + 1;
  uint64_t v33 = &v26[2 * v31];
  v33[4] = v20;
  v33[5] = v30;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v26;
  return result;
}

uint64_t sub_1DB064098(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v15 = a2;
  uint64_t v16 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004872, v15, a1);

  id v17 = a3;
  uint64_t v18 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000005472, v17, a1);

  id v19 = a4;
  uint64_t v20 = sub_1DB07B95C(84, 0xE100000000000000, v19, a1);

  id v21 = a5;
  uint64_t v22 = sub_1DB07B95C(85, 0xE100000000000000, v21, a1);

  id v23 = a6;
  uint64_t v24 = sub_1DB07B95C(0x74696D6D6F43316DLL, 0xE800000000000000, v23, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1DB0C7D30;
  *(void *)(v25 + 32) = a7;
  *(void *)(v25 + 40) = v22;
  *(void *)(v25 + 48) = a8;
  *(void *)(v25 + 56) = v16;
  long long v26 = *(void **)(a1 + 40);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v26 = sub_1DB07E548(0, v26[2] + 1, 1, v26);
  }
  unint64_t v28 = v26[2];
  unint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    long long v26 = sub_1DB07E548((void *)(v27 > 1), v28 + 1, 1, v26);
  }
  v26[2] = v28 + 1;
  uint64_t v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v26;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1DB0C77B0;
  *(void *)(v30 + 32) = a7;
  *(void *)(v30 + 40) = v18;
  unint64_t v31 = v26[2];
  unint64_t v32 = v26[3];
  sub_1DB0C5188();
  if (v31 >= v32 >> 1) {
    long long v26 = sub_1DB07E548((void *)(v32 > 1), v31 + 1, 1, v26);
  }
  v26[2] = v31 + 1;
  uint64_t v33 = &v26[2 * v31];
  v33[4] = v20;
  v33[5] = v30;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v26;
  return result;
}

unint64_t sub_1DB0642F4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v115 = sub_1DB0C4FA8();
  uint64_t v113 = *(void *)(v115 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v115);
  v114 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v118 = (char *)&v92 - v13;
  uint64_t v14 = sub_1DB0C4D28();
  uint64_t v112 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  v109 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v92 - v17;
  sub_1DB069A4C(&qword_1EBE7DF90, MEMORY[0x1E4F24FA0]);
  uint64_t v111 = v14;
  uint64_t v19 = sub_1DB0C4F48();
  uint64_t v98 = a5;
  uint64_t v99 = v19;
  double v20 = ceil((double)a5 / (double)v19);
  if ((~*(void *)&v20 & 0x7FF0000000000000) == 0) {
    goto LABEL_39;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  uint64_t v110 = (uint64_t)v20;
  if ((uint64_t)v20 > 255)
  {
    sub_1DB069A94();
    swift_allocError();
    swift_willThrow();
    return a2;
  }
  uint64_t v21 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_43;
      }
      uint64_t v21 = HIDWORD(a3) - (int)a3;
LABEL_11:
      v116 = v18;
      sub_1DB05A7A4(v21, 1);
      uint64_t v25 = v24;
      unint64_t v27 = v26;
      *(void *)&long long v120 = a3;
      *((void *)&v120 + 1) = a4;
      sub_1DB04239C(a3, a4);
      sub_1DB05DEE8(v25, v27);
      sub_1DB042664(v25, v27);
      unint64_t v29 = *((void *)&v120 + 1);
      uint64_t v28 = v120;
      uint64_t v30 = sub_1DB069A4C(&qword_1EBE7DF98, MEMORY[0x1E4F25180]);
      uint64_t v31 = sub_1DB0C4CC8();
      *(void *)&long long v120 = sub_1DB065640(v31);
      *((void *)&v120 + 1) = v32;
      sub_1DB09788C(&v120, 0);
      uint64_t v117 = v5;
      unsigned long long v33 = v120;
      sub_1DB05A7A4(v98, 2);
      uint64_t v35 = v34;
      unint64_t v37 = v36;
      long long v123 = v33;
      unint64_t v96 = v33 >> 64;
      uint64_t v97 = v33;
      sub_1DB04239C(v33, *((unint64_t *)&v33 + 1));
      sub_1DB04239C(a1, a2);
      sub_1DB05DEE8(a1, a2);
      sub_1DB042664(a1, a2);
      long long v38 = v123;
      long long v120 = v123;
      sub_1DB04239C(v123, *((unint64_t *)&v123 + 1));
      sub_1DB04239C(v35, v37);
      sub_1DB05DEE8(v35, v37);
      uint64_t v95 = v35;
      unint64_t v94 = v37;
      sub_1DB042664(v35, v37);
      sub_1DB042664(v38, *((unint64_t *)&v38 + 1));
      long long v39 = v120;
      sub_1DB05A7A4(0, 1);
      uint64_t v41 = v40;
      unint64_t v43 = v42;
      long long v123 = v39;
      sub_1DB04239C(v39, *((unint64_t *)&v39 + 1));
      sub_1DB05DEE8(v41, v43);
      sub_1DB042664(v41, v43);
      sub_1DB042664(v39, *((unint64_t *)&v39 + 1));
      long long v44 = v123;
      long long v120 = v123;
      sub_1DB04239C(v123, *((unint64_t *)&v123 + 1));
      sub_1DB04239C(v28, v29);
      sub_1DB05DEE8(v28, v29);
      uint64_t v108 = v28;
      unint64_t v107 = v29;
      unint64_t v45 = v29;
      uint64_t v46 = v115;
      sub_1DB042664(v28, v45);
      sub_1DB042664(v44, *((unint64_t *)&v44 + 1));
      unint64_t v48 = *((void *)&v120 + 1);
      uint64_t v47 = v120;
      uint64_t v49 = v118;
      sub_1DB0C4CF8();
      switch(v48 >> 62)
      {
        case 1uLL:
          if (v47 >> 32 < (int)v47) {
            goto LABEL_45;
          }
          sub_1DB04239C(v47, v48);
          uint64_t v53 = v117;
          sub_1DB097B14((int)v47, v47 >> 32);
          uint64_t v117 = v53;
          break;
        case 2uLL:
          uint64_t v50 = *(void *)(v47 + 16);
          uint64_t v51 = *(void *)(v47 + 24);
          sub_1DB04239C(v47, v48);
          swift_retain();
          swift_retain();
          uint64_t v52 = v117;
          sub_1DB097B14(v50, v51);
          if (v52) {
            goto LABEL_47;
          }
          uint64_t v117 = 0;
          swift_release();
          swift_release();
          break;
        case 3uLL:
          *(void *)((char *)&v120 + 6) = 0;
          *(void *)&long long v120 = 0;
          goto LABEL_16;
        default:
          *(void *)&long long v120 = v47;
          WORD4(v120) = v48;
          BYTE10(v120) = BYTE2(v48);
          BYTE11(v120) = BYTE3(v48);
          BYTE12(v120) = BYTE4(v48);
          BYTE13(v120) = BYTE5(v48);
LABEL_16:
          sub_1DB0C4CD8();
          break;
      }
      sub_1DB042664(v47, v48);
      unint64_t v54 = (unint64_t)v116;
      sub_1DB0C4CE8();
      id v55 = *(void (**)(char *, uint64_t))(v113 + 8);
      v113 += 8;
      v104 = v55;
      v55(v49, v46);
      uint64_t v56 = v111;
      uint64_t v121 = v111;
      uint64_t v57 = sub_1DB069A4C(&qword_1EBE7DF88, MEMORY[0x1E4F24FA0]);
      uint64_t v122 = v57;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v120);
      uint64_t v59 = v112;
      long long v60 = *(void (**)(uint64_t *, char *, uint64_t))(v112 + 16);
      uint64_t v102 = v112 + 16;
      v101 = v60;
      v60(boxed_opaque_existential_1, (char *)v54, v56);
      __swift_project_boxed_opaque_existential_1(&v120, v121);
      uint64_t v61 = v117;
      uint64_t v103 = v57;
      sub_1DB0C4908();
      uint64_t v62 = v61;
      long long v63 = *(void (**)(char *, uint64_t))(v59 + 8);
      uint64_t v112 = v59 + 8;
      v100 = v63;
      v63((char *)v54, v56);
      unint64_t v105 = *((void *)&v123 + 1);
      uint64_t v106 = v123;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
      long long v123 = xmmword_1DB0C7A30;
      if (v110 < 1) {
        goto LABEL_42;
      }
      unint64_t v92 = v48;
      uint64_t v93 = v47;
      v118 = (char *)v30;
      uint64_t v64 = 1;
      break;
    case 2uLL:
      uint64_t v23 = *(void *)(a3 + 16);
      uint64_t v22 = *(void *)(a3 + 24);
      uint64_t v21 = v22 - v23;
      if (!__OFSUB__(v22, v23)) {
        goto LABEL_11;
      }
      goto LABEL_44;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v21 = BYTE6(a4);
      goto LABEL_11;
  }
  while (2)
  {
    if (v64 == 1)
    {
      uint64_t v65 = v106;
      unint64_t v66 = v105;
      sub_1DB04239C(v106, v105);
    }
    else
    {
      long long v67 = v123;
      sub_1DB04239C(v123, *((unint64_t *)&v123 + 1));
      sub_1DB094810(v99, v67, *((unint64_t *)&v67 + 1), (uint64_t *)&v120);
      long long v68 = v120;
      uint64_t v65 = sub_1DB0C2EDC(v106, v105, v120, *((unint64_t *)&v120 + 1));
      unint64_t v66 = v69;
      sub_1DB042664(v68, *((unint64_t *)&v68 + 1));
    }
    sub_1DB05A7A4(v64, 1);
    uint64_t v71 = v70;
    unint64_t v73 = v72;
    *(void *)&long long v119 = v65;
    *((void *)&v119 + 1) = v66;
    v116 = (char *)v66;
    sub_1DB04239C(v65, v66);
    sub_1DB05DEE8(v71, v73);
    sub_1DB042664(v71, v73);
    unint64_t v75 = *((void *)&v119 + 1);
    uint64_t v74 = v119;
    long long v120 = v119;
    uint64_t v76 = v108;
    unint64_t v77 = v107;
    sub_1DB04239C(v108, v107);
    sub_1DB04239C(v74, v75);
    sub_1DB05DEE8(v76, v77);
    sub_1DB042664(v76, v77);
    sub_1DB042664(v74, v75);
    unint64_t v79 = *((void *)&v120 + 1);
    uint64_t v78 = v120;
    id v80 = v114;
    sub_1DB0C4CF8();
    uint64_t v117 = v65;
    switch(v79 >> 62)
    {
      case 1uLL:
        if (v78 >> 32 < (int)v78)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        sub_1DB04239C(v78, v79);
        id v80 = v114;
        uint64_t v84 = v115;
        sub_1DB097B14((int)v78, v78 >> 32);
        sub_1DB042664(v78, v79);
LABEL_32:
        id v85 = v109;
        sub_1DB0C4CE8();
        v104(v80, v84);
        sub_1DB042664(v78, v79);
        uint64_t v86 = v111;
        uint64_t v121 = v111;
        uint64_t v122 = v103;
        v87 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v120);
        v101(v87, v85, v86);
        __swift_project_boxed_opaque_existential_1(&v120, v121);
        sub_1DB0C4908();
        v100(v85, v86);
        long long v88 = v119;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
        sub_1DB0C4A18();
        sub_1DB042664(v88, *((unint64_t *)&v88 + 1));
        sub_1DB042664(v117, (unint64_t)v116);
        if (v110 == v64) {
          goto LABEL_36;
        }
        BOOL v89 = __OFADD__(v64++, 1);
        uint64_t v46 = v115;
        if (!v89) {
          continue;
        }
        __break(1u);
LABEL_36:
        long long v90 = v123;
        sub_1DB04239C(v123, *((unint64_t *)&v123 + 1));
        sub_1DB05628C(v98, v90, *((unint64_t *)&v90 + 1), (uint64_t *)&v120);
        a2 = sub_1DB05BE64(v120, *((unint64_t *)&v120 + 1));
        sub_1DB042664(v93, v92);
        sub_1DB042664(v95, v94);
        sub_1DB042664(v97, v96);
        sub_1DB042664(v108, v107);
        sub_1DB042664(v106, v105);
        sub_1DB042664(v90, *((unint64_t *)&v90 + 1));
        return a2;
      case 2uLL:
        uint64_t v81 = *(void *)(v78 + 16);
        uint64_t v82 = *(void *)(v78 + 24);
        sub_1DB04239C(v78, v79);
        swift_retain();
        swift_retain();
        uint64_t v83 = v81;
        id v80 = v114;
        sub_1DB097B14(v83, v82);
        if (v62)
        {
          swift_release();
          swift_release();
          __break(1u);
LABEL_47:
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x1DB064FE8);
        }
        uint64_t v62 = 0;
        swift_release();
        swift_release();
        sub_1DB042664(v78, v79);
        uint64_t v84 = v115;
        goto LABEL_32;
      case 3uLL:
        *(void *)((char *)&v119 + 6) = 0;
        *(void *)&long long v119 = 0;
        goto LABEL_29;
      default:
        *(void *)&long long v119 = v78;
        WORD4(v119) = v79;
        BYTE10(v119) = BYTE2(v79);
        BYTE11(v119) = BYTE3(v79);
        BYTE12(v119) = BYTE4(v79);
        BYTE13(v119) = BYTE5(v79);
LABEL_29:
        uint64_t v84 = v46;
        sub_1DB0C4CD8();
        sub_1DB042664(v78, v79);
        goto LABEL_32;
    }
  }
}

void *sub_1DB065018(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_1DB065088(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_1DB0C7A30;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v4, sub_1DB0C48D8())) {
        goto LABEL_24;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v13 = sub_1DB0C4888();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_1DB06538C((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t result = sub_1DB06538C(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

char *sub_1DB06538C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_1DB0C48A8();
  if (!result) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  uint64_t result = (char *)sub_1DB0C48D8();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_1DB0C48C8();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_1DB065440(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DB0C48A8();
  if (!result || (uint64_t result = sub_1DB0C48D8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1DB0C48C8();
      return sub_1DB0C49A8();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB0654D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1DB0C5108();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E0187FF0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1DB065550@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    sub_1DB0C5188();
    uint64_t result = sub_1DB0C5298();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned char *sub_1DB0655DC(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_1DB0C0A50(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_1DB0C0B14((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_1DB0C0B90((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1DB065640(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_1DB0C48F8();
      swift_allocObject();
      sub_1DB0C48B8();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1DB0C4988();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1DB0656E0(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA8);
  uint64_t v10 = sub_1DB04761C(&qword_1EBE7DFB0, &qword_1EBE7DFA8);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  sub_1DB0C5188();
  sub_1DB0C07E8(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t sub_1DB0657A0(void *a1, void *a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_1DB0C4F98();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1DB0C4D18();
  uint64_t v43 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v42 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (!v12) {
    goto LABEL_14;
  }
  unint64_t v13 = v12;
  uint64_t v41 = v7;
  uint64_t v14 = sub_1DB0C4A08();
  unint64_t v16 = v15;

  id v17 = objc_msgSend(a2, sel_serializedPublicKey_, 1);
  if (!v17)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  uint64_t v18 = v17;
  uint64_t v19 = sub_1DB0C4A08();
  unint64_t v21 = v20;

  *(void *)&long long v44 = v14;
  *((void *)&v44 + 1) = v16;
  sub_1DB04239C(v14, v16);
  sub_1DB05DEE8(v19, v21);
  sub_1DB042664(v19, v21);
  sub_1DB042664(v14, v16);
  long long v22 = v44;
  id v23 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
  if (!v23) {
    goto LABEL_16;
  }
  uint64_t v24 = v23;
  uint64_t v25 = sub_1DB0C4A08();
  unint64_t v27 = v26;

  long long v47 = v22;
  sub_1DB04239C(v22, *((unint64_t *)&v22 + 1));
  sub_1DB05DEE8(v25, v27);
  sub_1DB042664(v25, v27);
  sub_1DB042664(v22, *((unint64_t *)&v22 + 1));
  long long v28 = v47;
  uint64_t v29 = sub_1DB05C118(0xD00000000000001ELL, 0x80000001DB0CB910);
  unint64_t v31 = v30;
  long long v44 = v28;
  sub_1DB04239C(v28, *((unint64_t *)&v28 + 1));
  sub_1DB05DEE8(v29, v31);
  sub_1DB042664(v29, v31);
  sub_1DB042664(v28, *((unint64_t *)&v28 + 1));
  unint64_t v33 = *((void *)&v44 + 1);
  uint64_t v32 = v44;
  sub_1DB069A4C((unint64_t *)&qword_1EA8FE0A0, MEMORY[0x1E4F25170]);
  sub_1DB0C4CF8();
  switch(v33 >> 62)
  {
    case 1uLL:
      if (v32 >> 32 < (int)v32)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      sub_1DB04239C(v32, v33);
      sub_1DB04A5B4((int)v32, v32 >> 32);
LABEL_9:
      sub_1DB042664(v32, v33);
LABEL_12:
      unint64_t v36 = v42;
      sub_1DB0C4CE8();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v6);
      sub_1DB042664(v32, v33);
      uint64_t v45 = v10;
      uint64_t v46 = sub_1DB069A4C(&qword_1EA8FE3C0, MEMORY[0x1E4F24F80]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
      uint64_t v38 = v43;
      (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 16))(boxed_opaque_existential_1, v36, v10);
      __swift_project_boxed_opaque_existential_1(&v44, v45);
      sub_1DB0C4908();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v10);
      uint64_t v39 = v47;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      return v39;
    case 2uLL:
      uint64_t v34 = *(void *)(v32 + 16);
      uint64_t v35 = *(void *)(v32 + 24);
      sub_1DB04239C(v32, v33);
      swift_retain();
      swift_retain();
      sub_1DB04A5B4(v34, v35);
      swift_release();
      swift_release();
      goto LABEL_9;
    case 3uLL:
      *(void *)((char *)&v47 + 6) = 0;
      *(void *)&long long v47 = 0;
      goto LABEL_11;
    default:
      *(void *)&long long v47 = v32;
      WORD4(v47) = v33;
      BYTE10(v47) = BYTE2(v33);
      BYTE11(v47) = BYTE3(v33);
      BYTE12(v47) = BYTE4(v33);
      BYTE13(v47) = BYTE5(v33);
LABEL_11:
      sub_1DB0C4CD8();
      sub_1DB042664(v32, v33);
      goto LABEL_12;
  }
}

uint64_t sub_1DB065D68(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  id v28 = a4;
  uint64_t v99 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004772, v28, a1);

  id v29 = a5;
  uint64_t v30 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004872, v29, a1);

  id v31 = a2;
  uint64_t v94 = sub_1DB07B7E8(0x636E45316DLL, 0xE500000000000000, v31, a1);

  id v32 = a3;
  uint64_t v93 = sub_1DB07B7E8(0x636E45326DLL, 0xE500000000000000, v32, a1);

  id v33 = a6;
  uint64_t v91 = sub_1DB07B7E8(85, 0xE100000000000000, v33, a1);

  id v34 = a7;
  uint64_t v92 = sub_1DB07B7E8(0x6D69725055636E65, 0xE900000000000065, v34, a1);

  id v35 = a8;
  uint64_t v98 = sub_1DB07B7E8(12376, 0xE200000000000000, v35, a1);

  id v36 = a9;
  uint64_t v95 = sub_1DB07B7E8(12632, 0xE200000000000000, v36, a1);

  id v37 = a10;
  uint64_t v96 = sub_1DB07B7E8(12888, 0xE200000000000000, v37, a1);

  id v38 = a11;
  uint64_t v89 = sub_1DB07B7E8(0x7875413058, 0xE500000000000000, v38, a1);

  id v39 = a12;
  uint64_t v90 = sub_1DB07B7E8(0x7875413158, 0xE500000000000000, v39, a1);

  id v40 = a13;
  uint64_t v97 = sub_1DB07B7E8(0x7875413258, 0xE500000000000000, v40, a1);

  id v41 = a14;
  uint64_t v42 = sub_1DB07B7E8(2020950344, 0xE400000000000000, v41, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1DB0C7D30;
  *(void *)(v43 + 32) = a15;
  *(void *)(v43 + 40) = v99;
  *(void *)(v43 + 48) = a16;
  *(void *)(v43 + 56) = v30;
  long long v44 = *(void **)(a1 + 48);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v44 = sub_1DB07E548(0, v44[2] + 1, 1, v44);
  }
  unint64_t v46 = v44[2];
  unint64_t v45 = v44[3];
  if (v46 >= v45 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v45 > 1), v46 + 1, 1, v44);
  }
  v44[2] = v46 + 1;
  long long v47 = &v44[2 * v46];
  v47[4] = v98;
  v47[5] = v43;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1DB0C77B0;
  *(void *)(v48 + 32) = a17;
  *(void *)(v48 + 40) = v30;
  unint64_t v50 = v44[2];
  unint64_t v49 = v44[3];
  sub_1DB0C5188();
  if (v50 >= v49 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v49 > 1), v50 + 1, 1, v44);
  }
  v44[2] = v50 + 1;
  uint64_t v51 = &v44[2 * v50];
  v51[4] = v95;
  v51[5] = v48;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1DB0C77B0;
  *(void *)(v52 + 32) = a18;
  *(void *)(v52 + 40) = v30;
  unint64_t v53 = v44[2];
  unint64_t v54 = v44[3];
  sub_1DB0C5188();
  if (v53 >= v54 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v54 > 1), v53 + 1, 1, v44);
  }
  v44[2] = v53 + 1;
  id v55 = &v44[2 * v53];
  v55[4] = v96;
  v55[5] = v52;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1DB0C77B0;
  *(void *)(v56 + 32) = a19;
  *(void *)(v56 + 40) = v30;
  unint64_t v57 = v44[2];
  unint64_t v58 = v44[3];
  sub_1DB0C5188();
  if (v57 >= v58 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v58 > 1), v57 + 1, 1, v44);
  }
  v44[2] = v57 + 1;
  uint64_t v59 = &v44[2 * v57];
  v59[4] = v42;
  v59[5] = v56;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1DB0C77B0;
  *(void *)(v60 + 32) = a16;
  *(void *)(v60 + 40) = v42;
  unint64_t v61 = v44[2];
  unint64_t v62 = v44[3];
  sub_1DB0C5188();
  if (v61 >= v62 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v62 > 1), v61 + 1, 1, v44);
  }
  v44[2] = v61 + 1;
  long long v63 = &v44[2 * v61];
  v63[4] = v89;
  v63[5] = v60;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_1DB0C77B0;
  *(void *)(v64 + 32) = a19;
  *(void *)(v64 + 40) = v95;
  unint64_t v65 = v44[2];
  unint64_t v66 = v44[3];
  sub_1DB0C5188();
  if (v65 >= v66 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v66 > 1), v65 + 1, 1, v44);
  }
  v44[2] = v65 + 1;
  long long v67 = &v44[2 * v65];
  v67[4] = v90;
  v67[5] = v64;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1DB0C77B0;
  *(void *)(v68 + 32) = a20;
  *(void *)(v68 + 40) = v30;
  unint64_t v69 = v44[2];
  unint64_t v70 = v44[3];
  sub_1DB0C5188();
  if (v69 >= v70 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v70 > 1), v69 + 1, 1, v44);
  }
  v44[2] = v69 + 1;
  uint64_t v71 = &v44[2 * v69];
  v71[4] = v90;
  v71[5] = v68;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_1DB0C77B0;
  *(void *)(v72 + 32) = a19;
  *(void *)(v72 + 40) = v96;
  unint64_t v73 = v44[2];
  unint64_t v74 = v44[3];
  sub_1DB0C5188();
  if (v73 >= v74 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v74 > 1), v73 + 1, 1, v44);
  }
  v44[2] = v73 + 1;
  unint64_t v75 = &v44[2 * v73];
  v75[4] = v97;
  v75[5] = v72;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_1DB0C77B0;
  *(void *)(v76 + 32) = a21;
  *(void *)(v76 + 40) = v30;
  unint64_t v77 = v44[2];
  unint64_t v78 = v44[3];
  sub_1DB0C5188();
  if (v77 >= v78 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v78 > 1), v77 + 1, 1, v44);
  }
  v44[2] = v77 + 1;
  unint64_t v79 = &v44[2 * v77];
  v79[4] = v97;
  v79[5] = v76;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_1DB0C77B0;
  *(void *)(v80 + 32) = a19;
  *(void *)(v80 + 40) = v99;
  unint64_t v81 = v44[2];
  unint64_t v82 = v44[3];
  sub_1DB0C5188();
  if (v81 >= v82 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v82 > 1), v81 + 1, 1, v44);
  }
  v44[2] = v81 + 1;
  uint64_t v83 = &v44[2 * v81];
  v83[4] = v91;
  v83[5] = v80;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1DB0C7D40;
  *(void *)(v84 + 32) = a19;
  *(void *)(v84 + 40) = v98;
  *(void *)(v84 + 48) = a20;
  *(void *)(v84 + 56) = v94;
  *(void *)(v84 + 64) = a21;
  *(void *)(v84 + 72) = v93;
  unint64_t v85 = v44[2];
  unint64_t v86 = v44[3];
  sub_1DB0C5188();
  if (v85 >= v86 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v86 > 1), v85 + 1, 1, v44);
  }
  v44[2] = v85 + 1;
  v87 = &v44[2 * v85];
  v87[4] = v92;
  v87[5] = v84;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = v44;
  return result;
}

uint64_t sub_1DB0665B0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  id v28 = a4;
  uint64_t v99 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004772, v28, a1);

  id v29 = a5;
  uint64_t v30 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004872, v29, a1);

  id v31 = a2;
  uint64_t v94 = sub_1DB07B95C(0x636E45316DLL, 0xE500000000000000, v31, a1);

  id v32 = a3;
  uint64_t v93 = sub_1DB07B95C(0x636E45326DLL, 0xE500000000000000, v32, a1);

  id v33 = a6;
  uint64_t v91 = sub_1DB07B95C(85, 0xE100000000000000, v33, a1);

  id v34 = a7;
  uint64_t v92 = sub_1DB07B95C(0x6D69725055636E65, 0xE900000000000065, v34, a1);

  id v35 = a8;
  uint64_t v98 = sub_1DB07B95C(12376, 0xE200000000000000, v35, a1);

  id v36 = a9;
  uint64_t v95 = sub_1DB07B95C(12632, 0xE200000000000000, v36, a1);

  id v37 = a10;
  uint64_t v96 = sub_1DB07B95C(12888, 0xE200000000000000, v37, a1);

  id v38 = a11;
  uint64_t v89 = sub_1DB07B95C(0x7875413058, 0xE500000000000000, v38, a1);

  id v39 = a12;
  uint64_t v90 = sub_1DB07B95C(0x7875413158, 0xE500000000000000, v39, a1);

  id v40 = a13;
  uint64_t v97 = sub_1DB07B95C(0x7875413258, 0xE500000000000000, v40, a1);

  id v41 = a14;
  uint64_t v42 = sub_1DB07B95C(2020950344, 0xE400000000000000, v41, a1);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1DB0C7D30;
  *(void *)(v43 + 32) = a15;
  *(void *)(v43 + 40) = v99;
  *(void *)(v43 + 48) = a16;
  *(void *)(v43 + 56) = v30;
  long long v44 = *(void **)(a1 + 40);
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v44 = sub_1DB07E548(0, v44[2] + 1, 1, v44);
  }
  unint64_t v46 = v44[2];
  unint64_t v45 = v44[3];
  if (v46 >= v45 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v45 > 1), v46 + 1, 1, v44);
  }
  v44[2] = v46 + 1;
  long long v47 = &v44[2 * v46];
  v47[4] = v98;
  v47[5] = v43;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1DB0C77B0;
  *(void *)(v48 + 32) = a17;
  *(void *)(v48 + 40) = v30;
  unint64_t v50 = v44[2];
  unint64_t v49 = v44[3];
  sub_1DB0C5188();
  if (v50 >= v49 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v49 > 1), v50 + 1, 1, v44);
  }
  v44[2] = v50 + 1;
  uint64_t v51 = &v44[2 * v50];
  v51[4] = v95;
  v51[5] = v48;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1DB0C77B0;
  *(void *)(v52 + 32) = a18;
  *(void *)(v52 + 40) = v30;
  unint64_t v53 = v44[2];
  unint64_t v54 = v44[3];
  sub_1DB0C5188();
  if (v53 >= v54 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v54 > 1), v53 + 1, 1, v44);
  }
  v44[2] = v53 + 1;
  id v55 = &v44[2 * v53];
  v55[4] = v96;
  v55[5] = v52;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1DB0C77B0;
  *(void *)(v56 + 32) = a19;
  *(void *)(v56 + 40) = v30;
  unint64_t v57 = v44[2];
  unint64_t v58 = v44[3];
  sub_1DB0C5188();
  if (v57 >= v58 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v58 > 1), v57 + 1, 1, v44);
  }
  v44[2] = v57 + 1;
  uint64_t v59 = &v44[2 * v57];
  v59[4] = v42;
  v59[5] = v56;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1DB0C77B0;
  *(void *)(v60 + 32) = a16;
  *(void *)(v60 + 40) = v42;
  unint64_t v61 = v44[2];
  unint64_t v62 = v44[3];
  sub_1DB0C5188();
  if (v61 >= v62 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v62 > 1), v61 + 1, 1, v44);
  }
  v44[2] = v61 + 1;
  long long v63 = &v44[2 * v61];
  v63[4] = v89;
  v63[5] = v60;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_1DB0C77B0;
  *(void *)(v64 + 32) = a19;
  *(void *)(v64 + 40) = v95;
  unint64_t v65 = v44[2];
  unint64_t v66 = v44[3];
  sub_1DB0C5188();
  if (v65 >= v66 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v66 > 1), v65 + 1, 1, v44);
  }
  v44[2] = v65 + 1;
  long long v67 = &v44[2 * v65];
  v67[4] = v90;
  v67[5] = v64;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1DB0C77B0;
  *(void *)(v68 + 32) = a20;
  *(void *)(v68 + 40) = v30;
  unint64_t v69 = v44[2];
  unint64_t v70 = v44[3];
  sub_1DB0C5188();
  if (v69 >= v70 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v70 > 1), v69 + 1, 1, v44);
  }
  v44[2] = v69 + 1;
  uint64_t v71 = &v44[2 * v69];
  v71[4] = v90;
  v71[5] = v68;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_1DB0C77B0;
  *(void *)(v72 + 32) = a19;
  *(void *)(v72 + 40) = v96;
  unint64_t v73 = v44[2];
  unint64_t v74 = v44[3];
  sub_1DB0C5188();
  if (v73 >= v74 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v74 > 1), v73 + 1, 1, v44);
  }
  v44[2] = v73 + 1;
  unint64_t v75 = &v44[2 * v73];
  v75[4] = v97;
  v75[5] = v72;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_1DB0C77B0;
  *(void *)(v76 + 32) = a21;
  *(void *)(v76 + 40) = v30;
  unint64_t v77 = v44[2];
  unint64_t v78 = v44[3];
  sub_1DB0C5188();
  if (v77 >= v78 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v78 > 1), v77 + 1, 1, v44);
  }
  v44[2] = v77 + 1;
  unint64_t v79 = &v44[2 * v77];
  v79[4] = v97;
  v79[5] = v76;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_1DB0C77B0;
  *(void *)(v80 + 32) = a19;
  *(void *)(v80 + 40) = v99;
  unint64_t v81 = v44[2];
  unint64_t v82 = v44[3];
  sub_1DB0C5188();
  if (v81 >= v82 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v82 > 1), v81 + 1, 1, v44);
  }
  v44[2] = v81 + 1;
  uint64_t v83 = &v44[2 * v81];
  v83[4] = v91;
  v83[5] = v80;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1DB0C7D40;
  *(void *)(v84 + 32) = a19;
  *(void *)(v84 + 40) = v98;
  *(void *)(v84 + 48) = a20;
  *(void *)(v84 + 56) = v94;
  *(void *)(v84 + 64) = a21;
  *(void *)(v84 + 72) = v93;
  unint64_t v85 = v44[2];
  unint64_t v86 = v44[3];
  sub_1DB0C5188();
  if (v85 >= v86 >> 1) {
    long long v44 = sub_1DB07E548((void *)(v86 > 1), v85 + 1, 1, v44);
  }
  v44[2] = v85 + 1;
  v87 = &v44[2 * v85];
  v87[4] = v92;
  v87[5] = v84;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v44;
  return result;
}

uint64_t sub_1DB066DF8(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v10 = *(void **)(v4 + 16);
  unint64_t v62 = *(void **)(v4 + 32);
  long long v63 = *(void **)(v4 + 24);
  uint64_t v11 = sub_1DB0657A0(v10, v63, v62);
  unint64_t v13 = v12;
  if ((sub_1DB059454(*(void *)(v4 + 72), *(void *)(v4 + 80), v11, v12) & 1) == 0) {
    goto LABEL_3;
  }
  uint64_t v60 = a1;
  unint64_t v61 = a2;
  uint64_t v14 = *(void *)v4;
  sub_1DB067A84(v4);
  id v15 = sub_1DB07A220((void *)v14, v14);
  uint64_t v59 = (void *)v14;
  LOBYTE(v14) = objc_msgSend(v15, sel_isEqual_, v14);

  sub_1DB069848(v4);
  if ((v14 & 1) == 0)
  {
    *(void *)&long long v64 = 0xD00000000000002ALL;
    *((void *)&v64 + 1) = 0x80000001DB0CB880;
    *((void *)&v65 + 1) = MEMORY[0x1E4FBC860];
    *(void *)&long long v66 = MEMORY[0x1E4FBC860];
    *((void *)&v66 + 1) = MEMORY[0x1E4FBC860];
    uint64_t v18 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v20 = *((void *)v18 + 2);
    unint64_t v19 = *((void *)v18 + 3);
    unint64_t v21 = v19 >> 1;
    unint64_t v22 = v20 + 1;
    if (v19 >> 1 <= v20)
    {
      unint64_t v41 = *((void *)v18 + 2);
      uint64_t v42 = sub_1DB07E444((char *)(v19 > 1), v20 + 1, 1, v18);
      unint64_t v20 = v41;
      uint64_t v18 = v42;
      unint64_t v19 = *((void *)v42 + 3);
      unint64_t v21 = v19 >> 1;
    }
    *((void *)v18 + 2) = v22;
    id v23 = &v18[16 * v20];
    *((void *)v23 + 4) = 12408;
    *((void *)v23 + 5) = 0xE200000000000000;
    unint64_t v24 = v20 + 2;
    if (v21 <= v22)
    {
      unint64_t v54 = v20;
      uint64_t v43 = sub_1DB07E444((char *)(v19 > 1), v20 + 2, 1, v18);
      unint64_t v20 = v54;
      uint64_t v18 = v43;
    }
    *((void *)v18 + 2) = v24;
    uint64_t v25 = &v18[16 * v22];
    *((void *)v25 + 4) = 12664;
    *((void *)v25 + 5) = 0xE200000000000000;
    *(void *)&long long v65 = v18;
    unint64_t v27 = *((void *)v18 + 2);
    unint64_t v26 = *((void *)v18 + 3);
    unint64_t v28 = v26 >> 1;
    unint64_t v57 = a3;
    if (v26 >> 1 <= v27)
    {
      unint64_t v44 = v20;
      unint64_t v45 = sub_1DB07E444((char *)(v26 > 1), v27 + 1, 1, v18);
      unint64_t v20 = v44;
      uint64_t v18 = v45;
      unint64_t v26 = *((void *)v45 + 3);
      unint64_t v28 = v26 >> 1;
    }
    *((void *)v18 + 2) = v27 + 1;
    id v29 = &v18[16 * v27];
    *((void *)v29 + 4) = 12920;
    *((void *)v29 + 5) = 0xE200000000000000;
    *(void *)&long long v65 = v18;
    unint64_t v30 = *((void *)v18 + 2);
    if (v28 <= v30)
    {
      unint64_t v46 = v20;
      long long v47 = sub_1DB07E444((char *)(v26 > 1), v30 + 1, 1, v18);
      unint64_t v20 = v46;
      uint64_t v18 = v47;
      unint64_t v26 = *((void *)v47 + 3);
      unint64_t v28 = v26 >> 1;
    }
    *((void *)v18 + 2) = v30 + 1;
    id v31 = &v18[16 * v30];
    *((void *)v31 + 4) = 0x69646E696C423078;
    *((void *)v31 + 5) = 0xEA0000000000676ELL;
    *(void *)&long long v65 = v18;
    unint64_t v32 = *((void *)v18 + 2);
    uint64_t v56 = v10;
    if (v28 <= v32)
    {
      unint64_t v48 = v20;
      unint64_t v49 = sub_1DB07E444((char *)(v26 > 1), v32 + 1, 1, v18);
      unint64_t v20 = v48;
      uint64_t v18 = v49;
      unint64_t v26 = *((void *)v49 + 3);
      unint64_t v28 = v26 >> 1;
    }
    *((void *)v18 + 2) = v32 + 1;
    id v33 = &v18[16 * v32];
    *((void *)v33 + 4) = 98;
    *((void *)v33 + 5) = 0xE100000000000000;
    *(void *)&long long v65 = v18;
    unint64_t v34 = *((void *)v18 + 2);
    unint64_t v58 = a4;
    if (v28 <= v34)
    {
      unint64_t v50 = v20;
      uint64_t v51 = sub_1DB07E444((char *)(v26 > 1), v34 + 1, 1, v18);
      unint64_t v20 = v50;
      uint64_t v18 = v51;
      unint64_t v26 = *((void *)v51 + 3);
      unint64_t v28 = v26 >> 1;
    }
    uint64_t v35 = v27 - 1;
    uint64_t v36 = v30 - 1;
    uint64_t v37 = v32 - 1;
    *((void *)v18 + 2) = v34 + 1;
    id v38 = &v18[16 * v34];
    *((void *)v38 + 4) = 12660;
    *((void *)v38 + 5) = 0xE200000000000000;
    *(void *)&long long v65 = v18;
    unint64_t v39 = *((void *)v18 + 2);
    if (v28 <= v39)
    {
      unint64_t v55 = v20;
      uint64_t v53 = v37;
      uint64_t v52 = sub_1DB07E444((char *)(v26 > 1), v39 + 1, 1, v18);
      uint64_t v37 = v53;
      uint64_t v35 = v27 - 1;
      unint64_t v20 = v55;
      uint64_t v18 = v52;
    }
    *((void *)v18 + 2) = v39 + 1;
    id v40 = &v18[16 * v39];
    *((void *)v40 + 4) = 12916;
    *((void *)v40 + 5) = 0xE200000000000000;
    *(void *)&long long v65 = v18;
    sub_1DB0665B0((uint64_t)&v64, v60, v61, v57, v58, v59, *(void **)(v4 + 8), v56, v63, v62, *(void **)(v4 + 40), *(void **)(v4 + 48), *(void **)(v4 + 56), *(void **)(v4 + 64), v20, v37, v35, v36, v34 - 1,
      v39 - 1,
      *((void *)v18 + 2) - 1);
    long long v67 = v64;
    long long v68 = v65;
    long long v69 = v66;
    char v16 = sub_1DB074C90(*(void *)(v4 + 88), *(void *)(v4 + 96));
    sub_1DB042664(v11, v13);
    if (v5)
    {
      long long v75 = v67;
      sub_1DB0697C0((uint64_t)&v75);
      uint64_t v76 = v68;
      sub_1DB0697EC((uint64_t)&v76);
      uint64_t v77 = *((void *)&v68 + 1);
      sub_1DB0697EC((uint64_t)&v77);
      uint64_t v78 = v69;
      sub_1DB0697EC((uint64_t)&v78);
      uint64_t v79 = *((void *)&v69 + 1);
      sub_1DB0697EC((uint64_t)&v79);
    }
    else
    {
      long long v70 = v67;
      sub_1DB0697C0((uint64_t)&v70);
      uint64_t v71 = v68;
      sub_1DB0697EC((uint64_t)&v71);
      uint64_t v72 = *((void *)&v68 + 1);
      sub_1DB0697EC((uint64_t)&v72);
      uint64_t v73 = v69;
      sub_1DB0697EC((uint64_t)&v73);
      uint64_t v74 = *((void *)&v69 + 1);
      sub_1DB0697EC((uint64_t)&v74);
    }
  }
  else
  {
LABEL_3:
    sub_1DB042664(v11, v13);
    char v16 = 0;
  }
  return v16 & 1;
}

void *sub_1DB0672BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3A0);
  v19[3] = v8;
  void v19[4] = sub_1DB04761C((unint64_t *)&qword_1EA8FE3A8, &qword_1EA8FE3A0);
  uint64_t v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  uint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    id v15 = (unsigned char *)(result[1] + v11);
    char v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_1DB0C07E8(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }
  return result;
}

uint64_t sub_1DB0673BC(void *a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = &selRef_initWithBytes_length_;
  id v5 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v2 = sub_1DB0C4A08();
    unint64_t v8 = v7;

    uint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      sub_1DB0C5188();
      uint64_t v10 = 0;
      uint64_t v26 = v9;
      uint64_t v27 = a2;
      while (2)
      {
        id v12 = *(id *)(a2 + 8 * v10 + 32);
        id v13 = [v12 v4[13]];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = sub_1DB0C4A08();
          unint64_t v17 = v16;

          uint64_t v32 = v2;
          unint64_t v33 = v8;
          v31[3] = MEMORY[0x1E4F277C0];
          v31[4] = MEMORY[0x1E4F277B0];
          unint64_t v29 = v17;
          uint64_t v30 = v15;
          v31[0] = v15;
          v31[1] = v17;
          uint64_t v18 = __swift_project_boxed_opaque_existential_1(v31, MEMORY[0x1E4F277C0]);
          uint64_t v19 = *v18;
          unint64_t v20 = v18[1];
          uint64_t v28 = v10 + 1;
          switch(v20 >> 62)
          {
            case 1uLL:
              if (v19 >> 32 < (int)v19)
              {
                __break(1u);
LABEL_22:
                __break(1u);
LABEL_23:
                __break(1u);
LABEL_24:
                __break(1u);
              }
              sub_1DB04239C(v2, v8);
              sub_1DB04239C(v30, v17);
              sub_1DB04239C(v19, v20);
              if (sub_1DB0C48A8() && __OFSUB__((int)v19, sub_1DB0C48D8())) {
                goto LABEL_24;
              }
              sub_1DB0C48C8();
              sub_1DB0C49A8();
              sub_1DB042664(v19, v20);
LABEL_16:
              uint64_t v4 = &selRef_initWithBytes_length_;
              uint64_t v9 = v26;
              unint64_t v17 = v29;
              uint64_t v11 = v30;
LABEL_5:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);

              sub_1DB042664(v2, v8);
              sub_1DB042664(v11, v17);
              uint64_t v2 = v32;
              unint64_t v8 = v33;
              a2 = v27;
              ++v10;
              if (v9 != v28) {
                continue;
              }
              swift_bridgeObjectRelease();
              break;
            case 2uLL:
              uint64_t v21 = *(void *)(v19 + 16);
              uint64_t v22 = *(void *)(v19 + 24);
              sub_1DB04239C(v2, v8);
              sub_1DB04239C(v30, v29);
              swift_retain();
              swift_retain();
              if (sub_1DB0C48A8() && __OFSUB__(v21, sub_1DB0C48D8())) {
                goto LABEL_23;
              }
              if (__OFSUB__(v22, v21)) {
                goto LABEL_22;
              }
              sub_1DB0C48C8();
              sub_1DB0C49A8();
              swift_release();
              swift_release();
              goto LABEL_16;
            default:
              sub_1DB04239C(v2, v8);
              uint64_t v11 = v30;
              sub_1DB04239C(v30, v17);
              sub_1DB0C49A8();
              goto LABEL_5;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1DB05F254();
          swift_allocError();
          *unint64_t v24 = 1;
          swift_willThrow();
          sub_1DB042664(v2, v8);
        }
        break;
      }
    }
  }
  else
  {
    sub_1DB05F254();
    swift_allocError();
    *id v23 = 1;
    swift_willThrow();
  }
  return v2;
}

id sub_1DB0677F8()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v7 = 0;
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v0 = objc_allocWithZone(MEMORY[0x1E4F5E4F0]);
  unint64_t v1 = (void *)sub_1DB0C49E8();
  id v2 = objc_msgSend(v0, sel_initFromPublicKeyBytes_inGroup_compressed_corecryptoError_, v1, v6, 1, &v7);

  if (!v2)
  {
    int v3 = v7;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = v3;
    *(unsigned char *)(v4 + 4) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1DB067970(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(id *)a1;
  id v8 = v2;
  id v9 = v3;
  id v10 = v4;
  sub_1DB04239C(v5, v6);
  return a1;
}

uint64_t sub_1DB0679CC(uint64_t a1)
{
  id v2 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);

  sub_1DB042664(v5, v6);
  return a1;
}

uint64_t type metadata accessor for KVACPresentationWrapper()
{
  return self;
}

uint64_t sub_1DB067A4C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1DB04239C(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for KVACClient()
{
  return self;
}

uint64_t sub_1DB067A84(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  int v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void **)(a1 + 32);
  unint64_t v6 = *(void **)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v9 = *(void **)(a1 + 64);
  unint64_t v10 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 72);
  id v23 = *(void **)(a1 + 88);
  id v11 = *(id *)a1;
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v8;
  id v18 = v7;
  id v19 = v9;
  sub_1DB04239C(v22, v10);
  id v20 = v23;
  sub_1DB0C5188();
  return a1;
}

uint64_t type metadata accessor for KVACIssuanceWrapper()
{
  return self;
}

void sub_1DB067B58(uint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_41;
      }
      uint64_t v2 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t v5 = self;
      sub_1DB0C4F38();
      uint64_t v6 = sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      uint64_t v7 = (uint64_t)objc_msgSend(v5, sel_groupOrderByteCountForCP_, v43);
      if (v7 < 0) {
        goto LABEL_35;
      }
      if (!v7) {
        goto LABEL_36;
      }
      uint64_t v8 = v2 / v7;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3C8);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 32) = 0xD000000000000021;
      *(void *)(v9 + 40) = 0x80000001DB0CB930;
      uint64_t v10 = MEMORY[0x1E4FBB550];
      *(_OWORD *)(v9 + 16) = xmmword_1DB0C7D30;
      *(void *)(v9 + 88) = v10;
      *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v9 + 64) = v8;
      sub_1DB0C5458();
      swift_bridgeObjectRelease();
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v5, sel_groupOrderByteCountForCP_, v43) & 0x8000000000000000) != 0) {
        goto LABEL_37;
      }
      id v40 = v5;
      uint64_t v11 = sub_1DB0C4A28();
      unint64_t v13 = v12;
      LODWORD(v42) = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v14 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      uint64_t v15 = v6;
      id v16 = (void *)sub_1DB0C49E8();
      id v17 = objc_msgSend(v14, sel_initWithData_inGroup_reduction_corecryptoError_, v16, v43, 0, &v42);

      if (!v17)
      {
        int v35 = v42;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v36 = v35;
        *(unsigned char *)(v36 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v11, v13);
        return;
      }
      unint64_t v39 = v17;
      sub_1DB042664(v11, v13);
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v18 = v40;
      unint64_t v19 = (unint64_t)objc_msgSend(v40, sel_groupOrderByteCountForCP_, v43);
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      uint64_t v20 = v15;
      uint64_t v43 = MEMORY[0x1E4FBC860];
      uint64_t v21 = v8 - 1;
      if (__OFSUB__(v8, 1)) {
        goto LABEL_39;
      }
      if (v21 < 0) {
        goto LABEL_40;
      }
      if (v8 != 1)
      {
        uint64_t v22 = (char *)v19;
        while (1)
        {
          if (!v21)
          {
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
          }
          sub_1DB0C4D78();
          swift_dynamicCast();
          int64_t v23 = (int64_t)objc_msgSend(v18, sel_groupOrderByteCountForCP_, v42);
          if (v23 < 0) {
            goto LABEL_30;
          }
          if (__OFADD__(v22, v23)) {
            goto LABEL_31;
          }
          if ((uint64_t)&v22[v23] < (uint64_t)v22) {
            goto LABEL_32;
          }
          uint64_t v24 = sub_1DB0C4A28();
          unint64_t v26 = v25;
          int v41 = 0;
          sub_1DB04239C(v24, v25);
          uint64_t v27 = v20;
          sub_1DB0C4D78();
          swift_dynamicCast();
          uint64_t v28 = v42;
          id v29 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
          uint64_t v30 = (void *)sub_1DB0C49E8();
          id v31 = objc_msgSend(v29, sel_initWithData_inGroup_reduction_corecryptoError_, v30, v28, 0, &v41);
          sub_1DB042664(v24, v26);

          if (!v31) {
            break;
          }
          sub_1DB042664(v24, v26);
          id v32 = v31;
          MEMORY[0x1E0188080]();
          if (*(void *)(v43 + 16) >= *(void *)(v43 + 24) >> 1) {
            sub_1DB0C51A8();
          }
          sub_1DB0C51C8();
          sub_1DB0C5198();
          uint64_t v20 = v27;
          sub_1DB0C4D78();
          swift_dynamicCast();
          id v18 = v40;
          unint64_t v33 = (unint64_t)objc_msgSend(v40, sel_groupOrderByteCountForCP_, v42);

          if ((v33 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          BOOL v34 = __OFADD__(v22, v33);
          v22 += v33;
          if (v34) {
            goto LABEL_34;
          }
          if (!--v21) {
            return;
          }
        }
        int v37 = v41;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v38 = v37;
        *(unsigned char *)(v38 + 4) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        sub_1DB042664(v24, v26);
      }
      return;
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = v3 - v4;
      if (!__OFSUB__(v3, v4)) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v2 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t type metadata accessor for KVACServer()
{
  return self;
}

void sub_1DB0681F4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = self;
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  uint64_t v6 = (uint64_t)objc_msgSend(v5, sel_groupOrderByteCountForCP_, v28);
  if (v6 < 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v27 = 5 * v6;
  if ((unsigned __int128)(v6 * (__int128)5) >> 64 != (5 * v6) >> 63) {
    goto LABEL_27;
  }
  uint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_32;
      }
      uint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_8:
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v10 = (int64_t)objc_msgSend(v5, sel_compressedx962PointByteCountForCurveParameters_, v28);
      if (v10 < 0) {
        goto LABEL_28;
      }
      if (v10 + 0x4000000000000000 < 0) {
        goto LABEL_29;
      }
      if (__OFADD__(v27, 2 * v10)) {
        goto LABEL_30;
      }
      if (v7 != v27 + 2 * v10)
      {
        sub_1DB05F254();
        swift_allocError();
        *uint64_t v20 = 2;
        swift_willThrow();
        return;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v5, sel_compressedx962PointByteCountForCurveParameters_, v28) & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
      uint64_t v11 = sub_1DB0C4A28();
      unint64_t v13 = v12;
      sub_1DB0677F8();
      sub_1DB042664(v11, v13);
      if (!v2)
      {
        sub_1DB0C4D78();
        swift_dynamicCast();
        unint64_t v14 = (unint64_t)objc_msgSend(v5, sel_compressedx962PointByteCountForCurveParameters_, v28);
        if ((v14 & 0x8000000000000000) == 0)
        {
          uint64_t v15 = (char *)v14;
          sub_1DB0C4D78();
          swift_dynamicCast();
          int64_t v16 = (int64_t)objc_msgSend(v5, sel_compressedx962PointByteCountForCurveParameters_, v28);
          if ((v16 & 0x8000000000000000) == 0)
          {
            if (!__OFADD__(v15, v16))
            {
              if ((uint64_t)&v15[v16] >= (uint64_t)v15)
              {
                uint64_t v17 = sub_1DB0C4A28();
                unint64_t v19 = v18;
                sub_1DB0677F8();
                sub_1DB042664(v17, v19);
                sub_1DB0C4D78();
                swift_dynamicCast();
                unint64_t v21 = (unint64_t)objc_msgSend(v5, sel_compressedx962PointByteCountForCurveParameters_, v28);
                if ((v21 & 0x8000000000000000) == 0)
                {
                  BOOL v22 = __OFADD__(v15, v21);
                  int64_t v23 = &v15[v21];
                  if (!v22)
                  {
                    if (!__OFADD__(v23, v27))
                    {
                      if ((uint64_t)&v23[v27] >= (uint64_t)v23)
                      {
                        uint64_t v24 = sub_1DB0C4A28();
                        unint64_t v26 = v25;
                        sub_1DB067B58(v24, v25);
                        sub_1DB042664(v24, v26);
                        return;
                      }
LABEL_41:
                      __break(1u);
                      JUMPOUT(0x1DB068674);
                    }
LABEL_40:
                    __break(1u);
                    goto LABEL_41;
                  }
LABEL_39:
                  __break(1u);
                  goto LABEL_40;
                }
LABEL_38:
                __break(1u);
                goto LABEL_39;
              }
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      return;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_8;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_8;
  }
}

uint64_t sub_1DB068684(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  uint64_t v8 = *(void **)(a1 + 64);
  uint64_t v9 = *(void **)(a1 + 72);
  uint64_t v21 = *(void *)(a1 + 80);
  unint64_t v10 = *(void *)(a1 + 88);
  id v11 = *(id *)(a1 + 8);
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  sub_1DB04239C(v21, v10);
  return a1;
}

uint64_t sub_1DB06871C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  id v12 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v8 = *(void **)(a1 + 56);
  uint64_t v7 = *(void **)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 80);
  unint64_t v10 = *(void *)(a1 + 88);

  sub_1DB042664(v9, v10);
  return a1;
}

uint64_t sub_1DB0687B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = self;
  sub_1DB0C4F38();
  sub_1DB069A4C((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  unint64_t v7 = (unint64_t)objc_msgSend(v6, sel_groupOrderByteCountForCP_, v93);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_68;
  }
  unint64_t v8 = v7;
  if ((v7 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  uint64_t v9 = (uint64_t)objc_msgSend(v6, sel_groupOrderByteCountForCP_, v93);
  if (v9 < 0)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v10 = 3 * v9;
  if ((unsigned __int128)(v9 * (__int128)3) >> 64 != (3 * v9) >> 63)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  unint64_t v11 = (unint64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if ((v11 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v12 = 4 * v8;
  uint64_t v13 = v12 + 4 * v11;
  if (__OFADD__(v12, 4 * v11))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v90 = v10;
  BOOL v14 = __OFADD__(v13, v10);
  uint64_t v15 = v13 + v10;
  if (v14)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  uint64_t v16 = sub_1DB0C4F78();
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  uint64_t v18 = a2;
  unint64_t v19 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v20) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_80;
      }
      uint64_t v20 = (int)v20;
LABEL_15:
      if (v20 < v17)
      {
LABEL_23:
        sub_1DB05F254();
        swift_allocError();
        *unint64_t v25 = 4;
        return swift_willThrow();
      }
      uint64_t v86 = v12;
      if (v19)
      {
        if (v19 == 1)
        {
          int v23 = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1))
          {
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          unint64_t v24 = v23 - v17;
          if (!__OFSUB__(v23, v17))
          {
LABEL_29:
            if ((sub_1DB0C4F78() & 0x8000000000000000) == 0)
            {
              uint64_t v84 = a3;
              uint64_t v88 = sub_1DB0C4A28();
              unint64_t v89 = v30;
              uint64_t v31 = sub_1DB0C4F78();
              sub_1DB0C4D78();
              swift_dynamicCast();
              int64_t v32 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
              if ((v32 & 0x8000000000000000) == 0)
              {
                if (!__OFADD__(v31, v32))
                {
                  if (v31 + v32 >= v31)
                  {
                    unint64_t v85 = v24;
                    uint64_t v33 = sub_1DB0C4A28();
                    unint64_t v35 = v34;
                    id v36 = sub_1DB0677F8();
                    if (v3)
                    {
                      sub_1DB042664(v33, v35);
                      return sub_1DB042664(v88, v89);
                    }
                    unint64_t v82 = v36;
                    sub_1DB042664(v33, v35);
                    sub_1DB0C4D78();
                    swift_dynamicCast();
                    unint64_t v37 = (unint64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
                    if ((v37 & 0x8000000000000000) == 0)
                    {
                      BOOL v14 = __OFADD__(v31, v37);
                      a3 = (void *)(v31 + v37);
                      if (!v14)
                      {
                        sub_1DB0C4D78();
                        swift_dynamicCast();
                        int64_t v38 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
                        if ((v38 & 0x8000000000000000) == 0)
                        {
                          if (!__OFADD__(a3, v38))
                          {
                            if ((uint64_t)((char *)a3 + v38) >= (uint64_t)a3)
                            {
                              uint64_t v18 = sub_1DB0C4A28();
                              unint64_t v24 = v39;
                              uint64_t v16 = (uint64_t)sub_1DB0677F8();
                              goto LABEL_44;
                            }
                            goto LABEL_86;
                          }
LABEL_85:
                          __break(1u);
LABEL_86:
                          __break(1u);
                          goto LABEL_87;
                        }
LABEL_84:
                        __break(1u);
                        goto LABEL_85;
                      }
LABEL_83:
                      __break(1u);
                      goto LABEL_84;
                    }
LABEL_82:
                    __break(1u);
                    goto LABEL_83;
                  }
LABEL_79:
                  __break(1u);
LABEL_80:
                  __break(1u);
LABEL_81:
                  __break(1u);
                  goto LABEL_82;
                }
LABEL_78:
                __break(1u);
                goto LABEL_79;
              }
LABEL_77:
              __break(1u);
              goto LABEL_78;
            }
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v28 = *(void *)(a1 + 16);
          uint64_t v27 = *(void *)(a1 + 24);
          BOOL v14 = __OFSUB__(v27, v28);
          uint64_t v29 = v27 - v28;
          if (v14)
          {
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
          unint64_t v24 = v29 - v17;
          if (!__OFSUB__(v29, v17)) {
            goto LABEL_29;
          }
        }
      }
      else
      {
        unint64_t v24 = BYTE6(a2) - v17;
        if (!__OFSUB__(BYTE6(a2), v17)) {
          goto LABEL_29;
        }
      }
LABEL_43:
      __break(1u);
LABEL_44:
      uint64_t v80 = (void *)v16;
      sub_1DB042664(v18, v24);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v40 = (unint64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
      if ((v40 & 0x8000000000000000) != 0)
      {
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      BOOL v14 = __OFADD__(a3, v40);
      int v41 = (char *)a3 + v40;
      if (v14)
      {
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v42 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
      if (v42 < 0)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (__OFADD__(v41, v42))
      {
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      if ((uint64_t)&v41[v42] < (uint64_t)v41)
      {
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      uint64_t v43 = sub_1DB0C4A28();
      unint64_t v45 = v44;
      id v46 = sub_1DB0677F8();
      if (v3)
      {
        sub_1DB042664(v43, v45);

        return sub_1DB042664(v88, v89);
      }
      uint64_t v78 = v46;
      sub_1DB042664(v43, v45);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v47 = (unint64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
      if ((v47 & 0x8000000000000000) != 0) {
        goto LABEL_94;
      }
      BOOL v14 = __OFADD__(v41, v47);
      unint64_t v48 = &v41[v47];
      if (v14)
      {
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
      unint64_t v49 = &v48[v86];
      if (__OFADD__(v48, v86))
      {
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      if ((uint64_t)v49 < (uint64_t)v48)
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      uint64_t v50 = sub_1DB0C4A28();
      unint64_t v52 = v51;
      sub_1DB067B58(v50, v51);
      uint64_t v76 = v53;
      uint64_t v87 = v54;
      sub_1DB042664(v50, v52);
      unint64_t v55 = v49;
      id v75 = v82;
      id v56 = v80;
      id v83 = v78;
      sub_1DB04239C(v88, v89);
      id v57 = v76;
      sub_1DB0C5188();
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v58 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
      if (v58 < 0) {
        goto LABEL_98;
      }
      if (__OFADD__(v55, v58))
      {
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      uint64_t v79 = v56;
      unint64_t v81 = v57;
      if ((uint64_t)&v55[v58] < (uint64_t)v55)
      {
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      uint64_t v59 = sub_1DB0C4A28();
      unint64_t v61 = v60;
      id v77 = sub_1DB0677F8();
      sub_1DB042664(v59, v61);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v62 = (unint64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v93);
      if ((v62 & 0x8000000000000000) != 0)
      {
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      BOOL v14 = __OFADD__(v55, v62);
      long long v63 = &v55[v62];
      if (v14)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      long long v64 = &v63[v85];
      if (__OFADD__(v63, v85))
      {
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      if ((uint64_t)v64 < (uint64_t)v63)
      {
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
      uint64_t v65 = sub_1DB0C4A28();
      uint64_t v67 = v66;
      if (__OFADD__(v64, v90))
      {
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      if ((uint64_t)&v64[v90] < (uint64_t)v64)
      {
LABEL_106:
        __break(1u);
        JUMPOUT(0x1DB069184);
      }
      uint64_t v68 = v65;
      uint64_t v69 = sub_1DB0C4A28();
      unint64_t v71 = v70;
      sub_1DB067B58(v69, v70);
      uint64_t v73 = v72;
      uint64_t v92 = v74;
      swift_bridgeObjectRelease();

      sub_1DB042664(v88, v89);
      uint64_t result = sub_1DB042664(v69, v71);
      void *v84 = v75;
      v84[1] = v79;
      v84[2] = v83;
      v84[3] = v88;
      v84[4] = v89;
      v84[5] = v81;
      v84[6] = v87;
      v84[7] = v77;
      v84[8] = v68;
      v84[9] = v67;
      v84[10] = v83;
      v84[11] = v75;
      v84[12] = v92;
      v84[13] = v73;
      return result;
    case 2uLL:
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      BOOL v14 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v14) {
        goto LABEL_15;
      }
      goto LABEL_81;
    case 3uLL:
      if (v17 > 0) {
        goto LABEL_23;
      }
      uint64_t v86 = v12;
      unint64_t v24 = -v17;
      if (!__OFSUB__(0, v17)) {
        goto LABEL_29;
      }
      goto LABEL_43;
    default:
      uint64_t v20 = BYTE6(a2);
      goto LABEL_15;
  }
}

uint64_t sub_1DB069194(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = *(void *)(a1 + 72);
  uint64_t v12 = *(void **)(a1 + 88);
  uint64_t v13 = *(void **)(a1 + 80);
  uint64_t v10 = *(void **)(a1 + 40);
  unint64_t v11 = *(void **)(a1 + 96);

  sub_1DB042664(v4, v5);
  swift_bridgeObjectRelease();

  sub_1DB042664(v7, v8);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t method lookup function for KVACRequestWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for KVACRequestWrapper);
}

uint64_t method lookup function for KVACCredentialWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for KVACCredentialWrapper);
}

uint64_t dispatch thunk of KVACCredentialWrapper.__allocating_init(credentialData:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of KVACCredentialWrapper.makePresentation(tagPrefix:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t method lookup function for KVACPresentationWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for KVACPresentationWrapper);
}

uint64_t method lookup function for KVACClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for KVACClient);
}

uint64_t dispatch thunk of KVACClient.__allocating_init(tokenChallenge:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of KVACClient.makeRequest()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of KVACClient.makeCredential(issuance:request:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t method lookup function for KVACIssuanceWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for KVACIssuanceWrapper);
}

uint64_t dispatch thunk of KVACIssuanceWrapper.__allocating_init(issuanceData:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for KVACServer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for KVACServer);
}

uint64_t dispatch thunk of KVACServer.issue(requestData:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of KVACServer.verify(presentationData:tokenChallenge:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t getEnumTagSinglePayload for KVACErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KVACErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB069618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KVACErrors()
{
  return &type metadata for KVACErrors;
}

unint64_t sub_1DB069654()
{
  unint64_t result = qword_1EA8FE398;
  if (!qword_1EA8FE398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE398);
  }
  return result;
}

uint64_t sub_1DB0696A8()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1DB0696E0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  unsigned int v4 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *(void **)(a1 + 40);
  id v7 = *(id *)a1;
  id v8 = v2;
  id v9 = v4;
  sub_1DB04239C(v3, v5);
  id v10 = v6;
  sub_1DB0C5188();
  return a1;
}

uint64_t sub_1DB069750(uint64_t a1)
{
  int v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *(void **)(a1 + 40);

  sub_1DB042664(v4, v5);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1DB0697C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB0697EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB069818(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB069848(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  unint64_t v5 = *(void **)(a1 + 32);
  unsigned int v6 = *(void **)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t v10 = *(void *)(a1 + 80);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void **)(a1 + 88);

  sub_1DB042664(v9, v10);
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_1DB0698FC()
{
  unint64_t result = qword_1EA8FE3B8;
  if (!qword_1EA8FE3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE3B8);
  }
  return result;
}

uint64_t sub_1DB069950(uint64_t a1)
{
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

id *sub_1DB069A20(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_1DB069A4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1DB069A94()
{
  unint64_t result = qword_1EA8FE3D0[0];
  if (!qword_1EA8FE3D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FE3D0);
  }
  return result;
}

uint64_t sub_1DB069AE8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7D848);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1DB069B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = sub_1DB065018((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB069BE0, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1DB069BB4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1DB042664(a1, a2);
  }
  return a1;
}

uint64_t sub_1DB069BC8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1DB069BE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1DB065550(a1, a2);
}

uint64_t sub_1DB069C00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = *(id *)a1;
  sub_1DB04239C(v2, v3);
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  sub_1DB0C5188();
  return a1;
}

uint64_t sub_1DB069C70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);

  sub_1DB042664(v2, v3);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1DB069CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t sub_1DB069CFC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_1DB069E84(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = (*(unsigned char *)(v5 + 80) | v9);
  BOOL v12 = v11 <= 7 && ((*(_DWORD *)(v5 + 80) | v9) & 0x100000) == 0;
  if (v12
    && (uint64_t v13 = *(_DWORD *)(v8 + 80),
        uint64_t v14 = v6 + v13,
        uint64_t v15 = v10 + v13,
        ((v10
        + v13
        + ((v10
          + v13
          + ((v10 + v13 + ((v10 + v13 + ((v10 + v13 + ((v10 + v13 + (v14 & ~v13)) & ~v13)) & ~v13)) & ~v13)) & ~v13)) & ~v13)) & (unint64_t)~v13)
      + v10 <= 0x18))
  {
    uint64_t v16 = v7;
    uint64_t v17 = ~v13;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v18 = ((unint64_t)a2 + v14) & v17;
    unint64_t v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v19(((unint64_t)a1 + v14) & v17, v18, v16);
    unint64_t v20 = (v15 + v18) & v17;
    v19((v15 + (((unint64_t)a1 + v14) & v17)) & v17, v20, v16);
    unint64_t v21 = (v15 + v20) & v17;
    v19((v15 + ((v15 + (((unint64_t)a1 + v14) & v17)) & v17)) & v17, v21, v16);
    uint64_t v22 = (v15 + v21) & v17;
    v19((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v14) & v17)) & v17)) & v17)) & v17, v22, v16);
    uint64_t v23 = (v15 + v22) & v17;
    v19((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v14) & v17)) & v17)) & v17)) & v17)) & v17, v23, v16);
    uint64_t v24 = (v15 + v23) & v17;
    v19((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v14) & v17)) & v17)) & v17)) & v17)) & v17)) & v17, v24, v16);
    v19((v15+ ((v15 + ((v15 + ((v15 + ((v15 + ((v15 + (((unint64_t)a1 + v14) & v17)) & v17)) & v17)) & v17)) & v17)) & v17)) & v17, (v15 + v24) & v17, v16);
  }
  else
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1DB06A1B8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v16 = v6 + 8;
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  v15((v4 + v7) & ~v7, v5);
  uint64_t v8 = *(void *)(v16 + 56) + v7;
  uint64_t v9 = (v8 + ((v4 + v7) & ~v7)) & ~v7;
  v15(v9, v5);
  uint64_t v10 = (v8 + v9) & ~v7;
  v15(v10, v5);
  uint64_t v11 = (v8 + v10) & ~v7;
  v15(v11, v5);
  uint64_t v12 = (v8 + v11) & ~v7;
  v15(v12, v5);
  uint64_t v13 = (v8 + v12) & ~v7;
  v15(v13, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)((v8 + v13) & ~v7, v5);
}

uint64_t sub_1DB06A3E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v6 + v11 + a1) & ~v11;
  uint64_t v13 = (v6 + v11 + a2) & ~v11;
  v9(v12, v13, v7);
  uint64_t v14 = *(void *)(v10 + 48) + v11;
  uint64_t v15 = (v14 + v12) & ~v11;
  uint64_t v16 = (v14 + v13) & ~v11;
  v9(v15, v16, v7);
  uint64_t v17 = (v14 + v15) & ~v11;
  uint64_t v18 = (v14 + v16) & ~v11;
  v9(v17, v18, v7);
  uint64_t v19 = (v14 + v17) & ~v11;
  uint64_t v20 = (v14 + v18) & ~v11;
  v9(v19, v20, v7);
  uint64_t v21 = (v14 + v19) & ~v11;
  uint64_t v22 = (v14 + v20) & ~v11;
  v9(v21, v22, v7);
  uint64_t v23 = (v14 + v21) & ~v11;
  uint64_t v24 = (v14 + v22) & ~v11;
  v9(v23, v24, v7);
  v9((v14 + v23) & ~v11, (v14 + v24) & ~v11, v7);
  return a1;
}

uint64_t sub_1DB06A644(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  uint64_t v10 = v8 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v6 + v11 + a1) & ~v11;
  uint64_t v13 = (v6 + v11 + a2) & ~v11;
  v9(v12, v13, v7);
  uint64_t v14 = *(void *)(v10 + 40) + v11;
  uint64_t v15 = (v14 + v12) & ~v11;
  uint64_t v16 = (v14 + v13) & ~v11;
  v9(v15, v16, v7);
  uint64_t v17 = (v14 + v15) & ~v11;
  uint64_t v18 = (v14 + v16) & ~v11;
  v9(v17, v18, v7);
  uint64_t v19 = (v14 + v17) & ~v11;
  uint64_t v20 = (v14 + v18) & ~v11;
  v9(v19, v20, v7);
  uint64_t v21 = (v14 + v19) & ~v11;
  uint64_t v22 = (v14 + v20) & ~v11;
  v9(v21, v22, v7);
  uint64_t v23 = (v14 + v21) & ~v11;
  uint64_t v24 = (v14 + v22) & ~v11;
  v9(v23, v24, v7);
  v9((v14 + v23) & ~v11, (v14 + v24) & ~v11, v7);
  return a1;
}

uint64_t sub_1DB06A8A0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = v8 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v6 + v11 + a1) & ~v11;
  uint64_t v13 = (v6 + v11 + a2) & ~v11;
  v9(v12, v13, v7);
  uint64_t v14 = *(void *)(v10 + 32) + v11;
  uint64_t v15 = (v14 + v12) & ~v11;
  uint64_t v16 = (v14 + v13) & ~v11;
  v9(v15, v16, v7);
  uint64_t v17 = (v14 + v15) & ~v11;
  uint64_t v18 = (v14 + v16) & ~v11;
  v9(v17, v18, v7);
  uint64_t v19 = (v14 + v17) & ~v11;
  uint64_t v20 = (v14 + v18) & ~v11;
  v9(v19, v20, v7);
  uint64_t v21 = (v14 + v19) & ~v11;
  uint64_t v22 = (v14 + v20) & ~v11;
  v9(v21, v22, v7);
  uint64_t v23 = (v14 + v21) & ~v11;
  uint64_t v24 = (v14 + v22) & ~v11;
  v9(v23, v24, v7);
  v9((v14 + v23) & ~v11, (v14 + v24) & ~v11, v7);
  return a1;
}

uint64_t sub_1DB06AAFC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  uint64_t v10 = v8 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v6 + v11 + a1) & ~v11;
  uint64_t v13 = (v6 + v11 + a2) & ~v11;
  v9(v12, v13, v7);
  uint64_t v14 = *(void *)(v10 + 24) + v11;
  uint64_t v15 = (v14 + v12) & ~v11;
  uint64_t v16 = (v14 + v13) & ~v11;
  v9(v15, v16, v7);
  uint64_t v17 = (v14 + v15) & ~v11;
  uint64_t v18 = (v14 + v16) & ~v11;
  v9(v17, v18, v7);
  uint64_t v19 = (v14 + v17) & ~v11;
  uint64_t v20 = (v14 + v18) & ~v11;
  v9(v19, v20, v7);
  uint64_t v21 = (v14 + v19) & ~v11;
  uint64_t v22 = (v14 + v20) & ~v11;
  v9(v21, v22, v7);
  uint64_t v23 = (v14 + v21) & ~v11;
  uint64_t v24 = (v14 + v22) & ~v11;
  v9(v23, v24, v7);
  v9((v14 + v23) & ~v11, (v14 + v24) & ~v11, v7);
  return a1;
}

uint64_t sub_1DB06AD58(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v12 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v14 = ((v12
        + v11
        + ((v12
          + v11
          + ((v12 + v11 + ((v12 + v11 + ((v12 + v11 + ((v12 + v11 + (v13 & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v11)
      + v12;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v10 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v9)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
          return v23(a1, v6, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v10 + (v20 | v18) + 1;
}

void sub_1DB06B0C4(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  uint64_t v14 = *(void *)(v8 + 64);
  size_t v15 = ((v14
        + v12
        + ((v14
          + v12
          + ((v14 + v12 + ((v14 + v12 + ((v14 + v12 + ((v14 + v12 + (v13 & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)) & ~v12)
      + v14;
  if (a3 <= v11)
  {
    int v17 = 0;
    int v16 = a1;
  }
  else
  {
    int v16 = a1;
    if (v15 <= 3)
    {
      unsigned int v20 = ((a3 - v11 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  if (v11 < a2)
  {
    unsigned int v18 = ~v11 + a2;
    if (v15 < 4)
    {
      int v19 = (v18 >> (8 * v15)) + 1;
      if (v15)
      {
        int v21 = v18 & ~(-1 << (8 * v15));
        bzero(v16, v15);
        if (v15 == 3)
        {
          *(_WORD *)int v16 = v21;
          v16[2] = BYTE2(v21);
        }
        else if (v15 == 2)
        {
          *(_WORD *)int v16 = v21;
        }
        else
        {
          *int v16 = v21;
        }
      }
    }
    else
    {
      bzero(v16, v15);
      *(_DWORD *)int v16 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        v16[v15] = v19;
        return;
      case 2:
        *(_WORD *)&v16[v15] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&v16[v15] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      v16[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&v16[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1DB06B4A8);
    case 4:
      *(_DWORD *)&v16[v15] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v23(v16, a2, v7, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
          v22((unint64_t)&v16[v13] & ~v12, a2);
        }
      }
      return;
  }
}

uint64_t _s13ResponseProofVMa()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for HE.Plaintext()
{
  return &type metadata for HE.Plaintext;
}

uint64_t sub_1DB06B4F8(char *a1)
{
  char v2 = *a1;
  char v3 = a1[1];
  uint64_t v4 = cche_param_ctx_sizeof();
  uint64_t v5 = swift_slowAlloc();
  *(void *)(v1 + 16) = v5;
  *(void *)(v1 + 24) = v5 + v4;
  *(void *)(v1 + 32) = v5;
  int v6 = cche_param_ctx_init();
  if (v6)
  {
    int v7 = v6;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    swift_willThrow();
    _s12ParamContextCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(unsigned char *)(v1 + 40) = v2;
    *(unsigned char *)(v1 + 41) = v3;
  }
  return v1;
}

uint64_t sub_1DB06B704()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    MEMORY[0x1E0189230](v1, -1, -1);
  }
  return swift_deallocClassInstance();
}

uint64_t _s12ParamContextCMa()
{
  return self;
}

uint64_t sub_1DB06B76C()
{
  cche_param_ctx_polynomial_degree();
  int v0 = cche_ciphertext_galois_elt_rotate_rows_right();
  if (!v0) {
    return 0;
  }
  int v1 = v0;
  sub_1DB04D0D4();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = v1;
  *(unsigned char *)(v2 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1DB06B82C()
{
  cche_param_ctx_polynomial_degree();
  int v0 = cche_ciphertext_galois_elt_swap_columns();
  if (!v0) {
    return 0;
  }
  int v1 = v0;
  sub_1DB04D0D4();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = v1;
  *(unsigned char *)(v2 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1DB06B8DC()
{
  return cche_encryption_params_polynomial_degree() >> 1;
}

uint64_t sub_1DB06B908()
{
  uint64_t result = cche_ciphertext_fresh_npolys();
  qword_1EA903410 = result;
  return result;
}

uint64_t sub_1DB06B92C()
{
  uint64_t result = cche_ciphertext_fresh_correction_factor();
  if (result < 0) {
    __break(1u);
  }
  else {
    qword_1EA903418 = result;
  }
  return result;
}

uint64_t sub_1DB06B954@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = cche_plaintext_sizeof();
  type metadata accessor for HE.ObjectStorage();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v4;
  swift_retain();
  uint64_t result = swift_slowAlloc();
  v9[3] = result;
  v9[4] = result + v8;
  if (HIDWORD(*(void *)(a1 + 16)))
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t result = cche_encode_simd_reduced_int64();
      int v11 = result;
      if (result)
      {
LABEL_4:
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v12 = v11;
        *(unsigned char *)(v12 + 4) = 0;
        swift_willThrow();
        return swift_release();
      }
    }
    else
    {
      uint64_t result = cche_encode_simd_int64();
      int v11 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    *a3 = v9;
  }
  return result;
}

uint64_t sub_1DB06BA5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v3 = *(unsigned char *)(*(void *)a1 + 41);
  v7[0] = *(unsigned char *)(*(void *)a1 + 40);
  v7[1] = v3;
  char v4 = *(unsigned char *)(v2 + 40);
  LOBYTE(v2) = *(unsigned char *)(v2 + 41);
  v6[0] = v4;
  v6[1] = v2;
  return _s16CryptoKitPrivate2HEO16EncryptionParamsV2eeoiySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v6) & 1;
}

char *sub_1DB06BAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16) && v3)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
    uint64_t v22 = v5;
    if (v5)
    {
      uint64_t v6 = sub_1DB0C51B8();
      *(void *)(v6 + 16) = v5;
      uint64_t v21 = v6;
      bzero((void *)(v6 + 32), 8 * v5);
    }
    else
    {
      uint64_t v21 = MEMORY[0x1E4FBC860];
    }
    uint64_t result = (char *)sub_1DB0C5188();
    uint64_t v8 = 0;
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 8 * v8 + 32);
      uint64_t v11 = *(void *)(v10 + 16);
      int64_t v12 = *((void *)v9 + 2);
      int64_t v2 = v12 + v11;
      if (__OFADD__(v12, v11))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      sub_1DB0C5188();
      uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (result && v2 <= *((void *)v9 + 3) >> 1)
      {
        if (*(void *)(v10 + 16)) {
          goto LABEL_18;
        }
      }
      else
      {
        if (v12 <= v2) {
          int64_t v13 = v12 + v11;
        }
        else {
          int64_t v13 = v12;
        }
        uint64_t result = sub_1DB07E684(result, v13, 1, v9);
        uint64_t v9 = result;
        if (*(void *)(v10 + 16))
        {
LABEL_18:
          uint64_t v14 = *((void *)v9 + 2);
          if ((*((void *)v9 + 3) >> 1) - v14 < v11) {
            goto LABEL_32;
          }
          uint64_t result = (char *)memcpy(&v9[8 * v14 + 32], (const void *)(v10 + 32), 8 * v11);
          if (v11)
          {
            uint64_t v15 = *((void *)v9 + 2);
            BOOL v16 = __OFADD__(v15, v11);
            uint64_t v17 = v15 + v11;
            if (v16) {
              goto LABEL_33;
            }
            *((void *)v9 + 2) = v17;
          }
          goto LABEL_8;
        }
      }
      if (v11) {
        goto LABEL_31;
      }
LABEL_8:
      uint64_t result = (char *)swift_bridgeObjectRelease();
      if (v3 == ++v8)
      {
        uint64_t result = (char *)swift_bridgeObjectRelease();
        if ((unsigned __int128)(v22 * (__int128)v3) >> 64 == (v22 * v3) >> 63)
        {
          if (*((void *)v9 + 2) != v22 * v3)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
          int64_t v2 = v21;
          sub_1DB0C5188();
          int v18 = cche_crt_compose();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v18) {
            return (char *)v2;
          }
          swift_bridgeObjectRelease();
          sub_1DB04D0D4();
          swift_allocError();
          char v20 = 0;
          *(_DWORD *)uint64_t v19 = v18;
          goto LABEL_28;
        }
LABEL_34:
        __break(1u);
        return result;
      }
    }
  }
  sub_1DB04D0D4();
  swift_allocError();
  *(_DWORD *)uint64_t v19 = 5;
  char v20 = 1;
LABEL_28:
  *(unsigned char *)(v19 + 4) = v20;
  swift_willThrow();
  return (char *)v2;
}

uint64_t sub_1DB06BD34()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1DB06BE84(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    sub_1DB0C5188();
  }
  return a1;
}

uint64_t sub_1DB06C038(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DB06C16C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  return a1;
}

uint64_t sub_1DB06C2AC(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB06C3F8(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1DB06C534(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB06C678(_DWORD *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1DB06C8C4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void sub_1DB06C8D8(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v9 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v9 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v9)
  {
    if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v9;
    }
    else {
      int v15 = 1;
    }
    if (((v8 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v9 + a2;
      bzero(a1, v10);
      *a1 = v16;
    }
    switch(v14)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1DB06CB78);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = (a2 - 1);
          }
          void *v18 = v19;
        }
        else
        {
          uint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Proof()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for ZKPErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB06CC84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZKPErrors()
{
  return &type metadata for ZKPErrors;
}

ValueMetadata *type metadata accessor for PointVar()
{
  return &type metadata for PointVar;
}

ValueMetadata *type metadata accessor for ScalarVar()
{
  return &type metadata for ScalarVar;
}

unint64_t sub_1DB06CCE0()
{
  unint64_t result = qword_1EA8FE4D8;
  if (!qword_1EA8FE4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE4D8);
  }
  return result;
}

uint64_t sub_1DB06CD34()
{
  uint64_t result = sub_1DB05C118(0x654B204153444345uLL, 0xEF646E696C422079);
  qword_1EA903420 = result;
  *(void *)algn_1EA903428 = v1;
  return result;
}

uint64_t static CKPIETFKeyBlinding.blindSign(_:blindedBy:with:context:)(uint64_t a1, uint64_t a2, __SecKey *a3, __SecKey *a4, void *a5)
{
  return sub_1DB06DEF8(a1, a2, a3, a4, a5);
}

void static CKPIETFKeyBlinding.blindPublicKey(publicKey:with:context:)(__SecKey *a1, __SecKey *a2, void *a3)
{
}

void static CKPIETFKeyBlinding.unblindPublicKey(_:with:context:)(__SecKey *a1, __SecKey *a2, void *a3)
{
}

id sub_1DB06D0E8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t (*a7)(id, id, id))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  unsigned int v13 = (void *)a7(v10, v11, v12);

  return v13;
}

id CKPIETFKeyBlinding.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id CKPIETFKeyBlinding.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKPIETFKeyBlinding();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CKPIETFKeyBlinding.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKPIETFKeyBlinding();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DB06D29C(__SecKey *a1)
{
  uint64_t result = (uint64_t)SecKeyCopyAttributes(a1);
  if (result)
  {
    *(void *)&long long v2 = 0;
    type metadata accessor for CFString(0);
    sub_1DB06F6FC(&qword_1EA8FDE30, type metadata accessor for CFString);
    uint64_t result = sub_1DB0C4FC8();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

void sub_1DB06D574()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE4E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DB0C7D40;
  id v1 = (void *)*MEMORY[0x1E4F3B718];
  long long v2 = (void *)*MEMORY[0x1E4F3B740];
  *(void *)(inited + 32) = *MEMORY[0x1E4F3B718];
  *(void *)(inited + 40) = v2;
  int v3 = (void *)*MEMORY[0x1E4F3B6D8];
  unsigned int v4 = (void *)*MEMORY[0x1E4F3B6F0];
  *(void *)(inited + 48) = *MEMORY[0x1E4F3B6D8];
  *(void *)(inited + 56) = v4;
  uint64_t v5 = (void *)*MEMORY[0x1E4F3B708];
  *(void *)(inited + 64) = *MEMORY[0x1E4F3B708];
  id v6 = v1;
  id v7 = v2;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  *(void *)(inited + 72) = sub_1DB0C51E8();
  sub_1DB089194(inited);
  type metadata accessor for CFString(0);
  sub_1DB06F6FC(&qword_1EA8FDE30, type metadata accessor for CFString);
  CFDictionaryRef v11 = (const __CFDictionary *)sub_1DB0C4FB8();
  swift_bridgeObjectRelease();
  CFDataRef v12 = (const __CFData *)sub_1DB0C49E8();
  SecKeyRef v13 = SecKeyCreateWithData(v12, v11, 0);

  if (v13) {
  else
  }
    __break(1u);
}

void _s16CryptoKitPrivate18CKPIETFKeyBlindingC23privateScalarFromSecKeyy10Foundation4DataVSgSo0iJ3RefaFZ_0(__SecKey *a1)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  sub_1DB06D29C(a1);
  error[0] = 0;
  CFDataRef v2 = SecKeyCopyExternalRepresentation(a1, error);
  CFDataRef v3 = v2;
  if (v2)
  {
    uint64_t v4 = sub_1DB0C4A08();
    unint64_t v6 = v5;

    sub_1DB0C4F38();
    sub_1DB04239C(v4, v6);
    sub_1DB06F6FC((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
    sub_1DB0C4D78();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
    swift_dynamicCast();
    id v7 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
    id v8 = (void *)sub_1DB0C49E8();
    id v9 = objc_msgSend(v7, sel_initWithx963Representation_group_, v8, v12);
    sub_1DB042664(v4, v6);

    if (v9)
    {
      id v10 = objc_msgSend(v9, sel_serializedBigEndianScalar);
      if (v10)
      {
        CFDictionaryRef v11 = v10;
        sub_1DB0C4A08();

        sub_1DB042664(v4, v6);
      }
      else
      {

        sub_1DB042664(v4, v6);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

CFDataRef _s16CryptoKitPrivate18CKPIETFKeyBlindingC7isValid9signature3for4with7contextSb10Foundation4DataV_AKSo9SecKeyRefaSo6NSDataCtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, __SecKey *a5)
{
  uint64_t v47 = a3;
  unint64_t v48 = a4;
  uint64_t v45 = a1;
  unint64_t v46 = a2;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE510);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1DB0C4EC8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE500);
  MEMORY[0x1F4188790](v13 - 8);
  int v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1DB0C4F28();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DB06D29C(a5);
  int64_t v38 = v12;
  unint64_t v39 = v19;
  uint64_t v43 = v16;
  uint64_t v44 = v17;
  unint64_t v40 = v8;
  uint64_t v41 = v9;
  uint64_t v20 = v47;
  unint64_t v21 = v48;
  uint64_t v42 = v10;
  error[0] = 0;
  CFDataRef result = SecKeyCopyExternalRepresentation(a5, error);
  if (result)
  {
    CFDataRef v23 = result;
    uint64_t v24 = sub_1DB0C4A08();
    unint64_t v26 = v25;

    uint64_t v49 = v24;
    unint64_t v50 = v26;
    sub_1DB04239C(v24, v26);
    sub_1DB0C4EF8();
    uint64_t v37 = v24;
    uint64_t v27 = v43;
    uint64_t v28 = v44;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v15, 0, 1, v43);
    uint64_t v29 = v39;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v39, v15, v27);
    uint64_t v49 = v45;
    unint64_t v50 = v46;
    sub_1DB04239C(v45, v46);
    sub_1DB06F7A0();
    unint64_t v30 = v40;
    sub_1DB0C4EB8();
    uint64_t v32 = v41;
    uint64_t v31 = v42;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v30, 0, 1, v41);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    unint64_t v46 = v26;
    unint64_t v34 = v38;
    v33(v38, v30, v32);
    uint64_t v49 = v20;
    unint64_t v50 = v21;
    char v35 = sub_1DB0C4ED8();
    sub_1DB042664(v37, v46);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
    return (CFDataRef)(v35 & 1);
  }
  if (error[0])
  {

    char v35 = 0;
    return (CFDataRef)(v35 & 1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB06DD5C(void *a1, id a2, unint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (!v6) {
    __break(1u);
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_1DB0C4A08();
  unint64_t v10 = v9;

  sub_1DB05DEE8(0, 0x1000000000000uLL);
  sub_1DB04239C(v8, v10);
  sub_1DB04239C((uint64_t)a2, a3);
  sub_1DB05DEE8((uint64_t)a2, a3);
  sub_1DB042664((uint64_t)a2, a3);
  sub_1DB042664(v8, v10);
  if (qword_1EA8FDD80 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_1DB0632DC(v8, v10, 1, qword_1EA903420, *(unint64_t *)algn_1EA903428, 72, 0);
  if (v3) {
    goto LABEL_7;
  }
  if (*(void *)(v11 + 16))
  {
    a2 = *(id *)(v11 + 32);
    swift_bridgeObjectRelease();
LABEL_7:
    sub_1DB042664(v8, v10);
    return (uint64_t)a2;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1DB06DEF8(uint64_t a1, uint64_t a2, __SecKey *a3, __SecKey *a4, void *a5)
{
  uint64_t v61 = a2;
  id v62 = a5;
  uint64_t v60 = a1;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1DB0C4EC8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1DB0C4E98();
  uint64_t v13 = *(void (***)(char *, uint64_t))(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  sub_1DB06D29C(a3);
  if (v5) {
    return (uint64_t)v13;
  }
  sub_1DB06D29C(a4);
  CFDataRef v16 = SecKeyCopyExternalRepresentation(a4, error);
  if (!v16)
  {
    if (!error[0])
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    sub_1DB06F630();
    swift_allocError();
    unsigned char *v39 = 3;
    swift_willThrow();
    return (uint64_t)v13;
  }
  CFDataRef v17 = v16;
  uint64_t v52 = v9;
  uint64_t v53 = v13;
  uint64_t v18 = sub_1DB0C4A08();
  uint64_t v58 = v18;
  unint64_t v20 = v19;

  uint64_t v21 = sub_1DB0C4F38();
  unint64_t v59 = v20;
  sub_1DB04239C(v18, v20);
  uint64_t v55 = sub_1DB06F6FC((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  id v56 = (void *)v21;
  sub_1DB0C4D78();
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v57 = v63;
  id v22 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
  uint64_t v23 = v58;
  uint64_t v24 = (void *)sub_1DB0C49E8();
  uint64_t v13 = (void (**)(char *, uint64_t))objc_msgSend(v22, sel_initWithx963Representation_group_, v24, v57);
  sub_1DB042664(v23, v59);

  if (!v13)
  {
    __break(1u);
    goto LABEL_15;
  }
  CFDataRef v25 = SecKeyCopyExternalRepresentation(a3, error);
  if (!v25)
  {
    if (!error[0])
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    sub_1DB06F630();
    swift_allocError();
    unsigned char *v40 = 3;
    swift_willThrow();

    sub_1DB042664(v58, v59);
    return (uint64_t)v13;
  }
  CFDataRef v26 = v25;
  id v57 = v13;
  uint64_t v27 = sub_1DB0C4A08();
  unint64_t v29 = v28;

  unint64_t v30 = v29;
  sub_1DB04239C(v27, v29);
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v56 = v63;
  id v31 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
  uint64_t v32 = (void *)sub_1DB0C49E8();
  id v33 = objc_msgSend(v31, sel_initWithx963Representation_group_, v32, v56);
  uint64_t v55 = v27;
  id v56 = (void *)v30;
  uint64_t v34 = v27;
  char v35 = v33;
  sub_1DB042664(v34, v30);

  if (!v35)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v37 = (void *)sub_1DB0C4A08();
  unint64_t v38 = v36;
  uint64_t v42 = (void *)sub_1DB06DD5C(v35, v37, v36);
  id v62 = v35;
  sub_1DB042664((uint64_t)v37, v38);
  id v43 = sub_1DB093C64(v57, (uint64_t)v42);

  id v44 = objc_msgSend(v43, sel_x963Representation);
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = sub_1DB0C4A08();
    uint64_t v48 = v47;

    uint64_t v64 = v46;
    uint64_t v65 = v48;
    sub_1DB0C4E78();
    uint64_t v64 = v60;
    uint64_t v65 = v61;
    sub_1DB06F7A0();
    sub_1DB0C4E88();
    uint64_t v49 = sub_1DB0C4EA8();
    unint64_t v51 = v50;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v8);
    uint64_t v13 = (void (**)(char *, uint64_t))sub_1DB0C49E8();
    sub_1DB042664(v49, v51);

    sub_1DB042664(v55, (unint64_t)v56);
    sub_1DB042664(v58, v59);

    v53[1](v15, v12);
    return (uint64_t)v13;
  }
LABEL_18:
  __break(1u);
  swift_unexpectedError();
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t _s16CryptoKitPrivate18CKPIETFKeyBlindingC28compressedRepresentationFrom6secKeySo6NSDataCSgSo03SecJ3Refa_tFZ_0(__SecKey *a1)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE500);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1DB0C4F28();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  error[0] = 0;
  sub_1DB06D29C(a1);
  CFDataRef v11 = SecKeyCopyExternalRepresentation(a1, error);
  if (!v11) {
    return 0;
  }
  CFDataRef v12 = v11;
  uint64_t v13 = sub_1DB0C4A08();
  unint64_t v15 = v14;

  v19[2] = v13;
  v19[3] = v15;
  sub_1DB04239C(v13, v15);
  sub_1DB0C4EF8();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  uint64_t v16 = sub_1DB0C4F08();
  unint64_t v18 = v17;
  uint64_t v9 = sub_1DB0C49E8();
  sub_1DB042664(v16, v18);
  sub_1DB042664(v13, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t _s16CryptoKitPrivate18CKPIETFKeyBlindingC10secKeyFrom24compressedRepresentationSo03SecG3RefaSgSo6NSDataC_tFZ_0()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE500);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1DB0C4F28();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v15[2] = sub_1DB0C4A08();
  v15[3] = v7;
  sub_1DB0C4F18();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  uint64_t v8 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  uint64_t v9 = MEMORY[0x1E0187DF0](v8);
  unint64_t v11 = v10;
  sub_1DB06D574();
  uint64_t v13 = v12;
  sub_1DB042664(v9, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v13;
}

void sub_1DB06E9A8(__SecKey *a1, __SecKey *a2, void *a3)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1DB0C4F28();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v54 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v54 - v15;
  sub_1DB06D29C(a1);
  if (!v3)
  {
    sub_1DB06D29C(a2);
    error[0] = 0;
    CFDataRef v17 = SecKeyCopyExternalRepresentation(a1, error);
    if (v17)
    {
      CFDataRef v18 = v17;
      id v59 = a3;
      uint64_t v60 = v8;
      uint64_t v19 = sub_1DB0C4A08();
      unint64_t v21 = v20;

      uint64_t v62 = v19;
      unint64_t v63 = v21;
      sub_1DB04239C(v19, v21);
      sub_1DB0C4EF8();
      uint64_t v57 = v19;
      unint64_t v58 = v21;
      uint64_t v23 = v60;
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v14, v16, v7);
      uint64_t v24 = sub_1DB0C4F08();
      unint64_t v26 = v25;
      id v56 = sub_1DB0677F8();
      sub_1DB042664(v24, v26);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
      v27(v14, v7);
      CFDataRef v28 = SecKeyCopyExternalRepresentation(a2, error);
      if (!v28)
      {
        if (error[0])
        {

          sub_1DB06F630();
          swift_allocError();
          *uint64_t v41 = 3;
          swift_willThrow();

          sub_1DB042664(v57, v58);
          v27(v16, v7);
          return;
        }
        goto LABEL_17;
      }
      CFDataRef v29 = v28;
      uint64_t v55 = v27;
      uint64_t v30 = sub_1DB0C4A08();
      unint64_t v32 = v31;

      sub_1DB0C4F38();
      uint64_t v60 = v30;
      sub_1DB04239C(v30, v32);
      sub_1DB06F6FC((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      uint64_t v33 = v61;
      id v34 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      char v35 = (void *)sub_1DB0C49E8();
      id v36 = objc_msgSend(v34, sel_initWithx963Representation_group_, v35, v33);
      unint64_t v54 = v32;
      sub_1DB042664(v60, v32);

      if (v36)
      {
        uint64_t v37 = v36;
        unint64_t v39 = (void *)sub_1DB0C4A08();
        unint64_t v40 = v38;
        uint64_t v42 = (void *)sub_1DB06DD5C(v37, v39, v38);
        id v59 = v37;
        sub_1DB042664((uint64_t)v39, v40);
        id v43 = sub_1DB072A88((uint64_t)v42, v56);

        id v44 = objc_msgSend(v43, sel_serializedPublicKey_, 1);
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = sub_1DB0C4A08();
          unint64_t v48 = v47;

          uint64_t v62 = v46;
          unint64_t v63 = v48;
          uint64_t v49 = sub_1DB0C4F18();
          uint64_t v50 = MEMORY[0x1E0187DF0](v49);
          unint64_t v52 = v51;
          sub_1DB06D574();
          sub_1DB042664(v50, v52);

          sub_1DB042664(v60, v54);
          sub_1DB042664(v57, v58);
          uint64_t v53 = v55;
          v55(v11, v7);
          v53(v16, v7);
          return;
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (error[0])
      {

        sub_1DB06F630();
        swift_allocError();
        *id v22 = 3;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

void sub_1DB06EFAC(__SecKey *a1, __SecKey *a2, void *a3)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1DB0C4F28();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v55 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v55 - v15;
  error[0] = 0;
  sub_1DB06D29C(a1);
  if (!v3)
  {
    sub_1DB06D29C(a2);
    CFDataRef v17 = SecKeyCopyExternalRepresentation(a1, error);
    if (v17)
    {
      CFDataRef v18 = v17;
      id v64 = a3;
      uint64_t v65 = v8;
      uint64_t v19 = sub_1DB0C4A08();
      unint64_t v21 = v20;

      uint64_t v67 = v19;
      unint64_t v68 = v21;
      sub_1DB04239C(v19, v21);
      sub_1DB0C4EF8();
      uint64_t v62 = v19;
      unint64_t v63 = v21;
      uint64_t v23 = v65;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v14, v16, v7);
      uint64_t v24 = sub_1DB0C4F08();
      unint64_t v26 = v25;
      id v61 = sub_1DB0677F8();
      sub_1DB042664(v24, v26);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
      v27(v14, v7);
      CFDataRef v28 = SecKeyCopyExternalRepresentation(a2, error);
      if (!v28)
      {
        if (error[0])
        {

          sub_1DB06F630();
          swift_allocError();
          *uint64_t v41 = 3;
          swift_willThrow();

          sub_1DB042664(v62, v63);
          v27(v16, v7);
          return;
        }
        goto LABEL_18;
      }
      CFDataRef v29 = v28;
      uint64_t v60 = v27;
      uint64_t v30 = sub_1DB0C4A08();
      unint64_t v32 = v31;

      sub_1DB0C4F38();
      uint64_t v65 = v30;
      sub_1DB04239C(v30, v32);
      sub_1DB06F6FC((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      uint64_t v33 = v66;
      id v34 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      char v35 = (void *)sub_1DB0C49E8();
      id v36 = objc_msgSend(v34, sel_initWithx963Representation_group_, v35, v33);
      unint64_t v59 = v32;
      sub_1DB042664(v65, v32);

      if (v36)
      {
        uint64_t v37 = v36;
        unint64_t v39 = (void *)sub_1DB0C4A08();
        unint64_t v40 = v38;
        uint64_t v42 = (void *)sub_1DB06DD5C(v37, v39, v38);
        sub_1DB042664((uint64_t)v39, v40);
        id v64 = v42;
        id v43 = objc_msgSend(v42, sel_inverseModOrder);
        if (v43)
        {
          id v57 = v43;
          id v58 = v37;
          id v44 = v61;
          id v56 = sub_1DB072A88((uint64_t)v43, v61);
          id v45 = objc_msgSend(v56, sel_serializedPublicKey_, 1);
          if (v45)
          {
            uint64_t v46 = v45;
            uint64_t v47 = sub_1DB0C4A08();
            unint64_t v49 = v48;

            uint64_t v67 = v47;
            unint64_t v68 = v49;
            uint64_t v50 = sub_1DB0C4F18();
            uint64_t v51 = MEMORY[0x1E0187DF0](v50);
            unint64_t v53 = v52;
            sub_1DB06D574();
            sub_1DB042664(v51, v53);

            sub_1DB042664(v65, v59);
            sub_1DB042664(v62, v63);
            unint64_t v54 = v60;
            v60(v11, v7);
            v54(v16, v7);
            return;
          }
          goto LABEL_20;
        }
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return;
      }
    }
    else
    {
      if (error[0])
      {

        sub_1DB06F630();
        swift_allocError();
        *id v22 = 3;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t type metadata accessor for CKPIETFKeyBlinding()
{
  return self;
}

unint64_t sub_1DB06F630()
{
  unint64_t result = qword_1EA8FE4E0;
  if (!qword_1EA8FE4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE4E0);
  }
  return result;
}

uint64_t sub_1DB06F684(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE4F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1DB06F6EC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1DB06F6FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB06F744(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1DB06F7A0()
{
  unint64_t result = qword_1EA8FE508;
  if (!qword_1EA8FE508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE508);
  }
  return result;
}

uint64_t sub_1DB06F7F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for CKPIETFKeyBlindingErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB06F91CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKPIETFKeyBlindingErrors()
{
  return &type metadata for CKPIETFKeyBlindingErrors;
}

unint64_t sub_1DB06F958()
{
  unint64_t result = qword_1EA8FE518[0];
  if (!qword_1EA8FE518[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FE518);
  }
  return result;
}

objc_class *RSAPSSSPKI_Bridging.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_1DB0C4CB8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_allocWithZone(v2);
  sub_1DB04239C(a1, a2);
  sub_1DB0C4C98();
  if (v3)
  {
    sub_1DB042664(a1, a2);

    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v10 + OBJC_IVAR____TtC16CryptoKitPrivate19RSAPSSSPKI_Bridging_backingStruct, v9, v6);

    v12.receiver = v10;
    v12.super_class = v2;
    long long v2 = (objc_class *)objc_msgSendSuper2(&v12, sel_init);
    sub_1DB042664(a1, a2);
  }
  return v2;
}

id RSAPSSSPKI_Bridging.init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_1DB0C4CB8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = v2;
  sub_1DB04239C(a1, a2);
  sub_1DB0C4C98();
  if (v3)
  {
    sub_1DB042664(a1, a2);

    type metadata accessor for RSAPSSSPKI_Bridging();
    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v10 + OBJC_IVAR____TtC16CryptoKitPrivate19RSAPSSSPKI_Bridging_backingStruct, v9, v6);

    unint64_t v11 = (objc_class *)type metadata accessor for RSAPSSSPKI_Bridging();
    v13.receiver = v10;
    v13.super_class = v11;
    id v10 = objc_msgSendSuper2(&v13, sel_init);
    sub_1DB042664(a1, a2);
  }
  return v10;
}

uint64_t type metadata accessor for RSAPSSSPKI_Bridging()
{
  uint64_t result = qword_1EBE7DE58;
  if (!qword_1EBE7DE58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1DB06FF4C()
{
  return sub_1DB0C4C88();
}

uint64_t static RSAPSSSPKI_Bridging.serialize(keyBytes:)()
{
  return sub_1DB0C4CA8();
}

id RSAPSSSPKI_Bridging.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void RSAPSSSPKI_Bridging.init()()
{
}

id RSAPSSSPKI_Bridging.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RSAPSSSPKI_Bridging();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DB070238()
{
  return type metadata accessor for RSAPSSSPKI_Bridging();
}

uint64_t sub_1DB070240()
{
  uint64_t result = sub_1DB0C4CB8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for RSAPSSSPKI_Bridging(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RSAPSSSPKI_Bridging);
}

uint64_t dispatch thunk of RSAPSSSPKI_Bridging.__allocating_init(data:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of RSAPSSSPKI_Bridging.publicKeyBytes()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t sub_1DB070344()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1DB0703E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1DB0704C0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_1DB07053C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DB0705B4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DB07062C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DB0706A4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DB07071C(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        unint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_1DB0708CC(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1DB070B08);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t _s12TokenRequestVMa()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for PEC()
{
  return &type metadata for PEC;
}

uint64_t sub_1DB070B58(unsigned __int8 a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_1DB0C5088();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DB0C5058();
  uint64_t v10 = sub_1DB0C5048();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v12 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    sub_1DB05A7A4(a1, 1);
    uint64_t v15 = v14;
    unint64_t v17 = v16;
    uint64_t v24 = v10;
    unint64_t v25 = v12;
    sub_1DB04239C(v10, v12);
    sub_1DB05DEE8(v15, v17);
    sub_1DB042664(v15, v17);
    sub_1DB069BB4(v10, v12);
    uint64_t v18 = v24;
    unint64_t v19 = v25;
    sub_1DB0A41A4(a2, a3 & 1);
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    uint64_t v26 = v18;
    unint64_t v27 = v19;
    sub_1DB04239C(v18, v19);
    sub_1DB05DEE8(v21, v23);
    sub_1DB042664(v21, v23);
    sub_1DB042664(v18, v19);
    return v26;
  }
  return result;
}

uint64_t sub_1DB070D48(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, void *a9, char a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v108 = a3;
  uint64_t v104 = a1;
  unint64_t v105 = a2;
  uint64_t v18 = sub_1DB0C5088();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  unint64_t v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a10 != 1)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v100 = a8;
  uint64_t v103 = a5;
  id v107 = v12;
  uint64_t v98 = a6;
  uint64_t v99 = a7;
  int v102 = a12;
  unint64_t v23 = v20;
  uint64_t v24 = sub_1DB070B58(1u, a11, a12 & 1);
  unint64_t v26 = v25;
  sub_1DB0C5058();
  uint64_t v27 = sub_1DB0C5048();
  unint64_t v29 = v28;
  uint64_t v30 = *(void (**)(char *, id))(v19 + 8);
  id v111 = (id)(v19 + 8);
  id v112 = v23;
  uint64_t v110 = v30;
  v30(v22, v23);
  if (v29 >> 60 == 15)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v113 = v27;
  unint64_t v114 = v29;
  sub_1DB067A4C(v27, v29);
  sub_1DB04239C(v24, v26);
  sub_1DB05DEE8(v24, v26);
  sub_1DB042664(v24, v26);
  sub_1DB069BB4(v27, v29);
  unint64_t v31 = v114;
  uint64_t v117 = v113;
  uint64_t v101 = a11;
  if (a4 >> 60 == 15)
  {
    unint64_t v32 = a4;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0xC000000000000000;
    uint64_t v36 = v108;
  }
  else
  {
    unint64_t v37 = a4 >> 62;
    uint64_t v34 = 0;
    unint64_t v35 = a4;
    unint64_t v32 = a4;
    uint64_t v36 = v108;
    uint64_t v33 = v108;
    switch(v37)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v108), v108)) {
          goto LABEL_23;
        }
        uint64_t v34 = HIDWORD(v108) - (int)v108;
LABEL_10:
        unint64_t v35 = v32;
        uint64_t v33 = v108;
        break;
      case 2uLL:
        uint64_t v39 = *(void *)(v108 + 16);
        uint64_t v38 = *(void *)(v108 + 24);
        uint64_t v34 = v38 - v39;
        if (!__OFSUB__(v38, v39)) {
          goto LABEL_10;
        }
        goto LABEL_24;
      case 3uLL:
        break;
      default:
        uint64_t v34 = BYTE6(v32);
        goto LABEL_10;
    }
  }
  unint64_t v109 = v26;
  sub_1DB05A7A4(v34, 2);
  uint64_t v41 = v40;
  unint64_t v43 = v42;
  uint64_t v115 = v117;
  unint64_t v116 = v31;
  unint64_t v106 = v31;
  sub_1DB04239C(v117, v31);
  sub_1DB05DEE8(v41, v43);
  sub_1DB042664(v41, v43);
  uint64_t v44 = v115;
  unint64_t v45 = v116;
  uint64_t v113 = v115;
  unint64_t v114 = v116;
  unint64_t v95 = v32;
  sub_1DB067A4C(v36, v32);
  sub_1DB04239C(v44, v45);
  sub_1DB04239C(v33, v35);
  sub_1DB05DEE8(v33, v35);
  sub_1DB042664(v33, v35);
  sub_1DB042664(v33, v35);
  sub_1DB042664(v44, v45);
  uint64_t v47 = v113;
  unint64_t v46 = v114;
  sub_1DB0C5058();
  uint64_t v48 = sub_1DB0C5048();
  unint64_t v50 = v49;
  uint64_t v97 = v22;
  v110(v22, v112);
  if (v50 >> 60 == 15) {
    goto LABEL_26;
  }
  uint64_t v113 = v48;
  unint64_t v114 = v50;
  uint64_t v51 = v24;
  uint64_t v52 = v24;
  unint64_t v53 = v109;
  sub_1DB04239C(v51, v109);
  sub_1DB067A4C(v48, v50);
  sub_1DB05DEE8(v52, v53);
  sub_1DB042664(v52, v53);
  sub_1DB069BB4(v48, v50);
  uint64_t v54 = v113;
  unint64_t v55 = v114;
  uint64_t v56 = sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  uint64_t v57 = sub_1DB0C4D68();
  id v58 = v107;
  uint64_t v59 = sub_1DB0632DC(v47, v46, 1, v54, v55, v57, 0);
  id v107 = v58;
  if (v58)
  {
    sub_1DB042664(v54, v55);
    sub_1DB042664(v47, v46);
    sub_1DB042664(v117, v106);
    sub_1DB042664(v52, v53);
    return v56;
  }
  uint64_t v96 = v56;
  uint64_t v93 = v47;
  if (!*(void *)(v59 + 16)) {
    goto LABEL_27;
  }
  unint64_t v92 = v46;
  id v94 = a9;
  id v60 = *(id *)(v59 + 32);
  swift_bridgeObjectRelease();
  sub_1DB042664(v54, v55);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v115);
  uint64_t v62 = (void (*)(char *, id))sub_1DB072A88((uint64_t)v60, v61);

  id v94 = sub_1DB07A220(v94, (uint64_t)v62);
  uint64_t v63 = (uint64_t)v97;
  sub_1DB0C5058();
  uint64_t v64 = sub_1DB0C5048();
  unint64_t v66 = v65;
  v110((char *)v63, v112);
  if (v66 >> 60 == 15)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v97 = (char *)v52;
  uint64_t v110 = v62;
  id v111 = v60;
  uint64_t v67 = v101;
  int v91 = v102 & 1;
  uint64_t v68 = sub_1DB070B58(1u, v101, v102 & 1);
  unint64_t v70 = v69;
  uint64_t v113 = v64;
  unint64_t v114 = v66;
  sub_1DB04239C(v64, v66);
  sub_1DB05DEE8(v68, v70);
  sub_1DB042664(v68, v70);
  sub_1DB069BB4(v64, v66);
  uint64_t v71 = v113;
  unint64_t v72 = v114;
  id v73 = v107;
  sub_1DB073FA8(v104, v105, v113, v114);
  if (v73)
  {
LABEL_29:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1DB071730);
  }
  id v75 = v74;
  id v76 = sub_1DB072A88((uint64_t)v103, v74);
  sub_1DB042664(v71, v72);

  sub_1DB0C4D78();
  swift_dynamicCast();
  id v77 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v115);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFC8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DB0C77B0;
  uint64_t v79 = v98;
  *(void *)(inited + 32) = v98;
  uint64_t v56 = inited + 32;
  *(void *)(inited + 40) = v76;
  id v80 = v79;
  id v112 = v76;
  uint64_t v81 = v67;
  int v82 = v91;
  uint64_t v83 = sub_1DB070B58(1u, v81, v91);
  unint64_t v85 = v84;
  id v107 = v77;
  char v86 = sub_1DB071740(v77, v94, inited, v99, (uint64_t)v100, v83, v84, v82);
  v100 = v80;

  sub_1DB042664(v83, v85);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
  swift_arrayDestroy();
  unint64_t v87 = v92;
  uint64_t v88 = v93;
  if (v86)
  {
    uint64_t v56 = sub_1DB0718CC(v104, v105, v108, v95, v103, v100, 1, v101, v102 & 1);
  }
  else
  {
    sub_1DB0744E8();
    swift_allocError();
    swift_willThrow();
  }
  sub_1DB042664(v88, v87);
  sub_1DB042664(v117, v106);
  sub_1DB042664((uint64_t)v97, v109);

  return v56;
}

uint64_t sub_1DB071740(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8)
{
  char v9 = a8;
  unint64_t v16 = sub_1DB095920(&v33, 0, a2, a6, a7, a3, a8);
  if (!v8)
  {
    unint64_t v17 = v16;
    id v18 = sub_1DB072A88(a5, a1);
    unint64_t v32 = a7;
    uint64_t v19 = a4;
    id v20 = sub_1DB072A88(a4, a2);
    id v31 = sub_1DB07A220(v18, (uint64_t)v20);

    a4 = (uint64_t)sub_1DB072A88(a5, v17);
    id v21 = v33;
    uint64_t v30 = v19;
    uint64_t v22 = v19;
    unint64_t v23 = v17;
    id v24 = sub_1DB072A88(v22, v33);
    id v25 = sub_1DB07A220((void *)a4, (uint64_t)v24);

    uint64_t v26 = a6;
    uint64_t v27 = v25;
    unint64_t v29 = (void *)sub_1DB096CEC(v26, v32, a2, v23, v21, v31, v25, v9 & 1);
    LOBYTE(a4) = objc_msgSend(v29, sel_isEqual_, v30);
  }
  return a4 & 1;
}

uint64_t sub_1DB0718CC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, int a7, uint64_t a8, char a9)
{
  uint64_t v41 = a8;
  int v42 = a7;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = sub_1DB0C4FA8();
  uint64_t v37 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1DB0C4D28();
  uint64_t v39 = *(void *)(v18 - 8);
  uint64_t v40 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v38 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = objc_msgSend(a5, sel_inverseModOrder);
  if (!v20) {
LABEL_13:
  }
    __break(1u);
  id v21 = v20;
  id v22 = sub_1DB072A88((uint64_t)v20, a6);

  id v36 = v22;
  uint64_t v23 = sub_1DB093234(a1, a2, a3, a4, v22, v41, v42, a9 & 1);
  unint64_t v25 = v24;
  sub_1DB074590(&qword_1EBE7DF98, MEMORY[0x1E4F25180]);
  sub_1DB0C4CF8();
  switch(v25 >> 62)
  {
    case 1uLL:
      if (v23 >> 32 < (int)v23)
      {
        __break(1u);
        goto LABEL_13;
      }
      sub_1DB04239C(v23, v25);
      uint64_t v30 = v43;
      sub_1DB097B14((int)v23, v23 >> 32);
      uint64_t v43 = v30;
LABEL_10:
      sub_1DB042664(v23, v25);
      uint64_t v29 = v40;
LABEL_11:
      id v31 = v38;
      sub_1DB0C4CE8();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v15);
      sub_1DB042664(v23, v25);
      uint64_t v46 = v29;
      uint64_t v47 = sub_1DB074590(&qword_1EBE7DF88, MEMORY[0x1E4F24FA0]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v45);
      uint64_t v33 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 16))(boxed_opaque_existential_1, v31, v29);
      __swift_project_boxed_opaque_existential_1(v45, v46);
      sub_1DB0C4908();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v29);
      uint64_t v34 = v44;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);

      return v34;
    case 2uLL:
      uint64_t v26 = *(void *)(v23 + 16);
      uint64_t v27 = *(void *)(v23 + 24);
      sub_1DB04239C(v23, v25);
      swift_retain();
      swift_retain();
      uint64_t v28 = v43;
      sub_1DB097B14(v26, v27);
      if (v28)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1DB071DC0);
      }
      swift_release();
      swift_release();
      sub_1DB042664(v23, v25);
      uint64_t v29 = v40;
      uint64_t v43 = 0;
      goto LABEL_11;
    case 3uLL:
      memset(v45, 0, 14);
      goto LABEL_7;
    default:
      v45[0] = v23;
      LOWORD(v45[1]) = v25;
      BYTE2(v45[1]) = BYTE2(v25);
      BYTE3(v45[1]) = BYTE3(v25);
      BYTE4(v45[1]) = BYTE4(v25);
      BYTE5(v45[1]) = BYTE5(v25);
LABEL_7:
      sub_1DB0C4CD8();
      goto LABEL_10;
  }
}

uint64_t sub_1DB071DD0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v121 = a8;
  id v127 = a7;
  long long v120 = a6;
  uint64_t v17 = a12;
  uint64_t v18 = sub_1DB0C5088();
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  if (a12)
  {
    uint64_t v22 = sub_1DB070D48(a1, a2, a3, a4, a5, v120, (uint64_t)v127, v121, a9, a10, a11, 1u);
    if (!v122) {
      return v22;
    }
    return v17;
  }
  id v117 = a9;
  uint64_t v118 = a1;
  unint64_t v119 = a2;
  unint64_t v23 = a4 >> 60;
  if (a4 >> 60 != 15 && a10 == 1)
  {
    sub_1DB07453C();
    swift_allocError();
    *unint64_t v24 = 1;
    swift_willThrow();
    return v17;
  }
  uint64_t v113 = a3;
  unint64_t v111 = a4;
  unint64_t v114 = a5;
  uint64_t v25 = v19;
  uint64_t v26 = v21;
  uint64_t v27 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_1DB070B58(a10, a11, 0);
  unint64_t v115 = v28;
  sub_1DB0C5058();
  uint64_t v29 = sub_1DB0C5048();
  unint64_t v31 = v30;
  unint64_t v32 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v108 = v27;
  uint64_t v110 = v25;
  uint64_t v109 = v26 + 8;
  id v107 = v32;
  v32(v27, v25);
  if (v31 >> 60 == 15) {
    goto LABEL_34;
  }
  uint64_t v112 = a11;
  uint64_t v33 = sub_1DB070B58(a10, a11, 0);
  unint64_t v35 = v34;
  uint64_t v123 = v29;
  unint64_t v124 = v31;
  sub_1DB04239C(v29, v31);
  sub_1DB05DEE8(v33, v35);
  sub_1DB042664(v33, v35);
  sub_1DB069BB4(v29, v31);
  uint64_t v36 = v123;
  unint64_t v37 = v124;
  id v38 = v122;
  sub_1DB073FA8(v118, v119, v123, v124);
  uint64_t v40 = (uint64_t)v127;
  if (v38) {
    goto LABEL_38;
  }
  uint64_t v41 = v39;
  id v42 = sub_1DB072A88((uint64_t)v114, v39);
  sub_1DB042664(v36, v37);

  if (a10 == 1)
  {
    sub_1DB0C4F38();
    sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
    sub_1DB0C4D78();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
    swift_dynamicCast();
    uint64_t v43 = v42;
    uint64_t v17 = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v125);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFC8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DB0C77B0;
    *(void *)(inited + 32) = v42;
    unint64_t v45 = v120;
    *(void *)(inited + 40) = v120;
    id v122 = v43;
    id v46 = v45;
    uint64_t v47 = sub_1DB070B58(1u, v112, 0);
    unint64_t v49 = v48;
    char v50 = sub_1DB071740((void *)v17, v117, inited, v40, (uint64_t)v121, v47, v48, 0);
    char v58 = v50;
    uint64_t v59 = v46;
    id v60 = v122;

    sub_1DB042664(v47, v49);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
    swift_arrayDestroy();
    unint64_t v61 = v115;
    if (v58)
    {
      uint64_t v17 = sub_1DB0718CC(v118, v119, v113, v111, v114, v59, 1, v112, 0);

      sub_1DB042664(v116, v61);
    }
    else
    {
      sub_1DB0744E8();
      swift_allocError();
      swift_willThrow();
      sub_1DB042664(v116, v61);
    }
    return v17;
  }
  id v122 = 0;
  if (a10 != 2)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v51 = sub_1DB05C118(0x6F666E49uLL, 0xE400000000000000);
  uint64_t v53 = v116;
  unint64_t v54 = v111;
  if (v23 > 0xE)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_38:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1DB072A78);
  }
  uint64_t v55 = v51;
  unint64_t v56 = v52;
  uint64_t v57 = 0;
  switch(v111 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v113), v113)) {
        goto LABEL_32;
      }
      uint64_t v57 = HIDWORD(v113) - (int)v113;
LABEL_20:
      id v106 = v42;
      sub_1DB05A7A4(v57, 2);
      uint64_t v65 = v64;
      unint64_t v67 = v66;
      uint64_t v125 = v55;
      unint64_t v126 = v56;
      sub_1DB04239C(v55, v56);
      sub_1DB05DEE8(v65, v67);
      sub_1DB042664(v65, v67);
      sub_1DB042664(v55, v56);
      uint64_t v68 = v125;
      unint64_t v69 = v126;
      uint64_t v123 = v125;
      unint64_t v124 = v126;
      uint64_t v70 = v113;
      sub_1DB067A4C(v113, v54);
      sub_1DB04239C(v68, v69);
      sub_1DB05DEE8(v70, v54);
      sub_1DB069BB4(v70, v54);
      sub_1DB042664(v68, v69);
      uint64_t v71 = v123;
      unint64_t v72 = v124;
      id v73 = v108;
      sub_1DB0C5058();
      uint64_t v74 = sub_1DB0C5048();
      unint64_t v76 = v75;
      v107(v73, v110);
      if (v76 >> 60 == 15) {
        goto LABEL_36;
      }
      uint64_t v123 = v74;
      unint64_t v124 = v76;
      sub_1DB067A4C(v74, v76);
      uint64_t v77 = v53;
      uint64_t v78 = v53;
      unint64_t v79 = v115;
      sub_1DB04239C(v78, v115);
      sub_1DB05DEE8(v77, v79);
      sub_1DB042664(v77, v79);
      sub_1DB069BB4(v74, v76);
      uint64_t v80 = v123;
      unint64_t v81 = v124;
      uint64_t v82 = sub_1DB0C4F38();
      sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      uint64_t v110 = v82;
      uint64_t v83 = sub_1DB0C4D68();
      uint64_t v17 = v71;
      id v84 = v122;
      uint64_t v85 = sub_1DB0632DC(v71, v72, 1, v80, v81, v83, 0);
      if (v84)
      {
        sub_1DB042664(v80, v81);

        sub_1DB042664(v77, v79);
        sub_1DB042664(v71, v72);
        return v17;
      }
      uint64_t v109 = v71;
      id v122 = (id)v72;
      if (!*(void *)(v85 + 16)) {
        goto LABEL_37;
      }
      char v86 = (char *)*(id *)(v85 + 32);
      swift_bridgeObjectRelease();
      sub_1DB042664(v80, v81);
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      id v87 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v125);
      uint64_t v108 = v86;
      uint64_t v88 = (void (*)(char *, uint64_t))sub_1DB072A88((uint64_t)v86, v87);

      id v107 = v88;
      id v89 = sub_1DB07A220(v88, (uint64_t)v117);
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v90 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v125);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFC8);
      uint64_t v91 = swift_initStackObject();
      *(_OWORD *)(v91 + 16) = xmmword_1DB0C77B0;
      unint64_t v92 = v120;
      *(void *)(v91 + 32) = v120;
      id v93 = v106;
      *(void *)(v91 + 40) = v106;
      id v117 = v93;
      id v94 = v92;
      uint64_t v95 = sub_1DB070B58(2u, v112, 0);
      unint64_t v97 = v96;
      long long v120 = v90;
      uint64_t v98 = v90;
      uint64_t v17 = (uint64_t)v89;
      char v99 = sub_1DB071740(v98, v89, v91, (uint64_t)v127, (uint64_t)v121, v95, v96, 0);
      char v100 = v99;
      uint64_t v121 = v94;
      uint64_t v101 = v117;
      id v127 = v89;
      int v102 = v108;

      sub_1DB042664(v95, v97);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
      swift_arrayDestroy();
      unint64_t v103 = v115;
      if (v100)
      {
        uint64_t v17 = sub_1DB0718CC(v118, v119, v113, v111, v114, v121, 2, v112, 0);
        uint64_t v104 = v107;
        sub_1DB042664(v116, v103);
        sub_1DB042664(v109, (unint64_t)v122);
      }
      else
      {
        sub_1DB0744E8();
        swift_allocError();
        swift_willThrow();
        sub_1DB042664(v116, v103);
        sub_1DB042664(v109, (unint64_t)v122);
      }
      break;
    case 2uLL:
      uint64_t v63 = *(void *)(v113 + 16);
      uint64_t v62 = *(void *)(v113 + 24);
      uint64_t v57 = v62 - v63;
      if (!__OFSUB__(v62, v63)) {
        goto LABEL_20;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_20;
    default:
      uint64_t v57 = BYTE6(v111);
      goto LABEL_20;
  }
  return v17;
}

id sub_1DB072A88(uint64_t a1, id a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  id result = objc_msgSend(a2, sel_multiply_corecryptoError_, a1, &v3);
  if (!result)
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    id result = (id)sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

uint64_t PIR.BlindedKeyword.blindedElement.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1DB04239C(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t PIR.BlindedKeyword.blindedElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DB042664(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PIR.BlindedKeyword.blindedElement.modify())()
{
  return nullsub_1;
}

unint64_t sub_1DB072C38(uint64_t a1)
{
  return sub_1DB072CC8(a1, (SEL *)&selRef_groupOrderByteCountForCP_, (unint64_t *)&qword_1EA903430);
}

uint64_t sub_1DB072C4C()
{
  if (qword_1EA8FDD88 != -1) {
    uint64_t result = swift_once();
  }
  if (qword_1EA903430 + 0x4000000000000000 < 0) {
    __break(1u);
  }
  else {
    qword_1EA903438 = 2 * qword_1EA903430;
  }
  return result;
}

unint64_t sub_1DB072CB4(uint64_t a1)
{
  return sub_1DB072CC8(a1, (SEL *)&selRef_compressedx962PointByteCountForCurveParameters_, (unint64_t *)&qword_1EA903440);
}

unint64_t sub_1DB072CC8(uint64_t a1, SEL *a2, unint64_t *a3)
{
  unsigned int v5 = self;
  sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  unint64_t result = (unint64_t)objc_msgSend(v5, *a2, v7);
  if ((result & 0x8000000000000000) != 0) {
    __break(1u);
  }
  else {
    *a3 = result;
  }
  return result;
}

uint64_t PIR.SymmetricPIRClient.init(serverPublicKey:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v7 = sub_1DB0677F8();
  uint64_t result = sub_1DB042664(a1, a2);
  if (!v3)
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = 4;
    *(unsigned char *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = v7;
  }
  return result;
}

uint64_t PIR.SymmetricPIRClient.blindKeyword(keyword:blind:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v69 = a1;
  unint64_t v70 = a2;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = sub_1DB0C5088();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v68) = *v5;
  uint64_t v67 = *((void *)v5 + 1);
  int v66 = v5[16];
  if (a4 >> 60 == 15)
  {
    sub_1DB0C4F38();
    sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
    sub_1DB0C4D78();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
    swift_dynamicCast();
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v72);
    if (!v14)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    id v15 = v14;
    sub_1DB0C5058();
    uint64_t v16 = sub_1DB0C5048();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v18 >> 60 == 15)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v19 = sub_1DB070B58(v68, v67, v66);
    unint64_t v21 = v20;
    uint64_t v73 = v16;
    unint64_t v74 = v18;
    sub_1DB04239C(v16, v18);
    sub_1DB05DEE8(v19, v21);
    sub_1DB042664(v19, v21);
    sub_1DB069BB4(v16, v18);
    uint64_t v22 = v73;
    unint64_t v23 = v74;
    sub_1DB073FA8(v69, v70, v73, v74);
    uint64_t v68 = v6;
    if (!v6)
    {
      uint64_t v25 = v24;
      id v26 = sub_1DB072A88((uint64_t)v15, v24);
      sub_1DB042664(v22, v23);

      goto LABEL_10;
    }
LABEL_40:
    swift_unexpectedError();
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v65 = v6;
  int v71 = 0;
  sub_1DB0C4F38();
  sub_1DB04239C(a3, a4);
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  uint64_t v27 = v72;
  id v28 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
  uint64_t v29 = a3;
  unint64_t v30 = (void *)sub_1DB0C49E8();
  id v15 = objc_msgSend(v28, sel_initWithData_inGroup_reduction_corecryptoError_, v30, v27, 0, &v71);

  if (!v15)
  {
    int v61 = v71;
    sub_1DB04D0D4();
    uint64_t v62 = swift_allocError();
    *(_DWORD *)uint64_t v63 = v61;
    *(unsigned char *)(v63 + 4) = 0;
    uint64_t v68 = v62;
    swift_willThrow();
    return sub_1DB069BB4(v29, a4);
  }
  uint64_t v64 = v29;
  sub_1DB0C5058();
  uint64_t v31 = sub_1DB0C5048();
  unint64_t v33 = v32;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v33 >> 60 == 15) {
    goto LABEL_39;
  }
  uint64_t v34 = sub_1DB070B58(v68, v67, v66);
  unint64_t v36 = v35;
  uint64_t v73 = v31;
  unint64_t v74 = v33;
  sub_1DB04239C(v31, v33);
  sub_1DB05DEE8(v34, v36);
  sub_1DB042664(v34, v36);
  sub_1DB069BB4(v31, v33);
  uint64_t v37 = v73;
  unint64_t v38 = v74;
  uint64_t v39 = v65;
  sub_1DB073FA8(v69, v70, v73, v74);
  uint64_t v68 = v39;
  if (v39) {
    goto LABEL_40;
  }
  uint64_t v41 = v40;
  id v26 = sub_1DB072A88((uint64_t)v15, v40);
  sub_1DB042664(v37, v38);

  sub_1DB069BB4(v64, a4);
LABEL_10:
  id v42 = objc_msgSend(v15, sel_serializedBigEndianScalar);
  if (!v42)
  {
LABEL_41:
    sub_1DB0C5358();
    __break(1u);
    JUMPOUT(0x1DB073534);
  }
  uint64_t v43 = v42;
  uint64_t v44 = sub_1DB0C4A08();
  unint64_t v46 = v45;

  id v47 = objc_msgSend(v26, sel_serializedPublicKey_, 1);
  if (!v47)
  {
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v48 = v47;
  uint64_t v49 = sub_1DB0C4A08();
  unint64_t v51 = v50;

  uint64_t v52 = 0;
  switch(v46 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v44), v44)) {
        goto LABEL_32;
      }
      uint64_t v52 = HIDWORD(v44) - (int)v44;
LABEL_17:
      if (qword_1EA8FDD88 != -1) {
        swift_once();
      }
      if (v52 == qword_1EA903430)
      {
        uint64_t v52 = 0;
        switch(v51 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v49), v49)) {
              goto LABEL_34;
            }
            uint64_t v52 = HIDWORD(v49) - (int)v49;
LABEL_25:
            if (qword_1EA8FDD98 == -1) {
              goto LABEL_26;
            }
            goto LABEL_30;
          case 2uLL:
            uint64_t v56 = *(void *)(v49 + 16);
            uint64_t v55 = *(void *)(v49 + 24);
            uint64_t v52 = v55 - v56;
            if (!__OFSUB__(v55, v56)) {
              goto LABEL_25;
            }
            goto LABEL_35;
          case 3uLL:
            goto LABEL_25;
          default:
            uint64_t v52 = BYTE6(v51);
            goto LABEL_25;
        }
      }
      __break(1u);
LABEL_30:
      swift_once();
LABEL_26:
      uint64_t v57 = qword_1EA903440;

      if (v52 != v57)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
      uint64_t v58 = v69;
      unint64_t v59 = v70;
      *a5 = v69;
      a5[1] = v59;
      a5[2] = v44;
      a5[3] = v46;
      a5[4] = v49;
      a5[5] = v51;
      uint64_t result = sub_1DB04239C(v58, v59);
      break;
    case 2uLL:
      uint64_t v54 = *(void *)(v44 + 16);
      uint64_t v53 = *(void *)(v44 + 24);
      uint64_t v52 = v53 - v54;
      if (!__OFSUB__(v53, v54)) {
        goto LABEL_17;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_17;
    default:
      uint64_t v52 = BYTE6(v46);
      goto LABEL_17;
  }
  return result;
}

uint64_t sub_1DB073554(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = *(void *)(result + 16);
  unint64_t v6 = *(void *)(result + 24);
  uint64_t v11 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      BOOL v12 = __OFSUB__(HIDWORD(v5), v5);
      int v13 = HIDWORD(v5) - v5;
      if (!v12)
      {
        uint64_t v11 = v13;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_27;
    case 2uLL:
      uint64_t v16 = v5 + 16;
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v16 + 8);
      uint64_t v11 = v15 - v14;
      if (!__OFSUB__(v15, v14)) {
        goto LABEL_6;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t result = swift_once();
LABEL_23:
      if (a2 != qword_1EA903438) {
        goto LABEL_24;
      }
      return result;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v11 = BYTE6(v6);
LABEL_6:
      if (qword_1EA8FDD88 != -1) {
        uint64_t result = swift_once();
      }
      if (v11 == qword_1EA903430)
      {
        uint64_t v17 = 0;
        switch(a3 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a2), a2))
            {
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
LABEL_32:
              __break(1u);
              JUMPOUT(0x1DB073798);
            }
            uint64_t v17 = HIDWORD(a2) - (int)a2;
LABEL_14:
            if (qword_1EA8FDD98 != -1) {
              uint64_t result = swift_once();
            }
            if (v17 == qword_1EA903440)
            {
              a2 = 0;
              switch(a5 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(a4), a4)) {
                    goto LABEL_31;
                  }
                  a2 = HIDWORD(a4) - (int)a4;
LABEL_22:
                  if (qword_1EA8FDD90 == -1) {
                    goto LABEL_23;
                  }
                  goto LABEL_28;
                case 2uLL:
                  uint64_t v21 = *(void *)(a4 + 16);
                  uint64_t v20 = *(void *)(a4 + 24);
                  a2 = v20 - v21;
                  if (!__OFSUB__(v20, v21)) {
                    goto LABEL_22;
                  }
                  goto LABEL_32;
                case 3uLL:
                  goto LABEL_22;
                default:
                  a2 = BYTE6(a5);
                  goto LABEL_22;
              }
            }
            break;
          case 2uLL:
            uint64_t v19 = *(void *)(a2 + 16);
            uint64_t v18 = *(void *)(a2 + 24);
            uint64_t v17 = v18 - v19;
            if (!__OFSUB__(v18, v19)) {
              goto LABEL_14;
            }
            goto LABEL_30;
          case 3uLL:
            goto LABEL_14;
          default:
            uint64_t v17 = BYTE6(a3);
            goto LABEL_14;
        }
      }
LABEL_24:
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v22 = 1;
      *(unsigned char *)(v22 + 4) = 1;
      return swift_willThrow();
  }
}

id PIR.SymmetricPIRClient.validateThenHash(blindedKeyword:evaluatedElement:proof:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  id v9 = (id)a3;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = *(void *)(a1 + 8);
  unint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 40);
  char v61 = *(unsigned char *)v5;
  uint64_t v60 = *(void *)(v5 + 8);
  unsigned __int8 v59 = *(unsigned char *)(v5 + 16);
  uint64_t v15 = *(void **)(v5 + 24);
  uint64_t v67 = *(void *)a1;
  unint64_t v68 = v12;
  unint64_t v69 = v13;
  long long v62 = *(_OWORD *)(a1 + 24);
  long long v70 = v62;
  uint64_t v71 = v14;
  sub_1DB073554((uint64_t)&v67, a2, a3, a4, a5);
  if (!v6)
  {
    uint64_t v55 = v13;
    unint64_t v56 = a5;
    uint64_t v54 = v15;
    uint64_t v16 = 0;
    sub_1DB04239C(a2, (unint64_t)v9);
    id v53 = sub_1DB0677F8();
    sub_1DB042664(a2, (unint64_t)v9);
    switch(v56 >> 62)
    {
      case 1uLL:
        uint64_t v18 = (int)a4;
        uint64_t v19 = a4 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v18 = *(void *)(a4 + 16);
        uint64_t v19 = *(void *)(a4 + 24);
LABEL_7:
        sub_1DB04239C(a4, v56);
        if (v19 >= v18) {
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_24;
      default:
LABEL_8:
        unint64_t v49 = v12;
        uint64_t v50 = v11;
        uint64_t v16 = sub_1DB0C49B8();
        unint64_t v13 = v20;
        sub_1DB042664(a4, v56);
        sub_1DB04239C(v16, v13);
        if (qword_1EA8FDD88 == -1) {
          goto LABEL_9;
        }
LABEL_24:
        swift_once();
LABEL_9:
        sub_1DB05628C(qword_1EA903430, v16, v13, &v65);
        uint64_t v21 = v65;
        unint64_t v22 = v66;
        int v64 = 0;
        sub_1DB0C4F38();
        sub_1DB04239C(v21, v22);
        sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
        sub_1DB0C4D78();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
        swift_dynamicCast();
        id v23 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
        id v9 = (id)sub_1DB0C49E8();
        id v24 = objc_msgSend(v23, sel_initWithData_inGroup_reduction_corecryptoError_, v9, v63, 0, &v64);
        sub_1DB042664(v21, v22);

        if (v24)
        {
          unint64_t v51 = v24;
          sub_1DB042664(v21, v22);
          uint64_t v25 = qword_1EA903430;
          sub_1DB056D08(qword_1EA903430, v16, v13, &v67);
          uint64_t v27 = v67;
          unint64_t v26 = v68;
          sub_1DB04239C(v67, v68);
          sub_1DB04239C(v27, v26);
          unint64_t v57 = v26;
          sub_1DB05628C(v25, v27, v26, &v65);
          uint64_t v29 = v65;
          unint64_t v28 = v66;
          int v64 = 0;
          sub_1DB04239C(v65, v66);
          sub_1DB0C4D78();
          swift_dynamicCast();
          id v9 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
          unint64_t v30 = (void *)sub_1DB0C49E8();
          id v31 = objc_msgSend(v9, sel_initWithData_inGroup_reduction_corecryptoError_, v30, v63, 0, &v64);
          sub_1DB042664(v29, v28);

          if (v31)
          {
            sub_1DB042664(v29, v28);
            sub_1DB056D08(qword_1EA903430, v27, v57, &v67);
            sub_1DB042664(v27, v57);
            uint64_t v32 = v67;
            id v9 = (id)v68;
            switch(v68 >> 62)
            {
              case 1uLL:
                uint64_t v38 = (int)v67;
                uint64_t v39 = v67 >> 32;
                goto LABEL_18;
              case 2uLL:
                uint64_t v38 = *(void *)(v67 + 16);
                uint64_t v39 = *(void *)(v67 + 24);
LABEL_18:
                if (v38 == v39) {
                  goto LABEL_19;
                }
                goto LABEL_13;
              case 3uLL:
                goto LABEL_19;
              default:
                if ((v68 & 0xFF000000000000) != 0)
                {
LABEL_13:
                  sub_1DB04D0D4();
                  swift_allocError();
                  *(_DWORD *)uint64_t v33 = 1;
                  *(unsigned char *)(v33 + 4) = 1;
                  swift_willThrow();

                  sub_1DB042664(v32, (unint64_t)v9);
                }
                else
                {
LABEL_19:
                  uint64_t v48 = v67;
                  unint64_t v58 = v68;
                  LODWORD(v63) = 0;
                  id v52 = v51;
                  id v47 = v31;
                  id v9 = (id)v62;
                  sub_1DB04239C(v55, v62);
                  sub_1DB0C4D78();
                  swift_dynamicCast();
                  uint64_t v40 = v65;
                  id v41 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
                  id v42 = (void *)sub_1DB0C49E8();
                  id v43 = objc_msgSend(v41, sel_initWithData_inGroup_reduction_corecryptoError_, v42, v40, 0, &v63);
                  sub_1DB042664(v55, v62);

                  if (v43)
                  {
                    id v44 = v54;
                    id v9 = (id)sub_1DB071DD0(v50, v49, 0, 0xF000000000000000, v43, v53, v52, v47, v44, v61, v60, v59);

                    sub_1DB042664(v48, v58);
                  }
                  else
                  {
                    int v45 = v63;
                    sub_1DB04D0D4();
                    swift_allocError();
                    *(_DWORD *)uint64_t v46 = v45;
                    *(unsigned char *)(v46 + 4) = 0;
                    swift_willThrow();
                    sub_1DB042664(v48, v58);
                  }
                }
                break;
            }
          }
          else
          {
            int v36 = v64;
            sub_1DB04D0D4();
            swift_allocError();
            *(_DWORD *)uint64_t v37 = v36;
            *(unsigned char *)(v37 + 4) = 0;
            swift_willThrow();
            sub_1DB042664(v27, v57);
            sub_1DB042664(v29, v28);

            sub_1DB042664(v27, v57);
          }
        }
        else
        {
          int v34 = v64;
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v35 = v34;
          *(unsigned char *)(v35 + 4) = 0;
          swift_willThrow();
          sub_1DB042664(v16, v13);
          sub_1DB042664(v21, v22);
        }
        break;
    }
  }
  return v9;
}

void sub_1DB073FA8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  uint64_t v9 = sub_1DB0C4D68();
  uint64_t v10 = sub_1DB0632DC(a1, a2, 2, a3, a4, v9, 1);
  if (!v4)
  {
    uint64_t v11 = v10;
    unint64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
      id v13 = *(id *)(v10 + 32);
      id v14 = objc_msgSend(v13, sel_mapToCurve_SSWU_RandomOracle);
      if (!v14)
      {
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v15 = v14;

      if (v12 <= *(void *)(v11 + 16))
      {
        id v16 = *(id *)(v11 + 32 + 8 * v12 - 8);
        swift_bridgeObjectRelease();
        id v17 = objc_msgSend(v16, sel_mapToCurve_SSWU_RandomOracle);
        if (v17)
        {
          uint64_t v18 = v17;

          sub_1DB07A220(v15, (uint64_t)v18);
          return;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

uint64_t _s14BlindedKeywordVwxx(uint64_t *a1)
{
  sub_1DB042664(*a1, a1[1]);
  sub_1DB042664(a1[2], a1[3]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  return sub_1DB042664(v2, v3);
}

uint64_t *_s14BlindedKeywordVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1DB04239C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1DB04239C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  sub_1DB04239C(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *_s14BlindedKeywordVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1DB04239C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1DB042664(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1DB04239C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_1DB042664(v10, v11);
  uint64_t v13 = a2[4];
  unint64_t v12 = a2[5];
  sub_1DB04239C(v13, v12);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_1DB042664(v14, v15);
  return a1;
}

uint64_t *_s14BlindedKeywordVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1DB042664(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_1DB042664(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_1DB042664(v8, v9);
  return a1;
}

uint64_t _s14BlindedKeywordVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s14BlindedKeywordVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.BlindedKeyword()
{
  return &type metadata for PIR.BlindedKeyword;
}

void _s18SymmetricPIRClientVwxx(uint64_t a1)
{
}

uint64_t _s18SymmetricPIRClientVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unsigned int v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  id v4 = v3;
  return a1;
}

uint64_t _s18SymmetricPIRClientVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unsigned int v3 = *(void **)(a2 + 24);
  id v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  id v5 = v3;

  return a1;
}

uint64_t _s18SymmetricPIRClientVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unsigned int v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t _s18SymmetricPIRClientVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SymmetricPIRClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.SymmetricPIRClient()
{
  return &type metadata for PIR.SymmetricPIRClient;
}

unint64_t sub_1DB0744E8()
{
  unint64_t result = qword_1EA8FE5A0;
  if (!qword_1EA8FE5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE5A0);
  }
  return result;
}

unint64_t sub_1DB07453C()
{
  unint64_t result = qword_1EA8FE5A8;
  if (!qword_1EA8FE5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE5A8);
  }
  return result;
}

uint64_t sub_1DB074590(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL static CKSecretSharing.SecretSharingError.SecretSharingErrorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CKSecretSharing.SecretSharingError.SecretSharingErrorType.hash(into:)()
{
  return sub_1DB0C5488();
}

uint64_t CKSecretSharing.SecretSharingError.SecretSharingErrorType.hashValue.getter()
{
  return sub_1DB0C54A8();
}

void CKSecretSharing.SecretSharingError.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_1DB074670()
{
  unint64_t result = qword_1EA8FE5B0;
  if (!qword_1EA8FE5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE5B0);
  }
  return result;
}

uint64_t _s18SecretSharingErrorVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s18SecretSharingErrorVwcp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_1DB0C5188();
  sub_1DB0C5188();
  sub_1DB0C5188();
  return a1;
}

uint64_t _s18SecretSharingErrorVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v4;
  int v5 = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s18SecretSharingErrorVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18SecretSharingErrorVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SecretSharingErrorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.SecretSharingError()
{
  return &type metadata for CKSecretSharing.SecretSharingError;
}

uint64_t _s18SecretSharingErrorV22SecretSharingErrorTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s18SecretSharingErrorV22SecretSharingErrorTypeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *__n128 result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB074AFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.SecretSharingError.SecretSharingErrorType()
{
  return &type metadata for CKSecretSharing.SecretSharingError.SecretSharingErrorType;
}

unint64_t *sub_1DB074B34()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  unint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    unint64_t v6 = MEMORY[0x1E4FBC860];
    sub_1DB0C5308();
    sub_1DB0C4F38();
    sub_1DB07C914();
    while (1)
    {
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      __n128 result = (unint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v5);
      if (!result) {
        break;
      }
      sub_1DB0C52E8();
      sub_1DB0C5318();
      sub_1DB0C5328();
      sub_1DB0C52F8();
      if (!--v1)
      {
        unint64_t v2 = v6;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    unsigned int v4 = sub_1DB07A78C(v2);
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t sub_1DB074C90(uint64_t a1, uint64_t a2)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(v2 + 24);
  unint64_t v4 = *(void *)(v2 + 32);
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 != *(void *)(v4 + 16))
  {
    sub_1DB07CD54();
    swift_allocError();
    *uint64_t v46 = 2;
    goto LABEL_46;
  }
  int v8 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v9 = *(void **)(v2 + 40);
  uint64_t v72 = MEMORY[0x1E4FBC860];
  v73[0] = v9;
  uint64_t v62 = v9[2];
  if (v62)
  {
    unint64_t v10 = v9[4];
    uint64_t v63 = v9 + 4;
    if (v10 < v6)
    {
      uint64_t v55 = (unint64_t *)v2;
      uint64_t v56 = v3;
      unint64_t v12 = (void *)v9[5];
      unint64_t v13 = v10;
      sub_1DB07C8E8((uint64_t)v73);
      uint64_t v14 = v13;
      uint64_t v54 = v5;
      uint64_t v15 = v5 + 32;
      id v16 = v12;
      uint64_t v65 = v8;
      uint64_t v66 = a2 + 32;
      unint64_t v58 = v4 + 32;
      uint64_t v59 = a1;
      uint64_t v2 = 1;
      while (1)
      {
        uint64_t v17 = v16[2];
        if (v17)
        {
          if (v16[5] >= v6) {
            goto LABEL_44;
          }
          uint64_t v18 = v17 - 1;
          if (v18)
          {
            if (v16[7] >= v6) {
              goto LABEL_44;
            }
            int v36 = v16 + 9;
            while (--v18)
            {
              unint64_t v37 = *v36;
              v36 += 2;
              if (v37 >= v6) {
                goto LABEL_44;
              }
            }
          }
        }
        if (v14 >= (uint64_t)v6) {
          goto LABEL_53;
        }
        uint64_t v60 = v14;
        uint64_t v19 = *(void **)(v15 + 8 * v14);
        LODWORD(v68) = 0;
        sub_1DB0C5188();
        id v20 = v19;
        id v64 = objc_msgSend(v20, sel_multiply_corecryptoError_, a1, &v68);
        if (!v64) {
          goto LABEL_58;
        }
        uint64_t v61 = v2;

        uint64_t v21 = v16[2];
        if (v21)
        {
          unint64_t v57 = &v52;
          unint64_t v68 = v8;
          sub_1DB0C5308();
          unint64_t v22 = v16 + 5;
          while (1)
          {
            unint64_t v23 = *(v22 - 1);
            if ((v23 & 0x8000000000000000) != 0) {
              break;
            }
            if (v23 >= *(void *)(a2 + 16)) {
              goto LABEL_51;
            }
            if (*v22 >= v6) {
              goto LABEL_52;
            }
            id v24 = *(void **)(v66 + 8 * v23);
            uint64_t v25 = *(void **)(v15 + 8 * *v22);
            int v69 = 0;
            id v26 = v24;
            id v27 = v25;
            if (!objc_msgSend(v27, sel_multiply_corecryptoError_, v26, &v69))
            {
              long long v70 = 0;
              unint64_t v71 = 0xE000000000000000;
              sub_1DB0C5288();
              sub_1DB0C50B8();
              int v67 = v69;
              goto LABEL_55;
            }
            v22 += 2;

            sub_1DB0C52E8();
            sub_1DB0C5318();
            sub_1DB0C5328();
            sub_1DB0C52F8();
            if (!--v21)
            {
              unint64_t v28 = v68;
              swift_bridgeObjectRelease();
              a1 = v59;
              goto LABEL_19;
            }
          }
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
        }
        swift_bridgeObjectRelease();
        unint64_t v28 = v8;
LABEL_19:
        uint64_t v29 = *((void *)v28 + 2);
        if (v29)
        {
          id v30 = v64;
          sub_1DB0C5188();
          uint64_t v31 = 0;
          do
          {
            uint64_t v32 = *(void **)&v28[8 * v31 + 32];
            LODWORD(v68) = 0;
            id v33 = v32;
            id v34 = objc_msgSend(v30, sel_add_corecryptoError_, v33, &v68);
            if (!v34)
            {
              long long v70 = 0;
              unint64_t v71 = 0xE000000000000000;
              sub_1DB0C5288();
              sub_1DB0C50B8();
              int v69 = (int)v68;
              sub_1DB0C53C8();
              sub_1DB0C50B8();
              swift_bridgeObjectRelease();
              int v53 = 0;
              for (uint64_t i = 75; ; uint64_t i = 66)
              {
                uint64_t v52 = i;
                sub_1DB0C5358();
                __break(1u);
LABEL_58:
                long long v70 = 0;
                unint64_t v71 = 0xE000000000000000;
                sub_1DB0C5288();
                sub_1DB0C50B8();
                int v69 = (int)v68;
LABEL_55:
                sub_1DB0C53C8();
                sub_1DB0C50B8();
                swift_bridgeObjectRelease();
                int v53 = 0;
              }
            }
            id v35 = v34;
            ++v31;

            id v30 = v35;
          }
          while (v29 != v31);
          swift_bridgeObjectRelease();
          a1 = v59;
        }
        else
        {
          id v35 = v64;
        }
        swift_bridgeObjectRelease();
        id v38 = v35;
        MEMORY[0x1E0188080]();
        if (*(void *)(v72 + 16) >= *(void *)(v72 + 24) >> 1) {
          sub_1DB0C51A8();
        }
        sub_1DB0C51C8();
        sub_1DB0C5198();
        uint64_t v39 = (unint64_t **)(v58 + 16 * v60);
        unint64_t v40 = (unint64_t)v39[1];
        long long v70 = *v39;
        unint64_t v71 = v40;
        swift_bridgeObjectRetain_n();
        sub_1DB0C50B8();
        swift_bridgeObjectRelease();
        uint64_t v2 = (uint64_t)v70;
        unint64_t v41 = v71;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = sub_1DB07E444(0, *((void *)v65 + 2) + 1, 1, v65);
        }
        unint64_t v43 = *((void *)v65 + 2);
        unint64_t v42 = *((void *)v65 + 3);
        if (v43 >= v42 >> 1) {
          uint64_t v65 = sub_1DB07E444((char *)(v42 > 1), v43 + 1, 1, v65);
        }
        id v44 = v65;
        *((void *)v65 + 2) = v43 + 1;
        int v45 = &v44[16 * v43];
        *((void *)v45 + 4) = v2;
        *((void *)v45 + 5) = v41;

        if (v61 == v62) {
          break;
        }
        uint64_t v14 = v63[2 * v61];
        int v8 = (char *)MEMORY[0x1E4FBC860];
        if ((v14 & 0x8000000000000000) == 0)
        {
          uint64_t v2 = v61 + 1;
          id v16 = (void *)v63[2 * v61 + 1];
          if (v14 < (uint64_t)v6) {
            continue;
          }
        }
LABEL_44:
        sub_1DB0697EC((uint64_t)v73);
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      sub_1DB0697EC((uint64_t)v73);
      int v8 = (char *)v72;
      uint64_t v2 = (uint64_t)v55;
      uint64_t v3 = v56;
      uint64_t v5 = v54;
      goto LABEL_42;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    sub_1DB07CD54();
    swift_allocError();
    *uint64_t v48 = 0;
LABEL_46:
    swift_willThrow();
    return v2 & 1;
  }
  uint64_t v65 = (char *)MEMORY[0x1E4FBC860];
LABEL_42:
  uint64_t v47 = sub_1DB07BAD0(*(void *)v2, *(void *)(v2 + 8), v5, (uint64_t)v8);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v50 = (void *)v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v2) = objc_msgSend(v50, sel_isEqual_, a1);
  }
  return v2 & 1;
}

uint64_t sub_1DB075374(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v33 = sub_1DB093D80(*(void **)(a1 + 16), (uint64_t)a3);
  unint64_t v10 = *(void **)a1;
  id v11 = a7;
  id v12 = sub_1DB072A88((uint64_t)v11, v10);
  id v13 = v11;
  unint64_t v40 = (void *)a4;
  id v14 = sub_1DB072A88(a4, v10);
  uint64_t v38 = a1;
  uint64_t v15 = *(void **)(a1 + 8);
  id v16 = sub_1DB07A33C(v15, (uint64_t)v14);

  id v17 = sub_1DB072A88((uint64_t)v13, v16);
  uint64_t v39 = v13;

  LODWORD(v41) = 0;
  id v18 = objc_msgSend(v12, sel_add_corecryptoError_, v12, &v41);
  if (v18)
  {
    id v19 = v18;
    id v20 = v13;
    while (1)
    {
      unsigned __int8 v21 = objc_msgSend(v12, sel_isEqual_, v19);

      if ((v21 & 1) == 0) {
        break;
      }
      sub_1DB0C4F38();
      sub_1DB07C914();
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v41);
      if (!v22) {
        __break(1u);
      }
      unint64_t v23 = v22;

      LODWORD(v41) = 0;
      id v24 = objc_msgSend(v10, sel_multiply_corecryptoError_, v23, &v41);
      if (v24)
      {
        uint64_t v25 = v24;

        LODWORD(v41) = 0;
        id v20 = v23;
        id v26 = objc_msgSend(v10, sel_multiply_corecryptoError_, v40, &v41);
        if (v26)
        {
          id v27 = v26;
          LODWORD(v41) = 0;
          id v28 = objc_msgSend(v15, sel_sub_corecryptoError_, v26, &v41);
          if (v28)
          {
            uint64_t v29 = v28;

            LODWORD(v41) = 0;
            id v30 = objc_msgSend(v29, sel_multiply_corecryptoError_, v20, &v41);
            if (v30)
            {
              id v31 = v30;

              LODWORD(v41) = 0;
              id v19 = objc_msgSend(v25, sel_add_corecryptoError_, v25, &v41);
              id v12 = v25;
              id v17 = v31;
              if (v19) {
                continue;
              }
            }
          }
        }
      }
      goto LABEL_13;
    }

    sub_1DB07CA30(v38);
    return (uint64_t)v33;
  }
  else
  {
LABEL_13:
    uint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    int v42 = v41;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

void sub_1DB075838(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, void *a9@<X8>, void *a10, void *a11)
{
  unint64_t v74 = *(void **)(a7 + 24);
  uint64_t v75 = *(void *)(a7 + 32);
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v98 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v99);
  if (!v98)
  {
    __break(1u);
    goto LABEL_24;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v96 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v99);
  if (!v96)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v95 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v99);
  if (!v95)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v94 = a5;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v93 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v99);
  if (!v93)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v99);
  if (!v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  id v13 = v12;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v99);
  if (!v14)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  id v15 = v14;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v99);
  if (!v16)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return;
  }
  id v17 = v16;
  id v90 = v15;
  unint64_t v92 = v13;
  id v18 = *(void **)(a7 + 8);
  id v19 = sub_1DB072A88((uint64_t)v16, a11);
  long long v70 = v17;
  id v89 = v18;
  if (a1)
  {
    id v20 = sub_1DB07A220(v18, (uint64_t)v19);

    id v21 = sub_1DB072A88((uint64_t)v95, a11);
    id v22 = sub_1DB072A88((uint64_t)v96, a11);
    id v23 = sub_1DB072A88((uint64_t)v98, v20);
    uint64_t v91 = v20;
    id v68 = sub_1DB07A33C(v22, (uint64_t)v23);
    int v69 = v21;
    unint64_t v71 = v68;
    uint64_t v72 = v21;
    uint64_t v24 = (uint64_t)v93;
  }
  else
  {
    id v25 = sub_1DB072A88((uint64_t)v95, a11);
    id v22 = sub_1DB072A88((uint64_t)v96, a11);
    id v26 = sub_1DB07A33C(v19, (uint64_t)v18);
    id v23 = sub_1DB072A88((uint64_t)v98, v26);

    id v68 = sub_1DB07A33C(v22, (uint64_t)v23);
    int v69 = v25;
    unint64_t v71 = v25;
    uint64_t v72 = v68;
    uint64_t v24 = (uint64_t)v93;
    uint64_t v91 = v19;
  }

  uint64_t v27 = v24;
  id v28 = sub_1DB072A88(v24, a4);
  id v29 = sub_1DB072A88(v24, v94);
  id v30 = sub_1DB072A88((uint64_t)v92, a11);
  id v31 = sub_1DB07A220(v29, (uint64_t)v30);

  id v32 = sub_1DB072A88(v27, v94);
  id v33 = sub_1DB072A88((uint64_t)v90, a10);
  id v34 = sub_1DB07A220(v32, (uint64_t)v33);

  uint64_t v78 = *(void **)(a3 + 8);
  unint64_t v79 = *(void **)a3;
  uint64_t v83 = *(void **)(a3 + 24);
  uint64_t v80 = *(void **)(a3 + 16);
  uint64_t v82 = *(void **)(a3 + 32);
  id v35 = *(void **)a7;
  int v36 = *(void **)(a7 + 16);
  id v37 = v71;
  id v38 = v72;
  int v67 = v34;
  uint64_t v73 = v28;
  id v39 = v38;
  unint64_t v40 = (void *)sub_1DB076138(a10, a11, v35, v89, v36, a4, v94, a6, a8, v91, v37, v38, v28, v31, v34);
  if (v76)
  {

    id v100 = v74;
    sub_1DB07C96C(&v100);
    uint64_t v101 = v75;
    sub_1DB0697EC((uint64_t)&v101);

    return;
  }
  uint64_t v63 = v36;
  id v64 = v35;
  uint64_t v65 = v39;
  uint64_t v62 = v40;
  id v41 = sub_1DB093E9C(v40, (uint64_t)v98);
  id v42 = objc_msgSend(a2, sel_inverseModOrder);
  if (!v42) {
    goto LABEL_30;
  }
  uint64_t v77 = v42;
  if (a1)
  {
    id v43 = sub_1DB093D80(v83, (uint64_t)v82);
    unint64_t v44 = v70;
    id v45 = sub_1DB093D80(v43, (uint64_t)v70);

    uint64_t v56 = (void *)sub_1DB07A624((uint64_t)v45);
    id v46 = sub_1DB093D80(v79, (uint64_t)v78);
    id v47 = sub_1DB093C64(a6, (uint64_t)v80);
    id v48 = sub_1DB093D80(v46, (uint64_t)v47);

    id v57 = v98;
    id v98 = v41;
  }
  else
  {
    unint64_t v44 = v70;
    id v49 = sub_1DB093D80(v83, (uint64_t)v70);
    uint64_t v56 = (void *)sub_1DB07A624((uint64_t)v49);

    id v47 = sub_1DB093C64(a6, (uint64_t)v80);
    id v48 = sub_1DB093D80(v79, (uint64_t)v47);
    id v57 = v41;
  }

  id v50 = sub_1DB093C64(v41, (uint64_t)v44);
  id v61 = sub_1DB093D80(v95, (uint64_t)v50);

  id v51 = sub_1DB093C64(v62, (uint64_t)v77);
  id v60 = sub_1DB093E9C(v93, (uint64_t)v51);

  id v52 = sub_1DB093C64(v62, (uint64_t)v56);
  id v59 = sub_1DB093D80(v92, (uint64_t)v52);

  id v53 = sub_1DB093C64(v62, (uint64_t)v48);
  id v58 = sub_1DB093D80(v90, (uint64_t)v53);

  id v102 = v74;
  sub_1DB07C96C(&v102);
  uint64_t v103 = v75;
  sub_1DB0697EC((uint64_t)&v103);

  id v54 = v96;
  if (a1) {
    id v55 = v61;
  }
  else {
    id v55 = v96;
  }
  if ((a1 & 1) == 0) {
    id v54 = v61;
  }
  *a9 = v91;
  a9[1] = v57;
  a9[2] = v98;
  a9[3] = v54;
  a9[4] = v55;
  a9[5] = v60;
  a9[6] = v59;
  a9[7] = v58;
}

uint64_t sub_1DB076138(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  v349 = a8;
  id v343 = a7;
  id v344 = a6;
  id v345 = a5;
  uint64_t v19 = sub_1DB0C5088();
  uint64_t v334 = *(void *)(v19 - 8);
  uint64_t v335 = v19;
  MEMORY[0x1F4188790](v19);
  v333 = (char *)&v332 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v348 = xmmword_1DB0C7A30;
  id v21 = objc_msgSend(a1, sel_serializedPublicKey_, 1);
  if (!v21)
  {
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  id v22 = v21;
  id v336 = a15;
  id v337 = a14;
  id v338 = a13;
  id v339 = a12;
  id v340 = a11;
  id v341 = a10;
  id v342 = a9;
  uint64_t v23 = sub_1DB0C4A08();
  unint64_t v25 = v24;

  switch(v25 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v28 = *(void *)(v23 + 16);
      uint64_t v27 = *(void *)(v23 + 24);
      sub_1DB042664(v23, v25);
      uint64_t v26 = v27 - v28;
      if (!__OFSUB__(v27, v28)) {
        goto LABEL_10;
      }
      __break(1u);
LABEL_7:
      sub_1DB042664(v23, v25);
      if (__OFSUB__(HIDWORD(v23), v23))
      {
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
        goto LABEL_172;
      }
      uint64_t v26 = HIDWORD(v23) - (int)v23;
LABEL_10:
      sub_1DB05A7A4(v26, 2);
      uint64_t v30 = v29;
      unint64_t v32 = v31;
      id v33 = objc_msgSend(a1, sel_serializedPublicKey_, 1);
      if (!v33) {
        goto LABEL_173;
      }
      id v34 = v33;
      uint64_t v35 = sub_1DB0C4A08();
      unint64_t v37 = v36;

      uint64_t v346 = v30;
      unint64_t v347 = v32;
      sub_1DB04239C(v30, v32);
      sub_1DB05DEE8(v35, v37);
      sub_1DB042664(v35, v37);
      sub_1DB042664(v30, v32);
      uint64_t v38 = v346;
      unint64_t v39 = v347;
      sub_1DB0C4A18();
      sub_1DB042664(v38, v39);
      id v40 = objc_msgSend(a2, sel_serializedPublicKey_, 1);
      if (!v40)
      {
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
        goto LABEL_176;
      }
      id v41 = v40;
      uint64_t v42 = sub_1DB0C4A08();
      unint64_t v44 = v43;

      switch(v44 >> 62)
      {
        case 1uLL:
          sub_1DB042664(v42, v44);
          if (__OFSUB__(HIDWORD(v42), v42)) {
            goto LABEL_158;
          }
          uint64_t v45 = HIDWORD(v42) - (int)v42;
          break;
        case 2uLL:
          uint64_t v47 = *(void *)(v42 + 16);
          uint64_t v46 = *(void *)(v42 + 24);
          sub_1DB042664(v42, v44);
          uint64_t v45 = v46 - v47;
          if (!__OFSUB__(v46, v47)) {
            break;
          }
          __break(1u);
LABEL_17:
          sub_1DB042664(v42, v44);
          uint64_t v45 = 0;
          break;
        case 3uLL:
          goto LABEL_17;
        default:
          sub_1DB042664(v42, v44);
          uint64_t v45 = BYTE6(v44);
          break;
      }
      sub_1DB05A7A4(v45, 2);
      uint64_t v49 = v48;
      unint64_t v51 = v50;
      id v52 = objc_msgSend(a2, sel_serializedPublicKey_, 1);
      if (!v52) {
        goto LABEL_175;
      }
      id v53 = v52;
      uint64_t v54 = sub_1DB0C4A08();
      unint64_t v56 = v55;

      uint64_t v346 = v49;
      unint64_t v347 = v51;
      sub_1DB04239C(v49, v51);
      sub_1DB05DEE8(v54, v56);
      sub_1DB042664(v54, v56);
      sub_1DB042664(v49, v51);
      uint64_t v57 = v346;
      unint64_t v58 = v347;
      sub_1DB0C4A18();
      sub_1DB042664(v57, v58);
      id v59 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
      if (!v59)
      {
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_202:
        sub_1DB0C5358();
        __break(1u);
        JUMPOUT(0x1DB0778B4);
      }
      id v60 = v59;
      uint64_t v61 = sub_1DB0C4A08();
      unint64_t v63 = v62;

      switch(v63 >> 62)
      {
        case 1uLL:
          goto LABEL_27;
        case 2uLL:
          uint64_t v66 = *(void *)(v61 + 16);
          uint64_t v65 = *(void *)(v61 + 24);
          sub_1DB042664(v61, v63);
          uint64_t v64 = v65 - v66;
          if (!__OFSUB__(v65, v66)) {
            goto LABEL_30;
          }
          __break(1u);
LABEL_27:
          sub_1DB042664(v61, v63);
          if (__OFSUB__(HIDWORD(v61), v61)) {
            goto LABEL_159;
          }
          uint64_t v64 = HIDWORD(v61) - (int)v61;
LABEL_30:
          sub_1DB05A7A4(v64, 2);
          uint64_t v68 = v67;
          unint64_t v70 = v69;
          id v71 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
          if (!v71) {
            goto LABEL_177;
          }
          uint64_t v72 = v71;
          uint64_t v73 = sub_1DB0C4A08();
          unint64_t v75 = v74;

          uint64_t v346 = v68;
          unint64_t v347 = v70;
          sub_1DB04239C(v68, v70);
          sub_1DB05DEE8(v73, v75);
          sub_1DB042664(v73, v75);
          sub_1DB042664(v68, v70);
          uint64_t v76 = v346;
          unint64_t v77 = v347;
          sub_1DB0C4A18();
          sub_1DB042664(v76, v77);
          id v78 = objc_msgSend(a4, sel_serializedPublicKey_, 1);
          if (!v78) {
            goto LABEL_178;
          }
          unint64_t v79 = v78;
          uint64_t v80 = sub_1DB0C4A08();
          unint64_t v82 = v81;

          switch(v82 >> 62)
          {
            case 1uLL:
              sub_1DB042664(v80, v82);
              if (__OFSUB__(HIDWORD(v80), v80)) {
                goto LABEL_160;
              }
              uint64_t v83 = HIDWORD(v80) - (int)v80;
              break;
            case 2uLL:
              uint64_t v85 = *(void *)(v80 + 16);
              uint64_t v84 = *(void *)(v80 + 24);
              sub_1DB042664(v80, v82);
              uint64_t v83 = v84 - v85;
              if (!__OFSUB__(v84, v85)) {
                break;
              }
              __break(1u);
LABEL_37:
              sub_1DB042664(v80, v82);
              uint64_t v83 = 0;
              break;
            case 3uLL:
              goto LABEL_37;
            default:
              sub_1DB042664(v80, v82);
              uint64_t v83 = BYTE6(v82);
              break;
          }
          sub_1DB05A7A4(v83, 2);
          uint64_t v87 = v86;
          unint64_t v89 = v88;
          id v90 = objc_msgSend(a4, sel_serializedPublicKey_, 1);
          if (!v90) {
            goto LABEL_179;
          }
          uint64_t v91 = v90;
          uint64_t v92 = sub_1DB0C4A08();
          unint64_t v94 = v93;

          uint64_t v346 = v87;
          unint64_t v347 = v89;
          sub_1DB04239C(v87, v89);
          sub_1DB05DEE8(v92, v94);
          sub_1DB042664(v92, v94);
          sub_1DB042664(v87, v89);
          uint64_t v95 = v346;
          unint64_t v96 = v347;
          sub_1DB0C4A18();
          sub_1DB042664(v95, v96);
          id v97 = v345;
          id v98 = objc_msgSend(v345, sel_serializedPublicKey_, 1);
          uint64_t v99 = v349;
          if (!v98) {
            goto LABEL_180;
          }
          id v100 = v98;
          uint64_t v101 = sub_1DB0C4A08();
          unint64_t v103 = v102;

          switch(v103 >> 62)
          {
            case 1uLL:
              goto LABEL_47;
            case 2uLL:
              uint64_t v106 = *(void *)(v101 + 16);
              uint64_t v105 = *(void *)(v101 + 24);
              sub_1DB042664(v101, v103);
              uint64_t v104 = v105 - v106;
              if (!__OFSUB__(v105, v106)) {
                goto LABEL_50;
              }
              __break(1u);
LABEL_47:
              sub_1DB042664(v101, v103);
              if (__OFSUB__(HIDWORD(v101), v101)) {
                goto LABEL_161;
              }
              uint64_t v104 = HIDWORD(v101) - (int)v101;
LABEL_50:
              sub_1DB05A7A4(v104, 2);
              uint64_t v108 = v107;
              unint64_t v110 = v109;
              id v111 = objc_msgSend(v97, sel_serializedPublicKey_, 1);
              if (!v111) {
                goto LABEL_181;
              }
              uint64_t v112 = v111;
              uint64_t v113 = sub_1DB0C4A08();
              unint64_t v115 = v114;

              uint64_t v346 = v108;
              unint64_t v347 = v110;
              sub_1DB04239C(v108, v110);
              sub_1DB05DEE8(v113, v115);
              sub_1DB042664(v113, v115);
              sub_1DB042664(v108, v110);
              uint64_t v116 = v346;
              unint64_t v117 = v347;
              sub_1DB0C4A18();
              sub_1DB042664(v116, v117);
              id v118 = v344;
              id v119 = objc_msgSend(v344, sel_serializedPublicKey_, 1);
              if (!v119) {
                goto LABEL_182;
              }
              long long v120 = v119;
              uint64_t v121 = sub_1DB0C4A08();
              unint64_t v123 = v122;

              switch(v123 >> 62)
              {
                case 1uLL:
                  sub_1DB042664(v121, v123);
                  if (__OFSUB__(HIDWORD(v121), v121)) {
                    goto LABEL_162;
                  }
                  uint64_t v124 = HIDWORD(v121) - (int)v121;
                  break;
                case 2uLL:
                  uint64_t v126 = *(void *)(v121 + 16);
                  uint64_t v125 = *(void *)(v121 + 24);
                  sub_1DB042664(v121, v123);
                  uint64_t v124 = v125 - v126;
                  if (!__OFSUB__(v125, v126)) {
                    break;
                  }
                  __break(1u);
LABEL_57:
                  sub_1DB042664(v121, v123);
                  uint64_t v124 = 0;
                  break;
                case 3uLL:
                  goto LABEL_57;
                default:
                  sub_1DB042664(v121, v123);
                  uint64_t v124 = BYTE6(v123);
                  break;
              }
              sub_1DB05A7A4(v124, 2);
              uint64_t v128 = v127;
              unint64_t v130 = v129;
              id v131 = objc_msgSend(v118, sel_serializedPublicKey_, 1);
              if (!v131) {
                goto LABEL_183;
              }
              v132 = v131;
              uint64_t v133 = sub_1DB0C4A08();
              unint64_t v135 = v134;

              uint64_t v346 = v128;
              unint64_t v347 = v130;
              sub_1DB04239C(v128, v130);
              sub_1DB05DEE8(v133, v135);
              sub_1DB042664(v133, v135);
              sub_1DB042664(v128, v130);
              uint64_t v136 = v346;
              unint64_t v137 = v347;
              sub_1DB0C4A18();
              sub_1DB042664(v136, v137);
              id v138 = v343;
              id v139 = objc_msgSend(v343, sel_serializedPublicKey_, 1);
              if (!v139) {
                goto LABEL_184;
              }
              v140 = v139;
              uint64_t v141 = sub_1DB0C4A08();
              unint64_t v143 = v142;

              switch(v143 >> 62)
              {
                case 1uLL:
                  sub_1DB042664(v141, v143);
                  if (__OFSUB__(HIDWORD(v141), v141)) {
                    goto LABEL_163;
                  }
                  uint64_t v144 = HIDWORD(v141) - (int)v141;
                  break;
                case 2uLL:
                  uint64_t v146 = *(void *)(v141 + 16);
                  uint64_t v145 = *(void *)(v141 + 24);
                  sub_1DB042664(v141, v143);
                  uint64_t v144 = v145 - v146;
                  if (!__OFSUB__(v145, v146)) {
                    break;
                  }
                  __break(1u);
LABEL_67:
                  sub_1DB042664(v141, v143);
                  uint64_t v144 = 0;
                  break;
                case 3uLL:
                  goto LABEL_67;
                default:
                  sub_1DB042664(v141, v143);
                  uint64_t v144 = BYTE6(v143);
                  break;
              }
              sub_1DB05A7A4(v144, 2);
              uint64_t v148 = v147;
              unint64_t v150 = v149;
              id v151 = objc_msgSend(v138, sel_serializedPublicKey_, 1);
              if (!v151) {
                goto LABEL_185;
              }
              v152 = v151;
              uint64_t v153 = sub_1DB0C4A08();
              unint64_t v155 = v154;

              uint64_t v346 = v148;
              unint64_t v347 = v150;
              sub_1DB04239C(v148, v150);
              sub_1DB05DEE8(v153, v155);
              sub_1DB042664(v153, v155);
              sub_1DB042664(v148, v150);
              uint64_t v156 = v346;
              unint64_t v157 = v347;
              sub_1DB0C4A18();
              sub_1DB042664(v156, v157);
              id v158 = objc_msgSend(v99, sel_serializedBigEndianScalar);
              if (!v158) {
                goto LABEL_202;
              }
              v159 = v158;
              uint64_t v160 = sub_1DB0C4A08();
              unint64_t v162 = v161;

              switch(v162 >> 62)
              {
                case 1uLL:
                  sub_1DB042664(v160, v162);
                  if (__OFSUB__(HIDWORD(v160), v160)) {
                    goto LABEL_164;
                  }
                  uint64_t v163 = HIDWORD(v160) - (int)v160;
                  break;
                case 2uLL:
                  uint64_t v165 = *(void *)(v160 + 16);
                  uint64_t v164 = *(void *)(v160 + 24);
                  sub_1DB042664(v160, v162);
                  uint64_t v163 = v164 - v165;
                  if (!__OFSUB__(v164, v165)) {
                    break;
                  }
                  __break(1u);
LABEL_77:
                  sub_1DB042664(v160, v162);
                  uint64_t v163 = 0;
                  break;
                case 3uLL:
                  goto LABEL_77;
                default:
                  sub_1DB042664(v160, v162);
                  uint64_t v163 = BYTE6(v162);
                  break;
              }
              sub_1DB05A7A4(v163, 2);
              uint64_t v167 = v166;
              unint64_t v169 = v168;
              id v170 = objc_msgSend(v99, sel_serializedBigEndianScalar);
              if (!v170) {
                goto LABEL_202;
              }
              v171 = v170;
              uint64_t v172 = sub_1DB0C4A08();
              unint64_t v174 = v173;

              uint64_t v346 = v167;
              unint64_t v347 = v169;
              sub_1DB04239C(v167, v169);
              sub_1DB05DEE8(v172, v174);
              sub_1DB042664(v172, v174);
              sub_1DB042664(v167, v169);
              uint64_t v175 = v346;
              unint64_t v176 = v347;
              sub_1DB0C4A18();
              sub_1DB042664(v175, v176);
              id v177 = v342;
              id v178 = objc_msgSend(v342, sel_serializedPublicKey_, 1);
              if (!v178) {
                goto LABEL_186;
              }
              v179 = v178;
              uint64_t v180 = sub_1DB0C4A08();
              unint64_t v182 = v181;

              switch(v182 >> 62)
              {
                case 1uLL:
                  goto LABEL_87;
                case 2uLL:
                  uint64_t v185 = *(void *)(v180 + 16);
                  uint64_t v184 = *(void *)(v180 + 24);
                  sub_1DB042664(v180, v182);
                  uint64_t v183 = v184 - v185;
                  if (!__OFSUB__(v184, v185)) {
                    goto LABEL_90;
                  }
                  __break(1u);
LABEL_87:
                  sub_1DB042664(v180, v182);
                  if (__OFSUB__(HIDWORD(v180), v180)) {
                    goto LABEL_165;
                  }
                  uint64_t v183 = HIDWORD(v180) - (int)v180;
LABEL_90:
                  sub_1DB05A7A4(v183, 2);
                  uint64_t v187 = v186;
                  unint64_t v189 = v188;
                  id v190 = objc_msgSend(v177, sel_serializedPublicKey_, 1);
                  if (!v190) {
                    goto LABEL_187;
                  }
                  v191 = v190;
                  uint64_t v192 = sub_1DB0C4A08();
                  unint64_t v194 = v193;

                  uint64_t v346 = v187;
                  unint64_t v347 = v189;
                  sub_1DB04239C(v187, v189);
                  sub_1DB05DEE8(v192, v194);
                  sub_1DB042664(v192, v194);
                  sub_1DB042664(v187, v189);
                  uint64_t v195 = v346;
                  unint64_t v196 = v347;
                  sub_1DB0C4A18();
                  sub_1DB042664(v195, v196);
                  id v197 = v341;
                  id v198 = objc_msgSend(v341, sel_serializedPublicKey_, 1);
                  if (!v198) {
                    goto LABEL_188;
                  }
                  v199 = v198;
                  uint64_t v200 = sub_1DB0C4A08();
                  unint64_t v202 = v201;

                  switch(v202 >> 62)
                  {
                    case 1uLL:
                      sub_1DB042664(v200, v202);
                      if (__OFSUB__(HIDWORD(v200), v200)) {
                        goto LABEL_166;
                      }
                      uint64_t v203 = HIDWORD(v200) - (int)v200;
                      break;
                    case 2uLL:
                      uint64_t v205 = *(void *)(v200 + 16);
                      uint64_t v204 = *(void *)(v200 + 24);
                      sub_1DB042664(v200, v202);
                      uint64_t v203 = v204 - v205;
                      if (!__OFSUB__(v204, v205)) {
                        break;
                      }
                      __break(1u);
LABEL_97:
                      sub_1DB042664(v200, v202);
                      uint64_t v203 = 0;
                      break;
                    case 3uLL:
                      goto LABEL_97;
                    default:
                      sub_1DB042664(v200, v202);
                      uint64_t v203 = BYTE6(v202);
                      break;
                  }
                  sub_1DB05A7A4(v203, 2);
                  uint64_t v207 = v206;
                  unint64_t v209 = v208;
                  id v210 = objc_msgSend(v197, sel_serializedPublicKey_, 1);
                  if (!v210) {
                    goto LABEL_189;
                  }
                  v211 = v210;
                  uint64_t v212 = sub_1DB0C4A08();
                  unint64_t v214 = v213;

                  uint64_t v346 = v207;
                  unint64_t v347 = v209;
                  sub_1DB04239C(v207, v209);
                  sub_1DB05DEE8(v212, v214);
                  sub_1DB042664(v212, v214);
                  sub_1DB042664(v207, v209);
                  uint64_t v215 = v346;
                  unint64_t v216 = v347;
                  sub_1DB0C4A18();
                  sub_1DB042664(v215, v216);
                  id v217 = v340;
                  id v218 = objc_msgSend(v340, sel_serializedPublicKey_, 1);
                  if (!v218) {
                    goto LABEL_190;
                  }
                  v219 = v218;
                  uint64_t v220 = sub_1DB0C4A08();
                  unint64_t v222 = v221;

                  switch(v222 >> 62)
                  {
                    case 1uLL:
                      sub_1DB042664(v220, v222);
                      if (__OFSUB__(HIDWORD(v220), v220)) {
                        goto LABEL_167;
                      }
                      uint64_t v223 = HIDWORD(v220) - (int)v220;
                      break;
                    case 2uLL:
                      uint64_t v225 = *(void *)(v220 + 16);
                      uint64_t v224 = *(void *)(v220 + 24);
                      sub_1DB042664(v220, v222);
                      uint64_t v223 = v224 - v225;
                      if (!__OFSUB__(v224, v225)) {
                        break;
                      }
                      __break(1u);
LABEL_107:
                      sub_1DB042664(v220, v222);
                      uint64_t v223 = 0;
                      break;
                    case 3uLL:
                      goto LABEL_107;
                    default:
                      sub_1DB042664(v220, v222);
                      uint64_t v223 = BYTE6(v222);
                      break;
                  }
                  sub_1DB05A7A4(v223, 2);
                  uint64_t v227 = v226;
                  unint64_t v229 = v228;
                  id v230 = objc_msgSend(v217, sel_serializedPublicKey_, 1);
                  if (!v230) {
                    goto LABEL_191;
                  }
                  v231 = v230;
                  uint64_t v232 = sub_1DB0C4A08();
                  unint64_t v234 = v233;

                  uint64_t v346 = v227;
                  unint64_t v347 = v229;
                  sub_1DB04239C(v227, v229);
                  sub_1DB05DEE8(v232, v234);
                  sub_1DB042664(v232, v234);
                  sub_1DB042664(v227, v229);
                  uint64_t v235 = v346;
                  unint64_t v236 = v347;
                  sub_1DB0C4A18();
                  sub_1DB042664(v235, v236);
                  id v237 = v339;
                  id v238 = objc_msgSend(v339, sel_serializedPublicKey_, 1);
                  if (!v238) {
                    goto LABEL_192;
                  }
                  v239 = v238;
                  uint64_t v240 = sub_1DB0C4A08();
                  unint64_t v242 = v241;

                  switch(v242 >> 62)
                  {
                    case 1uLL:
                      goto LABEL_117;
                    case 2uLL:
                      uint64_t v245 = *(void *)(v240 + 16);
                      uint64_t v244 = *(void *)(v240 + 24);
                      sub_1DB042664(v240, v242);
                      uint64_t v243 = v244 - v245;
                      if (!__OFSUB__(v244, v245)) {
                        goto LABEL_120;
                      }
                      __break(1u);
LABEL_117:
                      sub_1DB042664(v240, v242);
                      if (__OFSUB__(HIDWORD(v240), v240)) {
                        goto LABEL_168;
                      }
                      uint64_t v243 = HIDWORD(v240) - (int)v240;
LABEL_120:
                      sub_1DB05A7A4(v243, 2);
                      uint64_t v247 = v246;
                      unint64_t v249 = v248;
                      id v250 = objc_msgSend(v237, sel_serializedPublicKey_, 1);
                      if (!v250) {
                        goto LABEL_193;
                      }
                      v251 = v250;
                      uint64_t v252 = sub_1DB0C4A08();
                      unint64_t v254 = v253;

                      uint64_t v346 = v247;
                      unint64_t v347 = v249;
                      sub_1DB04239C(v247, v249);
                      sub_1DB05DEE8(v252, v254);
                      sub_1DB042664(v252, v254);
                      sub_1DB042664(v247, v249);
                      uint64_t v255 = v346;
                      unint64_t v256 = v347;
                      sub_1DB0C4A18();
                      sub_1DB042664(v255, v256);
                      id v257 = v338;
                      id v258 = objc_msgSend(v338, sel_serializedPublicKey_, 1);
                      if (!v258) {
                        goto LABEL_194;
                      }
                      v259 = v258;
                      uint64_t v260 = sub_1DB0C4A08();
                      unint64_t v262 = v261;

                      switch(v262 >> 62)
                      {
                        case 1uLL:
                          goto LABEL_127;
                        case 2uLL:
                          uint64_t v265 = *(void *)(v260 + 16);
                          uint64_t v264 = *(void *)(v260 + 24);
                          sub_1DB042664(v260, v262);
                          uint64_t v263 = v264 - v265;
                          if (!__OFSUB__(v264, v265)) {
                            goto LABEL_130;
                          }
                          __break(1u);
LABEL_127:
                          sub_1DB042664(v260, v262);
                          if (__OFSUB__(HIDWORD(v260), v260)) {
                            goto LABEL_169;
                          }
                          uint64_t v263 = HIDWORD(v260) - (int)v260;
LABEL_130:
                          sub_1DB05A7A4(v263, 2);
                          uint64_t v267 = v266;
                          unint64_t v269 = v268;
                          id v270 = objc_msgSend(v257, sel_serializedPublicKey_, 1);
                          if (!v270) {
                            goto LABEL_195;
                          }
                          v271 = v270;
                          uint64_t v272 = sub_1DB0C4A08();
                          unint64_t v274 = v273;

                          uint64_t v346 = v267;
                          unint64_t v347 = v269;
                          sub_1DB04239C(v267, v269);
                          sub_1DB05DEE8(v272, v274);
                          sub_1DB042664(v272, v274);
                          sub_1DB042664(v267, v269);
                          uint64_t v275 = v346;
                          unint64_t v276 = v347;
                          sub_1DB0C4A18();
                          sub_1DB042664(v275, v276);
                          id v277 = v337;
                          id v278 = objc_msgSend(v337, sel_serializedPublicKey_, 1);
                          if (!v278) {
                            goto LABEL_196;
                          }
                          break;
                        case 3uLL:
                          sub_1DB042664(v260, v262);
                          uint64_t v263 = 0;
                          goto LABEL_130;
                        default:
                          sub_1DB042664(v260, v262);
                          uint64_t v263 = BYTE6(v262);
                          goto LABEL_130;
                      }
                      break;
                    case 3uLL:
                      sub_1DB042664(v240, v242);
                      uint64_t v243 = 0;
                      goto LABEL_120;
                    default:
                      sub_1DB042664(v240, v242);
                      uint64_t v243 = BYTE6(v242);
                      goto LABEL_120;
                  }
                  break;
                case 3uLL:
                  sub_1DB042664(v180, v182);
                  uint64_t v183 = 0;
                  goto LABEL_90;
                default:
                  sub_1DB042664(v180, v182);
                  uint64_t v183 = BYTE6(v182);
                  goto LABEL_90;
              }
              break;
            case 3uLL:
              sub_1DB042664(v101, v103);
              uint64_t v104 = 0;
              goto LABEL_50;
            default:
              sub_1DB042664(v101, v103);
              uint64_t v104 = BYTE6(v103);
              goto LABEL_50;
          }
          break;
        case 3uLL:
          sub_1DB042664(v61, v63);
          uint64_t v64 = 0;
          goto LABEL_30;
        default:
          sub_1DB042664(v61, v63);
          uint64_t v64 = BYTE6(v63);
          goto LABEL_30;
      }
      v279 = v278;
      uint64_t v280 = sub_1DB0C4A08();
      unint64_t v282 = v281;

      switch(v282 >> 62)
      {
        case 1uLL:
          goto LABEL_137;
        case 2uLL:
          uint64_t v285 = *(void *)(v280 + 16);
          uint64_t v284 = *(void *)(v280 + 24);
          sub_1DB042664(v280, v282);
          uint64_t v283 = v284 - v285;
          if (!__OFSUB__(v284, v285)) {
            goto LABEL_140;
          }
          __break(1u);
LABEL_137:
          sub_1DB042664(v280, v282);
          if (__OFSUB__(HIDWORD(v280), v280)) {
            goto LABEL_170;
          }
          uint64_t v283 = HIDWORD(v280) - (int)v280;
LABEL_140:
          sub_1DB05A7A4(v283, 2);
          uint64_t v287 = v286;
          unint64_t v289 = v288;
          id v290 = objc_msgSend(v277, sel_serializedPublicKey_, 1);
          if (!v290) {
            goto LABEL_197;
          }
          v291 = v290;
          uint64_t v292 = sub_1DB0C4A08();
          unint64_t v294 = v293;

          uint64_t v346 = v287;
          unint64_t v347 = v289;
          sub_1DB04239C(v287, v289);
          sub_1DB05DEE8(v292, v294);
          sub_1DB042664(v292, v294);
          sub_1DB042664(v287, v289);
          uint64_t v295 = v346;
          unint64_t v296 = v347;
          sub_1DB0C4A18();
          sub_1DB042664(v295, v296);
          id v297 = v336;
          id v298 = objc_msgSend(v336, sel_serializedPublicKey_, 1);
          if (!v298) {
            goto LABEL_198;
          }
          v299 = v298;
          uint64_t v300 = sub_1DB0C4A08();
          unint64_t v302 = v301;

          switch(v302 >> 62)
          {
            case 1uLL:
              sub_1DB042664(v300, v302);
              if (__OFSUB__(HIDWORD(v300), v300)) {
                goto LABEL_171;
              }
              uint64_t v303 = HIDWORD(v300) - (int)v300;
              break;
            case 2uLL:
              uint64_t v305 = *(void *)(v300 + 16);
              uint64_t v304 = *(void *)(v300 + 24);
              sub_1DB042664(v300, v302);
              uint64_t v303 = v304 - v305;
              if (!__OFSUB__(v304, v305)) {
                break;
              }
              __break(1u);
LABEL_147:
              sub_1DB042664(v300, v302);
              uint64_t v303 = 0;
              break;
            case 3uLL:
              goto LABEL_147;
            default:
              sub_1DB042664(v300, v302);
              uint64_t v303 = BYTE6(v302);
              break;
          }
          sub_1DB05A7A4(v303, 2);
          uint64_t v307 = v306;
          unint64_t v309 = v308;
          id v310 = objc_msgSend(v297, sel_serializedPublicKey_, 1);
          if (!v310) {
            goto LABEL_199;
          }
          v311 = v310;
          uint64_t v312 = sub_1DB0C4A08();
          unint64_t v314 = v313;

          uint64_t v346 = v307;
          unint64_t v347 = v309;
          sub_1DB04239C(v307, v309);
          sub_1DB05DEE8(v312, v314);
          sub_1DB042664(v312, v314);
          sub_1DB042664(v307, v309);
          uint64_t v315 = v346;
          unint64_t v316 = v347;
          sub_1DB0C4A18();
          sub_1DB042664(v315, v316);
          long long v317 = v348;
          sub_1DB04239C(v348, *((unint64_t *)&v348 + 1));
          uint64_t v318 = sub_1DB05C118(0xD000000000000025, 0x80000001DB0CBD70);
          unint64_t v320 = v319;
          v321 = v333;
          sub_1DB0C5058();
          uint64_t v322 = sub_1DB0C5048();
          unint64_t v324 = v323;
          (*(void (**)(char *, uint64_t))(v334 + 8))(v321, v335);
          if (v324 >> 60 == 15) {
            goto LABEL_200;
          }
          uint64_t v346 = v322;
          unint64_t v347 = v324;
          sub_1DB067A4C(v322, v324);
          sub_1DB04239C(v318, v320);
          sub_1DB05DEE8(v318, v320);
          sub_1DB042664(v318, v320);
          sub_1DB069BB4(v322, v324);
          uint64_t v325 = v346;
          unint64_t v326 = v347;
          sub_1DB0C4F38();
          sub_1DB07C914();
          uint64_t v327 = sub_1DB0C4D68();
          uint64_t v328 = v332;
          uint64_t v329 = sub_1DB0632DC(v317, *((unint64_t *)&v317 + 1), 1, v325, v326, v327, 0);
          if (v328)
          {
            sub_1DB042664(v325, v326);
            sub_1DB042664(v317, *((unint64_t *)&v317 + 1));
            sub_1DB042664(v318, v320);
            return sub_1DB042664(v317, *((unint64_t *)&v317 + 1));
          }
          if (!*(void *)(v329 + 16)) {
            goto LABEL_201;
          }
          id v331 = *(id *)(v329 + 32);
          swift_bridgeObjectRelease();
          sub_1DB042664(v325, v326);
          sub_1DB042664(v317, *((unint64_t *)&v317 + 1));
          sub_1DB042664(v318, v320);
          sub_1DB042664(v317, *((unint64_t *)&v317 + 1));
          return (uint64_t)v331;
        case 3uLL:
          sub_1DB042664(v280, v282);
          uint64_t v283 = 0;
          goto LABEL_140;
        default:
          sub_1DB042664(v280, v282);
          uint64_t v283 = BYTE6(v282);
          goto LABEL_140;
      }
    case 3uLL:
      sub_1DB042664(v23, v25);
      uint64_t v26 = 0;
      goto LABEL_10;
    default:
      sub_1DB042664(v23, v25);
      uint64_t v26 = BYTE6(v25);
      goto LABEL_10;
  }
}

uint64_t sub_1DB0779A8(void *a1, void *a2)
{
  id v5 = *(id *)v2;
  unint64_t v6 = *(void **)(v2 + 8);
  BOOL v7 = *(void **)(v2 + 16);
  if (objc_msgSend(*(id *)v2, sel_isEqual_, a1)) {
    goto LABEL_8;
  }
  if (objc_msgSend(v5, sel_isEqual_, a2)) {
    goto LABEL_8;
  }
  unint64_t v9 = *(void **)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v2 = (uint64_t)v5;
  id v10 = v6;
  id v11 = v7;
  id v12 = v9;
  sub_1DB0C5188();
  id v13 = sub_1DB07A220((void *)v2, v2);
  unsigned __int8 v14 = objc_msgSend((id)v2, sel_isEqual_, v13);
  swift_bridgeObjectRelease();

  if (v14) {
    goto LABEL_8;
  }
  uint64_t v2 = (uint64_t)(id)v2;
  id v15 = v10;
  id v16 = v11;
  id v17 = v12;
  sub_1DB0C5188();
  id v18 = a1;
  id v19 = a2;
  if ((objc_msgSend(v15, sel_isEqual_, v18) & 1) != 0
    || objc_msgSend(v15, sel_isEqual_, v19))
  {

    swift_bridgeObjectRelease();
LABEL_7:

LABEL_8:
    sub_1DB07CAC8();
    swift_allocError();
    *uint64_t v20 = 2;
    swift_willThrow();
    return v2 & 1;
  }
  uint64_t v2 = (uint64_t)(id)v2;
  id v22 = v15;
  id v23 = v16;
  id v24 = v17;
  sub_1DB0C5188();
  id v25 = sub_1DB07A220(v22, (uint64_t)v22);
  unsigned __int8 v26 = objc_msgSend(v22, sel_isEqual_, v25);

  uint64_t v27 = v23;
  swift_bridgeObjectRelease_n();

  if (v26) {
    goto LABEL_8;
  }
  id v15 = (id)v2;
  uint64_t v28 = v24;
  id v16 = v22;
  id v17 = v27;
  id v29 = v28;
  sub_1DB0C5188();
  uint64_t v2 = (uint64_t)v18;
  if (objc_msgSend(v17, sel_isEqual_, v2))
  {
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }
  id v30 = v15;
  id v31 = v16;
  id v32 = v17;
  id v33 = v29;
  sub_1DB0C5188();
  id v34 = sub_1DB07A220(v32, (uint64_t)v32);
  unsigned __int8 v35 = objc_msgSend(v32, sel_isEqual_, v34);

  swift_bridgeObjectRelease_n();
  if (v35) {
    goto LABEL_8;
  }
  uint64_t v51 = v8;
  unint64_t v52 = 0xD000000000000021;
  unint64_t v53 = 0x80000001DB0CBE10;
  uint64_t v55 = MEMORY[0x1E4FBC860];
  uint64_t v56 = MEMORY[0x1E4FBC860];
  uint64_t v57 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v36 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v38 = *((void *)v36 + 2);
  unint64_t v37 = *((void *)v36 + 3);
  if (v38 >= v37 >> 1) {
    unint64_t v36 = sub_1DB07E444((char *)(v37 > 1), v38 + 1, 1, v36);
  }
  *((void *)v36 + 2) = v38 + 1;
  unint64_t v39 = &v36[16 * v38];
  *((void *)v39 + 4) = 122;
  *((void *)v39 + 5) = 0xE100000000000000;
  uint64_t v54 = v36;
  id v40 = (id)v2;
  uint64_t v41 = sub_1DB07B95C(0x6F746172656E6567, 0xEA00000000004772, v40, (uint64_t)&v52);

  id v42 = v32;
  uint64_t v43 = sub_1DB07B95C(90, 0xE100000000000000, v42, (uint64_t)&v52);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_1DB0C77B0;
  *(void *)(v44 + 32) = v38;
  *(void *)(v44 + 40) = v41;
  uint64_t v45 = v57;
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v45 = sub_1DB07E548(0, v45[2] + 1, 1, v45);
  }
  unint64_t v47 = v45[2];
  unint64_t v46 = v45[3];
  if (v47 >= v46 >> 1) {
    uint64_t v45 = sub_1DB07E548((void *)(v46 > 1), v47 + 1, 1, v45);
  }
  v45[2] = v47 + 1;
  uint64_t v48 = &v45[2 * v47];
  v48[4] = v43;
  v48[5] = v44;
  swift_bridgeObjectRelease();
  v58[0] = v52;
  v58[1] = v53;
  v58[2] = v54;
  v58[3] = v55;
  v58[4] = v56;
  v58[5] = v45;
  uint64_t v2 = (uint64_t)v58;
  uint64_t v49 = v58[7];
  char v50 = sub_1DB074C90((uint64_t)v33, v51);
  if (!v49) {
    LOBYTE(v2) = v50;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id ATHMKeyCommitments.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ATHMKeyCommitments();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ATHMKeyCommitments.__deallocating_deinit()
{
  return sub_1DB079A24(type metadata accessor for ATHMKeyCommitments);
}

id ATHMClient.__allocating_init(keyCommitmentsData:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return ATHMClient.init(keyCommitmentsData:)(a1, a2);
}

id ATHMClient.init(keyCommitmentsData:)(uint64_t a1, unint64_t a2)
{
  unint64_t v6 = (char *)v2;
  sub_1DB08A55C(a1, a2, &v21);
  if (v3)
  {

    sub_1DB042664(a1, a2);
    type metadata accessor for ATHMClient();
    swift_deallocPartialClassInstance();
    return v2;
  }
  id v29 = (id)v21;
  id v27 = v22;
  v28[0] = *((id *)&v21 + 1);
  uint64_t v25 = v24;
  id v26 = v23;
  sub_1DB0C4F38();
  sub_1DB069A20(&v29);
  sub_1DB069A20(v28);
  sub_1DB069A20(&v27);
  sub_1DB069A20(&v26);
  sub_1DB07C8E8((uint64_t)&v25);
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v15);
  if (result)
  {
    uint64_t v8 = result;
    sub_1DB0C4D78();
    swift_dynamicCast();
    id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v15);
    if (result)
    {
      sub_1DB0782CC(4, v8, result, &v21, (uint64_t)v16);
      sub_1DB07C96C(&v29);
      sub_1DB07C96C(v28);
      sub_1DB07C96C(&v27);
      sub_1DB07C96C(&v26);
      sub_1DB0697EC((uint64_t)&v25);
      uint64_t v9 = v17;
      uint64_t v10 = v18;
      uint64_t v11 = v20;
      id v12 = &v6[OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client];
      long long v13 = v16[1];
      *(_OWORD *)id v12 = v16[0];
      *((_OWORD *)v12 + 1) = v13;
      *((_OWORD *)v12 + 2) = v16[2];
      *((void *)v12 + 6) = v9;
      *((void *)v12 + 7) = v10;
      *((_OWORD *)v12 + 4) = v19;
      *((void *)v12 + 10) = v11;

      v14.receiver = v6;
      v14.super_class = (Class)type metadata accessor for ATHMClient();
      id v2 = objc_msgSendSuper2(&v14, sel_init);
      sub_1DB042664(a1, a2);
      return v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1DB0782CC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  long long v30 = a4[1];
  long long v31 = *a4;
  uint64_t v29 = *((void *)a4 + 4);
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v36);
  id v9 = objc_msgSend(v8, sel_serializedPublicKey_, 1);
  if (!v9)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v10 = v9;
  uint64_t v11 = sub_1DB0C4A08();
  unint64_t v13 = v12;

  uint64_t v14 = sub_1DB05C118(0xD000000000000029, 0x80000001DB0CBDE0);
  unint64_t v16 = v15;
  sub_1DB073FA8(v11, v13, v14, v15);
  if (v5)
  {
LABEL_7:
    swift_unexpectedError();
    __break(1u);
    return;
  }
  uint64_t v18 = v17;
  sub_1DB042664(v14, v16);
  long long v19 = (void *)*((void *)a4 + 1);
  id v40 = *(id *)a4;
  uint64_t v20 = (void *)*((void *)a4 + 2);
  uint64_t v21 = *((void *)a4 + 4);
  id v38 = (id)*((void *)a4 + 3);
  id v39 = v19;
  uint64_t v37 = v21;
  sub_1DB042664(v11, v13);
  if (sub_1DB0779A8(v8, v18))
  {
    sub_1DB069A20(&v40);
    sub_1DB069A20(&v39);
    id v22 = v20;
    sub_1DB069A20(&v38);
    sub_1DB07C8E8((uint64_t)&v37);
    id v23 = a2;
    id v24 = a3;
    id v25 = v8;
    id v26 = sub_1DB072A88((uint64_t)v23, v22);
    id v27 = sub_1DB072A88((uint64_t)v24, v25);
    id v35 = sub_1DB07A220(v26, (uint64_t)v27);

    sub_1DB07C96C(&v40);
    sub_1DB07C96C(&v39);

    sub_1DB07C96C(&v38);
    sub_1DB0697EC((uint64_t)&v37);

    *(void *)a5 = v23;
    *(void *)(a5 + 8) = v24;
    *(_OWORD *)(a5 + 16) = v31;
    *(_OWORD *)(a5 + 32) = v30;
    *(void *)(a5 + 48) = v29;
    *(void *)(a5 + 56) = a1;
    *(void *)(a5 + 64) = v25;
    *(void *)(a5 + 72) = v18;
    *(void *)(a5 + 80) = v35;
  }
  else
  {
    sub_1DB07CAC8();
    swift_allocError();
    *uint64_t v28 = 2;
    swift_willThrow();
    sub_1DB07C96C(&v40);
    sub_1DB07C96C(&v39);

    sub_1DB07C96C(&v38);
    sub_1DB0697EC((uint64_t)&v37);
  }
}

id sub_1DB07868C()
{
  id result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 80), sel_serializedPublicKey_, 1);
  if (result)
  {
    id v2 = result;
    uint64_t v3 = sub_1DB0C4A08();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1DB0787A4(uint64_t a1, unint64_t a2)
{
  sub_1DB08AAD4(a1, a2, v42);
  if (v3) {
    return v4;
  }
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client);
  unint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 8);
  id v8 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 16);
  BOOL v7 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 24);
  id v9 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 32);
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 40);
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 64);
  id v38 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 72);
  uint64_t v41 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMClient_client + 80);
  sub_1DB0C4F38();
  sub_1DB07C914();
  id v36 = v5;
  id v35 = v6;
  id v37 = v8;
  id v12 = v7;
  id v13 = v9;
  id v34 = v10;
  sub_1DB0C5188();
  id v14 = v11;
  id v15 = v38;
  id v4 = v41;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v42[13]);
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v18 = v42[0];
    id v19 = sub_1DB07A220(v42[0], (uint64_t)v42[0]);
    LOBYTE(v18) = objc_msgSend(v18, sel_isEqual_, v19);

    if ((v18 & 1) != 0
      || (uint64_t v20 = v42[1],
          sub_1DB07C998((uint64_t)v42),
          id v21 = sub_1DB07A220(v20, (uint64_t)v20),
          LODWORD(v20) = objc_msgSend(v20, sel_isEqual_, v21),
          v21,
          sub_1DB07CA30((uint64_t)v42),
          v20))
    {
      sub_1DB07CAC8();
      swift_allocError();
      *id v22 = 4;
      swift_willThrow();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (sub_1DB07C31C(v4, (uint64_t)v42, v37, v12, v13, v14, v15))
      {
        sub_1DB07C998((uint64_t)v42);
        id v40 = v12;
        id v33 = v4;
        id v39 = v36;
        id v23 = v35;
        id v24 = v14;
        id v25 = v15;
        id v26 = v23;
        id v27 = (void *)sub_1DB075374((uint64_t)v42, v33, v39, (uint64_t)v23, v24, v25, v17);
        uint64_t v29 = v28;
        long long v31 = v30;

        swift_bridgeObjectRelease();
        id v4 = (id)sub_1DB08BFC4(v27, v29, v31);

        sub_1DB07CA30((uint64_t)v42);
        return v4;
      }
      sub_1DB07CAC8();
      swift_allocError();
      *id v32 = 5;
      swift_willThrow();

      swift_bridgeObjectRelease();
    }

    sub_1DB07CA30((uint64_t)v42);
    return v4;
  }
  __break(1u);
  return result;
}

id ATHMClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ATHMClient.init()()
{
}

id ATHMClient.__deallocating_deinit()
{
  return sub_1DB079A24(type metadata accessor for ATHMClient);
}

id ATHMServer.init()()
{
  sub_1DB0C4F38();
  sub_1DB07C914();
  id v1 = v0;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  id v3 = v2;
  id v19 = v1;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  id v5 = v4;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v7 = v6;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (!v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v9 = v8;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v24[0]);
  if (v10)
  {
    v24[0] = v3;
    v24[1] = v5;
    _OWORD v24[2] = v7;
    v24[3] = v9;
    v24[4] = v10;
    sub_1DB07B4FC(4, (uint64_t)v24, (uint64_t)v21);
    uint64_t v11 = v22;
    long long v12 = v21[1];
    long long v13 = v21[2];
    long long v14 = v21[3];
    long long v15 = v21[4];
    long long v16 = v23;
    uint64_t v17 = &v19[OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server];
    *(_OWORD *)uint64_t v17 = v21[0];
    *((_OWORD *)v17 + 1) = v12;
    *((_OWORD *)v17 + 2) = v13;
    *((_OWORD *)v17 + 3) = v14;
    *((_OWORD *)v17 + 4) = v15;
    *((void *)v17 + 10) = v11;
    *(_OWORD *)(v17 + 88) = v16;

    v20.receiver = v19;
    v20.super_class = (Class)type metadata accessor for ATHMServer();
    return objc_msgSendSuper2(&v20, sel_init);
  }
LABEL_11:
  __break(1u);
  id result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1DB0790CC()
{
  long long v1 = *(_OWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 56);
  v3[0] = *(_OWORD *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 40);
  v3[1] = v1;
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 72);
  return sub_1DB08C398((uint64_t)v3);
}

id sub_1DB0791F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  id v6 = sub_1DB08C61C(a1, a2);
  if (v4) {
    return (id)v3;
  }
  uint64_t v43 = v6;
  id v7 = (void *)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
  id v8 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
  id v9 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 8);
  id v10 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 16);
  uint64_t v11 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 24);
  long long v12 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 32);
  long long v13 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 40);
  long long v15 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 48);
  long long v14 = *(void **)(v3 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 56);
  uint64_t v16 = v7[9];
  uint64_t v45 = (void *)v7[11];
  unint64_t v47 = (void *)v7[12];
  uint64_t v48 = (void *)v7[8];
  v50[0] = 2;
  id v30 = v8;
  id v31 = v9;
  id v33 = v10;
  id v35 = v11;
  id v36 = v12;
  id v38 = v13;
  id v40 = v15;
  id v41 = v14;
  id v49 = v48;
  sub_1DB0C5188();
  id v42 = v45;
  id v46 = v47;
  id result = (id)MEMORY[0x1E01880E0](a3, v50);
  char v18 = v50[0];
  if (v50[0] == 2)
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v58);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v29 = result;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v58);
  uint64_t v28 = result;
  if (result)
  {
    char v27 = v18 & 1;
    memset(v57, 0, 64);
    v55[0] = v30;
    v55[1] = v31;
    id v55[2] = v33;
    v55[3] = v35;
    v55[4] = v36;
    v56[0] = v38;
    v56[1] = v40;
    v56[2] = v41;
    v56[3] = v49;
    v56[4] = v16;
    id v19 = v43;
    id v44 = v30;
    id v32 = v31;
    objc_super v20 = v19;
    id v34 = v33;
    id v21 = v35;
    id v37 = v36;
    id v39 = v38;
    id v22 = v40;
    id v23 = v41;
    id v24 = v49;
    sub_1DB0C5188();
    id v25 = v42;
    id v26 = v46;
    sub_1DB079B0C(v27, v20, (uint64_t)v55, (uint64_t)v56, v25, v26, v29, v28, v51, (uint64_t)v57);

    swift_bridgeObjectRelease();
    v53[2] = v51[2];
    v53[3] = v51[3];
    v53[4] = v51[4];
    uint64_t v54 = v52;
    v53[0] = v51[0];
    v53[1] = v51[1];
    uint64_t v3 = sub_1DB08C7B4((uint64_t)v53);
    sub_1DB07CA30((uint64_t)v53);

    return (id)v3;
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_1DB0796E0(uint64_t a1, unint64_t a2)
{
  sub_1DB08CC9C(a1, a2);
  if (!v3)
  {
    id v7 = (void *)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
    id v8 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server);
    id v9 = *(void **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate10ATHMServer_server + 8);
    uint64_t v29 = v6;
    uint64_t v11 = (void *)v7[2];
    id v10 = (void *)v7[3];
    long long v12 = v4;
    long long v13 = (void *)v7[4];
    id v32 = v5;
    id v24 = (void *)v7[5];
    id v26 = (void *)v7[6];
    long long v14 = (void *)v7[8];
    uint64_t v28 = (void *)v7[7];
    id v30 = (void *)v7[11];
    id v31 = (void *)v7[12];
    id v15 = v8;
    id v16 = v9;
    id v17 = v11;
    id v23 = v10;
    id v22 = v13;
    id v25 = v24;
    id v27 = v26;
    id v21 = v28;
    id v20 = v14;
    sub_1DB0C5188();
    id v18 = v30;
    id v19 = v31;
    LOBYTE(v10) = sub_1DB07C13C(v15, (uint64_t)v16, (uint64_t)v17, v12, v32, (uint64_t)v29);

    swift_bridgeObjectRelease();
    objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, (v10 & 1) != 0);
  }
}

id ATHMServer.__deallocating_deinit()
{
  return sub_1DB079A24(type metadata accessor for ATHMServer);
}

id sub_1DB079A24(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void sub_1DB079B0C(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  v104[8] = *MEMORY[0x1E4F143B8];
  sub_1DB07CCEC(a10, (uint64_t)v103);
  unint64_t v64 = v103[1];
  uint64_t v66 = v103[0];
  uint64_t v60 = v103[3];
  uint64_t v62 = v103[2];
  uint64_t v58 = v103[5];
  uint64_t v59 = v103[4];
  uint64_t v56 = v103[7];
  uint64_t v57 = v103[6];
  long long v14 = *(void **)(a3 + 24);
  uint64_t v77 = a3;
  id v93 = *(id *)(a3 + 32);
  id v94 = v14;
  id v79 = a8;
  id v15 = a5;
  id v16 = sub_1DB072A88((uint64_t)v79, a5);
  LODWORD(v81) = 0;
  id v17 = objc_msgSend(v16, sel_add_corecryptoError_, v16, &v81);
  if (v17)
  {
    id v18 = v17;
    id v19 = v79;
    while (1)
    {
      unsigned __int8 v20 = objc_msgSend(v16, sel_isEqual_, v18);

      if ((v20 & 1) == 0) {
        break;
      }
      sub_1DB0C4F38();
      sub_1DB07C914();
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v81);
      if (!v21) {
        __break(1u);
      }
      id v22 = v21;

      LODWORD(v81) = 0;
      id v23 = objc_msgSend(v15, sel_multiply_corecryptoError_, v22, &v81);
      if (v23)
      {
        id v24 = v23;

        LODWORD(v81) = 0;
        id v18 = objc_msgSend(v24, sel_add_corecryptoError_, v24, &v81);
        id v19 = v22;
        id v16 = v24;
        if (v18) {
          continue;
        }
      }
      goto LABEL_18;
    }
    id v26 = *(void **)a3;
    uint64_t v25 = *(void *)(a3 + 8);
    uint64_t v68 = *(void **)(a3 + 16);
    char v27 = a1;
    id v28 = sub_1DB093C64(a7, (uint64_t)v68);
    unint64_t v70 = v26;
    id v29 = sub_1DB093D80(v26, (uint64_t)v28);

    id v30 = sub_1DB072A88((uint64_t)v29, v15);
    uint64_t v72 = (void *)v25;
    id v31 = sub_1DB072A88(v25, v15);
    id v32 = sub_1DB07A220(v30, (uint64_t)v31);

    char v55 = v27;
    if (v27) {
      id v33 = v32;
    }
    else {
      id v33 = v30;
    }
    id v34 = v33;
    id v35 = sub_1DB07A220(v34, (uint64_t)a2);
    id v36 = sub_1DB072A88((uint64_t)v19, v35);

    sub_1DB07CCEC(a10, (uint64_t)v104);
    if (v104[0])
    {

      id v87 = *(id *)a4;
      sub_1DB07C96C(&v87);
      id v86 = *(id *)(a4 + 8);
      sub_1DB07C96C(&v86);
      id v85 = *(id *)(a4 + 16);
      sub_1DB07C96C(&v85);
      uint64_t v37 = *(void *)(a4 + 32);
      id v84 = *(id *)(a4 + 24);
      sub_1DB07C96C(&v84);
      uint64_t v83 = v37;
      sub_1DB0697EC((uint64_t)&v83);

      sub_1DB07C96C(&v94);
      sub_1DB07C96C(&v93);

      unint64_t v39 = v64;
      uint64_t v38 = v66;
      uint64_t v41 = v60;
      uint64_t v40 = v62;
      uint64_t v43 = v58;
      uint64_t v42 = v59;
      uint64_t v45 = v56;
      uint64_t v44 = v57;
LABEL_13:
      *a9 = v16;
      a9[1] = v36;
      a9[2] = a7;
      a9[3] = v38;
      a9[4] = v39;
      a9[5] = v40;
      a9[6] = v41;
      a9[7] = v42;
      a9[8] = v43;
      a9[9] = v44;
      a9[10] = v45;
      return;
    }
    uint64_t v65 = v34;
    id v46 = *(id *)a4;
    id v91 = *(id *)(a4 + 8);
    id v92 = v46;
    unint64_t v47 = *(void **)(a4 + 16);
    id v89 = *(id *)(a4 + 24);
    id v90 = v47;
    uint64_t v88 = *(void *)(a4 + 32);
    id v71 = v70;
    id v73 = v72;
    id v69 = v68;
    sub_1DB069A20(&v94);
    sub_1DB069A20(&v93);
    id v48 = v16;
    id v49 = v36;
    id v50 = v48;
    uint64_t v61 = v49;
    id v51 = v49;
    id v63 = a7;
    sub_1DB069A20(&v92);
    sub_1DB069A20(&v91);
    sub_1DB069A20(&v90);
    sub_1DB069A20(&v89);
    sub_1DB07C8E8((uint64_t)&v88);
    id v52 = a2;
    id v53 = v15;
    id v54 = a6;
    sub_1DB075838(v55 & 1, v79, v77, v50, v51, v63, a4, v52, &v95, v53, v54);

    if (!v76)
    {
      id v36 = v61;
      sub_1DB07C96C(&v92);
      sub_1DB07C96C(&v91);
      sub_1DB07C96C(&v90);
      sub_1DB07C96C(&v89);
      sub_1DB0697EC((uint64_t)&v88);

      sub_1DB07C96C(&v94);
      sub_1DB07C96C(&v93);

      uint64_t v38 = v95;
      unint64_t v39 = v96;
      uint64_t v40 = v97;
      uint64_t v41 = v98;
      uint64_t v42 = v99;
      uint64_t v43 = v100;
      uint64_t v44 = v101;
      uint64_t v45 = v102;
      goto LABEL_13;
    }

    sub_1DB07C96C(&v92);
    sub_1DB07C96C(&v91);
    sub_1DB07C96C(&v90);
    sub_1DB07C96C(&v89);
    sub_1DB0697EC((uint64_t)&v88);

    sub_1DB07C96C(&v94);
    sub_1DB07C96C(&v93);
  }
  else
  {
LABEL_18:
    uint64_t v95 = 0;
    unint64_t v96 = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    int v82 = v81;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C5358();
    __break(1u);
  }
}

id sub_1DB07A220(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_add_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    id result = (id)sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

id sub_1DB07A33C(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_sub_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    id result = (id)sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

id sub_1DB07A458(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = self;
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  uint64_t v3 = (uint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v15);
  if (v3 < 0) {
    __break(1u);
  }
  sub_1DB05A7A4(a1, v3);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  int v14 = 0;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v8 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
  id v9 = (void *)sub_1DB0C49E8();
  id v10 = objc_msgSend(v8, sel_initWithData_inGroup_reduction_corecryptoError_, v9, v15, 1, &v14);

  if (!v10)
  {
    int v11 = v14;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
    *(unsigned char *)(v12 + 4) = 0;
    swift_willThrow();
  }
  sub_1DB042664(v5, v7);
  return v10;
}

uint64_t sub_1DB07A624(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = 0;
  id v2 = sub_1DB07A458(0);
  id v3 = objc_msgSend(v2, sel_sub_corecryptoError_, a1, &v6);
  if (v3)
  {
    id v4 = v3;

    return (uint64_t)v4;
  }
  else
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

unint64_t *sub_1DB07A78C(unint64_t a1)
{
  v85[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = v1[2];
  unint64_t v4 = v1[3];
  v85[0] = v5;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 != *(void *)(v4 + 16)
    || (id v3 = v1, v7 = v1[4], v8 = v1[5], v9 = *(void *)(v7 + 16), v9 != *(void *)(v8 + 16)))
  {
    sub_1DB07CD54();
    swift_allocError();
    char v52 = 2;
LABEL_41:
    *id v51 = v52;
    goto LABEL_42;
  }
  unint64_t v10 = a1;
  if (*(void *)(a1 + 16) != v6)
  {
    sub_1DB07CD54();
    swift_allocError();
    char v52 = 1;
    goto LABEL_41;
  }
  uint64_t v11 = v2;
  uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  long long v13 = (void *)v1[6];
  uint64_t v83 = MEMORY[0x1E4FBC860];
  id v84 = v13;
  uint64_t v14 = v13[2];
  if (v14)
  {
    uint64_t v12 = v13 + 4;
    unint64_t v15 = v13[4];
    if (v15 < v9)
    {
      uint64_t v16 = (void *)v13[5];
      unint64_t v74 = v10;
      unint64_t v17 = v10 + 32;
      uint64_t v65 = v7;
      unint64_t v72 = v8 + 32;
      uint64_t v73 = v7 + 32;
      uint64_t v18 = sub_1DB0C5188();
      uint64_t v77 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v19 = 1;
      while (1)
      {
        unint64_t v20 = v17;
        unint64_t v10 = v16[2];
        if (!v10)
        {
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v71 = v15;
        uint64_t v22 = (uint64_t)(v16 + 4);
        unint64_t v21 = v16[4];
        if (v21 >= v6 || (uint64_t v23 = v16[5], v23 < 0) || v23 >= v9)
        {
LABEL_58:
          sub_1DB0697EC((uint64_t)&v84);
          swift_bridgeObjectRelease();
          goto LABEL_59;
        }
        unint64_t v24 = v10 - 1;
        if (v10 != 1)
        {
          if (v16[6] >= v6) {
            goto LABEL_58;
          }
          uint64_t v40 = v16[7];
          if (v40 < 0 || v40 >= v9) {
            goto LABEL_58;
          }
          uint64_t v41 = v16 + 9;
          while (--v24)
          {
            if (*(v41 - 1) < v6)
            {
              uint64_t v42 = *v41;
              if ((*v41 & 0x8000000000000000) == 0)
              {
                v41 += 2;
                if (v42 < v9) {
                  continue;
                }
              }
            }
            goto LABEL_58;
          }
        }
        uint64_t v67 = v12;
        uint64_t v68 = v19;
        uint64_t v69 = v14;
        unint64_t v70 = v6;
        uint64_t v76 = v11;
        unint64_t v66 = v20;
        uint64_t v25 = *(void **)(v20 + 8 * v21);
        id v26 = *(void **)(v73 + 8 * v23);
        LODWORD(v79) = 0;
        char v27 = v16;
        sub_1DB0C5188();
        id v28 = v25;
        id v29 = v26;
        id v75 = objc_msgSend(v29, sel_multiply_corecryptoError_, v28, &v79);
        if (!v75) {
          goto LABEL_67;
        }

        if (v27[2] < v10) {
          goto LABEL_62;
        }
        MEMORY[0x1F4188790](v30);
        uint64_t v32 = sub_1DB07C018(v22, 1, v31, (void (*)(uint64_t *__return_ptr, void, void))sub_1DB07CDA8);
        uint64_t v11 = v76;
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          id v34 = v75;
          sub_1DB0C5188();
          uint64_t v35 = 0;
          do
          {
            id v36 = *(void **)(v32 + 8 * v35 + 32);
            LODWORD(v79) = 0;
            id v37 = v36;
            id v38 = objc_msgSend(v34, sel_add_corecryptoError_, v37, &v79);
            if (!v38) {
              goto LABEL_67;
            }
            id v39 = v38;
            ++v35;

            id v34 = v39;
          }
          while (v33 != v35);
          swift_bridgeObjectRelease();
          uint64_t v11 = v76;
        }
        else
        {
          id v39 = v75;
        }
        swift_bridgeObjectRelease();
        id v43 = v39;
        MEMORY[0x1E0188080]();
        if (*(void *)(v83 + 16) >= *(void *)(v83 + 24) >> 1) {
          sub_1DB0C51A8();
        }
        sub_1DB0C51C8();
        sub_1DB0C5198();
        if (v71 >= v9) {
          goto LABEL_63;
        }
        uint64_t v44 = (uint64_t *)(v72 + 16 * v71);
        unint64_t v45 = v44[1];
        uint64_t v81 = *v44;
        unint64_t v82 = v45;
        swift_bridgeObjectRetain_n();
        sub_1DB0C50B8();
        swift_bridgeObjectRelease();
        uint64_t v46 = v81;
        unint64_t v47 = v82;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v77 = sub_1DB07E444(0, *((void *)v77 + 2) + 1, 1, v77);
        }
        unint64_t v49 = *((void *)v77 + 2);
        unint64_t v48 = *((void *)v77 + 3);
        if (v49 >= v48 >> 1) {
          uint64_t v77 = sub_1DB07E444((char *)(v48 > 1), v49 + 1, 1, v77);
        }
        *((void *)v77 + 2) = v49 + 1;
        id v50 = &v77[16 * v49];
        *((void *)v50 + 4) = v46;
        *((void *)v50 + 5) = v47;

        uint64_t v14 = v69;
        if (v68 == v69) {
          break;
        }
        uint64_t v12 = v67;
        unint64_t v15 = v67[2 * v68];
        unint64_t v6 = v70;
        unint64_t v17 = v66;
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v19 = v68 + 1;
          uint64_t v16 = (void *)v67[2 * v68 + 1];
          if ((uint64_t)v15 < v9) {
            continue;
          }
        }
        goto LABEL_58;
      }
      sub_1DB0697EC((uint64_t)&v84);
      uint64_t v54 = v83;
      unint64_t v6 = v70;
      uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v10 = v74;
      uint64_t v7 = v65;
      goto LABEL_46;
    }
LABEL_59:
    swift_bridgeObjectRelease();
    sub_1DB07CD54();
    swift_allocError();
    *unint64_t v64 = 0;
LABEL_42:
    swift_willThrow();
    return v3;
  }
  uint64_t v54 = MEMORY[0x1E4FBC860];
LABEL_46:
  uint64_t v18 = sub_1DB07BAD0(*v3, v3[1], v7, v54);
  if (v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_49:
    id v3 = (unint64_t *)v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v79 = v12;
    if (v6)
    {
      id v78 = v3;
      char v55 = (void **)(v5 + 32);
      uint64_t v56 = (void **)(v10 + 32);
      sub_1DB0C5188();
      while (v6)
      {
        unint64_t v57 = v6;
        uint64_t v58 = *v55;
        uint64_t v59 = *v56;
        int v80 = 0;
        id v60 = v58;
        id v61 = v59;
        id v62 = objc_msgSend(v78, sel_multiply_corecryptoError_, v60, &v80);
        if (!v62
          || (id v63 = v62,
              int v80 = 0,
              !objc_msgSend(v61, sel_sub_corecryptoError_, v62, &v80)))
        {
          uint64_t v81 = 0;
          unint64_t v82 = 0xE000000000000000;
          sub_1DB0C5288();
          sub_1DB0C50B8();
          sub_1DB0C53C8();
          sub_1DB0C50B8();
          swift_bridgeObjectRelease();
          while (1)
          {
            sub_1DB0C5358();
            __break(1u);
LABEL_67:
            uint64_t v81 = 0;
            unint64_t v82 = 0xE000000000000000;
            sub_1DB0C5288();
            sub_1DB0C50B8();
            int v80 = (int)v79;
            sub_1DB0C53C8();
            sub_1DB0C50B8();
            swift_bridgeObjectRelease();
          }
        }

        MEMORY[0x1E0188080]();
        if (v79[2] >= v79[3] >> 1) {
          sub_1DB0C51A8();
        }
        sub_1DB0C51C8();
        sub_1DB0C5198();

        ++v56;
        ++v55;
        unint64_t v6 = v57 - 1;
        if (v57 == 1)
        {
          sub_1DB0697EC((uint64_t)v85);
          return v78;
        }
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
    }
  }
  return v3;
}

unint64_t sub_1DB07B05C(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(a3 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a4 + 32);
  if (*(void *)(v4 + 16) > a2)
  {
    unint64_t v5 = *(void **)(v4 + 8 * a2 + 32);
    id v6 = *(id *)(a3 + 8 * result + 32);
    id v7 = v5;
    id v8 = sub_1DB072A88((uint64_t)v6, v7);

    return (unint64_t)v8;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1DB07B0F0@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a1[1];
  id v7 = (void *)a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  id v43 = (void *)*a1;
  id v10 = sub_1DB072A88(*a1, a2);
  uint64_t v40 = (void *)v8;
  id v11 = sub_1DB072A88(v8, a3);
  id v41 = sub_1DB07A220(v10, (uint64_t)v11);

  uint64_t v42 = (void *)v6;
  id v12 = sub_1DB072A88(v6, a2);
  id v39 = (void *)v9;
  id v58 = a3;
  id v13 = sub_1DB072A88(v9, a3);
  id v38 = sub_1DB07A220(v12, (uint64_t)v13);

  id v14 = sub_1DB072A88((uint64_t)v7, a2);
  unint64_t v44 = 0xD000000000000021;
  unint64_t v45 = 0x80000001DB0CBE10;
  uint64_t v46 = MEMORY[0x1E4FBC860];
  uint64_t v48 = MEMORY[0x1E4FBC860];
  uint64_t v49 = MEMORY[0x1E4FBC860];
  id v50 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v15 = sub_1DB07E444(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v17 = *((void *)v15 + 2);
  unint64_t v16 = *((void *)v15 + 3);
  if (v17 >= v16 >> 1) {
    unint64_t v15 = sub_1DB07E444((char *)(v16 > 1), v17 + 1, 1, v15);
  }
  *((void *)v15 + 2) = v17 + 1;
  uint64_t v18 = &v15[16 * v17];
  *((void *)v18 + 4) = 122;
  *((void *)v18 + 5) = 0xE100000000000000;
  unint64_t v47 = v15;
  id v19 = v7;
  MEMORY[0x1E0188080]();
  if (*(void *)(v46 + 16) >= *(void *)(v46 + 24) >> 1) {
    sub_1DB0C51A8();
  }
  uint64_t v35 = v19;
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v20 = *(void *)(v46 + 16) - 1;
  id v21 = a2;
  uint64_t v22 = sub_1DB07B7E8(0x6F746172656E6567, 0xEA00000000004772, v21, (uint64_t)&v44);

  id v23 = v14;
  uint64_t v24 = sub_1DB07B7E8(90, 0xE100000000000000, v23, (uint64_t)&v44);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3B0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1DB0C77B0;
  *(void *)(v25 + 32) = v20;
  *(void *)(v25 + 40) = v22;
  id v26 = v50;
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v26 = sub_1DB07E548(0, v26[2] + 1, 1, v26);
  }
  unint64_t v28 = v26[2];
  unint64_t v27 = v26[3];
  if (v28 >= v27 >> 1) {
    id v26 = sub_1DB07E548((void *)(v27 > 1), v28 + 1, 1, v26);
  }
  v26[2] = v28 + 1;
  id v29 = &v26[2 * v28];
  v29[4] = v24;
  v29[5] = v25;
  swift_bridgeObjectRelease();
  unint64_t v51 = v44;
  unint64_t v52 = v45;
  uint64_t v53 = v46;
  uint64_t v54 = v47;
  uint64_t v55 = v48;
  uint64_t v56 = v49;
  unint64_t v57 = v26;
  uint64_t v30 = sub_1DB074B34();
  if (v36)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = v30;
    uint64_t v37 = v31;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = v41;
    a4[1] = v38;
    a4[2] = v23;
    a4[3] = v33;
    a4[4] = v37;
  }
  return result;
}

void sub_1DB07B4FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *(void **)(a2 + 8);
  uint64_t v25 = *(void **)a2;
  id v32 = v24;
  id v33 = v25;
  id v23 = *(void **)(a2 + 16);
  id v30 = *(id *)(a2 + 24);
  id v31 = v23;
  id v22 = v30;
  unint64_t v5 = *(void **)(a2 + 32);
  id v29 = v5;
  sub_1DB0C4F38();
  sub_1DB069A20(&v33);
  sub_1DB069A20(&v32);
  sub_1DB069A20(&v31);
  sub_1DB069A20(&v30);
  sub_1DB069A20(&v29);
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v26);
  id v7 = objc_msgSend(v6, sel_serializedPublicKey_, 1);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_1DB0C4A08();
    unint64_t v11 = v10;

    uint64_t v12 = sub_1DB05C118(0xD000000000000029, 0x80000001DB0CBDE0);
    unint64_t v14 = v13;
    sub_1DB073FA8(v9, v11, v12, v13);
    if (!v3)
    {
      unint64_t v16 = v15;
      sub_1DB042664(v12, v14);
      sub_1DB042664(v9, v11);
      v34[0] = (uint64_t)v25;
      v34[1] = (uint64_t)v24;
      v34[2] = (uint64_t)v23;
      v34[3] = (uint64_t)v22;
      v34[4] = (uint64_t)v5;
      id v35 = v5;
      id v39 = v25;
      id v37 = v23;
      id v38 = v24;
      id v36 = v22;
      sub_1DB069A20(&v39);
      sub_1DB069A20(&v38);
      sub_1DB069A20(&v37);
      sub_1DB069A20(&v36);
      sub_1DB069A20(&v35);
      id v17 = v6;
      id v18 = v16;
      sub_1DB07B0F0(v34, v17, v18, v27);
      uint64_t v20 = v28;
      sub_1DB07C96C(&v33);
      sub_1DB07C96C(&v32);
      sub_1DB07C96C(&v31);
      sub_1DB07C96C(&v30);
      sub_1DB07C96C(&v29);
      *(void *)a3 = v25;
      *(void *)(a3 + 8) = v24;
      *(void *)(a3 + 16) = v23;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v5;
      long long v19 = v27[1];
      *(_OWORD *)(a3 + 40) = v27[0];
      *(_OWORD *)(a3 + 56) = v19;
      *(void *)(a3 + 72) = v20;
      *(void *)(a3 + 80) = a1;
      *(void *)(a3 + 88) = v17;
      *(void *)(a3 + 96) = v18;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_1DB07B7E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE5E0);
  unsigned char v17[4] = sub_1DB07CDD4();
  v17[0] = a3;
  uint64_t v8 = *(char **)(a4 + 40);
  id v9 = a3;
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_1DB07E444(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  unint64_t v11 = *((void *)v8 + 2);
  unint64_t v10 = *((void *)v8 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v8 = sub_1DB07E444((char *)(v10 > 1), v11 + 1, 1, v8);
  }
  *((void *)v8 + 2) = v11 + 1;
  uint64_t v12 = &v8[16 * v11];
  *((void *)v12 + 4) = a1;
  *((void *)v12 + 5) = a2;
  *(void *)(a4 + 40) = v8;
  sub_1DB07CE30((uint64_t)v17, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE5F0);
  uint64_t v13 = swift_dynamicCast();
  MEMORY[0x1E0188080](v13);
  if (*(void *)(*(void *)(a4 + 32) + 16) >= *(void *)(*(void *)(a4 + 32) + 24) >> 1) {
    sub_1DB0C51A8();
  }
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v14 = *(void *)(*(void *)(a4 + 32) + 16) - 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v14;
}

uint64_t sub_1DB07B95C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE5E0);
  unsigned char v17[4] = sub_1DB07CDD4();
  v17[0] = a3;
  uint64_t v8 = *(char **)(a4 + 32);
  id v9 = a3;
  sub_1DB0C5188();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_1DB07E444(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  unint64_t v11 = *((void *)v8 + 2);
  unint64_t v10 = *((void *)v8 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v8 = sub_1DB07E444((char *)(v10 > 1), v11 + 1, 1, v8);
  }
  *((void *)v8 + 2) = v11 + 1;
  uint64_t v12 = &v8[16 * v11];
  *((void *)v12 + 4) = a1;
  *((void *)v12 + 5) = a2;
  *(void *)(a4 + 32) = v8;
  sub_1DB07CE30((uint64_t)v17, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE5F0);
  uint64_t v13 = swift_dynamicCast();
  MEMORY[0x1E0188080](v13);
  if (*(void *)(*(void *)(a4 + 24) + 16) >= *(void *)(*(void *)(a4 + 24) + 24) >> 1) {
    sub_1DB0C51A8();
  }
  sub_1DB0C51C8();
  sub_1DB0C5198();
  uint64_t v14 = *(void *)(*(void *)(a4 + 24) + 16) - 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v14;
}

uint64_t sub_1DB07BAD0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v58 = a1;
  unint64_t v59 = a2;
  uint64_t v65 = sub_1DB0C5088();
  uint64_t v61 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  id v60 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v64 = xmmword_1DB0C7A30;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    v57[0] = a4;
    sub_1DB0C5188();
    uint64_t v8 = 0;
    while (1)
    {
      id v16 = *(id *)(a3 + 8 * v8 + 32);
      id v17 = objc_msgSend(v16, sel_serializedPublicKey_, 1);
      if (!v17) {
        goto LABEL_33;
      }
      id v18 = v17;
      ++v8;
      uint64_t v19 = sub_1DB0C4A08();
      unint64_t v21 = v20;

      uint64_t v9 = 0;
      switch(v21 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v19), v19))
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          uint64_t v9 = HIDWORD(v19) - (int)v19;
LABEL_4:
          sub_1DB05A7A4(v9, 2);
          uint64_t v11 = v10;
          unint64_t v13 = v12;
          uint64_t v62 = v10;
          unint64_t v63 = v12;
          sub_1DB04239C(v10, v12);
          sub_1DB04239C(v19, v21);
          sub_1DB05DEE8(v19, v21);
          sub_1DB042664(v19, v21);
          sub_1DB042664(v11, v13);
          uint64_t v14 = v62;
          unint64_t v15 = v63;
          sub_1DB0C4A18();
          sub_1DB042664(v14, v15);
          sub_1DB042664(v19, v21);

          if (v7 == v8)
          {
LABEL_12:
            swift_bridgeObjectRelease();
            a4 = v57[0];
            goto LABEL_13;
          }
          break;
        case 2uLL:
          uint64_t v23 = *(void *)(v19 + 16);
          uint64_t v22 = *(void *)(v19 + 24);
          uint64_t v9 = v22 - v23;
          if (!__OFSUB__(v22, v23)) {
            goto LABEL_4;
          }
          __break(1u);
          goto LABEL_12;
        case 3uLL:
          goto LABEL_4;
        default:
          uint64_t v9 = BYTE6(v21);
          goto LABEL_4;
      }
    }
  }
LABEL_13:
  uint64_t v24 = *(void *)(a4 + 16);
  if (v24)
  {
    sub_1DB0C5188();
    uint64_t v25 = 0;
    while (2)
    {
      id v33 = *(id *)(a4 + 8 * v25 + 32);
      id v34 = objc_msgSend(v33, sel_serializedPublicKey_, 1);
      if (!v34) {
        goto LABEL_34;
      }
      id v35 = v34;
      ++v25;
      uint64_t v36 = sub_1DB0C4A08();
      unint64_t v38 = v37;

      uint64_t v26 = 0;
      switch(v38 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v36), v36)) {
            goto LABEL_32;
          }
          uint64_t v26 = HIDWORD(v36) - (int)v36;
LABEL_16:
          sub_1DB05A7A4(v26, 2);
          uint64_t v28 = v27;
          unint64_t v30 = v29;
          uint64_t v62 = v27;
          unint64_t v63 = v29;
          sub_1DB04239C(v27, v29);
          sub_1DB04239C(v36, v38);
          sub_1DB05DEE8(v36, v38);
          sub_1DB042664(v36, v38);
          sub_1DB042664(v28, v30);
          uint64_t v31 = v62;
          unint64_t v32 = v63;
          sub_1DB0C4A18();
          sub_1DB042664(v31, v32);
          sub_1DB042664(v36, v38);

          if (v24 != v25) {
            continue;
          }
          goto LABEL_24;
        case 2uLL:
          uint64_t v40 = *(void *)(v36 + 16);
          uint64_t v39 = *(void *)(v36 + 24);
          uint64_t v26 = v39 - v40;
          if (!__OFSUB__(v39, v40)) {
            goto LABEL_16;
          }
          __break(1u);
LABEL_24:
          swift_bridgeObjectRelease();
          break;
        case 3uLL:
          goto LABEL_16;
        default:
          uint64_t v26 = BYTE6(v38);
          goto LABEL_16;
      }
      break;
    }
  }
  long long v41 = v64;
  unint64_t v42 = v59;
  sub_1DB0C5188();
  sub_1DB04239C(v41, *((unint64_t *)&v41 + 1));
  uint64_t v43 = sub_1DB05C118(v58, v42);
  unint64_t v45 = v44;
  uint64_t v46 = v60;
  sub_1DB0C5058();
  uint64_t v47 = sub_1DB0C5048();
  unint64_t v49 = v48;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v65);
  if (v49 >> 60 == 15)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v62 = v47;
  unint64_t v63 = v49;
  sub_1DB067A4C(v47, v49);
  sub_1DB04239C(v43, v45);
  sub_1DB05DEE8(v43, v45);
  sub_1DB042664(v43, v45);
  sub_1DB069BB4(v47, v49);
  uint64_t v50 = v62;
  unint64_t v51 = v63;
  sub_1DB0C4F38();
  sub_1DB07C914();
  uint64_t v52 = sub_1DB0C4D68();
  uint64_t v53 = v57[1];
  uint64_t v54 = sub_1DB0632DC(v41, *((unint64_t *)&v41 + 1), 1, v50, v51, v52, 0);
  if (v53)
  {
    sub_1DB042664(v50, v51);
    sub_1DB042664(v41, *((unint64_t *)&v41 + 1));
    sub_1DB042664(v43, v45);
    return sub_1DB042664(v41, *((unint64_t *)&v41 + 1));
  }
  if (!*(void *)(v54 + 16))
  {
LABEL_36:
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1DB07BFF8);
  }
  id v56 = *(id *)(v54 + 32);
  swift_bridgeObjectRelease();
  sub_1DB042664(v50, v51);
  sub_1DB042664(v41, *((unint64_t *)&v41 + 1));
  sub_1DB042664(v43, v45);
  sub_1DB042664(v41, *((unint64_t *)&v41 + 1));
  return (uint64_t)v56;
}

uint64_t sub_1DB07C018(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t *__return_ptr, void, void))
{
  int64_t v4 = a3 >> 1;
  uint64_t v5 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_13;
  }
  uint64_t v6 = result;
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_1DB0C5308();
    if (v5 < 0)
    {
LABEL_14:
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    for (uint64_t i = (void *)(v6 + 16 * a2 + 8); ; i += 2)
    {
      uint64_t v10 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        break;
      }
      if (a2 + v8 >= v4 || v8 >= v5) {
        goto LABEL_12;
      }
      a4(&v12, *(i - 1), *i);
      sub_1DB0C52E8();
      sub_1DB0C5318();
      sub_1DB0C5328();
      uint64_t result = sub_1DB0C52F8();
      ++v8;
      if (v10 == v5) {
        return v13;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1DB07C13C(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id v11 = sub_1DB07A220(a5, (uint64_t)a5);
  unsigned __int8 v12 = objc_msgSend(a5, sel_isEqual_, v11);

  if (v12) {
    goto LABEL_3;
  }
  id v13 = a4;
  id v14 = a5;
  a6 = (uint64_t)(id)a6;
  id v15 = sub_1DB07A220((void *)a6, a6);
  unsigned int v16 = objc_msgSend((id)a6, sel_isEqual_, v15);

  if (v16)
  {
LABEL_3:
    sub_1DB07CAC8();
    swift_allocError();
    *id v17 = 6;
    swift_willThrow();
  }
  else
  {
    id v19 = sub_1DB093C64(v13, a3);
    id v20 = sub_1DB093D80(a1, (uint64_t)v19);

    id v21 = sub_1DB072A88((uint64_t)v20, v14);
    LODWORD(v19) = objc_msgSend((id)a6, sel_isEqual_, v21);
    id v22 = sub_1DB072A88(a2, v14);
    id v23 = sub_1DB07A220(v21, (uint64_t)v22);

    unsigned int v24 = objc_msgSend((id)a6, sel_isEqual_, v23);
    if (v19 == v24)
    {
      sub_1DB07CAC8();
      swift_allocError();
      *uint64_t v25 = 6;
      swift_willThrow();
    }
    else
    {
      LOBYTE(a6) = v24;
    }
  }
  return a6 & 1;
}

uint64_t sub_1DB07C31C(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, id a7)
{
  id v11 = *(void **)(a2 + 24);
  uint64_t v10 = *(void **)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v57 = *(void *)(a2 + 64);
  uint64_t v47 = *(void *)(a2 + 72);
  uint64_t v54 = *(void *)(a2 + 80);
  id v14 = sub_1DB072A88(*(void *)(a2 + 48), a7);
  id v15 = sub_1DB072A88((uint64_t)v10, v11);
  id v53 = sub_1DB07A33C(v14, (uint64_t)v15);

  id v16 = sub_1DB072A88(v13, a7);
  uint64_t v46 = v11;
  id v17 = sub_1DB07A33C(v11, (uint64_t)a4);
  id v18 = sub_1DB072A88(v12, v17);

  id v52 = sub_1DB07A33C(v16, (uint64_t)v18);
  id v19 = sub_1DB093D80(v10, v12);
  id v51 = *(id *)a2;
  id v20 = sub_1DB072A88(v57, *(id *)a2);
  id v21 = sub_1DB072A88((uint64_t)v19, a6);
  id v49 = sub_1DB07A220(v20, (uint64_t)v21);

  id v45 = *(id *)(a2 + 8);
  id v22 = sub_1DB072A88(v57, v45);
  id v23 = sub_1DB072A88(v47, a7);
  id v24 = sub_1DB07A220(v22, (uint64_t)v23);

  id v25 = sub_1DB07A220(a3, (uint64_t)v11);
  unint64_t v48 = *(void **)(a2 + 16);
  id v26 = sub_1DB072A88((uint64_t)v48, a5);
  id v27 = sub_1DB07A220(v25, (uint64_t)v26);

  id v28 = sub_1DB07A220(v27, (uint64_t)a1);
  id v29 = sub_1DB072A88((uint64_t)v19, v28);

  id v30 = sub_1DB07A220(v24, (uint64_t)v29);
  id v31 = sub_1DB072A88(v57, v45);
  unsigned __int8 v32 = a6;
  id v33 = sub_1DB072A88(v54, a6);
  id v34 = sub_1DB07A220(v31, (uint64_t)v33);

  id v35 = v53;
  id v58 = v19;
  id v36 = sub_1DB072A88((uint64_t)v19, a1);
  id v37 = sub_1DB07A220(v34, (uint64_t)v36);

  unint64_t v38 = v52;
  uint64_t v39 = v49;
  uint64_t v40 = (void *)sub_1DB076138(a6, a7, a3, a4, a5, v51, v45, v48, a1, v46, v53, v52, v49, v30, v37);
  if (v56)
  {
    long long v41 = v49;
    uint64_t v39 = v58;
    unint64_t v42 = v30;
  }
  else
  {
    uint64_t v43 = v40;
    unsigned __int8 v32 = objc_msgSend(v40, sel_isEqual_, v58);

    id v35 = v52;
    unint64_t v38 = v58;
    long long v41 = v30;
    unint64_t v42 = v37;
    id v37 = v43;
  }

  return v32 & 1;
}

uint64_t _s16CryptoKitPrivate18ATHMKeyCommitmentsC6verify03keyE4DataSb10Foundation0H0V_tFZ_0(uint64_t a1, unint64_t a2)
{
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v23);
  id v5 = objc_msgSend(v4, sel_serializedPublicKey_, 1);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_1DB0C4A08();
    unint64_t v9 = v8;

    uint64_t v10 = sub_1DB05C118(0xD000000000000029, 0x80000001DB0CBDE0);
    unint64_t v12 = v11;
    sub_1DB073FA8(v7, v9, v10, v11);
    id v14 = v13;
    sub_1DB042664(v10, v12);
    sub_1DB042664(v7, v9);
    sub_1DB08A55C(a1, a2, v18);
    char v15 = sub_1DB0779A8(v4, v14);

    id v23 = (id)v18[0];
    sub_1DB07C96C(&v23);
    id v22 = (id)v18[1];
    sub_1DB07C96C(&v22);
    id v21 = (id)v18[2];
    sub_1DB07C96C(&v21);
    uint64_t v17 = v18[4];
    id v20 = (id)v18[3];
    sub_1DB07C96C(&v20);
    uint64_t v19 = v17;
    sub_1DB0697EC((uint64_t)&v19);
    return v15 & 1;
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ATHMKeyCommitments()
{
  return self;
}

uint64_t type metadata accessor for ATHMClient()
{
  return self;
}

uint64_t sub_1DB07C8E8(uint64_t a1)
{
  return a1;
}

unint64_t sub_1DB07C914()
{
  unint64_t result = qword_1EBE7DE68;
  if (!qword_1EBE7DE68)
  {
    sub_1DB0C4F38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE7DE68);
  }
  return result;
}

id *sub_1DB07C96C(id *a1)
{
  return a1;
}

uint64_t sub_1DB07C998(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  id v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  unint64_t v8 = *(void **)(a1 + 56);
  unint64_t v9 = *(void **)(a1 + 64);
  uint64_t v10 = *(void **)(a1 + 72);
  id v23 = *(void **)(a1 + 80);
  id v11 = *(id *)a1;
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  id v20 = v10;
  id v21 = v23;
  return a1;
}

uint64_t sub_1DB07CA30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  id v12 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 16);
  id v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  unint64_t v8 = *(void **)(a1 + 56);
  uint64_t v10 = *(void **)(a1 + 64);
  unint64_t v9 = *(void **)(a1 + 72);

  return a1;
}

unint64_t sub_1DB07CAC8()
{
  unint64_t result = qword_1EA8FE5C0;
  if (!qword_1EA8FE5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE5C0);
  }
  return result;
}

uint64_t type metadata accessor for ATHMServer()
{
  return self;
}

uint64_t method lookup function for ATHMClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ATHMClient);
}

uint64_t dispatch thunk of ATHMClient.__allocating_init(keyCommitmentsData:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ATHMClient.request()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ATHMClient.finalize(responseData:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t method lookup function for ATHMServer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ATHMServer);
}

uint64_t dispatch thunk of ATHMServer.exportKeyCommitments()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ATHMServer.respond(requestData:b:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ATHMServer.readBit(presentationData:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t sub_1DB07CCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE5D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1DB07CD54()
{
  unint64_t result = qword_1EA8FE5D8;
  if (!qword_1EA8FE5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE5D8);
  }
  return result;
}

unint64_t sub_1DB07CDA8@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_1DB07B05C(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24));
  *a3 = result;
  return result;
}

unint64_t sub_1DB07CDD4()
{
  unint64_t result = qword_1EA8FE5E8;
  if (!qword_1EA8FE5E8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FE5E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE5E8);
  }
  return result;
}

uint64_t sub_1DB07CE30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1DB07CE9C()
{
  return sub_1DB07CFEC(&OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t sub_1DB07CEA8(uint64_t a1, uint64_t a2)
{
  return sub_1DB07D050(a1, a2, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t (*sub_1DB07CEB4())()
{
  return j__swift_endAccess;
}

uint64_t sub_1DB07CF14@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  *a3 = *v4;
  a3[1] = v6;
  return sub_1DB04239C(v5, v6);
}

uint64_t sub_1DB07CF68(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(*a2 + *a5);
  swift_beginAccess();
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  *uint64_t v7 = v5;
  v7[1] = v6;
  sub_1DB04239C(v5, v6);
  return sub_1DB042664(v8, v9);
}

uint64_t sub_1DB07CFE0()
{
  return sub_1DB07CFEC(&OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t sub_1DB07CFEC(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  sub_1DB04239C(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1DB07D044(uint64_t a1, uint64_t a2)
{
  return sub_1DB07D050(a1, a2, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t sub_1DB07D050(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  *unint64_t v6 = a1;
  v6[1] = a2;
  return sub_1DB042664(v7, v8);
}

uint64_t (*sub_1DB07D0AC())()
{
  return j_j__swift_endAccess;
}

uint64_t AlishaSPAKE2Prover.__allocating_init(password:salt:authenticatedData:keyDerivationCost:)(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  id v9 = objc_allocWithZone(v4);
  return AlishaSPAKE2Prover.init(password:salt:authenticatedData:keyDerivationCost:)(a1, a2, a3, a4);
}

uint64_t AlishaSPAKE2Prover.init(password:salt:authenticatedData:keyDerivationCost:)(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v63 = a3;
  id v64 = a1;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = sub_1DB0C5088();
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = ccspake_cp_256();
  if (!v13)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v14 = v13;
  id v15 = v4;
  uint64_t v16 = ccspake_sizeof_w();
  if (v16 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v5 = v16;
  sub_1DB0C5058();
  uint64_t v17 = sub_1DB0C5078();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  id v18 = v64;
  id v19 = objc_msgSend(v64, sel_dataUsingEncoding_, v17);
  if (!v19) {
LABEL_36:
  }
    __break(1u);
  id v20 = v19;
  uint64_t v21 = sub_1DB0C4A08();
  unint64_t v23 = v22;

  uint64_t v61 = v21;
  unint64_t v62 = v23;
  id v24 = (void *)sub_1DB0C49E8();
  a4 = a2;
  id v25 = (void *)_s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0(v24, a2, 2 * v5);

  if (!v25)
  {
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3C8);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1DB0C77B0;
    *(void *)(v33 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v33 + 32) = 0xD000000000000050;
    *(void *)(v33 + 40) = 0x80000001DB0CBE90;
    sub_1DB0C5458();

    swift_bridgeObjectRelease();
    sub_1DB042664(v61, v62);
    goto LABEL_25;
  }
  unint64_t v6 = v25;
  if (objc_msgSend(v6, sel_length) != (id)(2 * v5))
  {

    goto LABEL_10;
  }
  id v26 = objc_msgSend(v6, sel_subdataWithRange_, 0, v5);
  a2 = (uint64_t *)sub_1DB0C4A08();
  id v12 = v27;

  id v28 = objc_msgSend(v6, sel_subdataWithRange_, v5, v5);
  uint64_t v9 = sub_1DB0C4A08();
  unint64_t v10 = v29;

  uint64_t v30 = SPAKE2CtxSize();
  if (v30 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  size_t v31 = v30;
  id v58 = v6;
  uint64_t v59 = v9;
  if (v30)
  {
    uint64_t v32 = sub_1DB0C51B8();
    *(void *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), v31);
  }
  else
  {
    uint64_t v32 = MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = (uint64_t)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData];
  *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData] = v32;
  id v34 = v63;
  uint64_t v35 = sub_1DB0C4A08();
  uint64_t v9 = v36;
  id v57 = v34;

  unint64_t v63 = sub_1DB07ECC4(v35, v9);
  sub_1DB042664(v35, v9);
  swift_beginAccess();
  unint64_t v6 = *(void **)v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v60 = (uint64_t *)v5;
  *(void *)uint64_t v5 = v6;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v38 = ccspake_mac_hkdf_cmac_aes128_sha256();
    if (v38) {
      goto LABEL_14;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_30:
  unint64_t v6 = sub_1DB05268C((uint64_t)v6);
  *id v60 = (uint64_t)v6;
  uint64_t v38 = ccspake_mac_hkdf_cmac_aes128_sha256();
  if (!v38) {
    goto LABEL_31;
  }
LABEL_14:
  uint64_t v39 = (void *)v38;
  int v66 = 0;
  uint64_t result = ccrng();
  if (result)
  {
    if (!v66)
    {
      v54[0] = a4;
      v54[1] = v39;
      uint64_t v55 = v6 + 4;
      uint64_t v56 = v15;
      v54[3] = *((id *)v63 + 2);
      unint64_t v41 = v10;
      v54[2] = (id)SPAKE2Alishaz0Size();
      sub_1DB04239C((uint64_t)a2, (unint64_t)v12);
      sub_1DB07ECC4((uint64_t)a2, (unint64_t)v12);
      sub_1DB042664((uint64_t)a2, (unint64_t)v12);
      uint64_t v42 = v59;
      sub_1DB04239C(v59, v10);
      sub_1DB07ECC4(v42, v10);
      sub_1DB042664(v42, v10);
      uint64_t v55 = (void *)v14;
      int v43 = ccspake_prover_init();
      uint64_t v9 = (uint64_t)v60;
      *id v60 = (uint64_t)v6;
      swift_endAccess();
      swift_release();
      swift_release();
      if (v43)
      {

        sub_1DB042664(v61, v62);
        id v44 = v58;

        sub_1DB042664((uint64_t)a2, (unint64_t)v12);
        sub_1DB042664(v42, v41);
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      a4 = (uint64_t *)v41;
      uint64_t v5 = (uint64_t)v12;
      uint64_t v45 = ccspake_sizeof_point();
      id v15 = v56;
      if ((v45 & 0x8000000000000000) == 0)
      {
        size_t v46 = v45;
        uint64_t v14 = (uint64_t)a2;
        if (v45)
        {
          unint64_t v6 = (void *)sub_1DB0C51B8();
          unsigned char v6[2] = v46;
          bzero(v6 + 4, v46);
        }
        else
        {
          unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
        }
        a2 = v60;
        swift_beginAccess();
        uint64_t v9 = *a2;
        char v47 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v9;
        if (v47) {
          goto LABEL_23;
        }
        goto LABEL_34;
      }
LABEL_33:
      __break(1u);
LABEL_34:
      uint64_t v9 = (uint64_t)sub_1DB05268C(v9);
      *a2 = v9;
LABEL_23:
      ccspake_sizeof_point();
      int v48 = ccspake_kex_generate();
      *a2 = v9;
      swift_endAccess();
      sub_1DB042664(v61, v62);
      id v49 = v58;

      *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_X] = v6;
      uint64_t v50 = (uint64_t *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self];
      *uint64_t v50 = v14;
      v50[1] = v5;
      id v51 = &v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self];
      *(void *)id v51 = v59;
      *((void *)v51 + 1) = a4;
      *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_aad] = v63;
      if (!v48)
      {

        id v53 = (objc_class *)type metadata accessor for AlishaSPAKE2Prover();
        v65.receiver = v15;
        v65.super_class = v53;
        id v52 = objc_msgSendSuper2(&v65, sel_init);

        return (uint64_t)v52;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1DB042664(*(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self], *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self + 8]);
      sub_1DB042664(*(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self], *(void *)&v15[OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self + 8]);

LABEL_25:
      type metadata accessor for AlishaSPAKE2Prover();
      swift_deallocPartialClassInstance();
      return 0;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

id sub_1DB07D8E4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_X);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = v1 + 32;
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
  return objc_msgSend(v4, sel_initWithBytes_length_, v3, v2);
}

uint64_t sub_1DB07D9A0(void *a1, void *a2)
{
  id v5 = objc_msgSend(a1, sel_length);
  uint64_t result = ccspake_cp_256();
  if (result)
  {
    if (v5 != (id)ccspake_sizeof_point() || objc_msgSend(a2, sel_length) != (id)16) {
      return 0;
    }
    uint64_t v7 = (void *)sub_1DB0C51B8();
    unsigned char v7[2] = 16;
    v7[4] = 0;
    v7[5] = 0;
    unint64_t v8 = (void *)sub_1DB0C51B8();
    v8[2] = 16;
    v8[4] = 0;
    void v8[5] = 0;
    uint64_t v9 = (char **)(v2 + OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_spakeCtxData);
    swift_beginAccess();
    unint64_t v10 = *v9;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_1DB05268C((uint64_t)v10);
      *uint64_t v9 = v10;
    }
    objc_msgSend(a1, sel_length);
    uint64_t v12 = sub_1DB0C4A08();
    unint64_t v14 = v13;
    sub_1DB07ECC4(v12, v13);
    sub_1DB042664(v12, v14);
    LODWORD(v14) = ccspake_kex_process();
    *uint64_t v9 = v10;
    swift_endAccess();
    swift_release();
    if (v14) {
      goto LABEL_13;
    }
    swift_beginAccess();
    id v15 = *v9;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v15;
    if ((v16 & 1) == 0)
    {
      id v15 = sub_1DB05268C((uint64_t)v15);
      *uint64_t v9 = v15;
    }
    int v17 = ccspake_mac_compute();
    *uint64_t v9 = v15;
    swift_endAccess();
    if (v17) {
      goto LABEL_13;
    }
    swift_beginAccess();
    id v18 = *v9;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v18;
    if ((v19 & 1) == 0)
    {
      id v18 = sub_1DB05268C((uint64_t)v18);
      *uint64_t v9 = v18;
    }
    objc_msgSend(a2, sel_length);
    uint64_t v20 = sub_1DB0C4A08();
    unint64_t v22 = v21;
    sub_1DB07ECC4(v20, v21);
    sub_1DB042664(v20, v22);
    int session_key = ccspake_mac_verify_and_get_session_key();
    *uint64_t v9 = v18;
    swift_endAccess();
    swift_release();
    if (session_key)
    {
LABEL_13:
      id v24 = 0;
    }
    else
    {
      id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v7 + 4, v7[2]);
      id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v8 + 4, v8[2]);
      id v27 = objc_allocWithZone((Class)type metadata accessor for AlishaSPAKE2ProverConfirmed());
      id v24 = sub_1DB07DF64(v25, v26);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id AlishaSPAKE2Prover.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AlishaSPAKE2Prover.init()()
{
}

id AlishaSPAKE2Prover.__deallocating_deinit()
{
  return sub_1DB07E274(type metadata accessor for AlishaSPAKE2Prover);
}

id AlishaSPAKE2ProverConfirmed.alishaKey.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey);
}

id AlishaSPAKE2ProverConfirmed.KEnc.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KEnc);
}

id AlishaSPAKE2ProverConfirmed.KMac.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KMac);
}

id AlishaSPAKE2ProverConfirmed.KRMac.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KRMac);
}

id AlishaSPAKE2ProverConfirmed.SymmetricLTS.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_SymmetricLTS);
}

id AlishaSPAKE2ProverConfirmed.Kble_intro.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_intro);
}

id AlishaSPAKE2ProverConfirmed.Kble_oob_master.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_oob_master);
}

id AlishaSPAKE2ProverConfirmed.M2.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2);
}

void *sub_1DB07DF64(void *a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey;
  *(void *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_alishaKey] = a1;
  uint64_t v6 = OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2;
  *(void *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_M2] = a2;
  uint64_t v7 = v2;
  id v8 = a1;
  id v9 = a2;
  uint64_t result = (void *)sub_1DB07F134(v8);
  if (!result)
  {

    unint64_t v21 = *(void **)&v2[v6];
    type metadata accessor for AlishaSPAKE2ProverConfirmed();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v11 = result;
  if (!result[2])
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v12 = result[4];
  uint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v12 + 32, *(void *)(v12 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KEnc] = result;
  if (v11[2] < 2uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v13 = v11[5];
  uint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v13 + 32, *(void *)(v13 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KMac] = result;
  if (v11[2] < 3uLL)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v14 = v11[6];
  uint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v14 + 32, *(void *)(v14 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_KRMac] = result;
  if (v11[2] < 4uLL)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v15 = v11[7];
  uint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v15 + 32, *(void *)(v15 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_SymmetricLTS] = result;
  if (v11[2] < 5uLL)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v16 = v11[8];
  uint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v16 + 32, *(void *)(v16 + 16));
  *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_intro] = result;
  if (v11[2] >= 6uLL)
  {
    uint64_t v17 = v11[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRelease();
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v17 + 32, v18);
    swift_bridgeObjectRelease();
    *(void *)&v7[OBJC_IVAR____TtC16CryptoKitPrivate27AlishaSPAKE2ProverConfirmed_Kble_oob_master] = v19;

    v22.receiver = v7;
    v22.super_class = (Class)type metadata accessor for AlishaSPAKE2ProverConfirmed();
    id v20 = objc_msgSendSuper2(&v22, sel_init);

    return v20;
  }
LABEL_16:
  __break(1u);
  return result;
}

void AlishaSPAKE2ProverConfirmed.init()()
{
}

id AlishaSPAKE2ProverConfirmed.__deallocating_deinit()
{
  return sub_1DB07E274(type metadata accessor for AlishaSPAKE2ProverConfirmed);
}

id sub_1DB07E274(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

char *sub_1DB07E358(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EBE7E138);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DB07E444(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE678);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1DB07E548(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE668);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE670);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DB07E66C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1DB07E690(a1, a2, a3, a4, &qword_1EA8FE0F0);
}

char *sub_1DB07E678(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1DB07E690(a1, a2, a3, a4, &qword_1EA8FE1C0);
}

char *sub_1DB07E684(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1DB07E690(a1, a2, a3, a4, &qword_1EA8FE128);
}

char *sub_1DB07E690(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1DB07E788(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EA8FE018);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DB07E88C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE660);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DB07E9A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1DB07EAA4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0D8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0E0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DB07EBC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1DB07ECC4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1DB0C4A38();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(qword_1EBE7E138);
          uint64_t v8 = (void *)swift_allocObject();
          size_t v12 = _swift_stdlib_malloc_size(v8);
          v8[2] = v9;
          void v8[3] = 2 * v12 - 64;
        }
        sub_1DB04239C(a1, a2);
        uint64_t v13 = sub_1DB0C4978();
        sub_1DB042664(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1DB07EE70);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t type metadata accessor for AlishaSPAKE2Prover()
{
  return self;
}

uint64_t type metadata accessor for AlishaSPAKE2ProverConfirmed()
{
  return self;
}

uint64_t sub_1DB07EEC8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1DB07CF14(a1, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self, a2);
}

uint64_t sub_1DB07EEE8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1DB07CF68(a1, a2, a3, a4, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z0_self);
}

uint64_t sub_1DB07EF08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1DB07CF14(a1, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self, a2);
}

uint64_t sub_1DB07EF28(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1DB07CF68(a1, a2, a3, a4, &OBJC_IVAR____TtC16CryptoKitPrivate18AlishaSPAKE2Prover_z1_self);
}

uint64_t method lookup function for AlishaSPAKE2Prover(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AlishaSPAKE2Prover);
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z0_self.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.z1_self.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.__allocating_init(password:salt:authenticatedData:keyDerivationCost:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.getX()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AlishaSPAKE2Prover.processResponse(Y:M1:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t method lookup function for AlishaSPAKE2ProverConfirmed(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AlishaSPAKE2ProverConfirmed);
}

uint64_t sub_1DB07F134(void *a1)
{
  uint64_t v2 = sub_1DB0C5088();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DB0C5068();
  uint64_t v6 = sub_1DB0C5048();
  unint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8 >> 60 == 15) {
    goto LABEL_84;
  }
  sub_1DB07ECC4(v6, v8);
  sub_1DB069BB4(v6, v8);
  uint64_t v10 = sub_1DB0C51B8();
  *(void *)(v10 + 16) = 96;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  sub_1DB0C5188();
  ccsha256_di();
  objc_msgSend(a1, sel_length);
  objc_msgSend(a1, sel_bytes);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = (uint64_t)sub_1DB07E358(0, *(void *)(v10 + 16), 0, (char *)v10);
  }
  int v11 = cchkdf();
  uint64_t result = swift_release();
  if (v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = *(void *)(v10 + 16);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        break;
      }
      BOOL v17 = __OFADD__(v15, 16);
      v15 += 16;
      if (v17) {
        uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      ++v14;
      if (v15 >= v13) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v16 = 0;
LABEL_14:
    uint64_t v50 = MEMORY[0x1E4FBC860];
    uint64_t result = (uint64_t)sub_1DB04C380(0, v16 & ~(v16 >> 63), 0);
    if (v16 < 0) {
      goto LABEL_83;
    }
    uint64_t v12 = v50;
    uint64_t v48 = v13;
    if (!v16)
    {
      if (!v13)
      {
LABEL_72:
        swift_bridgeObjectRelease();
        return v12;
      }
      unint64_t v18 = 0;
LABEL_45:
      uint64_t v32 = v18 + 16;
      uint64_t v33 = -(uint64_t)v18;
      unint64_t v34 = v18;
      while (1)
      {
        uint64_t v35 = v13 >= v32 ? v32 : v13;
        uint64_t v36 = v34 + 16;
        if (__OFADD__(v34, 16)) {
          goto LABEL_79;
        }
        if (v13 >= v36) {
          uint64_t v37 = v34 + 16;
        }
        else {
          uint64_t v37 = v13;
        }
        if (v37 < (uint64_t)v34) {
          goto LABEL_80;
        }
        if ((v18 & 0x8000000000000000) != 0) {
          goto LABEL_81;
        }
        uint64_t v38 = *(void *)(v10 + 16);
        if (v38 < v34 || v38 < v37) {
          goto LABEL_82;
        }
        uint64_t v49 = v12;
        sub_1DB0C53E8();
        sub_1DB0C5188();
        swift_unknownObjectRetain_n();
        uint64_t v40 = swift_dynamicCastClass();
        if (!v40)
        {
          swift_bridgeObjectRelease();
          uint64_t v40 = MEMORY[0x1E4FBC860];
        }
        int64_t v41 = v35 + v33;
        uint64_t v42 = *(void *)(v40 + 16);
        swift_release();
        if (v41 == v42)
        {
          int v43 = (void *)swift_dynamicCastClass();
          uint64_t v12 = v49;
          if (!v43)
          {
            swift_bridgeObjectRelease();
            int v43 = (void *)MEMORY[0x1E4FBC860];
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          int v43 = (void *)MEMORY[0x1E4FBC860];
          uint64_t v12 = v49;
          if (v34 != v37)
          {
            if (v41 >= 1)
            {
              __swift_instantiateConcreteTypeFromMangledName(qword_1EBE7E138);
              int v43 = (void *)swift_allocObject();
              size_t v46 = _swift_stdlib_malloc_size(v43);
              v43[2] = v41;
              v43[3] = 2 * v46 - 64;
            }
            memcpy(v43 + 4, (const void *)(v10 + v34 + 32), v41);
          }
        }
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v50 = v12;
        unint64_t v45 = *(void *)(v12 + 16);
        unint64_t v44 = *(void *)(v12 + 24);
        if (v45 >= v44 >> 1)
        {
          uint64_t result = (uint64_t)sub_1DB04C380((void *)(v44 > 1), v45 + 1, 1);
          uint64_t v12 = v50;
        }
        *(void *)(v12 + 16) = v45 + 1;
        *(void *)(v12 + 8 * v45 + 32) = v43;
        v34 += 16;
        v32 += 16;
        v33 -= 16;
        uint64_t v13 = v48;
        if (v36 >= v48) {
          goto LABEL_72;
        }
      }
    }
    unint64_t v18 = 0;
    uint64_t v19 = 16;
    uint64_t v20 = 32;
    while (1)
    {
      uint64_t v21 = v13 >= v19 ? v19 : v13;
      if (v18 >= v13) {
        break;
      }
      if (v18 == 0x7FFFFFFFFFFFFFF0) {
        goto LABEL_76;
      }
      if (v13 >= (uint64_t)(v18 + 16)) {
        uint64_t v22 = v18 + 16;
      }
      else {
        uint64_t v22 = v13;
      }
      if (v22 < (uint64_t)v18) {
        goto LABEL_77;
      }
      unint64_t v23 = *(void *)(v10 + 16);
      if (v23 < v18 || (uint64_t)v23 < v22) {
        goto LABEL_78;
      }
      uint64_t v49 = v12;
      sub_1DB0C53E8();
      sub_1DB0C5188();
      swift_unknownObjectRetain_n();
      uint64_t v24 = swift_dynamicCastClass();
      if (!v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = MEMORY[0x1E4FBC860];
      }
      uint64_t v25 = v21 + v20;
      uint64_t v26 = *(void *)(v24 + 16);
      swift_release();
      uint64_t v27 = v25 - 32;
      if (v25 - 32 == v26)
      {
        id v28 = (void *)swift_dynamicCastClass();
        uint64_t v12 = v49;
        if (!v28)
        {
          swift_bridgeObjectRelease();
          id v28 = (void *)MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        id v28 = (void *)MEMORY[0x1E4FBC860];
        uint64_t v12 = v49;
        if (v18 != v22)
        {
          if (v27 >= 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(qword_1EBE7E138);
            id v28 = (void *)swift_allocObject();
            size_t v31 = _swift_stdlib_malloc_size(v28);
            id v28[2] = v27;
            v28[3] = 2 * v31 - 64;
          }
          memcpy(v28 + 4, (const void *)(v10 + v18 + 32), v25 - 32);
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v50 = v12;
      unint64_t v30 = *(void *)(v12 + 16);
      unint64_t v29 = *(void *)(v12 + 24);
      if (v30 >= v29 >> 1)
      {
        uint64_t result = (uint64_t)sub_1DB04C380((void *)(v29 > 1), v30 + 1, 1);
        uint64_t v12 = v50;
      }
      *(void *)(v12 + 16) = v30 + 1;
      *(void *)(v12 + 8 * v30 + 32) = v28;
      v19 += 16;
      v20 -= 16;
      v18 += 16;
      --v16;
      uint64_t v13 = v48;
      if (!v16)
      {
        if ((uint64_t)v18 < v48) {
          goto LABEL_45;
        }
        goto LABEL_72;
      }
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_1DB07F724(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  BOOL v2 = __OFSUB__(result, 1);
  if (result >= 1)
  {
    BOOL v2 = __OFSUB__(a2, 1);
    if (a2 >= 1) {
      return (a2 - 1) / (unint64_t)result + 1;
    }
  }
  if ((a2 & result) < 0 == v2)
  {
    if (result != -1 || a2 != 0x8000000000000000) {
      return a2 / result;
    }
    goto LABEL_13;
  }
  uint64_t v3 = (a2 + 1) / result;
  uint64_t result = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

BOOL static PIR.PirAlgorithm.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PIR.PirAlgorithm.hash(into:)()
{
  return sub_1DB0C5488();
}

uint64_t PIR.PirAlgorithm.hashValue.getter()
{
  return sub_1DB0C54A8();
}

void PIR.PirParams.encryptionParams.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

void PIR.PirParams.algorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

uint64_t PIR.PirParams.entriesCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PIR.PirParams.entrySize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PIR.PirParams.dimensions.getter()
{
  return sub_1DB0C5188();
}

uint64_t PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10)
{
  char v15 = *a1;
  char v30 = a1[1];
  char v28 = *a2;
  uint64_t result = cche_encryption_params_plaintext_modulus();
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v17 = result;
  uint64_t result = cche_encryption_params_polynomial_degree();
  if ((unint64_t)(a4 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v18 = (__clz(v17) ^ 0x3F) * (unint64_t)result;
  uint64_t v19 = 8 * a4;
  if (v18 < 8 * a4)
  {
    uint64_t v20 = 1;
    goto LABEL_7;
  }
  if (!v19)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  uint64_t v20 = v18 / v19;
LABEL_7:
  uint64_t result = sub_1DB07F724(v20, a3);
  uint64_t v21 = *(void *)(a5 + 16);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)(a5 + 32);
    uint64_t v23 = 1;
    do
    {
      uint64_t v24 = *v22++;
      uint64_t v25 = v23 * v24;
      if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63)
      {
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v23 = v25;
      --v21;
    }
    while (v21);
    if (v25 >= result) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  if (result > 1)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v27 = 5;
    *(unsigned char *)(v27 + 4) = 1;
    return swift_willThrow();
  }
LABEL_14:
  uint64_t v26 = a7;
  if (a8) {
    uint64_t v26 = 1;
  }
  if (!v26) {
    goto LABEL_26;
  }
  if (a6 == 0x8000000000000000 && v26 == -1) {
    goto LABEL_27;
  }
  if (a6 % v26) {
    goto LABEL_20;
  }
  *(unsigned char *)a9 = v15;
  *(unsigned char *)(a9 + 1) = v30;
  *(unsigned char *)(a9 + 2) = v28;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = v20;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  *(unsigned char *)(a9 + 57) = a10;
  return result;
}

unint64_t sub_1DB07FA38()
{
  unint64_t result = qword_1EA8FE680[0];
  if (!qword_1EA8FE680[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FE680);
  }
  return result;
}

unsigned char *_s12PirAlgorithmOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB07FB58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.PirAlgorithm()
{
  return &type metadata for PIR.PirAlgorithm;
}

uint64_t _s9PirParamsVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s9PirParamsVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  sub_1DB0C5188();
  return a1;
}

uint64_t _s9PirParamsVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9PirParamsVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t _s9PirParamsVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s9PirParamsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.PirParams()
{
  return &type metadata for PIR.PirParams;
}

char *sub_1DB07FDC4(char *result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (!v3) {
    return (char *)v4;
  }
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = *(void *)(v2 + 8 * v6 + 32);
    if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
    {
      __break(1u);
      goto LABEL_20;
    }
    v7 *= v8;
    ++v6;
  }
  while (v3 != v6);
  uint64_t v16 = MEMORY[0x1E4FBC860];
  sub_1DB0C5188();
  __n128 result = sub_1DB04C3B0(0, v3, 0);
  uint64_t v9 = 0;
  uint64_t v4 = v16;
  while (1)
  {
    uint64_t v10 = *(void *)(v2 + 8 * v9 + 32);
    if (!v10) {
      break;
    }
    if (v7 == 0x8000000000000000 && v10 == -1) {
      goto LABEL_24;
    }
    v7 /= v10;
    if (!v7) {
      goto LABEL_21;
    }
    if (v5 == 0x8000000000000000 && v7 == -1) {
      goto LABEL_25;
    }
    uint64_t v11 = v5 / v7;
    uint64_t v12 = v5 / v7 * v7;
    if ((unsigned __int128)(v5 / v7 * (__int128)v7) >> 64 != v12 >> 63) {
      goto LABEL_22;
    }
    BOOL v13 = __OFSUB__(v5, v12);
    v5 %= v7;
    if (v13) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v16 + 16);
    unint64_t v14 = *(void *)(v16 + 24);
    if (v15 >= v14 >> 1) {
      __n128 result = sub_1DB04C3B0((char *)(v14 > 1), v15 + 1, 1);
    }
    ++v9;
    *(void *)(v16 + 16) = v15 + 1;
    *(void *)(v16 + 8 * v15 + 32) = v11;
    if (v3 == v9)
    {
      swift_bridgeObjectRelease();
      return (char *)v4;
    }
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1DB07FF44()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v4 <= 0x3F)
  {
    if (v2 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1DB0800E0(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(_DWORD *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = v5 + v4;
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v5 + v9;
  unint64_t v11 = (v5
       + v9
       + ((v6
         + ((v6
           + ((v6 + ((v4 + 8) & ~(unint64_t)v4)) & ~(unint64_t)v4)) & ~(unint64_t)v4)) & ~(unint64_t)v4)) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = v12 + v9;
  unint64_t v14 = ((v12 + v9 + v11) & ~v9) + v12;
  if ((v9 | (unint64_t)v4) > 7 || ((*(_DWORD *)(v8 + 80) | v4) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v30 = v17 + (((v9 | v4) & 0xF8 ^ 0x1F8) & ((v9 | v4) + 16));
    swift_retain();
  }
  else
  {
    unint64_t v18 = ~(unint64_t)v4;
    uint64_t v32 = ~v9;
    *a1 = *a2;
    uint64_t v19 = ((unint64_t)a1 + v4 + 8) & v18;
    uint64_t v20 = ((unint64_t)a2 + v4 + 8) & v18;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v34 = v7;
    v21(v19, v20, AssociatedTypeWitness);
    unint64_t v22 = (v6 + v19) & v18;
    unint64_t v23 = (v6 + v20) & v18;
    v21(v22, v23, AssociatedTypeWitness);
    unint64_t v24 = (v6 + v22) & v18;
    unint64_t v25 = (v6 + v23) & v18;
    v21(v24, v25, AssociatedTypeWitness);
    unint64_t v26 = (v6 + v24) & v18;
    unint64_t v27 = (v6 + v25) & v18;
    v21(v26, v27, AssociatedTypeWitness);
    unint64_t v28 = (v10 + v26) & v32;
    unint64_t v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v29(v28, (v10 + v27) & v32, v34);
    v29((v13 + v28) & v32, (v13 + ((v10 + v27) & v32)) & v32, v34);
    return a1;
  }
  return (uint64_t *)v30;
}

uint64_t sub_1DB080430(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (a1 + v6 + 8) & ~v6;
  v4(v7, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 + 56);
  uint64_t v9 = (v8 + v6 + v7) & ~v6;
  v4(v9, AssociatedTypeWitness);
  uint64_t v10 = (v8 + v6 + v9) & ~v6;
  v4(v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v6 + v10) & ~v6;
  v4(v11, AssociatedTypeWitness);
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v18 = v13 + 8;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (v11 + v8 + v14) & ~v14;
  v19(v15, v12);
  uint64_t v16 = (*(void *)(v18 + 56) + v14 + v15) & ~v14;
  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v16, v12);
}

void *sub_1DB080648(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 48);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v20 = v18 + 16;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v16) & ~v21;
  v19((v10 + v21 + v15) & ~v21, v22, v17);
  v19((*(void *)(v20 + 48) + v21 + ((v10 + v21 + v15) & ~v21)) & ~v21, (*(void *)(v20 + 48) + v21 + v22) & ~v21, v17);
  return a1;
}

void *sub_1DB08089C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24);
  uint64_t v20 = v18 + 24;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v16) & ~v21;
  v19((v10 + v21 + v15) & ~v21, v22, v17);
  v19((*(void *)(v20 + 40) + v21 + ((v10 + v21 + v15) & ~v21)) & ~v21, (*(void *)(v20 + 40) + v21 + v22) & ~v21, v17);
  return a1;
}

void *sub_1DB080AF0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 32);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  uint64_t v20 = v18 + 32;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v16) & ~v21;
  v19((v10 + v21 + v15) & ~v21, v22, v17);
  v19((*(void *)(v20 + 32) + v21 + ((v10 + v21 + v15) & ~v21)) & ~v21, (*(void *)(v20 + 32) + v21 + v22) & ~v21, v17);
  return a1;
}

void *sub_1DB080D44(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
  uint64_t v20 = v18 + 40;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v10 + v21 + v16) & ~v21;
  v19((v10 + v21 + v15) & ~v21, v22, v17);
  v19((*(void *)(v20 + 24) + v21 + ((v10 + v21 + v15) & ~v21)) & ~v21, (*(void *)(v20 + 24) + v21 + v22) & ~v21, v17);
  return a1;
}

uint64_t sub_1DB080F98(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = *(void *)(v5 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= v6) {
    unsigned int v13 = v6;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v11 + v10;
  uint64_t v15 = v11 + v12;
  if (a2 <= v13) {
    goto LABEL_24;
  }
  uint64_t v16 = ((*(void *)(*(void *)(v7 - 8) + 64)
        + v12
        + ((v15 + ((v14 + ((v14 + ((v14 + ((v10 + 8) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v12)
      + *(void *)(*(void *)(v7 - 8) + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((a2 - v13 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v19 < 2)
    {
LABEL_24:
      if (v13)
      {
        uint64_t v23 = ((unint64_t)a1 + v10 + 8) & ~v10;
        if (v6 >= v9)
        {
          unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
          return v27(v23, v6, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v24 = (v15 + ((v14 + ((v14 + ((v14 + v23) & ~v10)) & ~v10)) & ~v10)) & ~v12;
          unint64_t v25 = *(uint64_t (**)(uint64_t))(v8 + 48);
          return v25(v24);
        }
      }
      return 0;
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_24;
  }
LABEL_14:
  int v20 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v20 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v21 = v16;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void sub_1DB081338(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_checkMetadataState() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(v7 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  size_t v16 = ((*(void *)(v9 + 64)
        + v15
        + ((v14 + v15 + ((v14 + v13 + ((v14 + v13 + ((v14 + v13 + ((v13 + 8) & ~v13)) & ~v13)) & ~v13)) & ~v13)) & ~v15)) & ~v15)
      + *(void *)(v9 + 64);
  if (a3 <= v12)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v21 = ((a3 - v12 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v21))
    {
      int v17 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v21 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v22 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  uint64_t v20 = ~v13;
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1DB081748);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v23 = (unint64_t)&a1[v13 + 8] & v20;
        if (v8 >= v11)
        {
          unint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
          v26(v23, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v24 = (v14 + v15 + ((v14 + v13 + ((v14 + v13 + ((v14 + v13 + v23) & v20)) & v20)) & v20)) & ~v15;
          unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v10 + 56);
          v25(v24, a2);
        }
      }
      return;
  }
}

uint64_t _s6ClientVMa_0()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *sub_1DB081788(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_1DB04239C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)v4 + v9;
    unsigned int v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1DB0C4AB8();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (_DWORD *)((char *)v4 + v14);
    size_t v16 = (_DWORD *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v15 = *v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      *((_WORD *)v15 + 8) = *((_WORD *)v16 + 8);
      v15[5] = v16[5];
      *((unsigned char *)v15 + 24) = *((unsigned char *)v16 + 24);
      uint64_t v38 = v13;
      uint64_t v21 = *((void *)v16 + 4);
      unint64_t v22 = *((void *)v16 + 5);
      sub_1DB04239C(v21, v22);
      *((void *)v15 + 4) = v21;
      *((void *)v15 + 5) = v22;
      *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
      uint64_t v23 = *((void *)v16 + 7);
      unint64_t v24 = *((void *)v16 + 8);
      sub_1DB04239C(v23, v24);
      *((void *)v15 + 7) = v23;
      *((void *)v15 + 8) = v24;
      uint64_t v13 = v38;
      v38((char *)v15 + *(int *)(v17 + 48), (char *)v16 + *(int *)(v17 + 48), v12);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v25 = a3[8];
    unint64_t v26 = (uint64_t *)((char *)v4 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = *v27;
      unint64_t v32 = v27[1];
      sub_1DB04239C(*v27, v32);
      *unint64_t v26 = v31;
      v26[1] = v32;
      uint64_t v33 = v27[2];
      unint64_t v34 = v27[3];
      sub_1DB04239C(v33, v34);
      v26[2] = v33;
      _OWORD v26[3] = v34;
      uint64_t v35 = v27[4];
      unint64_t v36 = v27[5];
      sub_1DB04239C(v35, v36);
      v26[4] = v35;
      v26[5] = v36;
      v13((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(uint64_t a1)
{
  return sub_1DB0844A8(a1, (uint64_t *)&unk_1EA8FE738);
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(uint64_t a1)
{
  return sub_1DB0844A8(a1, (uint64_t *)&unk_1EA8FE748);
}

uint64_t sub_1DB081B34(uint64_t a1, int *a2)
{
  sub_1DB042664(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1DB0C4AB8();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_1DB042664(*(void *)(v6 + 32), *(void *)(v6 + 40));
    sub_1DB042664(*(void *)(v6 + 56), *(void *)(v6 + 64));
    v12(v6 + *(int *)(v7 + 48), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    sub_1DB042664(*(void *)v8, *(void *)(v8 + 8));
    sub_1DB042664(*(void *)(v8 + 16), *(void *)(v8 + 24));
    sub_1DB042664(*(void *)(v8 + 32), *(void *)(v8 + 40));
    uint64_t v11 = v8 + *(int *)(v9 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t sub_1DB081CE0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_1DB04239C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1DB0C4AB8();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (_DWORD *)(a1 + v13);
  uint64_t v15 = (_DWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *uint64_t v14 = *v15;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
    v14[5] = v15[5];
    *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
    unint64_t v36 = v12;
    uint64_t v19 = *((void *)v15 + 4);
    unint64_t v20 = *((void *)v15 + 5);
    sub_1DB04239C(v19, v20);
    *((void *)v14 + 4) = v19;
    *((void *)v14 + 5) = v20;
    *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
    uint64_t v21 = *((void *)v15 + 7);
    unint64_t v22 = *((void *)v15 + 8);
    sub_1DB04239C(v21, v22);
    *((void *)v14 + 7) = v21;
    *((void *)v14 + 8) = v22;
    uint64_t v12 = v36;
    v36((uint64_t)v14 + *(int *)(v16 + 48), (uint64_t)v15 + *(int *)(v16 + 48), v11);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v23 = a3[8];
  unint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v29 = *v25;
    unint64_t v30 = v25[1];
    sub_1DB04239C(*v25, v30);
    *unint64_t v24 = v29;
    v24[1] = v30;
    uint64_t v31 = v25[2];
    unint64_t v32 = v25[3];
    sub_1DB04239C(v31, v32);
    _OWORD v24[2] = v31;
    v24[3] = v32;
    uint64_t v33 = v25[4];
    unint64_t v34 = v25[5];
    sub_1DB04239C(v33, v34);
    v24[4] = v33;
    v24[5] = v34;
    v12((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v25 + *(int *)(v26 + 28), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t sub_1DB081FFC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_1DB04239C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_1DB042664(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_1DB0C4AB8();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v67 = v13;
  objc_super v65 = *(void (**)(uint64_t, uint64_t))(v66 + 24);
  v65(v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
      uint64_t v22 = *(void *)(v16 + 8);
      *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
      *(void *)(v15 + 8) = v22;
      *(unsigned char *)(v15 + 17) = *(unsigned char *)(v16 + 17);
      *(_DWORD *)(v15 + 20) = *(_DWORD *)(v16 + 20);
      *(unsigned char *)(v15 + 24) = *(unsigned char *)(v16 + 24);
      uint64_t v23 = *(void *)(v16 + 32);
      unint64_t v24 = *(void *)(v16 + 40);
      sub_1DB04239C(v23, v24);
      *(void *)(v15 + 32) = v23;
      *(void *)(v15 + 40) = v24;
      *(unsigned char *)(v15 + 48) = *(unsigned char *)(v16 + 48);
      uint64_t v25 = *(void *)(v16 + 56);
      unint64_t v26 = *(void *)(v16 + 64);
      sub_1DB04239C(v25, v26);
      *(void *)(v15 + 56) = v25;
      *(void *)(v15 + 64) = v26;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v15 + *(int *)(v17 + 48), v16 + *(int *)(v17 + 48), v67);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_1DB0824C4(v15, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
    memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v44 = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 8) = v44;
  *(unsigned char *)(v15 + 17) = *(unsigned char *)(v16 + 17);
  *(_DWORD *)(v15 + 20) = *(_DWORD *)(v16 + 20);
  *(unsigned char *)(v15 + 24) = *(unsigned char *)(v16 + 24);
  uint64_t v45 = *(void *)(v16 + 32);
  unint64_t v46 = *(void *)(v16 + 40);
  sub_1DB04239C(v45, v46);
  uint64_t v47 = *(void *)(v15 + 32);
  unint64_t v48 = *(void *)(v15 + 40);
  *(void *)(v15 + 32) = v45;
  *(void *)(v15 + 40) = v46;
  sub_1DB042664(v47, v48);
  *(unsigned char *)(v15 + 48) = *(unsigned char *)(v16 + 48);
  uint64_t v49 = *(void *)(v16 + 56);
  unint64_t v50 = *(void *)(v16 + 64);
  sub_1DB04239C(v49, v50);
  uint64_t v51 = *(void *)(v15 + 56);
  unint64_t v52 = *(void *)(v15 + 64);
  *(void *)(v15 + 56) = v49;
  *(void *)(v15 + 64) = v50;
  sub_1DB042664(v51, v52);
  ((void (*)(uint64_t, uint64_t, uint64_t))v65)(v15 + *(int *)(v17 + 48), v16 + *(int *)(v17 + 48), v67);
LABEL_7:
  uint64_t v28 = a3[8];
  uint64_t v29 = (uint64_t *)(a1 + v28);
  unint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      uint64_t v53 = *v30;
      unint64_t v54 = v30[1];
      sub_1DB04239C(*v30, v54);
      uint64_t v55 = *v29;
      unint64_t v56 = v29[1];
      *uint64_t v29 = v53;
      v29[1] = v54;
      sub_1DB042664(v55, v56);
      uint64_t v57 = v30[2];
      unint64_t v58 = v30[3];
      sub_1DB04239C(v57, v58);
      uint64_t v59 = v29[2];
      unint64_t v60 = v29[3];
      v29[2] = v57;
      v29[3] = v58;
      sub_1DB042664(v59, v60);
      uint64_t v61 = v30[4];
      unint64_t v62 = v30[5];
      sub_1DB04239C(v61, v62);
      uint64_t v63 = v29[4];
      unint64_t v64 = v29[5];
      v29[4] = v61;
      v29[5] = v62;
      sub_1DB042664(v63, v64);
      ((void (*)(char *, char *, uint64_t))v65)((char *)v29 + *(int *)(v31 + 28), (char *)v30 + *(int *)(v31 + 28), v67);
      return a1;
    }
    sub_1DB0824C4((uint64_t)v29, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
    memcpy(v29, v30, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  uint64_t v36 = *v30;
  unint64_t v37 = v30[1];
  sub_1DB04239C(*v30, v37);
  *uint64_t v29 = v36;
  v29[1] = v37;
  uint64_t v38 = v30[2];
  unint64_t v39 = v30[3];
  sub_1DB04239C(v38, v39);
  v29[2] = v38;
  v29[3] = v39;
  uint64_t v40 = v30[4];
  unint64_t v41 = v30[5];
  sub_1DB04239C(v40, v41);
  v29[4] = v40;
  v29[5] = v41;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))((char *)v29 + *(int *)(v31 + 28), (char *)v30 + *(int *)(v31 + 28), v67);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_1DB0824C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1DB082524(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_1DB0C4AB8();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_DWORD *)(a1 + v11);
  uint64_t v13 = (_DWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 1) = *((void *)v13 + 1);
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
    v12[5] = v13[5];
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)(v12 + 14) = *(_OWORD *)(v13 + 14);
    v10((char *)v12 + *(int *)(v14 + 48), (char *)v13 + *(int *)(v14 + 48), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    long long v23 = v19[1];
    _OWORD *v18 = *v19;
    v18[1] = v23;
    void v18[2] = v19[2];
    v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_1DB0827D8(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1DB042664(v6, v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1DB0C4AB8();
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v44 = v11;
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v43 + 40);
  v42(v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      *(_WORD *)(v13 + 16) = *(_WORD *)(v14 + 16);
      *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
      *(unsigned char *)(v13 + 24) = *(unsigned char *)(v14 + 24);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
      *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
      *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v13 + *(int *)(v15 + 48), v14 + *(int *)(v15 + 48), v44);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_1DB0824C4(v13, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(unsigned char *)(v13 + 17) = *(unsigned char *)(v14 + 17);
  *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
  *(unsigned char *)(v13 + 24) = *(unsigned char *)(v14 + 24);
  uint64_t v32 = *(void *)(v13 + 32);
  unint64_t v33 = *(void *)(v13 + 40);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  sub_1DB042664(v32, v33);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  uint64_t v34 = *(void *)(v13 + 56);
  unint64_t v35 = *(void *)(v13 + 64);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  sub_1DB042664(v34, v35);
  ((void (*)(uint64_t, uint64_t, uint64_t))v42)(v13 + *(int *)(v15 + 48), v14 + *(int *)(v15 + 48), v44);
LABEL_7:
  uint64_t v21 = a3[8];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  long long v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v25 = *(void *)(v24 - 8);
  unint64_t v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v36 = *v22;
      unint64_t v37 = v22[1];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      sub_1DB042664(v36, v37);
      uint64_t v38 = v22[2];
      unint64_t v39 = v22[3];
      *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
      sub_1DB042664(v38, v39);
      uint64_t v40 = v22[4];
      unint64_t v41 = v22[5];
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      sub_1DB042664(v40, v41);
      ((void (*)(char *, char *, uint64_t))v42)((char *)v22 + *(int *)(v24 + 28), (char *)v23 + *(int *)(v24 + 28), v44);
      return a1;
    }
    sub_1DB0824C4((uint64_t)v22, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
    memcpy(v22, v23, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  long long v29 = *((_OWORD *)v23 + 1);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v29;
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))((char *)v22 + *(int *)(v24 + 28), (char *)v23 + *(int *)(v24 + 28), v44);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_1DB082C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1DB082C24);
}

uint64_t sub_1DB082C24(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = sub_1DB0C4AB8();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];
  return v15(v17, a2, v16);
}

uint64_t sub_1DB082DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1DB082DC4);
}

uint64_t sub_1DB082DC4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = sub_1DB0C4AB8();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];
  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(uint64_t a1)
{
  return sub_1DB0844A8(a1, (uint64_t *)&unk_1EA8FE718);
}

void sub_1DB082F6C()
{
  sub_1DB0C4AB8();
  if (v0 <= 0x3F)
  {
    sub_1DB0830C0(319, &qword_1EA8FE728, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    if (v1 <= 0x3F)
    {
      sub_1DB0830C0(319, &qword_1EA8FE730, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1DB0830C0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1DB0C5258();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1DB083114(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v7 = a2[4];
    unint64_t v8 = a2[5];
    sub_1DB04239C(v7, v8);
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v8;
    *(unsigned char *)(v4 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v9 = a2[7];
    unint64_t v10 = a2[8];
    sub_1DB04239C(v9, v10);
    *(void *)(v4 + 56) = v9;
    *(void *)(v4 + 64) = v10;
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = sub_1DB0C4AB8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_1DB083240(uint64_t a1, uint64_t a2)
{
  sub_1DB042664(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_1DB042664(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = sub_1DB0C4AB8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_1DB0832C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  sub_1DB04239C(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  unint64_t v9 = *(void *)(a2 + 64);
  sub_1DB04239C(v8, v9);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_1DB0833A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  sub_1DB04239C(v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  sub_1DB042664(v9, v10);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  unint64_t v12 = *(void *)(a2 + 64);
  sub_1DB04239C(v11, v12);
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  sub_1DB042664(v13, v14);
  uint64_t v15 = *(int *)(a3 + 48);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_1DB083494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1DB083548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1DB042664(v6, v7);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_1DB042664(v8, v9);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1DB083620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1DB083634);
}

uint64_t sub_1DB083634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 17);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_1DB0C4AB8();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 48);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1DB0836E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1DB0836F8);
}

uint64_t sub_1DB0836F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 17) = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_1DB0C4AB8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1DB08379C()
{
  uint64_t result = sub_1DB0C4AB8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1DB08385C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1DB04239C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1DB04239C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_1DB04239C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = *(int *)(a3 + 28);
    unint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_1DB0C4AB8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1DB08396C(uint64_t a1, uint64_t a2)
{
  sub_1DB042664(*(void *)a1, *(void *)(a1 + 8));
  sub_1DB042664(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_1DB042664(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_1DB0C4AB8();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_1DB0839F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1DB04239C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1DB04239C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1DB04239C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_1DB0C4AB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_1DB083AB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1DB04239C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1DB042664(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1DB04239C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_1DB042664(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_1DB04239C(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_1DB042664(v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  int v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_1DB0C4AB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_1DB083B90(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1DB0C4AB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1DB083C14(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1DB042664(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_1DB042664(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_1DB042664(v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_1DB0C4AB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1DB083CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1DB083CD8);
}

uint64_t sub_1DB083CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_1DB0C4AB8();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1DB083D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1DB083DA8);
}

void *sub_1DB083DA8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_1DB0C4AB8();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1DB083E58()
{
  uint64_t result = sub_1DB0C4AB8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1DB083EF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    sub_1DB04239C(v7, v8);
    v4[2] = v7;
    v4[3] = v8;
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_1DB0C4AB8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_1DB083FEC(uint64_t a1, uint64_t a2)
{
  sub_1DB042664(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_1DB0C4AB8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_1DB084068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1DB04239C(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_1DB084110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1DB04239C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  sub_1DB042664(v8, v9);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_1DB0841C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1DB084254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1DB042664(v6, v7);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1DB0842F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1DB084308);
}

uint64_t sub_1DB084308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 24) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_1DB0C4AB8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1DB0843C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1DB0843D8);
}

uint64_t sub_1DB0843D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_1DB0C4AB8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(uint64_t a1)
{
  return sub_1DB0844A8(a1, (uint64_t *)&unk_1EBE7D830);
}

uint64_t sub_1DB0844A8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1DB0844E0()
{
  uint64_t result = sub_1DB0C4AB8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1DB084588(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_1DB084598@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result == 0;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_1DB0845B0()
{
  if (v0[8]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

void *sub_1DB0845C8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0;
  *(void *)a2 = *result;
  char v3 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_1DB0845E4(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8)) {
    *a1 = 0;
  }
  else {
    *a1 = *(void *)v1;
  }
}

uint64_t sub_1DB084600()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB08466C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1DB088580();
  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t sub_1DB0846B8()
{
  return sub_1DB0C54A8();
}

BOOL sub_1DB084720(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a1[1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v2 = 0;
  }
  return v3 == v2;
}

void sub_1DB084750()
{
  qword_1EA903448 = (uint64_t)&unk_1F353AE10;
}

uint64_t sub_1DB084764@<X0>(void *a1@<X8>)
{
  if (qword_1EA8FDDA0 != -1) {
    swift_once();
  }
  *a1 = qword_1EA903448;
  return sub_1DB0C5188();
}

uint64_t sub_1DB0847D0()
{
  uint64_t v0 = sub_1DB0C4C68();
  __swift_allocate_value_buffer(v0, qword_1EA903450);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA903450);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7E8);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7F0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DB0C8620;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = sub_1DB0C4C48();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "sharedState";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "keyToBeShared";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "sealedBox";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  return sub_1DB0C4C58();
}

uint64_t sub_1DB084A08()
{
  uint64_t result = sub_1DB0C4B18();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_1DB0C4B78();
          break;
        case 2:
          sub_1DB084B10();
          break;
        case 3:
          sub_1DB0C4B58();
          break;
        case 4:
          sub_1DB084BC0();
          break;
        default:
          break;
      }
      uint64_t result = sub_1DB0C4B18();
    }
  }
  return result;
}

uint64_t sub_1DB084B10()
{
  return sub_1DB0C4B88();
}

uint64_t sub_1DB084BC0()
{
  return sub_1DB0C4B88();
}

uint64_t sub_1DB084C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v26 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v24 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *v3;
  uint64_t v28 = a3;
  if (!v16 || (uint64_t result = sub_1DB0C4C28(), !v4))
  {
    uint64_t v18 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
    sub_1DB087768((uint64_t)v3 + *(int *)(v18 + 28), (uint64_t)v11, &qword_1EA8FE708);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_1DB06F7F4((uint64_t)v11, &qword_1EA8FE708);
    }
    else
    {
      sub_1DB0877CC((uint64_t)v11, (uint64_t)v15, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
      sub_1DB0872D0(&qword_1EA8FE770, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
      sub_1DB0C4C38();
      uint64_t result = sub_1DB0824C4((uint64_t)v15, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
      if (v4) {
        return result;
      }
    }
    uint64_t v19 = *((void *)v3 + 1);
    unint64_t v20 = *((void *)v3 + 2);
    switch(v20 >> 62)
    {
      case 1uLL:
        if ((int)v19 != v19 >> 32) {
          goto LABEL_12;
        }
        goto LABEL_13;
      case 2uLL:
        if (*(void *)(v19 + 16) != *(void *)(v19 + 24)) {
          goto LABEL_12;
        }
        goto LABEL_13;
      case 3uLL:
        goto LABEL_13;
      default:
        if ((v20 & 0xFF000000000000) == 0) {
          goto LABEL_13;
        }
LABEL_12:
        uint64_t result = sub_1DB0C4C18();
        if (v4) {
          return result;
        }
LABEL_13:
        uint64_t v21 = v26;
        sub_1DB087768((uint64_t)v3 + *(int *)(v18 + 32), v26, &qword_1EA8FE710);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v21, 1, v27) == 1)
        {
          sub_1DB06F7F4(v21, &qword_1EA8FE710);
        }
        else
        {
          uint64_t v22 = v21;
          uint64_t v23 = v24;
          sub_1DB0877CC(v22, v24, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
          sub_1DB0872D0(&qword_1EA8FE790, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
          sub_1DB0C4C38();
          uint64_t result = sub_1DB0824C4(v23, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
          if (v4) {
            return result;
          }
        }
        uint64_t result = sub_1DB0C4A98();
        break;
    }
  }
  return result;
}

uint64_t sub_1DB085118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_1DB0C7A30;
  sub_1DB0C4AA8();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t sub_1DB0851FC()
{
  return 0xD000000000000040;
}

uint64_t sub_1DB08521C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_1DB0C4AB8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1DB08528C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1DB0C4AB8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1DB0852FC())()
{
  return nullsub_1;
}

uint64_t sub_1DB085320()
{
  return sub_1DB084A08();
}

uint64_t sub_1DB085338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DB084C70(a1, a2, a3);
}

uint64_t sub_1DB085354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0872D0(&qword_1EA8FE7E0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1DB0853D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1DB08700C(&qword_1EA8FDDA8, (uint64_t)qword_1EA903450, a1);
}

uint64_t sub_1DB0853F8(uint64_t a1)
{
  uint64_t v2 = sub_1DB0872D0(&qword_1EA8FE7B0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  return MEMORY[0x1F4127378](a1, v2);
}

uint64_t sub_1DB085468()
{
  sub_1DB0872D0(&qword_1EA8FE7B0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  return sub_1DB0C4BD8();
}

uint64_t sub_1DB0854EC()
{
  uint64_t result = sub_1DB0C50B8();
  qword_1EA903468 = 0xD000000000000040;
  unk_1EA903470 = 0x80000001DB0CC1A0;
  return result;
}

uint64_t sub_1DB08555C()
{
  uint64_t v0 = sub_1DB0C4C68();
  __swift_allocate_value_buffer(v0, qword_1EA903478);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA903478);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7E8);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7F0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DB0C7D40;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "nonce";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = sub_1DB0C4C48();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "ciphertext";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "tag";
  *(void *)(v11 + 8) = 3;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_1DB0C4C58();
}

uint64_t sub_1DB08575C()
{
  uint64_t result = sub_1DB0C4B18();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        sub_1DB0C4B58();
      }
      uint64_t result = sub_1DB0C4B18();
    }
  }
  return result;
}

uint64_t sub_1DB085804()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_1DB0C4C18();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_1DB0C4C18();
            if (!v1)
            {
LABEL_15:
              uint64_t v7 = v0[4];
              unint64_t v8 = v0[5];
              switch(v8 >> 62)
              {
                case 1uLL:
                  if ((int)v7 != v7 >> 32) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 2uLL:
                  if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 3uLL:
                  goto LABEL_22;
                default:
                  if ((v8 & 0xFF000000000000) == 0) {
                    goto LABEL_22;
                  }
LABEL_21:
                  uint64_t result = sub_1DB0C4C18();
                  if (!v1)
                  {
LABEL_22:
                    type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
                    uint64_t result = sub_1DB0C4A98();
                  }
                  break;
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_1DB0859FC@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1DB0C7A30;
  a1[1] = xmmword_1DB0C7A30;
  a1[2] = xmmword_1DB0C7A30;
  return sub_1DB0C4AA8();
}

uint64_t sub_1DB085A2C()
{
  if (qword_1EA8FDDB0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1EA903468;
  sub_1DB0C5188();
  return v0;
}

uint64_t sub_1DB085A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1DB085B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1DB085B74())()
{
  return nullsub_1;
}

uint64_t sub_1DB085B98()
{
  return sub_1DB08575C();
}

uint64_t sub_1DB085BB0()
{
  return sub_1DB085804();
}

uint64_t sub_1DB085BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0872D0(&qword_1EA8FE810, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1DB085C44@<X0>(uint64_t a1@<X8>)
{
  return sub_1DB08700C(&qword_1EA8FDDB8, (uint64_t)qword_1EA903478, a1);
}

uint64_t sub_1DB085C68(uint64_t a1)
{
  uint64_t v2 = sub_1DB0872D0(&qword_1EA8FE790, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  return MEMORY[0x1F4127378](a1, v2);
}

uint64_t sub_1DB085CD4()
{
  sub_1DB0872D0(&qword_1EA8FE790, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
  return sub_1DB0C4BD8();
}

uint64_t sub_1DB085D54()
{
  uint64_t v0 = sub_1DB0C4C68();
  __swift_allocate_value_buffer(v0, qword_1EA903490);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA903490);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7E8);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7F0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DB0C8630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = sub_1DB0C4C48();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ciphersuite";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "includeThreshold";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "threshold";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  int v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)int v16 = "includeAuthenticatedData";
  *((void *)v16 + 1) = 24;
  unsigned char v16[16] = 2;
  v9();
  unint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *unint64_t v17 = 6;
  *(void *)uint64_t v18 = "authenticatedData";
  *((void *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  unint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)unint64_t v20 = "insecureToChangeIncludeMessageEntropy";
  *((void *)v20 + 1) = 37;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v5 + 7 * v2);
  uint64_t v22 = (char *)v21 + v1[14];
  *uint64_t v21 = 8;
  *(void *)uint64_t v22 = "shamirGeneratorState";
  *((void *)v22 + 1) = 20;
  v22[16] = 2;
  v9();
  return sub_1DB0C4C58();
}

uint64_t sub_1DB086094()
{
  uint64_t result = sub_1DB0C4B18();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          sub_1DB0C4B78();
          break;
        case 2:
          sub_1DB088580();
          sub_1DB0C4B38();
          break;
        case 3:
        case 5:
        case 7:
          sub_1DB0C4B28();
          break;
        case 6:
        case 8:
          sub_1DB0C4B58();
          break;
        default:
          break;
      }
      uint64_t result = sub_1DB0C4B18();
    }
  }
  return result;
}

uint64_t sub_1DB08623C()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_1DB0C4C28(), !v1))
  {
    if ((*(unsigned char *)(v0 + 16) & 1) != 0 || !*(void *)(v0 + 8) || (sub_1DB088580(), uint64_t result = sub_1DB0C4C08(), !v1))
    {
      if (*(unsigned char *)(v0 + 17) != 1 || (uint64_t result = sub_1DB0C4BF8(), !v1))
      {
        if (!*(_DWORD *)(v0 + 20) || (uint64_t result = sub_1DB0C4C28(), !v1))
        {
          if (*(unsigned char *)(v0 + 24) != 1 || (uint64_t result = sub_1DB0C4BF8(), !v1))
          {
            uint64_t v3 = *(void *)(v0 + 32);
            unint64_t v4 = *(void *)(v0 + 40);
            switch(v4 >> 62)
            {
              case 1uLL:
                if ((int)v3 != v3 >> 32) {
                  goto LABEL_18;
                }
                goto LABEL_19;
              case 2uLL:
                if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
                  goto LABEL_18;
                }
                goto LABEL_19;
              case 3uLL:
                goto LABEL_19;
              default:
                if ((v4 & 0xFF000000000000) == 0) {
                  goto LABEL_19;
                }
LABEL_18:
                uint64_t result = sub_1DB0C4C18();
                if (!v1)
                {
LABEL_19:
                  if (*(unsigned char *)(v0 + 48) != 1 || (uint64_t result = sub_1DB0C4BF8(), !v1))
                  {
                    uint64_t v5 = *(void *)(v0 + 56);
                    unint64_t v6 = *(void *)(v0 + 64);
                    switch(v6 >> 62)
                    {
                      case 1uLL:
                        uint64_t v7 = (int)v5;
                        uint64_t v8 = v5 >> 32;
                        goto LABEL_26;
                      case 2uLL:
                        uint64_t v7 = *(void *)(v5 + 16);
                        uint64_t v8 = *(void *)(v5 + 24);
LABEL_26:
                        if (v7 != v8) {
                          goto LABEL_27;
                        }
                        goto LABEL_28;
                      case 3uLL:
                        goto LABEL_28;
                      default:
                        if ((v6 & 0xFF000000000000) == 0) {
                          goto LABEL_28;
                        }
LABEL_27:
                        uint64_t result = sub_1DB0C4C18();
                        if (!v1)
                        {
LABEL_28:
                          type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
                          uint64_t result = sub_1DB0C4A98();
                        }
                        break;
                    }
                  }
                }
                break;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB0864C0@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1DB0C7A30;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1DB0C7A30;
  return sub_1DB0C4AA8();
}

unint64_t sub_1DB08650C()
{
  return 0xD000000000000035;
}

uint64_t sub_1DB086528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1DB086598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1DB086608())()
{
  return nullsub_1;
}

uint64_t sub_1DB08662C()
{
  return sub_1DB086094();
}

uint64_t sub_1DB086644()
{
  return sub_1DB08623C();
}

uint64_t sub_1DB08665C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0872D0(&qword_1EA8FE818, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1DB0866D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1DB08700C(&qword_1EA8FDDC0, (uint64_t)qword_1EA903490, a1);
}

uint64_t sub_1DB0866FC(uint64_t a1)
{
  uint64_t v2 = sub_1DB0872D0(&qword_1EA8FE770, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  return MEMORY[0x1F4127378](a1, v2);
}

uint64_t sub_1DB086768()
{
  sub_1DB0872D0(&qword_1EA8FE770, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  return sub_1DB0C4BD8();
}

uint64_t sub_1DB0867E8()
{
  uint64_t v0 = sub_1DB0C4C68();
  __swift_allocate_value_buffer(v0, qword_1EA9034A8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA9034A8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7E8);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7F0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1DB0C77B0;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 0;
  *(void *)unint64_t v4 = "AES_GCM_256_128";
  *(void *)(v4 + 8) = 15;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x1E4F70FB8];
  uint64_t v6 = sub_1DB0C4C48();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return sub_1DB0C4C58();
}

uint64_t sub_1DB086940@<X0>(uint64_t a1@<X8>)
{
  return sub_1DB08700C(&qword_1EA8FDDC8, (uint64_t)qword_1EA9034A8, a1);
}

uint64_t sub_1DB086964()
{
  uint64_t v0 = sub_1DB0C4C68();
  __swift_allocate_value_buffer(v0, qword_1EA9034C0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA9034C0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7E8);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7F0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DB0C8620;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = sub_1DB0C4C48();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "prime";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "threshold";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "shamirGeneratorState";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return sub_1DB0C4C58();
}

uint64_t sub_1DB086B9C()
{
  uint64_t result = sub_1DB0C4B18();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          sub_1DB0C4B78();
          break;
        case 4:
          sub_1DB0C4B58();
          break;
        default:
          break;
      }
      uint64_t result = sub_1DB0C4B18();
    }
  }
  return result;
}

uint64_t sub_1DB086C8C()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_1DB0C4C28(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4) || (uint64_t result = sub_1DB0C4C28(), !v1))
    {
      if (!*(_DWORD *)(v0 + 8) || (uint64_t result = sub_1DB0C4C28(), !v1))
      {
        uint64_t v3 = *(void *)(v0 + 16);
        unint64_t v4 = *(void *)(v0 + 24);
        switch(v4 >> 62)
        {
          case 1uLL:
            if ((int)v3 != v3 >> 32) {
              goto LABEL_13;
            }
            goto LABEL_14;
          case 2uLL:
            if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
              goto LABEL_13;
            }
            goto LABEL_14;
          case 3uLL:
            goto LABEL_14;
          default:
            if ((v4 & 0xFF000000000000) == 0) {
              goto LABEL_14;
            }
LABEL_13:
            uint64_t result = sub_1DB0C4C18();
            if (!v1)
            {
LABEL_14:
              type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
              uint64_t result = sub_1DB0C4A98();
            }
            break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB086DE8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1DB0C7A30;
  return sub_1DB0C4AA8();
}

unint64_t sub_1DB086E1C()
{
  return 0xD000000000000038;
}

uint64_t sub_1DB086E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1DB086EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1DB086F18())()
{
  return nullsub_1;
}

uint64_t sub_1DB086F3C()
{
  return sub_1DB086B9C();
}

uint64_t sub_1DB086F54()
{
  return sub_1DB086C8C();
}

uint64_t sub_1DB086F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0872D0(&qword_1EA8FE7D8, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1DB086FE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1DB08700C(&qword_1EA8FDDD0, (uint64_t)qword_1EA9034C0, a1);
}

uint64_t sub_1DB08700C@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1DB0C4C68();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t sub_1DB0870A8(uint64_t a1)
{
  uint64_t v2 = sub_1DB0872D0(&qword_1EBE7D820, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
  return MEMORY[0x1F4127378](a1, v2);
}

uint64_t sub_1DB087114()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB08716C()
{
  sub_1DB0872D0(&qword_1EBE7D820, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
  return sub_1DB0C4BD8();
}

uint64_t sub_1DB0871E8()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB087240()
{
  return sub_1DB0872D0(&qword_1EA8FE758, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
}

uint64_t sub_1DB087288()
{
  return sub_1DB0872D0(&qword_1EBE7D820, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
}

uint64_t sub_1DB0872D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB087318()
{
  return sub_1DB0872D0(&qword_1EA8FE760, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
}

uint64_t sub_1DB087360()
{
  return sub_1DB0872D0(&qword_1EA8FE768, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
}

uint64_t sub_1DB0873A8()
{
  return sub_1DB0872D0(&qword_1EA8FE770, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
}

uint64_t sub_1DB0873F0()
{
  return sub_1DB0872D0(&qword_1EA8FE778, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
}

uint64_t sub_1DB087438()
{
  return sub_1DB0872D0(&qword_1EA8FE780, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
}

uint64_t sub_1DB087480()
{
  return sub_1DB0872D0(&qword_1EA8FE788, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
}

uint64_t sub_1DB0874C8()
{
  return sub_1DB0872D0(&qword_1EA8FE790, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
}

uint64_t sub_1DB087510()
{
  return sub_1DB0872D0(&qword_1EA8FE798, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
}

uint64_t sub_1DB087558()
{
  return sub_1DB0872D0(&qword_1EA8FE7A0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
}

uint64_t sub_1DB0875A0()
{
  return sub_1DB0872D0(&qword_1EA8FE7A8, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
}

uint64_t sub_1DB0875E8()
{
  return sub_1DB0872D0(&qword_1EA8FE7B0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
}

uint64_t sub_1DB087630()
{
  return sub_1DB0872D0(&qword_1EA8FE7B8, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
}

unint64_t sub_1DB08767C()
{
  unint64_t result = qword_1EA8FE7C0;
  if (!qword_1EA8FE7C0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FE7C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE7C0);
  }
  return result;
}

uint64_t sub_1DB0876D8()
{
  return sub_1DB0872D0(&qword_1EA8FE7D0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
}

uint64_t sub_1DB087720()
{
  return sub_1DB0872D0(&qword_1EBE7D828, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization);
}

uint64_t sub_1DB087768(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1DB0877CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1DB0878D0(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_1DB0C4AB8();
  uint64_t v72 = *(void *)(v4 - 8);
  uint64_t v73 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v71 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  unint64_t v70 = (char *)&v65 - v7;
  uint64_t v8 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v76 = *(void *)(v8 - 8);
  uint64_t v77 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v69 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7F8);
  MEMORY[0x1F4188790](v10);
  uint64_t v78 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v74 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v80 = (uint64_t)&v65 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v75 = (uint64_t)&v65 - v17;
  uint64_t v18 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v79 = (uint64_t)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE800);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  uint64_t v30 = (char *)&v65 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v65 - v31;
  if (*a1 != *a2) {
    goto LABEL_19;
  }
  uint64_t v65 = v10;
  uint64_t v33 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  uint64_t v34 = *(int *)(v33 + 28);
  uint64_t v67 = a1;
  sub_1DB087768((uint64_t)a1 + v34, (uint64_t)v32, &qword_1EA8FE708);
  uint64_t v66 = v33;
  uint64_t v35 = *(int *)(v33 + 28);
  uint64_t v68 = a2;
  sub_1DB087768((uint64_t)a2 + v35, (uint64_t)v30, &qword_1EA8FE708);
  uint64_t v36 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_1DB087768((uint64_t)v32, (uint64_t)v23, &qword_1EA8FE708);
  sub_1DB087768((uint64_t)v30, v36, &qword_1EA8FE708);
  unint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v37((uint64_t)v23, 1, v18) == 1)
  {
    sub_1DB06F7F4((uint64_t)v30, &qword_1EA8FE708);
    sub_1DB06F7F4((uint64_t)v32, &qword_1EA8FE708);
    if (v37(v36, 1, v18) == 1)
    {
      sub_1DB06F7F4((uint64_t)v23, &qword_1EA8FE708);
      goto LABEL_10;
    }
LABEL_7:
    uint64_t v38 = &qword_1EA8FE800;
    uint64_t v39 = (uint64_t)v23;
LABEL_8:
    sub_1DB06F7F4(v39, v38);
    goto LABEL_19;
  }
  sub_1DB087768((uint64_t)v23, (uint64_t)v27, &qword_1EA8FE708);
  if (v37(v36, 1, v18) == 1)
  {
    sub_1DB06F7F4((uint64_t)v30, &qword_1EA8FE708);
    sub_1DB06F7F4((uint64_t)v32, &qword_1EA8FE708);
    sub_1DB0824C4((uint64_t)v27, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    goto LABEL_7;
  }
  uint64_t v40 = v79;
  sub_1DB0877CC(v36, v79, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  char v41 = sub_1DB088334((uint64_t)v27, v40);
  sub_1DB0824C4(v40, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  sub_1DB06F7F4((uint64_t)v30, &qword_1EA8FE708);
  sub_1DB06F7F4((uint64_t)v32, &qword_1EA8FE708);
  sub_1DB0824C4((uint64_t)v27, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  sub_1DB06F7F4((uint64_t)v23, &qword_1EA8FE708);
  if ((v41 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v43 = v67;
  uint64_t v42 = v68;
  if ((sub_1DB059454(*((void *)v67 + 1), *((void *)v67 + 2), *((void *)v68 + 1), *((void *)v68 + 2)) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v44 = v66;
  uint64_t v45 = v75;
  sub_1DB087768((uint64_t)v43 + *(int *)(v66 + 32), v75, &qword_1EA8FE710);
  uint64_t v46 = v80;
  sub_1DB087768((uint64_t)v42 + *(int *)(v44 + 32), v80, &qword_1EA8FE710);
  uint64_t v47 = v78;
  uint64_t v48 = v78 + *(int *)(v65 + 48);
  sub_1DB087768(v45, v78, &qword_1EA8FE710);
  sub_1DB087768(v46, v48, &qword_1EA8FE710);
  uint64_t v49 = v77;
  unint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  if (v50(v47, 1, v77) != 1)
  {
    uint64_t v51 = v74;
    sub_1DB087768(v47, v74, &qword_1EA8FE710);
    if (v50(v48, 1, v49) != 1)
    {
      uint64_t v52 = v69;
      sub_1DB0877CC(v48, v69, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      char v53 = sub_1DB08815C(v51, v52);
      sub_1DB0824C4(v52, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      sub_1DB06F7F4(v80, &qword_1EA8FE710);
      sub_1DB06F7F4(v45, &qword_1EA8FE710);
      sub_1DB0824C4(v51, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
      sub_1DB06F7F4(v47, &qword_1EA8FE710);
      if (v53) {
        goto LABEL_18;
      }
LABEL_19:
      char v62 = 0;
      return v62 & 1;
    }
    sub_1DB06F7F4(v80, &qword_1EA8FE710);
    sub_1DB06F7F4(v45, &qword_1EA8FE710);
    sub_1DB0824C4(v51, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    goto LABEL_16;
  }
  sub_1DB06F7F4(v46, &qword_1EA8FE710);
  sub_1DB06F7F4(v45, &qword_1EA8FE710);
  if (v50(v48, 1, v49) != 1)
  {
LABEL_16:
    uint64_t v38 = &qword_1EA8FE7F8;
    uint64_t v39 = v47;
    goto LABEL_8;
  }
  sub_1DB06F7F4(v47, &qword_1EA8FE710);
LABEL_18:
  uint64_t v54 = v66;
  uint64_t v55 = (uint64_t)v43 + *(int *)(v66 + 24);
  uint64_t v57 = v72;
  uint64_t v56 = v73;
  unint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  uint64_t v59 = v70;
  v58(v70, v55, v73);
  uint64_t v60 = (uint64_t)v42 + *(int *)(v54 + 24);
  uint64_t v61 = v71;
  v58(v71, v60, v56);
  sub_1DB0872D0(&qword_1EA8FE808, MEMORY[0x1E4F70E60]);
  char v62 = sub_1DB0C5018();
  uint64_t v63 = *(void (**)(char *, uint64_t))(v57 + 8);
  v63(v61, v56);
  v63(v59, v56);
  return v62 & 1;
}

uint64_t sub_1DB08815C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0C4AB8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((sub_1DB059454(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_1DB059454(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0
    && (sub_1DB059454(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v8, a2 + *(int *)(v11 + 28), v4);
    sub_1DB0872D0(&qword_1EA8FE808, MEMORY[0x1E4F70E60]);
    char v13 = sub_1DB0C5018();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1DB088334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0C4AB8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    goto LABEL_16;
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (*(unsigned char *)(a2 + 16))
    {
      if (!v11) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_8:
    if (v11 == *(void *)(a2 + 8)) {
      goto LABEL_9;
    }
LABEL_16:
    char v14 = 0;
    return v14 & 1;
  }
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    uint64_t v11 = 0;
    goto LABEL_8;
  }
LABEL_9:
  if (*(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)
    || (sub_1DB059454(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) == 0
    || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
    || (sub_1DB059454(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a2 + 56), *(void *)(a2 + 64)) & 1) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v12 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  char v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, a1 + *(int *)(v12 + 48), v4);
  v13(v8, a2 + *(int *)(v12 + 48), v4);
  sub_1DB0872D0(&qword_1EA8FE808, MEMORY[0x1E4F70E60]);
  char v14 = sub_1DB0C5018();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  return v14 & 1;
}

unint64_t sub_1DB088580()
{
  unint64_t result = qword_1EA8FE820;
  if (!qword_1EA8FE820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE820);
  }
  return result;
}

uint64_t sub_1DB0885D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0C4AB8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && (sub_1DB059454(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for CryptoKitSecretSharing_ShamirShareGeneratorSerialization(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 32), v4);
    v12(v8, a2 + *(int *)(v11 + 32), v4);
    sub_1DB0872D0(&qword_1EA8FE808, MEMORY[0x1E4F70E60]);
    char v13 = sub_1DB0C5018();
    char v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1DB088820(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DB08883C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite()
{
  return &type metadata for CryptoKitSecretSharing_HybridSecretSharingSharedState.Ciphersuite;
}

unint64_t sub_1DB088870()
{
  unint64_t result = qword_1EA8FE828;
  if (!qword_1EA8FE828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE828);
  }
  return result;
}

unint64_t sub_1DB0888C8()
{
  unint64_t result = qword_1EA8FE830;
  if (!qword_1EA8FE830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE830);
  }
  return result;
}

unint64_t sub_1DB088920()
{
  unint64_t result = qword_1EA8FE838[0];
  if (!qword_1EA8FE838[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FE838);
  }
  return result;
}

ValueMetadata *type metadata accessor for KVAC()
{
  return &type metadata for KVAC;
}

uint64_t getEnumTagSinglePayload for KVAC.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KVAC.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB088AE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1DB088B08(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KVAC.Errors()
{
  return &type metadata for KVAC.Errors;
}

uint64_t type metadata accessor for KVAC.Ciphersuite()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1DB088B40()
{
  unint64_t result = qword_1EA8FE8C0[0];
  if (!qword_1EA8FE8C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FE8C0);
  }
  return result;
}

BOOL sub_1DB088B94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t type metadata accessor for CoreCryptoGroupScalar()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CorecryptoCurvePoint()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB088BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for CoreCryptoHash2Curve()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB088BFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DB088C18()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DB088C34()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1DB088C50()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_1DB088C6C()
{
  return &off_1F353BEF0;
}

uint64_t sub_1DB088C78(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DB088CB4(void *a1)
{
  id v1 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (!v1) {
    goto LABEL_19;
  }
  int v2 = v1;
  uint64_t v3 = sub_1DB0C4A08();
  unint64_t v5 = v4;

  switch(v5 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      uint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_7:
      if (__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(v3) - (int)v3;
LABEL_9:
      sub_1DB04239C(v3, v5);
LABEL_10:
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        sub_1DB0C5358();
        __break(1u);
        JUMPOUT(0x1DB088E94);
      }
      size_t v9 = 2 * v6;
      if (2 * v6 < 0) {
        goto LABEL_17;
      }
      if (v9)
      {
        uint64_t v10 = sub_1DB0C51B8();
        *(void *)(v10 + 16) = v9;
        bzero((void *)(v10 + 32), v9);
      }
      else
      {
LABEL_14:
        uint64_t v10 = MEMORY[0x1E4FBC860];
      }
      uint64_t v13 = 0;
      char v14 = (char *)v10;
      sub_1DB04239C(v3, v5);
      sub_1DB088EAC(v3, v5, &v14, &v13);
      sub_1DB042664(v3, v5);
      sub_1DB0C5188();
      uint64_t v11 = sub_1DB0C5098();
      swift_bridgeObjectRelease_n();
      sub_1DB042664(v3, v5);
      sub_1DB042664(v3, v5);
      return v11;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v6 = BYTE6(v5);
      goto LABEL_10;
  }
}

uint64_t sub_1DB088EA4()
{
  return sub_1DB088CB4(*v0);
}

uint64_t sub_1DB088EAC(uint64_t a1, unint64_t a2, char **a3, uint64_t *a4)
{
  uint64_t v23 = sub_1DB0C4A38();
  uint64_t v22 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  size_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1DB04239C(a1, a2);
      sub_1DB04239C(a1, a2);
      break;
    default:
      break;
  }
  sub_1DB0C4A48();
  sub_1DB042664(a1, a2);
  sub_1DB089124();
  sub_1DB0C5268();
  if ((v25 & 1) == 0)
  {
    unsigned int v11 = v24;
    do
    {
      uint64_t v12 = *a4;
      if (*a4 + 0x4000000000000000 < 0) {
        goto LABEL_23;
      }
      if (v11 <= 0x9F) {
        char v13 = (v11 >> 4) | 0x30;
      }
      else {
        char v13 = (v11 >> 4) + 87;
      }
      char v14 = *a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v14;
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v16 = 2 * v12;
        if (2 * v12 < 0) {
          goto LABEL_22;
        }
      }
      else
      {
        char v14 = sub_1DB05268C((uint64_t)v14);
        unint64_t v16 = 2 * v12;
        if (2 * v12 < 0)
        {
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          JUMPOUT(0x1DB089114);
        }
      }
      unint64_t v17 = *((void *)v14 + 2);
      if (v16 >= v17) {
        goto LABEL_24;
      }
      v14[v16 + 32] = v13;
      uint64_t v18 = *a4;
      if (*a4 + 0x4000000000000000 < 0) {
        goto LABEL_25;
      }
      if (v18 < 0) {
        goto LABEL_26;
      }
      uint64_t v19 = (2 * v18) | 1;
      if (v19 >= (uint64_t)v17) {
        goto LABEL_26;
      }
      if ((v11 & 0xF) <= 9) {
        char v20 = v11 & 0xF | 0x30;
      }
      else {
        char v20 = (v11 & 0xF) + 87;
      }
      v14[v19 + 32] = v20;
      *a3 = v14;
      *a4 = v18 + 1;
      sub_1DB0C5268();
      unsigned int v11 = v24;
    }
    while (v25 != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, v23);
}

unint64_t sub_1DB089124()
{
  unint64_t result = qword_1EBE7DE78[0];
  if (!qword_1EBE7DE78[0])
  {
    sub_1DB0C4A38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EBE7DE78);
  }
  return result;
}

uint64_t type metadata accessor for CoreCryptoGroup()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1DB089194(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE980);
  int v2 = (void *)sub_1DB0C53A8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = sub_1DB089978((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1DB0892A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE978);
  int v2 = (void *)sub_1DB0C53A8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_1DB0C5188();
    swift_unknownObjectRetain();
    unint64_t result = sub_1DB0899FC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
}

unint64_t sub_1DB0893E8()
{
  unint64_t result = qword_1EA8FE948;
  if (!qword_1EA8FE948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE948);
  }
  return result;
}

unint64_t sub_1DB08943C()
{
  unint64_t result = qword_1EA8FE958;
  if (!qword_1EA8FE958)
  {
    sub_1DB0894A4(255, &qword_1EA8FE950);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE958);
  }
  return result;
}

uint64_t sub_1DB0894A4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void SecureEnclave.P256.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
}

void sub_1DB08950C(__SecKey *a1, void (*a2)(uint64_t, uint64_t, unint64_t, void))
{
  CFDictionaryRef v4 = SecKeyCopyAttributes(a1);
  if (!v4)
  {
    sub_1DB0893E8();
    swift_allocError();
    *uint64_t v10 = 0;
    swift_willThrow();
LABEL_25:

    return;
  }
  CFDictionaryRef v5 = v4;
  sub_1DB0894A4(0, &qword_1EA8FE950);
  sub_1DB08943C();
  uint64_t v6 = sub_1DB0C4FD8();
  uint64_t v7 = sub_1DB0C5028();
  char v8 = (void *)v7;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v26 = a2;
    uint64_t v9 = sub_1DB0C5348();

    swift_bridgeObjectRelease();
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(void *)(v6 + 16) || (sub_1DB089A74(v7), (v11 & 1) == 0))
    {

      swift_bridgeObjectRelease();
LABEL_13:
      sub_1DB0893E8();
      swift_allocError();
      *unint64_t v16 = 1;
      swift_willThrow();
LABEL_24:

      goto LABEL_25;
    }
    uint64_t v26 = a2;
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  uint64_t v12 = sub_1DB0C4FD8();
  uint64_t v13 = sub_1DB0C5028();
  char v14 = (void *)v13;
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t v15 = (void *)sub_1DB0C5348();

    swift_bridgeObjectRelease();
    if (!v15) {
      goto LABEL_22;
    }
  }
  else
  {
    if (!*(void *)(v12 + 16) || (unint64_t v17 = sub_1DB089A74(v13), (v18 & 1) == 0))
    {

      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    uint64_t v15 = *(void **)(*(void *)(v12 + 56) + 8 * v17);
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(v15, sel_respondsToSelector_, sel_BOOLValue, v26))
  {
    if (objc_msgSend(v15, sel_BOOLValue))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE960);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DB0C77B0;
      *(void *)(inited + 32) = sub_1DB0C5038();
      *(void *)(inited + 40) = v20;
      sub_1DB0894A4(0, &qword_1EA8FE968);
      *(void *)(inited + 48) = sub_1DB0C5228();
      unint64_t v21 = sub_1DB0892A0(inited);
      swift_unknownObjectRelease();
LABEL_23:
      swift_unknownObjectRetain();
      self;
      uint64_t v22 = (void *)swift_dynamicCastObjCClassUnconditional();
      uint64_t v23 = sub_1DB0C4A08();
      uint64_t v25 = v24;

      v26(v23, v25, v21, 0);
      swift_unknownObjectRelease();
      goto LABEL_24;
    }
    swift_unknownObjectRelease();
LABEL_22:
    unint64_t v21 = 0;
    goto LABEL_23;
  }
  __break(1u);
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
}

void SecureEnclave.P384.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1)
{
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(from:)(__SecKey *a1)
{
}

unint64_t sub_1DB089930(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x1E0188370](*(void *)(v1 + 40), a1, 4);
  return sub_1DB089C14(a1, v3);
}

unint64_t sub_1DB089978(uint64_t a1)
{
  sub_1DB0C5478();
  type metadata accessor for CFString(0);
  sub_1DB089FDC();
  sub_1DB0C4A78();
  uint64_t v2 = sub_1DB0C54A8();
  return sub_1DB089CB0(a1, v2);
}

unint64_t sub_1DB0899FC(uint64_t a1, uint64_t a2)
{
  sub_1DB0C5478();
  sub_1DB0C50A8();
  uint64_t v4 = sub_1DB0C54A8();
  return sub_1DB089DDC(a1, a2, v4);
}

unint64_t sub_1DB089A74(uint64_t a1)
{
  uint64_t v2 = sub_1DB0C5238();
  return sub_1DB089EC0(a1, v2);
}

unsigned char *storeEnumTagSinglePayload for SecKeySEPInteropErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB089B84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecKeySEPInteropErrors()
{
  return &type metadata for SecKeySEPInteropErrors;
}

unint64_t sub_1DB089BC0()
{
  unint64_t result = qword_1EA8FE970;
  if (!qword_1EA8FE970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE970);
  }
  return result;
}

unint64_t sub_1DB089C14(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1DB089CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    unsigned int v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1DB089FDC();
    id v7 = v6;
    char v8 = sub_1DB0C4A68();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_1DB0C4A68();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1DB089DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1DB0C53D8() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1DB0C53D8() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1DB089EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1DB0894A4(0, &qword_1EA8FE950);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_1DB0C5248();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_1DB0C5248();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1DB089FDC()
{
  unint64_t result = qword_1EA8FE4F8;
  if (!qword_1EA8FE4F8)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE4F8);
  }
  return result;
}

unint64_t sub_1DB08A034(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE988);
  uint64_t v3 = (void *)sub_1DB0C53A8();
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_1DB089930(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    sub_1DB0C5188();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    _OWORD v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    unsigned int v4 = *((_DWORD *)v8 - 2);
    uint64_t v13 = *v8;
    sub_1DB0C5188();
    unint64_t result = sub_1DB089930(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void sub_1DB08A138()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = self;
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  if (((unint64_t)objc_msgSend(v0, sel_groupOrderByteCountForCP_, v25) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v23 = v0;
  uint64_t v1 = sub_1DB0C4A28();
  unint64_t v3 = v2;
  int v24 = 0;
  sub_1DB0C4D78();
  swift_dynamicCast();
  id v4 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
  uint64_t v5 = (void *)sub_1DB0C49E8();
  id v6 = objc_msgSend(v4, sel_initWithData_inGroup_reduction_corecryptoError_, v5, v25, 0, &v24);

  if (!v6)
  {
    int v18 = v24;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v19 = v18;
    *(unsigned char *)(v19 + 4) = 0;
    swift_willThrow();
    sub_1DB042664(v1, v3);
    return;
  }
  sub_1DB042664(v1, v3);
  sub_1DB0C4D78();
  swift_dynamicCast();
  unint64_t v7 = (unint64_t)objc_msgSend(v0, sel_groupOrderByteCountForCP_, v25);
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = (char *)v7;
  sub_1DB0C4D78();
  swift_dynamicCast();
  int64_t v9 = (int64_t)objc_msgSend(v0, sel_groupOrderByteCountForCP_, v25);
  if (v9 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFADD__(v8, v9))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((uint64_t)&v8[v9] < (uint64_t)v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v22 = v6;
  uint64_t v10 = sub_1DB0C4A28();
  unint64_t v12 = v11;
  int v24 = 0;
  sub_1DB0C4D78();
  swift_dynamicCast();
  uint64_t v13 = v25;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
  uint64_t v15 = (void *)sub_1DB0C49E8();
  id v16 = objc_msgSend(v14, sel_initWithData_inGroup_reduction_corecryptoError_, v15, v13, 0, &v24);

  if (v16)
  {
    sub_1DB042664(v10, v12);
    sub_1DB0C4D78();
    swift_dynamicCast();
    if (((unint64_t)objc_msgSend(v23, sel_groupOrderByteCountForCP_, v25) & 0x8000000000000000) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFC0);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_1DB0C77B0;
      *(void *)(v17 + 32) = v16;
      uint64_t v26 = v17;
      sub_1DB0C5198();
      return;
    }
LABEL_17:
    __break(1u);
  }
  int v20 = v24;
  sub_1DB04D0D4();
  swift_allocError();
  *(_DWORD *)uint64_t v21 = v20;
  *(unsigned char *)(v21 + 4) = 0;
  swift_willThrow();
  sub_1DB042664(v10, v12);
}

void sub_1DB08A55C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v7 = self;
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  int64_t v8 = (int64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v50);
  if (v8 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v8 + 0x4000000000000000 < 0) {
    goto LABEL_32;
  }
  uint64_t v48 = a3;
  uint64_t v49 = 2 * v8;
  uint64_t v9 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_37;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_8:
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v12 = (uint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v50);
      if (v12 < 0) {
        goto LABEL_33;
      }
      uint64_t v13 = 3 * v12;
      if ((unsigned __int128)(v12 * (__int128)3) >> 64 != (3 * v12) >> 63) {
        goto LABEL_34;
      }
      BOOL v14 = __OFADD__(v13, v49);
      uint64_t v15 = v13 + v49;
      if (v14) {
        goto LABEL_35;
      }
      if (v9 != v15)
      {
        sub_1DB07CAC8();
        swift_allocError();
        *uint64_t v27 = 2;
        swift_willThrow();
        return;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v50) & 0x8000000000000000) != 0) {
        goto LABEL_36;
      }
      id v47 = v7;
      uint64_t v16 = sub_1DB0C4A28();
      unint64_t v18 = v17;
      id v19 = sub_1DB0677F8();
      sub_1DB042664(v16, v18);
      if (!v3)
      {
        id v46 = v19;
        sub_1DB0C4D78();
        swift_dynamicCast();
        unint64_t v20 = (unint64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v50);
        if ((v20 & 0x8000000000000000) == 0)
        {
          uint64_t v21 = (char *)v20;
          sub_1DB0C4D78();
          swift_dynamicCast();
          int64_t v22 = (int64_t)objc_msgSend(v7, sel_compressedx962PointByteCountForCurveParameters_, v50);
          if ((v22 & 0x8000000000000000) == 0)
          {
            if (!__OFADD__(v21, v22))
            {
              if ((uint64_t)&v21[v22] >= (uint64_t)v21)
              {
                uint64_t v23 = sub_1DB0C4A28();
                unint64_t v25 = v24;
                id v26 = sub_1DB0677F8();
                sub_1DB042664(v23, v25);
                id v45 = v26;
                sub_1DB0C4D78();
                swift_dynamicCast();
                unint64_t v28 = (unint64_t)objc_msgSend(v47, sel_compressedx962PointByteCountForCurveParameters_, v50);
                if ((v28 & 0x8000000000000000) == 0)
                {
                  uint64_t v29 = &v21[v28];
                  if (!__OFADD__(v21, v28))
                  {
                    sub_1DB0C4D78();
                    swift_dynamicCast();
                    int64_t v30 = (int64_t)objc_msgSend(v47, sel_compressedx962PointByteCountForCurveParameters_, v50);
                    if ((v30 & 0x8000000000000000) == 0)
                    {
                      if (!__OFADD__(v29, v30))
                      {
                        if ((uint64_t)&v29[v30] >= (uint64_t)v29)
                        {
                          uint64_t v31 = sub_1DB0C4A28();
                          unint64_t v33 = v32;
                          id v34 = sub_1DB0677F8();
                          sub_1DB042664(v31, v33);
                          sub_1DB0C4D78();
                          swift_dynamicCast();
                          unint64_t v35 = (unint64_t)objc_msgSend(v47, sel_compressedx962PointByteCountForCurveParameters_, v50);
                          if ((v35 & 0x8000000000000000) == 0)
                          {
                            BOOL v14 = __OFADD__(v29, v35);
                            uint64_t v36 = &v29[v35];
                            if (!v14)
                            {
                              if (!__OFADD__(v36, v49))
                              {
                                if ((uint64_t)&v36[v49] >= (uint64_t)v36)
                                {
                                  id v37 = v34;
                                  uint64_t v38 = sub_1DB0C4A28();
                                  unint64_t v40 = v39;
                                  sub_1DB08A138();
                                  uint64_t v42 = v41;
                                  uint64_t v44 = v43;
                                  sub_1DB042664(v38, v40);
                                  *uint64_t v48 = v46;
                                  v48[1] = v45;
                                  v48[2] = v37;
                                  v48[3] = v42;
                                  v48[4] = v44;
                                  return;
                                }
LABEL_51:
                                __break(1u);
                                JUMPOUT(0x1DB08AAC4);
                              }
LABEL_50:
                              __break(1u);
                              goto LABEL_51;
                            }
LABEL_49:
                            __break(1u);
                            goto LABEL_50;
                          }
LABEL_48:
                          __break(1u);
                          goto LABEL_49;
                        }
LABEL_47:
                        __break(1u);
                        goto LABEL_48;
                      }
LABEL_46:
                      __break(1u);
                      goto LABEL_47;
                    }
LABEL_45:
                    __break(1u);
                    goto LABEL_46;
                  }
LABEL_44:
                  __break(1u);
                  goto LABEL_45;
                }
LABEL_43:
                __break(1u);
                goto LABEL_44;
              }
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      return;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_8;
      }
      goto LABEL_38;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_8;
  }
}

void sub_1DB08AAD4(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_93;
      }
      uint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      int64_t v8 = self;
      sub_1DB0C4F38();
      unint64_t v9 = sub_1DB07C914();
      sub_1DB0C4D78();
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      uint64_t v11 = (uint64_t)objc_msgSend(v8, sel_compressedx962PointByteCountForCurveParameters_, v156);
      if (v11 < 0)
      {
        __break(1u);
        goto LABEL_87;
      }
      uint64_t v12 = 3 * v11;
      if ((unsigned __int128)(v11 * (__int128)3) >> 64 != (3 * v11) >> 63)
      {
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v13 = (unint64_t)objc_msgSend(v8, sel_groupOrderByteCountForCP_, v156);
      if ((v13 & 0x8000000000000000) != 0)
      {
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      if ((v13 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      if (__OFADD__(v12, 8 * v13))
      {
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      if (v5 != v12 + 8 * v13)
      {
        sub_1DB07CAC8();
        swift_allocError();
        unsigned char *v18 = 4;
        swift_willThrow();
        return;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v8, sel_compressedx962PointByteCountForCurveParameters_, v156) & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
      id v154 = v8;
      uint64_t v14 = sub_1DB0C4A28();
      unint64_t v16 = v15;
      id v17 = sub_1DB0677F8();
      if (v3)
      {
        sub_1DB042664(v14, v16);
        return;
      }
      uint64_t v153 = v17;
      v152 = a3;
      sub_1DB042664(v14, v16);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v19 = (unint64_t)objc_msgSend(v8, sel_compressedx962PointByteCountForCurveParameters_, v156);
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_95;
      }
      unint64_t v20 = (char *)v19;
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v21 = (int64_t)objc_msgSend(v8, sel_compressedx962PointByteCountForCurveParameters_, v156);
      if (v21 < 0)
      {
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      if (__OFADD__(v20, v21))
      {
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      if ((uint64_t)&v20[v21] < (uint64_t)v20)
      {
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      uint64_t v22 = sub_1DB0C4A28();
      unint64_t v24 = v23;
      id v142 = sub_1DB0677F8();
      sub_1DB042664(v22, v24);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v25 = (unint64_t)objc_msgSend(v8, sel_compressedx962PointByteCountForCurveParameters_, v156);
      if ((v25 & 0x8000000000000000) != 0) {
        goto LABEL_99;
      }
      BOOL v26 = __OFADD__(v20, v25);
      uint64_t v27 = &v20[v25];
      if (v26)
      {
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v28 = (int64_t)objc_msgSend(v8, sel_groupOrderByteCountForCP_, v156);
      if (v28 < 0)
      {
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      if (__OFADD__(v27, v28))
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      if ((uint64_t)&v27[v28] < (uint64_t)v27)
      {
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
      uint64_t v141 = v27;
      uint64_t v29 = sub_1DB0C4A28();
      unint64_t v31 = v30;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v32 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v151 = v31;
      unint64_t v33 = (void *)sub_1DB0C49E8();
      id v34 = objc_msgSend(v32, sel_initWithData_inGroup_reduction_corecryptoError_, v33, v156, 0, &v155);

      if (!v34)
      {
        int v41 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v42 = v41;
        *(unsigned char *)(v42 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v29, v151);
LABEL_35:

        uint64_t v43 = v142;
LABEL_21:

        return;
      }
      sub_1DB042664(v29, v151);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v35 = (unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if ((v35 & 0x8000000000000000) != 0) {
        goto LABEL_104;
      }
      uint64_t v36 = &v27[v35];
      if (__OFADD__(v141, v35))
      {
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v37 = (int64_t)objc_msgSend(v154, sel_compressedx962PointByteCountForCurveParameters_, v156);
      if (v37 < 0)
      {
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      if (__OFADD__(v36, v37))
      {
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
      unint64_t v150 = v34;
      if ((uint64_t)&v36[v37] < (uint64_t)v36)
      {
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      uint64_t v38 = sub_1DB0C4A28();
      unint64_t v40 = v39;
      id v139 = sub_1DB0677F8();
      sub_1DB042664(v38, v40);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v44 = (unint64_t)objc_msgSend(v154, sel_compressedx962PointByteCountForCurveParameters_, v156);
      if ((v44 & 0x8000000000000000) != 0) {
        goto LABEL_109;
      }
      id v45 = &v36[v44];
      if (__OFADD__(v36, v44))
      {
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v46 = (int64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if (v46 < 0)
      {
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      if (__OFADD__(v45, v46))
      {
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      if ((uint64_t)&v45[v46] < (uint64_t)v45)
      {
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      id v138 = v45;
      uint64_t v47 = sub_1DB0C4A28();
      unint64_t v49 = v48;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v50 = v156;
      id v51 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v144 = v49;
      uint64_t v52 = (void *)sub_1DB0C49E8();
      id v53 = objc_msgSend(v51, sel_initWithData_inGroup_reduction_corecryptoError_, v52, v50, 0, &v155);

      if (!v53)
      {
        int v115 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v116 = v115;
        *(unsigned char *)(v116 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v47, v144);

        uint64_t v43 = v139;
        goto LABEL_21;
      }
      sub_1DB042664(v47, v144);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v54 = (unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if ((v54 & 0x8000000000000000) != 0) {
        goto LABEL_114;
      }
      uint64_t v55 = &v138[v54];
      if (__OFADD__(v138, v54))
      {
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v56 = (int64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if (v56 < 0)
      {
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
      if (__OFADD__(v55, v56))
      {
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      unint64_t v137 = v53;
      if ((uint64_t)&v55[v56] < (uint64_t)v55)
      {
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }
      uint64_t v136 = v55;
      uint64_t v57 = sub_1DB0C4A28();
      unint64_t v59 = v58;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v60 = v156;
      id v61 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v145 = v59;
      char v62 = (void *)sub_1DB0C49E8();
      id v63 = objc_msgSend(v61, sel_initWithData_inGroup_reduction_corecryptoError_, v62, v60, 0, &v155);

      if (!v63)
      {
        int v117 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v118 = v117;
        *(unsigned char *)(v118 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v57, v145);

        uint64_t v43 = v137;
        goto LABEL_21;
      }
      sub_1DB042664(v57, v145);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v64 = (unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if ((v64 & 0x8000000000000000) != 0) {
        goto LABEL_119;
      }
      uint64_t v65 = &v136[v64];
      if (__OFADD__(v136, v64))
      {
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v66 = (int64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if (v66 < 0)
      {
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
      if (__OFADD__(v65, v66))
      {
LABEL_122:
        __break(1u);
        goto LABEL_123;
      }
      unint64_t v135 = v63;
      if ((uint64_t)&v65[v66] < (uint64_t)v65)
      {
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
      unint64_t v134 = v65;
      uint64_t v67 = sub_1DB0C4A28();
      unint64_t v69 = v68;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v70 = v156;
      id v71 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v146 = v69;
      uint64_t v72 = (void *)sub_1DB0C49E8();
      id v73 = objc_msgSend(v71, sel_initWithData_inGroup_reduction_corecryptoError_, v72, v70, 0, &v155);

      if (!v73)
      {
        int v119 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v120 = v119;
        *(unsigned char *)(v120 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v67, v146);

        uint64_t v43 = v135;
        goto LABEL_21;
      }
      sub_1DB042664(v67, v146);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v74 = (unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if ((v74 & 0x8000000000000000) != 0) {
        goto LABEL_124;
      }
      uint64_t v75 = &v134[v74];
      if (__OFADD__(v134, v74))
      {
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v76 = (int64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if (v76 < 0)
      {
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
      if (__OFADD__(v75, v76))
      {
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
      uint64_t v133 = v73;
      if ((uint64_t)&v75[v76] < (uint64_t)v75)
      {
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      id v131 = v75;
      uint64_t v77 = sub_1DB0C4A28();
      unint64_t v79 = v78;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v80 = v156;
      id v81 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v147 = v79;
      unint64_t v82 = (void *)sub_1DB0C49E8();
      id v83 = objc_msgSend(v81, sel_initWithData_inGroup_reduction_corecryptoError_, v82, v80, 0, &v155);

      if (!v83)
      {
        int v121 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v122 = v121;
        *(unsigned char *)(v122 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v77, v147);

        uint64_t v43 = v133;
        goto LABEL_21;
      }
      sub_1DB042664(v77, v147);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v84 = (unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if ((v84 & 0x8000000000000000) != 0) {
        goto LABEL_129;
      }
      id v85 = &v131[v84];
      if (__OFADD__(v131, v84))
      {
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v86 = (int64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if (v86 < 0)
      {
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      if (__OFADD__(v85, v86))
      {
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
      }
      v140 = v83;
      if ((uint64_t)&v85[v86] < (uint64_t)v85) {
        goto LABEL_133;
      }
      v132 = v85;
      uint64_t v87 = sub_1DB0C4A28();
      unint64_t v89 = v88;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v90 = v156;
      id v91 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      uint64_t v148 = v87;
      unint64_t v92 = v89;
      id v93 = (void *)sub_1DB0C49E8();
      id v94 = objc_msgSend(v91, sel_initWithData_inGroup_reduction_corecryptoError_, v93, v90, 0, &v155);

      if (!v94)
      {
        int v123 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v124 = v123;
        *(unsigned char *)(v124 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v148, v92);

        uint64_t v43 = v140;
        goto LABEL_21;
      }
      sub_1DB042664(v148, v92);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v95 = (unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if ((v95 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_135;
      }
      unint64_t v96 = &v132[v95];
      if (__OFADD__(v132, v95))
      {
LABEL_135:
        __break(1u);
        goto LABEL_136;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v97 = (int64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if (v97 < 0)
      {
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }
      if (__OFADD__(v96, v97))
      {
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }
      unint64_t v130 = v94;
      if ((uint64_t)&v96[v97] < (uint64_t)v96)
      {
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
        goto LABEL_140;
      }
      unint64_t v129 = v96;
      uint64_t v98 = sub_1DB0C4A28();
      unint64_t v100 = v99;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v101 = v156;
      id v102 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      uint64_t v149 = v98;
      unint64_t v103 = v100;
      uint64_t v104 = (void *)sub_1DB0C49E8();
      id v105 = objc_msgSend(v102, sel_initWithData_inGroup_reduction_corecryptoError_, v104, v101, 0, &v155);

      if (!v105)
      {
        int v125 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v126 = v125;
        *(unsigned char *)(v126 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v149, v103);

        uint64_t v43 = v153;
        goto LABEL_21;
      }
      sub_1DB042664(v149, v103);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v106 = (unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if ((v106 & 0x8000000000000000) != 0) {
        goto LABEL_139;
      }
      uint64_t v107 = &v129[v106];
      if (__OFADD__(v129, v106))
      {
LABEL_140:
        __break(1u);
        goto LABEL_141;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v108 = (int64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156);
      if (v108 < 0)
      {
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
      if (__OFADD__(v107, v108))
      {
LABEL_142:
        __break(1u);
        goto LABEL_143;
      }
      unint64_t v143 = v105;
      if ((uint64_t)&v107[v108] < (uint64_t)v107)
      {
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
      uint64_t v109 = sub_1DB0C4A28();
      unint64_t v9 = v110;
      int v155 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v111 = v156;
      id v112 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      uint64_t v10 = v109;
      uint64_t v113 = (void *)sub_1DB0C49E8();
      id v114 = objc_msgSend(v112, sel_initWithData_inGroup_reduction_corecryptoError_, v113, v111, 0, &v155);

      if (!v114)
      {
LABEL_91:
        int v127 = v155;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v128 = v127;
        *(unsigned char *)(v128 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v10, v9);

        goto LABEL_35;
      }
      sub_1DB042664(v10, v9);
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v154, sel_groupOrderByteCountForCP_, v156) & 0x8000000000000000) != 0)
      {
LABEL_144:
        __break(1u);
        JUMPOUT(0x1DB08BFB4);
      }
      void *v152 = v153;
      v152[1] = v142;
      v152[2] = v150;
      v152[3] = v139;
      v152[4] = v137;
      v152[5] = v135;
      v152[6] = v133;
      v152[7] = v140;
      v152[8] = v130;
      v152[9] = v143;
      v152[10] = v114;
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_94;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1DB08BFC4(void *a1, void *a2, void *a3)
{
  uint64_t v6 = self;
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  int64_t v7 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v28);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  int64_t v8 = v7;
  if (v7 + 0x4000000000000000 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  int64_t v9 = (int64_t)objc_msgSend(v6, sel_groupOrderByteCountForCP_, v28);
  if (v9 < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  BOOL v10 = __OFADD__(2 * v8, v9);
  uint64_t v11 = 2 * v8 + v9;
  if (v10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v29 = sub_1DB0C0FA4(v11);
  id v12 = objc_msgSend(a1, sel_serializedBigEndianScalar);
  if (v12)
  {
    unint64_t v13 = v12;
    uint64_t v14 = sub_1DB0C4A08();
    unint64_t v16 = v15;

    sub_1DB0C4A18();
    sub_1DB042664(v14, v16);
    id v17 = objc_msgSend(a2, sel_serializedPublicKey_, 1);
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v19 = sub_1DB0C4A08();
      unint64_t v21 = v20;

      sub_1DB0C4A18();
      sub_1DB042664(v19, v21);
      id v22 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
      if (v22)
      {
        unint64_t v23 = v22;
        uint64_t v24 = sub_1DB0C4A08();
        unint64_t v26 = v25;

        sub_1DB0C4A18();
        sub_1DB042664(v24, v26);
        return v29;
      }
      goto LABEL_14;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  uint64_t result = sub_1DB0C5358();
  __break(1u);
  return result;
}

uint64_t sub_1DB08C244(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) == 1)
  {
    id v3 = objc_msgSend(a1, sel_serializedBigEndianScalar);
    if (v3
      && (id v4 = v3,
          uint64_t v5 = sub_1DB0C4A08(),
          v4,
          uint64_t v14 = v5,
          id v6 = *(id *)(a2 + 32),
          (id v7 = objc_msgSend(v6, sel_serializedBigEndianScalar)) != 0))
    {
      int64_t v8 = v7;
      uint64_t v9 = sub_1DB0C4A08();
      unint64_t v11 = v10;

      sub_1DB0C4A18();
      sub_1DB042664(v9, v11);
      return v14;
    }
    else
    {
      uint64_t result = sub_1DB0C5358();
      __break(1u);
    }
  }
  else
  {
    sub_1DB07CAC8();
    swift_allocError();
    *unint64_t v13 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DB08C398(uint64_t a1)
{
  id v3 = self;
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v3, sel_groupOrderByteCountForCP_, v25);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v5 = result;
  if (result + 0x4000000000000000 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v3, sel_compressedx962PointByteCountForCurveParameters_, v24);
  if (result < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = 3 * result;
  if ((unsigned __int128)(result * (__int128)3) >> 64 != (3 * result) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = v6 + 2 * v5;
  if (__OFADD__(v6, 2 * v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v26 = sub_1DB0C0FA4(result);
  unint64_t v27 = v7;
  uint64_t result = (uint64_t)objc_msgSend(*(id *)a1, sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int64_t v8 = (void *)result;
  uint64_t v9 = sub_1DB0C4A08();
  unint64_t v11 = v10;

  sub_1DB0C4A18();
  sub_1DB042664(v9, v11);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v12 = (void *)result;
  uint64_t v13 = sub_1DB0C4A08();
  unint64_t v15 = v14;

  sub_1DB0C4A18();
  sub_1DB042664(v13, v15);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(a1 + 16), sel_serializedPublicKey_, 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v16 = (void *)result;
  uint64_t v17 = sub_1DB0C4A08();
  unint64_t v19 = v18;

  sub_1DB0C4A18();
  sub_1DB042664(v17, v19);
  uint64_t v20 = sub_1DB08C244(*(void **)(a1 + 24), *(void *)(a1 + 32));
  if (v1) {
    return sub_1DB042664(v26, v27);
  }
  uint64_t v22 = v20;
  unint64_t v23 = v21;
  sub_1DB0C4A18();
  sub_1DB042664(v22, v23);
  return v26;
}

id sub_1DB08C61C(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  unint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v6 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t v9 = self;
      sub_1DB0C4F38();
      sub_1DB07C914();
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      unint64_t v10 = (unint64_t)objc_msgSend(v9, sel_compressedx962PointByteCountForCurveParameters_, v13);
      if ((v10 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x1DB08C7A4);
      }
      if (v6 == v10)
      {
        sub_1DB04239C(a1, a2);
        id v3 = sub_1DB0677F8();
        sub_1DB042664(a1, a2);
      }
      else
      {
        sub_1DB07CAC8();
        swift_allocError();
        *unint64_t v11 = 3;
        swift_willThrow();
      }
      return v3;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_6;
    default:
      unint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1DB08C7B4(uint64_t a1)
{
  unint64_t v2 = self;
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  uint64_t v3 = (uint64_t)objc_msgSend(v2, sel_compressedx962PointByteCountForCurveParameters_, v72);
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v4 = 3 * v3;
  if ((unsigned __int128)(v3 * (__int128)3) >> 64 != (3 * v3) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_1DB0C4D78();
  swift_dynamicCast();
  unint64_t v5 = (unint64_t)objc_msgSend(v2, sel_groupOrderByteCountForCP_, v72);
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v6 = __OFADD__(v4, 8 * v5);
  uint64_t v7 = v4 + 8 * v5;
  if (v6)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v73 = sub_1DB0C0FA4(v7);
  id v8 = objc_msgSend(*(id *)a1, sel_serializedPublicKey_, 1);
  if (!v8)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = v8;
  uint64_t v10 = sub_1DB0C4A08();
  unint64_t v12 = v11;

  sub_1DB0C4A18();
  sub_1DB042664(v10, v12);
  id v13 = objc_msgSend(*(id *)(a1 + 8), sel_serializedPublicKey_, 1);
  if (!v13)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v14 = v13;
  uint64_t v15 = sub_1DB0C4A08();
  unint64_t v17 = v16;

  sub_1DB0C4A18();
  sub_1DB042664(v15, v17);
  id v18 = objc_msgSend(*(id *)(a1 + 16), sel_serializedBigEndianScalar);
  if (!v18) {
    goto LABEL_26;
  }
  unint64_t v19 = v18;
  uint64_t v20 = sub_1DB0C4A08();
  unint64_t v22 = v21;

  sub_1DB0C4A18();
  sub_1DB042664(v20, v22);
  unint64_t v23 = *(void **)(a1 + 24);
  uint64_t v24 = *(void **)(a1 + 32);
  uint64_t v26 = *(void **)(a1 + 40);
  uint64_t v25 = *(void **)(a1 + 48);
  uint64_t v28 = *(void **)(a1 + 56);
  unint64_t v27 = *(void **)(a1 + 64);
  unint64_t v30 = *(void **)(a1 + 72);
  uint64_t v29 = *(void **)(a1 + 80);
  id v31 = objc_msgSend(v23, sel_serializedPublicKey_, 1);
  if (!v31)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v32 = v31;
  uint64_t v33 = sub_1DB0C4A08();
  unint64_t v35 = v34;

  sub_1DB0C4A18();
  sub_1DB042664(v33, v35);
  id v36 = objc_msgSend(v24, sel_serializedBigEndianScalar);
  if (v36)
  {
    int64_t v37 = v36;
    uint64_t v38 = sub_1DB0C4A08();
    unint64_t v40 = v39;

    sub_1DB0C4A18();
    sub_1DB042664(v38, v40);
    id v41 = objc_msgSend(v26, sel_serializedBigEndianScalar);
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = sub_1DB0C4A08();
      unint64_t v45 = v44;

      sub_1DB0C4A18();
      sub_1DB042664(v43, v45);
      id v46 = objc_msgSend(v25, sel_serializedBigEndianScalar);
      if (v46)
      {
        uint64_t v47 = v46;
        uint64_t v48 = sub_1DB0C4A08();
        unint64_t v50 = v49;

        sub_1DB0C4A18();
        sub_1DB042664(v48, v50);
        id v51 = objc_msgSend(v28, sel_serializedBigEndianScalar);
        if (v51)
        {
          uint64_t v52 = v51;
          uint64_t v53 = sub_1DB0C4A08();
          unint64_t v55 = v54;

          sub_1DB0C4A18();
          sub_1DB042664(v53, v55);
          id v56 = objc_msgSend(v27, sel_serializedBigEndianScalar);
          if (v56)
          {
            uint64_t v57 = v56;
            uint64_t v58 = sub_1DB0C4A08();
            unint64_t v60 = v59;

            sub_1DB0C4A18();
            sub_1DB042664(v58, v60);
            id v61 = objc_msgSend(v30, sel_serializedBigEndianScalar);
            if (v61)
            {
              char v62 = v61;
              uint64_t v63 = sub_1DB0C4A08();
              unint64_t v65 = v64;

              sub_1DB0C4A18();
              sub_1DB042664(v63, v65);
              id v66 = objc_msgSend(v29, sel_serializedBigEndianScalar);
              if (v66)
              {
                uint64_t v67 = v66;
                uint64_t v68 = sub_1DB0C4A08();
                unint64_t v70 = v69;

                sub_1DB0C4A18();
                sub_1DB042664(v68, v70);
                return v73;
              }
            }
          }
        }
      }
    }
  }
LABEL_26:
  uint64_t result = sub_1DB0C5358();
  __break(1u);
  return result;
}

void sub_1DB08CC9C(uint64_t a1, unint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_37;
      }
      unint64_t v3 = HIDWORD(a1) - (int)a1;
LABEL_6:
      BOOL v6 = self;
      sub_1DB0C4F38();
      sub_1DB07C914();
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      int64_t v7 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v32);
      if (v7 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      int64_t v8 = v7;
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v9 = (unint64_t)objc_msgSend(v6, sel_groupOrderByteCountForCP_, v32);
      if ((v9 & 0x8000000000000000) != 0)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (__OFADD__(2 * v8, v9))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      if (v3 != 2 * v8 + v9)
      {
        sub_1DB07CAC8();
        swift_allocError();
        *unint64_t v22 = 6;
        swift_willThrow();
        return;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v6, sel_groupOrderByteCountForCP_, v32) & 0x8000000000000000) != 0) {
        goto LABEL_32;
      }
      uint64_t v10 = sub_1DB0C4A28();
      unint64_t v12 = v11;
      int v31 = 0;
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v13 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v14 = (void *)sub_1DB0C49E8();
      id v15 = objc_msgSend(v13, sel_initWithData_inGroup_reduction_corecryptoError_, v14, v32, 0, &v31);

      if (!v15)
      {
        int v23 = v31;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v24 = v23;
        *(unsigned char *)(v24 + 4) = 0;
        swift_willThrow();
        sub_1DB042664(v10, v12);
        return;
      }
      sub_1DB042664(v10, v12);
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v16 = (unint64_t)objc_msgSend(v6, sel_groupOrderByteCountForCP_, v32);
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      unint64_t v17 = (char *)v16;
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v18 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v32);
      if (v18 < 0)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      if (__OFADD__(v17, v18))
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      if ((uint64_t)&v17[v18] < (uint64_t)v17) {
        goto LABEL_36;
      }
      uint64_t v19 = sub_1DB0C4A28();
      unint64_t v21 = v20;
      sub_1DB0677F8();
      sub_1DB042664(v19, v21);
      if (v2)
      {

        return;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      unint64_t v25 = (unint64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v32);
      if ((v25 & 0x8000000000000000) != 0) {
        goto LABEL_39;
      }
      uint64_t v26 = &v17[v25];
      if (__OFADD__(v17, v25))
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      sub_1DB0C4D78();
      swift_dynamicCast();
      int64_t v27 = (int64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v32);
      if (v27 < 0)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      if (__OFADD__(v26, v27))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if ((uint64_t)&v26[v27] < (uint64_t)v26)
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
      }
      uint64_t v28 = sub_1DB0C4A28();
      unint64_t v30 = v29;
      sub_1DB0677F8();
      sub_1DB042664(v28, v30);
      sub_1DB0C4D78();
      swift_dynamicCast();
      if (((unint64_t)objc_msgSend(v6, sel_compressedx962PointByteCountForCurveParameters_, v32) & 0x8000000000000000) != 0) {
        goto LABEL_44;
      }
      return;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      unint64_t v3 = v4 - v5;
      if (!__OFSUB__(v4, v5)) {
        goto LABEL_6;
      }
      goto LABEL_38;
    case 3uLL:
      goto LABEL_6;
    default:
      unint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

id Scrypt.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id Scrypt.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Scrypt();
  return objc_msgSendSuper2(&v2, sel_init);
}

id Scrypt.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Scrypt();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _s16CryptoKitPrivate6ScryptC9deriveKey8password4salt10outputSize4cost05blockJ015parallelizationSo6NSDataCSgAL_AMSis6UInt64Vs6UInt32VAQtFZ_0(void *a1, void *a2, size_t a3)
{
  uint64_t result = ccscrypt_storage_size();
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  size_t v7 = result;
  if (result)
  {
    uint64_t v8 = sub_1DB0C51B8();
    *(void *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), v7);
    if ((a3 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_4:
  if (!a3)
  {
LABEL_8:
    uint64_t v9 = MEMORY[0x1E4FBC860];
    goto LABEL_9;
  }
  uint64_t v9 = sub_1DB0C51B8();
  *(void *)(v9 + 16) = a3;
  bzero((void *)(v9 + 32), a3);
LABEL_9:
  objc_msgSend(a1, sel_length);
  objc_msgSend(a1, sel_bytes);
  if (a2)
  {
    objc_msgSend(a2, sel_length);
    objc_msgSend(a2, sel_bytes);
  }
  sub_1DB0C5188();
  sub_1DB0C5188();
  int v10 = ccscrypt();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v10)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, v9 + 32, a3, a3, v9 + 32);
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v11;
}

uint64_t type metadata accessor for Scrypt()
{
  return self;
}

uint64_t PIR.KeywordPirClient.init(pirParams:hashFunctionCount:secretKey:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  char v7 = *(unsigned char *)result;
  char v8 = *(unsigned char *)(result + 1);
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v10 = *(void *)(result + 16);
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v13 = *(void *)(result + 40);
  uint64_t v12 = *(void *)(result + 48);
  char v14 = *(unsigned char *)(result + 56);
  char v15 = *(unsigned char *)(result + 57);
  uint64_t v17 = *a3;
  unint64_t v16 = a3[1];
  if (*(unsigned char *)(result + 2) != 2)
  {
    char v30 = *(unsigned char *)(result + 2);
    char v31 = *(unsigned char *)(result + 57);
    int v47 = *(unsigned __int8 *)(result + 56);
    uint64_t v32 = v12;
    uint64_t v33 = v10;
    unint64_t v34 = v9;
    uint64_t v35 = a4;
    uint64_t v23 = *(void *)(result + 32);
    LOBYTE(v38) = v7;
    BYTE1(v38) = v8;
    _s12ParamContextCMa();
    swift_allocObject();
    sub_1DB0C5188();
    uint64_t v24 = sub_1DB06B4F8((char *)&v38);
    if (v4)
    {
      sub_1DB042664(v17, v16);
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v25 = v24;
    uint64_t v29 = v23;
    uint64_t v38 = v17;
    unint64_t v39 = v16;
    goto LABEL_9;
  }
  v49[0] = *(unsigned char *)result;
  v49[1] = v8;
  char v48 = 2;
  uint64_t v18 = v13 * a2;
  if ((unsigned __int128)(v13 * (__int128)a2) >> 64 == (v13 * a2) >> 63)
  {
    unint64_t v36 = v16;
    uint64_t v19 = v9;
    uint64_t v20 = v10;
    uint64_t v21 = v12;
    char v22 = v14;
    sub_1DB0C5188();
    PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)(v49, &v48, v19, v20, v11, v18, v21, v22, (uint64_t)&v38, v15);
    if (v5)
    {
      sub_1DB042664(v17, v36);
      return swift_bridgeObjectRelease();
    }
    uint64_t v35 = a4;
    swift_bridgeObjectRelease();
    char v7 = v38;
    char v8 = BYTE1(v38);
    char v26 = BYTE2(v38);
    uint64_t v11 = v41;
    uint64_t v33 = v40;
    unint64_t v34 = v39;
    uint64_t v27 = v42;
    uint64_t v13 = v43;
    uint64_t v32 = v44;
    int v47 = v45;
    char v31 = v46;
    _s12ParamContextCMa();
    swift_allocObject();
    sub_1DB0C5188();
    uint64_t v25 = sub_1DB06B4F8((char *)&v38);
    char v30 = v26;
    uint64_t v29 = v27;
    uint64_t v38 = v17;
    unint64_t v39 = v36;
LABEL_9:
    swift_retain_n();
    uint64_t v28 = sub_1DB0A208C(&v38, v25);
    sub_1DB0C5188();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)uint64_t v35 = a2;
    *(unsigned char *)(v35 + 8) = v7;
    *(unsigned char *)(v35 + 9) = v8;
    *(unsigned char *)(v35 + 10) = v30;
    *(void *)(v35 + 16) = v34;
    *(void *)(v35 + 24) = v33;
    *(void *)(v35 + 32) = v11;
    *(void *)(v35 + 40) = v29;
    *(void *)(v35 + 48) = v13;
    *(void *)(v35 + 56) = v32;
    *(unsigned char *)(v35 + 64) = v47;
    *(unsigned char *)(v35 + 65) = v31;
    *(void *)(v35 + 72) = v25;
    *(void *)(v35 + 80) = v28;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t PIR.KeywordPirClient.generateGaloisKey()@<X0>(void *a1@<X8>)
{
  return PIR.IndexPirClient.generateGaloisKey()(a1);
}

uint64_t PIR.KeywordPirClient.generateRelinKey()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 80);
  swift_retain();
  swift_retain();
  return sub_1DB0B434C(v3, a1);
}

char *PIR.KeywordPirClient.query(keyword:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  char v5 = *(unsigned char *)(v2 + 9);
  int v6 = *(unsigned __int8 *)(v2 + 10);
  unint64_t v8 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v11 = *(void *)(v2 + 48);
  uint64_t v20 = *(void *)(v2 + 56);
  char v21 = *(unsigned char *)(v2 + 64);
  char v22 = *(unsigned char *)(v2 + 65);
  uint64_t v12 = *(void *)(v2 + 72);
  uint64_t v13 = *(void *)(v2 + 80);
  uint64_t v23 = v12;
  char v14 = sub_1DB04AA44(a1, a2, v8, v3);
  char v15 = v14;
  if (v6 == 2)
  {
    char v24 = v4;
    char v25 = v5;
    char v26 = 2;
    unint64_t v27 = v8;
    uint64_t v28 = v7;
    uint64_t v29 = v10;
    uint64_t v30 = v9;
    uint64_t v31 = v11;
    uint64_t v32 = v20;
    char v33 = v21;
    char v34 = v22;
    uint64_t v35 = v23;
    uint64_t v36 = v13;
    sub_1DB0C5188();
    swift_retain();
    swift_retain();
    unint64_t v16 = (char *)sub_1DB0AE044(v15);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v24 = v4;
    char v25 = v5;
    char v26 = v6;
    unint64_t v27 = v8;
    uint64_t v28 = v7;
    uint64_t v29 = v10;
    uint64_t v30 = v9;
    uint64_t v31 = v11;
    uint64_t v32 = v20;
    char v33 = v21;
    char v34 = v22;
    uint64_t v35 = v23;
    uint64_t v36 = v13;
    unint64_t v16 = &v24;
    uint64_t v17 = v37;
    uint64_t v18 = sub_1DB0AE460((uint64_t)v14);
    if (!v17) {
      return (char *)v18;
    }
  }
  return v16;
}

uint64_t PIR.KeywordPirClient.decrypt(replies:keyword:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)v3;
  char v225 = *(unsigned char *)(v3 + 8);
  unsigned int v239 = *(unsigned __int8 *)(v3 + 9);
  unsigned int v8 = *(unsigned __int8 *)(v3 + 10);
  unint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 32);
  uint64_t v221 = *(void *)(v3 + 40);
  uint64_t v223 = *(void *)(v3 + 24);
  uint64_t v232 = *(void *)(v3 + 48);
  uint64_t v235 = *(void *)(v3 + 56);
  char v219 = *(unsigned char *)(v3 + 64);
  LOBYTE(v11) = *(unsigned char *)(v3 + 65);
  uint64_t v13 = *(void *)(v3 + 72);
  uint64_t v12 = *(void *)(v3 + 80);
  unint64_t v229 = sub_1DB04AA44(a2, a3, v9, v7);
  uint64_t v14 = sub_1DB04A664(a2, a3);
  char v213 = v8;
  if (v8 <= 1)
  {
    char v200 = v11;
    if (!*(void *)(a1 + 16) || (uint64_t v15 = v243, (v198 = *((void *)v229 + 2)) == 0))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v16 = v9;
    uint64_t v197 = *(void *)(a1 + 16);
    uint64_t v208 = v14;
    uint64_t v193 = a1 + 32;
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = v229 + 32;
    sub_1DB0C5188();
    sub_1DB0C5188();
    unint64_t v19 = 0;
    unint64_t v9 = 1;
    uint64_t v14 = v10;
    uint64_t v195 = v12;
    uint64_t v196 = v10;
    uint64_t v227 = v13;
    unint64_t v194 = v16;
    char v20 = v225;
    uint64_t v10 = v239;
    uint64_t v21 = v223;
    a1 = v232;
    uint64_t v11 = v235;
    while (2)
    {
      uint64_t v22 = *(void *)&v18[8 * v19];
      unint64_t v199 = v9;
      LOBYTE(__dst) = v20;
      BYTE1(__dst) = v10;
      BYTE2(__dst) = v213;
      *((void *)&__dst + 1) = v16;
      uint64_t v252 = v21;
      uint64_t v253 = v14;
      uint64_t v254 = v221;
      uint64_t v255 = a1;
      uint64_t v256 = v11;
      char v257 = v219;
      char v258 = v200;
      uint64_t v259 = v13;
      uint64_t v260 = v12;
      sub_1DB0C5188();
      swift_retain();
      swift_retain();
      uint64_t v210 = (uint64_t)PIR.IndexPirClient.decrypt(reply:index:)((void *)v17, v22);
      if (v15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v17;
      }
      unint64_t v211 = v23;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      id v250 = (char *)MEMORY[0x1E4FBC860];
      switch(v211 >> 62)
      {
        case 1uLL:
          if (v210 >> 32 < (int)v210) {
            goto LABEL_290;
          }
          swift_retain();
          sub_1DB04239C(v210, v211);
          uint64_t v45 = sub_1DB0C48A8();
          if (v45)
          {
            uint64_t v46 = v45;
            uint64_t v47 = sub_1DB0C48D8();
            if (__OFSUB__((int)v210, v47)) {
              goto LABEL_296;
            }
            char v48 = (unsigned char *)(v46 + (int)v210 - v47);
          }
          else
          {
            char v48 = 0;
          }
          uint64_t v71 = sub_1DB0C48C8();
          if (v71 >= (v210 >> 32) - (int)v210) {
            uint64_t v72 = (v210 >> 32) - (int)v210;
          }
          else {
            uint64_t v72 = v71;
          }
          uint64_t v217 = v72;
          if (!v48) {
            goto LABEL_305;
          }
          uint64_t v243 = 0;
          int v207 = *v48;
          if (*v48)
          {
            int v73 = 0;
            uint64_t v203 = (uint64_t)&v48[v72];
            uint64_t v17 = v72;
            uint64_t v74 = 1;
            while (1)
            {
              uint64_t v75 = v74 + 8;
              if (__OFADD__(v74, 8)) {
                goto LABEL_247;
              }
              uint64_t v76 = v74 + 10;
              if (__OFADD__(v75, 2)) {
                goto LABEL_249;
              }
              uint64_t v77 = *(void *)&v48[v74];
              uint64_t v78 = *(unsigned __int16 *)&v48[v75];
              uint64_t v247 = v74 + 10;
              if (v78)
              {
                if (v78 <= 0xE)
                {
                  uint64_t v80 = 0;
                  uint64_t v81 = v78 << 48;
                }
                else
                {
                  sub_1DB0C48F8();
                  swift_allocObject();
                  uint64_t v79 = sub_1DB0C48B8();
                  uint64_t v80 = v78 << 32;
                  uint64_t v81 = v79 | 0x4000000000000000;
                }
              }
              else
              {
                uint64_t v80 = 0;
                uint64_t v81 = 0xC000000000000000;
              }
              *(void *)&long long __dst = v80;
              *((void *)&__dst + 1) = v81;
              uint64_t v74 = v76 + v78;
              if (__OFADD__(v76, v78)) {
                goto LABEL_251;
              }
              if (v217 < v74) {
                break;
              }
              if (v74 < v76) {
                goto LABEL_254;
              }
              if (v76 < 0 || v217 < v76) {
                goto LABEL_256;
              }
              if (v217 < v74) {
                goto LABEL_258;
              }
              sub_1DB08F418(&__dst, (uint64_t)v48, v203, &v247, v78);
              long long v82 = __dst;
              sub_1DB08F784();
              uint64_t v41 = v250;
              unint64_t v84 = *((void *)v250 + 2);
              unint64_t v83 = *((void *)v250 + 3);
              if (v84 >= v83 >> 1)
              {
                uint64_t v41 = sub_1DB07E88C((char *)(v83 > 1), v84 + 1, 1, v250);
                id v250 = v41;
              }
              ++v73;
              *((void *)v41 + 2) = v84 + 1;
              id v85 = &v41[24 * v84];
              *((void *)v85 + 4) = v77;
              *(_OWORD *)(v85 + 40) = v82;
              uint64_t v13 = v227;
              uint64_t v10 = v239;
              uint64_t v11 = v235;
              if (v73 == v207) {
                goto LABEL_96;
              }
            }
            sub_1DB04D0D4();
            swift_allocError();
            *(_DWORD *)uint64_t v186 = 5;
            *(unsigned char *)(v186 + 4) = 1;
            swift_willThrow();
            sub_1DB042664(__dst, *((unint64_t *)&__dst + 1));
            uint64_t v182 = v210;
            unint64_t v185 = v211;
            sub_1DB042664(v210, v211);
            uint64_t v184 = v210;
            goto LABEL_236;
          }
          uint64_t v41 = (char *)MEMORY[0x1E4FBC860];
LABEL_96:
          sub_1DB042664(v210, v211);
          uint64_t v86 = v210;
          unint64_t v87 = v211;
          goto LABEL_98;
        case 2uLL:
          uint64_t v49 = *(void *)(v210 + 16);
          uint64_t v50 = *(void *)(v210 + 24);
          sub_1DB04239C(v210, v211);
          swift_retain();
          swift_retain();
          uint64_t v51 = sub_1DB0C48A8();
          if (v51)
          {
            uint64_t v52 = v51;
            uint64_t v53 = sub_1DB0C48D8();
            if (__OFSUB__(v49, v53)) {
              goto LABEL_295;
            }
            unint64_t v216 = (unsigned char *)(v52 + v49 - v53);
            BOOL v54 = __OFSUB__(v50, v49);
            uint64_t v55 = v50 - v49;
            if (v54) {
              goto LABEL_291;
            }
          }
          else
          {
            unint64_t v216 = 0;
            BOOL v54 = __OFSUB__(v50, v49);
            uint64_t v55 = v50 - v49;
            if (v54) {
              goto LABEL_291;
            }
          }
          uint64_t v243 = 0;
          uint64_t v56 = sub_1DB0C48C8();
          if (v56 >= v55) {
            uint64_t v57 = v55;
          }
          else {
            uint64_t v57 = v56;
          }
          uint64_t v206 = v57;
          uint64_t v17 = (uint64_t)v216;
          if (!v216) {
            goto LABEL_304;
          }
          int v205 = *v216;
          if (*v216)
          {
            int v58 = 0;
            uint64_t v202 = (uint64_t)&v216[v57];
            uint64_t v59 = 1;
            while (1)
            {
              uint64_t v60 = v59 + 8;
              if (__OFADD__(v59, 8)) {
                break;
              }
              uint64_t v61 = v59 + 10;
              if (__OFADD__(v60, 2)) {
                goto LABEL_248;
              }
              uint64_t v62 = *(void *)(v17 + v59);
              uint64_t v63 = *(unsigned __int16 *)(v17 + v60);
              uint64_t v247 = v59 + 10;
              if (v63)
              {
                if (v63 <= 0xE)
                {
                  uint64_t v65 = 0;
                  uint64_t v66 = v63 << 48;
                }
                else
                {
                  sub_1DB0C48F8();
                  swift_allocObject();
                  uint64_t v64 = sub_1DB0C48B8();
                  uint64_t v65 = v63 << 32;
                  uint64_t v66 = v64 | 0x4000000000000000;
                }
              }
              else
              {
                uint64_t v65 = 0;
                uint64_t v66 = 0xC000000000000000;
              }
              *(void *)&long long __dst = v65;
              *((void *)&__dst + 1) = v66;
              uint64_t v59 = v61 + v63;
              if (__OFADD__(v61, v63)) {
                goto LABEL_250;
              }
              if (v206 < v59)
              {
                sub_1DB04D0D4();
                swift_allocError();
                *(_DWORD *)uint64_t v183 = 5;
                *(unsigned char *)(v183 + 4) = 1;
                swift_willThrow();
                sub_1DB042664(__dst, *((unint64_t *)&__dst + 1));
                swift_release();
                uint64_t v182 = v210;
                swift_release();
LABEL_234:
                uint64_t v184 = v182;
                unint64_t v185 = v211;
LABEL_236:
                sub_1DB042664(v184, v185);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v187 = v182;
                goto LABEL_242;
              }
              if (v59 < v61) {
                goto LABEL_253;
              }
              if (v61 < 0 || v206 < v61) {
                goto LABEL_255;
              }
              if (v206 < v59) {
                goto LABEL_257;
              }
              sub_1DB08F418(&__dst, v17, v202, &v247, v63);
              long long v67 = __dst;
              sub_1DB08F784();
              uint64_t v41 = v250;
              unint64_t v69 = *((void *)v250 + 2);
              unint64_t v68 = *((void *)v250 + 3);
              if (v69 >= v68 >> 1)
              {
                uint64_t v41 = sub_1DB07E88C((char *)(v68 > 1), v69 + 1, 1, v250);
                id v250 = v41;
              }
              ++v58;
              *((void *)v41 + 2) = v69 + 1;
              unint64_t v70 = &v41[24 * v69];
              *((void *)v70 + 4) = v62;
              *(_OWORD *)(v70 + 40) = v67;
              uint64_t v10 = v239;
              uint64_t v17 = (uint64_t)v216;
              if (v58 == v205)
              {
                swift_release();
                uint64_t v88 = v210;
                swift_release();
                uint64_t v13 = v227;
                uint64_t v11 = v235;
                goto LABEL_97;
              }
            }
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
LABEL_259:
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
LABEL_264:
            __break(1u);
LABEL_265:
            __break(1u);
LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
            goto LABEL_274;
          }
          swift_release();
          uint64_t v88 = v210;
          swift_release();
          uint64_t v41 = (char *)MEMORY[0x1E4FBC860];
LABEL_97:
          uint64_t v86 = v88;
          unint64_t v87 = v211;
LABEL_98:
          sub_1DB042664(v86, v87);
          a1 = v232;
LABEL_99:
          uint64_t v89 = *((void *)v41 + 2);
          if (v89)
          {
            uint64_t v90 = (unint64_t *)(v41 + 48);
            do
            {
              if (*(v90 - 2) == v208)
              {
                uint64_t v17 = *(v90 - 1);
                sub_1DB04239C(v17, *v90);
                sub_1DB042664(v210, v211);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return v17;
              }
              v90 += 3;
              --v89;
            }
            while (v89);
          }
          sub_1DB042664(v210, v211);
          swift_bridgeObjectRelease();
          if (v199 == v197 || v199 == v198)
          {
            swift_bridgeObjectRelease();
            goto LABEL_228;
          }
          uint64_t v15 = 0;
          unint64_t v9 = v199 + 1;
          uint64_t v17 = *(void *)(v193 + 8 * v199);
          unint64_t v91 = *((void *)v229 + 2);
          sub_1DB0C5188();
          unint64_t v19 = v199;
          BOOL v92 = v199 >= v91;
          uint64_t v12 = v195;
          uint64_t v14 = v196;
          uint64_t v18 = v229 + 32;
          char v20 = v225;
          uint64_t v21 = v223;
          unint64_t v16 = v194;
          if (!v92) {
            continue;
          }
          __break(1u);
          break;
        case 3uLL:
          sub_1DB042664(v210, v211);
          uint64_t v41 = (char *)MEMORY[0x1E4FBC860];
          goto LABEL_99;
        default:
          uint64_t v247 = v210;
          int v248 = v211;
          __int16 v249 = WORD2(v211);
          int v24 = v210;
          uint64_t v243 = 0;
          if ((_BYTE)v210)
          {
            int v25 = 0;
            uint64_t v204 = (char *)&v247 + BYTE6(v211);
            uint64_t v26 = 1;
            while (1)
            {
              uint64_t v27 = *(uint64_t *)((char *)&v247 + v26);
              uint64_t v28 = *(unsigned __int16 *)((char *)&v247 + v26 + 8);
              uint64_t v17 = v26 + 10;
              uint64_t v246 = v26 + 10;
              if (v28)
              {
                if (v28 <= 0xE)
                {
                  uint64_t v29 = 0;
                  unint64_t v30 = v28 << 48;
                }
                else
                {
                  sub_1DB0C48F8();
                  swift_allocObject();
                  uint64_t v29 = v28 << 32;
                  unint64_t v30 = sub_1DB0C48B8() | 0x4000000000000000;
                }
              }
              else
              {
                uint64_t v29 = 0;
                unint64_t v30 = 0xC000000000000000;
              }
              uint64_t v26 = v17 + v28;
              if (BYTE6(v211) < v17 + v28)
              {
                sub_1DB04D0D4();
                swift_allocError();
                *(_DWORD *)uint64_t v181 = 5;
                *(unsigned char *)(v181 + 4) = 1;
                swift_willThrow();
                sub_1DB042664(v29, v30);
                uint64_t v182 = v210;
                goto LABEL_234;
              }
              if (v26 < v17) {
                goto LABEL_252;
              }
              int v215 = v25 + 1;
              switch(v30 >> 62)
              {
                case 1uLL:
                  LODWORD(__dst) = 0;
                  DWORD1(__dst) = HIDWORD(v29);
                  *((void *)&__dst + 1) = v30 & 0x3FFFFFFFFFFFFFFFLL;
                  sub_1DB08F6AC((int *)&__dst, (uint64_t)&v247, (uint64_t)v204, &v246, v28);
                  uint64_t v29 = __dst;
                  unint64_t v30 = *((void *)&__dst + 1) | 0x4000000000000000;
                  uint64_t v10 = v239;
                  goto LABEL_30;
                case 2uLL:
                  uint64_t v201 = v27;
                  *(void *)&long long __dst = v29;
                  *((void *)&__dst + 1) = v30 & 0x3FFFFFFFFFFFFFFFLL;
                  sub_1DB0C4938();
                  uint64_t v32 = *((void *)&__dst + 1);
                  uint64_t v29 = __dst;
                  uint64_t v34 = *(void *)(__dst + 16);
                  uint64_t v33 = *(void *)(__dst + 24);
                  uint64_t v35 = sub_1DB0C48A8();
                  if (!v35)
                  {
                    __break(1u);
LABEL_302:
                    __break(1u);
LABEL_303:
                    __break(1u);
LABEL_304:
                    __break(1u);
LABEL_305:
                    __break(1u);
LABEL_306:
                    __break(1u);
LABEL_307:
                    __break(1u);
                    JUMPOUT(0x1DB08F3D8);
                  }
                  uint64_t v36 = v35;
                  uint64_t v37 = sub_1DB0C48D8();
                  uint64_t v38 = v34 - v37;
                  if (__OFSUB__(v34, v37)) {
                    goto LABEL_277;
                  }
                  if (__OFSUB__(v33, v34)) {
                    goto LABEL_280;
                  }
                  sub_1DB0C48C8();
                  uint64_t v39 = v17 + v28;
                  uint64_t v27 = v201;
                  if (__OFADD__(v17, v28)) {
                    goto LABEL_282;
                  }
                  uint64_t v10 = v239;
                  int v24 = v210;
                  if (v39 < v17) {
                    goto LABEL_283;
                  }
                  sub_1DB0567EC(v17, v39, (uint64_t)&v247, (uint64_t)v204, v36 + v38);
                  unint64_t v30 = v32 | 0x8000000000000000;
LABEL_30:
                  sub_1DB08F784();
                  uint64_t v41 = v250;
                  unint64_t v43 = *((void *)v250 + 2);
                  unint64_t v42 = *((void *)v250 + 3);
                  if (v43 >= v42 >> 1)
                  {
                    uint64_t v41 = sub_1DB07E88C((char *)(v42 > 1), v43 + 1, 1, v250);
                    id v250 = v41;
                  }
                  *((void *)v41 + 2) = v43 + 1;
                  uint64_t v44 = &v41[24 * v43];
                  *((void *)v44 + 4) = v27;
                  *((void *)v44 + 5) = v29;
                  *((void *)v44 + 6) = v30;
                  int v25 = v215;
                  uint64_t v13 = v227;
                  a1 = v232;
                  uint64_t v11 = v235;
                  if (v215 == v24) {
                    goto LABEL_45;
                  }
                  break;
                case 3uLL:
                  *(void *)((char *)&__dst + 7) = 0;
                  *(void *)&long long __dst = 0;
                  uint64_t v40 = v17 + v28;
                  if (__OFADD__(v17, v28)) {
                    goto LABEL_278;
                  }
                  uint64_t v10 = v239;
                  if (v40 < v17) {
                    goto LABEL_281;
                  }
                  sub_1DB0567EC(v17, v40, (uint64_t)&v247, (uint64_t)v204, (uint64_t)&__dst);
                  goto LABEL_30;
                default:
                  LODWORD(__dst) = 0;
                  BYTE4(__dst) = BYTE4(v29);
                  BYTE5(__dst) = BYTE5(v29);
                  WORD3(__dst) = 0;
                  WORD4(__dst) = v30;
                  BYTE10(__dst) = BYTE2(v30);
                  BYTE11(__dst) = BYTE3(v30);
                  BYTE12(__dst) = BYTE4(v30);
                  BYTE13(__dst) = BYTE5(v30);
                  BYTE14(__dst) = BYTE6(v30);
                  uint64_t v31 = v17 + v28;
                  if (__OFADD__(v17, v28)) {
                    goto LABEL_276;
                  }
                  uint64_t v10 = v239;
                  if (v31 < v17) {
                    goto LABEL_279;
                  }
                  sub_1DB0567EC(v17, v31, (uint64_t)&v247, (uint64_t)v204, (uint64_t)&__dst);
                  uint64_t v29 = __dst;
                  unint64_t v30 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
                  goto LABEL_30;
              }
            }
          }
          uint64_t v41 = (char *)MEMORY[0x1E4FBC860];
LABEL_45:
          sub_1DB042664(v210, v211);
          goto LABEL_99;
      }
      break;
    }
  }
  LOBYTE(__dst) = v225;
  BYTE1(__dst) = v239;
  BYTE2(__dst) = 2;
  *((void *)&__dst + 1) = v9;
  uint64_t v252 = v223;
  uint64_t v253 = v10;
  uint64_t v254 = v221;
  uint64_t v255 = v232;
  uint64_t v256 = v235;
  char v257 = v219;
  char v258 = v11;
  uint64_t v259 = v13;
  uint64_t v260 = v12;
  if (!*(void *)(a1 + 16))
  {
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
  }
  uint64_t v209 = v14;
  uint64_t v93 = *(void *)(a1 + 32);
  sub_1DB0C5188();
  swift_retain();
  swift_retain();
  sub_1DB0C5188();
  uint64_t v17 = v12;
  uint64_t v94 = PIR.IndexPirClient.decryptVectorizedPirReply(reply:indices:)(v93, (uint64_t)v229);
  uint64_t v95 = v243;
  if (v243)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return v17;
  }
  uint64_t v96 = v94;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v214 = *(void *)(v96 + 16);
  if (!v214)
  {
LABEL_228:
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v97 = 0;
  uint64_t v220 = v96 + 32;
  uint64_t v224 = v96;
  while (2)
  {
    if (v97 >= *(void *)(v96 + 16)) {
      goto LABEL_275;
    }
    uint64_t v98 = (uint64_t *)(v220 + 16 * v97);
    uint64_t v100 = *v98;
    unint64_t v99 = v98[1];
    id v250 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v226 = v99;
    uint64_t v228 = v100;
    unint64_t v222 = v97 + 1;
    switch(v99 >> 62)
    {
      case 1uLL:
        if (v100 >> 32 < (int)v100) {
          goto LABEL_293;
        }
        swift_retain_n();
        sub_1DB04239C(v100, v99);
        uint64_t v139 = sub_1DB0C48A8();
        if (v139)
        {
          uint64_t v140 = v139;
          uint64_t v141 = sub_1DB0C48D8();
          if (__OFSUB__((int)v100, v141)) {
            goto LABEL_300;
          }
          id v142 = (unsigned char *)(v140 + (int)v100 - v141);
        }
        else
        {
          id v142 = 0;
        }
        uint64_t v163 = sub_1DB0C48C8();
        if (v163 >= (v100 >> 32) - (int)v100) {
          uint64_t v164 = (v100 >> 32) - (int)v100;
        }
        else {
          uint64_t v164 = v163;
        }
        uint64_t v242 = v164;
        if (!v142) {
          goto LABEL_307;
        }
        int v238 = *v142;
        if (*v142)
        {
          int v165 = 0;
          v231 = v142;
          uint64_t v234 = (uint64_t)&v142[v164];
          uint64_t v166 = 1;
          while (1)
          {
            uint64_t v167 = v166 + 8;
            if (__OFADD__(v166, 8)) {
              goto LABEL_260;
            }
            uint64_t v17 = v95;
            uint64_t v168 = v166 + 10;
            if (__OFADD__(v167, 2)) {
              goto LABEL_262;
            }
            uint64_t v169 = *(void *)&v142[v166];
            uint64_t v170 = *(unsigned __int16 *)&v142[v167];
            uint64_t v247 = v166 + 10;
            if (v170)
            {
              if (v170 <= 0xE)
              {
                uint64_t v172 = 0;
                uint64_t v173 = v170 << 48;
              }
              else
              {
                sub_1DB0C48F8();
                swift_allocObject();
                uint64_t v171 = sub_1DB0C48B8();
                uint64_t v172 = v170 << 32;
                uint64_t v173 = v171 | 0x4000000000000000;
              }
            }
            else
            {
              uint64_t v172 = 0;
              uint64_t v173 = 0xC000000000000000;
            }
            *(void *)&long long __dst = v172;
            *((void *)&__dst + 1) = v173;
            uint64_t v166 = v168 + v170;
            if (__OFADD__(v168, v170)) {
              goto LABEL_264;
            }
            if (v242 < v166) {
              break;
            }
            if (v166 < v168) {
              goto LABEL_269;
            }
            if (v168 < 0) {
              goto LABEL_271;
            }
            uint64_t v174 = v17;
            sub_1DB08F418(&__dst, (uint64_t)v142, v234, &v247, v170);
            long long v175 = __dst;
            sub_1DB08F784();
            unint64_t v103 = v250;
            unint64_t v177 = *((void *)v250 + 2);
            unint64_t v176 = *((void *)v250 + 3);
            if (v177 >= v176 >> 1)
            {
              unint64_t v103 = sub_1DB07E88C((char *)(v176 > 1), v177 + 1, 1, v250);
              id v250 = v103;
            }
            ++v165;
            *((void *)v103 + 2) = v177 + 1;
            id v178 = &v103[24 * v177];
            *((void *)v178 + 4) = v169;
            *(_OWORD *)(v178 + 40) = v175;
            uint64_t v95 = v174;
            id v142 = v231;
            if (v165 == v238) {
              goto LABEL_219;
            }
          }
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v190 = 5;
          *(unsigned char *)(v190 + 4) = 1;
          swift_willThrow();
          sub_1DB042664(__dst, *((unint64_t *)&__dst + 1));
          unint64_t v185 = v226;
          uint64_t v100 = v228;
          sub_1DB042664(v228, v226);
          uint64_t v189 = v228;
LABEL_239:
          sub_1DB042664(v189, v185);
          goto LABEL_241;
        }
        unint64_t v103 = (char *)MEMORY[0x1E4FBC860];
LABEL_219:
        uint64_t v100 = v228;
        sub_1DB042664(v228, v226);
        sub_1DB042664(v228, v226);
        goto LABEL_221;
      case 2uLL:
        uint64_t v143 = *(void *)(v100 + 16);
        uint64_t v17 = *(void *)(v100 + 24);
        sub_1DB04239C(v100, v99);
        swift_retain_n();
        swift_retain_n();
        uint64_t v144 = sub_1DB0C48A8();
        uint64_t v245 = v95;
        if (v144)
        {
          uint64_t v145 = v144;
          uint64_t v146 = sub_1DB0C48D8();
          if (__OFSUB__(v143, v146)) {
            goto LABEL_299;
          }
          unint64_t v147 = (unsigned char *)(v145 + v143 - v146);
        }
        else
        {
          unint64_t v147 = 0;
        }
        BOOL v54 = __OFSUB__(v17, v143);
        uint64_t v148 = v17 - v143;
        if (v54) {
          goto LABEL_294;
        }
        uint64_t v149 = sub_1DB0C48C8();
        if (v149 >= v148) {
          uint64_t v150 = v148;
        }
        else {
          uint64_t v150 = v149;
        }
        uint64_t v241 = v150;
        if (!v147) {
          goto LABEL_306;
        }
        int v237 = *v147;
        if (*v147)
        {
          int v151 = 0;
          uint64_t v233 = (uint64_t)&v147[v150];
          uint64_t v152 = 1;
          while (1)
          {
            uint64_t v153 = v152 + 8;
            if (__OFADD__(v152, 8)) {
              goto LABEL_259;
            }
            uint64_t v154 = v152 + 10;
            if (__OFADD__(v153, 2)) {
              goto LABEL_261;
            }
            uint64_t v155 = *(void *)&v147[v152];
            uint64_t v156 = *(unsigned __int16 *)&v147[v153];
            uint64_t v247 = v152 + 10;
            if (v156)
            {
              if (v156 <= 0xE)
              {
                uint64_t v158 = 0;
                uint64_t v159 = v156 << 48;
              }
              else
              {
                sub_1DB0C48F8();
                swift_allocObject();
                uint64_t v157 = sub_1DB0C48B8();
                uint64_t v158 = v156 << 32;
                uint64_t v159 = v157 | 0x4000000000000000;
              }
            }
            else
            {
              uint64_t v158 = 0;
              uint64_t v159 = 0xC000000000000000;
            }
            *(void *)&long long __dst = v158;
            *((void *)&__dst + 1) = v159;
            uint64_t v152 = v154 + v156;
            if (__OFADD__(v154, v156)) {
              goto LABEL_263;
            }
            if (v241 < v152) {
              break;
            }
            if (v152 < v154) {
              goto LABEL_268;
            }
            if (v154 < 0) {
              goto LABEL_270;
            }
            sub_1DB08F418(&__dst, (uint64_t)v147, v233, &v247, v156);
            long long v160 = __dst;
            sub_1DB08F784();
            unint64_t v103 = v250;
            uint64_t v17 = *((void *)v250 + 2);
            unint64_t v161 = *((void *)v250 + 3);
            if (v17 >= v161 >> 1)
            {
              unint64_t v103 = sub_1DB07E88C((char *)(v161 > 1), v17 + 1, 1, v250);
              id v250 = v103;
            }
            ++v151;
            *((void *)v103 + 2) = v17 + 1;
            unint64_t v162 = &v103[24 * v17];
            *((void *)v162 + 4) = v155;
            *(_OWORD *)(v162 + 40) = v160;
            if (v151 == v237)
            {
              swift_release();
              uint64_t v100 = v228;
              swift_release();
              goto LABEL_220;
            }
          }
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v188 = 5;
          *(unsigned char *)(v188 + 4) = 1;
          swift_willThrow();
          sub_1DB042664(__dst, *((unint64_t *)&__dst + 1));
          swift_release();
          uint64_t v100 = v228;
          swift_release();
          uint64_t v189 = v228;
          unint64_t v185 = v99;
          goto LABEL_239;
        }
        swift_release();
        swift_release();
        unint64_t v103 = (char *)MEMORY[0x1E4FBC860];
LABEL_220:
        sub_1DB042664(v100, v99);
        uint64_t v95 = v245;
LABEL_221:
        uint64_t v96 = v224;
        goto LABEL_223;
      case 3uLL:
        sub_1DB042664(v100, v99);
        unint64_t v103 = (char *)MEMORY[0x1E4FBC860];
        goto LABEL_223;
      default:
        uint64_t v247 = v100;
        LOWORD(v248) = v99;
        BYTE2(v248) = BYTE2(v99);
        HIBYTE(v248) = BYTE3(v99);
        LOBYTE(v249) = BYTE4(v99);
        HIBYTE(v249) = BYTE5(v99);
        uint64_t v101 = v100;
        if (!(_BYTE)v100)
        {
          unint64_t v103 = (char *)MEMORY[0x1E4FBC860];
LABEL_222:
          sub_1DB042664(v100, v99);
LABEL_223:
          uint64_t v179 = *((void *)v103 + 2);
          if (v179)
          {
            uint64_t v180 = (unint64_t *)(v103 + 48);
            while (*(v180 - 2) != v209)
            {
              v180 += 3;
              if (!--v179) {
                goto LABEL_227;
              }
            }
            uint64_t v17 = *(v180 - 1);
            sub_1DB04239C(v17, *v180);
            sub_1DB042664(v100, v226);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v17;
          }
LABEL_227:
          sub_1DB042664(v100, v226);
          swift_bridgeObjectRelease();
          unint64_t v97 = v222;
          if (v222 == v214) {
            goto LABEL_228;
          }
          continue;
        }
        uint64_t v244 = v95;
        int v102 = 0;
        id v218 = (char *)&v247 + BYTE6(v99);
        unint64_t v103 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v104 = 1;
        unsigned int v212 = v100;
        while (2)
        {
          uint64_t v105 = v104 + 8;
          if (__OFADD__(v104, 8)) {
            goto LABEL_265;
          }
          uint64_t v106 = v104 + 10;
          if (__OFADD__(v105, 2)) {
            goto LABEL_266;
          }
          uint64_t v17 = *(unsigned __int16 *)((char *)&v247 + v105);
          uint64_t v240 = *(uint64_t *)((char *)&v247 + v104);
          if (*(_WORD *)((char *)&v247 + v105))
          {
            if (v17 <= 0xE)
            {
              uint64_t v109 = 0;
              unint64_t v110 = v17 << 48;
              uint64_t v104 = v106 + v17;
              if (__OFADD__(v106, v17)) {
                goto LABEL_267;
              }
            }
            else
            {
              int v107 = v102;
              sub_1DB0C48F8();
              swift_allocObject();
              uint64_t v108 = sub_1DB0C48B8();
              int v102 = v107;
              uint64_t v109 = v17 << 32;
              unint64_t v110 = v108 | 0x4000000000000000;
              uint64_t v104 = v106 + v17;
              if (__OFADD__(v106, v17)) {
                goto LABEL_267;
              }
            }
          }
          else
          {
            uint64_t v109 = 0;
            unint64_t v110 = 0xC000000000000000;
            uint64_t v104 = v106 + v17;
            if (__OFADD__(v106, v17)) {
              goto LABEL_267;
            }
          }
          if (BYTE6(v99) >= v104)
          {
            if (v104 < v106) {
              goto LABEL_272;
            }
            if (v106 < 0) {
              goto LABEL_273;
            }
            int v236 = v102 + 1;
            switch(v110 >> 62)
            {
              case 1uLL:
                uint64_t v111 = v110 & 0x3FFFFFFFFFFFFFFFLL;
                if (swift_isUniquelyReferenced_nonNull_native()) {
                  goto LABEL_146;
                }
                if (sub_1DB0C48A8() && __OFSUB__(0, sub_1DB0C48D8())) {
                  goto LABEL_297;
                }
                sub_1DB0C48F8();
                swift_allocObject();
                uint64_t v111 = sub_1DB0C4888();
                swift_release();
LABEL_146:
                uint64_t v115 = v101;
                uint64_t v116 = v109;
                uint64_t v117 = sub_1DB0C48A8();
                if (!v117) {
                  goto LABEL_302;
                }
                uint64_t v118 = v117;
                uint64_t v119 = sub_1DB0C48D8();
                uint64_t v120 = -v119;
                if (__OFSUB__(0, v119)) {
                  goto LABEL_285;
                }
                sub_1DB0C48C8();
                sub_1DB0567EC(v106, v104, (uint64_t)&v247, (uint64_t)v218, v118 + v120);
                unint64_t v110 = v111 | 0x4000000000000000;
                uint64_t v96 = v224;
                uint64_t v100 = v228;
                uint64_t v109 = v116;
                uint64_t v101 = v115;
                goto LABEL_157;
              case 2uLL:
                uint64_t v230 = v110 & 0x3FFFFFFFFFFFFFFFLL;
                if (swift_isUniquelyReferenced_nonNull_native()) {
                  goto LABEL_151;
                }
                uint64_t v112 = v109;
                uint64_t v114 = *(void *)(v109 + 16);
                uint64_t v113 = *(void *)(v109 + 24);
                if (sub_1DB0C48A8() && __OFSUB__(v114, sub_1DB0C48D8())) {
                  goto LABEL_298;
                }
                if (__OFSUB__(v113, v114)) {
                  goto LABEL_292;
                }
                sub_1DB0C48F8();
                swift_allocObject();
                uint64_t v121 = sub_1DB0C4888();
                swift_release();
                uint64_t v230 = v121;
                uint64_t v109 = v112;
LABEL_151:
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  uint64_t v122 = v109;
                  uint64_t v123 = *(void *)(v109 + 16);
                  uint64_t v124 = *(void *)(v122 + 24);
                  sub_1DB0C4988();
                  uint64_t v125 = swift_allocObject();
                  *(void *)(v125 + 16) = v123;
                  *(void *)(v125 + 24) = v124;
                  swift_release();
                  uint64_t v109 = v125;
                }
                uint64_t v126 = v109;
                uint64_t v127 = *(void *)(v109 + 16);
                uint64_t v128 = v126;
                uint64_t v129 = *(void *)(v126 + 24);
                uint64_t v130 = sub_1DB0C48A8();
                if (!v130) {
                  goto LABEL_303;
                }
                uint64_t v131 = v130;
                uint64_t v132 = sub_1DB0C48D8();
                uint64_t v133 = v127 - v132;
                if (__OFSUB__(v127, v132)) {
                  goto LABEL_286;
                }
                if (__OFSUB__(v129, v127)) {
                  goto LABEL_288;
                }
                sub_1DB0C48C8();
                sub_1DB0567EC(v106, v104, (uint64_t)&v247, (uint64_t)v218, v131 + v133);
                unint64_t v110 = v230 | 0x8000000000000000;
                uint64_t v96 = v224;
                uint64_t v100 = v228;
                uint64_t v101 = v212;
                uint64_t v109 = v128;
LABEL_157:
                uint64_t v134 = v109;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v103 = sub_1DB07E88C(0, *((void *)v103 + 2) + 1, 1, v103);
                }
                unint64_t v136 = *((void *)v103 + 2);
                unint64_t v135 = *((void *)v103 + 3);
                int v102 = v236;
                if (v136 >= v135 >> 1)
                {
                  id v138 = sub_1DB07E88C((char *)(v135 > 1), v136 + 1, 1, v103);
                  int v102 = v236;
                  unint64_t v103 = v138;
                }
                *((void *)v103 + 2) = v136 + 1;
                unint64_t v137 = &v103[24 * v136];
                *((void *)v137 + 4) = v240;
                *((void *)v137 + 5) = v134;
                *((void *)v137 + 6) = v110;
                if (v102 != v101) {
                  continue;
                }
                id v250 = v103;
                uint64_t v95 = v244;
                break;
              case 3uLL:
                goto LABEL_157;
              default:
                LODWORD(__dst) = 0;
                BYTE4(__dst) = BYTE4(v109);
                BYTE5(__dst) = BYTE5(v109);
                WORD3(__dst) = 0;
                WORD4(__dst) = v110;
                BYTE10(__dst) = BYTE2(v110);
                BYTE11(__dst) = BYTE3(v110);
                BYTE12(__dst) = BYTE4(v110);
                BYTE13(__dst) = BYTE5(v110);
                BYTE14(__dst) = BYTE6(v110);
                if (BYTE6(v99) < (unint64_t)v104) {
                  goto LABEL_284;
                }
                if (__OFADD__(v106, v104 - v106)) {
                  goto LABEL_287;
                }
                if (v104 < v106) {
                  goto LABEL_289;
                }
                memcpy(&__dst, (char *)&v247 + v106, v104 - v106);
                uint64_t v109 = __dst;
                unint64_t v110 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
                goto LABEL_157;
            }
            goto LABEL_222;
          }
          break;
        }
        id v250 = v103;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v191 = 5;
        *(unsigned char *)(v191 + 4) = 1;
        swift_willThrow();
        sub_1DB042664(v109, v110);
        unint64_t v185 = v99;
        sub_1DB042664(v100, v99);
LABEL_241:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v187 = v100;
LABEL_242:
        sub_1DB042664(v187, v185);
        return v17;
    }
  }
}

uint64_t sub_1DB08F418(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      *(void *)&long long v27 = *a1;
      *((void *)&v27 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1DB08F6AC((int *)&v27, a2, a3, a4, a5);
      uint64_t v13 = v27;
      unint64_t v14 = *((void *)&v27 + 1) | 0x4000000000000000;
      goto LABEL_6;
    case 2uLL:
      *(void *)&long long v27 = *a1;
      *((void *)&v27 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v15 = *((void *)&v27 + 1);
      uint64_t v17 = *(void *)(v27 + 16);
      uint64_t v16 = *(void *)(v27 + 24);
      uint64_t v18 = sub_1DB0C48A8();
      if (!v18)
      {
        __break(1u);
        JUMPOUT(0x1DB08F69CLL);
      }
      uint64_t v19 = v18;
      uint64_t v20 = sub_1DB0C48D8();
      if (__OFSUB__(v17, v20)) {
        goto LABEL_17;
      }
      if (__OFSUB__(v16, v17)) {
        goto LABEL_20;
      }
      uint64_t v21 = v17 - v20;
      sub_1DB0C48C8();
      uint64_t v22 = *a4;
      uint64_t v23 = *a4 + a5;
      if (__OFADD__(*a4, a5)) {
        goto LABEL_22;
      }
      if (v23 < v22) {
        goto LABEL_23;
      }
      uint64_t result = sub_1DB0567EC(v22, v23, a2, a3, v19 + v21);
      *a1 = v27;
      a1[1] = v15 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v27 + 7) = 0;
      *(void *)&long long v27 = 0;
      uint64_t v24 = *a4;
      uint64_t v25 = *a4 + a5;
      if (__OFADD__(*a4, a5)) {
        goto LABEL_18;
      }
      if (v25 < v24) {
        goto LABEL_21;
      }
      return sub_1DB0567EC(v24, v25, a2, a3, (uint64_t)&v27);
    default:
      *(void *)&long long v27 = *a1;
      WORD4(v27) = v5;
      BYTE10(v27) = BYTE2(v5);
      BYTE11(v27) = BYTE3(v5);
      BYTE12(v27) = BYTE4(v5);
      BYTE13(v27) = BYTE5(v5);
      BYTE14(v27) = BYTE6(v5);
      uint64_t v10 = *a4;
      uint64_t v11 = *a4 + a5;
      if (__OFADD__(*a4, a5))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      if (v11 < v10)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      uint64_t result = sub_1DB0567EC(v10, v11, a2, a3, (uint64_t)&v27);
      uint64_t v13 = v27;
      unint64_t v14 = DWORD2(v27) | ((unint64_t)BYTE12(v27) << 32) | ((unint64_t)BYTE13(v27) << 40) | ((unint64_t)BYTE14(v27) << 48);
LABEL_6:
      *a1 = v13;
      a1[1] = v14;
      return result;
  }
}

uint64_t sub_1DB08F6AC(int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result = sub_1DB0C4968();
  uint64_t v11 = *a1;
  if (a1[1] < (int)v11)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v15 = a2;
  uint64_t result = sub_1DB0C48A8();
  if (result)
  {
    uint64_t v12 = result;
    uint64_t result = sub_1DB0C48D8();
    uint64_t v13 = v11 - result;
    if (!__OFSUB__(v11, result))
    {
      sub_1DB0C48C8();
      uint64_t result = *a4;
      uint64_t v14 = *a4 + a5;
      if (!__OFADD__(*a4, a5))
      {
        if (v14 >= result) {
          return sub_1DB0567EC(result, v14, v15, a3, v12 + v13);
        }
        goto LABEL_10;
      }
LABEL_9:
      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1DB08F784()
{
  uint64_t v1 = *v0;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  void *v0 = v1;
  if (!result)
  {
    uint64_t result = sub_1DB07E88C(result, *((void *)v1 + 2) + 1, 1, v1);
    void *v0 = result;
  }
  return result;
}

uint64_t sub_1DB08F7D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

void *sub_1DB08F804(void *__src, size_t __len, int a3, int a4, int a5, void *__dst)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0) {
      __break(1u);
    }
    else {
      return memmove(__dst, __src, __len);
    }
  }
  return __src;
}

uint64_t sub_1DB08F824(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0;
  }
  return a3(a1, v3);
}

uint64_t sub_1DB08F85C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v10 = sub_1DB08F7D0(0, *a3, v9, v8);
  uint64_t result = sub_1DB08F7D0(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a1) {
    uint64_t v13 = a1 + v10;
  }
  else {
    uint64_t v13 = 0;
  }
  return a4(v13, v12);
}

uint64_t _s16KeywordPirClientVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _s16KeywordPirClientVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v3;
  sub_1DB0C5188();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s16KeywordPirClientVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s16KeywordPirClientVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t _s16KeywordPirClientVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s16KeywordPirClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.KeywordPirClient()
{
  return &type metadata for PIR.KeywordPirClient;
}

ValueMetadata *_s16KeywordPirClientV10HashBucketVMa()
{
  return &_s16KeywordPirClientV10HashBucketVN;
}

void *sub_1DB08FC24(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  sub_1DB04239C(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *_s16KeywordPirClientV10HashBucketV15HashBucketEntryVwca(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  sub_1DB04239C(v3, v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_1DB042664(v5, v6);
  return a1;
}

uint64_t _s16KeywordPirClientV10HashBucketV15HashBucketEntryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_1DB042664(v4, v5);
  return a1;
}

ValueMetadata *_s16KeywordPirClientV10HashBucketV15HashBucketEntryVMa()
{
  return &_s16KeywordPirClientV10HashBucketV15HashBucketEntryVN;
}

void HE.SerializedEvaluationKey.encryptionParams.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t HE.SerializedEvaluationKey.galoisKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return sub_1DB0C5188();
}

uint64_t HE.SerializedEvaluationKey.relinKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return sub_1DB0C5188();
}

unsigned char *HE.SerializedEvaluationKey.init(encryptionParams:galoisKey:relinKey:)@<X0>(unsigned char *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = result[1];
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  *(unsigned char *)a4 = *result;
  *(unsigned char *)(a4 + 1) = v4;
  *(void *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = v6;
  return result;
}

uint64_t HE.SerializedEvaluationKey.init(config:secretKey:scheme:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  char v6 = a1[1];
  uint64_t v7 = *((void *)a1 + 1);
  int v8 = a1[16];
  uint64_t v10 = *a2;
  unint64_t v9 = a2[1];
  LOBYTE(v17[0]) = *a1;
  BYTE1(v17[0]) = v6;
  _s12ParamContextCMa();
  swift_allocObject();
  uint64_t v11 = sub_1DB06B4F8((char *)v17);
  if (v3)
  {
    sub_1DB042664(v10, v9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = v11;
    v17[0] = v10;
    v17[1] = v9;
    swift_retain();
    uint64_t v14 = sub_1DB0A208C(v17, v13);
    if (*(void *)(v7 + 16))
    {
      swift_retain();
      sub_1DB0C5188();
      swift_retain();
      sub_1DB0B4838(v13, v7, (uint64_t)v14, v17);
      uint64_t v15 = v17[0];
    }
    else
    {
      uint64_t v15 = 0;
    }
    sub_1DB0C5188();
    swift_bridgeObjectRelease();
    if (v8)
    {
      sub_1DB0B434C((uint64_t)v14, v17);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v16 = v17[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      uint64_t v16 = 0;
    }
    *(unsigned char *)a3 = v5;
    *(unsigned char *)(a3 + 1) = v6;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v16;
  }
  return result;
}

uint64_t _s23SerializedEvaluationKeyVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s23SerializedEvaluationKeyVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  sub_1DB0C5188();
  sub_1DB0C5188();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SerializedEvaluationKeyVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s23SerializedEvaluationKeyVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedEvaluationKey()
{
  return &type metadata for HE.SerializedEvaluationKey;
}

unint64_t PEC.PlaintextPacking.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t PEC.PlaintextPacking.rawValue.getter()
{
  return *v0;
}

unint64_t sub_1DB090138()
{
  unint64_t result = qword_1EA8FE990;
  if (!qword_1EA8FE990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE990);
  }
  return result;
}

unint64_t sub_1DB09018C@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return PEC.PlaintextPacking.init(rawValue:)(*a1, a2);
}

void sub_1DB090194(void *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_s16PlaintextPackingOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB09026CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PEC.PlaintextPacking()
{
  return &type metadata for PEC.PlaintextPacking;
}

ValueMetadata *type metadata accessor for PIR()
{
  return &type metadata for PIR;
}

uint64_t sub_1DB0902B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _DWORD *a9@<X8>)
{
  unint64_t v10 = a6;
  uint64_t v15 = a9;
  v45[2] = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x2000000000000000) != 0)
  {
    uint64_t v37 = v9;
    unint64_t v16 = a3 & 0xDFFFFFFFFFFFFFFFLL;
    int64_t v17 = *(void *)(a4 + 16);
    unint64_t v35 = a3 & 0xDFFFFFFFFFFFFFFFLL;
    if (v17)
    {
      sub_1DB04239C(a2, v16);
      v45[0] = MEMORY[0x1E4FBC860];
      sub_1DB04C3D8(0, v17, 0);
      uint64_t v18 = v45[0];
      uint64_t v19 = (unint64_t *)(a4 + 32);
      do
      {
        unint64_t v21 = *v19++;
        unint64_t v20 = v21;
        if ((v21 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
        if (HIDWORD(v20)) {
          goto LABEL_39;
        }
        v45[0] = v18;
        unint64_t v10 = *(void *)(v18 + 16);
        unint64_t v22 = *(void *)(v18 + 24);
        if (v10 >= v22 >> 1)
        {
          sub_1DB04C3D8((char *)(v22 > 1), v10 + 1, 1);
          uint64_t v18 = v45[0];
        }
        *(void *)(v18 + 16) = v10 + 1;
        *(_DWORD *)(v18 + 4 * v10 + 32) = v20;
        --v17;
      }
      while (v17);
      uint64_t v15 = a9;
    }
    else
    {
      sub_1DB04239C(a2, v16);
      uint64_t v18 = MEMORY[0x1E4FBC860];
    }
    switch(a3 >> 62)
    {
      case 1uLL:
        if (a2 >> 32 < (int)a2) {
          goto LABEL_43;
        }
        sub_1DB0C5188();
        unint64_t v10 = v35;
        sub_1DB04239C(a2, v35);
        sub_1DB0C5188();
        int v32 = sub_1DB091234((int)a2, a2 >> 32, a3 & 0x1FFFFFFFFFFFFFFFLL, v18, a6, a1, a7, a8);
        if (v9) {
          goto LABEL_52;
        }
        int v26 = v32;
        sub_1DB042664(a2, v35);
        sub_1DB042664(a2, v35);
        goto LABEL_36;
      case 2uLL:
        uint64_t v29 = *(void *)(a2 + 16);
        uint64_t v30 = *(void *)(a2 + 24);
        sub_1DB0C5188();
        swift_retain();
        swift_retain();
        int v31 = sub_1DB091234(v29, v30, a3 & 0x1FFFFFFFFFFFFFFFLL, v18, a6, a1, a7, a8);
        if (v37) {
          goto LABEL_51;
        }
        int v26 = v31;
        swift_release();
        swift_release();
        goto LABEL_32;
      case 3uLL:
        memset(v45, 0, 14);
        if (a7 > 0xFFFFFFFFLL) {
          goto LABEL_42;
        }
        if ((a8 | a7) < 0) {
          goto LABEL_45;
        }
        if (a8 <= 0xFFFFFFFFLL) {
          goto LABEL_31;
        }
        goto LABEL_47;
      default:
        v45[0] = a2;
        LOWORD(v45[1]) = a3;
        BYTE2(v45[1]) = BYTE2(a3);
        BYTE3(v45[1]) = BYTE3(a3);
        BYTE4(v45[1]) = BYTE4(a3);
        BYTE5(v45[1]) = BYTE5(a3);
        if (a7 > 0xFFFFFFFFLL) {
          goto LABEL_41;
        }
        if ((a8 | a7) < 0) {
          goto LABEL_44;
        }
        if (a8 > 0xFFFFFFFFLL) {
          goto LABEL_46;
        }
LABEL_31:
        sub_1DB0C5188();
        int v26 = cche_deserialize_ciphertext_coeff();
LABEL_32:
        sub_1DB042664(a2, v35);
LABEL_36:
        uint64_t result = swift_bridgeObjectRelease_n();
        break;
    }
  }
  else
  {
    switch(a3 >> 62)
    {
      case 1uLL:
        if (a2 >> 32 < (int)a2) {
          goto LABEL_40;
        }
        unint64_t v10 = a3 & 0x3FFFFFFFFFFFFFFFLL;
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a2, a3);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a2, a3);
        int v28 = sub_1DB09115C((int)a2, a2 >> 32, a3 & 0x3FFFFFFFFFFFFFFFLL, a4, a5, a6, a1, a7);
        if (v9) {
          goto LABEL_50;
        }
        int v26 = v28;
        sub_1DB042664(a2, a3);
        sub_1DB042664(a2, a3);
        sub_1DB042664(a4, a5);
        sub_1DB042664(a4, a5);
        uint64_t result = sub_1DB042664(a4, a5);
        break;
      case 2uLL:
        uint64_t v24 = *(void *)(a2 + 16);
        unint64_t v10 = *(void *)(a2 + 24);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a2, a3);
        swift_retain();
        swift_retain();
        int v25 = sub_1DB09115C(v24, v10, a3 & 0x3FFFFFFFFFFFFFFFLL, a4, a5, a6, a1, a7);
        if (v9) {
          goto LABEL_49;
        }
        int v26 = v25;
        sub_1DB042664(a4, a5);
        swift_release();
        swift_release();
        sub_1DB042664(a2, a3);
        sub_1DB042664(a4, a5);
        uint64_t result = sub_1DB042664(a4, a5);
        uint64_t v15 = a9;
        break;
      case 3uLL:
        memset(v45, 0, 14);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a4, a5);
        goto LABEL_21;
      default:
        v45[0] = a2;
        LOWORD(v45[1]) = a3;
        BYTE2(v45[1]) = BYTE2(a3);
        BYTE3(v45[1]) = BYTE3(a3);
        BYTE4(v45[1]) = BYTE4(a3);
        BYTE5(v45[1]) = BYTE5(a3);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a4, a5);
        sub_1DB04239C(a4, a5);
LABEL_21:
        sub_1DB090A48((uint64_t)v45, a4, a5, a7, &v44);
        if (v9)
        {
          sub_1DB042664(a4, a5);
          sub_1DB042664(a4, a5);
          __break(1u);
LABEL_49:
          sub_1DB042664(a4, a5);
          sub_1DB042664(a4, a5);
          swift_release();
          swift_release();
          __break(1u);
LABEL_50:
          sub_1DB042664(a4, a5);
          sub_1DB042664(a4, a5);
          sub_1DB042664(a2, a3);
          __break(1u);
LABEL_51:
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_52:
          swift_bridgeObjectRelease_n();
          sub_1DB042664(a2, v10);
          __break(1u);
          JUMPOUT(0x1DB090A28);
        }
        sub_1DB042664(a2, a3);
        sub_1DB042664(a4, a5);
        sub_1DB042664(a4, a5);
        uint64_t result = sub_1DB042664(a4, a5);
        int v26 = v44;
        break;
    }
  }
  *uint64_t v15 = v26;
  return result;
}

uint64_t sub_1DB090A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X6>, _DWORD *a5@<X8>)
{
  unsigned int v6 = a5;
  uint64_t v7 = v5;
  unint64_t v9 = a3;
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_8;
    case 2uLL:
      uint64_t v18 = a5;
      unsigned int v6 = (_DWORD *)(a3 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v16 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v17 = sub_1DB0C48A8();
      if (!v17) {
        goto LABEL_53;
      }
      unint64_t v9 = v17;
      if (__OFSUB__(v16, sub_1DB0C48D8())) {
        goto LABEL_34;
      }
      sub_1DB0C48C8();
      if (!a1) {
        goto LABEL_54;
      }
      if ((a4 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      if (HIDWORD(a4)) {
        goto LABEL_42;
      }
      if (qword_1EA8FDD78 == -1) {
        goto LABEL_23;
      }
      goto LABEL_46;
    case 3uLL:
      if (!a1) {
        goto LABEL_55;
      }
      if ((a4 & 0x8000000000000000) != 0) {
        goto LABEL_35;
      }
      if (HIDWORD(a4)) {
        goto LABEL_39;
      }
      if (qword_1EA8FDD78 == -1) {
        goto LABEL_29;
      }
      goto LABEL_43;
    default:
      if (!a1)
      {
        __break(1u);
LABEL_51:
        sub_1DB0C48C8();
        if (a1) {
          goto LABEL_56;
        }
        goto LABEL_52;
      }
      if ((a4 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_33;
      }
      if (HIDWORD(a4)) {
        goto LABEL_36;
      }
      if (qword_1EA8FDD78 != -1) {
        goto LABEL_40;
      }
      break;
  }
  while (1)
  {
    if ((qword_1EA903418 & 0x8000000000000000) == 0) {
      goto LABEL_30;
    }
    __break(1u);
LABEL_8:
    uint64_t v18 = (_DWORD *)v7;
    uint64_t v7 = (int)a2;
    if ((int)a2 > a2 >> 32)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v12 = v6;
    unsigned int v6 = (_DWORD *)(v9 & 0x3FFFFFFFFFFFFFFFLL);
    sub_1DB04239C(a2, v9);
    if (!sub_1DB0C48A8()) {
      goto LABEL_51;
    }
    uint64_t v13 = sub_1DB0C48D8();
    uint64_t v7 = (int)a2 - v13;
    if (!__OFSUB__((int)a2, v13)) {
      break;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    swift_once();
  }
  sub_1DB0C48C8();
  if (!a1)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    sub_1DB0C48C8();
    if (a1)
    {
LABEL_57:
      __break(1u);
      JUMPOUT(0x1DB090E1CLL);
    }
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    swift_once();
LABEL_29:
    if (qword_1EA903418 < 0)
    {
      __break(1u);
      goto LABEL_45;
    }
LABEL_30:
    uint64_t result = cche_deserialize_seeded_ciphertext_coeff();
    int v14 = result;
  }
  else
  {
    if (!HIDWORD(a4))
    {
      unsigned int v6 = v12;
      if (qword_1EA8FDD78 == -1) {
        goto LABEL_15;
      }
      goto LABEL_48;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    swift_once();
LABEL_23:
    if (qword_1EA903418 < 0)
    {
      __break(1u);
LABEL_48:
      swift_once();
LABEL_15:
      if (qword_1EA903418 < 0) {
        __break(1u);
      }
      int v14 = cche_deserialize_seeded_ciphertext_coeff();
      uint64_t result = sub_1DB042664(a2, v9);
    }
    else
    {
      int v14 = cche_deserialize_seeded_ciphertext_coeff();
      swift_release();
      uint64_t result = swift_release();
      unsigned int v6 = v18;
    }
  }
  *unsigned int v6 = v14;
  return result;
}

uint64_t sub_1DB090E2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, _DWORD *a4@<X8>)
{
  if (!result) {
    goto LABEL_9;
  }
  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
  }
  else if (((a3 | a2) & 0x8000000000000000) == 0)
  {
    if (a3 <= 0xFFFFFFFFLL)
    {
      uint64_t result = cche_deserialize_ciphertext_coeff();
      *a4 = result;
      return result;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

void sub_1DB090EC4(char **a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _DWORD *a6@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = *a1;
  int64_t v8 = *((void *)*a1 + 2);
  if ((v8 | a2) >> 32)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!*(void *)(a4 + 16))
  {
    unint64_t v9 = a6;
    goto LABEL_8;
  }
  if (!a5)
  {
LABEL_14:
    __break(1u);
    return;
  }
  unint64_t v9 = a6;
LABEL_8:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v7 = sub_1DB07EBC8(0, v8, 0, v7);
  }
  *a1 = v7;
  *unint64_t v9 = cche_ciphertext_coeff_compose();
}

char *sub_1DB090FC0(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_1DB04C3D8(0, v3, 0);
    unsigned int v6 = (unint64_t *)(a1 + 32);
    while (1)
    {
      unint64_t v8 = *v6++;
      unint64_t v7 = v8;
      if ((v8 & 0x8000000000000000) != 0) {
        break;
      }
      if (HIDWORD(v7)) {
        goto LABEL_11;
      }
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      if (v10 >= v9 >> 1) {
        uint64_t result = sub_1DB04C3D8((char *)(v9 > 1), v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(_DWORD *)(v12 + 4 * v10 + 32) = v7;
      if (!--v3) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_8:
    uint64_t result = *(char **)(a2 + 24);
    if (result)
    {
      unsigned int v11 = cche_ciphertext_coeff_decompose_nptexts();
      swift_bridgeObjectRelease();
      return (char *)v11;
    }
  }
  __break(1u);
  return result;
}

void *sub_1DB0910C8(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((a3 | a2) < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a3 <= 0xFFFFFFFFLL)
  {
    int64_t v3 = result;
    uint64_t v4 = cche_ciphertext_sizeof();
    type metadata accessor for HE.ObjectStorage();
    uint64_t v5 = (void *)swift_allocObject();
    v5[2] = v3;
    uint64_t v6 = swift_slowAlloc();
    void v5[3] = v6;
    v5[4] = v6 + v4;
    return v5;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1DB09115C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v14 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v14 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1DB0C48C8();
  uint64_t result = sub_1DB090A48(v14, a4, a5, a8, &v16);
  if (!v15) {
    return v16;
  }
  return result;
}

uint64_t sub_1DB091234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_1DB0C48C8();
  uint64_t result = sub_1DB090E2C(v13, a7, a8, &v15);
  if (!v14) {
    return v15;
  }
  return result;
}

uint64_t sub_1DB091314(uint64_t a1, unint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  if (!*(void *)(a1 + 16))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v9 = v7;
  unint64_t v10 = a4;
  unint64_t v8 = (char *)a1;
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 16);
  if (a3) {
    a2 = cche_param_ctx_ciphertext_ctx_nmoduli();
  }
  unint64_t v22 = a2;
  int64_t v12 = *(void *)(a5 + 16);
  if (v12)
  {
    unint64_t v21 = v10;
    uint64_t v23 = MEMORY[0x1E4FBC860];
    swift_retain();
    sub_1DB04C3D8(0, v12, 0);
    uint64_t v9 = 0;
    uint64_t v6 = v23;
    while (1)
    {
      unint64_t v10 = *(void *)(a5 + 8 * v9 + 32);
      if ((v10 & 0x8000000000000000) != 0) {
        break;
      }
      if (HIDWORD(v10)) {
        goto LABEL_19;
      }
      unint64_t v14 = *(void *)(v23 + 16);
      unint64_t v13 = *(void *)(v23 + 24);
      if (v14 >= v13 >> 1) {
        sub_1DB04C3D8((char *)(v13 > 1), v14 + 1, 1);
      }
      ++v9;
      *(void *)(v23 + 16) = v14 + 1;
      *(_DWORD *)(v23 + 4 * v14 + 32) = v10;
      if (v12 == v9)
      {
        swift_bridgeObjectRelease();
        unint64_t v10 = v21;
        uint64_t v9 = v7;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x1E4FBC860];
LABEL_13:
  uint64_t v15 = qword_1EA8FDD70;
  swift_retain();
  if (v15 != -1) {
    goto LABEL_21;
  }
LABEL_14:
  unsigned int v16 = sub_1DB0910C8(v5, v22, qword_1EA903410);
  uint64_t v24 = v16;
  swift_retain();
  sub_1DB0C5188();
  unsigned int v17 = sub_1DB0C4538(v8, (uint64_t)&v24, v6, (uint64_t)v5, v22, v10);
  if (v9)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    unsigned int v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    if (v18)
    {
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v19 = v18;
      *(unsigned char *)(v19 + 4) = 0;
      swift_willThrow();
      swift_release();
    }
    swift_release();
    return (uint64_t)v16;
  }
  return result;
}

id sub_1DB091578(void *a1, char *a2, uint64_t a3, unint64_t a4, void *a5, int a6, uint64_t a7, void *a8, char a9)
{
  uint64_t v127 = a5;
  id v128 = a8;
  uint64_t v126 = (void *)sub_1DB0C5088();
  uint64_t v125 = *(v126 - 1);
  MEMORY[0x1F4188790](v126);
  uint64_t v124 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1DB070B58(a6, a7, a9);
  uint64_t v18 = v16;
  unint64_t v19 = v17;
  if (a9)
  {
    sub_1DB092954(a1, a2, a3, a4, v127, a6, a7, v128, 1u);
    id v21 = v20;
    sub_1DB042664(v18, v19);
    return v21;
  }
  unint64_t v22 = a4;
  uint64_t v121 = a2;
  uint64_t v122 = v16;
  uint64_t v123 = (void *)v17;
  if (a6 < 2u)
  {
    uint64_t v23 = v128;
    id v21 = sub_1DB072A88((uint64_t)v128, v121);
    if ((_BYTE)a6)
    {
      uint64_t v120 = a1;
      sub_1DB0C4F38();
      sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      id v24 = v23;
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      uint64_t v126 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v131);
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v131);
      id v26 = sub_1DB072A88((uint64_t)v24, v25);

      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFC8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DB0C77B0;
      int v28 = v121;
      *(void *)(inited + 32) = v121;
      *(void *)(inited + 40) = v21;
      id v29 = v24;
      uint64_t v30 = v28;
      id v21 = v21;
      uint64_t v31 = v122;
      unint64_t v32 = (unint64_t)v123;
      id v33 = v133;
      uint64_t v34 = sub_1DB095920(&v129, v24, v26, v122, (unint64_t)v123, inited, 0);
      id v128 = v29;
      if (v33)
      {
        id v35 = v29;
        id v36 = v126;
      }
      else
      {
        uint64_t v79 = v34;
        uint64_t v125 = inited + 32;

        id v133 = 0;
        uint64_t v80 = v129;
        uint64_t v81 = v26;
        long long v82 = v79;
        uint64_t v83 = v31;
        uint64_t v121 = v80;
        unint64_t v84 = v127;
        id v36 = v126;
        id v85 = sub_1DB072A88((uint64_t)v84, v126);
        uint64_t v124 = v84;
        id v35 = sub_1DB072A88((uint64_t)v84, v82);
        uint64_t v127 = v81;
        uint64_t v86 = v81;
        unint64_t v87 = v85;
        uint64_t v88 = v121;
        id v89 = v133;
        uint64_t v90 = (void *)sub_1DB096CEC(v83, v32, v86, v82, v121, v87, v35, 0);
        if (!v89)
        {
          uint64_t v119 = v90;
          id v118 = sub_1DB093C64(v90, (uint64_t)v128);
          uint64_t v106 = v124;
          id v133 = sub_1DB093E9C(v124, (uint64_t)v118);

          sub_1DB042664(v122, (unint64_t)v123);
          swift_setDeallocating();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
          swift_arrayDestroy();

          int v107 = v120;
          id v108 = v133;
          *uint64_t v120 = v119;
          v107[1] = v108;
          return v21;
        }

        unint64_t v32 = (unint64_t)v123;
        uint64_t v31 = v122;
        id v26 = v127;
      }

      sub_1DB042664(v31, v32);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
      swift_arrayDestroy();
    }
    else
    {
      sub_1DB042664(v122, (unint64_t)v123);
      *a1 = 0;
      a1[1] = 0;
    }
    return v21;
  }
  if (a6 != 2)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v37 = sub_1DB05C118(0x6F666E49uLL, 0xE400000000000000);
  if (a4 >> 60 == 15)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_37:
    __break(1u);
    JUMPOUT(0x1DB092194);
  }
  uint64_t v39 = v37;
  unint64_t v40 = v38;
  uint64_t v41 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_32;
      }
      uint64_t v41 = HIDWORD(a3) - (int)a3;
LABEL_16:
      uint64_t v120 = a1;
      sub_1DB05A7A4(v41, 2);
      uint64_t v45 = v44;
      unint64_t v47 = v46;
      uint64_t v131 = v39;
      unint64_t v132 = v40;
      sub_1DB04239C(v39, v40);
      sub_1DB05DEE8(v45, v47);
      sub_1DB042664(v45, v47);
      sub_1DB042664(v39, v40);
      uint64_t v48 = v131;
      unint64_t v49 = v132;
      uint64_t v129 = (void *)v131;
      unint64_t v130 = v132;
      sub_1DB067A4C(a3, v22);
      sub_1DB04239C(v48, v49);
      sub_1DB05DEE8(a3, v22);
      sub_1DB069BB4(a3, v22);
      sub_1DB042664(v48, v49);
      uint64_t v50 = v129;
      unint64_t v51 = v130;
      uint64_t v52 = v124;
      sub_1DB0C5058();
      uint64_t v53 = sub_1DB0C5048();
      unint64_t v55 = v54;
      (*(void (**)(char *, void *))(v125 + 8))(v52, v126);
      if (v55 >> 60 == 15) {
        goto LABEL_35;
      }
      uint64_t v129 = (void *)v53;
      unint64_t v130 = v55;
      sub_1DB067A4C(v53, v55);
      uint64_t v56 = v122;
      id v21 = v123;
      sub_1DB04239C(v122, (unint64_t)v123);
      sub_1DB05DEE8(v56, (unint64_t)v21);
      sub_1DB042664(v56, (unint64_t)v21);
      sub_1DB069BB4(v53, v55);
      uint64_t v58 = (uint64_t)v129;
      unint64_t v57 = v130;
      sub_1DB0C4F38();
      sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      uint64_t v59 = sub_1DB0C4D68();
      id v60 = v133;
      uint64_t v61 = sub_1DB0632DC((uint64_t)v50, v51, 1, v58, v57, v59, 0);
      id v133 = v60;
      if (v60)
      {
        sub_1DB042664(v58, v57);
        sub_1DB042664(v56, (unint64_t)v21);
        sub_1DB042664((uint64_t)v50, v51);
        return v21;
      }
      uint64_t v126 = v50;
      if (!*(void *)(v61 + 16)) {
        goto LABEL_36;
      }
      uint64_t v125 = v51;
      uint64_t v62 = (char *)*(id *)(v61 + 32);
      swift_bridgeObjectRelease();
      sub_1DB042664(v58, v57);
      uint64_t v124 = v62;
      id v63 = sub_1DB093D80(v128, (uint64_t)v62);
      id v64 = objc_msgSend(v63, sel_inverseModOrder);
      if (!v64) {
        goto LABEL_37;
      }
      uint64_t v65 = v64;
      uint64_t v66 = v121;
      id v118 = sub_1DB072A88((uint64_t)v64, v121);

      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      id v128 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v131);
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v131);
      id v68 = sub_1DB072A88((uint64_t)v63, v67);

      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFC8);
      uint64_t v69 = swift_initStackObject();
      *(_OWORD *)(v69 + 16) = xmmword_1DB0C77B0;
      unint64_t v70 = v118;
      *(void *)(v69 + 32) = v118;
      uint64_t v119 = (void *)(v69 + 32);
      *(void *)(v69 + 40) = v66;
      uint64_t v71 = v66;
      id v21 = v70;
      id v72 = v63;
      uint64_t v73 = v122;
      unint64_t v74 = (unint64_t)v123;
      id v75 = v133;
      uint64_t v76 = sub_1DB095920(&v129, v63, v68, v122, (unint64_t)v123, v69, 0);
      if (v75)
      {
        uint64_t v77 = v72;
        uint64_t v78 = v128;
      }
      else
      {
        unint64_t v91 = v76;

        id v133 = 0;
        unint64_t v92 = v74;
        uint64_t v93 = v129;
        uint64_t v94 = (char *)v68;
        uint64_t v95 = v127;
        uint64_t v96 = v91;
        id v117 = v93;
        uint64_t v78 = v128;
        id v97 = sub_1DB072A88((uint64_t)v95, v128);
        id v118 = v95;
        uint64_t v98 = (uint64_t)v95;
        unint64_t v99 = v97;
        id v100 = sub_1DB072A88(v98, v96);
        uint64_t v127 = v72;
        id v72 = v100;
        uint64_t v121 = v94;
        uint64_t v101 = v94;
        int v102 = v117;
        id v103 = v133;
        uint64_t v104 = (void *)sub_1DB096CEC(v73, v92, v101, v96, v117, v99, v100, 0);
        if (!v103)
        {
          uint64_t v109 = v104;
          id v110 = sub_1DB093C64(v104, (uint64_t)v127);
          id v133 = 0;
          uint64_t v111 = v110;
          uint64_t v112 = v99;
          uint64_t v113 = v118;
          id v116 = sub_1DB093E9C(v118, (uint64_t)v110);

          sub_1DB042664(v122, (unint64_t)v123);
          swift_setDeallocating();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
          swift_arrayDestroy();
          sub_1DB042664((uint64_t)v126, v125);

          uint64_t v114 = v120;
          id v115 = v116;
          *uint64_t v120 = v109;
          v114[1] = v115;
          return v21;
        }

        uint64_t v73 = v122;
        id v68 = v121;
        uint64_t v77 = v127;
      }

      sub_1DB042664(v73, (unint64_t)v123);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
      swift_arrayDestroy();
      sub_1DB042664((uint64_t)v126, v125);

      break;
    case 2uLL:
      uint64_t v43 = *(void *)(a3 + 16);
      uint64_t v42 = *(void *)(a3 + 24);
      uint64_t v41 = v42 - v43;
      if (!__OFSUB__(v42, v43)) {
        goto LABEL_16;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v41 = BYTE6(a4);
      goto LABEL_16;
  }
  return v21;
}

uint64_t sub_1DB0921A4(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int a7, uint64_t a8, void *a9, char a10)
{
  unint64_t v66 = a6;
  uint64_t v65 = a5;
  uint64_t v58 = a3;
  unint64_t v59 = a4;
  id v68 = a1;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v61 = sub_1DB0C4FA8();
  uint64_t v54 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v62 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_1DB0C4D28();
  uint64_t v56 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  unint64_t v55 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1DB0C5088();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DB0C5058();
  uint64_t v19 = sub_1DB0C5048();
  unint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v21 >> 60 == 15) {
    goto LABEL_13;
  }
  int v64 = a7;
  uint64_t v22 = sub_1DB070B58(a7, a8, a10 & 1);
  unint64_t v24 = v23;
  *(void *)&long long v70 = v19;
  *((void *)&v70 + 1) = v21;
  sub_1DB04239C(v19, v21);
  sub_1DB05DEE8(v22, v24);
  sub_1DB042664(v22, v24);
  sub_1DB069BB4(v19, v21);
  long long v25 = v70;
  unint64_t v26 = v67;
  sub_1DB073FA8((uint64_t)v68, a2, v70, *((unint64_t *)&v70 + 1));
  if (v26)
  {
    swift_unexpectedError();
    __break(1u);
    swift_release();
    swift_release();
    __break(1u);
    JUMPOUT(0x1DB092944);
  }
  int v28 = v27;
  unint64_t v67 = *((void *)&v25 + 1);
  unint64_t v60 = a2;
  uint64_t v63 = v25;
  sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v69);
  if (!v29) {
LABEL_14:
  }
    __break(1u);
  uint64_t v30 = v29;
  uint64_t v31 = v65;
  unint64_t v32 = v66;
  unsigned __int8 v33 = v64;
  id v34 = sub_1DB091578(&v73, v28, v65, v66, v29, v64, a8, a9, a10 & 1);
  uint64_t v53 = v28;

  sub_1DB0984B4(v73, v74);
  uint64_t v35 = (uint64_t)v68;
  id v68 = v34;
  uint64_t v36 = sub_1DB093234(v35, v60, v31, v32, v34, a8, v33, a10 & 1);
  unint64_t v38 = v37;
  sub_1DB074590(&qword_1EBE7DF98, MEMORY[0x1E4F25180]);
  uint64_t v40 = v61;
  uint64_t v39 = v62;
  sub_1DB0C4CF8();
  uint64_t v41 = v53;
  switch(v38 >> 62)
  {
    case 1uLL:
      if (v36 >> 32 < (int)v36)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      sub_1DB04239C(v36, v38);
      uint64_t v39 = v62;
      sub_1DB097B14((int)v36, v36 >> 32);
LABEL_11:
      sub_1DB042664(v36, v38);
      uint64_t v45 = v55;
      sub_1DB0C4CE8();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v40);
      sub_1DB042664(v36, v38);
      uint64_t v46 = v57;
      uint64_t v71 = v57;
      uint64_t v72 = sub_1DB074590(&qword_1EBE7DF88, MEMORY[0x1E4F24FA0]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v70);
      uint64_t v48 = v56;
      (*(void (**)(uint64_t *, char *, uint64_t))(v56 + 16))(boxed_opaque_existential_1, v45, v46);
      __swift_project_boxed_opaque_existential_1(&v70, v71);
      sub_1DB0C4908();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v46);
      uint64_t v49 = (uint64_t)v73;
      unint64_t v50 = (unint64_t)v74;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
      char v51 = sub_1DB059454(v58, v59, v49, v50);
      sub_1DB042664(v49, v50);
      sub_1DB042664(v63, v67);

      return v51 & 1;
    case 2uLL:
      uint64_t v42 = *(void *)(v36 + 16);
      uint64_t v43 = *(void *)(v36 + 24);
      sub_1DB04239C(v36, v38);
      swift_retain();
      swift_retain();
      uint64_t v44 = v43;
      uint64_t v39 = v62;
      sub_1DB097B14(v42, v44);
      swift_release();
      swift_release();
      goto LABEL_11;
    case 3uLL:
      *(void *)((char *)&v70 + 6) = 0;
      *(void *)&long long v70 = 0;
      goto LABEL_8;
    default:
      *(void *)&long long v70 = v36;
      WORD4(v70) = v38;
      BYTE10(v70) = BYTE2(v38);
      BYTE11(v70) = BYTE3(v38);
      BYTE12(v70) = BYTE4(v38);
      BYTE13(v70) = BYTE5(v38);
LABEL_8:
      sub_1DB0C4CD8();
      goto LABEL_11;
  }
}

void sub_1DB092954(void *a1, char *a2, uint64_t a3, unint64_t a4, void *a5, int a6, uint64_t a7, void *a8, unsigned __int8 a9)
{
  id v103 = a2;
  id v104 = a8;
  unsigned int v15 = a6;
  uint64_t v16 = sub_1DB0C5088();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15 > 1)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id v99 = a5;
  id v100 = a1;
  LODWORD(v101) = a9;
  LODWORD(v102) = a6;
  uint64_t v21 = v18;
  uint64_t v22 = sub_1DB070B58(a6, a7, a9 & 1);
  unint64_t v24 = v23;
  sub_1DB0C5058();
  uint64_t v25 = sub_1DB0C5048();
  unint64_t v27 = v26;
  uint64_t v106 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v107 = v21;
  v106(v20, v21);
  if (v27 >> 60 == 15)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v111 = v25;
  unint64_t v112 = v27;
  sub_1DB067A4C(v25, v27);
  sub_1DB04239C(v22, v24);
  sub_1DB05DEE8(v22, v24);
  uint64_t v109 = v22;
  sub_1DB042664(v22, v24);
  sub_1DB069BB4(v25, v27);
  unint64_t v28 = v112;
  uint64_t v115 = v111;
  if (a4 >> 60 == 15)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0xC000000000000000;
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v31 = a4;
    uint64_t v29 = a3;
    switch(a4 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_22;
        }
        uint64_t v30 = HIDWORD(a3) - (int)a3;
LABEL_10:
        unint64_t v31 = a4;
        uint64_t v29 = a3;
        break;
      case 2uLL:
        uint64_t v33 = *(void *)(a3 + 16);
        uint64_t v32 = *(void *)(a3 + 24);
        uint64_t v30 = v32 - v33;
        if (!__OFSUB__(v32, v33)) {
          goto LABEL_10;
        }
        goto LABEL_23;
      case 3uLL:
        break;
      default:
        uint64_t v30 = BYTE6(a4);
        goto LABEL_10;
    }
  }
  unint64_t v110 = v24;
  sub_1DB05A7A4(v30, 2);
  uint64_t v35 = v34;
  unint64_t v37 = v36;
  uint64_t v113 = v115;
  unint64_t v114 = v28;
  unint64_t v105 = v28;
  sub_1DB04239C(v115, v28);
  sub_1DB05DEE8(v35, v37);
  sub_1DB042664(v35, v37);
  uint64_t v38 = v113;
  unint64_t v39 = v114;
  uint64_t v111 = v113;
  unint64_t v112 = v114;
  sub_1DB067A4C(a3, a4);
  sub_1DB04239C(v38, v39);
  sub_1DB04239C(v29, v31);
  sub_1DB05DEE8(v29, v31);
  sub_1DB042664(v29, v31);
  sub_1DB042664(v29, v31);
  sub_1DB042664(v38, v39);
  uint64_t v41 = v111;
  unint64_t v40 = v112;
  sub_1DB0C5058();
  uint64_t v42 = sub_1DB0C5048();
  unint64_t v44 = v43;
  v106(v20, v107);
  if (v44 >> 60 == 15) {
    goto LABEL_25;
  }
  uint64_t v111 = v42;
  unint64_t v112 = v44;
  uint64_t v46 = v109;
  unint64_t v45 = v110;
  sub_1DB04239C(v109, v110);
  sub_1DB067A4C(v42, v44);
  sub_1DB05DEE8(v46, v45);
  sub_1DB042664(v46, v45);
  sub_1DB069BB4(v42, v44);
  uint64_t v47 = v111;
  unint64_t v48 = v112;
  sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  uint64_t v49 = sub_1DB0C4D68();
  unint64_t v50 = v108;
  uint64_t v51 = sub_1DB0632DC(v41, v40, 1, v47, v48, v49, 0);
  id v108 = v50;
  if (v50)
  {
    sub_1DB042664(v47, v48);
    sub_1DB042664(v41, v40);
    sub_1DB042664(v115, v105);
    sub_1DB042664(v46, v45);
    return;
  }
  uint64_t v107 = v41;
  if (!*(void *)(v51 + 16)) {
    goto LABEL_26;
  }
  uint64_t v106 = (void (*)(char *, uint64_t))v40;
  id v52 = *(id *)(v51 + 32);
  swift_bridgeObjectRelease();
  sub_1DB042664(v47, v48);
  id v53 = v104;
  id v104 = v52;
  id v54 = sub_1DB093D80(v53, (uint64_t)v52);
  id v55 = objc_msgSend(v54, sel_inverseModOrder);
  if (!v55)
  {
LABEL_27:
    __break(1u);
    JUMPOUT(0x1DB093224);
  }
  uint64_t v56 = v55;
  int v57 = v102;
  uint64_t v58 = v103;
  id v59 = sub_1DB072A88((uint64_t)v55, v103);

  if (v57)
  {
    sub_1DB0C4D78();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
    swift_dynamicCast();
    id v102 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v113);
    sub_1DB0C4D78();
    swift_dynamicCast();
    uint64_t v60 = v113;
    id v61 = objc_allocWithZone(MEMORY[0x1E4F5E4F0]);
    uint64_t v62 = v109;
    id v63 = objc_msgSend(v61, sel_initWithGeneratorForCP_, v60);
    id v64 = sub_1DB072A88((uint64_t)v54, v63);

    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFC8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DB0C77B0;
    *(void *)(inited + 32) = v59;
    *(void *)(inited + 40) = v58;
    id v98 = v59;
    unint64_t v66 = v58;
    id v67 = v54;
    int v68 = v101 & 1;
    id v69 = v108;
    long long v70 = sub_1DB095920(&v111, v54, v64, v62, v110, inited, v68);
    if (v69)
    {
      unint64_t v71 = v110;
      swift_bridgeObjectRelease();
      uint64_t v72 = v67;
      uint64_t v73 = v107;
      unint64_t v74 = v67;
      id v75 = v102;

      sub_1DB042664(v73, (unint64_t)v106);
      sub_1DB042664(v115, v105);
      sub_1DB042664(v62, v71);
    }
    else
    {
      uint64_t v77 = v70;
      v96[1] = inited + 32;
      v96[2] = v59;

      uint64_t v101 = (uint64_t)v67;
      uint64_t v78 = (void *)v111;
      uint64_t v79 = v77;
      id v108 = v78;
      id v80 = v99;
      id v81 = sub_1DB072A88((uint64_t)v80, v102);
      id v97 = v80;
      id v82 = sub_1DB072A88((uint64_t)v80, v79);
      uint64_t v83 = v62;
      unint64_t v84 = v108;
      id v99 = v64;
      id v103 = v79;
      id v85 = v79;
      id v86 = v81;
      unint64_t v87 = (void *)sub_1DB096CEC(v83, v110, v64, v85, v108, v81, v82, v68);
      uint64_t v88 = v107;
      v96[0] = v87;
      id v89 = (void *)v101;
      id v90 = sub_1DB093C64(v87, v101);
      unint64_t v91 = v97;
      id v98 = sub_1DB093E9C(v97, (uint64_t)v90);

      unint64_t v92 = v86;
      uint64_t v93 = v103;

      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DF80);
      swift_arrayDestroy();
      sub_1DB042664(v88, (unint64_t)v106);
      sub_1DB042664(v115, v105);
      sub_1DB042664(v109, v110);

      uint64_t v94 = v100;
      id v95 = v98;
      void *v100 = v96[0];
      v94[1] = v95;
    }
  }
  else
  {
    sub_1DB042664(v107, (unint64_t)v106);
    sub_1DB042664(v115, v105);
    sub_1DB042664(v46, v45);

    uint64_t v76 = v100;
    void *v100 = 0;
    v76[1] = 0;
  }
}

uint64_t sub_1DB093234(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, unsigned __int8 a7, char a8)
{
  unint64_t v131 = a4;
  uint64_t v15 = sub_1DB0C5088();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a8 & 1) == 0)
  {
    uint64_t v29 = 0;
    uint64_t v30 = a3;
    unint64_t v31 = v131;
    switch(a2 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v29 = HIDWORD(a1) - (int)a1;
LABEL_10:
          sub_1DB05A7A4(v29, 2);
          uint64_t v35 = v34;
          unint64_t v37 = v36;
          uint64_t v136 = v34;
          unint64_t v137 = v36;
          sub_1DB04239C(a1, a2);
          sub_1DB04239C(v35, v37);
          sub_1DB05DEE8(a1, a2);
          sub_1DB042664(a1, a2);
          sub_1DB042664(v35, v37);
          int v38 = a7;
          uint64_t v39 = v136;
          unint64_t v40 = v137;
          if (v38 == 2)
          {
            if (v31 >> 60 == 15) {
              goto LABEL_74;
            }
            uint64_t v41 = 0;
            switch(v31 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v30), v30)) {
                  goto LABEL_65;
                }
                uint64_t v41 = HIDWORD(v30) - (int)v30;
LABEL_26:
                sub_1DB04239C(v136, v137);
                sub_1DB05A7A4(v41, 2);
                uint64_t v56 = v55;
                unint64_t v58 = v57;
                uint64_t v132 = v39;
                unint64_t v133 = v40;
                sub_1DB04239C(v39, v40);
                sub_1DB05DEE8(v56, v58);
                sub_1DB042664(v56, v58);
                sub_1DB042664(v39, v40);
                uint64_t v59 = v132;
                unint64_t v60 = v133;
                uint64_t v134 = v132;
                unint64_t v135 = v133;
                sub_1DB067A4C(v30, v31);
                sub_1DB04239C(v59, v60);
                sub_1DB05DEE8(v30, v31);
                sub_1DB069BB4(v30, v31);
                sub_1DB042664(v59, v60);
                sub_1DB042664(v39, v40);
                uint64_t v39 = v134;
                unint64_t v40 = v135;
                break;
              case 2uLL:
                uint64_t v54 = *(void *)(v30 + 16);
                uint64_t v53 = *(void *)(v30 + 24);
                uint64_t v41 = v53 - v54;
                if (!__OFSUB__(v53, v54)) {
                  goto LABEL_26;
                }
                goto LABEL_67;
              case 3uLL:
                goto LABEL_26;
              default:
                uint64_t v41 = BYTE6(v31);
                goto LABEL_26;
            }
          }
          sub_1DB04239C(v39, v40);
          id v61 = objc_msgSend(a5, sel_serializedPublicKey_, 1);
          if (v61)
          {
            uint64_t v62 = v61;
            uint64_t v63 = sub_1DB0C4A08();
            unint64_t v65 = v64;

            switch(v65 >> 62)
            {
              case 1uLL:
                sub_1DB042664(v63, v65);
                if (__OFSUB__(HIDWORD(v63), v63)) {
                  goto LABEL_61;
                }
                uint64_t v66 = HIDWORD(v63) - (int)v63;
                break;
              case 2uLL:
                uint64_t v68 = *(void *)(v63 + 16);
                uint64_t v67 = *(void *)(v63 + 24);
                sub_1DB042664(v63, v65);
                uint64_t v66 = v67 - v68;
                if (!__OFSUB__(v67, v68)) {
                  break;
                }
                __break(1u);
LABEL_35:
                sub_1DB042664(v63, v65);
                uint64_t v66 = 0;
                break;
              case 3uLL:
                goto LABEL_35;
              default:
                sub_1DB042664(v63, v65);
                uint64_t v66 = BYTE6(v65);
                break;
            }
            sub_1DB05A7A4(v66, 2);
            uint64_t v70 = v69;
            unint64_t v72 = v71;
            uint64_t v134 = v39;
            unint64_t v135 = v40;
            sub_1DB04239C(v39, v40);
            sub_1DB05DEE8(v70, v72);
            sub_1DB042664(v70, v72);
            sub_1DB042664(v39, v40);
            uint64_t v73 = v134;
            unint64_t v74 = v135;
            id v75 = objc_msgSend(a5, sel_serializedPublicKey_, 1);
            if (v75)
            {
              uint64_t v76 = v75;
              uint64_t v77 = sub_1DB0C4A08();
              unint64_t v79 = v78;

              uint64_t v132 = v73;
              unint64_t v133 = v74;
              sub_1DB04239C(v73, v74);
              sub_1DB05DEE8(v77, v79);
              sub_1DB042664(v77, v79);
              sub_1DB042664(v73, v74);
              uint64_t v80 = v132;
              unint64_t v81 = v133;
              uint64_t v82 = sub_1DB05C118(0x657A696C616E6946uLL, 0xE800000000000000);
              unint64_t v84 = v83;
              uint64_t v134 = v80;
              unint64_t v135 = v81;
              sub_1DB04239C(v80, v81);
              sub_1DB05DEE8(v82, v84);
              sub_1DB042664(v82, v84);
              sub_1DB042664(v80, v81);
              sub_1DB042664(v39, v40);
              return v134;
            }
            goto LABEL_71;
          }
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
          JUMPOUT(0x1DB093BF4);
        }
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        break;
      case 2uLL:
        uint64_t v33 = *(void *)(a1 + 16);
        uint64_t v32 = *(void *)(a1 + 24);
        uint64_t v29 = v32 - v33;
        if (!__OFSUB__(v32, v33)) {
          goto LABEL_10;
        }
        goto LABEL_58;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v29 = BYTE6(a2);
        goto LABEL_10;
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  id v130 = a5;
  sub_1DB0C5058();
  uint64_t v19 = sub_1DB0C5048();
  unint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v21 >> 60 == 15) {
    goto LABEL_69;
  }
  uint64_t v22 = sub_1DB070B58(a7, a6, 1);
  unint64_t v24 = v23;
  uint64_t v136 = v19;
  unint64_t v137 = v21;
  sub_1DB04239C(v19, v21);
  sub_1DB05DEE8(v22, v24);
  sub_1DB042664(v22, v24);
  sub_1DB069BB4(v19, v21);
  unint64_t v25 = v137;
  uint64_t v26 = 0;
  uint64_t v27 = a3;
  unint64_t v28 = v131;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_59;
      }
      uint64_t v26 = HIDWORD(a1) - (int)a1;
LABEL_17:
      uint64_t v129 = v136;
      sub_1DB05A7A4(v26, 2);
      uint64_t v45 = v44;
      unint64_t v47 = v46;
      uint64_t v136 = v44;
      unint64_t v137 = v46;
      sub_1DB04239C(v44, v46);
      sub_1DB04239C(a1, a2);
      sub_1DB05DEE8(a1, a2);
      sub_1DB042664(a1, a2);
      sub_1DB042664(v45, v47);
      uint64_t v48 = v136;
      unint64_t v49 = v137;
      if (v28 >> 60 == 15)
      {
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        unint64_t v52 = 0xC000000000000000;
      }
      else
      {
        uint64_t v51 = 0;
        unint64_t v52 = v28;
        uint64_t v50 = v27;
        switch(v28 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v27), v27)) {
              goto LABEL_66;
            }
            uint64_t v51 = HIDWORD(v27) - (int)v27;
LABEL_39:
            unint64_t v52 = v28;
            uint64_t v50 = v27;
            break;
          case 2uLL:
            uint64_t v87 = *(void *)(v27 + 16);
            uint64_t v86 = *(void *)(v27 + 24);
            uint64_t v51 = v86 - v87;
            if (!__OFSUB__(v86, v87)) {
              goto LABEL_39;
            }
            goto LABEL_68;
          case 3uLL:
            break;
          default:
            uint64_t v51 = BYTE6(v28);
            goto LABEL_39;
        }
      }
      sub_1DB05A7A4(v51, 2);
      uint64_t v89 = v88;
      unint64_t v91 = v90;
      uint64_t v134 = v48;
      unint64_t v135 = v49;
      sub_1DB04239C(v48, v49);
      sub_1DB05DEE8(v89, v91);
      sub_1DB042664(v89, v91);
      sub_1DB042664(v48, v49);
      uint64_t v92 = v134;
      unint64_t v93 = v135;
      uint64_t v136 = v134;
      unint64_t v137 = v135;
      sub_1DB04239C(v134, v135);
      sub_1DB04239C(v50, v52);
      sub_1DB067A4C(v27, v28);
      sub_1DB05DEE8(v50, v52);
      sub_1DB042664(v50, v52);
      sub_1DB042664(v50, v52);
      sub_1DB042664(v92, v93);
      uint64_t v94 = v136;
      unint64_t v95 = v137;
      id v96 = v130;
      id v97 = objc_msgSend(v130, sel_serializedPublicKey_, 1);
      if (!v97) {
        goto LABEL_72;
      }
      id v98 = v97;
      uint64_t v99 = sub_1DB0C4A08();
      unint64_t v101 = v100;

      switch(v101 >> 62)
      {
        case 1uLL:
          sub_1DB042664(v99, v101);
          if (__OFSUB__(HIDWORD(v99), v99)) {
            goto LABEL_62;
          }
          uint64_t v102 = HIDWORD(v99) - (int)v99;
          break;
        case 2uLL:
          uint64_t v104 = *(void *)(v99 + 16);
          uint64_t v103 = *(void *)(v99 + 24);
          sub_1DB042664(v99, v101);
          uint64_t v102 = v103 - v104;
          if (!__OFSUB__(v103, v104)) {
            break;
          }
          __break(1u);
LABEL_48:
          sub_1DB042664(v99, v101);
          uint64_t v102 = 0;
          break;
        case 3uLL:
          goto LABEL_48;
        default:
          sub_1DB042664(v99, v101);
          uint64_t v102 = BYTE6(v101);
          break;
      }
      sub_1DB05A7A4(v102, 2);
      uint64_t v106 = v105;
      unint64_t v108 = v107;
      uint64_t v134 = v94;
      unint64_t v135 = v95;
      sub_1DB04239C(v94, v95);
      sub_1DB05DEE8(v106, v108);
      sub_1DB042664(v106, v108);
      sub_1DB042664(v94, v95);
      uint64_t v109 = v134;
      unint64_t v110 = v135;
      id v111 = objc_msgSend(v96, sel_serializedPublicKey_, 1);
      if (!v111) {
        goto LABEL_73;
      }
      unint64_t v112 = v111;
      uint64_t v113 = sub_1DB0C4A08();
      unint64_t v115 = v114;

      uint64_t v136 = v109;
      unint64_t v137 = v110;
      sub_1DB04239C(v109, v110);
      sub_1DB05DEE8(v113, v115);
      sub_1DB042664(v113, v115);
      sub_1DB042664(v109, v110);
      uint64_t v116 = v136;
      unint64_t v117 = v137;
      uint64_t v118 = v129;
      uint64_t v119 = 0;
      switch(v25 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v129), v129)) {
            goto LABEL_63;
          }
          uint64_t v119 = HIDWORD(v129) - (int)v129;
LABEL_55:
          sub_1DB05A7A4(v119, 2);
          uint64_t v123 = v122;
          unint64_t v125 = v124;
          uint64_t v134 = v116;
          unint64_t v135 = v117;
          sub_1DB04239C(v116, v117);
          sub_1DB05DEE8(v123, v125);
          sub_1DB042664(v123, v125);
          sub_1DB042664(v116, v117);
          uint64_t v126 = v134;
          unint64_t v127 = v135;
          uint64_t v136 = v134;
          unint64_t v137 = v135;
          sub_1DB04239C(v134, v135);
          sub_1DB04239C(v118, v25);
          sub_1DB05DEE8(v118, v25);
          sub_1DB042664(v118, v25);
          sub_1DB042664(v126, v127);
          sub_1DB042664(v118, v25);
          uint64_t result = v136;
          break;
        case 2uLL:
          uint64_t v121 = *(void *)(v129 + 16);
          uint64_t v120 = *(void *)(v129 + 24);
          uint64_t v119 = v120 - v121;
          if (!__OFSUB__(v120, v121)) {
            goto LABEL_55;
          }
          goto LABEL_64;
        case 3uLL:
          goto LABEL_55;
        default:
          uint64_t v119 = BYTE6(v25);
          goto LABEL_55;
      }
      break;
    case 2uLL:
      uint64_t v43 = *(void *)(a1 + 16);
      uint64_t v42 = *(void *)(a1 + 24);
      uint64_t v26 = v42 - v43;
      if (!__OFSUB__(v42, v43)) {
        goto LABEL_17;
      }
      goto LABEL_60;
    case 3uLL:
      goto LABEL_17;
    default:
      uint64_t v26 = BYTE6(a2);
      goto LABEL_17;
  }
  return result;
}

id sub_1DB093C64(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_multiply_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    id result = (id)sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

id sub_1DB093D80(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_add_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    id result = (id)sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

id sub_1DB093E9C(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  id result = objc_msgSend(a1, sel_sub_corecryptoError_, a2, &v3);
  if (!result)
  {
    sub_1DB0C5288();
    sub_1DB0C50B8();
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    id result = (id)sub_1DB0C5358();
    __break(1u);
  }
  return result;
}

id TDMClient.__allocating_init(TID:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  id v6 = sub_1DB097D5C(a1, a2);
  sub_1DB042664(a1, a2);
  return v6;
}

id TDMClient.init(TID:)(uint64_t a1, unint64_t a2)
{
  id v4 = sub_1DB097D5C(a1, a2);
  sub_1DB042664(a1, a2);
  return v4;
}

id sub_1DB0940BC()
{
  id result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_be), sel_serializedPublicKey_, 1);
  if (result)
  {
    char v2 = result;
    uint64_t v3 = sub_1DB0C4A08();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1DB0941CC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_26;
      }
      uint64_t v13 = HIDWORD(a5) - (int)a5;
LABEL_6:
      id v16 = self;
      sub_1DB0C4F38();
      sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      id v56 = v16;
      int64_t v17 = (int64_t)objc_msgSend(v16, sel_groupOrderByteCountForCP_, v60);
      if (v17 < 0)
      {
        __break(1u);
        goto LABEL_23;
      }
      if (v17 + 0x4000000000000000 < 0)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v13 != 2 * v17)
      {
        sub_1DB07453C();
        swift_allocError();
        *uint64_t v34 = 0;
        swift_willThrow();
        return v16;
      }
      unint64_t v49 = a4;
      uint64_t v18 = a5;
      sub_1DB04239C(a5, a6);
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v19 = (uint64_t)objc_msgSend(v16, sel_groupOrderByteCountForCP_, v59);
      if (v19 < 0) {
        goto LABEL_24;
      }
      uint64_t v48 = v8;
      sub_1DB05628C(v19, a5, a6, &v60);
      uint64_t v20 = v60;
      unint64_t v21 = (unint64_t)v61;
      int v58 = 0;
      sub_1DB04239C(v60, (unint64_t)v61);
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v16 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      uint64_t v22 = v18;
      unint64_t v23 = (void *)sub_1DB0C49E8();
      id v24 = objc_msgSend(v16, sel_initWithData_inGroup_reduction_corecryptoError_, v23, v59, 0, &v58);
      sub_1DB042664(v20, v21);

      if (!v24)
      {
        int v35 = v58;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v36 = v35;
        *(unsigned char *)(v36 + 4) = 0;
        swift_willThrow();
        uint64_t v37 = v20;
        unint64_t v38 = v21;
LABEL_19:
        sub_1DB042664(v37, v38);
        return v16;
      }
      sub_1DB042664(v20, v21);
      sub_1DB04239C(v22, a6);
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v25 = (uint64_t)objc_msgSend(v56, sel_groupOrderByteCountForCP_, v59);
      if (v25 < 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
      }
      sub_1DB094810(v25, v22, a6, &v60);
      uint64_t v26 = v60;
      id v16 = v61;
      int v58 = 0;
      sub_1DB04239C(v60, (unint64_t)v61);
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v27 = v59;
      id v28 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      uint64_t v29 = (void *)sub_1DB0C49E8();
      id v30 = objc_msgSend(v28, sel_initWithData_inGroup_reduction_corecryptoError_, v29, v27, 0, &v58);
      sub_1DB042664(v26, (unint64_t)v16);

      if (!v30)
      {
        int v39 = v58;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v40 = v39;
        *(unsigned char *)(v40 + 4) = 0;
        swift_willThrow();

        uint64_t v37 = v26;
        unint64_t v38 = (unint64_t)v16;
        goto LABEL_19;
      }
      sub_1DB042664(v26, (unint64_t)v16);
      id v31 = v24;
      id v32 = v30;
      id v16 = (id)a7;
      sub_1DB04239C(a7, a8);
      id v33 = sub_1DB0677F8();
      if (v9)
      {
        sub_1DB042664(a7, a8);
      }
      else
      {
        uint64_t v42 = v33;
        sub_1DB042664(a7, a8);
        sub_1DB04239C(a3, v49);
        id v43 = sub_1DB0677F8();
        sub_1DB042664(a3, v49);
        char v57 = *(unsigned char *)(v48 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient);
        uint64_t v55 = *(void *)(v48 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient + 8);
        unsigned __int8 v44 = *(unsigned char *)(v48 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient + 16);
        uint64_t v45 = *(void *)(v48 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input);
        unint64_t v46 = *(void *)(v48 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input + 8);
        id v47 = *(id *)(v48 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_blind);
        id v16 = (id)sub_1DB071DD0(v45, v46, a1, a2, v47, v43, v31, v32, v42, v57, v55, v44);
      }
      return v16;
    case 2uLL:
      uint64_t v15 = *(void *)(a5 + 16);
      uint64_t v14 = *(void *)(a5 + 24);
      uint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v13 = BYTE6(a6);
      goto LABEL_6;
  }
}

uint64_t sub_1DB094810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1DB097C70(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = sub_1DB097BF4(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x1DB094984);
  }
LABEL_16:
  uint64_t v14 = sub_1DB0C49B8();
  uint64_t v16 = v15;
  uint64_t result = sub_1DB042664(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

void TDMClient.init()()
{
}

id TDMClient.__deallocating_deinit()
{
  return sub_1DB095898(type metadata accessor for TDMClient);
}

uint64_t TDMServerEvaluation.proof.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof + 8));
  return v1;
}

uint64_t TDMServerEvaluation.evaluatedElement.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement);
  sub_1DB04239C(v1, *(void *)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement + 8));
  return v1;
}

id TDMServerEvaluation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void TDMServerEvaluation.init()()
{
}

id TDMServerEvaluation.__deallocating_deinit()
{
  return sub_1DB095898(type metadata accessor for TDMServerEvaluation);
}

id TDMServer.init()()
{
  sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  id v1 = v0;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v6);
  if (result)
  {
    *(void *)&v1[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_secret] = result;
    uint64_t v3 = &v1[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer];
    *uint64_t v3 = 1;
    *((void *)v3 + 1) = 4;
    *((void *)v3 + 2) = result;
    v3[24] = 1;
    id v4 = result;

    v5.receiver = v1;
    v5.super_class = (Class)type metadata accessor for TDMServer();
    return objc_msgSendSuper2(&v5, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1DB094F4C()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 16);
  sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  id v2 = v1;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v8);
  id v4 = sub_1DB072A88((uint64_t)v2, v3);

  id result = objc_msgSend(v4, sel_serializedPublicKey_, 1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_1DB0C4A08();

    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB0950FC()
{
  return 0;
}

uint64_t sub_1DB0951B0(uint64_t a1, unint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  sub_1DB04239C(a1, a2);
  id v6 = sub_1DB0677F8();
  sub_1DB042664(a1, a2);
  if (v3) {
    return (uint64_t)v2;
  }
  int v7 = v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer];
  uint64_t v8 = *(void *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 8];
  char v9 = v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 24];
  id v10 = *(id *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 16];
  sub_1DB0C4F38();
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  uint64_t v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v45);
  if (!v11)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v2 = v11;
  if (v7 == 1) {
    char v12 = v9;
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    sub_1DB07453C();
    swift_allocError();
    *uint64_t v37 = 1;
    swift_willThrow();

    return (uint64_t)v2;
  }
  id v13 = sub_1DB091578(&v46, (char *)v6, 0, 0x8000000000000uLL, v11, v7, v8, v10, v9);
  uint64_t v14 = v46;
  if (!v46) {
    goto LABEL_15;
  }
  uint64_t v15 = v13;
  uint64_t v16 = v47;

  id v17 = objc_msgSend(v14, sel_serializedBigEndianScalar);
  if (!v17) {
    goto LABEL_17;
  }
  uint64_t v18 = v17;
  uint64_t v42 = v14;
  uint64_t v19 = sub_1DB0C4A08();
  unint64_t v43 = v20;

  uint64_t v41 = v16;
  id v21 = objc_msgSend(v16, sel_serializedBigEndianScalar);
  if (!v21) {
    goto LABEL_17;
  }
  uint64_t v22 = v21;
  uint64_t v23 = sub_1DB0C4A08();
  unint64_t v25 = v24;

  unint64_t v46 = (void *)v19;
  id v47 = (void *)v43;
  uint64_t v40 = v19;
  sub_1DB04239C(v19, v43);
  sub_1DB04239C(v23, v25);
  sub_1DB05DEE8(v23, v25);
  sub_1DB042664(v23, v25);
  uint64_t v26 = v46;
  uint64_t v27 = v47;
  id v28 = objc_msgSend(v15, sel_serializedPublicKey_, 1);
  int v39 = v15;
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = sub_1DB0C4A08();
    uint64_t v32 = v31;

    id v33 = (objc_class *)type metadata accessor for TDMServerEvaluation();
    uint64_t v34 = (char *)objc_allocWithZone(v33);
    int v35 = &v34[OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_proof];
    *(void *)int v35 = v26;
    *((void *)v35 + 1) = v27;
    uint64_t v36 = (uint64_t *)&v34[OBJC_IVAR____TtC16CryptoKitPrivate19TDMServerEvaluation_evaluatedElement];
    *uint64_t v36 = v30;
    v36[1] = v32;
    v44.receiver = v34;
    v44.super_class = v33;
    id v2 = objc_msgSendSuper2(&v44, sel_init);
    sub_1DB042664(v23, v25);
    sub_1DB042664(v40, v43);

    return (uint64_t)v2;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = sub_1DB0C5358();
  __break(1u);
  return result;
}

uint64_t sub_1DB095664(uint64_t a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  id v13 = (id *)(v6 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer);
  uint64_t v14 = *(void *)(v6 + OBJC_IVAR____TtC16CryptoKitPrivate9TDMServer_oprfServer + 8);
  char v15 = *((unsigned char *)v13 + 24);
  int v16 = *(unsigned __int8 *)v13;
  id v17 = v13[2];
  LOBYTE(v14) = sub_1DB0921A4(a3, a4, a1, a2, a5, a6, v16, v14, v17, v15);

  return v14 & 1;
}

id TDMServer.__deallocating_deinit()
{
  return sub_1DB095898(type metadata accessor for TDMServer);
}

id sub_1DB095898(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

char *sub_1DB095920(void *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  int v180 = a7;
  uint64_t v195 = a6;
  id v178 = a2;
  uint64_t v166 = a1;
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = sub_1DB0C4FA8();
  uint64_t v193 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v197 = (unint64_t)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v194 = (void *)sub_1DB0C4D28();
  uint64_t v192 = (void (**)(void, void, void))*(v194 - 1);
  MEMORY[0x1F4188790](v194);
  uint64_t v191 = (char *)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1DB0C5088();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v16 = (char *)&v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DB0C5058();
  uint64_t v17 = sub_1DB0C5048();
  unint64_t v19 = v18;
  unint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  unint64_t v185 = v16;
  uint64_t v187 = v13;
  uint64_t v186 = v14 + 8;
  uint64_t v184 = v20;
  v20(v16, v13);
  if (v19 >> 60 == 15)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  *(void *)&long long v199 = v17;
  *((void *)&v199 + 1) = v19;
  sub_1DB067A4C(v17, v19);
  sub_1DB04239C(a4, a5);
  sub_1DB05DEE8(a4, a5);
  uint64_t v183 = a4;
  unint64_t v188 = a5;
  sub_1DB042664(a4, a5);
  sub_1DB069BB4(v17, v19);
  unint64_t v21 = *((void *)&v199 + 1);
  uint64_t v172 = v199;
  uint64_t v22 = &selRef_initWithBytes_length_;
  id v23 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
  if (!v23)
  {
LABEL_94:
    __break(1u);
LABEL_95:
    if (v178) {
      goto LABEL_97;
    }
LABEL_96:
    __break(1u);
  }
  unint64_t v24 = v23;
  uint64_t v173 = sub_1DB0C4A08();
  unint64_t v26 = v25;

  uint64_t v27 = 0;
  switch(v26 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v173), v173))
      {
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      uint64_t v27 = HIDWORD(v173) - (int)v173;
LABEL_8:
      sub_1DB05A7A4(v27, 2);
      uint64_t v31 = v30;
      unint64_t v33 = v32;
      *(void *)&long long v199 = v30;
      *((void *)&v199 + 1) = v32;
      sub_1DB04239C(v30, v32);
      uint64_t v34 = v173;
      sub_1DB04239C(v173, v26);
      sub_1DB05DEE8(v34, v26);
      sub_1DB042664(v34, v26);
      sub_1DB042664(v31, v33);
      long long v35 = v199;
      uint64_t v36 = 0;
      unint64_t v37 = v197;
      switch(v21 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v172), v172)) {
            goto LABEL_85;
          }
          uint64_t v36 = HIDWORD(v172) - (int)v172;
LABEL_13:
          unint64_t v168 = v26;
          sub_1DB05A7A4(v36, 2);
          uint64_t v41 = v40;
          unint64_t v43 = v42;
          long long v202 = v35;
          sub_1DB04239C(v35, *((unint64_t *)&v35 + 1));
          sub_1DB05DEE8(v41, v43);
          sub_1DB042664(v41, v43);
          sub_1DB042664(v35, *((unint64_t *)&v35 + 1));
          unint64_t v45 = *((void *)&v202 + 1);
          uint64_t v44 = v202;
          long long v199 = v202;
          sub_1DB04239C(v202, *((unint64_t *)&v202 + 1));
          uint64_t v46 = v172;
          sub_1DB04239C(v172, v21);
          sub_1DB05DEE8(v46, v21);
          unint64_t v169 = v21;
          sub_1DB042664(v46, v21);
          sub_1DB042664(v44, v45);
          unint64_t v48 = *((void *)&v199 + 1);
          uint64_t v47 = v199;
          sub_1DB074590(&qword_1EBE7DF98, MEMORY[0x1E4F25180]);
          sub_1DB0C4CF8();
          uint64_t v49 = v196;
          unint64_t v170 = v48;
          switch(v48 >> 62)
          {
            case 1uLL:
              if (v47 >> 32 < (int)v47) {
                goto LABEL_87;
              }
              unint64_t v48 = v170;
              sub_1DB04239C(v47, v170);
              unint64_t v37 = v197;
              sub_1DB097B14((int)v47, v47 >> 32);
              goto LABEL_21;
            case 2uLL:
              uint64_t v190 = v10;
              uint64_t v50 = v47;
              uint64_t v51 = *(void *)(v47 + 16);
              uint64_t v52 = *(void *)(v47 + 24);
              sub_1DB04239C(v50, v48);
              swift_retain();
              swift_retain();
              sub_1DB097B14(v51, v52);
              if (v49) {
                goto LABEL_98;
              }
              uint64_t v49 = 0;
              swift_release();
              swift_release();
              sub_1DB042664(v50, v48);
              uint64_t v47 = v50;
              unint64_t v37 = v197;
              uint64_t v10 = v190;
              goto LABEL_22;
            case 3uLL:
              *(void *)((char *)&v199 + 6) = 0;
              *(void *)&long long v199 = 0;
              goto LABEL_18;
            default:
              *(void *)&long long v199 = v47;
              WORD4(v199) = v48;
              BYTE10(v199) = BYTE2(v48);
              BYTE11(v199) = BYTE3(v48);
              BYTE12(v199) = BYTE4(v48);
              BYTE13(v199) = BYTE5(v48);
LABEL_18:
              sub_1DB0C4CD8();
LABEL_21:
              sub_1DB042664(v47, v48);
LABEL_22:
              uint64_t v167 = v47;
              uint64_t v53 = v191;
              sub_1DB0C4CE8();
              (*(void (**)(unint64_t, uint64_t))(v193 + 8))(v37, v10);
              uint64_t v54 = v194;
              uint64_t v200 = (uint64_t)v194;
              uint64_t v201 = sub_1DB074590(&qword_1EBE7DF88, MEMORY[0x1E4F24FA0]);
              boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v199);
              id v56 = v192;
              ((void (**)(uint64_t *, char *, void *))v192)[2](boxed_opaque_existential_1, v53, v54);
              __swift_project_boxed_opaque_existential_1(&v199, v200);
              sub_1DB0C4908();
              uint64_t v193 = v49;
              ((void (*)(char *, void *))v56[1])(v53, v54);
              unint64_t v58 = *((void *)&v202 + 1);
              uint64_t v57 = v202;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v199);
              unint64_t v59 = *(void *)(v195 + 16);
              if (!v59) {
                goto LABEL_95;
              }
              uint64_t v60 = 0;
              id v171 = 0;
              id v61 = 0;
              uint64_t v182 = v57;
              BOOL v62 = __OFSUB__(HIDWORD(v57), v57);
              BOOL v176 = v62;
              uint64_t v175 = HIDWORD(v57) - (int)v57;
              uint64_t v174 = BYTE6(v58);
              unint64_t v165 = v59 - 1;
              uint64_t v63 = v195 + 40;
              unint64_t v181 = v58 >> 62;
              unint64_t v179 = v58;
              unint64_t v177 = v59;
              uint64_t v164 = v195 + 40;
              break;
          }
          break;
        case 2uLL:
          uint64_t v39 = *(void *)(v172 + 16);
          uint64_t v38 = *(void *)(v172 + 24);
          uint64_t v36 = v38 - v39;
          if (!__OFSUB__(v38, v39)) {
            goto LABEL_13;
          }
          goto LABEL_86;
        case 3uLL:
          goto LABEL_13;
        default:
          uint64_t v36 = BYTE6(v21);
          goto LABEL_13;
      }
LABEL_27:
      unint64_t v64 = (void **)(v63 + 16 * v60);
      uint64_t v195 = v60;
      while (2)
      {
        unint64_t v65 = *(v64 - 1);
        uint64_t v66 = *v64;
        uint64_t v190 = (uint64_t)v64;
        id v67 = v65;
        id v68 = v66;
        uint64_t v69 = v67;
        id v70 = v68;
        unint64_t v71 = v22[12];
        unint64_t v194 = v69;
        id v72 = objc_msgSend(v69, v71, 1);
        if (!v72) {
          goto LABEL_88;
        }
        uint64_t v73 = v72;
        uint64_t v74 = sub_1DB0C4A08();
        unint64_t v76 = v75;

        id v77 = objc_msgSend(v70, v22[12], 1);
        if (!v77) {
          goto LABEL_89;
        }
        unint64_t v78 = v77;
        uint64_t v189 = v195 + 1;
        uint64_t v196 = sub_1DB0C4A08();
        unint64_t v197 = v79;

        unint64_t v80 = v188;
        uint64_t v81 = v182;
        uint64_t v82 = 0;
        switch(v181)
        {
          case 1uLL:
            uint64_t v82 = v175;
            if (v176) {
              goto LABEL_76;
            }
            goto LABEL_35;
          case 2uLL:
            uint64_t v84 = *(void *)(v182 + 16);
            uint64_t v83 = *(void *)(v182 + 24);
            uint64_t v82 = v83 - v84;
            if (!__OFSUB__(v83, v84)) {
              goto LABEL_35;
            }
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
            goto LABEL_83;
          case 3uLL:
            goto LABEL_35;
          default:
            uint64_t v82 = v174;
LABEL_35:
            uint64_t v192 = (void (**)(void, void, void))v70;
            sub_1DB05A7A4(v82, 2);
            uint64_t v86 = v85;
            unint64_t v88 = v87;
            *(void *)&long long v202 = v85;
            *((void *)&v202 + 1) = v87;
            sub_1DB04239C(v85, v87);
            sub_1DB04239C(v81, v58);
            sub_1DB05DEE8(v81, v58);
            sub_1DB042664(v81, v58);
            sub_1DB042664(v86, v88);
            long long v89 = v202;
            sub_1DB05A7A4(v195, 2);
            uint64_t v91 = v90;
            unint64_t v93 = v92;
            long long v198 = v89;
            sub_1DB04239C(v89, *((unint64_t *)&v89 + 1));
            sub_1DB05DEE8(v91, v93);
            sub_1DB042664(v91, v93);
            sub_1DB042664(v89, *((unint64_t *)&v89 + 1));
            long long v94 = v198;
            uint64_t v95 = 0;
            switch(v76 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v74), v74)) {
                  goto LABEL_77;
                }
                uint64_t v95 = HIDWORD(v74) - (int)v74;
                break;
              case 2uLL:
                uint64_t v97 = *(void *)(v74 + 16);
                uint64_t v96 = *(void *)(v74 + 24);
                uint64_t v95 = v96 - v97;
                if (!__OFSUB__(v96, v97)) {
                  goto LABEL_40;
                }
                goto LABEL_78;
              case 3uLL:
                goto LABEL_40;
              default:
                uint64_t v95 = BYTE6(v76);
                goto LABEL_40;
            }
            break;
        }
LABEL_40:
        sub_1DB05A7A4(v95, 2);
        uint64_t v99 = v98;
        unint64_t v101 = v100;
        long long v202 = v94;
        sub_1DB04239C(v94, *((unint64_t *)&v94 + 1));
        sub_1DB05DEE8(v99, v101);
        sub_1DB042664(v99, v101);
        sub_1DB042664(v94, *((unint64_t *)&v94 + 1));
        long long v102 = v202;
        long long v198 = v202;
        sub_1DB04239C(v202, *((unint64_t *)&v202 + 1));
        sub_1DB04239C(v74, v76);
        sub_1DB05DEE8(v74, v76);
        sub_1DB042664(v74, v76);
        sub_1DB042664(v102, *((unint64_t *)&v102 + 1));
        long long v103 = v198;
        uint64_t v104 = 0;
        switch(v197 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v196), v196)) {
              goto LABEL_80;
            }
            uint64_t v104 = HIDWORD(v196) - (int)v196;
LABEL_45:
            sub_1DB05A7A4(v104, 2);
            uint64_t v108 = v107;
            unint64_t v110 = v109;
            long long v202 = v103;
            sub_1DB04239C(v103, *((unint64_t *)&v103 + 1));
            sub_1DB05DEE8(v108, v110);
            sub_1DB042664(v108, v110);
            sub_1DB042664(v103, *((unint64_t *)&v103 + 1));
            long long v111 = v202;
            long long v199 = v202;
            sub_1DB04239C(v202, *((unint64_t *)&v202 + 1));
            uint64_t v113 = v196;
            unint64_t v112 = v197;
            sub_1DB04239C(v196, v197);
            sub_1DB05DEE8(v113, v112);
            sub_1DB042664(v113, v112);
            sub_1DB042664(v111, *((unint64_t *)&v111 + 1));
            uint64_t v191 = v61;
            if (v180)
            {
              unint64_t v114 = v185;
              sub_1DB0C5058();
              uint64_t v115 = sub_1DB0C5048();
              unint64_t v117 = v116;
              v184(v114, v187);
              if (v117 >> 60 == 15) {
                goto LABEL_92;
              }
              *(void *)&long long v202 = v115;
              *((void *)&v202 + 1) = v117;
              uint64_t v118 = v183;
              sub_1DB04239C(v183, v80);
              sub_1DB067A4C(v115, v117);
              sub_1DB05DEE8(v118, v80);
              sub_1DB042664(v118, v80);
              sub_1DB069BB4(v115, v117);
              long long v119 = v202;
              long long v120 = v199;
              uint64_t v121 = 0;
              switch(*((void *)&v202 + 1) >> 62)
              {
                case 1:
                  if (__OFSUB__(DWORD1(v202), v202)) {
                    goto LABEL_81;
                  }
                  uint64_t v121 = DWORD1(v202) - (int)v202;
LABEL_53:
                  sub_1DB04239C(v199, *((unint64_t *)&v199 + 1));
                  sub_1DB05A7A4(v121, 2);
                  uint64_t v131 = v130;
                  unint64_t v133 = v132;
                  long long v198 = v120;
                  sub_1DB04239C(v120, *((unint64_t *)&v120 + 1));
                  sub_1DB05DEE8(v131, v133);
                  sub_1DB042664(v131, v133);
                  sub_1DB042664(v120, *((unint64_t *)&v120 + 1));
                  unint64_t v135 = *((void *)&v198 + 1);
                  uint64_t v134 = v198;
                  long long v202 = v198;
                  sub_1DB04239C(v198, *((unint64_t *)&v198 + 1));
                  sub_1DB04239C(v119, *((unint64_t *)&v119 + 1));
                  sub_1DB05DEE8(v119, *((unint64_t *)&v119 + 1));
                  sub_1DB042664(v119, *((unint64_t *)&v119 + 1));
                  uint64_t v136 = v134;
                  unint64_t v80 = v188;
                  sub_1DB042664(v136, v135);
                  sub_1DB042664(v120, *((unint64_t *)&v120 + 1));
                  unint64_t v127 = *((void *)&v119 + 1);
                  uint64_t v126 = v119;
                  break;
                case 2:
                  uint64_t v129 = *(void *)(v202 + 16);
                  uint64_t v128 = *(void *)(v202 + 24);
                  uint64_t v121 = v128 - v129;
                  if (!__OFSUB__(v128, v129)) {
                    goto LABEL_53;
                  }
                  goto LABEL_82;
                case 3:
                  goto LABEL_53;
                default:
                  uint64_t v121 = BYTE14(v202);
                  goto LABEL_53;
              }
            }
            else
            {
              long long v122 = v199;
              sub_1DB04239C(v199, *((unint64_t *)&v199 + 1));
              uint64_t v123 = sub_1DB05C118(0x7469736F706D6F43uLL, 0xE900000000000065);
              unint64_t v125 = v124;
              long long v202 = v122;
              sub_1DB04239C(v122, *((unint64_t *)&v122 + 1));
              sub_1DB05DEE8(v123, v125);
              sub_1DB042664(v123, v125);
              sub_1DB042664(v122, *((unint64_t *)&v122 + 1));
              unint64_t v127 = *((void *)&v122 + 1);
              uint64_t v126 = v122;
            }
            sub_1DB042664(v126, v127);
            unint64_t v137 = *((void *)&v202 + 1);
            unint64_t v58 = v202;
            long long v199 = v202;
            sub_1DB04239C(v202, *((unint64_t *)&v202 + 1));
            id v138 = v185;
            sub_1DB0C5058();
            uint64_t v139 = sub_1DB0C5048();
            unint64_t v141 = v140;
            v184(v138, v187);
            uint64_t v142 = v183;
            if (v141 >> 60 == 15) {
              goto LABEL_90;
            }
            *(void *)&long long v202 = v139;
            *((void *)&v202 + 1) = v141;
            sub_1DB04239C(v183, v80);
            sub_1DB067A4C(v139, v141);
            sub_1DB05DEE8(v142, v80);
            sub_1DB042664(v142, v80);
            sub_1DB069BB4(v139, v141);
            id v61 = (char *)*((void *)&v202 + 1);
            uint64_t v22 = (char **)v202;
            sub_1DB0C4F38();
            sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
            uint64_t v143 = sub_1DB0C4D68();
            uint64_t v144 = v193;
            uint64_t v145 = sub_1DB0632DC(v58, v137, 1, (uint64_t)v22, (unint64_t)v61, v143, 0);
            if (v144) {
              goto LABEL_70;
            }
            uint64_t v193 = 0;
            if (!*(void *)(v145 + 16)) {
              goto LABEL_91;
            }
            id v146 = *(id *)(v145 + 32);
            swift_bridgeObjectRelease();
            sub_1DB042664((uint64_t)v22, (unint64_t)v61);
            sub_1DB042664(v58, v137);
            if (v191)
            {
              unint64_t v147 = v191;
              id v148 = sub_1DB072A88((uint64_t)v146, v194);
              id v61 = (char *)sub_1DB07A220(v148, (uint64_t)v147);
            }
            else
            {
              id v61 = (char *)sub_1DB072A88((uint64_t)v146, v194);
            }
            uint64_t v22 = &selRef_initWithBytes_length_;
            unint64_t v58 = v179;
            unint64_t v137 = v177;
            id v149 = v192;
            if (v178)
            {
              sub_1DB042664(v196, v197);
              sub_1DB042664(v74, v76);

              sub_1DB042664(v199, *((unint64_t *)&v199 + 1));
              id v150 = v194;

              unint64_t v64 = (void **)(v190 + 16);
              uint64_t v195 = v189;
              if (v137 == v189)
              {
                if (v61)
                {
                  id v158 = v178;
                  uint64_t v159 = v61;
                  id v160 = sub_1DB072A88((uint64_t)v158, v159);

                  id v155 = v160;
                  uint64_t v74 = v182;
                  goto LABEL_73;
                }
LABEL_97:
                __break(1u);
LABEL_98:
                swift_release();
                swift_release();
                __break(1u);
                JUMPOUT(0x1DB096C7CLL);
              }
              continue;
            }
            if (v171)
            {
              id v151 = v171;
              id v152 = sub_1DB072A88((uint64_t)v146, v149);
              id v171 = sub_1DB07A220(v152, (uint64_t)v151);
              sub_1DB042664(v196, v197);
              sub_1DB042664(v74, v76);

              id v149 = v192;
              sub_1DB042664(v199, *((unint64_t *)&v199 + 1));
            }
            else
            {
              id v171 = sub_1DB072A88((uint64_t)v146, v192);
              sub_1DB042664(v196, v197);
              sub_1DB042664(v74, v76);

              sub_1DB042664(v199, *((unint64_t *)&v199 + 1));
            }
            id v153 = v194;
            uint64_t v154 = v195;
            uint64_t v60 = v195 + 1;

            uint64_t v63 = v164;
            if (v165 != v154) {
              goto LABEL_27;
            }
            if (!v61) {
              goto LABEL_96;
            }
            uint64_t v74 = v182;
            id v155 = v171;
            if (v171)
            {
LABEL_73:
              id v161 = v155;
              uint64_t v157 = v61;
              sub_1DB042664(v74, v58);
              sub_1DB042664(v167, v170);
              sub_1DB042664(v173, v168);
              sub_1DB042664(v172, v169);

              *uint64_t v166 = v161;
              return v157;
            }
            __break(1u);
LABEL_70:
            sub_1DB042664((uint64_t)v22, (unint64_t)v61);
            sub_1DB042664(v58, v137);
            sub_1DB042664(v196, v197);
            sub_1DB042664(v74, v76);
            sub_1DB042664(v182, v179);
            sub_1DB042664(v167, v170);
            sub_1DB042664(v173, v168);
            sub_1DB042664(v172, v169);
            sub_1DB042664(v58, v137);
            id v156 = v194;

            uint64_t v157 = (char *)v192;
            return v157;
          case 2uLL:
            uint64_t v106 = *(void *)(v196 + 16);
            uint64_t v105 = *(void *)(v196 + 24);
            uint64_t v104 = v105 - v106;
            if (!__OFSUB__(v105, v106)) {
              goto LABEL_45;
            }
            goto LABEL_79;
          case 3uLL:
            goto LABEL_45;
          default:
            uint64_t v104 = BYTE6(v197);
            goto LABEL_45;
        }
      }
    case 2uLL:
      uint64_t v29 = *(void *)(v173 + 16);
      uint64_t v28 = *(void *)(v173 + 24);
      uint64_t v27 = v28 - v29;
      if (!__OFSUB__(v28, v29)) {
        goto LABEL_8;
      }
      goto LABEL_84;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v27 = BYTE6(v26);
      goto LABEL_8;
  }
}

uint64_t sub_1DB096CEC(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, int a8)
{
  LODWORD(v138) = a8;
  uint64_t v139 = a1;
  unint64_t v140 = a2;
  uint64_t v13 = sub_1DB0C5088();
  uint64_t v142 = *(void *)(v13 - 8);
  uint64_t v143 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = objc_msgSend(a3, sel_serializedPublicKey_, 1);
  if (!v16)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v17 = v16;
  uint64_t v18 = sub_1DB0C4A08();
  unint64_t v20 = v19;

  id v21 = objc_msgSend(a4, sel_serializedPublicKey_, 1);
  if (!v21)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v22 = v21;
  uint64_t v155 = sub_1DB0C4A08();
  unint64_t v24 = v23;

  id v25 = objc_msgSend(a5, sel_serializedPublicKey_, 1);
  if (!v25)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  unint64_t v26 = v25;
  uint64_t v148 = sub_1DB0C4A08();
  unint64_t v145 = v27;

  id v28 = objc_msgSend(a6, sel_serializedPublicKey_, 1);
  if (!v28)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v29 = v28;
  uint64_t v147 = sub_1DB0C4A08();
  unint64_t v144 = v30;

  id v31 = objc_msgSend(a7, sel_serializedPublicKey_, 1);
  if (!v31)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  unint64_t v32 = v31;
  uint64_t v146 = sub_1DB0C4A08();
  unint64_t v34 = v33;

  unint64_t v35 = v145;
  uint64_t v36 = 0;
  switch(v20 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v18), v18))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v36 = HIDWORD(v18) - (int)v18;
LABEL_11:
      sub_1DB05A7A4(v36, 2);
      uint64_t v40 = v39;
      unint64_t v42 = v41;
      uint64_t v149 = v39;
      unint64_t v150 = v41;
      sub_1DB04239C(v39, v41);
      sub_1DB04239C(v18, v20);
      sub_1DB05DEE8(v18, v20);
      sub_1DB042664(v18, v20);
      sub_1DB042664(v40, v42);
      uint64_t v43 = v149;
      unint64_t v44 = v150;
      uint64_t v45 = 0;
      switch(v24 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v155), v155)) {
            goto LABEL_49;
          }
          uint64_t v45 = HIDWORD(v155) - (int)v155;
LABEL_16:
          unint64_t v141 = v34;
          uint64_t v135 = v18;
          unint64_t v136 = v20;
          sub_1DB05A7A4(v45, 2);
          uint64_t v49 = v48;
          unint64_t v51 = v50;
          uint64_t v151 = v43;
          unint64_t v152 = v44;
          sub_1DB04239C(v43, v44);
          sub_1DB05DEE8(v49, v51);
          sub_1DB042664(v49, v51);
          sub_1DB042664(v43, v44);
          uint64_t v52 = v151;
          unint64_t v53 = v152;
          uint64_t v149 = v151;
          unint64_t v150 = v152;
          sub_1DB04239C(v151, v152);
          uint64_t v54 = v155;
          sub_1DB04239C(v155, v24);
          sub_1DB05DEE8(v54, v24);
          sub_1DB042664(v54, v24);
          sub_1DB042664(v52, v53);
          uint64_t v55 = v149;
          unint64_t v56 = v150;
          uint64_t v57 = 0;
          switch(v35 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v148), v148)) {
                goto LABEL_51;
              }
              uint64_t v57 = HIDWORD(v148) - (int)v148;
LABEL_21:
              sub_1DB05A7A4(v57, 2);
              uint64_t v61 = v60;
              unint64_t v63 = v62;
              uint64_t v151 = v55;
              unint64_t v152 = v56;
              sub_1DB04239C(v55, v56);
              sub_1DB05DEE8(v61, v63);
              sub_1DB042664(v61, v63);
              sub_1DB042664(v55, v56);
              uint64_t v64 = v151;
              unint64_t v65 = v152;
              uint64_t v149 = v151;
              unint64_t v150 = v152;
              sub_1DB04239C(v151, v152);
              uint64_t v66 = v148;
              sub_1DB04239C(v148, v35);
              sub_1DB05DEE8(v66, v35);
              sub_1DB042664(v66, v35);
              sub_1DB042664(v64, v65);
              uint64_t v67 = v149;
              unint64_t v68 = v150;
              unint64_t v69 = v144;
              uint64_t v70 = 0;
              switch(v144 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v147), v147)) {
                    goto LABEL_53;
                  }
                  uint64_t v70 = HIDWORD(v147) - (int)v147;
                  break;
                case 2uLL:
                  uint64_t v72 = *(void *)(v147 + 16);
                  uint64_t v71 = *(void *)(v147 + 24);
                  uint64_t v70 = v71 - v72;
                  if (!__OFSUB__(v71, v72)) {
                    goto LABEL_26;
                  }
                  goto LABEL_54;
                case 3uLL:
                  goto LABEL_26;
                default:
                  uint64_t v70 = BYTE6(v144);
                  goto LABEL_26;
              }
              break;
            case 2uLL:
              uint64_t v59 = *(void *)(v148 + 16);
              uint64_t v58 = *(void *)(v148 + 24);
              uint64_t v57 = v58 - v59;
              if (!__OFSUB__(v58, v59)) {
                goto LABEL_21;
              }
              goto LABEL_52;
            case 3uLL:
              goto LABEL_21;
            default:
              uint64_t v57 = BYTE6(v35);
              goto LABEL_21;
          }
          break;
        case 2uLL:
          uint64_t v47 = *(void *)(v155 + 16);
          uint64_t v46 = *(void *)(v155 + 24);
          uint64_t v45 = v46 - v47;
          if (!__OFSUB__(v46, v47)) {
            goto LABEL_16;
          }
          goto LABEL_50;
        case 3uLL:
          goto LABEL_16;
        default:
          uint64_t v45 = BYTE6(v24);
          goto LABEL_16;
      }
LABEL_26:
      sub_1DB05A7A4(v70, 2);
      uint64_t v74 = v73;
      unint64_t v76 = v75;
      uint64_t v151 = v67;
      unint64_t v152 = v68;
      sub_1DB04239C(v67, v68);
      sub_1DB05DEE8(v74, v76);
      sub_1DB042664(v74, v76);
      sub_1DB042664(v67, v68);
      uint64_t v77 = v151;
      unint64_t v78 = v152;
      uint64_t v149 = v151;
      unint64_t v150 = v152;
      sub_1DB04239C(v151, v152);
      uint64_t v79 = v147;
      sub_1DB04239C(v147, v69);
      sub_1DB05DEE8(v79, v69);
      sub_1DB042664(v79, v69);
      sub_1DB042664(v77, v78);
      uint64_t v80 = v149;
      unint64_t v81 = v150;
      unint64_t v82 = v141;
      uint64_t v83 = 0;
      switch(v141 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v146), v146)) {
            goto LABEL_55;
          }
          uint64_t v83 = HIDWORD(v146) - (int)v146;
LABEL_31:
          unint64_t v134 = v24;
          sub_1DB05A7A4(v83, 2);
          uint64_t v87 = v86;
          unint64_t v89 = v88;
          uint64_t v151 = v80;
          unint64_t v152 = v81;
          sub_1DB04239C(v80, v81);
          sub_1DB05DEE8(v87, v89);
          sub_1DB042664(v87, v89);
          sub_1DB042664(v80, v81);
          uint64_t v90 = v151;
          unint64_t v91 = v152;
          uint64_t v153 = v151;
          unint64_t v154 = v152;
          sub_1DB04239C(v151, v152);
          uint64_t v92 = v146;
          sub_1DB04239C(v146, v82);
          sub_1DB05DEE8(v92, v82);
          sub_1DB042664(v92, v82);
          sub_1DB042664(v90, v91);
          if (v138)
          {
            sub_1DB0C5058();
            uint64_t v93 = sub_1DB0C5048();
            unint64_t v95 = v94;
            uint64_t v96 = v142 + 8;
            uint64_t v97 = *(void (**)(void))(v142 + 8);
            ((void (*)(char *, uint64_t))v97)(v15, v143);
            if (v95 >> 60 == 15)
            {
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
            uint64_t v142 = v96 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
            uint64_t v151 = v93;
            unint64_t v152 = v95;
            sub_1DB067A4C(v93, v95);
            uint64_t v99 = v139;
            unint64_t v98 = v140;
            sub_1DB04239C(v139, v140);
            sub_1DB05DEE8(v99, v98);
            sub_1DB042664(v99, v98);
            sub_1DB069BB4(v93, v95);
            uint64_t v100 = v151;
            unint64_t v101 = v152;
            uint64_t v103 = v153;
            unint64_t v102 = v154;
            uint64_t v104 = 0;
            switch(v152 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v151), v151)) {
                  goto LABEL_57;
                }
                uint64_t v104 = HIDWORD(v151) - (int)v151;
LABEL_40:
                id v138 = v97;
                uint64_t v108 = v15;
                sub_1DB04239C(v153, v154);
                sub_1DB05A7A4(v104, 2);
                uint64_t v116 = v115;
                unint64_t v118 = v117;
                uint64_t v149 = v103;
                unint64_t v150 = v102;
                sub_1DB04239C(v103, v102);
                sub_1DB05DEE8(v116, v118);
                sub_1DB042664(v116, v118);
                sub_1DB042664(v103, v102);
                uint64_t v119 = v149;
                unint64_t v120 = v150;
                uint64_t v151 = v149;
                unint64_t v152 = v150;
                sub_1DB04239C(v149, v150);
                sub_1DB04239C(v100, v101);
                sub_1DB05DEE8(v100, v101);
                sub_1DB042664(v100, v101);
                sub_1DB042664(v119, v120);
                sub_1DB042664(v103, v102);
                sub_1DB042664(v100, v101);
                uint64_t v112 = v151;
                unint64_t v111 = v152;
                uint64_t v153 = v151;
                unint64_t v154 = v152;
                break;
              case 2uLL:
                uint64_t v114 = *(void *)(v151 + 16);
                uint64_t v113 = *(void *)(v151 + 24);
                uint64_t v104 = v113 - v114;
                if (!__OFSUB__(v113, v114)) {
                  goto LABEL_40;
                }
                goto LABEL_58;
              case 3uLL:
                goto LABEL_40;
              default:
                uint64_t v104 = BYTE6(v152);
                goto LABEL_40;
            }
          }
          else
          {
            sub_1DB0C5058();
            uint64_t v105 = sub_1DB0C5048();
            unint64_t v107 = v106;
            uint64_t v108 = v15;
            id v138 = *(void (**)(void))(v142 + 8);
            v138();
            if (v107 >> 60 == 15)
            {
LABEL_66:
              __break(1u);
              goto LABEL_67;
            }
            uint64_t v109 = v153;
            unint64_t v110 = v154;
            uint64_t v151 = v153;
            unint64_t v152 = v154;
            sub_1DB04239C(v153, v154);
            sub_1DB067A4C(v105, v107);
            sub_1DB05DEE8(v105, v107);
            sub_1DB069BB4(v105, v107);
            sub_1DB042664(v109, v110);
            sub_1DB069BB4(v105, v107);
            uint64_t v112 = v151;
            unint64_t v111 = v152;
            uint64_t v153 = v151;
            unint64_t v154 = v152;
          }
          sub_1DB04239C(v112, v111);
          sub_1DB0C5058();
          uint64_t v121 = sub_1DB0C5048();
          unint64_t v123 = v122;
          ((void (*)(char *, uint64_t))v138)(v108, v143);
          if (v123 >> 60 == 15) {
            goto LABEL_64;
          }
          uint64_t v151 = v121;
          unint64_t v152 = v123;
          uint64_t v125 = v139;
          unint64_t v124 = v140;
          sub_1DB04239C(v139, v140);
          sub_1DB067A4C(v121, v123);
          sub_1DB05DEE8(v125, v124);
          sub_1DB042664(v125, v124);
          sub_1DB069BB4(v121, v123);
          uint64_t v126 = v151;
          unint64_t v127 = v152;
          sub_1DB0C4F38();
          sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
          uint64_t v128 = sub_1DB0C4D68();
          uint64_t v129 = v137;
          uint64_t v130 = sub_1DB0632DC(v112, v111, 1, v126, v127, v128, 0);
          unint64_t v131 = v134;
          if (v129)
          {
            sub_1DB042664(v126, v127);
            sub_1DB042664(v112, v111);
            sub_1DB042664(v112, v111);
            sub_1DB042664(v146, v141);
            sub_1DB042664(v147, v144);
            sub_1DB042664(v148, v145);
            sub_1DB042664(v155, v131);
            return sub_1DB042664(v135, v136);
          }
          if (!*(void *)(v130 + 16))
          {
LABEL_67:
            swift_bridgeObjectRelease();
            __break(1u);
            JUMPOUT(0x1DB09782CLL);
          }
          id v133 = *(id *)(v130 + 32);
          swift_bridgeObjectRelease();
          sub_1DB042664(v126, v127);
          sub_1DB042664(v112, v111);
          sub_1DB042664(v112, v111);
          sub_1DB042664(v146, v141);
          sub_1DB042664(v147, v144);
          sub_1DB042664(v148, v145);
          sub_1DB042664(v155, v131);
          sub_1DB042664(v135, v136);
          return (uint64_t)v133;
        case 2uLL:
          uint64_t v85 = *(void *)(v146 + 16);
          uint64_t v84 = *(void *)(v146 + 24);
          uint64_t v83 = v84 - v85;
          if (!__OFSUB__(v84, v85)) {
            goto LABEL_31;
          }
          goto LABEL_56;
        case 3uLL:
          goto LABEL_31;
        default:
          uint64_t v83 = BYTE6(v141);
          goto LABEL_31;
      }
    case 2uLL:
      uint64_t v38 = *(void *)(v18 + 16);
      uint64_t v37 = *(void *)(v18 + 24);
      uint64_t v36 = v37 - v38;
      if (!__OFSUB__(v37, v38)) {
        goto LABEL_11;
      }
      goto LABEL_48;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v36 = BYTE6(v20);
      goto LABEL_11;
  }
}

void *sub_1DB09788C(void *result, int __c)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = result[1];
  id v4 = result;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1DB097A80((int *)&__b, __c);
      uint64_t v5 = __b;
      unint64_t v6 = v19 | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v7 = v19;
      uint64_t v8 = *(void *)(__b + 16);
      uint64_t v9 = *(void *)(__b + 24);
      uint64_t v10 = sub_1DB0C48A8();
      if (!v10)
      {
        __break(1u);
        JUMPOUT(0x1DB097A70);
      }
      uint64_t v11 = v10;
      uint64_t v12 = sub_1DB0C48D8();
      uint64_t v13 = v8 - v12;
      if (__OFSUB__(v8, v12))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v14 = __OFSUB__(v9, v8);
      int64_t v15 = v9 - v8;
      if (v14) {
        goto LABEL_14;
      }
      uint64_t v16 = sub_1DB0C48C8();
      if (v16 >= v15) {
        size_t v17 = v15;
      }
      else {
        size_t v17 = v16;
      }
      uint64_t result = memset((void *)(v11 + v13), __c, v17);
      *id v4 = __b;
      v4[1] = v7 | 0x8000000000000000;
      return result;
    case 3uLL:
      return result;
    default:
      uint64_t __b = *result;
      LOWORD(v19) = v2;
      BYTE2(v19) = BYTE2(v2);
      BYTE3(v19) = BYTE3(v2);
      BYTE4(v19) = BYTE4(v2);
      BYTE5(v19) = BYTE5(v2);
      BYTE6(v19) = BYTE6(v2);
      uint64_t result = memset(&__b, __c, BYTE6(v2));
      uint64_t v5 = __b;
      unint64_t v6 = v19 | ((unint64_t)BYTE4(v19) << 32) | ((unint64_t)BYTE5(v19) << 40) | ((unint64_t)BYTE6(v19) << 48);
LABEL_4:
      *id v4 = v5;
      v4[1] = v6;
      return result;
  }
}

char *sub_1DB097A80(int *a1, int a2)
{
  uint64_t result = (char *)sub_1DB0C4968();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (char *)sub_1DB0C48A8();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  uint64_t result = (char *)sub_1DB0C48D8();
  uint64_t v8 = v5 - (void)result;
  if (__OFSUB__(v5, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v9 = v6 - v5;
  uint64_t v10 = sub_1DB0C48C8();
  if (v10 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v10;
  }
  return (char *)memset(&v7[v8], a2, v11);
}

uint64_t sub_1DB097B14(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DB0C48A8();
  if (!result || (uint64_t result = sub_1DB0C48D8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1DB0C48C8();
      sub_1DB0C4FA8();
      sub_1DB074590(&qword_1EBE7DF98, MEMORY[0x1E4F25180]);
      return sub_1DB0C4CD8();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB097BF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1DB097C60);
  }
  return result;
}

uint64_t sub_1DB097C70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1DB097D3CLL);
  }
  return result;
}

id sub_1DB097D5C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_1DB0C5088();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  BOOL v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = (uint64_t *)&v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_input];
  *int64_t v9 = a1;
  v9[1] = a2;
  uint64_t v10 = &v2[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_oprfClient];
  *uint64_t v10 = 1;
  *((void *)v10 + 1) = 4;
  v10[16] = 1;
  sub_1DB0C4F38();
  size_t v11 = v2;
  sub_1DB04239C(a1, a2);
  sub_1DB074590((unint64_t *)&qword_1EBE7DE68, MEMORY[0x1E4F25140]);
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v44);
  if (!v12)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v13 = (uint64_t)v12;
  uint64_t v41 = a1;
  unint64_t v42 = a2;
  sub_1DB0C5058();
  uint64_t v14 = sub_1DB0C5048();
  unint64_t v16 = v15;
  size_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v8, v5);
  if (v16 >> 60 == 15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_1DB0C5058();
  uint64_t v18 = sub_1DB0C5048();
  unint64_t v20 = v19;
  v17(v8, v5);
  if (v20 >> 60 != 15)
  {
    sub_1DB05A7A4(1, 1);
    uint64_t v22 = v21;
    unint64_t v24 = v23;
    uint64_t v44 = v18;
    unint64_t v45 = v20;
    sub_1DB04239C(v18, v20);
    sub_1DB05DEE8(v22, v24);
    sub_1DB042664(v22, v24);
    sub_1DB069BB4(v18, v20);
    uint64_t v25 = v44;
    unint64_t v26 = v45;
    sub_1DB05A7A4(4, 2);
    uint64_t v28 = v27;
    unint64_t v30 = v29;
    uint64_t v46 = v25;
    unint64_t v47 = v26;
    sub_1DB04239C(v25, v26);
    sub_1DB05DEE8(v28, v30);
    sub_1DB042664(v28, v30);
    sub_1DB042664(v25, v26);
    uint64_t v31 = v46;
    unint64_t v32 = v47;
    uint64_t v46 = v14;
    unint64_t v47 = v16;
    sub_1DB04239C(v14, v16);
    sub_1DB05DEE8(v31, v32);
    sub_1DB042664(v31, v32);
    sub_1DB069BB4(v14, v16);
    uint64_t v33 = v46;
    unint64_t v34 = v47;
    sub_1DB073FA8(v41, v42, v46, v47);
    uint64_t v36 = v35;
    id v37 = sub_1DB072A88(v13, v35);
    sub_1DB042664(v33, v34);

    *(void *)&v11[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_blind] = v13;
    *(void *)&v11[OBJC_IVAR____TtC16CryptoKitPrivate9TDMClient_be] = v37;

    uint64_t v38 = (objc_class *)type metadata accessor for TDMClient();
    v43.receiver = v11;
    v43.super_class = v38;
    return objc_msgSendSuper2(&v43, sel_init);
  }
LABEL_7:
  __break(1u);
  id result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TDMClient()
{
  return self;
}

uint64_t type metadata accessor for TDMServerEvaluation()
{
  return self;
}

uint64_t type metadata accessor for TDMServer()
{
  return self;
}

uint64_t method lookup function for TDMClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TDMClient);
}

uint64_t dispatch thunk of TDMClient.__allocating_init(TID:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of TDMClient.blindedElement()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of TDMClient.finalize(FSR:evaluatedElement:proof:publicKey:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t method lookup function for TDMServerEvaluation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TDMServerEvaluation);
}

uint64_t method lookup function for TDMServer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TDMServer);
}

uint64_t dispatch thunk of TDMServer.publicKey()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of TDMServer.info()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of TDMServer.evaluate(blindedElement:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of TDMServer.verifyToken(output:TID:FSR:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

unsigned char *storeEnumTagSinglePayload for OPRFErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB098424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OPRFErrors()
{
  return &type metadata for OPRFErrors;
}

unint64_t sub_1DB098460()
{
  unint64_t result = qword_1EA8FE9D8;
  if (!qword_1EA8FE9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE9D8);
  }
  return result;
}

void sub_1DB0984B4(void *a1, void *a2)
{
  if (a1)
  {
  }
}

uint64_t SPAKE2.Spake2Error.hash(into:)()
{
  return sub_1DB0C5488();
}

BOOL static SPAKE2.Spake2Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SPAKE2.Spake2Error.hashValue.getter()
{
  return sub_1DB0C54A8();
}

uint64_t static SPAKE2.minimumSeedCount.getter()
{
  return 16;
}

uint64_t static SPAKE2.CipherSuite.== infix(_:_:)()
{
  return 1;
}

uint64_t SPAKE2.CipherSuite.hash(into:)()
{
  return sub_1DB0C5488();
}

uint64_t SPAKE2.CipherSuite.hashValue.getter()
{
  return sub_1DB0C54A8();
}

uint64_t SPAKE2.WL.w0.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1DB04239C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t SPAKE2.WL.L.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1DB04239C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_1DB098668@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  unint64_t v42 = a8;
  uint64_t v43 = sub_1DB0C4D58();
  uint64_t v15 = MEMORY[0x1F4188790](v43);
  size_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v20 = (char *)&v42 - v19;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v21) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_25;
      }
      uint64_t v21 = (int)v21;
LABEL_6:
      if (v21 < 16)
      {
LABEL_7:
        sub_1DB09932C();
        swift_allocError();
        *uint64_t v25 = 3;
        return swift_willThrow();
      }
      uint64_t v44 = v18;
      *(void *)&long long v46 = a1;
      *((void *)&v46 + 1) = a2;
      sub_1DB04239C(a1, a2);
      sub_1DB0C4D48();
      *(void *)&long long v46 = a3;
      *((void *)&v46 + 1) = a4;
      *(void *)&long long v45 = a5;
      *((void *)&v45 + 1) = a6;
      uint64_t v27 = *(void *)(a7 + 24);
      if (v27 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      if (__OFADD__(2 * v27, 16))
      {
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        JUMPOUT(0x1DB098B08);
      }
      sub_1DB0C4F98();
      sub_1DB04A9EC();
      sub_1DB06F7A0();
      sub_1DB0C4E38();
      uint64_t v28 = v43;
      unint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v44 + 8);
      v44 += 8;
      uint64_t v30 = v29(v17, v43);
      MEMORY[0x1F4188790](v30);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA8);
      uint64_t v31 = sub_1DB0C4D38();
      MEMORY[0x1F4188790](v31);
      sub_1DB0C4D38();
      int v47 = 0;
      *(void *)&long long v46 = sub_1DB065640(v27);
      *((void *)&v46 + 1) = v32;
      sub_1DB09FB00((uint64_t *)&v46, &v47, a7, 8);
      int v33 = v47;
      if (v47)
      {
        if (v47 == -2)
        {
          sub_1DB09932C();
          swift_allocError();
          *unint64_t v34 = 0;
        }
        else
        {
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v39 = v33;
          *(unsigned char *)(v39 + 4) = 0;
        }
        swift_willThrow();
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)&long long v45 = sub_1DB065640(v27);
        *((void *)&v45 + 1) = v35;
        sub_1DB09FB00((uint64_t *)&v45, &v47, a7, 8);
        int v36 = v47;
        if (v47 == -2)
        {
          sub_1DB09932C();
          swift_allocError();
          unsigned char *v40 = 0;
        }
        else
        {
          if (!v47)
          {
            uint64_t result = v29(v20, v28);
            long long v37 = v45;
            uint64_t v38 = v42;
            *unint64_t v42 = v46;
            v38[1] = v37;
            return result;
          }
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v41 = v36;
          *(unsigned char *)(v41 + 4) = 0;
        }
        swift_willThrow();
        sub_1DB042664(v45, *((unint64_t *)&v45 + 1));
      }
      sub_1DB042664(v46, *((unint64_t *)&v46 + 1));
      return v29(v20, v28);
    case 2uLL:
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v21 = BYTE6(a2);
      goto LABEL_6;
  }
}

int64_t sub_1DB098B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int64_t *a5@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 24);
  int64_t result = v8 + a4;
  if (__OFADD__(v8, a4))
  {
    __break(1u);
  }
  else
  {
    int64_t v10 = sub_1DB056EB8(result, a1, a2);
    int64_t result = sub_1DB0479F4(v10, v11, v12, v13);
    *a5 = result;
  }
  return result;
}

uint64_t sub_1DB098B68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t result = sub_1DB098668(a1, a2, a3, a4, a5, a6, a7, &v19);
  if (!v8)
  {
    long long v12 = v19;
    uint64_t v13 = v20;
    unint64_t v14 = v21;
    int v22 = 0;
    *(void *)&long long v19 = sub_1DB065640(*(void *)(a7 + 32));
    *((void *)&v19 + 1) = v15;
    sub_1DB04239C(v12, *((unint64_t *)&v12 + 1));
    sub_1DB04239C(v13, v14);
    sub_1DB09FE60(&v19, v12, *((unint64_t *)&v12 + 1), v13, v14, &v22);
    int v16 = v22;
    if (v22 == -2)
    {
      sub_1DB09932C();
      swift_allocError();
      *size_t v17 = 0;
    }
    else
    {
      if (!v22)
      {
        sub_1DB04239C(v12, *((unint64_t *)&v12 + 1));
        sub_1DB042664(v12, *((unint64_t *)&v12 + 1));
        uint64_t result = sub_1DB042664(v13, v14);
        *a8 = v12;
        a8[1] = v19;
        return result;
      }
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v18 = v16;
      *(unsigned char *)(v18 + 4) = 0;
    }
    swift_willThrow();
    sub_1DB042664(v19, *((unint64_t *)&v19 + 1));
    sub_1DB042664(v12, *((unint64_t *)&v12 + 1));
    return sub_1DB042664(v13, v14);
  }
  return result;
}

uint64_t sub_1DB098CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, _DWORD *a7)
{
  switch(a6 >> 62)
  {
    case 1uLL:
      if ((int)a5 > a5 >> 32)
      {
        __break(1u);
        __break(1u);
LABEL_26:
        __break(1u);
      }
      else
      {
        sub_1DB04239C(a5, a6);
        uint64_t v11 = sub_1DB0C48A8();
        if (v11)
        {
          uint64_t v12 = sub_1DB0C48D8();
          if (__OFSUB__((int)a5, v12)) {
            goto LABEL_29;
          }
          v11 += (int)a5 - v12;
        }
        sub_1DB0C48C8();
        if (!__OFSUB__(HIDWORD(a5), a5))
        {
          if (v11)
          {
            if (a1)
            {
              if (ccrng())
              {
                *a7 = ccspake_generate_L();
                return sub_1DB042664(a5, a6);
              }
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
              JUMPOUT(0x1DB098FE0);
            }
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
      }
      __break(1u);
      __break(1u);
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    case 2uLL:
      uint64_t v14 = *(void *)(a5 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = sub_1DB0C48A8();
      if (!v15) {
        goto LABEL_17;
      }
      uint64_t v16 = sub_1DB0C48D8();
      if (__OFSUB__(v14, v16)) {
        goto LABEL_28;
      }
      v15 += v14 - v16;
LABEL_17:
      sub_1DB0C48C8();
      if (__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
        goto LABEL_26;
      }
      if (!v15) {
        goto LABEL_35;
      }
      if (!a1) {
        goto LABEL_36;
      }
      if (!ccrng()) {
        goto LABEL_37;
      }
      *a7 = ccspake_generate_L();
      swift_release();
      return swift_release();
    case 3uLL:
      if (!a1) {
        goto LABEL_38;
      }
      if (ccrng()) {
        goto LABEL_24;
      }
      goto LABEL_39;
    default:
      if (!a1)
      {
        __break(1u);
        goto LABEL_31;
      }
      if (!ccrng())
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_24:
      uint64_t result = ccspake_generate_L();
      *a7 = result;
      return result;
  }
}

uint64_t sub_1DB098FF4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!ccrng())
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  switch(a7 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a6), a6)) {
        goto LABEL_6;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    case 2uLL:
      if (!__OFSUB__(*(void *)(a6 + 24), *(void *)(a6 + 16))) {
        goto LABEL_6;
      }
      goto LABEL_21;
    default:
LABEL_6:
      if (!a8) {
        goto LABEL_27;
      }
      switch(a11 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a10), a10)) {
            goto LABEL_11;
          }
          goto LABEL_22;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a10 + 24), *(void *)(a10 + 16))) {
            goto LABEL_11;
          }
          goto LABEL_23;
        default:
LABEL_11:
          if (!a12) {
            goto LABEL_28;
          }
          switch(a15 >> 62)
          {
            case 1uLL:
              if (!__OFSUB__(HIDWORD(a14), a14)) {
                goto LABEL_16;
              }
              goto LABEL_24;
            case 2uLL:
              if (!__OFSUB__(*(void *)(a14 + 24), *(void *)(a14 + 16))) {
                goto LABEL_16;
              }
              goto LABEL_25;
            default:
LABEL_16:
              if (!a16) {
                goto LABEL_29;
              }
              if (!a18) {
                goto LABEL_30;
              }
              if (!a1) {
                goto LABEL_31;
              }
              uint64_t result = ccspake_prover_initialize();
              *a3 = result;
              return result;
          }
      }
  }
}

__n128 SPAKE2.Prover.init(w0:w1:context:verifierID:proverID:cipherSuite:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12)
{
  sub_1DB09ED14(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1DB098FF4);
  return result;
}

uint64_t SPAKE2.Prover.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  return sub_1DB09EEC0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(long long *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void *))sub_1DB098668, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1DB098FF4);
}

uint64_t SPAKE2.Prover.getShare()()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_1DB04239C(v1, *(void *)(v0 + 72));
  return v1;
}

uint64_t SPAKE2.Prover.processPeerShareAndGenerateVerificationTag(peerShare:)(uint64_t a1, unint64_t a2)
{
  return sub_1DB09F140(a1, a2);
}

unint64_t sub_1DB09932C()
{
  unint64_t result = qword_1EA8FE9E0;
  if (!qword_1EA8FE9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE9E0);
  }
  return result;
}

uint64_t SPAKE2.Prover.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1DB09F630(a1, a2, a3);
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverV2wsAC2WSVvg_0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[10];
  unint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  unint64_t v5 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_1DB04239C(v2, v3);
  return sub_1DB04239C(v4, v5);
}

__n128 sub_1DB099418@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  size_t v16 = *(void *)(a8 + 16);
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_80:
    int64_t v10 = sub_1DB05268C((uint64_t)v10);
    goto LABEL_74;
  }
  uint64_t v176 = a6;
  unint64_t v180 = a7;
  uint64_t v167 = a9;
  long long v165 = *(_OWORD *)a8;
  uint64_t v163 = *(void *)(a8 + 32);
  uint64_t v164 = *(void *)(a8 + 24);
  uint64_t v162 = *(void *)(a8 + 40);
  uint64_t v161 = *(void *)(a8 + 48);
  uint64_t v19 = *a1;
  unint64_t v174 = a1[1];
  unint64_t v20 = a1[2];
  unint64_t v21 = a1[3];
  uint64_t v166 = *(void *)(a8 + 16);
  if (v16)
  {
    uint64_t v22 = sub_1DB0C51B8();
    *(void *)(v22 + 16) = v16;
    bzero((void *)(v22 + 32), v16);
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
  }
  int v183 = 0;
  unint64_t v23 = v174;
  id v171 = (char *)v22;
  uint64_t v172 = a2;
  uint64_t v178 = v19;
  unint64_t v175 = a5;
  uint64_t v169 = v22 + 32;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v45 = a2;
      uint64_t v39 = v176;
      if (v45 >> 32 < (int)v45)
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
      }
      sub_1DB04239C(v45, a3);
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      sub_1DB04239C(v20, v21);
      sub_1DB04239C(v176, v180);
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      sub_1DB04239C(v20, v21);
      sub_1DB04239C(v45, a3);
      sub_1DB04239C(v176, v180);
      sub_1DB04239C(v19, v174);
      sub_1DB04239C(v20, v21);
      sub_1DB04239C(v45, a3);
      unint64_t v30 = v180;
      sub_1DB0A0A54((int)v45, v45 >> 32, a3 & 0x3FFFFFFFFFFFFFFFLL, v176, v180, a4, a5, v19, v174, v20, v21, (uint64_t)&v183, v169, a8, v45, a3, a10);
      if (!v170)
      {
        sub_1DB042664(v19, v174);
        sub_1DB042664(v20, v21);
        unint64_t v41 = v172;
        unint64_t v34 = v20;
        unint64_t v20 = v21;
        unint64_t v40 = a5;
        unint64_t v26 = a3;
        unint64_t v30 = a4;
        goto LABEL_71;
      }
      sub_1DB042664(v19, v174);
      sub_1DB042664(v20, v21);
      sub_1DB042664(v176, v180);
      sub_1DB042664(a4, a5);
      sub_1DB042664(v19, v174);
      sub_1DB042664(v20, v21);
      uint64_t v37 = a3;
      sub_1DB042664(v172, a3);
      uint64_t v89 = v172;
      goto LABEL_93;
    case 2uLL:
      unint64_t v32 = v21;
      uint64_t v33 = a2;
      unint64_t v34 = v20;
      unint64_t v35 = v32;
      uint64_t v146 = *(void *)(a2 + 24);
      uint64_t v151 = *(void *)(a2 + 16);
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      sub_1DB04239C(v34, v35);
      sub_1DB04239C(a2, a3);
      sub_1DB04239C(v176, v180);
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      sub_1DB04239C(v34, v35);
      sub_1DB04239C(a2, a3);
      sub_1DB04239C(v176, v180);
      sub_1DB04239C(v19, v174);
      sub_1DB04239C(v34, v35);
      sub_1DB04239C(a2, a3);
      swift_retain();
      swift_retain();
      unint64_t v115 = v35;
      unint64_t v36 = v35;
      unint64_t v20 = v174;
      uint64_t v37 = v19;
      sub_1DB0A0A54(v151, v146, a3 & 0x3FFFFFFFFFFFFFFFLL, v176, v180, a4, a5, v19, v174, v34, v115, (uint64_t)&v183, v169, a8, v33, a3, a10);
      if (!v170)
      {
        swift_release();
        swift_release();
        sub_1DB042664(v19, v174);
        sub_1DB042664(v34, v36);
        unint64_t v30 = a4;
        unint64_t v26 = a3;
        unint64_t v38 = v33;
        unint64_t v20 = v36;
        unint64_t v23 = v174;
        unint64_t v40 = v175;
        uint64_t v39 = v176;
        unint64_t v41 = v38;
        goto LABEL_71;
      }
      sub_1DB042664(v19, v174);
      sub_1DB042664(v34, v36);
      unint64_t v30 = a3;
      sub_1DB042664(v33, a3);
      sub_1DB042664(v176, v180);
      sub_1DB042664(a4, a5);
      sub_1DB042664(v19, v174);
      sub_1DB042664(v34, v36);
      sub_1DB042664(v33, a3);
      goto LABEL_91;
    case 3uLL:
      *(unint64_t *)((char *)v184.n128_u64 + 6) = 0;
      v184.n128_u64[0] = 0;
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      sub_1DB04239C(v20, v21);
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      unint64_t v168 = v20;
      sub_1DB04239C(v20, v21);
      switch(v180 >> 62)
      {
        case 1uLL:
          uint64_t v39 = a3;
          uint64_t v19 = v172;
          unint64_t v157 = v21;
          unint64_t v30 = a4;
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v176, v180);
          if (v176 >> 32 < (int)v176) {
            goto LABEL_82;
          }
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v172, a3);
          unint64_t v21 = v174;
          uint64_t v37 = v20;
          sub_1DB0A0BEC((int)v176, v176 >> 32, v180 & 0x3FFFFFFFFFFFFFFFLL, a4, a5, v178, v174, v20, v157, (uint64_t)&v183, v169, a8, v172, a3, (uint64_t)&v184, (uint64_t)&v184, v176, v180, a10);
          uint64_t v61 = v172;
          unint64_t v62 = a3;
          if (v170) {
            goto LABEL_94;
          }
          sub_1DB042664(v172, a3);
          unint64_t v26 = a3;
          unint64_t v20 = v157;
          uint64_t v39 = v176;
          unint64_t v34 = v168;
          unint64_t v41 = v172;
          unint64_t v23 = v174;
LABEL_60:
          sub_1DB042664(v39, v180);
          sub_1DB042664(v30, v175);
          sub_1DB042664(v178, v23);
          sub_1DB042664(v34, v20);
          sub_1DB042664(v41, v26);
          sub_1DB042664(v39, v180);
          unint64_t v40 = v175;
          sub_1DB042664(v39, v180);
          sub_1DB042664(a4, v175);
          uint64_t v76 = v178;
          unint64_t v30 = a4;
          break;
        case 2uLL:
          unint64_t v46 = v21;
          uint64_t v47 = v176;
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v176, v180);
          uint64_t v159 = *(void *)(v176 + 16);
          unint64_t v48 = a5;
          uint64_t v153 = *(void *)(v176 + 24);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v46);
          unint64_t v49 = a3;
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v176, v180);
          unint64_t v30 = a4;
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v46);
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v172, a3);
          swift_retain();
          swift_retain();
          uint64_t v50 = v172;
          unint64_t v106 = v46;
          unint64_t v51 = v46;
          uint64_t v37 = v180 & 0x3FFFFFFFFFFFFFFFLL;
          unint64_t v52 = v48;
          unint64_t v53 = v48;
          uint64_t v54 = v20;
          sub_1DB0A0BEC(v159, v153, v180 & 0x3FFFFFFFFFFFFFFFLL, a4, v53, v178, v174, v20, v106, (uint64_t)&v183, v169, a8, v172, a3, (uint64_t)&v184, (uint64_t)&v184, v176, v180, a10);
          if (v170) {
            goto LABEL_90;
          }
          swift_release();
          swift_release();
          sub_1DB042664(v172, a3);
          unint64_t v20 = v51;
          uint64_t v39 = v176;
          unint64_t v41 = v172;
          unint64_t v26 = a3;
          unint64_t v23 = v174;
          unint64_t v34 = v168;
          goto LABEL_60;
        case 3uLL:
          memset(v182, 0, 14);
          sub_1DB04239C(v19, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(a2, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v19, v174);
          unint64_t v20 = v21;
          sub_1DB04239C(v168, v21);
          sub_1DB04239C(a2, a3);
          sub_1DB04239C(v176, v180);
          unint64_t v30 = a4;
          switch(a5 >> 62)
          {
            case 1uLL:
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a4, a5);
              if (a4 >> 32 < (int)a4) {
                goto LABEL_84;
              }
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(v19, v174);
              sub_1DB04239C(v168, v21);
              unint64_t v26 = a3;
              unint64_t v41 = a2;
              unint64_t v29 = v174;
              unint64_t v75 = v21;
              sub_1DB0A0D98((int)a4, a4 >> 32, v175 & 0x3FFFFFFFFFFFFFFFLL, v19, v174, v168, v21, (uint64_t)&v183, v169, a8, a2, a3, (uint64_t)&v184, (uint64_t)&v184, v176, v180, (uint64_t)v182, (uint64_t)v182, a4,
                v175,
                a10);
              if (v170) {
                goto LABEL_100;
              }
              sub_1DB042664(a4, v175);
              uint64_t v33 = v176;
              unint64_t v36 = v168;
              unint64_t v68 = v174;
              unint64_t v30 = a4;
              break;
            case 2uLL:
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a4, a5);
              uint64_t v160 = *(void *)(a4 + 16);
              unint64_t v41 = a2;
              uint64_t v155 = *(void *)(a4 + 24);
              unint64_t v157 = v21;
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(v19, v174);
              sub_1DB04239C(v168, v21);
              swift_retain();
              swift_retain();
              uint64_t v66 = a2;
              unint64_t v67 = v174;
              unint64_t v36 = v168;
              sub_1DB0A0D98(v160, v155, a5 & 0x3FFFFFFFFFFFFFFFLL, v19, v174, v168, v21, (uint64_t)&v183, v169, a8, v172, a3, (uint64_t)&v184, (uint64_t)&v184, v176, v180, (uint64_t)v182, (uint64_t)v182, a4,
                a5,
                a10);
              if (v170) {
                goto LABEL_96;
              }
              swift_release();
              swift_release();
              sub_1DB042664(a4, a5);
              unint64_t v68 = v174;
              uint64_t v33 = v176;
              unint64_t v26 = a3;
              break;
            case 3uLL:
              memset(v181, 0, 14);
              unint64_t v137 = a5;
              unint64_t v141 = a10;
              uint64_t v133 = a4;
              unint64_t v127 = v180;
              uint64_t v37 = a5;
              uint64_t v33 = v176;
              uint64_t v123 = v176;
              uint64_t v59 = (char *)v181;
              unint64_t v117 = a3;
              uint64_t v112 = a2;
              uint64_t v108 = a8;
              goto LABEL_40;
            default:
              v181[0] = a4;
              LODWORD(v181[1]) = a5;
              WORD2(v181[1]) = WORD2(a5);
              uint64_t v59 = (char *)v181 + BYTE6(a5);
              unint64_t v137 = a5;
              unint64_t v141 = a10;
              uint64_t v133 = a4;
              unint64_t v127 = v180;
              uint64_t v37 = a5;
              uint64_t v33 = v176;
              uint64_t v123 = v176;
              unint64_t v117 = a3;
              uint64_t v112 = a2;
              uint64_t v108 = a8;
LABEL_40:
              unint64_t v36 = v168;
              sub_1DB09DFF4((uint64_t)v181, (uint64_t)v59, v19, v174, v168, v20, (uint64_t)&v183, v169, v108, v112, v117, (uint64_t)&v184, (uint64_t)&v184, v123, v127, (uint64_t)v182, (uint64_t)v182, v133, v137,
                v141);
              if (v170) {
                goto LABEL_92;
              }
              sub_1DB042664(a4, v37);
              unint64_t v26 = a3;
              unint64_t v41 = v172;
              unint64_t v68 = v174;
              break;
          }
          unint64_t v23 = v68;
          sub_1DB042664(v19, v68);
          unint64_t v34 = v36;
          sub_1DB042664(v36, v20);
          sub_1DB042664(v41, v26);
          uint64_t v39 = v33;
          goto LABEL_60;
        default:
          v182[0] = v176;
          LODWORD(v182[1]) = v180;
          WORD2(v182[1]) = WORD2(v180);
          unint64_t v152 = (char *)v182 + BYTE6(v180);
          sub_1DB04239C(v19, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(a2, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v19, v174);
          unint64_t v157 = v21;
          sub_1DB04239C(v20, v21);
          unint64_t v42 = a3;
          sub_1DB04239C(a2, a3);
          uint64_t v43 = v176;
          sub_1DB04239C(v176, v180);
          switch(a5 >> 62)
          {
            case 1uLL:
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a4, a5);
              if (a4 >> 32 < (int)a4) {
                goto LABEL_85;
              }
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(v19, v174);
              uint64_t v69 = v20;
              sub_1DB04239C(v20, v21);
              unint64_t v26 = a3;
              unint64_t v41 = a2;
              unint64_t v20 = v21;
              unint64_t v21 = v168;
              sub_1DB0A0D98((int)a4, a4 >> 32, v175 & 0x3FFFFFFFFFFFFFFFLL, v178, v174, v168, v157, (uint64_t)&v183, v169, a8, a2, a3, (uint64_t)&v184, (uint64_t)&v184, v176, v180, (uint64_t)v182, (uint64_t)v152, a4,
                v175,
                a10);
              if (v170) {
                goto LABEL_105;
              }
              unint64_t v30 = a4;
              sub_1DB042664(a4, v175);
              uint64_t v39 = v176;
              break;
            case 2uLL:
              unint64_t v29 = a4;
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a4, a5);
              uint64_t v144 = *(void *)(a4 + 24);
              uint64_t v148 = *(void *)(a4 + 16);
              unint64_t v26 = a3;
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(a4, v175);
              sub_1DB04239C(v19, v174);
              sub_1DB04239C(v20, v21);
              swift_retain();
              swift_retain();
              unint64_t v41 = v176;
              uint64_t v69 = v20;
              sub_1DB0A0D98(v148, v144, v175 & 0x3FFFFFFFFFFFFFFFLL, v178, v174, v20, v21, (uint64_t)&v183, v169, a8, a2, a3, (uint64_t)&v184, (uint64_t)&v184, v176, v180, (uint64_t)v182, (uint64_t)v152, a4,
                v175,
                a10);
              if (v170) {
                goto LABEL_102;
              }
              swift_release();
              swift_release();
              sub_1DB042664(a4, v175);
              unint64_t v30 = a4;
              uint64_t v39 = v176;
              unint64_t v41 = v172;
              unint64_t v20 = v21;
              break;
            case 3uLL:
              memset(v181, 0, 14);
              unint64_t v140 = a10;
              unint64_t v30 = a5;
              unint64_t v136 = a5;
              unint64_t v29 = a4;
              uint64_t v130 = (char *)v182 + BYTE6(v180);
              uint64_t v132 = a4;
              uint64_t v122 = v176;
              unint64_t v126 = v180;
              uint64_t v44 = (char *)v181;
              unint64_t v116 = a3;
              uint64_t v111 = a2;
              uint64_t v105 = a8;
              goto LABEL_43;
            default:
              unint64_t v29 = a4;
              v181[0] = a4;
              unint64_t v30 = a5;
              LODWORD(v181[1]) = a5;
              WORD2(v181[1]) = WORD2(a5);
              uint64_t v44 = (char *)v181 + BYTE6(a5);
              unint64_t v136 = a5;
              unint64_t v140 = a10;
              uint64_t v130 = (char *)v182 + BYTE6(v180);
              uint64_t v132 = a4;
              uint64_t v122 = v176;
              unint64_t v126 = v180;
              unint64_t v116 = a3;
              uint64_t v111 = a2;
              uint64_t v105 = a8;
LABEL_43:
              uint64_t v69 = v20;
              sub_1DB09DFF4((uint64_t)v181, (uint64_t)v44, v178, v174, v20, v21, (uint64_t)&v183, v169, v105, v111, v116, (uint64_t)&v184, (uint64_t)&v184, v122, v126, (uint64_t)v182, (uint64_t)v130, v132, v136,
                v140);
              uint64_t v74 = v29;
              if (v170) {
                goto LABEL_97;
              }
              sub_1DB042664(v29, v30);
              unint64_t v30 = v29;
              unint64_t v26 = a3;
              unint64_t v41 = a2;
              unint64_t v20 = v21;
              uint64_t v39 = v176;
              break;
          }
          unint64_t v23 = v174;
          sub_1DB042664(v178, v174);
          unint64_t v34 = v69;
          sub_1DB042664(v69, v20);
          sub_1DB042664(v41, v26);
          goto LABEL_60;
      }
      goto LABEL_70;
    default:
      v184.n128_u64[0] = a2;
      v184.n128_u32[2] = a3;
      v184.n128_u16[6] = WORD2(a3);
      unint64_t v24 = a5 >> 62;
      id v158 = (char *)&v184 + BYTE6(a3);
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      unint64_t v25 = v21;
      sub_1DB04239C(v20, v21);
      sub_1DB04239C(a4, a5);
      sub_1DB04239C(v19, v174);
      unint64_t v168 = v20;
      sub_1DB04239C(v20, v21);
      switch(v180 >> 62)
      {
        case 1uLL:
          unint64_t v63 = a3;
          uint64_t v19 = v172;
          unint64_t v157 = v21;
          unint64_t v30 = a4;
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v176, v180);
          if (v176 >> 32 < (int)v176) {
            goto LABEL_83;
          }
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v172, a3);
          unint64_t v21 = a5;
          unint64_t v23 = v174;
          uint64_t v64 = v20;
          sub_1DB0A0BEC((int)v176, v176 >> 32, v180 & 0x3FFFFFFFFFFFFFFFLL, a4, a5, v178, v174, v20, v157, (uint64_t)&v183, v169, a8, v172, a3, (uint64_t)&v184, (uint64_t)v158, v176, v180, a10);
          uint64_t v65 = v172;
          if (v170) {
            goto LABEL_95;
          }
          sub_1DB042664(v172, a3);
          unint64_t v26 = a3;
          unint64_t v20 = v157;
          uint64_t v39 = v176;
          unint64_t v34 = v168;
          unint64_t v41 = v172;
          unint64_t v58 = v175;
          goto LABEL_69;
        case 2uLL:
          uint64_t v47 = v176;
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v176, v180);
          uint64_t v154 = *(void *)(v176 + 16);
          unint64_t v55 = a5;
          unint64_t v56 = v25;
          uint64_t v147 = *(void *)(v176 + 24);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v25);
          unint64_t v49 = a3;
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v176, v180);
          unint64_t v30 = a4;
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v178, v174);
          sub_1DB04239C(v20, v56);
          sub_1DB04239C(v172, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(a4, a5);
          sub_1DB04239C(v172, a3);
          swift_retain();
          swift_retain();
          uint64_t v50 = v172;
          unint64_t v107 = v56;
          unint64_t v51 = v56;
          uint64_t v37 = v180 & 0x3FFFFFFFFFFFFFFFLL;
          unint64_t v52 = v55;
          unint64_t v57 = v55;
          uint64_t v54 = v20;
          sub_1DB0A0BEC(v154, v147, v180 & 0x3FFFFFFFFFFFFFFFLL, a4, v57, v178, v174, v20, v107, (uint64_t)&v183, v169, a8, v172, a3, (uint64_t)&v184, (uint64_t)v158, v176, v180, a10);
          if (!v170)
          {
            swift_release();
            swift_release();
            sub_1DB042664(v172, a3);
            unint64_t v20 = v51;
            uint64_t v39 = v176;
            unint64_t v41 = v172;
            unint64_t v26 = a3;
            unint64_t v58 = v52;
            unint64_t v23 = v174;
            unint64_t v34 = v168;
            goto LABEL_69;
          }
LABEL_90:
          sub_1DB042664(v47, v180);
          sub_1DB042664(v50, v49);
          sub_1DB042664(v47, v180);
          sub_1DB042664(v30, v52);
          unint64_t v20 = v178;
          sub_1DB042664(v178, v174);
          uint64_t v90 = v54;
          sub_1DB042664(v54, v51);
          sub_1DB042664(v50, a3);
          sub_1DB042664(v30, v52);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v54, v51);
          sub_1DB042664(v50, a3);
          uint64_t v33 = v176;
          unint64_t v36 = v180;
          sub_1DB042664(v176, v180);
          sub_1DB042664(v30, v52);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v90, v51);
          sub_1DB042664(v50, a3);
          sub_1DB042664(v176, v180);
LABEL_91:
          swift_release();
          swift_release();
          __break(1u);
LABEL_92:
          sub_1DB042664(v30, v37);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v36, v20);
          uint64_t v19 = a3;
          sub_1DB042664(v172, a3);
          uint64_t v91 = v33;
          sub_1DB042664(v33, v180);
          sub_1DB042664(v30, v37);
          uint64_t v39 = v174;
          sub_1DB042664(v178, v174);
          unint64_t v21 = v168;
          sub_1DB042664(v168, v20);
          sub_1DB042664(v172, a3);
          sub_1DB042664(v91, v180);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v168, v20);
          sub_1DB042664(v172, a3);
          sub_1DB042664(v176, v180);
          sub_1DB042664(v30, v37);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v168, v20);
          sub_1DB042664(v172, a3);
          sub_1DB042664(v176, v180);
          uint64_t v89 = v30;
LABEL_93:
          uint64_t v61 = sub_1DB042664(v89, v37);
          __break(1u);
LABEL_94:
          sub_1DB042664(v61, v62);
          uint64_t v92 = v30;
          unint64_t v30 = v175;
          unint64_t v23 = v39;
          sub_1DB042664(v176, v180);
          sub_1DB042664(v92, v175);
          sub_1DB042664(v178, v21);
          unint64_t v63 = v157;
          sub_1DB042664(v37, v157);
          sub_1DB042664(v19, v23);
          sub_1DB042664(v92, v175);
          sub_1DB042664(v178, v21);
          sub_1DB042664(v37, v157);
          sub_1DB042664(v19, v23);
          uint64_t v64 = v176;
          sub_1DB042664(v176, v180);
          sub_1DB042664(v92, v175);
          sub_1DB042664(v178, v21);
          sub_1DB042664(v168, v157);
          sub_1DB042664(v19, v23);
          sub_1DB042664(v176, v180);
          uint64_t v65 = sub_1DB042664(v176, v180);
          __break(1u);
LABEL_95:
          sub_1DB042664(v65, v63);
          unint64_t v67 = v30;
          unint64_t v30 = v21;
          unint64_t v36 = v180;
          sub_1DB042664(v176, v180);
          sub_1DB042664(v67, v21);
          unint64_t v93 = v23;
          sub_1DB042664(v178, v23);
          sub_1DB042664(v64, v157);
          sub_1DB042664(v19, a3);
          sub_1DB042664(v67, v30);
          sub_1DB042664(v178, v23);
          sub_1DB042664(v64, v157);
          sub_1DB042664(v19, a3);
          uint64_t v66 = v176;
          sub_1DB042664(v176, v180);
          sub_1DB042664(v67, v30);
          sub_1DB042664(v178, v93);
          sub_1DB042664(v64, v157);
          sub_1DB042664(v19, a3);
          sub_1DB042664(v176, v180);
          sub_1DB042664(v176, v180);
          __break(1u);
LABEL_96:
          sub_1DB042664(v30, v175);
          sub_1DB042664(v178, v67);
          sub_1DB042664(v36, v157);
          uint64_t v69 = a3;
          sub_1DB042664(v66, a3);
          sub_1DB042664(v176, v180);
          sub_1DB042664(v30, v175);
          unint64_t v29 = v178;
          unint64_t v94 = v67;
          sub_1DB042664(v178, v67);
          uint64_t v43 = v168;
          sub_1DB042664(v168, v157);
          sub_1DB042664(v172, a3);
          sub_1DB042664(v176, v180);
          sub_1DB042664(v178, v94);
          sub_1DB042664(v168, v157);
          sub_1DB042664(v172, a3);
          sub_1DB042664(v176, v180);
          unint64_t v42 = v175;
          sub_1DB042664(v30, v175);
          sub_1DB042664(v178, v94);
          sub_1DB042664(v168, v157);
          sub_1DB042664(v172, a3);
          sub_1DB042664(v176, v180);
          sub_1DB042664(v30, v175);
          swift_release();
          uint64_t v74 = swift_release();
          __break(1u);
LABEL_97:
          sub_1DB042664(v74, v30);
          unint64_t v26 = v174;
          sub_1DB042664(v178, v174);
          unint64_t v21 = v157;
          sub_1DB042664(v69, v157);
          uint64_t v69 = v172;
          unint64_t v95 = v42;
          sub_1DB042664(v172, v42);
          sub_1DB042664(v43, v180);
          sub_1DB042664(v29, v30);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v168, v157);
          sub_1DB042664(v172, v42);
          unint64_t v41 = v180;
          sub_1DB042664(v43, v180);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v168, v157);
          sub_1DB042664(v172, v95);
          uint64_t v96 = v176;
          sub_1DB042664(v176, v180);
          sub_1DB042664(v29, v30);
          sub_1DB042664(v178, v174);
          sub_1DB042664(v168, v157);
          uint64_t v97 = v172;
          goto LABEL_99;
        case 3uLL:
          memset(v182, 0, 14);
          sub_1DB04239C(v19, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(a2, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v19, v174);
          unint64_t v20 = v21;
          sub_1DB04239C(v168, v21);
          sub_1DB04239C(a2, a3);
          sub_1DB04239C(v176, v180);
          unint64_t v30 = a4;
          switch(a5 >> 62)
          {
            case 1uLL:
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a4, a5);
              if (a4 >> 32 < (int)a4) {
                goto LABEL_86;
              }
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(v19, v174);
              sub_1DB04239C(v168, v21);
              unint64_t v26 = a3;
              unint64_t v41 = a2;
              unint64_t v29 = v174;
              unint64_t v75 = v21;
              sub_1DB0A0D98((int)a4, a4 >> 32, v175 & 0x3FFFFFFFFFFFFFFFLL, v19, v174, v168, v21, (uint64_t)&v183, v169, a8, a2, a3, (uint64_t)&v184, (uint64_t)v158, v176, v180, (uint64_t)v182, (uint64_t)v182, a4,
                v175,
                a10);
              if (v170)
              {
LABEL_100:
                unint64_t v21 = v19;
                sub_1DB042664(v19, v29);
                sub_1DB042664(v168, v75);
                uint64_t v69 = v41;
                unint64_t v99 = v26;
                sub_1DB042664(v41, v26);
                unint64_t v41 = v176;
                sub_1DB042664(v176, v180);
                unint64_t v26 = a4;
                sub_1DB042664(a4, v175);
                sub_1DB042664(v178, v29);
                unint64_t v157 = v75;
                sub_1DB042664(v168, v75);
                sub_1DB042664(v69, v99);
                sub_1DB042664(v176, v180);
                sub_1DB042664(v178, v29);
                sub_1DB042664(v168, v75);
                sub_1DB042664(v69, v99);
                sub_1DB042664(v176, v180);
                unint64_t v30 = v175;
                sub_1DB042664(a4, v175);
                sub_1DB042664(v178, v29);
                sub_1DB042664(v168, v157);
                sub_1DB042664(v69, v99);
                sub_1DB042664(v176, v180);
                sub_1DB042664(a4, v175);
                uint64_t v98 = a4;
LABEL_101:
                sub_1DB042664(v98, v30);
                __break(1u);
LABEL_102:
                sub_1DB042664(v29, v175);
                sub_1DB042664(v178, v174);
                unint64_t v20 = v69;
                sub_1DB042664(v69, v21);
                unint64_t v100 = v26;
                sub_1DB042664(v172, v26);
                unint64_t v26 = v180;
                sub_1DB042664(v41, v180);
                sub_1DB042664(v29, v175);
                sub_1DB042664(v178, v174);
                sub_1DB042664(v20, v21);
                sub_1DB042664(v172, v100);
                sub_1DB042664(v41, v180);
                sub_1DB042664(v178, v174);
                sub_1DB042664(v20, v21);
                sub_1DB042664(v172, v100);
                sub_1DB042664(v41, v180);
                sub_1DB042664(v29, v175);
                sub_1DB042664(v178, v174);
                sub_1DB042664(v20, v21);
                sub_1DB042664(v172, v100);
                sub_1DB042664(v41, v180);
                sub_1DB042664(v29, v175);
LABEL_104:
                swift_release();
                swift_release();
                __break(1u);
LABEL_105:
                uint64_t v101 = v178;
                unint64_t v102 = v174;
                sub_1DB042664(v178, v174);
                uint64_t v103 = v21;
LABEL_107:
                sub_1DB042664(v103, v20);
                sub_1DB042664(v41, v26);
                sub_1DB042664(v176, v180);
                sub_1DB042664(a4, v175);
                sub_1DB042664(v101, v102);
                sub_1DB042664(v21, v20);
                sub_1DB042664(v41, v26);
                sub_1DB042664(v176, v180);
                sub_1DB042664(v101, v102);
                sub_1DB042664(v21, v20);
                sub_1DB042664(v41, v26);
                sub_1DB042664(v176, v180);
                sub_1DB042664(a4, v175);
                sub_1DB042664(v101, v102);
                sub_1DB042664(v21, v157);
                sub_1DB042664(v41, v26);
                sub_1DB042664(v176, v180);
                sub_1DB042664(a4, v175);
                sub_1DB042664(a4, v175);
                __break(1u);
                JUMPOUT(0x1DB09C3E0);
              }
              sub_1DB042664(a4, v175);
              uint64_t v33 = v176;
              unint64_t v36 = v168;
              unint64_t v70 = v174;
              unint64_t v30 = a4;
LABEL_64:
              unint64_t v23 = v70;
              sub_1DB042664(v19, v70);
              unint64_t v34 = v36;
              sub_1DB042664(v36, v20);
              sub_1DB042664(v41, v26);
              uint64_t v39 = v33;
              unint64_t v58 = v175;
LABEL_69:
              sub_1DB042664(v39, v180);
              sub_1DB042664(v30, v58);
              sub_1DB042664(v178, v23);
              sub_1DB042664(v34, v20);
              sub_1DB042664(v41, v26);
              sub_1DB042664(v39, v180);
              sub_1DB042664(v39, v180);
              unint64_t v40 = v175;
              sub_1DB042664(v30, v175);
              uint64_t v76 = v178;
LABEL_70:
              sub_1DB042664(v76, v23);
              sub_1DB042664(v34, v20);
LABEL_71:
              sub_1DB042664(v41, v26);
              sub_1DB042664(v39, v180);
              sub_1DB042664(v30, v40);
              uint64_t v77 = v30;
              sub_1DB042664(v178, v23);
              sub_1DB042664(v34, v20);
              sub_1DB042664(v41, v26);
              unint64_t v78 = v20;
              uint64_t v79 = v34;
              int v80 = v183;
              if (v183)
              {
                sub_1DB042664(v178, v23);
                sub_1DB042664(v79, v78);
                sub_1DB04D0D4();
                swift_allocError();
                *(_DWORD *)uint64_t v81 = v80;
                *(unsigned char *)(v81 + 4) = 0;
                swift_willThrow();
                sub_1DB042664(v39, v180);
                sub_1DB042664(v77, v40);
                uint64_t v82 = v41;
                unint64_t v83 = v26;
                goto LABEL_76;
              }
              unint64_t v13 = v23;
              uint64_t v11 = v178;
              v184.n128_u64[0] = sub_1DB065640(*(void *)(a8 + 32));
              v184.n128_u64[1] = v84;
              int64_t v10 = v171;
              uint64_t v15 = v77;
              unint64_t v14 = v78;
              uint64_t v12 = v79;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                goto LABEL_80;
              }
LABEL_74:
              sub_1DB0A01B0((uint64_t *)&v184, &v183);
              uint64_t v85 = v10;
              int v86 = v183;
              if (!v183)
              {
                sub_1DB042664(v176, v180);
                sub_1DB042664(v15, v175);
                sub_1DB042664(v172, a3);
                __n128 result = v184;
                *(void *)uint64_t v167 = v85;
                *(_OWORD *)(v167 + 8) = v165;
                *(void *)(v167 + 24) = v166;
                *(void *)(v167 + 32) = v164;
                *(void *)(v167 + 40) = v163;
                *(void *)(v167 + 48) = v162;
                *(void *)(v167 + 56) = v161;
                *(__n128 *)(v167 + 64) = result;
                *(void *)(v167 + 80) = v11;
                *(void *)(v167 + 88) = v13;
                *(void *)(v167 + 96) = v12;
                *(void *)(v167 + 104) = v14;
                return result;
              }
              sub_1DB042664(v11, v13);
              sub_1DB042664(v12, v14);
              sub_1DB04D0D4();
              swift_allocError();
              *(_DWORD *)uint64_t v87 = v86;
              *(unsigned char *)(v87 + 4) = 0;
              swift_willThrow();
              sub_1DB042664(v176, v180);
              sub_1DB042664(v15, v175);
              sub_1DB042664(v172, a3);
              unint64_t v83 = v184.n128_u64[1];
              uint64_t v82 = v184.n128_u64[0];
LABEL_76:
              sub_1DB042664(v82, v83);
              swift_bridgeObjectRelease();
              return result;
            case 2uLL:
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(a4, a5);
              uint64_t v156 = *(void *)(a4 + 16);
              unint64_t v41 = a2;
              unint64_t v157 = v21;
              uint64_t v149 = *(void *)(a4 + 24);
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(a4, a5);
              sub_1DB04239C(v19, v174);
              sub_1DB04239C(v168, v21);
              swift_retain();
              swift_retain();
              uint64_t v66 = a2;
              unint64_t v67 = v174;
              unint64_t v36 = v168;
              sub_1DB0A0D98(v156, v149, a5 & 0x3FFFFFFFFFFFFFFFLL, v19, v174, v168, v21, (uint64_t)&v183, v169, a8, v172, a3, (uint64_t)&v184, (uint64_t)v158, v176, v180, (uint64_t)v182, (uint64_t)v182, a4,
                a5,
                a10);
              if (v170) {
                goto LABEL_96;
              }
              swift_release();
              swift_release();
              sub_1DB042664(a4, a5);
              unint64_t v70 = v174;
              uint64_t v33 = v176;
              unint64_t v26 = a3;
              goto LABEL_64;
            case 3uLL:
              memset(v181, 0, 14);
              unint64_t v138 = a5;
              uint64_t v142 = a10;
              uint64_t v134 = a4;
              unint64_t v128 = v180;
              uint64_t v37 = a5;
              uint64_t v33 = v176;
              uint64_t v124 = v176;
              uint64_t v60 = (char *)v181;
              unint64_t v120 = (char *)&v184 + BYTE6(a3);
              unint64_t v118 = a3;
              uint64_t v113 = a2;
              uint64_t v109 = a8;
              goto LABEL_50;
            default:
              v181[0] = a4;
              LODWORD(v181[1]) = a5;
              WORD2(v181[1]) = WORD2(a5);
              uint64_t v60 = (char *)v181 + BYTE6(a5);
              unint64_t v138 = a5;
              uint64_t v142 = a10;
              uint64_t v134 = a4;
              unint64_t v128 = v180;
              uint64_t v37 = a5;
              uint64_t v33 = v176;
              uint64_t v124 = v176;
              unint64_t v120 = (char *)&v184 + BYTE6(a3);
              unint64_t v118 = a3;
              uint64_t v113 = a2;
              uint64_t v109 = a8;
LABEL_50:
              unint64_t v36 = v168;
              sub_1DB09DFF4((uint64_t)v181, (uint64_t)v60, v19, v174, v168, v20, (uint64_t)&v183, v169, v109, v113, v118, (uint64_t)&v184, (uint64_t)v120, v124, v128, (uint64_t)v182, (uint64_t)v182, v134, v138,
                v142);
              if (v170) {
                goto LABEL_92;
              }
              sub_1DB042664(a4, v37);
              unint64_t v26 = a3;
              unint64_t v41 = v172;
              unint64_t v70 = v174;
              goto LABEL_64;
          }
        default:
          v182[0] = v176;
          LODWORD(v182[1]) = v180;
          WORD2(v182[1]) = WORD2(v180);
          unint64_t v150 = (char *)v182 + BYTE6(v180);
          sub_1DB04239C(v19, v174);
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(a2, a3);
          sub_1DB04239C(v176, v180);
          sub_1DB04239C(v19, v174);
          unint64_t v26 = a3;
          unint64_t v27 = v21;
          sub_1DB04239C(v20, v21);
          sub_1DB04239C(a2, a3);
          uint64_t v28 = v176;
          sub_1DB04239C(v176, v180);
          switch((int)v24)
          {
            case 1:
              unint64_t v157 = v25;
              sub_1DB04239C(a4, v175);
              sub_1DB04239C(a4, v175);
              if (a4 >> 32 < (int)a4) {
                goto LABEL_87;
              }
              sub_1DB04239C(a4, v175);
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(v19, v174);
              uint64_t v72 = v20;
              sub_1DB04239C(v20, v25);
              unint64_t v41 = a2;
              unint64_t v20 = v25;
              sub_1DB0A0D98((int)a4, a4 >> 32, v175 & 0x3FFFFFFFFFFFFFFFLL, v178, v174, v168, v25, (uint64_t)&v183, v169, a8, a2, a3, (uint64_t)&v184, (uint64_t)v158, v176, v180, (uint64_t)v182, (uint64_t)v150, a4,
                v175,
                a10);
              if (v170)
              {
                uint64_t v101 = v178;
                unint64_t v102 = v174;
                sub_1DB042664(v178, v174);
                unint64_t v21 = v168;
                uint64_t v103 = v168;
                goto LABEL_107;
              }
              unint64_t v30 = a4;
              unint64_t v73 = v175;
              sub_1DB042664(a4, v175);
              uint64_t v28 = v176;
              goto LABEL_68;
            case 2:
              sub_1DB04239C(a4, v175);
              sub_1DB04239C(a4, v175);
              unint64_t v157 = v25;
              uint64_t v143 = *(void *)(a4 + 24);
              uint64_t v145 = *(void *)(a4 + 16);
              sub_1DB04239C(a2, a3);
              sub_1DB04239C(v176, v180);
              sub_1DB04239C(a4, v175);
              sub_1DB04239C(v19, v174);
              sub_1DB04239C(v20, v25);
              swift_retain();
              uint64_t v71 = swift_retain();
              unint64_t v41 = v176;
              uint64_t v72 = v20;
              sub_1DB0A0D98(v145, v143, v71, v178, v174, v20, v25, (uint64_t)&v183, v169, a8, a2, a3, (uint64_t)&v184, (uint64_t)v158, v176, v180, (uint64_t)v182, (uint64_t)v150, a4,
                v175,
                a10);
              if (v170)
              {
                sub_1DB042664(a4, v175);
                sub_1DB042664(v178, v174);
                unint64_t v21 = v25;
                sub_1DB042664(v20, v25);
                sub_1DB042664(a2, a3);
                unint64_t v26 = v180;
                sub_1DB042664(v176, v180);
                sub_1DB042664(a4, v175);
                sub_1DB042664(v178, v174);
                sub_1DB042664(v20, v25);
                sub_1DB042664(a2, a3);
                sub_1DB042664(v176, v180);
                sub_1DB042664(v178, v174);
                sub_1DB042664(v20, v25);
                sub_1DB042664(a2, a3);
                sub_1DB042664(v176, v180);
                sub_1DB042664(a4, v175);
                sub_1DB042664(v178, v174);
                sub_1DB042664(v20, v25);
                sub_1DB042664(a2, a3);
                sub_1DB042664(v176, v180);
                sub_1DB042664(a4, v175);
                goto LABEL_104;
              }
              swift_release();
              swift_release();
              unint64_t v73 = v175;
              sub_1DB042664(a4, v175);
              unint64_t v30 = a4;
              goto LABEL_55;
            case 3:
              memset(v181, 0, 14);
              uint64_t v139 = a10;
              unint64_t v30 = v175;
              unint64_t v135 = v175;
              unint64_t v29 = a4;
              uint64_t v129 = (char *)v182 + BYTE6(v180);
              uint64_t v131 = a4;
              unint64_t v125 = v180;
              uint64_t v119 = (char *)&v184 + BYTE6(a3);
              uint64_t v121 = v176;
              uint64_t v31 = (char *)v181;
              unint64_t v114 = a3;
              uint64_t v110 = a2;
              uint64_t v104 = a8;
              goto LABEL_53;
            default:
              unint64_t v29 = a4;
              v181[0] = a4;
              unint64_t v30 = v175;
              LODWORD(v181[1]) = v175;
              WORD2(v181[1]) = WORD2(v175);
              uint64_t v31 = (char *)v181 + BYTE6(v175);
              unint64_t v135 = v175;
              uint64_t v139 = a10;
              uint64_t v129 = (char *)v182 + BYTE6(v180);
              uint64_t v131 = a4;
              unint64_t v125 = v180;
              uint64_t v119 = (char *)&v184 + BYTE6(a3);
              uint64_t v121 = v176;
              unint64_t v114 = a3;
              uint64_t v110 = a2;
              uint64_t v104 = a8;
LABEL_53:
              uint64_t v72 = v20;
              sub_1DB09DFF4((uint64_t)v181, (uint64_t)v31, v178, v174, v20, v27, (uint64_t)&v183, v169, v104, v110, v114, (uint64_t)&v184, (uint64_t)v119, v121, v125, (uint64_t)v182, (uint64_t)v129, v131, v135,
                v139);
              if (!v170)
              {
                sub_1DB042664(v29, v30);
                unint64_t v73 = v30;
                unint64_t v30 = v29;
LABEL_55:
                unint64_t v41 = v172;
                unint64_t v20 = v27;
LABEL_68:
                unint64_t v23 = v174;
                sub_1DB042664(v178, v174);
                unint64_t v34 = v72;
                sub_1DB042664(v72, v20);
                sub_1DB042664(v41, a3);
                unint64_t v58 = v73;
                uint64_t v39 = v28;
                goto LABEL_69;
              }
              sub_1DB042664(v29, v30);
              unint64_t v26 = v174;
              sub_1DB042664(v178, v174);
              sub_1DB042664(v20, v27);
              sub_1DB042664(a2, a3);
              sub_1DB042664(v176, v180);
              sub_1DB042664(v29, v30);
              uint64_t v69 = v178;
              sub_1DB042664(v178, v174);
              unint64_t v21 = v27;
              sub_1DB042664(v20, v27);
              sub_1DB042664(a2, a3);
              unint64_t v41 = v180;
              sub_1DB042664(v176, v180);
              sub_1DB042664(v178, v174);
              sub_1DB042664(v20, v27);
              sub_1DB042664(a2, a3);
              uint64_t v96 = v176;
              sub_1DB042664(v176, v180);
              sub_1DB042664(v29, v30);
              sub_1DB042664(v178, v174);
              sub_1DB042664(v168, v27);
              uint64_t v97 = a2;
LABEL_99:
              sub_1DB042664(v97, a3);
              sub_1DB042664(v96, v41);
              uint64_t v98 = v29;
              break;
          }
          goto LABEL_101;
      }
  }
}

uint64_t sub_1DB09C450(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, void (*a16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  v92[2] = *MEMORY[0x1E4F143B8];
  unint64_t v19 = a3;
  uint64_t v84 = (uint64_t)a16;
  switch(a4 >> 62)
  {
    case 1uLL:
      unint64_t v78 = a6;
      unint64_t v89 = a10;
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
      }
      uint64_t v76 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v67 = (int)a3;
      uint64_t v72 = a3 >> 32;
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a9, a10);
      unint64_t v27 = a15;
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(a5, v78);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a9, a10);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(v19, a4);
      sub_1DB04239C(a5, v78);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(v19, a4);
      uint64_t v84 = v19;
      uint64_t v29 = a7;
      uint64_t v44 = a7;
      unint64_t v28 = a8;
      uint64_t v26 = a9;
      sub_1DB0A0BEC(v67, v72, a4 & 0x3FFFFFFFFFFFFFFFLL, a5, v78, v44, a8, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, a16);
      if (!v87)
      {
        sub_1DB042664(a14, a15);
        uint64_t v37 = a5;
        unint64_t v38 = a10;
        unint64_t v25 = v78;
        uint64_t v39 = a14;
        unint64_t v40 = a4;
        uint64_t v31 = v84;
        goto LABEL_31;
      }
      sub_1DB042664(a14, a15);
      sub_1DB042664(a5, v78);
      sub_1DB042664(v29, a8);
      sub_1DB042664(a9, a10);
      sub_1DB042664(a14, a15);
      uint64_t v24 = v19;
      sub_1DB042664(v19, a4);
      sub_1DB042664(v19, a4);
      __break(1u);
LABEL_37:
      sub_1DB042664(v26, v78);
      sub_1DB042664(v19, v27);
      sub_1DB042664(v29, v28);
      unint64_t v32 = v76;
      sub_1DB042664(v76, v24);
      uint64_t v24 = v75;
      sub_1DB042664(v75, a15);
      sub_1DB042664(v19, v27);
      sub_1DB042664(v26, v78);
      sub_1DB042664(v29, v28);
      sub_1DB042664(v76, v89);
      sub_1DB042664(v75, a15);
      sub_1DB042664(v19, v27);
      sub_1DB042664(v26, v78);
      __break(1u);
LABEL_38:
      unint64_t v23 = a5;
      sub_1DB042664(a5, v78);
      sub_1DB042664(v19, v24);
      unint64_t v25 = v81;
      unint64_t v52 = v32;
      sub_1DB042664(v81, v32);
      sub_1DB042664(v26, v89);
      unint64_t v32 = v75;
      uint64_t v29 = a15;
      sub_1DB042664(v75, a15);
      sub_1DB042664(v19, v24);
      sub_1DB042664(a5, v78);
      sub_1DB042664(v81, v52);
      sub_1DB042664(v26, v89);
      sub_1DB042664(v75, a15);
      sub_1DB042664(v19, v24);
      uint64_t v58 = a5;
      goto LABEL_43;
    case 2uLL:
      uint64_t v77 = *(void *)(a3 + 16);
      unint64_t v32 = a3;
      unint64_t v25 = a15;
      uint64_t v71 = *(void *)(a3 + 24);
      uint64_t v81 = a7;
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a9, a10);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(v32, a4);
      uint64_t v35 = a5;
      uint64_t v26 = a6;
      sub_1DB04239C(v35, a6);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a9, a10);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(v32, a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(v32, a4);
      swift_retain();
      unint64_t v89 = a10;
      uint64_t v24 = swift_retain();
      uint64_t v36 = v77;
      uint64_t v37 = a5;
      uint64_t v29 = v81;
      unint64_t v28 = a8;
      uint64_t v76 = a9;
      sub_1DB0A0BEC(v36, v71, v24, a5, a6, v81, a8, a9, a10, a11, a12, a13, a14, a15, a1, a2, v32, a4, a16);
      if (!v87)
      {
        swift_release();
        swift_release();
        sub_1DB042664(a14, a15);
        unint64_t v38 = a10;
        unint64_t v25 = a6;
        uint64_t v39 = a14;
        unint64_t v40 = a4;
        uint64_t v26 = a9;
        uint64_t v31 = v32;
        goto LABEL_31;
      }
      sub_1DB042664(a14, a15);
      unint64_t v19 = a4;
      sub_1DB042664(v32, a4);
      sub_1DB042664(a5, a6);
      sub_1DB042664(v81, a8);
      sub_1DB042664(a9, a10);
      sub_1DB042664(a14, a15);
      sub_1DB042664(v32, a4);
      goto LABEL_41;
    case 3uLL:
      memset(v92, 0, 14);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a9, a10);
      sub_1DB04239C(a14, a15);
      uint64_t v81 = a7;
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a9, a10);
      sub_1DB04239C(a14, a15);
      unint64_t v89 = a10;
      uint64_t v75 = a14;
      switch(a6 >> 62)
      {
        case 1uLL:
          uint64_t v76 = a9;
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a5, a6);
          uint64_t v69 = (int)a5;
          uint64_t v74 = a5 >> 32;
          if (a5 >> 32 < (int)a5) {
            goto LABEL_33;
          }
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a14, a15);
          sub_1DB04239C(v19, a4);
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a7, a8);
          sub_1DB04239C(a9, a10);
          sub_1DB04239C(v19, a4);
          uint64_t v64 = a5;
          uint64_t v84 = v19;
          unint64_t v32 = a8;
          uint64_t v26 = a9;
          sub_1DB0A0D98(v69, v74, a6 & 0x3FFFFFFFFFFFFFFFLL, a7, a8, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, (uint64_t)v92, (uint64_t)v92, v64,
            a6,
            a16);
          uint64_t v24 = a6;
          if (v87) {
            goto LABEL_45;
          }
          uint64_t v31 = v19;
          uint64_t v50 = v19;
          unint64_t v51 = a4;
LABEL_24:
          sub_1DB042664(v50, v51);
          goto LABEL_25;
        case 2uLL:
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a5, a6);
          unint64_t v32 = a8;
          uint64_t v73 = *(void *)(a5 + 16);
          uint64_t v76 = *(void *)(a5 + 24);
          sub_1DB04239C(a14, a15);
          unint64_t v25 = a4;
          sub_1DB04239C(v19, a4);
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a7, a8);
          sub_1DB04239C(a9, a10);
          sub_1DB04239C(v19, a4);
          swift_retain();
          uint64_t v45 = swift_retain();
          uint64_t v24 = a6;
          uint64_t v63 = a5;
          unint64_t v46 = a5;
          uint64_t v26 = a9;
          sub_1DB0A0D98(v73, v76, v45, a7, v32, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, (uint64_t)v92, (uint64_t)v92, v63,
            a6,
            a16);
          if (v87)
          {
            unint64_t v80 = a6;
            sub_1DB042664(v46, a6);
            sub_1DB042664(v19, a4);
            uint64_t v29 = a7;
            sub_1DB042664(a7, v32);
            unint64_t v28 = a10;
            sub_1DB042664(a9, a10);
            uint64_t v24 = a15;
            sub_1DB042664(a14, a15);
            sub_1DB042664(v19, a4);
            sub_1DB042664(v46, v80);
            sub_1DB042664(a7, v32);
            sub_1DB042664(a9, a10);
            sub_1DB042664(a14, a15);
            sub_1DB042664(v19, a4);
            sub_1DB042664(v46, v80);
            swift_release();
            swift_release();
            __break(1u);
LABEL_40:
            sub_1DB042664(v26, v25);
            sub_1DB042664(v19, v46);
            sub_1DB042664(v29, v28);
            unint64_t v32 = v26;
            uint64_t v26 = v76;
            sub_1DB042664(v76, v24);
            uint64_t v24 = v75;
            sub_1DB042664(v75, a15);
            sub_1DB042664(v19, v46);
            sub_1DB042664(v32, v25);
            sub_1DB042664(v29, v28);
            sub_1DB042664(v76, v89);
            sub_1DB042664(v75, a15);
            sub_1DB042664(v19, v46);
            sub_1DB042664(v32, v25);
LABEL_41:
            swift_release();
            swift_release();
            __break(1u);
LABEL_42:
            unint64_t v78 = v24;
            sub_1DB042664(a5, v24);
            sub_1DB042664(v19, v25);
            unint64_t v52 = v81;
            unint64_t v59 = v32;
            sub_1DB042664(v81, v32);
            uint64_t v29 = v89;
            sub_1DB042664(v26, v89);
            unint64_t v23 = v75;
            uint64_t v24 = a15;
            sub_1DB042664(v75, a15);
            sub_1DB042664(v19, v25);
            unint64_t v32 = a5;
            sub_1DB042664(a5, v78);
            sub_1DB042664(v81, v59);
            sub_1DB042664(v26, v89);
            sub_1DB042664(v75, a15);
            sub_1DB042664(v19, v25);
            uint64_t v58 = a5;
LABEL_43:
            sub_1DB042664(v58, v78);
            __break(1u);
LABEL_44:
            sub_1DB042664(v26, v25);
            sub_1DB042664(v32, v52);
            sub_1DB042664(v29, v19);
            sub_1DB042664(v76, v23);
            sub_1DB042664(v75, v24);
            sub_1DB042664(v32, v52);
            sub_1DB042664(v26, v25);
            sub_1DB042664(v29, v19);
            sub_1DB042664(v76, v23);
            sub_1DB042664(v75, v24);
            sub_1DB042664(v32, v52);
            sub_1DB042664(v26, v25);
            __break(1u);
LABEL_45:
            uint64_t v29 = v84;
            sub_1DB042664(v84, a4);
            sub_1DB042664(v81, v32);
            unint64_t v28 = v89;
            sub_1DB042664(v26, v89);
            uint64_t v54 = v75;
            unint64_t v53 = a15;
            sub_1DB042664(v75, a15);
            sub_1DB042664(v84, a4);
            sub_1DB042664(a5, v24);
            sub_1DB042664(v81, v32);
            sub_1DB042664(v26, v89);
            sub_1DB042664(v75, a15);
            sub_1DB042664(v84, a4);
            sub_1DB042664(a5, v24);
            uint64_t v55 = sub_1DB042664(a5, v24);
            __break(1u);
LABEL_46:
            sub_1DB042664(v55, v53);
            sub_1DB042664(v29, v28);
            sub_1DB042664(v76, v24);
            sub_1DB042664(v75, a15);
            sub_1DB042664(v54, v53);
            sub_1DB042664(v26, v78);
            sub_1DB042664(v29, v28);
            sub_1DB042664(v76, v24);
            sub_1DB042664(v75, a15);
            sub_1DB042664(v54, v53);
            sub_1DB042664(v26, v78);
            sub_1DB042664(v26, v78);
            __break(1u);
            JUMPOUT(0x1DB09D97CLL);
          }
          swift_release();
          swift_release();
          sub_1DB042664(v19, a4);
          uint64_t v31 = v19;
LABEL_25:
          uint64_t v37 = a5;
          unint64_t v25 = v24;
          sub_1DB042664(a5, v24);
          sub_1DB042664(a5, v24);
          uint64_t v29 = v81;
          unint64_t v28 = v32;
          sub_1DB042664(v81, v32);
          unint64_t v38 = a10;
          sub_1DB042664(v26, a10);
          uint64_t v39 = a14;
          sub_1DB042664(a14, a15);
          unint64_t v40 = a4;
LABEL_31:
          unint64_t v56 = v40;
          sub_1DB042664(v31, v40);
          sub_1DB042664(v37, v25);
          sub_1DB042664(v29, v28);
          sub_1DB042664(v26, v38);
          sub_1DB042664(v39, a15);
          return sub_1DB042664(v31, v56);
        case 3uLL:
          memset(v91, 0, 14);
          sub_1DB04239C(a5, a6);
          unint64_t v25 = a4;
          sub_1DB04239C(v19, a4);
          unint64_t v49 = a8;
          uint64_t v24 = a6;
          uint64_t v62 = a5;
          unint64_t v32 = v49;
          uint64_t v26 = a9;
          sub_1DB09DFF4((uint64_t)v91, (uint64_t)v91, a7, v49, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, (uint64_t)v92, (uint64_t)v92, v62, a6,
            a16);
          if (v87) {
            goto LABEL_42;
          }
          uint64_t v31 = v19;
          uint64_t v50 = v19;
          unint64_t v51 = a4;
          goto LABEL_24;
        default:
          v91[0] = a5;
          LOWORD(v91[1]) = a6;
          BYTE2(v91[1]) = BYTE2(a6);
          BYTE3(v91[1]) = BYTE3(a6);
          BYTE4(v91[1]) = BYTE4(a6);
          BYTE5(v91[1]) = BYTE5(a6);
          unint64_t v42 = a8;
          uint64_t v76 = a9;
          sub_1DB04239C(a5, a6);
          uint64_t v24 = a4;
          sub_1DB04239C(v19, a4);
          unint64_t v78 = a6;
          uint64_t v61 = a5;
          unint64_t v32 = v42;
          uint64_t v26 = a9;
          sub_1DB09DFF4((uint64_t)v91, (uint64_t)v91 + BYTE6(a6), a7, v42, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, (uint64_t)v92, (uint64_t)v92, v61, a6,
            a16);
          if (v87) {
            goto LABEL_38;
          }
          sub_1DB042664(v19, a4);
          uint64_t v31 = v19;
          uint64_t v24 = a6;
          goto LABEL_25;
      }
    default:
      v92[0] = a3;
      LODWORD(v92[1]) = a4;
      WORD2(v92[1]) = WORD2(a4);
      unint64_t v70 = (char *)v92 + BYTE6(a4);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a9, a10);
      sub_1DB04239C(a14, a15);
      uint64_t v81 = a7;
      unint64_t v82 = a8;
      sub_1DB04239C(a7, a8);
      uint64_t v76 = a9;
      unint64_t v23 = a10;
      sub_1DB04239C(a9, a10);
      uint64_t v24 = a15;
      sub_1DB04239C(a14, a15);
      unint64_t v25 = a6;
      uint64_t v26 = a5;
      uint64_t v75 = a14;
      switch(a6 >> 62)
      {
        case 1uLL:
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a5, a6);
          if (a5 >> 32 < (int)a5) {
            goto LABEL_34;
          }
          uint64_t v66 = a6 & 0x3FFFFFFFFFFFFFFFLL;
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a14, a15);
          sub_1DB04239C(v19, a4);
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(v81, v82);
          sub_1DB04239C(a9, a10);
          sub_1DB04239C(v19, a4);
          unint64_t v65 = a6;
          unint64_t v78 = a6;
          unint64_t v53 = a4;
          uint64_t v54 = v19;
          unint64_t v28 = v82;
          uint64_t v24 = a10;
          uint64_t v29 = v81;
          sub_1DB0A0D98((int)a5, a5 >> 32, v66, v81, v82, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, (uint64_t)v92, (uint64_t)v70, a5,
            v65,
            a16);
          uint64_t v55 = v19;
          if (v87) {
            goto LABEL_46;
          }
          unint64_t v30 = a4;
          sub_1DB042664(v19, a4);
          uint64_t v31 = v19;
LABEL_29:
          unint64_t v25 = v78;
LABEL_30:
          sub_1DB042664(a5, v25);
          sub_1DB042664(a5, v25);
          sub_1DB042664(v29, v28);
          uint64_t v37 = a5;
          uint64_t v26 = a9;
          sub_1DB042664(a9, v24);
          unint64_t v38 = v24;
          uint64_t v39 = a14;
          sub_1DB042664(a14, a15);
          unint64_t v40 = v30;
          break;
        case 2uLL:
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a5, a6);
          unint64_t v89 = a10;
          uint64_t v47 = *(void *)(a5 + 16);
          uint64_t v68 = *(void *)(a5 + 24);
          sub_1DB04239C(a14, a15);
          unint64_t v46 = a4;
          sub_1DB04239C(v19, a4);
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(a5, a6);
          sub_1DB04239C(v81, v82);
          sub_1DB04239C(a9, a10);
          sub_1DB04239C(v19, a4);
          swift_retain();
          swift_retain();
          uint64_t v48 = v47;
          unint64_t v28 = v82;
          uint64_t v24 = a10;
          uint64_t v29 = v81;
          sub_1DB0A0D98(v48, v68, a6 & 0x3FFFFFFFFFFFFFFFLL, v81, v82, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, (uint64_t)v92, (uint64_t)v70, a5,
            a6,
            a16);
          if (v87) {
            goto LABEL_40;
          }
          swift_release();
          swift_release();
          unint64_t v30 = a4;
          sub_1DB042664(v19, a4);
          uint64_t v31 = v19;
          goto LABEL_30;
        case 3uLL:
          memset(v91, 0, 14);
          sub_1DB04239C(a5, a6);
          unint64_t v52 = a4;
          sub_1DB04239C(v19, a4);
          uint64_t v60 = v19;
          uint64_t v29 = v81;
          unint64_t v32 = v19;
          unint64_t v19 = v82;
          sub_1DB09DFF4((uint64_t)v91, (uint64_t)v91, v81, v82, a9, a10, a11, a12, a13, a14, a15, a1, a2, v60, a4, (uint64_t)v92, (uint64_t)v70, a5, a6,
            a16);
          if (v87) {
            goto LABEL_44;
          }
          uint64_t v31 = v32;
          sub_1DB042664(v32, a4);
          unint64_t v30 = a4;
          uint64_t v24 = a10;
          unint64_t v28 = v82;
          goto LABEL_30;
        default:
          v91[0] = a5;
          LOWORD(v91[1]) = a6;
          BYTE2(v91[1]) = BYTE2(a6);
          BYTE3(v91[1]) = BYTE3(a6);
          BYTE4(v91[1]) = BYTE4(a6);
          BYTE5(v91[1]) = BYTE5(a6);
          unint64_t v89 = a10;
          sub_1DB04239C(a5, a6);
          unint64_t v27 = a4;
          sub_1DB04239C(v19, a4);
          unint64_t v78 = a6;
          unint64_t v28 = v82;
          uint64_t v24 = a10;
          uint64_t v29 = v81;
          sub_1DB09DFF4((uint64_t)v91, (uint64_t)v91 + BYTE6(a6), v81, v82, a9, a10, a11, a12, a13, a14, a15, a1, a2, v19, a4, (uint64_t)v92, (uint64_t)v70, a5, a6,
            a16);
          if (v87) {
            goto LABEL_37;
          }
          unint64_t v30 = a4;
          sub_1DB042664(v19, a4);
          uint64_t v31 = v19;
          goto LABEL_29;
      }
      goto LABEL_31;
  }
}

uint64_t sub_1DB09D9AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, void (*a18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  v48[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      uint64_t v40 = a3 >> 32;
      uint64_t v43 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v38 = (int)a3;
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a12, a13);
      sub_1DB04239C(a16, a17);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a12, a13);
      sub_1DB04239C(a16, a17);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a3, a4);
      sub_1DB0A0D98(v38, v40, v43, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a1, a2, a3, a4, a18);
      if (!v46) {
        goto LABEL_10;
      }
      goto LABEL_13;
    case 2uLL:
      uint64_t v39 = *(void *)(a3 + 16);
      uint64_t v42 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v37 = *(void *)(a3 + 24);
      sub_1DB04239C(a12, a13);
      sub_1DB04239C(a16, a17);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a12, a13);
      sub_1DB04239C(a16, a17);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a3, a4);
      swift_retain();
      swift_retain();
      sub_1DB0A0D98(v39, v37, v42, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a1, a2, a3, a4, a18);
      if (v46)
      {
        sub_1DB042664(a3, a4);
        sub_1DB042664(a5, a6);
        sub_1DB042664(a7, a8);
        sub_1DB042664(a12, a13);
        sub_1DB042664(v47, a17);
        sub_1DB042664(a3, a4);
        swift_release();
        swift_release();
        __break(1u);
LABEL_13:
        sub_1DB042664(a5, a6);
        sub_1DB042664(a7, a8);
        sub_1DB042664(a12, a13);
        sub_1DB042664(v47, a17);
        uint64_t v25 = a3;
        unint64_t v26 = a4;
LABEL_14:
        sub_1DB042664(v25, v26);
        sub_1DB042664(a3, a4);
        __break(1u);
        JUMPOUT(0x1DB09DFE4);
      }
      swift_release();
      swift_release();
LABEL_10:
      sub_1DB042664(a3, a4);
      sub_1DB042664(a5, a6);
      sub_1DB042664(a7, a8);
      sub_1DB042664(a12, a13);
      sub_1DB042664(v47, a17);
      return sub_1DB042664(a3, a4);
    case 3uLL:
      memset(v48, 0, 14);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a12, a13);
      sub_1DB04239C(a16, a17);
      unint64_t v35 = a4;
      uint64_t v36 = a18;
      uint64_t v33 = a2;
      uint64_t v34 = a3;
      unint64_t v31 = a17;
      uint64_t v32 = a1;
      uint64_t v24 = v48;
      uint64_t v30 = a16;
      uint64_t v28 = a14;
      uint64_t v29 = a15;
      goto LABEL_6;
    default:
      v48[0] = a3;
      LOWORD(v48[1]) = a4;
      BYTE2(v48[1]) = BYTE2(a4);
      BYTE3(v48[1]) = BYTE3(a4);
      BYTE4(v48[1]) = BYTE4(a4);
      BYTE5(v48[1]) = BYTE5(a4);
      unint64_t v41 = (char *)v48 + BYTE6(a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a7, a8);
      sub_1DB04239C(a12, a13);
      sub_1DB04239C(a16, a17);
      unint64_t v35 = a4;
      uint64_t v36 = a18;
      uint64_t v33 = a2;
      uint64_t v34 = a3;
      unint64_t v31 = a17;
      uint64_t v32 = a1;
      uint64_t v30 = a16;
      uint64_t v24 = v41;
      uint64_t v28 = a14;
      uint64_t v29 = a15;
LABEL_6:
      sub_1DB09DFF4((uint64_t)v48, (uint64_t)v24, a5, a6, a7, a8, a9, a10, a11, a12, a13, v28, v29, v30, v31, v32, v33, v34, v35,
        v36);
      if (!v46) {
        goto LABEL_10;
      }
      sub_1DB042664(a3, a4);
      sub_1DB042664(a5, a6);
      sub_1DB042664(a7, a8);
      sub_1DB042664(a12, a13);
      uint64_t v25 = v47;
      unint64_t v26 = a17;
      goto LABEL_14;
  }
}

uint64_t sub_1DB09DFF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, void (*a20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  v50[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      uint64_t v41 = a3 >> 32;
      uint64_t v44 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v39 = (int)a3;
      sub_1DB04239C(a10, a11);
      sub_1DB04239C(a14, a15);
      unint64_t v27 = a6;
      a6 = a5;
      a5 = v27;
      sub_1DB04239C(a18, a19);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a6, a5);
      sub_1DB04239C(a10, a11);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(a18, a19);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a6, a5);
      sub_1DB04239C(a3, a4);
      sub_1DB0A0898(v39, v41, v44, a3, a4, a6, a5, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
        a19,
        a1,
        a2,
        a20);
      if (v49) {
        goto LABEL_15;
      }
      sub_1DB042664(a3, a4);
      sub_1DB042664(a3, a4);
      uint64_t v25 = a6;
      unint64_t v26 = a5;
      goto LABEL_11;
    case 2uLL:
      uint64_t v40 = *(void *)(a3 + 16);
      uint64_t v43 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v38 = *(void *)(a3 + 24);
      sub_1DB04239C(a10, a11);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(a18, a19);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a10, a11);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(a18, a19);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a5, a6);
      swift_retain();
      swift_retain();
      sub_1DB0A0898(v40, v38, v43, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
        a19,
        a1,
        a2,
        a20);
      if (v49) {
        goto LABEL_14;
      }
      swift_release();
      swift_release();
      goto LABEL_7;
    case 3uLL:
      memset(v50, 0, 14);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a10, a11);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(a18, a19);
      uint64_t v36 = a2;
      uint64_t v37 = a20;
      uint64_t v34 = a19;
      uint64_t v35 = a1;
      uint64_t v33 = a18;
      uint64_t v31 = a16;
      uint64_t v32 = a17;
      uint64_t v29 = a14;
      uint64_t v30 = a15;
      uint64_t v24 = v50;
      goto LABEL_6;
    default:
      v50[0] = a3;
      LOWORD(v50[1]) = a4;
      BYTE2(v50[1]) = BYTE2(a4);
      BYTE3(v50[1]) = BYTE3(a4);
      BYTE4(v50[1]) = BYTE4(a4);
      BYTE5(v50[1]) = BYTE5(a4);
      uint64_t v42 = (char *)v50 + BYTE6(a4);
      sub_1DB04239C(a3, a4);
      sub_1DB04239C(a5, a6);
      sub_1DB04239C(a10, a11);
      sub_1DB04239C(a14, a15);
      sub_1DB04239C(a18, a19);
      uint64_t v36 = a2;
      uint64_t v37 = a20;
      uint64_t v34 = a19;
      uint64_t v35 = a1;
      uint64_t v33 = a18;
      uint64_t v24 = v42;
      uint64_t v31 = a16;
      uint64_t v32 = a17;
      uint64_t v29 = a14;
      uint64_t v30 = a15;
LABEL_6:
      sub_1DB09E6C0((uint64_t)v50, (uint64_t)v24, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v29, v30, v31, v32, v33, v34,
        v35,
        v36,
        v37);
      if (v49)
      {
        sub_1DB042664(a3, a4);
        sub_1DB042664(a5, a6);
        sub_1DB042664(a10, a11);
        sub_1DB042664(a14, a15);
        sub_1DB042664(a18, a19);
        __break(1u);
LABEL_14:
        sub_1DB042664(a3, a4);
        sub_1DB042664(a5, a6);
        sub_1DB042664(a10, a11);
        sub_1DB042664(a14, a15);
        sub_1DB042664(a18, a19);
        swift_release();
        swift_release();
        __break(1u);
LABEL_15:
        sub_1DB042664(a3, a4);
        sub_1DB042664(a6, a5);
        sub_1DB042664(a10, a11);
        sub_1DB042664(a14, a15);
        sub_1DB042664(a18, a19);
        sub_1DB042664(a3, a4);
        __break(1u);
        JUMPOUT(0x1DB09E6B0);
      }
LABEL_7:
      sub_1DB042664(a3, a4);
      uint64_t v25 = a5;
      unint64_t v26 = a6;
LABEL_11:
      sub_1DB042664(v25, v26);
      sub_1DB042664(a10, a11);
      sub_1DB042664(a14, a15);
      return sub_1DB042664(a18, a19);
  }
}

uint64_t sub_1DB09E6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v23 = a6;
  v53[2] = *MEMORY[0x1E4F143B8];
  switch(a6 >> 62)
  {
    case 1uLL:
      if (a5 >> 32 < (int)a5)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      sub_1DB04239C(a5, a6);
      uint64_t v38 = sub_1DB0C48A8();
      if (!v38) {
        goto LABEL_21;
      }
      uint64_t v39 = sub_1DB0C48D8();
      if (__OFSUB__((int)a5, v39)) {
LABEL_32:
      }
        __break(1u);
      v38 += (int)a5 - v39;
LABEL_21:
      uint64_t v40 = sub_1DB0C48C8();
      if (v40 >= (a5 >> 32) - (int)a5) {
        uint64_t v41 = (a5 >> 32) - (int)a5;
      }
      else {
        uint64_t v41 = v40;
      }
      uint64_t v42 = v38 + v41;
      if (v38) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = 0;
      }
      a22(v38, v43, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a1, a2);
      if (v22)
      {
LABEL_34:
        sub_1DB042664(a5, v23);
        __break(1u);
        JUMPOUT(0x1DB09EA7CLL);
      }
      return sub_1DB042664(a5, v23);
    case 2uLL:
      uint64_t v28 = *(void *)(a5 + 16);
      uint64_t v29 = *(void *)(a5 + 24);
      swift_retain();
      swift_retain();
      unint64_t v23 = sub_1DB0C48A8();
      if (!v23) {
        goto LABEL_6;
      }
      uint64_t v30 = sub_1DB0C48D8();
      if (__OFSUB__(v28, v30)) {
        goto LABEL_31;
      }
      v23 += v28 - v30;
LABEL_6:
      BOOL v31 = __OFSUB__(v29, v28);
      uint64_t v32 = v29 - v28;
      if (v31) {
        goto LABEL_30;
      }
      uint64_t v33 = sub_1DB0C48C8();
      if (v33 >= v32) {
        uint64_t v34 = v32;
      }
      else {
        uint64_t v34 = v33;
      }
      unint64_t v35 = v23 + v34;
      if (v23) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = 0;
      }
      a22(v23, v36, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a1, a2);
      if (!v22)
      {
        swift_release();
        return swift_release();
      }
      swift_release();
      swift_release();
      __break(1u);
      goto LABEL_34;
    case 3uLL:
      memset(v53, 0, 14);
      uint64_t v47 = a1;
      uint64_t v48 = a2;
      uint64_t v45 = a20;
      uint64_t v46 = a21;
      uint64_t v44 = a19;
      unint64_t v27 = (char *)v53;
      return ((uint64_t (*)(void *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a22)(v53, v27, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v44, v45, v46, v47, v48);
    default:
      v53[0] = a5;
      LOWORD(v53[1]) = a6;
      BYTE2(v53[1]) = BYTE2(a6);
      BYTE3(v53[1]) = BYTE3(a6);
      BYTE4(v53[1]) = BYTE4(a6);
      BYTE5(v53[1]) = BYTE5(a6);
      unint64_t v27 = (char *)v53 + BYTE6(a6);
      uint64_t v47 = a1;
      uint64_t v48 = a2;
      uint64_t v45 = a20;
      uint64_t v46 = a21;
      uint64_t v44 = a19;
      return ((uint64_t (*)(void *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a22)(v53, v27, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v44, v45, v46, v47, v48);
  }
}

uint64_t sub_1DB09EA8C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!ccrng())
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  switch(a7 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a6), a6)) {
        goto LABEL_6;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    case 2uLL:
      if (!__OFSUB__(*(void *)(a6 + 24), *(void *)(a6 + 16))) {
        goto LABEL_6;
      }
      goto LABEL_21;
    default:
LABEL_6:
      if (!a8) {
        goto LABEL_27;
      }
      switch(a11 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a10), a10)) {
            goto LABEL_11;
          }
          goto LABEL_22;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a10 + 24), *(void *)(a10 + 16))) {
            goto LABEL_11;
          }
          goto LABEL_23;
        default:
LABEL_11:
          if (!a12) {
            goto LABEL_28;
          }
          switch(a15 >> 62)
          {
            case 1uLL:
              if (!__OFSUB__(HIDWORD(a14), a14)) {
                goto LABEL_16;
              }
              goto LABEL_24;
            case 2uLL:
              if (!__OFSUB__(*(void *)(a14 + 24), *(void *)(a14 + 16))) {
                goto LABEL_16;
              }
              goto LABEL_25;
            default:
LABEL_16:
              if (!a16) {
                goto LABEL_29;
              }
              if (!a18) {
                goto LABEL_30;
              }
              if (!a1) {
                goto LABEL_31;
              }
              uint64_t result = ccspake_verifier_initialize();
              *a3 = result;
              return result;
          }
      }
  }
}

__n128 SPAKE2.Verifier.init(w0:L:context:verifierID:proverID:cipherSuite:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12)
{
  sub_1DB09ED14(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1DB09EA8C);
  return result;
}

void sub_1DB09ED14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v43 = a4;
  uint64_t v21 = ccspake_cp_256_rfc();
  if (!v21)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v22 = v21;
  uint64_t v23 = ccspake_mac_hkdf_hmac_sha256();
  if (!v23)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v41[0] = v22;
  v41[1] = v23;
  v41[2] = ccspake_sizeof_ctx();
  v41[3] = ccspake_sizeof_w();
  v41[4] = ccspake_sizeof_point();
  int64x2_t v42 = vdupq_n_s64(0x20uLL);
  v32[0] = a1;
  v32[1] = a2;
  uint64_t v32[2] = a3;
  v32[3] = v43;
  sub_1DB099418(v32, a5, a6, a7, a8, a10, a11, (uint64_t)v41, (uint64_t)&v33, a13);
  if (!v13)
  {
    uint64_t v24 = v34;
    uint64_t v25 = v40;
    long long v26 = v35;
    long long v27 = v36;
    long long v28 = v37;
    long long v29 = v38;
    long long v30 = v39;
    *(_OWORD *)a9 = v33;
    *(void *)(a9 + 16) = v24;
    *(_OWORD *)(a9 + 24) = v26;
    *(_OWORD *)(a9 + 40) = v27;
    *(_OWORD *)(a9 + 56) = v28;
    *(_OWORD *)(a9 + 72) = v29;
    *(_OWORD *)(a9 + 88) = v30;
    *(void *)(a9 + 104) = v25;
  }
}

uint64_t SPAKE2.Verifier.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  return sub_1DB09EEC0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(long long *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void *))sub_1DB098B68, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1DB09EA8C);
}

uint64_t sub_1DB09EEC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, void (*a15)(long long *__return_ptr, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void *), void (*a16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v53 = a6;
  uint64_t result = ccspake_cp_256_rfc();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v24 = result;
  uint64_t v37 = a9;
  uint64_t result = ccspake_mac_hkdf_hmac_sha256();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v51[0] = v24;
  v51[1] = result;
  v51[2] = ccspake_sizeof_ctx();
  _OWORD v51[3] = ccspake_sizeof_w();
  v51[4] = ccspake_sizeof_point();
  int64x2_t v52 = vdupq_n_s64(0x20uLL);
  unint64_t v25 = v53;
  a15(&v43, a1, a2, a3, a4, a5, v53, v51);
  if (v16)
  {
    sub_1DB042664(a12, a13);
    sub_1DB042664(a10, a11);
    sub_1DB042664(a7, a8);
    sub_1DB042664(a5, v25);
    sub_1DB042664(a3, a4);
    return sub_1DB042664(a1, a2);
  }
  else
  {
    long long v26 = v43;
    unint64_t v27 = v25;
    uint64_t v28 = v44;
    unint64_t v29 = v45;
    long long v40 = v43;
    uint64_t v41 = v44;
    uint64_t v42 = v45;
    sub_1DB04239C(v43, *((unint64_t *)&v43 + 1));
    sub_1DB04239C(v28, v29);
    sub_1DB099418((uint64_t *)&v40, a7, a8, a10, a11, a12, a13, (uint64_t)v51, (uint64_t)&v43, a16);
    sub_1DB042664(a5, v27);
    sub_1DB042664(a3, a4);
    sub_1DB042664(a1, a2);
    sub_1DB042664(v26, *((unint64_t *)&v26 + 1));
    uint64_t result = sub_1DB042664(v28, v29);
    uint64_t v30 = v44;
    uint64_t v31 = v50;
    long long v32 = v45;
    long long v33 = v46;
    long long v34 = v47;
    long long v35 = v48;
    long long v36 = v49;
    *(_OWORD *)uint64_t v37 = v43;
    *(void *)(v37 + 16) = v30;
    *(_OWORD *)(v37 + 24) = v32;
    *(_OWORD *)(v37 + 40) = v33;
    *(_OWORD *)(v37 + 56) = v34;
    *(_OWORD *)(v37 + 72) = v35;
    *(_OWORD *)(v37 + 88) = v36;
    *(void *)(v37 + 104) = v31;
  }
  return result;
}

uint64_t SPAKE2.Verifier.processPeerShareAndGenerateVerificationTag(peerShare:)(uint64_t a1, unint64_t a2)
{
  return sub_1DB09F140(a1, a2);
}

uint64_t sub_1DB09F140(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v6 = (int)v6;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_19;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    case 3uLL:
      if (*(void *)(v2 + 40)) {
        goto LABEL_14;
      }
      goto LABEL_7;
    default:
      uint64_t v6 = BYTE6(a2);
LABEL_6:
      if (v6 != *(void *)(v2 + 40))
      {
LABEL_14:
        sub_1DB09932C();
        swift_allocError();
        *uint64_t v15 = 1;
        return swift_willThrow();
      }
LABEL_7:
      uint64_t v19 = sub_1DB065640(*(void *)(v2 + 56));
      unint64_t v20 = v10;
      int v18 = 0;
      unint64_t v3 = *(char **)v2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v2 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v3 = sub_1DB05268C((uint64_t)v3);
        *(void *)uint64_t v2 = v3;
      }
      sub_1DB09F334((uint64_t)(v3 + 32), a1, a2, &v18);
      *(void *)uint64_t v2 = v3;
      int v12 = v18;
      if (v18 == -2)
      {
        sub_1DB09932C();
        swift_allocError();
        *uint64_t v16 = 0;
LABEL_17:
        swift_willThrow();
        return sub_1DB042664(v19, v20);
      }
      if (v18)
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v17 = v12;
        *(unsigned char *)(v17 + 4) = 0;
        goto LABEL_17;
      }
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v2 = v3;
      if ((v13 & 1) == 0)
      {
LABEL_20:
        unint64_t v3 = sub_1DB05268C((uint64_t)v3);
        *(void *)uint64_t v2 = v3;
      }
      sub_1DB0A04A8(&v19, &v18);
      *(void *)uint64_t v2 = v3;
      return v19;
  }
}

uint64_t sub_1DB09F334(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      sub_1DB04239C(a2, a3);
      uint64_t v7 = sub_1DB0C48A8();
      if (v7)
      {
        uint64_t v8 = sub_1DB0C48D8();
        if (__OFSUB__((int)a2, v8)) {
          goto LABEL_24;
        }
        v7 += (int)a2 - v8;
      }
      sub_1DB0C48C8();
      if (__OFSUB__(HIDWORD(a2), a2))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      if (!v7)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        JUMPOUT(0x1DB09F5D4);
      }
      *a4 = ccspake_kex_process();
      return sub_1DB042664(a2, a3);
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v11 = sub_1DB0C48A8();
      if (!v11) {
        goto LABEL_14;
      }
      uint64_t v12 = sub_1DB0C48D8();
      if (__OFSUB__(v10, v12)) {
        goto LABEL_23;
      }
      v11 += v10 - v12;
LABEL_14:
      sub_1DB0C48C8();
      if (__OFSUB__(*(void *)(a2 + 24), *(void *)(a2 + 16))) {
        goto LABEL_21;
      }
      if (!v11) {
        goto LABEL_26;
      }
      *a4 = ccspake_kex_process();
      swift_release();
      return swift_release();
    default:
      uint64_t result = ccspake_kex_process();
      *a4 = result;
      return result;
  }
}

uint64_t SPAKE2.Verifier.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1DB09F630(a1, a2, a3);
}

uint64_t sub_1DB09F630@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  v20[1] = *(char **)MEMORY[0x1E4F143B8];
  size_t v9 = v3[6];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v4;
    unint64_t v7 = a2;
    uint64_t v6 = a1;
    uint64_t v17 = a3;
    if (v9)
    {
      uint64_t v8 = sub_1DB0C51B8();
      *(void *)(v8 + 16) = v9;
      bzero((void *)(v8 + 32), v9);
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4FBC860];
    }
    v20[0] = (char *)v8;
    int v19 = 0;
    size_t v9 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v3 = v9;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
  }
  size_t v9 = (size_t)sub_1DB05268C(v9);
  *unint64_t v3 = v9;
LABEL_6:
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < (int)v6) {
        __break(1u);
      }
      sub_1DB04239C(v6, v7);
      sub_1DB0A0F44((int)v6, v6 >> 32, v7 & 0x3FFFFFFFFFFFFFFFLL, &v19, v9 + 32, v6, v7, (uint64_t)v3, v20);
      goto LABEL_18;
    case 2uLL:
      uint64_t v12 = *(void *)(v6 + 16);
      uint64_t v11 = *(void *)(v6 + 24);
      sub_1DB04239C(v6, v7);
      swift_retain();
      swift_retain();
      sub_1DB0A0F44(v12, v11, v7 & 0x3FFFFFFFFFFFFFFFLL, &v19, v9 + 32, v6, v7, (uint64_t)v3, v20);
      if (v5)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1DB09F9E4);
      }
      swift_release();
      swift_release();
LABEL_18:
      int session_key = v19;
      goto LABEL_19;
    case 3uLL:
      memset(v18, 0, 14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = (uint64_t)sub_1DB07E358(0, *(void *)(v8 + 16), 0, (char *)v8);
      }
      v20[0] = (char *)v8;
      goto LABEL_15;
    default:
      v18[0] = v6;
      LOWORD(v18[1]) = v7;
      BYTE2(v18[1]) = BYTE2(v7);
      BYTE3(v18[1]) = BYTE3(v7);
      BYTE4(v18[1]) = BYTE4(v7);
      BYTE5(v18[1]) = BYTE5(v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = (uint64_t)sub_1DB07E358(0, *(void *)(v8 + 16), 0, (char *)v8);
      }
      v20[0] = (char *)v8;
LABEL_15:
      int session_key = ccspake_mac_verify_and_get_session_key();
      sub_1DB042664(v6, v7);
      sub_1DB042664(v6, v7);
LABEL_19:
      *unint64_t v3 = v9;
      if (session_key == -2)
      {
        sub_1DB09932C();
        swift_allocError();
        *uint64_t v15 = 0;
      }
      else
      {
        if (!session_key)
        {
          sub_1DB046B64((size_t)(v20[0] + 32), (uint64_t)&v20[0][*((void *)v20[0] + 2) + 32], v18);
          uint64_t result = swift_bridgeObjectRelease();
          *uint64_t v17 = v18[0];
          return result;
        }
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v16 = session_key;
        *(unsigned char *)(v16 + 4) = 0;
      }
      swift_willThrow();
      return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1DB09F9F4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char **a8)
{
  switch(a6 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    case 2uLL:
      if (!__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_10;
    default:
LABEL_5:
      if (!a1)
      {
LABEL_11:
        __break(1u);
        JUMPOUT(0x1DB09FAF0);
      }
      uint64_t v10 = *a8;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a8 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v10 = sub_1DB07E358(0, *((void *)v10 + 2), 0, v10);
      }
      *a8 = v10;
      uint64_t result = ccspake_mac_verify_and_get_session_key();
      *a3 = result;
      return result;
  }
}

uint64_t sub_1DB09FB00(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v10 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v5 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v12 < (int)v5) {
        goto LABEL_28;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v5, sub_1DB0C48D8())) {
        goto LABEL_29;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v15 = sub_1DB0C4888();
      swift_release();
      uint64_t v10 = v15;
      uint64_t v12 = v5 >> 32;
LABEL_16:
      if (v12 < (int)v5) {
        goto LABEL_24;
      }
      if (!sub_1DB0C48A8()) {
        goto LABEL_31;
      }
      if (__OFSUB__((int)v5, sub_1DB0C48D8())) {
        goto LABEL_26;
      }
      sub_1DB0C48C8();
      if (__OFADD__(*(void *)(a3 + 24), a4)) {
        goto LABEL_27;
      }
      *a2 = ccspake_reduce_w();
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v5;
      a1[1] = v10 | 0x4000000000000000;
      break;
    case 2uLL:
      uint64_t v19 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v13 = v5;
      uint64_t v14 = *(void *)(v5 + 16);
      if (!sub_1DB0C48A8())
      {
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x1DB09FE50);
      }
      if (__OFSUB__(v14, sub_1DB0C48D8())) {
        goto LABEL_22;
      }
      sub_1DB0C48C8();
      if (__OFADD__(*(void *)(a3 + 24), a4)) {
        goto LABEL_25;
      }
      *a2 = ccspake_reduce_w();
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v13;
      a1[1] = v19 | 0x8000000000000000;
      break;
    case 3uLL:
      if (__OFADD__(*(void *)(a3 + 24), a4)) {
        goto LABEL_23;
      }
      *a2 = ccspake_reduce_w();
      return swift_bridgeObjectRelease();
    default:
      LOWORD(v18) = a1[1];
      BYTE2(v18) = BYTE2(a1[1]);
      HIBYTE(v18) = BYTE3(a1[1]);
      __int16 v20 = WORD2(a1[1]);
      unsigned __int8 v21 = BYTE6(a1[1]);
      if (__OFADD__(*(void *)(a3 + 24), a4))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      *a2 = ccspake_reduce_w();
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v5;
      a1[1] = v18 | ((unint64_t)v20 << 32) | ((unint64_t)HIBYTE(v20) << 40) | ((unint64_t)v21 << 48);
      break;
  }
  return result;
}

uint64_t sub_1DB09FE60(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, _DWORD *a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = a1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      *(void *)&long long v35 = *a1;
      *((void *)&v35 + 1) = v6 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB04239C(a2, a3);
      sub_1DB04239C(a4, a5);
      sub_1DB0A07A0((int *)&v35, a2, a3, a4, a5, a6);
      sub_1DB042664(a2, a3);
      uint64_t result = sub_1DB042664(a4, a5);
      uint64_t v19 = *((void *)&v35 + 1) | 0x4000000000000000;
      *a1 = v35;
      a1[1] = v19;
      return result;
    case 2uLL:
      *(void *)&long long v35 = *a1;
      *((void *)&v35 + 1) = v6 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v20 = *(void *)(v35 + 16);
      uint64_t v34 = *(void *)(v35 + 24);
      uint64_t v21 = sub_1DB0C48A8();
      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x1DB0A01A0);
      }
      uint64_t v22 = v21;
      uint64_t v23 = sub_1DB0C48D8();
      uint64_t v24 = v20 - v23;
      if (__OFSUB__(v20, v23))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v25 = __OFSUB__(v34, v20);
      uint64_t v26 = v34 - v20;
      if (v25) {
        goto LABEL_15;
      }
      uint64_t v27 = sub_1DB0C48C8();
      if (v27 >= v26) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = v27;
      }
      sub_1DB098CD4(v22 + v24, v22 + v24 + v28, a2, a3, a4, a5, a6);
      sub_1DB042664(a2, a3);
      uint64_t result = sub_1DB042664(a4, a5);
      unint64_t v18 = *((void *)&v35 + 1) | 0x8000000000000000;
      uint64_t v17 = v35;
LABEL_11:
      *a1 = v17;
      a1[1] = v18;
      return result;
    case 3uLL:
      *(void *)((char *)&v35 + 7) = 0;
      *(void *)&long long v35 = 0;
      sub_1DB098CD4((uint64_t)&v35, (uint64_t)&v35, a2, a3, a4, a5, a6);
      sub_1DB042664(a2, a3);
      return sub_1DB042664(a4, a5);
    default:
      *(void *)&long long v35 = *a1;
      WORD4(v35) = v6;
      BYTE10(v35) = BYTE2(v6);
      BYTE11(v35) = BYTE3(v6);
      BYTE12(v35) = BYTE4(v6);
      BYTE13(v35) = BYTE5(v6);
      BYTE14(v35) = BYTE6(v6);
      sub_1DB098CD4((uint64_t)&v35, (uint64_t)&v35 + BYTE6(v6), a2, a3, a4, a5, a6);
      uint64_t v31 = DWORD2(v35);
      uint64_t v33 = v35;
      uint64_t v13 = BYTE12(v35);
      uint64_t v14 = BYTE13(v35);
      uint64_t v15 = BYTE14(v35);
      sub_1DB042664(a2, a3);
      uint64_t result = sub_1DB042664(a4, a5);
      uint64_t v17 = v33;
      unint64_t v18 = v31 | (v13 << 32) | (v14 << 40) | (v15 << 48);
      goto LABEL_11;
  }
}

uint64_t sub_1DB0A01B0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v9 = v3 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_13;
      }
      if (v9 < (int)v3) {
        goto LABEL_21;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_22;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v11 = sub_1DB0C4888();
      swift_release();
      uint64_t v7 = v11;
      uint64_t v9 = v3 >> 32;
LABEL_13:
      if (v9 < (int)v3) {
        goto LABEL_19;
      }
      if (!sub_1DB0C48A8()) {
        goto LABEL_24;
      }
      if (__OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_20;
      }
      sub_1DB0C48C8();
      uint64_t result = ccspake_kex_generate();
      *a2 = result;
      *a1 = v3;
      a1[1] = v7 | 0x4000000000000000;
      break;
    case 2uLL:
      uint64_t v12 = *a1;
      uint64_t v14 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v10 = *(void *)(v12 + 16);
      if (!sub_1DB0C48A8())
      {
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1DB0A0498);
      }
      if (__OFSUB__(v10, sub_1DB0C48D8()))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }
      sub_1DB0C48C8();
      uint64_t result = ccspake_kex_generate();
      *a2 = result;
      *a1 = v12;
      a1[1] = v14 | 0x8000000000000000;
      break;
    case 3uLL:
      uint64_t result = ccspake_kex_generate();
      *a2 = result;
      return result;
    default:
      LOWORD(v13) = a1[1];
      BYTE2(v13) = BYTE2(a1[1]);
      HIBYTE(v13) = BYTE3(a1[1]);
      __int16 v15 = WORD2(a1[1]);
      unsigned __int8 v16 = BYTE6(a1[1]);
      uint64_t result = ccspake_kex_generate();
      *a2 = result;
      *a1 = v3;
      a1[1] = v13 | ((unint64_t)v15 << 32) | ((unint64_t)HIBYTE(v15) << 40) | ((unint64_t)v16 << 48);
      return result;
  }
  return result;
}

uint64_t sub_1DB0A04A8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v9 = v3 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_13;
      }
      if (v9 < (int)v3) {
        goto LABEL_21;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_22;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v11 = sub_1DB0C4888();
      swift_release();
      uint64_t v7 = v11;
      uint64_t v9 = v3 >> 32;
LABEL_13:
      if (v9 < (int)v3) {
        goto LABEL_19;
      }
      if (!sub_1DB0C48A8()) {
        goto LABEL_24;
      }
      if (__OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_20;
      }
      sub_1DB0C48C8();
      uint64_t result = ccspake_mac_compute();
      *a2 = result;
      *a1 = v3;
      a1[1] = v7 | 0x4000000000000000;
      break;
    case 2uLL:
      uint64_t v12 = *a1;
      uint64_t v14 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v10 = *(void *)(v12 + 16);
      if (!sub_1DB0C48A8())
      {
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1DB0A0790);
      }
      if (__OFSUB__(v10, sub_1DB0C48D8()))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }
      sub_1DB0C48C8();
      uint64_t result = ccspake_mac_compute();
      *a2 = result;
      *a1 = v12;
      a1[1] = v14 | 0x8000000000000000;
      break;
    case 3uLL:
      uint64_t result = ccspake_mac_compute();
      *a2 = result;
      return result;
    default:
      LOWORD(v13) = a1[1];
      BYTE2(v13) = BYTE2(a1[1]);
      HIBYTE(v13) = BYTE3(a1[1]);
      __int16 v15 = WORD2(a1[1]);
      unsigned __int8 v16 = BYTE6(a1[1]);
      uint64_t result = ccspake_mac_compute();
      *a2 = result;
      *a1 = v3;
      a1[1] = v13 | ((unint64_t)v15 << 32) | ((unint64_t)HIBYTE(v15) << 40) | ((unint64_t)v16 << 48);
      return result;
  }
  return result;
}

uint64_t sub_1DB0A07A0(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, _DWORD *a6)
{
  uint64_t result = sub_1DB0C4968();
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if ((int)v13 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_1DB0C48A8();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t result = sub_1DB0C48D8();
  uint64_t v15 = v12 - result;
  if (__OFSUB__(v12, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v16 = v13 - v12;
  uint64_t v17 = sub_1DB0C48C8();
  if (v17 >= v16) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  sub_1DB098CD4(v14 + v15, v14 + v15 + v18, a2, a3, a4, a5, a6);
  sub_1DB042664(a2, a3);
  return sub_1DB042664(a4, a5);
}

uint64_t sub_1DB0A0898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,void (*a23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v29 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v29 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v30 = sub_1DB0C48C8();
  if (v30 >= a2 - a1) {
    uint64_t v31 = a2 - a1;
  }
  else {
    uint64_t v31 = v30;
  }
  uint64_t v32 = v29 + v31;
  if (v29) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  sub_1DB09E6C0(v29, v33, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23);
  sub_1DB042664(a4, a5);
  sub_1DB042664(a6, a7);
  sub_1DB042664(a11, a12);
  sub_1DB042664(a15, a16);
  return sub_1DB042664(a19, a20);
}

uint64_t sub_1DB0A0A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void (*a17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v24 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v24 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v25 = sub_1DB0C48C8();
  if (v25 >= a2 - a1) {
    uint64_t v26 = a2 - a1;
  }
  else {
    uint64_t v26 = v25;
  }
  uint64_t v27 = v24 + v26;
  if (v24) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  sub_1DB09C450(v24, v28, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  sub_1DB042664(a4, a5);
  sub_1DB042664(a6, a7);
  sub_1DB042664(a8, a9);
  sub_1DB042664(a10, a11);
  return sub_1DB042664(a15, a16);
}

uint64_t sub_1DB0A0BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, void (*a19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v26 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v26 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v27 = sub_1DB0C48C8();
  if (v27 >= a2 - a1) {
    uint64_t v28 = a2 - a1;
  }
  else {
    uint64_t v28 = v27;
  }
  uint64_t v29 = v26 + v28;
  if (v26) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  sub_1DB09D9AC(v26, v30, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  sub_1DB042664(a4, a5);
  sub_1DB042664(a6, a7);
  sub_1DB042664(a8, a9);
  sub_1DB042664(a13, a14);
  return sub_1DB042664(a17, a18);
}

uint64_t sub_1DB0A0D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,void (*a21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v28 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v28 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v29 = sub_1DB0C48C8();
  if (v29 >= a2 - a1) {
    uint64_t v30 = a2 - a1;
  }
  else {
    uint64_t v30 = v29;
  }
  uint64_t v31 = v28 + v30;
  if (v28) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  sub_1DB09DFF4(v28, v32, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
  sub_1DB042664(a4, a5);
  sub_1DB042664(a6, a7);
  sub_1DB042664(a11, a12);
  sub_1DB042664(a15, a16);
  return sub_1DB042664(a19, a20);
}

uint64_t sub_1DB0A0F44(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, char **a9)
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v16 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v16 += a1 - result;
  }
  BOOL v17 = __OFSUB__(a2, a1);
  uint64_t v18 = a2 - a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v19 = sub_1DB0C48C8();
  if (v19 >= v18) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v19;
  }
  uint64_t v21 = v16 + v20;
  if (v16) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  sub_1DB09F9F4(v16, v22, a4, a5, a6, a7, a8, a9);
  return sub_1DB042664(a6, a7);
}

unint64_t sub_1DB0A1034()
{
  unint64_t result = qword_1EA8FE9E8;
  if (!qword_1EA8FE9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE9E8);
  }
  return result;
}

unint64_t sub_1DB0A108C()
{
  unint64_t result = qword_1EA8FE9F0[0];
  if (!qword_1EA8FE9F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FE9F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2()
{
  return &type metadata for SPAKE2;
}

uint64_t getEnumTagSinglePayload for SPAKE2.Spake2Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SPAKE2.Spake2Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB0A124CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Spake2Error()
{
  return &type metadata for SPAKE2.Spake2Error;
}

unsigned char *storeEnumTagSinglePayload for SPAKE2.CipherSuite(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DB0A1320);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.CipherSuite()
{
  return &type metadata for SPAKE2.CipherSuite;
}

ValueMetadata *type metadata accessor for SPAKE2.WS()
{
  return &type metadata for SPAKE2.WS;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwxx_0(uint64_t *a1)
{
  sub_1DB042664(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  return sub_1DB042664(v2, v3);
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1DB04239C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_1DB04239C(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1DB04239C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1DB042664(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_1DB04239C(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_1DB042664(v10, v11);
  return a1;
}

uint64_t *_s16CryptoKitPrivate6SPAKE2O2WSVwta_0(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1DB042664(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_1DB042664(v6, v7);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O2WSVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.WL()
{
  return &type metadata for SPAKE2.WL;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Prover()
{
  return &type metadata for SPAKE2.Prover;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwxx_0(void *a1)
{
  swift_bridgeObjectRelease();
  sub_1DB042664(a1[8], a1[9]);
  sub_1DB042664(a1[10], a1[11]);
  uint64_t v2 = a1[12];
  unint64_t v3 = a1[13];
  return sub_1DB042664(v2, v3);
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  unint64_t v5 = *(void *)(a2 + 72);
  sub_1DB0C5188();
  sub_1DB04239C(v4, v5);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  unint64_t v7 = *(void *)(a2 + 88);
  sub_1DB04239C(v6, v7);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  uint64_t v9 = *(void *)(a2 + 96);
  unint64_t v8 = *(void *)(a2 + 104);
  sub_1DB04239C(v9, v8);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v8;
  return a1;
}

void *_s16CryptoKitPrivate6SPAKE2O6ProverVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v4 = a2[8];
  unint64_t v5 = a2[9];
  sub_1DB04239C(v4, v5);
  uint64_t v6 = a1[8];
  unint64_t v7 = a1[9];
  a1[8] = v4;
  a1[9] = v5;
  sub_1DB042664(v6, v7);
  uint64_t v8 = a2[10];
  unint64_t v9 = a2[11];
  sub_1DB04239C(v8, v9);
  uint64_t v10 = a1[10];
  unint64_t v11 = a1[11];
  a1[10] = v8;
  a1[11] = v9;
  sub_1DB042664(v10, v11);
  uint64_t v13 = a2[12];
  unint64_t v12 = a2[13];
  sub_1DB04239C(v13, v12);
  uint64_t v14 = a1[12];
  unint64_t v15 = a1[13];
  a1[12] = v13;
  a1[13] = v12;
  sub_1DB042664(v14, v15);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwta_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  unint64_t v5 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_1DB042664(v4, v5);
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v7 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_1DB042664(v6, v7);
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a1 + 96);
  unint64_t v10 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v8;
  sub_1DB042664(v9, v10);
  return a1;
}

uint64_t _s16CryptoKitPrivate6SPAKE2O6ProverVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DB0A1854(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.Verifier()
{
  return &type metadata for SPAKE2.Verifier;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SPAKE2.CipherSuiteSpecifics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SPAKE2.CipherSuiteSpecifics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPAKE2.CipherSuiteSpecifics()
{
  return &type metadata for SPAKE2.CipherSuiteSpecifics;
}

int64_t sub_1DB0A197C@<X0>(int64_t result@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(*(void *)(v3 + 16) + 24);
  int64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
    __break(1u);
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    __n128 result = sub_1DB0479F4(0, v8, result, a2);
    *a3 = result;
    return result;
  }
  __break(1u);
  return result;
}

int64_t sub_1DB0A19D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64_t *a3@<X8>)
{
  return sub_1DB098B18(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t SPAKE2.Verifier.getShare()()
{
  return SPAKE2.Prover.getShare()();
}

uint64_t HE.SerializedSecretKey.seed.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1DB04239C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t HE.SerializedSecretKey.init(seed:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1DB0A1B30);
      }
      uint64_t v6 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t result = cche_rng_seed_sizeof();
      if (v6 == result)
      {
        *a3 = a1;
        a3[1] = a2;
      }
      else
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v10 = 0;
        *(unsigned char *)(v10 + 4) = 1;
        swift_willThrow();
        return sub_1DB042664(a1, a2);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

double HE.SerializedSecretKey.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = cche_rng_seed_sizeof();
  *(void *)&long long v5 = sub_1DB065640(v2);
  *((void *)&v5 + 1) = v3;
  sub_1DB0A1C30(&v5);
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t sub_1DB0A1B90(uint64_t result, uint64_t a2)
{
  if (result && a2 - result >= 1)
  {
    double result = ccrng();
    if (result) {
      return ccrng_generate_bridge();
    }
    else {
      __break(1u);
    }
  }
  return result;
}

void *sub_1DB0A1C30(void *result)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = result[1];
  uint64_t v2 = result;
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v19 = *result;
      uint64_t v20 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      double result = (void *)sub_1DB0A1E60((int *)&v19);
      uint64_t v6 = v19;
      unint64_t v7 = v20 | 0x4000000000000000;
      goto LABEL_7;
    case 2uLL:
      uint64_t v19 = *result;
      uint64_t v20 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v8 = v20;
      uint64_t v9 = *(void *)(v19 + 16);
      uint64_t v10 = *(void *)(v19 + 24);
      uint64_t v11 = sub_1DB0C48A8();
      if (!v11)
      {
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1DB0A1E50);
      }
      uint64_t v12 = v11;
      uint64_t v13 = sub_1DB0C48D8();
      uint64_t v14 = v9 - v13;
      if (__OFSUB__(v9, v13))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        __break(1u);
      }
      BOOL v15 = __OFSUB__(v10, v9);
      uint64_t v16 = v10 - v9;
      if (v15) {
        goto LABEL_16;
      }
      uint64_t v17 = sub_1DB0C48C8();
      if (v17 >= v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v17;
      }
      double result = (void *)sub_1DB0A1B90(v12 + v14, v12 + v14 + v18);
      *uint64_t v2 = v19;
      v2[1] = v8 | 0x8000000000000000;
      return result;
    case 3uLL:
      return result;
    default:
      uint64_t v19 = *result;
      LOWORD(v20) = v1;
      BYTE2(v20) = BYTE2(v1);
      unint64_t v3 = HIDWORD(v1);
      BYTE3(v20) = BYTE3(v1);
      unint64_t v4 = v1 >> 40;
      BYTE4(v20) = BYTE4(v1);
      unint64_t v5 = HIWORD(v1);
      BYTE5(v20) = BYTE5(v1);
      BYTE6(v20) = BYTE6(v1);
      if (!BYTE6(v1)) {
        goto LABEL_5;
      }
      if (!ccrng()) {
        goto LABEL_18;
      }
      double result = (void *)ccrng_generate_bridge();
      LOBYTE(v3) = BYTE4(v20);
      LOBYTE(v4) = BYTE5(v20);
      LOBYTE(v5) = BYTE6(v20);
LABEL_5:
      uint64_t v6 = v19;
      unint64_t v7 = v20 | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 48);
LABEL_7:
      *uint64_t v2 = v6;
      v2[1] = v7;
      return result;
  }
}

uint64_t sub_1DB0A1E60(int *a1)
{
  uint64_t result = sub_1DB0C4968();
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_1DB0C48A8();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  uint64_t result = sub_1DB0C48D8();
  uint64_t v6 = v3 - result;
  if (__OFSUB__(v3, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = v4 - v3;
  uint64_t v8 = sub_1DB0C48C8();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  return sub_1DB0A1B90(v5 + v6, v5 + v6 + v9);
}

uint64_t *_s19SerializedSecretKeyVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1DB04239C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s19SerializedSecretKeyVwxx(uint64_t a1)
{
  return sub_1DB042664(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s19SerializedSecretKeyVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1DB04239C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1DB042664(v5, v6);
  return a1;
}

uint64_t *_s19SerializedSecretKeyVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1DB042664(v3, v4);
  return a1;
}

uint64_t _s19SerializedSecretKeyVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s19SerializedSecretKeyVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedSecretKey()
{
  return &type metadata for HE.SerializedSecretKey;
}

ValueMetadata *_s9SecretKeyVMa()
{
  return &_s9SecretKeyVN;
}

void *sub_1DB0A208C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = cche_secret_key_sizeof();
  type metadata accessor for HE.ObjectStorageWithZeroize();
  unint64_t v6 = (void *)swift_allocObject();
  unsigned char v6[2] = a2;
  swift_retain();
  uint64_t v7 = swift_slowAlloc();
  v6[3] = v7;
  v6[4] = v7 + v5;
  switch(v4 >> 62)
  {
    case 1uLL:
      if ((int)v3 > v3 >> 32)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
      }
      sub_1DB04239C(v3, v4);
      if (!sub_1DB0C48A8())
      {
        sub_1DB0C48C8();
        __break(1u);
LABEL_17:
        sub_1DB0C48C8();
        __break(1u);
        JUMPOUT(0x1DB0A2338);
      }
      if (__OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_15;
      }
      sub_1DB0C48C8();
      int v8 = cche_secret_key_generate_from_seed();
      sub_1DB042664(v3, v4);
LABEL_10:
      sub_1DB042664(v3, v4);
      if (v8)
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v10 = v8;
        *(unsigned char *)(v10 + 4) = 0;
        swift_willThrow();
        swift_release();
      }
      swift_release();
      return v6;
    case 2uLL:
      uint64_t v9 = *(void *)(v3 + 16);
      swift_retain();
      swift_retain();
      if (!sub_1DB0C48A8()) {
        goto LABEL_17;
      }
      if (__OFSUB__(v9, sub_1DB0C48D8())) {
        goto LABEL_14;
      }
      sub_1DB0C48C8();
      int v8 = cche_secret_key_generate_from_seed();
      swift_release();
      swift_release();
      goto LABEL_10;
    default:
      int v8 = cche_secret_key_generate_from_seed();
      goto LABEL_10;
  }
}

unint64_t sub_1DB0A234C(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((result & (result - 1)) != 0)
  {
    return 1 << -(char)__clz(result);
  }
  else if (result <= 1)
  {
    return 1;
  }
  return result;
}

unint64_t sub_1DB0A2380@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((result & (result - 1)) != 0)
  {
    char v7 = -(uint64_t)__clz(result);
    if ((v7 & 0x3F) == 0x3FLL)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    unint64_t v8 = 1 << v7;
  }
  else if (result <= 1)
  {
    unint64_t v8 = 1;
  }
  else
  {
    unint64_t v8 = result;
  }
  uint64_t result = cche_param_ctx_polynomial_degree();
  if (!result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int64_t v9 = __clz(v8) ^ 0x3F;
  unint64_t v10 = __clz(result) ^ 0x3F;
  if (v10 < v9)
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 5;
    *(unsigned char *)(v11 + 4) = 1;
    return swift_willThrow();
  }
  if (!v9) {
    goto LABEL_32;
  }
  uint64_t v17 = a4;
  uint64_t v18 = a3;
  unint64_t v12 = v10 - v9 + 1;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t result = (unint64_t)sub_1DB04C3D8(0, v9 & ~(v9 >> 63), 0);
  if (v9 - 1 >= -1)
  {
    BOOL v13 = 0;
    while (!v13)
    {
      if ((v12 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (HIDWORD(v12)) {
        goto LABEL_28;
      }
      if (v12 < 0x20) {
        int v14 = (1 << v12) + 1;
      }
      else {
        int v14 = 1;
      }
      unint64_t v16 = *(void *)(v19 + 16);
      unint64_t v15 = *(void *)(v19 + 24);
      if (v16 >= v15 >> 1) {
        uint64_t result = (unint64_t)sub_1DB04C3D8((char *)(v15 > 1), v16 + 1, 1);
      }
      *(void *)(v19 + 16) = v16 + 1;
      *(_DWORD *)(v19 + 4 * v16 + 32) = v14;
      BOOL v13 = v12 == v10;
      if (v12 == v10) {
        unint64_t v12 = 0;
      }
      else {
        ++v12;
      }
      if (!--v9)
      {
        swift_retain();
        swift_retain();
        return sub_1DB0B4838(a2, v19, v18, v17);
      }
    }
    goto LABEL_34;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1DB0A2590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (!v5) {
    return v6;
  }
  uint64_t v48 = MEMORY[0x1E4FBC860];
  sub_1DB04C238(0, v5, 0);
  uint64_t v6 = v48;
  int64_t v9 = (void *)(a1 + 32);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    long long v43 = v9;
    uint64_t v10 = *v9;
    uint64_t v11 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = a2;
    sub_1DB0C5188();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v11;
    if (HIDWORD(*(void *)(v10 + 16))) {
      break;
    }
    uint64_t v14 = result;
    int v15 = cche_encode_poly_uint64();
    if (v15)
    {
      int v36 = v15;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v37 = v36;
      *(unsigned char *)(v37 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }
    int64_t v42 = v5;
    uint64_t v44 = v6;
    uint64_t v45 = v4;
    uint64_t v6 = cche_param_ctx_ciphertext_ctx_nmoduli();
    uint64_t v16 = cche_ciphertext_sizeof();
    uint64_t v17 = (void *)swift_initStackObject();
    uint64_t v17[2] = a2;
    swift_retain();
    uint64_t v18 = swift_slowAlloc();
    v17[3] = v18;
    unsigned char v17[4] = v18 + v16;
    uint64_t result = cche_rng_seed_sizeof();
    if (result)
    {
      unint64_t v19 = result;
      if (result < 15)
      {
        if (result < 0) {
          goto LABEL_35;
        }
        uint64_t result = 0;
        unint64_t v21 = (unint64_t)v19 << 48;
      }
      else
      {
        sub_1DB0C48F8();
        swift_allocObject();
        uint64_t v20 = sub_1DB0C48B8();
        if (v19 >= 0x7FFFFFFF)
        {
          sub_1DB0C4988();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0;
          *(void *)(result + 24) = v19;
          unint64_t v21 = v20 | 0x8000000000000000;
        }
        else
        {
          uint64_t result = v19 << 32;
          unint64_t v21 = v20 | 0x4000000000000000;
        }
      }
    }
    else
    {
      unint64_t v21 = 0xC000000000000000;
    }
    *(void *)&long long v47 = result;
    *((void *)&v47 + 1) = v21;
    uint64_t v22 = *(void *)(a3 + 24);
    if (!v22) {
      goto LABEL_37;
    }
    swift_retain();
    int v23 = sub_1DB0AF824((uint64_t *)&v47, v18, v14, a2, v22, v6);
    swift_release();
    if (v23)
    {
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v38 = v23;
      *(unsigned char *)(v38 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1DB042664(v47, *((unint64_t *)&v47 + 1));
LABEL_32:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    unint64_t v25 = *((void *)&v47 + 1);
    uint64_t v24 = v47;
    uint64_t result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      unint64_t v26 = result;
      int64_t v27 = v42;
      if (result <= 14)
      {
        if (result < 0) {
          goto LABEL_36;
        }
        uint64_t result = 0;
        unint64_t v30 = (unint64_t)v26 << 48;
      }
      else
      {
        uint64_t v28 = v24;
        sub_1DB0C48F8();
        swift_allocObject();
        uint64_t v29 = sub_1DB0C48B8();
        if (v26 >= 0x7FFFFFFF)
        {
          sub_1DB0C4988();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0;
          *(void *)(result + 24) = v26;
          unint64_t v30 = v29 | 0x8000000000000000;
        }
        else
        {
          uint64_t result = v26 << 32;
          unint64_t v30 = v29 | 0x4000000000000000;
        }
        uint64_t v24 = v28;
      }
    }
    else
    {
      unint64_t v30 = 0xC000000000000000;
      int64_t v27 = v42;
    }
    *(void *)&long long v47 = result;
    *((void *)&v47 + 1) = v30;
    int v31 = sub_1DB0AFC80((uint64_t *)&v47, (uint64_t)v17);
    uint64_t v6 = v44;
    if (v31)
    {
      int v39 = v31;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v40 = v39;
      *(unsigned char *)(v40 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1DB042664(v24, v25);
      sub_1DB042664(v47, *((unint64_t *)&v47 + 1));
      goto LABEL_32;
    }
    uint64_t v4 = v45;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    long long v32 = v47;
    uint64_t v48 = v44;
    unint64_t v34 = *(void *)(v44 + 16);
    unint64_t v33 = *(void *)(v44 + 24);
    if (v34 >= v33 >> 1)
    {
      long long v46 = v47;
      sub_1DB04C238((char *)(v33 > 1), v34 + 1, 1);
      long long v32 = v46;
      uint64_t v6 = v48;
    }
    *(void *)(v6 + 16) = v34 + 1;
    uint64_t v35 = v6 + 32 * v34;
    *(_OWORD *)(v35 + 32) = v32;
    *(void *)(v35 + 48) = v24;
    *(void *)(v35 + 56) = v25;
    int64_t v9 = v43 + 1;
    int64_t v5 = v27 - 1;
    if (!v5) {
      return v6;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1DB0A2A24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v33 = MEMORY[0x1E4FBC860];
  sub_1DB04C3B0(0, v7, 0);
  int64_t v27 = v6;
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  unint64_t v28 = v5;
  int64_t v26 = v7;
  if (v7)
  {
    unint64_t v8 = (void *)(a1 + 32);
    unint64_t v9 = v5;
    uint64_t v10 = (void *)(a2 + 32);
    sub_1DB0C5188();
    uint64_t result = sub_1DB0C5188();
    unint64_t v12 = v6;
    unint64_t v13 = v9;
    while (v13)
    {
      if (!v12) {
        goto LABEL_26;
      }
      uint64_t result = a3(*v8, *v10);
      uint64_t v14 = result;
      unint64_t v16 = *(void *)(v33 + 16);
      unint64_t v15 = *(void *)(v33 + 24);
      if (v16 >= v15 >> 1) {
        uint64_t result = (uint64_t)sub_1DB04C3B0((char *)(v15 > 1), v16 + 1, 1);
      }
      --v12;
      *(void *)(v33 + 16) = v16 + 1;
      *(void *)(v33 + 8 * v16 + 32) = v14;
      --v13;
      ++v10;
      ++v8;
      if (!--v7) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    sub_1DB0C5188();
    uint64_t result = sub_1DB0C5188();
LABEL_13:
    if (v28 <= v27)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    uint64_t v17 = 0;
    if (v26 <= v27) {
      int64_t v18 = v27;
    }
    else {
      int64_t v18 = v26;
    }
    int64_t v31 = v18 - v26;
    unint64_t v19 = v28 - v26;
    uint64_t v20 = 8 * v26 + 32;
    uint64_t v21 = v30 + v20;
    uint64_t v22 = v29 + v20;
    while (v19 != v17)
    {
      if (v27 - v26 == v17) {
        goto LABEL_24;
      }
      if (v31 == v17) {
        goto LABEL_28;
      }
      uint64_t result = a3(*(void *)(v21 + 8 * v17), *(void *)(v22 + 8 * v17));
      uint64_t v23 = result;
      unint64_t v25 = *(void *)(v33 + 16);
      unint64_t v24 = *(void *)(v33 + 24);
      if (v25 >= v24 >> 1) {
        uint64_t result = (uint64_t)sub_1DB04C3B0((char *)(v24 > 1), v25 + 1, 1);
      }
      *(void *)(v33 + 16) = v25 + 1;
      *(void *)(v33 + 8 * v25 + 32) = v23;
      if (v19 == ++v17) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1DB0A2C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = cche_param_ctx_polynomial_degree();
  uint64_t v10 = *(void *)(a4 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (uint64_t *)(a4 + 32);
    while (1)
    {
      uint64_t v13 = *v12++;
      BOOL v14 = __OFADD__(v11, v13);
      v11 += v13;
      if (v14) {
        break;
      }
      if (!--v10) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = 0;
LABEL_7:
  uint64_t v45 = a3;
  uint64_t v15 = v9;
  uint64_t v5 = sub_1DB07F724(v9, v11);
  if (!v15)
  {
LABEL_43:
    sub_1DB0AD70C(MEMORY[0x1E4FBC860], v5);
    __break(1u);
  }
  unint64_t v16 = (void *)sub_1DB0C51B8();
  v16[2] = v15;
  bzero(v16 + 4, 8 * v15);
  uint64_t v17 = sub_1DB0AD70C(v16, v5);
  uint64_t v49 = v15;
  unint64_t v18 = v11 % v15;
  if (v11 % v15 < 0) {
    goto LABEL_40;
  }
  unint64_t v19 = v17;
  if ((v18 & (v18 - 1)) != 0 && (-(uint64_t)__clz(v18) & 0x3F) == 0x3F) {
    goto LABEL_41;
  }
  uint64_t v50 = 0;
  uint64_t v20 = cche_param_ctx_plaintext_modulus_inverse();
  if (v20
    || (v44 = a2, v21 = v50, v50 = 0, v22 = v49, uint64_t v20 = cche_param_ctx_plaintext_modulus_inverse(), v20))
  {
    uint64_t v23 = (char *)v20;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v24 = v23;
    *(unsigned char *)(v24 + 4) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = (char *)v42;
    uint64_t v47 = v50;
    uint64_t v48 = v21;
    uint64_t v50 = 0;
    MEMORY[0x1F4188790](v20);
    sub_1DB0C5188();
    uint64_t v26 = sub_1DB0C5188();
    uint64_t v27 = sub_1DB0A2A24(v26, a4, sub_1DB0A304C);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v27 + 16);
    v42[1] = v27;
    uint64_t v43 = v4;
    if (v28)
    {
      uint64_t v46 = v5 - 1;
      if (__OFSUB__(v5, 1))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v29 = (uint64_t *)(v27 + 32);
      uint64_t v30 = v48;
      do
      {
        uint64_t v32 = *v29++;
        uint64_t v31 = v32;
        uint64_t v33 = v32 / v22;
        uint64_t v34 = v33 >= v46 ? v30 : v47;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if (v33 < 0) {
            goto LABEL_36;
          }
        }
        else
        {
          unint64_t v19 = sub_1DB0526DC(v19);
          if (v33 < 0) {
            goto LABEL_36;
          }
        }
        if ((unint64_t)v33 >= v19[2]) {
          goto LABEL_37;
        }
        uint64_t v5 = (uint64_t)v19;
        uint64_t v23 = (char *)v19[v33 + 4];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v19[v33 + 4] = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v23 = sub_1DB0526C8((uint64_t)v23);
          v19[v33 + 4] = v23;
        }
        unint64_t v36 = v31 - v33 * v49;
        if ((v36 & 0x8000000000000000) != 0) {
          goto LABEL_38;
        }
        uint64_t v22 = v49;
        if (v36 >= *((void *)v23 + 2)) {
          goto LABEL_39;
        }
        *(void *)&v23[8 * v36 + 32] = v34;
        --v28;
        uint64_t v30 = v48;
      }
      while (v28);
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v19;
    uint64_t v38 = v44;
    swift_retain();
    uint64_t v39 = v45;
    swift_retain();
    uint64_t v40 = v43;
    uint64_t v41 = sub_1DB0A2590(v37, v38, v39);
    if (!v40) {
      uint64_t v23 = (char *)v41;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  return v23;
}

uint64_t sub_1DB0A304C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = *v3;
  BOOL v5 = __OFADD__(*v3, a1);
  uint64_t result = *v3 + a1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    BOOL v5 = __OFADD__(v4, a2);
    uint64_t v7 = v4 + a2;
    if (!v5)
    {
      *uint64_t v3 = v7;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t SKANUTClient.input.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_1DB04239C(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t static SKANUTClient.defaultToken()()
{
  uint64_t v0 = sub_1DB048414(32);
  uint64_t v1 = sub_1DB048594(v0);
  swift_release();
  return v1;
}

uint64_t SKANUTClient.init(privateInput:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1DB0C5088();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v45 = 0;
  sub_1DB0C4F38();
  sub_1DB04239C(a1, a2);
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v41);
  if (!v10)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v39 = a1;
  unint64_t v40 = a2;
  sub_1DB0C5058();
  uint64_t v12 = sub_1DB0C5048();
  unint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  if (v14 >> 60 == 15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_1DB0C5058();
  uint64_t v16 = sub_1DB0C5048();
  unint64_t v18 = v17;
  v15(v9, v6);
  if (v18 >> 60 != 15)
  {
    sub_1DB05A7A4(2, 1);
    uint64_t v20 = v19;
    unint64_t v22 = v21;
    uint64_t v41 = v16;
    unint64_t v42 = v18;
    sub_1DB04239C(v16, v18);
    sub_1DB05DEE8(v20, v22);
    sub_1DB042664(v20, v22);
    sub_1DB069BB4(v16, v18);
    uint64_t v23 = v41;
    unint64_t v24 = v42;
    uint64_t v25 = sub_1DB05C118(0x48532D343833502DuLL, 0xEC00000034383341);
    unint64_t v27 = v26;
    uint64_t v43 = v23;
    unint64_t v44 = v24;
    sub_1DB04239C(v23, v24);
    sub_1DB05DEE8(v25, v27);
    sub_1DB042664(v25, v27);
    sub_1DB042664(v23, v24);
    uint64_t v28 = v43;
    unint64_t v29 = v44;
    uint64_t v43 = v12;
    unint64_t v44 = v14;
    sub_1DB04239C(v12, v14);
    sub_1DB05DEE8(v28, v29);
    sub_1DB042664(v28, v29);
    sub_1DB069BB4(v12, v14);
    uint64_t v30 = v43;
    unint64_t v31 = v44;
    uint64_t v33 = v39;
    unint64_t v32 = v40;
    sub_1DB073FA8(v39, v40, v43, v44);
    uint64_t v35 = v34;
    id v36 = sub_1DB072A88(v11, v34);
    sub_1DB042664(v30, v31);

    uint64_t result = sub_1DB042664(v33, v32);
    char v38 = v45;
    *(unsigned char *)a3 = 2;
    *(void *)(a3 + 8) = 4;
    *(unsigned char *)(a3 + 16) = v38;
    *(void *)(a3 + 24) = v33;
    *(void *)(a3 + 32) = v32;
    *(void *)(a3 + 40) = v11;
    *(void *)(a3 + 48) = v36;
    return result;
  }
LABEL_7:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

id SKANUTClient.blindedElement()()
{
  id result = objc_msgSend(*(id *)(v0 + 48), sel_serializedPublicKey_, 1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_1DB0C4A08();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  char v10 = *(unsigned char *)v8;
  uint64_t v12 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_26;
      }
      uint64_t v12 = HIDWORD(a5) - (int)a5;
LABEL_6:
      uint64_t v48 = *(void **)(v8 + 40);
      unsigned __int8 v49 = *(unsigned char *)(v8 + 16);
      unint64_t v50 = *(void *)(v8 + 32);
      uint64_t v51 = *(void *)(v8 + 24);
      uint64_t v52 = *(void *)(v8 + 8);
      id v17 = self;
      sub_1DB0C4F38();
      sub_1DB07C914();
      sub_1DB0C4D78();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
      swift_dynamicCast();
      id v58 = v17;
      int64_t v18 = (int64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, v61);
      if (v18 < 0)
      {
        __break(1u);
        goto LABEL_23;
      }
      if (v18 + 0x4000000000000000 < 0)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v12 != 2 * v18)
      {
        sub_1DB07453C();
        swift_allocError();
        *uint64_t v34 = 0;
        swift_willThrow();
        return v17;
      }
      sub_1DB04239C(a5, a6);
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v19 = (uint64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, v60);
      if (v19 < 0) {
        goto LABEL_24;
      }
      unint64_t v46 = a4;
      uint64_t v47 = a5;
      char v45 = v10;
      sub_1DB05628C(v19, a5, a6, &v61);
      uint64_t v21 = v61;
      unint64_t v20 = (unint64_t)v62;
      int v59 = 0;
      sub_1DB04239C(v61, (unint64_t)v62);
      sub_1DB0C4D78();
      swift_dynamicCast();
      id v17 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v22 = (void *)sub_1DB0C49E8();
      id v23 = objc_msgSend(v17, sel_initWithData_inGroup_reduction_corecryptoError_, v22, v60, 0, &v59);
      sub_1DB042664(v21, v20);

      if (!v23)
      {
        int v35 = v59;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v36 = v35;
        *(unsigned char *)(v36 + 4) = 0;
        swift_willThrow();
        uint64_t v37 = v21;
        unint64_t v38 = v20;
LABEL_19:
        sub_1DB042664(v37, v38);
        return v17;
      }
      unint64_t v24 = v23;
      sub_1DB042664(v21, v20);
      sub_1DB04239C(v47, a6);
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v25 = (uint64_t)objc_msgSend(v58, sel_groupOrderByteCountForCP_, v60);
      if (v25 < 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
      }
      sub_1DB094810(v25, v47, a6, &v61);
      uint64_t v26 = v61;
      id v17 = v62;
      int v59 = 0;
      sub_1DB04239C(v61, (unint64_t)v62);
      sub_1DB0C4D78();
      swift_dynamicCast();
      uint64_t v27 = v60;
      id v28 = objc_allocWithZone(MEMORY[0x1E4F5E4F8]);
      unint64_t v29 = (void *)sub_1DB0C49E8();
      id v30 = objc_msgSend(v28, sel_initWithData_inGroup_reduction_corecryptoError_, v29, v27, 0, &v59);
      sub_1DB042664(v26, (unint64_t)v17);

      if (!v30)
      {
        int v39 = v59;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v40 = v39;
        *(unsigned char *)(v40 + 4) = 0;
        swift_willThrow();

        uint64_t v37 = v26;
        unint64_t v38 = (unint64_t)v17;
        goto LABEL_19;
      }
      sub_1DB042664(v26, (unint64_t)v17);
      id v31 = v24;
      id v32 = v30;
      id v17 = (id)a8;
      sub_1DB04239C(a7, a8);
      id v33 = sub_1DB0677F8();
      if (v9)
      {
        sub_1DB042664(a7, a8);
      }
      else
      {
        unint64_t v42 = v33;
        sub_1DB042664(a7, a8);
        sub_1DB04239C(a3, v46);
        id v43 = sub_1DB0677F8();
        sub_1DB042664(a3, v46);
        id v44 = v48;
        id v17 = (id)sub_1DB071DD0(v51, v50, a1, a2, v44, v43, v31, v32, v42, v45, v52, v49);
      }
      return v17;
    case 2uLL:
      uint64_t v14 = *(void *)(a5 + 16);
      uint64_t v13 = *(void *)(a5 + 24);
      uint64_t v12 = v13 - v14;
      if (!__OFSUB__(v13, v14)) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v12 = BYTE6(a6);
      goto LABEL_6;
  }
}

id SKANUTTestServer.init()@<X0>(uint64_t a1@<X8>)
{
  sub_1DB0C4F38();
  sub_1DB07C914();
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v3);
  if (result)
  {
    *(unsigned char *)a1 = 2;
    *(void *)(a1 + 8) = 4;
    *(void *)(a1 + 16) = result;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SKANUTTestServer.publicKey()()
{
  uint64_t v1 = sub_1DB0C4E68();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v5 = *(void **)(v0 + 16);
  sub_1DB0C4F38();
  sub_1DB07C914();
  id v6 = v5;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F0]), sel_initWithGeneratorForCP_, v17[1]);
  id v8 = sub_1DB072A88((uint64_t)v6, v7);

  id v9 = objc_msgSend(v8, sel_serializedPublicKey_, 1);
  if (v9)
  {
    char v10 = v9;
    uint64_t v11 = sub_1DB0C4A08();
    uint64_t v13 = v12;

    uint64_t v17[2] = v11;
    v17[3] = v13;
    uint64_t v14 = sub_1DB0C4E58();
    uint64_t v15 = MEMORY[0x1E0187D50](v14);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v15;
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t SKANUTTestServer.evaluate(blindedElement:publicInput:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  int v10 = *v4;
  uint64_t v11 = *((void *)v4 + 1);
  int v39 = (void *)*((void *)v4 + 2);
  char v12 = v4[24];
  sub_1DB04239C(a1, a2);
  id v13 = sub_1DB0677F8();
  sub_1DB042664(a1, a2);
  if (v5) {
    return (uint64_t)v13;
  }
  char v36 = v12;
  unint64_t v38 = v13;
  sub_1DB0C4F38();
  sub_1DB07C914();
  id v14 = v39;
  sub_1DB0C4D78();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFA0);
  swift_dynamicCast();
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E4F8]), sel_initWithRandomScalarInGroup_, v43);
  if (!v15)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v13 = v15;
  if (v10 == 1) {
    char v16 = v36;
  }
  else {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    sub_1DB07453C();
    swift_allocError();
    unsigned char *v18 = 1;
    swift_willThrow();

    return (uint64_t)v13;
  }
  id v17 = sub_1DB091578(&v41, (char *)v38, a3, a4, v15, v10, v11, v14, v36);
  unint64_t v20 = v41;
  if (!v41) {
    goto LABEL_16;
  }
  uint64_t v21 = v17;
  unint64_t v22 = v42;

  id v23 = objc_msgSend(v20, sel_serializedBigEndianScalar);
  if (!v23) {
    goto LABEL_18;
  }
  unint64_t v24 = v23;
  uint64_t v40 = v20;
  uint64_t v25 = sub_1DB0C4A08();
  unint64_t v27 = v26;

  uint64_t v37 = v22;
  id v28 = objc_msgSend(v22, sel_serializedBigEndianScalar);
  if (!v28) {
    goto LABEL_18;
  }
  unint64_t v29 = v28;
  uint64_t v30 = sub_1DB0C4A08();
  unint64_t v32 = v31;

  uint64_t v41 = (void *)v25;
  unint64_t v42 = (void *)v27;
  unint64_t v35 = v27;
  sub_1DB04239C(v25, v27);
  sub_1DB04239C(v30, v32);
  sub_1DB05DEE8(v30, v32);
  sub_1DB042664(v30, v32);
  id v13 = v41;
  id v33 = objc_msgSend(v21, sel_serializedPublicKey_, 1);
  if (v33)
  {
    uint64_t v34 = v33;
    sub_1DB0C4A08();

    sub_1DB042664(v30, v32);
    sub_1DB042664(v25, v35);

    return (uint64_t)v13;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = sub_1DB0C5358();
  __break(1u);
  return result;
}

uint64_t SKANUTTestServer.verifyToken(token:publicInput:unblindedInput:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, unint64_t a6)
{
  uint64_t v14 = *((void *)v6 + 1);
  id v13 = (void *)*((void *)v6 + 2);
  char v15 = v6[24];
  int v16 = *v6;
  id v17 = v13;
  LOBYTE(v16) = sub_1DB0921A4(a5, a6, a1, a2, a3, a4, v16, v14, v17, v15);

  return v16 & 1;
}

void sub_1DB0A41A4(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_1DB05A7A4(a1, 2);
  }
  else if (a1 == 5 || a1 == 4 || a1 == 3)
  {
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB05C118(0x2DuLL, 0xE100000000000000);
  }
  else
  {
    sub_1DB0C5358();
    __break(1u);
  }
}

void destroy for SKANUTClient(uint64_t a1)
{
  sub_1DB042664(*(void *)(a1 + 24), *(void *)(a1 + 32));

  uint64_t v2 = *(void **)(a1 + 48);
}

uint64_t initializeWithCopy for SKANUTClient(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_1DB04239C(v4, v5);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  id v6 = *(void **)(a2 + 40);
  id v7 = *(void **)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  id v8 = v6;
  id v9 = v7;
  return a1;
}

uint64_t assignWithCopy for SKANUTClient(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_1DB04239C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  sub_1DB042664(v6, v7);
  id v8 = *(void **)(a2 + 40);
  id v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  id v10 = v8;

  uint64_t v11 = *(void **)(a2 + 48);
  char v12 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v11;
  id v13 = v11;

  return a1;
}

uint64_t assignWithTake for SKANUTClient(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1DB042664(v4, v5);

  uint64_t v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for SKANUTClient(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKANUTClient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKANUTClient()
{
  return &type metadata for SKANUTClient;
}

void destroy for SKANUTTestServer(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  unint64_t v7 = *(void **)(a2 + 32);
  id v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for SKANUTTestServer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for SKANUTTestServer()
{
  return &type metadata for SKANUTTestServer;
}

uint64_t sub_1DB0A467C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t result = _s13ClientSecretsVMa();
  if (v4 <= 0x3F)
  {
    uint64_t result = _s14KeyCommitmentsVMa();
    if (v5 <= 0x3F)
    {
      if (v2 > 0x3F)
      {
        return AssociatedTypeWitness;
      }
      else
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_1DB0A486C(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  int v4 = *(_DWORD *)(v2 + 80);
  uint64_t v5 = ((v3 + v4) & ~(unint64_t)v4) + v3;
  uint64_t v6 = swift_checkMetadataState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v4 | 7 | v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v10 + (v4 | 7);
  unint64_t v13 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8)
      + ((v12 + ((v10 + v8 + ((v10 + v8) & ~v8)) & ~v8)) & ~(v4 | 7))
      + 8;
  unint64_t v14 = ((v10 + v8 + ((v10 + v8 + ((v8 + 8 + ((v9 + v5) & ~v9) + v13) & ~v8)) & ~v8)) & ~v8) + v10;
  if (v9 != 7 || ((*(_DWORD *)(v7 + 80) | v4) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    unint64_t v31 = (uint64_t *)(v17 + ((v9 + 16) & ~v9));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v8;
    uint64_t v38 = ~(v4 | 7);
    unint64_t v35 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 16);
    uint64_t v36 = v12;
    uint64_t v33 = ~v9;
    uint64_t v34 = v6;
    unint64_t v39 = v13;
    uint64_t v40 = v8 + 8;
    uint64_t v37 = v3 + 7;
    v35(a1, a2, AssociatedTypeWitness);
    v35((uint64_t *)(((unint64_t)a1 + v3 + v4) & ~(unint64_t)v4), (uint64_t *)(((unint64_t)a2 + v3 + v4) & ~(unint64_t)v4), AssociatedTypeWitness);
    uint64_t v19 = ((unint64_t)a1 + v5 + 7) & v33;
    uint64_t v20 = ((unint64_t)a2 + v5 + 7) & v33;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v21(v19, v20, v34);
    v21((v11 + v19) & v18, (v11 + v20) & v18, v34);
    uint64_t v22 = (v11 + ((v11 + v20) & v18)) & v18;
    v21((v11 + ((v11 + v19) & v18)) & v18, v22, v34);
    uint64_t v23 = (v36 + v22) & v38;
    v35((uint64_t *)((v36 + ((v11 + ((v11 + v19) & v18)) & v18)) & v38), (uint64_t *)v23, AssociatedTypeWitness);
    *(void *)((v37 + ((v36 + ((v11 + ((v11 + v19) & v18)) & v18)) & v38)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v37 + v23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v24 = v39 + v20;
    *(void *)(v39 + v19) = *(void *)(v39 + v20);
    uint64_t v25 = (v40 + v39 + v19) & v18;
    unint64_t v26 = (v40 + v24) & v18;
    sub_1DB0C5188();
    v21(v25, v26, v34);
    uint64_t v27 = (v11 + v25) & v18;
    uint64_t v28 = (v11 + v26) & v18;
    v21(v27, v28, v34);
    uint64_t v29 = (v11 + v27) & v18;
    uint64_t v30 = (v11 + v28) & v18;
    unint64_t v31 = a1;
    v21(v29, v30, v34);
  }
  return v31;
}

uint64_t sub_1DB0A4CAC(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v4 = v3 + 8;
  v19(a1, AssociatedTypeWitness);
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = v5 + a1;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 72);
  v19((v5 + a1 + v7) & ~v7, AssociatedTypeWitness);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v20 = *(void (**)(unint64_t, uint64_t))(v10 + 8);
  uint64_t v21 = v10 + 8;
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  v7 |= 7uLL;
  unint64_t v12 = (v6 + v8 + (v7 | v11)) & ~(v7 | v11);
  v20(v12, v9);
  uint64_t v13 = *(void *)(v21 + 56);
  uint64_t v14 = v13 + v11;
  v20((v13 + v11 + v12) & ~v11, v9);
  unint64_t v15 = (v13 + v11 + ((v13 + v11 + v12) & ~v11)) & ~v11;
  v20(v15, v9);
  uint64_t v16 = v13 + v7;
  v19((v16 + v15) & ~v7, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  v20((v12 + v11 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v16 + ((v14 + (v14 & ~v11)) & ~v11)) & ~v7) + 16) & ~v11, v9);
  unint64_t v17 = (v14
       + ((v12 + v11 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v16 + ((v14 + (v14 & ~v11)) & ~v11)) & ~v7) + 16) & ~v11)) & ~v11;
  v20(v17, v9);
  return ((uint64_t (*)(unint64_t, uint64_t))v20)((v14 + v17) & ~v11, v9);
}

uint64_t sub_1DB0A4F78(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v43 = AssociatedTypeWitness;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = v6;
  unint64_t v42 = v6;
  uint64_t v9 = *(void *)(v7 + 48);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v11 = v9 + v10;
  uint64_t v12 = v9;
  uint64_t v41 = v9;
  uint64_t v44 = a1;
  v8((v9 + v10 + a1) & ~v10, (v9 + v10 + a2) & ~v10, AssociatedTypeWitness);
  uint64_t v13 = (v11 & ~v10) + v12;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  uint64_t v17 = v15 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  v10 |= 7uLL;
  uint64_t v19 = (v10 | v18) + v13;
  uint64_t v20 = (v19 + a1) & ~(v10 | v18);
  uint64_t v21 = (v19 + a2) & ~(v10 | v18);
  uint64_t v39 = v21;
  uint64_t v40 = v20;
  v16(v20, v21, v14);
  uint64_t v22 = *(void *)(v17 + 48);
  uint64_t v23 = v22 + v18;
  uint64_t v24 = (v22 + v18 + v20) & ~v18;
  uint64_t v25 = (v22 + v18 + v21) & ~v18;
  v16(v24, v25, v14);
  uint64_t v26 = (v22 + v18 + v24) & ~v18;
  uint64_t v27 = (v22 + v18 + v25) & ~v18;
  v16(v26, v27, v14);
  uint64_t v28 = v22 + v10;
  uint64_t v29 = (v28 + v26) & ~v10;
  uint64_t v30 = (v28 + v27) & ~v10;
  v42(v29, v30, v43);
  *(void *)((v41 + 7 + v29) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v41 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = ((v41 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v28 + ((v23 + (v23 & ~v18)) & ~v18)) & ~v10) + 8;
  unint64_t v32 = (void *)(v31 + v40);
  uint64_t v33 = (void *)(v31 + v39);
  *unint64_t v32 = *v33;
  uint64_t v34 = ((unint64_t)v32 + v18 + 8) & ~v18;
  uint64_t v35 = ((unint64_t)v33 + v18 + 8) & ~v18;
  sub_1DB0C5188();
  v16(v34, v35, v14);
  uint64_t v36 = (v23 + v34) & ~v18;
  uint64_t v37 = (v23 + v35) & ~v18;
  v16(v36, v37, v14);
  v16((v23 + v36) & ~v18, (v23 + v37) & ~v18, v14);
  return v44;
}

uint64_t sub_1DB0A52B4(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  uint64_t v42 = AssociatedTypeWitness;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = v6;
  uint64_t v41 = v6;
  uint64_t v9 = *(void *)(v7 + 40);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v11 = v9 + v10;
  uint64_t v12 = v9;
  uint64_t v40 = v9;
  uint64_t v13 = a1;
  uint64_t v43 = a1;
  v8((v9 + v10 + a1) & ~v10, (v9 + v10 + a2) & ~v10, AssociatedTypeWitness);
  uint64_t v14 = (v11 & ~v10) + v12;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  uint64_t v18 = v16 + 24;
  uint64_t v19 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = v10 | 7;
  uint64_t v21 = v10 | 7 | v19;
  uint64_t v39 = (v21 + v14 + v13) & ~v21;
  uint64_t v38 = (v21 + v14 + a2) & ~v21;
  v17(v39, v38, v15);
  uint64_t v22 = *(void *)(v18 + 40);
  uint64_t v23 = v22 + v19;
  uint64_t v24 = (v22 + v19 + v39) & ~v19;
  uint64_t v25 = (v22 + v19 + v38) & ~v19;
  v17(v24, v25, v15);
  uint64_t v26 = (v22 + v19 + v24) & ~v19;
  uint64_t v27 = (v22 + v19 + v25) & ~v19;
  v17(v26, v27, v15);
  uint64_t v28 = (v22 + v20 + v26) & ~v20;
  uint64_t v29 = (v22 + v20 + v27) & ~v20;
  v41(v28, v29, v42);
  *(void *)((v40 + 7 + v28) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v40 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  unint64_t v30 = ((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v22 + v20 + ((v23 + (v23 & ~v19)) & ~v19)) & ~v20) + 8;
  unint64_t v31 = (void *)(v30 + v39);
  unint64_t v32 = (void *)(v30 + v38);
  *unint64_t v31 = *v32;
  uint64_t v33 = ((unint64_t)v31 + v19 + 8) & ~v19;
  uint64_t v34 = ((unint64_t)v32 + v19 + 8) & ~v19;
  v17(v33, v34, v15);
  uint64_t v35 = (v23 + v33) & ~v19;
  uint64_t v36 = (v23 + v34) & ~v19;
  v17(v35, v36, v15);
  v17((v23 + v35) & ~v19, (v23 + v36) & ~v19, v15);
  return v43;
}

uint64_t sub_1DB0A5608(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v43 = AssociatedTypeWitness;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = v6;
  uint64_t v42 = v6;
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v11 = v9 + v10;
  uint64_t v12 = v9;
  uint64_t v41 = v9;
  uint64_t v44 = a1;
  v8((v9 + v10 + a1) & ~v10, (v9 + v10 + a2) & ~v10, AssociatedTypeWitness);
  uint64_t v13 = (v11 & ~v10) + v12;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  uint64_t v17 = v15 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  v10 |= 7uLL;
  uint64_t v19 = (v10 | v18) + v13;
  uint64_t v20 = (v19 + a1) & ~(v10 | v18);
  uint64_t v21 = (v19 + a2) & ~(v10 | v18);
  uint64_t v39 = v21;
  uint64_t v40 = v20;
  v16(v20, v21, v14);
  uint64_t v22 = *(void *)(v17 + 32);
  uint64_t v23 = v22 + v18;
  uint64_t v24 = (v22 + v18 + v20) & ~v18;
  uint64_t v25 = (v22 + v18 + v21) & ~v18;
  v16(v24, v25, v14);
  uint64_t v26 = (v22 + v18 + v24) & ~v18;
  uint64_t v27 = (v22 + v18 + v25) & ~v18;
  v16(v26, v27, v14);
  uint64_t v28 = v22 + v10;
  uint64_t v29 = (v28 + v26) & ~v10;
  uint64_t v30 = (v28 + v27) & ~v10;
  v42(v29, v30, v43);
  *(void *)((v41 + 7 + v29) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v41 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = ((v41 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v28 + ((v23 + (v23 & ~v18)) & ~v18)) & ~v10) + 8;
  unint64_t v32 = (void *)(v31 + v40);
  uint64_t v33 = (void *)(v31 + v39);
  *unint64_t v32 = *v33;
  uint64_t v34 = ((unint64_t)v32 + v18 + 8) & ~v18;
  uint64_t v35 = ((unint64_t)v33 + v18 + 8) & ~v18;
  v16(v34, v35, v14);
  uint64_t v36 = (v23 + v34) & ~v18;
  uint64_t v37 = (v23 + v35) & ~v18;
  v16(v36, v37, v14);
  v16((v23 + v36) & ~v18, (v23 + v37) & ~v18, v14);
  return v44;
}

uint64_t sub_1DB0A5940(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v43 = AssociatedTypeWitness;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = v6;
  uint64_t v42 = v6;
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v11 = v9 + v10;
  uint64_t v12 = v9;
  uint64_t v41 = v9;
  uint64_t v44 = a1;
  v8((v9 + v10 + a1) & ~v10, (v9 + v10 + a2) & ~v10, AssociatedTypeWitness);
  uint64_t v13 = (v11 & ~v10) + v12;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  uint64_t v17 = v15 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  v10 |= 7uLL;
  uint64_t v19 = (v10 | v18) + v13;
  uint64_t v20 = (v19 + a1) & ~(v10 | v18);
  uint64_t v21 = (v19 + a2) & ~(v10 | v18);
  uint64_t v39 = v21;
  uint64_t v40 = v20;
  v16(v20, v21, v14);
  uint64_t v22 = *(void *)(v17 + 24);
  uint64_t v23 = v22 + v18;
  uint64_t v24 = (v22 + v18 + v20) & ~v18;
  uint64_t v25 = (v22 + v18 + v21) & ~v18;
  v16(v24, v25, v14);
  uint64_t v26 = (v22 + v18 + v24) & ~v18;
  uint64_t v27 = (v22 + v18 + v25) & ~v18;
  v16(v26, v27, v14);
  uint64_t v28 = v22 + v10;
  uint64_t v29 = (v28 + v26) & ~v10;
  uint64_t v30 = (v28 + v27) & ~v10;
  v42(v29, v30, v43);
  *(void *)((v41 + 7 + v29) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v41 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  unint64_t v31 = ((v41 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v28 + ((v23 + (v23 & ~v18)) & ~v18)) & ~v10) + 8;
  unint64_t v32 = (void *)(v31 + v40);
  uint64_t v33 = (void *)(v31 + v39);
  *unint64_t v32 = *v33;
  uint64_t v34 = ((unint64_t)v32 + v18 + 8) & ~v18;
  uint64_t v35 = ((unint64_t)v33 + v18 + 8) & ~v18;
  v16(v34, v35, v14);
  uint64_t v36 = (v23 + v34) & ~v18;
  uint64_t v37 = (v23 + v35) & ~v18;
  v16(v36, v37, v14);
  v16((v23 + v36) & ~v18, (v23 + v37) & ~v18, v14);
  return v44;
}

uint64_t sub_1DB0A5C80(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(swift_checkMetadataState() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v6;
  }
  if (v13 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= v6) {
    unsigned int v15 = v6;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v8 > v15) {
    unsigned int v15 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = ((v9 + v10) & ~v10) + v9;
  uint64_t v17 = v10 | 7;
  uint64_t v18 = v17 | v11;
  uint64_t v19 = v16 + (v17 | v11);
  uint64_t v20 = v12 + v11;
  uint64_t v21 = v17 + v12;
  uint64_t v22 = v9 + 7;
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + ((v17 + v12 + ((v12 + v11 + ((v12 + v11) & ~v11)) & ~v11)) & ~v17) + 8;
  uint64_t v24 = v11 + 8;
  if (a2 > v15)
  {
    uint64_t v25 = ((v20 + ((v20 + ((v24 + (v19 & ~v18) + v23) & ~v11)) & ~v11)) & ~v11) + v12;
    char v26 = 8 * v25;
    if (v25 > 3) {
      goto LABEL_15;
    }
    unsigned int v29 = ((a2 - v15 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v29))
    {
      int v27 = *(_DWORD *)((char *)a1 + v25);
      if (!v27) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v29 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)((char *)a1 + v25);
      if (!*(unsigned __int16 *)((char *)a1 + v25)) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v29 >= 2)
    {
LABEL_15:
      int v27 = *((unsigned __int8 *)a1 + v25);
      if (!*((unsigned char *)a1 + v25)) {
        goto LABEL_33;
      }
LABEL_23:
      int v30 = (v27 - 1) << v26;
      if (v25 > 3) {
        int v30 = 0;
      }
      if (v25)
      {
        if (v25 <= 3) {
          int v31 = v25;
        }
        else {
          int v31 = 4;
        }
        switch(v31)
        {
          case 2:
            int v32 = *a1;
            break;
          case 3:
            int v32 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v32 = *(_DWORD *)a1;
            break;
          default:
            int v32 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v32 = 0;
      }
      return v15 + (v32 | v30) + 1;
    }
  }
LABEL_33:
  if (v6 == v15)
  {
    uint64_t v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v34 = a1;
LABEL_35:
    return v33(v34, v6, AssociatedTypeWitness);
  }
  uint64_t v35 = ~v11;
  unint64_t v36 = ((unint64_t)a1 + v19) & ~v18;
  if (v14 != v15)
  {
    unint64_t v36 = (v24 + v36 + v23) & v35;
    goto LABEL_43;
  }
  if (v8 >= v13)
  {
LABEL_43:
    uint64_t v37 = *(uint64_t (**)(unint64_t))(v7 + 48);
    return v37(v36);
  }
  uint64_t v34 = (unsigned __int16 *)((v21 + ((v20 + ((v20 + v36) & v35)) & v35)) & ~v17);
  if (v6 >= 0x7FFFFFFF)
  {
    uint64_t v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
    goto LABEL_35;
  }
  unint64_t v38 = *(void *)(((unint64_t)v34 + v22) & 0xFFFFFFFFFFFFFFF8);
  if (v38 >= 0xFFFFFFFF) {
    LODWORD(v38) = -1;
  }
  return (v38 + 1);
}

void sub_1DB0A60B8(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_checkMetadataState() - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v8;
  }
  if (v15 <= v10) {
    unsigned int v16 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v16 = v15;
  }
  if (v16 <= v8) {
    unsigned int v17 = v8;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v10 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v19 = v12 | 7;
  uint64_t v20 = v12 | 7 | v13;
  uint64_t v21 = ((v11 + v12) & ~v12) + v11 + v20;
  uint64_t v22 = v14 + v13;
  uint64_t v23 = v19 + v14;
  uint64_t v24 = v11 + 7;
  size_t v25 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v26 = ((v19 + v14 + ((v14 + v13 + ((v14 + v13) & ~v13)) & ~v13)) & ~v19) + v25;
  uint64_t v27 = v13 + 8;
  size_t v28 = ((v14 + v13 + ((v14 + v13 + ((v13 + 8 + (v21 & ~v20) + v26) & ~v13)) & ~v13)) & ~v13) + v14;
  if (a3 <= v18)
  {
    int v29 = 0;
  }
  else if (v28 <= 3)
  {
    unsigned int v34 = ((a3 - v18 + ~(-1 << (8 * v28))) >> (8 * v28)) + 1;
    if (HIWORD(v34))
    {
      int v29 = 4;
    }
    else if (v34 >= 0x100)
    {
      int v29 = 2;
    }
    else
    {
      int v29 = v34 > 1;
    }
  }
  else
  {
    int v29 = 1;
  }
  if (v18 < a2)
  {
    unsigned int v30 = ~v18 + a2;
    if (v28 < 4)
    {
      int v31 = (v30 >> (8 * v28)) + 1;
      if (v28)
      {
        int v35 = v30 & ~(-1 << (8 * v28));
        bzero(a1, v28);
        if (v28 == 3)
        {
          *(_WORD *)a1 = v35;
          a1[2] = BYTE2(v35);
        }
        else if (v28 == 2)
        {
          *(_WORD *)a1 = v35;
        }
        else
        {
          *a1 = v35;
        }
      }
    }
    else
    {
      bzero(a1, v28);
      *(_DWORD *)a1 = v30;
      int v31 = 1;
    }
    switch(v29)
    {
      case 1:
        a1[v28] = v31;
        return;
      case 2:
        *(_WORD *)&a1[v28] = v31;
        return;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)&a1[v28] = v31;
        return;
      default:
        return;
    }
  }
  uint64_t v32 = ~v13;
  uint64_t v33 = ~v19;
  switch(v29)
  {
    case 1:
      a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_61:
      __break(1u);
      JUMPOUT(0x1DB0A657CLL);
    case 4:
      *(_DWORD *)&a1[v28] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (!a2) {
        return;
      }
LABEL_33:
      if (v8 == v18) {
        goto LABEL_34;
      }
      unint64_t v37 = (unint64_t)&a1[v21] & ~v20;
      if (v16 != v18)
      {
        unint64_t v37 = (v27 + v37 + v26) & v32;
        goto LABEL_46;
      }
      if (v10 >= v15)
      {
LABEL_46:
        uint64_t v39 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
        v39(v37, a2);
        return;
      }
      a1 = (unsigned char *)((v23 + ((v22 + ((v22 + v37) & v32)) & v32)) & v33);
      if (v15 >= a2)
      {
        if (v8 >= 0x7FFFFFFF)
        {
LABEL_34:
          unint64_t v36 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v36(a1, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v40 = (void *)((unint64_t)&a1[v24] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v41 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v41 = (a2 - 1);
          }
          void *v40 = v41;
        }
      }
      else if (v25)
      {
        int v38 = ~v15 + a2;
        bzero((void *)((v23 + ((v22 + ((v22 + v37) & v32)) & v32)) & v33), v25);
        *(_DWORD *)a1 = v38;
      }
      return;
  }
}

uint64_t _s6ClientVMa_1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s13ClientSecretsVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB0A65D4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1DB0A6664(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    unsigned int v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t sub_1DB0A6770(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8) + 8;
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, v3);
  unint64_t v4 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v6 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 72);
  return v7(v4, v3);
}

unint64_t sub_1DB0A680C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), v5);
  return a1;
}

unint64_t sub_1DB0A68A0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), v5);
  return a1;
}

unint64_t sub_1DB0A6934(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = v6 + 32;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), v5);
  return a1;
}

unint64_t sub_1DB0A69C8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  uint64_t v8 = v6 + 40;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), v5);
  return a1;
}

uint64_t sub_1DB0A6A5C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void sub_1DB0A6BC8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1DB0A6DF0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *sub_1DB0A6E18(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_1DB04239C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_1DB04239C(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    uint64_t v11 = a2[5];
    unint64_t v12 = a2[6];
    sub_1DB04239C(v11, v12);
    v4[5] = v11;
    v4[6] = v12;
    uint64_t v13 = a2[7];
    unint64_t v14 = a2[8];
    sub_1DB04239C(v13, v14);
    v4[7] = v13;
    v4[8] = v14;
    uint64_t v15 = a3[10];
    unsigned int v16 = (char *)v4 + v15;
    unsigned int v17 = (char *)a2 + v15;
    uint64_t v18 = sub_1DB0C4AB8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[11];
    uint64_t v20 = a3[12];
    uint64_t v21 = (char *)v4 + v19;
    uint64_t v22 = (char *)a2 + v19;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = (char *)v4 + v20;
    uint64_t v24 = (uint64_t *)((char *)a2 + v20);
    unint64_t v25 = *(uint64_t *)((char *)a2 + v20 + 8);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v27 = *v24;
      sub_1DB04239C(*v24, v25);
      *(void *)uint64_t v23 = v27;
      *((void *)v23 + 1) = v25;
    }
  }
  return v4;
}

uint64_t sub_1DB0A6F98(uint64_t a1, uint64_t a2)
{
  sub_1DB042664(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_1DB042664(*(void *)(a1 + 24), *(void *)(a1 + 32));
  sub_1DB042664(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_1DB042664(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_1DB0C4AB8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 48));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return sub_1DB042664(v9, v8);
  }
  return result;
}

void *sub_1DB0A7064(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  sub_1DB04239C(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_1DB04239C(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  uint64_t v10 = a2[5];
  unint64_t v11 = a2[6];
  sub_1DB04239C(v10, v11);
  a1[5] = v10;
  a1[6] = v11;
  uint64_t v12 = a2[7];
  unint64_t v13 = a2[8];
  sub_1DB04239C(v12, v13);
  a1[7] = v12;
  a1[8] = v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  unsigned int v16 = (char *)a2 + v14;
  uint64_t v17 = sub_1DB0C4AB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = a3[12];
  uint64_t v20 = (char *)a1 + v18;
  uint64_t v21 = (char *)a2 + v18;
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  uint64_t v22 = (char *)a1 + v19;
  uint64_t v23 = (void *)((char *)a2 + v19);
  unint64_t v24 = *(void *)((char *)a2 + v19 + 8);
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v25 = *v23;
    sub_1DB04239C(*v23, v24);
    *(void *)uint64_t v22 = v25;
    *((void *)v22 + 1) = v24;
  }
  return a1;
}

uint64_t sub_1DB0A7194(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_1DB04239C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_1DB042664(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_1DB04239C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_1DB042664(v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_1DB04239C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_1DB042664(v16, v17);
  uint64_t v18 = *(void *)(a2 + 56);
  unint64_t v19 = *(void *)(a2 + 64);
  sub_1DB04239C(v18, v19);
  uint64_t v20 = *(void *)(a1 + 56);
  unint64_t v21 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  sub_1DB042664(v20, v21);
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  uint64_t v26 = a3[11];
  uint64_t v27 = a1 + v26;
  size_t v28 = (int *)(a2 + v26);
  int v29 = *v28;
  *(unsigned char *)(v27 + 4) = *((unsigned char *)v28 + 4);
  *(_DWORD *)uint64_t v27 = v29;
  uint64_t v30 = a3[12];
  int v31 = (uint64_t *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  unint64_t v33 = *(void *)(a2 + v30 + 8);
  if (*(void *)(a1 + v30 + 8) >> 60 != 15)
  {
    if (v33 >> 60 != 15)
    {
      uint64_t v35 = *v32;
      sub_1DB04239C(v35, v33);
      uint64_t v36 = *v31;
      unint64_t v37 = v31[1];
      *int v31 = v35;
      v31[1] = v33;
      sub_1DB042664(v36, v37);
      return a1;
    }
    sub_1DB0A7334((uint64_t)v31);
    goto LABEL_6;
  }
  if (v33 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)int v31 = *(_OWORD *)v32;
    return a1;
  }
  uint64_t v34 = *v32;
  sub_1DB04239C(v34, v33);
  *int v31 = v34;
  v31[1] = v33;
  return a1;
}

uint64_t sub_1DB0A7334(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB0A7388(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = a3[10];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1DB0C4AB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = a3[12];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

void *sub_1DB0A7458(void *a1, uint64_t a2, int *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1DB042664(v6, v7);
  uint64_t v8 = a1[3];
  unint64_t v9 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_1DB042664(v8, v9);
  uint64_t v10 = a1[5];
  unint64_t v11 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  sub_1DB042664(v10, v11);
  uint64_t v12 = a1[7];
  unint64_t v13 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  sub_1DB042664(v12, v13);
  uint64_t v14 = a3[10];
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_1DB0C4AB8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = a3[12];
  uint64_t v20 = (char *)a1 + v18;
  uint64_t v21 = a2 + v18;
  v20[4] = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  uint64_t v22 = (void *)((char *)a1 + v19);
  uint64_t v23 = (uint64_t *)(a2 + v19);
  unint64_t v24 = *(void *)((char *)a1 + v19 + 8);
  if (v24 >> 60 != 15)
  {
    unint64_t v25 = v23[1];
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = *v22;
      *uint64_t v22 = *v23;
      v22[1] = v25;
      sub_1DB042664(v26, v24);
      return a1;
    }
    sub_1DB0A7334((uint64_t)v22);
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  return a1;
}

uint64_t sub_1DB0A7590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1DB0A75A4);
}

uint64_t sub_1DB0A75A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_1DB0C4AB8();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1DB0A7660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1DB0A7674);
}

uint64_t sub_1DB0A7674(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_1DB0C4AB8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CryptoKitSecretSharing_SecretShare()
{
  uint64_t result = qword_1EA8FEAF8;
  if (!qword_1EA8FEAF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1DB0A7770()
{
  uint64_t result = sub_1DB0C4AB8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1DB0A7830()
{
  uint64_t v0 = sub_1DB0C4C68();
  __swift_allocate_value_buffer(v0, qword_1EA9034D8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA9034D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7E8);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE7F0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1DB0C8630;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "version";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = sub_1DB0C4C48();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "share_x";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "share_y";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)unint64_t v13 = "threshold";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  unint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)unint64_t v15 = "iv";
  *((void *)v15 + 1) = 2;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "ciphertext";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 7;
  *(void *)uint64_t v19 = "tag";
  *((void *)v19 + 1) = 3;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "associated_data";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  return sub_1DB0C4C58();
}

uint64_t sub_1DB0A7B74()
{
  uint64_t result = sub_1DB0C4B18();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          sub_1DB0C4B78();
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          sub_1DB0C4B58();
          break;
        case 4:
          type metadata accessor for CryptoKitSecretSharing_SecretShare();
          sub_1DB0C4B68();
          break;
        case 8:
          type metadata accessor for CryptoKitSecretSharing_SecretShare();
          sub_1DB0C4B48();
          break;
        default:
          break;
      }
      uint64_t result = sub_1DB0C4B18();
    }
  }
  return result;
}

uint64_t sub_1DB0A7D10()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_1DB0C4C28(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4) || (uint64_t result = sub_1DB0C4C28(), !v1))
    {
      uint64_t v3 = *(void *)(v0 + 8);
      unint64_t v4 = *(void *)(v0 + 16);
      switch(v4 >> 62)
      {
        case 1uLL:
          if ((int)v3 != v3 >> 32) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 2uLL:
          if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_12;
        default:
          if ((v4 & 0xFF000000000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          uint64_t result = sub_1DB0C4C18();
          if (!v1)
          {
LABEL_12:
            uint64_t result = sub_1DB0A7FFC(v0);
            if (!v1)
            {
              uint64_t v5 = *(void *)(v0 + 24);
              unint64_t v6 = *(void *)(v0 + 32);
              switch(v6 >> 62)
              {
                case 1uLL:
                  if ((int)v5 != v5 >> 32) {
                    goto LABEL_20;
                  }
                  break;
                case 2uLL:
                  if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                    goto LABEL_20;
                  }
                  break;
                case 3uLL:
                  break;
                default:
                  if ((v6 & 0xFF000000000000) != 0) {
LABEL_20:
                  }
                    sub_1DB0C4C18();
                  break;
              }
              uint64_t v7 = *(void *)(v0 + 40);
              unint64_t v8 = *(void *)(v0 + 48);
              switch(v8 >> 62)
              {
                case 1uLL:
                  uint64_t v9 = (int)v7;
                  uint64_t v10 = v7 >> 32;
                  goto LABEL_26;
                case 2uLL:
                  uint64_t v9 = *(void *)(v7 + 16);
                  uint64_t v10 = *(void *)(v7 + 24);
LABEL_26:
                  if (v9 != v10) {
                    goto LABEL_27;
                  }
                  goto LABEL_28;
                case 3uLL:
                  goto LABEL_28;
                default:
                  if ((v8 & 0xFF000000000000) == 0) {
                    goto LABEL_28;
                  }
LABEL_27:
                  sub_1DB0C4C18();
LABEL_28:
                  uint64_t v11 = *(void *)(v0 + 56);
                  unint64_t v12 = *(void *)(v0 + 64);
                  switch(v12 >> 62)
                  {
                    case 1uLL:
                      uint64_t v13 = (int)v11;
                      uint64_t v14 = v11 >> 32;
                      goto LABEL_33;
                    case 2uLL:
                      uint64_t v13 = *(void *)(v11 + 16);
                      uint64_t v14 = *(void *)(v11 + 24);
LABEL_33:
                      if (v13 != v14) {
                        goto LABEL_34;
                      }
                      goto LABEL_35;
                    case 3uLL:
                      goto LABEL_35;
                    default:
                      if ((v12 & 0xFF000000000000) == 0) {
                        goto LABEL_35;
                      }
LABEL_34:
                      sub_1DB0C4C18();
LABEL_35:
                      sub_1DB0A8074(v0);
                      type metadata accessor for CryptoKitSecretSharing_SecretShare();
                      uint64_t result = sub_1DB0C4A98();
                      break;
                  }
                  break;
              }
            }
          }
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1DB0A7FFC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return sub_1DB0C4C28();
  }
  return result;
}

uint64_t sub_1DB0A8074(uint64_t a1)
{
  uint64_t result = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  uint64_t v3 = a1 + *(int *)(result + 48);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    sub_1DB04239C(*(void *)v3, *(void *)(v3 + 8));
    sub_1DB0C4C18();
    return sub_1DB069BB4(v5, v4);
  }
  return result;
}

double sub_1DB0A8114@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_1DB0C9690;
  *(_OWORD *)(a2 + 32) = xmmword_1DB0C9690;
  *(_OWORD *)(a2 + 48) = xmmword_1DB0C9690;
  *(void *)(a2 + 64) = 0xC000000000000000;
  sub_1DB0C4AA8();
  uint64_t v4 = *(int *)(a1 + 48);
  uint64_t v5 = a2 + *(int *)(a1 + 44);
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_1DB0C96A0;
  return result;
}

unint64_t sub_1DB0A8180()
{
  return 0xD000000000000022;
}

uint64_t sub_1DB0A819C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1DB0A820C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = sub_1DB0C4AB8();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1DB0A827C())()
{
  return nullsub_1;
}

uint64_t sub_1DB0A82A0()
{
  return sub_1DB0A7B74();
}

uint64_t sub_1DB0A82B8()
{
  return sub_1DB0A7D10();
}

uint64_t sub_1DB0A82D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0A890C(&qword_1EA8FEB28, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1DB0A834C@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EA8FDDD8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1DB0C4C68();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EA9034D8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t sub_1DB0A83F4(uint64_t a1)
{
  uint64_t v2 = sub_1DB0A890C(&qword_1EA8FEB10, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  return MEMORY[0x1F4127378](a1, v2);
}

uint64_t sub_1DB0A8460()
{
  sub_1DB0A890C(&qword_1EA8FEB10, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  return sub_1DB0C4BD8();
}

uint64_t sub_1DB0A84E0()
{
  return sub_1DB0A890C(&qword_1EA8FEB08, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
}

uint64_t sub_1DB0A8528()
{
  return sub_1DB0A890C(&qword_1EA8FEB10, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
}

uint64_t sub_1DB0A8570()
{
  return sub_1DB0A890C(&qword_1EA8FEB18, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
}

uint64_t sub_1DB0A85B8()
{
  return sub_1DB0A890C(&qword_1EA8FEB20, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
}

uint64_t sub_1DB0A8600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DB0C4AB8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v28[-v9];
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || (sub_1DB059454(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) == 0)
  {
    goto LABEL_18;
  }
  uint64_t v11 = (int *)type metadata accessor for CryptoKitSecretSharing_SecretShare();
  uint64_t v12 = v11[11];
  uint64_t v13 = (_DWORD *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  unint64_t v15 = (_DWORD *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_18;
    }
  }
  if ((sub_1DB059454(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) == 0
    || (sub_1DB059454(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) == 0
    || (sub_1DB059454(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a2 + 56), *(void *)(a2 + 64)) & 1) == 0)
  {
    goto LABEL_18;
  }
  uint64_t v17 = v11[12];
  uint64_t v18 = *(void *)(a1 + v17);
  unint64_t v19 = *(void *)(a1 + v17 + 8);
  uint64_t v20 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  if (v19 >> 60 == 15)
  {
    if (v22 >> 60 == 15) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v22 >> 60 == 15)
  {
LABEL_17:
    uint64_t v23 = v18;
    sub_1DB067A4C(v18, v19);
    sub_1DB067A4C(v21, v22);
    sub_1DB069BB4(v23, v19);
    sub_1DB069BB4(v21, v22);
    goto LABEL_18;
  }
  uint64_t v30 = v18;
  sub_1DB067A4C(v18, v19);
  sub_1DB067A4C(v21, v22);
  int v29 = sub_1DB059454(v30, v19, v21, v22);
  sub_1DB069BB4(v21, v22);
  sub_1DB069BB4(v30, v19);
  if (v29)
  {
LABEL_21:
    uint64_t v26 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
    v26(v10, a1 + v11[10], v4);
    v26(v8, a2 + v11[10], v4);
    sub_1DB0A890C(&qword_1EA8FE808, MEMORY[0x1E4F70E60]);
    char v24 = sub_1DB0C5018();
    uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v27(v8, v4);
    v27(v10, v4);
    return v24 & 1;
  }
LABEL_18:
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_1DB0A890C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CryptoKitError.hash(into:)()
{
  if (*(unsigned char *)(v0 + 4) == 1) {
    return sub_1DB0C5488();
  }
  sub_1DB0C5488();
  return sub_1DB0C5498();
}

uint64_t CryptoKitError.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1DB0C5478();
  sub_1DB0C5488();
  if (v1 != 1) {
    sub_1DB0C5498();
  }
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0A8AFC()
{
  if (*(unsigned char *)(v0 + 4) == 1) {
    return sub_1DB0C5488();
  }
  sub_1DB0C5488();
  return sub_1DB0C5498();
}

uint64_t sub_1DB0A8BB0()
{
  int v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1DB0C5478();
  sub_1DB0C5488();
  if (v1 != 1) {
    sub_1DB0C5498();
  }
  return sub_1DB0C54A8();
}

BOOL static CryptoKitASN1Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CryptoKitASN1Error.hash(into:)()
{
  return sub_1DB0C5488();
}

uint64_t CryptoKitASN1Error.hashValue.getter()
{
  return sub_1DB0C54A8();
}

BOOL _s16CryptoKitPrivate0aB5ErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)a2;
  char v3 = *(unsigned char *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4) == 1)
  {
    switch(*(_DWORD *)a1)
    {
      case 1:
        if (v2 != 1) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if (v2 != 2) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if (v2 != 3) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if (v2 != 4) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if (v2 <= 4) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if (v2) {
          char v3 = 0;
        }
        if ((v3 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (*(unsigned char *)(a2 + 4) & 1) == 0 && *(_DWORD *)a1 == v2;
  }
  return result;
}

unint64_t sub_1DB0A8E00()
{
  unint64_t result = qword_1EA8FEB30;
  if (!qword_1EA8FEB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FEB30);
  }
  return result;
}

unint64_t sub_1DB0A8E58()
{
  unint64_t result = qword_1EA8FEB38;
  if (!qword_1EA8FEB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FEB38);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKitError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_1DB0A8F0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DB0A8F28(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitError()
{
  return &type metadata for CryptoKitError;
}

uint64_t getEnumTagSinglePayload for CryptoKitASN1Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CryptoKitASN1Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB0A90B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitASN1Error()
{
  return &type metadata for CryptoKitASN1Error;
}

size_t sub_1DB0A90EC(char a1)
{
  int v2 = v1;
  size_t v4 = _swift_stdlib_malloc_size(v2) - 32;
  uint64_t v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = v2[2];
  size_t v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v9 = __OFSUB__(v8, 1);
  size_t v10 = v8 - 1;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((unsigned char *)v2 + v7 + 32) = a1;
  uint64_t v11 = *v5 + 1;
  if (!__OFADD__(*v5, 1))
  {
    size_t result = swift_beginAccess();
    *uint64_t v5 = v11;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1DB0A91B8(const void *a1, size_t a2)
{
  int v3 = v2;
  size_t v6 = _swift_stdlib_malloc_size(v2) - 32;
  int64_t v7 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = v3[2];
  size_t v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v11 = __OFSUB__(v10, a2);
  size_t v12 = v10 - a2;
  if (v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v9)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!a1) {
    goto LABEL_8;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    size_t result = (size_t)memmove((char *)v3 + v9 + 32, a1, a2);
LABEL_8:
    if (!__OFADD__(*v7, a2))
    {
      *v7 += a2;
      return result;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1DB0A928C(int64_t a1, int64_t a2, size_t a3)
{
  size_t v4 = v3;
  size_t v8 = (char *)*v3 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  BOOL v11 = __OFSUB__(*v8, v10);
  int64_t v12 = *v8 - v10;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v4);
    if (result - 32 >= v13)
    {
      if (a2 >= a1) {
        return sub_1DB0A95D8(a1, a2, a3);
      }
      goto LABEL_26;
    }
  }
  if (v13 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v13))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v13)
  {
    unsigned int v14 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
    unsigned int v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    int v16 = v15 | HIWORD(v15);
    if (v16 == -1) {
      uint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v17 = (v16 + 1);
    }
  }
  else
  {
    uint64_t v17 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v17;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v18 = (const void *)result;
  unint64_t v19 = (char *)*v4;
  uint64_t result = swift_beginAccess();
  uint64_t v20 = *((void *)v19 + 2);
  if (v20 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1DB044DBC(v19, 0, a1);
  sub_1DB0A90EC(a3);
  sub_1DB044DBC((char *)*v4, a2, v20);
  *size_t v4 = v18;
  return swift_release();
}

uint64_t sub_1DB0A942C(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  uint64_t v5 = v4;
  int64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  BOOL v13 = __OFSUB__(*v10, v12);
  int64_t v14 = *v10 - v12;
  if (v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v15 = v14 + a4;
  if (__OFADD__(v14, a4))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_1DB0A96D8(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }
  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }
  else
  {
    uint64_t v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v20 = (const void *)result;
  uint64_t v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1DB044DBC(v21, 0, a1);
  sub_1DB0A91B8(a3, a4);
  sub_1DB044DBC((char *)*v5, a2, v22);
  *uint64_t v5 = v20;
  return swift_release();
}

size_t sub_1DB0A95D8(int64_t a1, int64_t a2, size_t a3)
{
  int64_t v7 = v3 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  int64_t v10 = v3[2];
  int64_t v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v13 = __OFSUB__(1, v9);
  uint64_t v14 = 1 - v9;
  if (v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1DB046CFC(a2, v10, v14);
  size_t result = sub_1DB0A98E8(a3, a1);
  uint64_t v15 = v3[2];
  uint64_t v16 = v15 + v14;
  if (!__OFADD__(v15, v14))
  {
    size_t result = swift_beginAccess();
    *int64_t v7 = v16;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1DB0A96D8(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  int64_t v9 = v4 + 2;
  size_t result = swift_beginAccess();
  int64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  int64_t v12 = v4[2];
  int64_t v13 = v12 - v11;
  if (__OFSUB__(v12, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int64_t v14 = v13 + a4;
  if (__OFADD__(v13, a4))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v15 = __OFSUB__(a4, v11);
  uint64_t v16 = a4 - v11;
  if (v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v12 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1DB046CFC(a2, v12, v16);
  size_t result = (size_t)sub_1DB0A995C(a3, a4, a1);
  uint64_t v17 = v4[2];
  uint64_t v18 = v17 + v16;
  if (!__OFADD__(v17, v16))
  {
    size_t result = swift_beginAccess();
    *int64_t v9 = v18;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1DB0A97E4(uint64_t a1)
{
  size_t result = swift_beginAccess();
  size_t v3 = *(void *)(a1 + 16);
  if (HIDWORD(v3))
  {
    __break(1u);
  }
  else
  {
    size_t v4 = (const void *)(a1 + 32);
    if (v3)
    {
      unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
      int v7 = v6 | HIWORD(v6);
      if (v7 == -1) {
        uint64_t v8 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v8 = (v7 + 1);
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    type metadata accessor for SecureBytes.Backing();
    int64_t v9 = (void *)swift_allocObject();
    v9[2] = 0;
    v9[3] = v8;
    _swift_stdlib_malloc_size(v9);
    memcpy(v9 + 4, v4, v3);
    swift_beginAccess();
    v9[2] = v3;
    size_t result = _swift_stdlib_malloc_size(v9);
    if ((uint64_t)(result - 32) >= (uint64_t)v3) {
      return (size_t)v9;
    }
  }
  __break(1u);
  return result;
}

size_t sub_1DB0A98E8(size_t result, int64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  int64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  char v5 = result;
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 >= a2)
  {
    size_t result = _swift_stdlib_malloc_size(v2);
    *((unsigned char *)v2 + a2 + 32) = v5;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void *sub_1DB0A995C(void *result, size_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  int v7 = v3;
  uint64_t v8 = result;
  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if ((uint64_t)result - 32 < v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if (!v8) {
    return result;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  return memmove(&v7[a3 + 32], v8, a2);
}

uint64_t sub_1DB0A9A18()
{
  uint64_t result = cckem_kyber768();
  if (result) {
    qword_1EA8FEB40 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v7 = cckem_sizeof_pub_ctx();
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v8 = sub_1DB0AAE14(v10, sub_1DB0A9B94);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1DB0A9B50(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = *a1;
  if (result) {
    return sub_1DB0A9C90(result, a3, a2, a4, a5, a6, &v7);
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB0A9B94(uint64_t *a1, void *a2)
{
  return sub_1DB0A9B50(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_1DB0A9BB4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  cckem_pub_ctx_init();
  uint64_t result = cckem_import_pubkey();
  if (result)
  {
    int v7 = result;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    *a3 = a4;
  }
  return result;
}

uint64_t sub_1DB0A9C90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v11 = cckem_pub_ctx_init();
  MEMORY[0x1F4188790](v11);
  uint64_t result = sub_1DB0C4908();
  if (v7) {
    *a7 = v7;
  }
  else {
    *a3 = a4;
  }
  return result;
}

uint64_t sub_1DB0A9DA0(uint64_t result)
{
  uint64_t v1 = result;
  if (qword_1EA8FDDE0 == -1)
  {
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = swift_once();
  if (!v1) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = cckem_import_pubkey();
  if (result)
  {
    int v2 = result;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = v2;
    *(unsigned char *)(v3 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  v3[3] = *MEMORY[0x1E4F143B8];
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v0 = cckem_pubkey_nbytes_info();
  v3[0] = sub_1DB065640(v0);
  v3[1] = v1;
  sub_1DB09788C(v3, 0);
  sub_1DB0AAF14(v3);
  return v3[0];
}

uint64_t Kyber768.PublicKey.encapsulate()()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DB0C4D58();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = *v0;
  int v16 = 0;
  if (!ccrng()) {
LABEL_19:
  }
    __break(1u);
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_shared_key_nbytes_info();
  if (qword_1EBE7D890 != -1) {
    swift_once();
  }
  char v5 = off_1EBE7D888;
  *(void *)&long long v14 = off_1EBE7D888;
  if (!v4)
  {
    swift_retain();
    goto LABEL_12;
  }
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  swift_retain();
  do
  {
    swift_beginAccess();
    sub_1DB0A928C(*(void *)(v14 + 16), *(void *)(v14 + 16), 0);
    --v4;
  }
  while (v4);
  char v5 = (void *)v14;
LABEL_12:
  uint64_t v6 = v3 + 32;
  uint64_t v7 = cckem_encapsulated_key_nbytes_info();
  *(void *)&long long v14 = sub_1DB065640(v7);
  *((void *)&v14 + 1) = v8;
  sub_1DB09788C(&v14, 0);
  long long v15 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    size_t v9 = sub_1DB0A97E4((uint64_t)v5);
    swift_release();
    char v5 = (void *)v9;
  }
  swift_beginAccess();
  sub_1DB0AB204(&v15, v6, (uint64_t)v5 + 32);
  if (v1)
  {
    swift_release();
    unint64_t v11 = *((void *)&v15 + 1);
    uint64_t v10 = v15;
  }
  else
  {
    sub_1DB0476AC();
    swift_retain();
    sub_1DB0C4D48();
    unsigned long long v12 = v15;
    sub_1DB04239C(v15, *((unint64_t *)&v15 + 1));
    sub_1DB0C4E28();
    swift_release();
    unint64_t v11 = v12 >> 64;
    uint64_t v10 = v12;
  }
  return sub_1DB042664(v10, v11);
}

uint64_t sub_1DB0AA1F0()
{
  return Kyber768.PublicKey.encapsulate()();
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v9 = cckem_sizeof_full_ctx();
  v12[2] = a2;
  v12[3] = a3;
  void v12[4] = a1;
  unint64_t v13 = MEMORY[0x1F4188790](v9);
  unint64_t v10 = sub_1DB0481F4(v13, (uint64_t (*)(void *, uint64_t *))sub_1DB0ABA1C, (uint64_t)v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (!v4) {
    *a4 = v10;
  }
  return result;
}

void *sub_1DB0AA318(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (*result)
  {
    uint64_t result = (void *)sub_1DB0C4908();
    if (!v4) {
      *a2 = a4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB0AA398(uint64_t a1, uint64_t a2)
{
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_privkey_nbytes_info();
  uint64_t result = cckem_pubkey_nbytes_info();
  uint64_t v6 = v4 + result;
  if (__OFADD__(v4, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!a1)
  {
    if (v6) {
      goto LABEL_9;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v6 != a2 - a1)
  {
LABEL_9:
    sub_1DB04D0D4();
    swift_allocError();
    char v10 = 1;
    *(_DWORD *)uint64_t v9 = 1;
    goto LABEL_10;
  }
  int v7 = cckem_import_privkey();
  if (v7)
  {
    int v8 = v7;
    sub_1DB04D0D4();
    swift_allocError();
    char v10 = 0;
    *(_DWORD *)uint64_t v9 = v8;
LABEL_10:
    *(unsigned char *)(v9 + 4) = v10;
    return swift_willThrow();
  }
  uint64_t result = cckem_public_ctx();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t result = cckem_import_pubkey();
  if (result)
  {
    int v11 = result;
    sub_1DB04D0D4();
    swift_allocError();
    char v10 = 0;
    *(_DWORD *)uint64_t v9 = v11;
    goto LABEL_10;
  }
  return result;
}

uint64_t Kyber768.PrivateKey.dataRepresentation.getter()
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v2 = cckem_privkey_nbytes_info();
  uint64_t v3 = cckem_pubkey_nbytes_info();
  uint64_t v4 = v2 + v3;
  if (__OFADD__(v2, v3)) {
    __break(1u);
  }
  v8[0] = sub_1DB065640(v4);
  v8[1] = v5;
  sub_1DB09788C(v8, 0);
  uint64_t v7 = v4;
  sub_1DB0AB518(v8, v1 + 32, &v7, v4);
  return v8[0];
}

unint64_t static Kyber768.PrivateKey.generate()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = ccrng();
  if (!v2) {
    __break(1u);
  }
  uint64_t v3 = v2;
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_sizeof_full_ctx();
  unint64_t result = sub_1DB048108(v4, v3, v4);
  *a1 = result;
  return result;
}

uint64_t Kyber768.PrivateKey.decapsulate(_:)(uint64_t a1, unint64_t a2)
{
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_shared_key_nbytes_info();
  if (qword_1EBE7D890 != -1) {
    swift_once();
  }
  uint64_t v5 = off_1EBE7D888;
  uint64_t v22 = off_1EBE7D888;
  if (v4)
  {
    if (v4 < 0)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1DB0A928C(v22[2], v22[2], 0);
      --v4;
    }
    while (v4);
    uint64_t v5 = v22;
  }
  else
  {
    swift_retain();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1DB0A97E4((uint64_t)v5);
    swift_release();
  }
  swift_beginAccess();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        goto LABEL_34;
      }
      sub_1DB04239C(a1, a2);
      if (!sub_1DB0C48A8())
      {
        sub_1DB0C48C8();
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1DB0AAB6CLL);
      }
      if (!__OFSUB__((int)a1, sub_1DB0C48D8()))
      {
        sub_1DB0C48C8();
        int v6 = cckem_decapsulate();
        if (v6)
        {
          int v7 = v6;
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v8 = v7;
          *(unsigned char *)(v8 + 4) = 0;
          swift_willThrow();
          sub_1DB042664(a1, a2);
          return swift_release();
        }
        sub_1DB042664(a1, a2);
        goto LABEL_32;
      }
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v10 = sub_1DB0C48A8();
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = sub_1DB0C48D8();
        if (__OFSUB__(v9, v12)) {
          goto LABEL_37;
        }
        uint64_t v13 = v11 + v9 - v12;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (__OFSUB__(v21, v9)) {
        goto LABEL_35;
      }
      sub_1DB0C48C8();
      if (!v13) {
        goto LABEL_39;
      }
      int v17 = cckem_decapsulate();
      if (v17)
      {
        int v18 = v17;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v19 = v18;
        *(unsigned char *)(v19 + 4) = 0;
        swift_willThrow();
        swift_release();
        swift_release();
        return swift_release();
      }
      swift_release();
      swift_release();
LABEL_32:
      sub_1DB0476AC();
      swift_retain();
      sub_1DB0C4D48();
      return swift_release();
    default:
      int v14 = cckem_decapsulate();
      if (!v14) {
        goto LABEL_32;
      }
      int v15 = v14;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v16 = v15;
      *(unsigned char *)(v16 + 4) = 0;
      swift_willThrow();
      return swift_release();
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t Kyber768.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v2 = cckem_sizeof_pub_ctx();
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = sub_1DB0C51B8();
    *(void *)(v4 + 16) = v3;
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  if (!cckem_public_ctx()) {
LABEL_12:
  }
    __break(1u);
  if (cckem_export_pubkey())
  {
LABEL_11:
    __break(1u);
    __break(1u);
    goto LABEL_12;
  }
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = cckem_sizeof_pub_ctx();
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v6 = sub_1DB0AAE14(v8, sub_1DB0ABA3C);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

unint64_t sub_1DB0AAD24@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = ccrng();
  if (!v2) {
    __break(1u);
  }
  uint64_t v3 = v2;
  if (qword_1EA8FDDE0 != -1) {
    swift_once();
  }
  uint64_t v4 = cckem_sizeof_full_ctx();
  unint64_t result = sub_1DB048108(v4, v3, v4);
  *a1 = result;
  return result;
}

uint64_t sub_1DB0AADF8(uint64_t a1, unint64_t a2)
{
  return Kyber768.PrivateKey.decapsulate(_:)(a1, a2);
}

uint64_t sub_1DB0AAE14(uint64_t result, uint64_t (*a2)(void *, uint64_t *))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = result;
  if (result)
  {
    uint64_t v5 = sub_1DB0C51B8();
    *(void *)(v5 + 16) = v4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = v5 + 32;
  v7[1] = v4;
  uint64_t v8 = 0;
  v7[0] = v5 + 32;
  unint64_t result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(void *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(void *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1DB0AAF14(uint64_t *a1)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v1 = (int)v4;
      uint64_t v2 = v4 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_16;
      }
      if (v2 < (int)v4) {
        goto LABEL_29;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v4, sub_1DB0C48D8())) {
        goto LABEL_30;
      }
LABEL_15:
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v10 = sub_1DB0C4888();
      swift_release();
      uint64_t v7 = v10;
LABEL_16:
      if (v2 < v1) {
        goto LABEL_25;
      }
      if (!sub_1DB0C48A8()) {
        goto LABEL_32;
      }
      if (__OFSUB__(v1, sub_1DB0C48D8())) {
        goto LABEL_27;
      }
      sub_1DB0C48C8();
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_28;
      }
      unint64_t v9 = v7 | 0x4000000000000000;
      goto LABEL_21;
    case 2uLL:
      uint64_t v11 = *a1;
      uint64_t v13 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v4 = v11;
      uint64_t v8 = *(void *)(v11 + 16);
      if (!sub_1DB0C48A8())
      {
        __break(1u);
LABEL_32:
        __break(1u);
        JUMPOUT(0x1DB0AB1F4);
      }
      if (__OFSUB__(v8, sub_1DB0C48D8())) {
        goto LABEL_24;
      }
      sub_1DB0C48C8();
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_26;
      }
      unint64_t v9 = v13 | 0x8000000000000000;
LABEL_21:
      *a1 = v4;
      a1[1] = v9;
      break;
    case 3uLL:
      uint64_t result = cckem_export_pubkey();
      if (!result) {
        return result;
      }
      __break(1u);
      goto LABEL_15;
    default:
      LOWORD(v12) = a1[1];
      BYTE2(v12) = BYTE2(a1[1]);
      HIBYTE(v12) = BYTE3(a1[1]);
      __int16 v14 = WORD2(a1[1]);
      unsigned __int8 v15 = BYTE6(a1[1]);
      uint64_t result = cckem_export_pubkey();
      if (result)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
      *a1 = v4;
      a1[1] = v12 | ((unint64_t)v14 << 32) | ((unint64_t)HIBYTE(v14) << 40) | ((unint64_t)v15 << 48);
      break;
  }
  return result;
}

uint64_t sub_1DB0AB204(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      *(void *)&long long v19 = *a1;
      *((void *)&v19 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1DB0AB800((int *)&v19, a2, a3);
      uint64_t v9 = v19;
      unint64_t v10 = *((void *)&v19 + 1) | 0x4000000000000000;
      goto LABEL_7;
    case 2uLL:
      *(void *)&long long v19 = *a1;
      *((void *)&v19 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v11 = *((void *)&v19 + 1);
      uint64_t v13 = *(void *)(v19 + 16);
      uint64_t v12 = *(void *)(v19 + 24);
      uint64_t v18 = v19;
      if (!sub_1DB0C48A8()) {
        goto LABEL_22;
      }
      if (__OFSUB__(v13, sub_1DB0C48D8()))
      {
        __break(1u);
      }
      else if (!__OFSUB__(v12, v13))
      {
        sub_1DB0C48C8();
        if (a3)
        {
          uint64_t result = cckem_encapsulate();
          if (result)
          {
            int v14 = result;
            sub_1DB04D0D4();
            swift_allocError();
            *(_DWORD *)uint64_t v15 = v14;
            *(unsigned char *)(v15 + 4) = 0;
            uint64_t result = swift_willThrow();
          }
          *a1 = v18;
          a1[1] = v11 | 0x8000000000000000;
          return result;
        }
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1DB0AB508);
      }
      __break(1u);
      return result;
    case 3uLL:
      *(void *)((char *)&v19 + 7) = 0;
      *(void *)&long long v19 = 0;
      if (!a3) {
        goto LABEL_24;
      }
      uint64_t result = cckem_encapsulate();
      if (result)
      {
        int v16 = result;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v17 = v16;
        *(unsigned char *)(v17 + 4) = 0;
        return swift_willThrow();
      }
      return result;
    default:
      *(void *)&long long v19 = *a1;
      WORD4(v19) = v3;
      BYTE10(v19) = BYTE2(v3);
      BYTE11(v19) = BYTE3(v3);
      BYTE12(v19) = BYTE4(v3);
      BYTE13(v19) = BYTE5(v3);
      BYTE14(v19) = BYTE6(v3);
      if (!a3)
      {
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      uint64_t result = cckem_encapsulate();
      if (result)
      {
        int v7 = result;
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v8 = v7;
        *(unsigned char *)(v8 + 4) = 0;
        uint64_t result = swift_willThrow();
      }
      uint64_t v9 = v19;
      unint64_t v10 = DWORD2(v19) | ((unint64_t)BYTE12(v19) << 32) | ((unint64_t)BYTE13(v19) << 40) | ((unint64_t)BYTE14(v19) << 48);
LABEL_7:
      *a1 = v9;
      a1[1] = v10;
      return result;
  }
}

uint64_t sub_1DB0AB518(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      *(void *)&long long v13 = *a1;
      *((void *)&v13 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_1DB0AB904((int *)&v13, a2, a3, a4);
      uint64_t v9 = v13;
      unint64_t v10 = *((void *)&v13 + 1) | 0x4000000000000000;
      goto LABEL_8;
    case 2uLL:
      *(void *)&long long v13 = *a1;
      *((void *)&v13 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1DB0C4938();
      uint64_t v11 = *((void *)&v13 + 1);
      uint64_t v12 = *(void *)(v13 + 16);
      if (!sub_1DB0C48A8()) {
        goto LABEL_32;
      }
      if (__OFSUB__(v12, sub_1DB0C48D8())) {
        goto LABEL_22;
      }
      sub_1DB0C48C8();
      if (cckem_export_privkey()) {
        goto LABEL_25;
      }
      if (__OFSUB__(a4, *a3)) {
        goto LABEL_28;
      }
      if (!cckem_public_ctx()) {
        goto LABEL_33;
      }
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_30;
      }
      *a1 = v13;
      a1[1] = v11 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v13 + 7) = 0;
      *(void *)&long long v13 = 0;
      if (cckem_export_privkey()) {
        goto LABEL_23;
      }
      if (__OFSUB__(a4, *a3)) {
        goto LABEL_26;
      }
      if (!cckem_public_ctx()) {
        goto LABEL_34;
      }
      uint64_t result = cckem_export_pubkey();
      if (!result) {
        return result;
      }
      goto LABEL_29;
    default:
      *(void *)&long long v13 = *a1;
      WORD4(v13) = v4;
      BYTE10(v13) = BYTE2(v4);
      BYTE11(v13) = BYTE3(v4);
      BYTE12(v13) = BYTE4(v4);
      BYTE13(v13) = BYTE5(v4);
      BYTE14(v13) = BYTE6(v4);
      if (cckem_export_privkey())
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
      if (__OFSUB__(a4, *a3)) {
        goto LABEL_24;
      }
      if (!cckem_public_ctx())
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x1DB0AB7F0);
      }
      uint64_t result = cckem_export_pubkey();
      if (result) {
        goto LABEL_27;
      }
      uint64_t v9 = v13;
      unint64_t v10 = DWORD2(v13) | ((unint64_t)BYTE12(v13) << 32) | ((unint64_t)BYTE13(v13) << 40) | ((unint64_t)BYTE14(v13) << 48);
LABEL_8:
      *a1 = v9;
      a1[1] = v10;
      return result;
  }
}

uint64_t sub_1DB0AB800(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1DB0C4968();
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_1DB0C48A8();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1DB0C48D8();
  if (__OFSUB__(v6, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_1DB0C48C8();
  if (!a3)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t result = cckem_encapsulate();
  if (result)
  {
    int v7 = result;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DB0AB904(int *a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_1DB0C4968();
  uint64_t v7 = *a1;
  if (a1[1] < (int)v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!sub_1DB0C48A8())
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (__OFSUB__(v7, sub_1DB0C48D8())) {
    goto LABEL_10;
  }
  sub_1DB0C48C8();
  if (cckem_export_privkey())
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFSUB__(a4, *a3))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!cckem_public_ctx()) {
    goto LABEL_15;
  }
  uint64_t result = cckem_export_pubkey();
  if (result) {
    goto LABEL_13;
  }
  return result;
}

void *sub_1DB0ABA1C(void *a1, void *a2)
{
  return sub_1DB0AA318(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1DB0ABA3C(uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  if (result) {
    return sub_1DB0A9BB4(result, **(void **)(v2 + 16), a2, *(void *)(v2 + 24));
  }
  __break(1u);
  return result;
}

unint64_t sub_1DB0ABA70()
{
  unint64_t result = qword_1EA8FEB48[0];
  if (!qword_1EA8FEB48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FEB48);
  }
  return result;
}

ValueMetadata *type metadata accessor for Kyber768()
{
  return &type metadata for Kyber768;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey()
{
  return &type metadata for Kyber768.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey()
{
  return &type metadata for Kyber768.PrivateKey;
}

size_t sub_1DB0ABAF4()
{
  size_t v1 = _swift_stdlib_malloc_size(v0) - 32;
  size_t result = swift_beginAccess();
  int64_t v3 = v0[2];
  if (__OFSUB__(v1, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v1 - v3) & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  size_t result = _swift_stdlib_malloc_size(v0);
  if ((uint64_t)(result - 32) >= v3)
  {
    v0[2] = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

size_t sub_1DB0ABB78(int64_t a1, int64_t a2)
{
  uint64_t v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  int64_t v8 = v2[2];
  if (__OFSUB__(v8, v7))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v8 - v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  BOOL v9 = __OFSUB__(0, v7);
  uint64_t v10 = a1 - a2;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  size_t result = sub_1DB046CFC(a2, v8, v10);
  if (a1 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  size_t result = _swift_stdlib_malloc_size(v2);
  uint64_t v11 = v2[2];
  uint64_t v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
  {
    size_t result = swift_beginAccess();
    *uint64_t v5 = v12;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1DB0ABC80(int64_t a1, int64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = (char *)*v2 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *v6 - v8;
  if (__OFSUB__(*v6, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v3);
    if (result - 32 >= v9)
    {
      if (a2 >= a1) {
        return sub_1DB0ABB78(a1, a2);
      }
      goto LABEL_24;
    }
  }
  if (v9 < 0) {
    goto LABEL_20;
  }
  if (HIDWORD(v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v9)
  {
    unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    int v12 = v11 | HIWORD(v11);
    if (v12 == -1) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = (v12 + 1);
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v13;
  if (a1 < 0) {
    goto LABEL_22;
  }
  uint64_t v14 = (const void *)result;
  uint64_t v15 = (char *)*v3;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *((void *)v15 + 2);
  if (v16 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  sub_1DB044DBC(v15, 0, a1);
  sub_1DB0ABAF4();
  sub_1DB044DBC((char *)*v3, a2, v16);
  *int64_t v3 = v14;
  return swift_release();
}

uint64_t sub_1DB0ABE00(uint64_t a1, uint64_t a2)
{
  return sub_1DB0AA398(a1, a2);
}

uint64_t sub_1DB0ABE1C(uint64_t a1)
{
  return sub_1DB0A9DA0(a1);
}

uint64_t sub_1DB0ABE38()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proof();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1DB0ABF30(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v6 = v4 + v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 & 0xF8 | 7;
  uint64_t v11 = v4 + v10;
  unint64_t v12 = (v4 + v10 + ((v6 + (v6 & ~(unint64_t)v5)) & ~(unint64_t)v5)) & ~v10;
  uint64_t v13 = *(void *)(v8 + 64) + 7;
  unint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + v12 + 8;
  int v15 = (v9 | v5) & 0x100000;
  if ((v10 | v5) != 7 || v15 != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    size_t v28 = (uint64_t *)(v18 + (((v10 | v5) + 16) & ~(v10 | v5)));
    swift_retain();
  }
  else
  {
    unint64_t v19 = ~(unint64_t)v5;
    uint64_t v30 = ~v10;
    uint64_t v31 = v7;
    uint64_t v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16);
    v20(a1, a2, AssociatedTypeWitness);
    unint64_t v21 = ((unint64_t)a1 + v6) & v19;
    unint64_t v22 = ((unint64_t)a2 + v6) & v19;
    v20((uint64_t *)v21, (uint64_t *)v22, AssociatedTypeWitness);
    unint64_t v23 = (v6 + v21) & v19;
    unint64_t v24 = (v6 + v22) & v19;
    v20((uint64_t *)v23, (uint64_t *)v24, AssociatedTypeWitness);
    unint64_t v25 = (v24 + v11) & v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v23 + v11) & v30, v25, v31);
    uint64_t v26 = (void *)((v13 + ((v23 + v11) & v30)) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v27 = v13 + v25;
    size_t v28 = a1;
    *uint64_t v26 = *(void *)(v27 & 0xFFFFFFFFFFFFFFF8);
    sub_1DB0C5188();
  }
  return v28;
}

uint64_t sub_1DB0AC1F8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 72);
  uint64_t v8 = (v6 + v7 + a1) & ~v7;
  v4(v8, AssociatedTypeWitness);
  uint64_t v9 = (v6 + v7 + v8) & ~v7;
  v4(v9, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))((v9 + v6 + v12) & ~v12, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DB0AC3BC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v7 + 48);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v9 = (v20 + v8 + a1) & ~v8;
  uint64_t v10 = (v20 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v20 + v8 + v9) & ~v8;
  uint64_t v12 = (v20 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v17 = (v20 + v16 + v11) & ~v16;
  uint64_t v18 = (v20 + v16 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, v18, v13);
  *(void *)((*(void *)(v15 + 48) + 7 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 48)
                                                                                       + 7
                                                                                       + v18) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  return a1;
}

uint64_t sub_1DB0AC5C8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v7 + 40);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v9 = (v20 + v8 + a1) & ~v8;
  uint64_t v10 = (v20 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v20 + v8 + v9) & ~v8;
  uint64_t v12 = (v20 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v17 = (v20 + v16 + v11) & ~v16;
  uint64_t v18 = (v20 + v16 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(v17, v18, v13);
  *(void *)((*(void *)(v15 + 40) + 7 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 40)
                                                                                       + 7
                                                                                       + v18) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB0AC7E0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v7 + 32);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v9 = (v20 + v8 + a1) & ~v8;
  uint64_t v10 = (v20 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v20 + v8 + v9) & ~v8;
  uint64_t v12 = (v20 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v17 = (v20 + v16 + v11) & ~v16;
  uint64_t v18 = (v20 + v16 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v17, v18, v13);
  *(void *)((*(void *)(v15 + 32) + 7 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 32)
                                                                                       + 7
                                                                                       + v18) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1DB0AC9E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v7 + 24);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v9 = (v20 + v8 + a1) & ~v8;
  uint64_t v10 = (v20 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v20 + v8 + v9) & ~v8;
  uint64_t v12 = (v20 + v8 + v10) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v17 = (v20 + v16 + v11) & ~v16;
  uint64_t v18 = (v20 + v16 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v17, v18, v13);
  *(void *)((*(void *)(v15 + 24) + 7 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 24)
                                                                                       + 7
                                                                                       + v18) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DB0ACBF8(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= v6) {
    unsigned int v13 = v6;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v16 = v10 + v15;
  uint64_t v17 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  if (v13 < a2)
  {
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + ((v16 + ((v14 + (v14 & ~v11)) & ~v11)) & ~v15) + 8;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = a2 - v13 + 1;
    }
    if (v19 >= 0x10000) {
      unsigned int v20 = 4;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v19 < 0x100) {
      unsigned int v20 = 1;
    }
    if (v19 >= 2) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    switch(v21)
    {
      case 1:
        int v22 = *((unsigned __int8 *)a1 + v18);
        if (!*((unsigned char *)a1 + v18)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v22 = *(unsigned __int16 *)((char *)a1 + v18);
        if (*(_WORD *)((char *)a1 + v18)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1DB0ACF4CLL);
      case 4:
        int v22 = *(_DWORD *)((char *)a1 + v18);
        if (!v22) {
          break;
        }
LABEL_25:
        int v24 = v22 - 1;
        if ((v18 & 0xFFFFFFF8) != 0)
        {
          int v24 = 0;
          int v25 = *a1;
        }
        else
        {
          int v25 = 0;
        }
        return v13 + (v25 | v24) + 1;
      default:
        break;
    }
  }
  if (v6 >= v12)
  {
    size_t v28 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
    return v28(a1, v6, AssociatedTypeWitness);
  }
  else
  {
    unint64_t v26 = (v16 + ((v14 + (((unint64_t)a1 + v14) & ~v11)) & ~v11)) & ~v15;
    if (v9 < 0x7FFFFFFF)
    {
      unint64_t v29 = *(void *)((v17 + v26) & 0xFFFFFFFFFFFFFFF8);
      if (v29 >= 0xFFFFFFFF) {
        LODWORD(v29) = -1;
      }
      return (v29 + 1);
    }
    else
    {
      unint64_t v27 = *(uint64_t (**)(unint64_t))(v8 + 48);
      return v27(v26);
    }
  }
}

void sub_1DB0ACF60(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (v13 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = v11 + v12;
  uint64_t v16 = (v11 + v12 + ((v11 + v12) & ~v12)) & ~v12;
  uint64_t v17 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v18 = v11 + v17;
  uint64_t v19 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  size_t v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v21 = ((v18 + v16) & ~v17) + v20;
  if (v14 >= a3)
  {
    int v24 = 0;
  }
  else
  {
    if (v21) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a3 - v14 + 1;
    }
    if (v22 >= 0x10000) {
      int v23 = 4;
    }
    else {
      int v23 = 2;
    }
    if (v22 < 0x100) {
      int v23 = 1;
    }
    if (v22 >= 2) {
      int v24 = v23;
    }
    else {
      int v24 = 0;
    }
  }
  if (a2 > v14)
  {
    if (v21) {
      int v25 = 1;
    }
    else {
      int v25 = a2 - v14;
    }
    if (v21)
    {
      int v26 = ~v14 + a2;
      bzero(a1, v21);
      *a1 = v26;
    }
    switch(v24)
    {
      case 1:
        *((unsigned char *)a1 + v21) = v25;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v21) = v25;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)((char *)a1 + v21) = v25;
        return;
      default:
        return;
    }
  }
  uint64_t v27 = ~v12;
  switch(v24)
  {
    case 1:
      *((unsigned char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)((char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x1DB0AD32CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v21) = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v7 >= v13)
        {
          uint64_t v31 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v31(a1, a2, v7, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v28 = ~v17;
          unint64_t v29 = (_DWORD *)((v18 + ((v15 + (((unint64_t)a1 + v15) & v27)) & v27)) & ~v17);
          if (v13 >= a2)
          {
            if (v10 < 0x7FFFFFFF)
            {
              unint64_t v33 = (void *)(((unint64_t)v29 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v34 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v34 = (a2 - 1);
              }
              *unint64_t v33 = v34;
            }
            else
            {
              uint64_t v32 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
              v32((v18 + ((v15 + (((unint64_t)a1 + v15) & v27)) & v27)) & v28, a2);
            }
          }
          else if ((v19 & 0xFFFFFFF8) != 0xFFFFFFF8)
          {
            int v30 = ~v13 + a2;
            bzero((void *)((v18 + ((v15 + (((unint64_t)a1 + v15) & v27)) & v27)) & v28), v20);
            *unint64_t v29 = v30;
          }
        }
      }
      return;
  }
}

uint64_t _s14KeyCommitmentsVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB0AD36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && (uint64_t v4 = *(void *)(a2 + 16)) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    sub_1DB0C5188();
    sub_1DB0C5188();
    uint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v9 = *(void *)(a2 + 8 * v7 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE1C0);
      uint64_t result = swift_initStackObject();
      *(_OWORD *)(result + 16) = xmmword_1DB0C7D30;
      *(void *)(result + 32) = v6;
      uint64_t v11 = (_OWORD *)(result + 32);
      *(void *)(result + 40) = v9;
      int64_t v12 = *(void *)(v8 + 16);
      int64_t v13 = v12 + 2;
      if (__OFADD__(v12, 2)) {
        break;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (!result || (int64_t v14 = *(void *)(v8 + 24) >> 1, v14 < v13))
      {
        if (v12 <= v13) {
          int64_t v15 = v12 + 2;
        }
        else {
          int64_t v15 = v12;
        }
        uint64_t result = (uint64_t)sub_1DB07E678((char *)result, v15, 1, (char *)v8);
        uint64_t v8 = result;
        int64_t v14 = *(void *)(result + 24) >> 1;
      }
      uint64_t v16 = *(void *)(v8 + 16);
      if (v14 - v16 < 2) {
        goto LABEL_19;
      }
      *(_OWORD *)(v8 + 8 * v16 + 32) = *v11;
      if (__OFADD__(v16, 2)) {
        goto LABEL_20;
      }
      *(void *)(v8 + 16) = v16 + 2;
      swift_bridgeObjectRelease();
      if (v2 - 1 != v7)
      {
        uint64_t v6 = *(void *)(a1 + 8 * v7++ + 40);
        if (v4 != v7) {
          continue;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1DB0AD4FC(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = v6;
  int64_t v11 = a1;
  uint64_t v12 = 0;
  int64_t v13 = a1;
  while (1)
  {
    BOOL v14 = v13 <= a2;
    if (a3 > 0) {
      BOOL v14 = v13 >= a2;
    }
    if (v14) {
      break;
    }
    BOOL v15 = __OFADD__(v13, a3);
    v13 += a3;
    if (v15) {
      int64_t v13 = (v13 >> 63) ^ 0x8000000000000000;
    }
    BOOL v15 = __OFADD__(v12++, 1);
    if (v15)
    {
      __break(1u);
      break;
    }
  }
  int v26 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v16 = &v26;
  uint64_t result = sub_1DB0C5308();
  if (!v12) {
    goto LABEL_25;
  }
  while (1)
  {
    BOOL v18 = v11 <= a2;
    if (a3 > 0) {
      BOOL v18 = v11 >= a2;
    }
    if (v18) {
      break;
    }
    uint64_t v23 = v11;
    char v24 = 0;
    sub_1DB0AECB0(&v23, a4, a5, a6, &v22, &v25);
    if (v7)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v16;
    }
    uint64_t v7 = 0;
    if (__OFADD__(v11, a3)) {
      int64_t v11 = ((v11 + a3) >> 63) ^ 0x8000000000000000;
    }
    else {
      v11 += a3;
    }
    sub_1DB0C52E8();
    sub_1DB0C5318();
    sub_1DB0C5328();
    uint64_t v16 = &v26;
    uint64_t result = sub_1DB0C52F8();
    if (!--v12)
    {
      while (1)
      {
LABEL_25:
        BOOL v19 = v11 <= a2;
        if (a3 > 0) {
          BOOL v19 = v11 >= a2;
        }
        if (v19) {
          break;
        }
        uint64_t v23 = v11;
        sub_1DB0AECB0(&v23, a4, a5, a6, &v22, &v25);
        if (v7) {
          goto LABEL_29;
        }
        uint64_t v7 = 0;
        if (__OFADD__(v11, a3)) {
          int64_t v11 = ((v11 + a3) >> 63) ^ 0x8000000000000000;
        }
        else {
          v11 += a3;
        }
        sub_1DB0C52E8();
        sub_1DB0C5318();
        sub_1DB0C5328();
        uint64_t v16 = &v26;
        sub_1DB0C52F8();
      }
      uint64_t v16 = v26;
      swift_bridgeObjectRelease();
      return (uint64_t)v16;
    }
  }
  __break(1u);
  return result;
}

void *sub_1DB0AD70C(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0E0);
      uint64_t v4 = (void *)sub_1DB0C51B8();
      uint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          uint64_t v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            sub_1DB0C5188();
            --v6;
          }
          while (v6);
        }
        sub_1DB0C5188();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x1E4FBC860];
    }
    return v5;
  }
  return result;
}

uint64_t PIR.IndexPirClient.init(pirParams:secretKey:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  char v6 = a1[1];
  int v24 = a1[2];
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v20 = *((void *)a1 + 2);
  uint64_t v21 = *((void *)a1 + 1);
  uint64_t v18 = *((void *)a1 + 5);
  uint64_t v19 = *((void *)a1 + 4);
  uint64_t v17 = *((void *)a1 + 6);
  int v23 = a1[56];
  char v8 = a1[57];
  uint64_t v10 = *a2;
  unint64_t v9 = a2[1];
  LOBYTE(v22[0]) = v5;
  BYTE1(v22[0]) = v6;
  _s12ParamContextCMa();
  swift_allocObject();
  sub_1DB0C5188();
  uint64_t v11 = sub_1DB06B4F8((char *)v22);
  if (v3)
  {
    sub_1DB042664(v10, v9);
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v13 = v11;
    char v16 = v8;
    char v14 = v24;
    v22[0] = v10;
    v22[1] = v9;
    swift_retain_n();
    BOOL v15 = sub_1DB0A208C(v22, v13);
    sub_1DB0C5188();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease_n();
    *(unsigned char *)a3 = v5;
    *(unsigned char *)(a3 + 1) = v6;
    *(unsigned char *)(a3 + 2) = v14;
    *(void *)(a3 + 8) = v21;
    *(void *)(a3 + 16) = v20;
    *(void *)(a3 + 24) = v7;
    *(void *)(a3 + 32) = v19;
    *(void *)(a3 + 40) = v18;
    *(void *)(a3 + 48) = v17;
    *(unsigned char *)(a3 + 56) = v23;
    *(unsigned char *)(a3 + 57) = v16;
    *(void *)(a3 + 64) = v13;
    *(void *)(a3 + 72) = v15;
  }
  return result;
}

unint64_t PIR.IndexPirClient.generateGaloisKey()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1;
  int v5 = *(unsigned __int8 *)(v1 + 2);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v3 + 72);
  if (v5 == 2)
  {
    uint64_t v8 = *(void *)(v3 + 40);
    if (v8 >= 0) {
      uint64_t v9 = *(void *)(v3 + 40);
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    uint64_t v10 = v9 >> 1;
    if (v8 == 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!HIDWORD(v11))
      {
        char v12 = *(unsigned char *)(v3 + 57);
        unint64_t result = sub_1DB06B76C();
        if (!v2)
        {
          int v14 = result;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE0C8);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1DB0C77B0;
          *(_DWORD *)(inited + 32) = v14;
          if (v12)
          {
            int v22 = sub_1DB06B82C();
            uint64_t inited = (uint64_t)sub_1DB07E9A8((char *)1, 2, 1, (char *)inited);
            *(void *)(inited + 16) = 2;
            *(_DWORD *)(inited + 36) = v22;
          }
          swift_retain();
          swift_retain();
          return sub_1DB0B4838(v6, inited, v7, a1);
        }
        return result;
      }
LABEL_24:
      __break(1u);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v16 = *(void *)(v3 + 24);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = (uint64_t *)(v16 + 32);
    while (1)
    {
      uint64_t v20 = *v19++;
      BOOL v21 = __OFADD__(v18, v20);
      v18 += v20;
      if (v21) {
        break;
      }
      if (!--v17) {
        return sub_1DB0A2380(v18, v6, v7, a1);
      }
    }
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v18 = 0;
  return sub_1DB0A2380(v18, v6, v7, a1);
}

uint64_t PIR.IndexPirClient.generateRelinKey()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 72);
  swift_retain();
  swift_retain();
  return sub_1DB0B434C(v3, a1);
}

void *PIR.IndexPirClient.query(indices:)(void *a1)
{
  if (*(unsigned char *)(v1 + 2) == 2) {
    return sub_1DB0AE044(a1);
  }
  uint64_t v3 = sub_1DB0C5188();
  return (void *)sub_1DB0AE460(v3);
}

uint64_t PIR.IndexPirClient.decryptVectorizedPirReply(reply:indices:)(uint64_t result, uint64_t a2)
{
  long long v5 = v2[1];
  v20[0] = *v2;
  v20[1] = v5;
  long long v6 = v2[3];
  long long v21 = v2[2];
  long long v22 = v6;
  long long v23 = v2[4];
  if (BYTE2(v20[0]) != 2) {
    goto LABEL_9;
  }
  if (BYTE8(v22)) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v22;
  }
  if (!v4)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = result;
  if (*((void *)&v21 + 1) == 0x8000000000000000 && v4 == -1) {
    goto LABEL_24;
  }
  uint64_t v8 = *((void *)&v21 + 1) / v4;
  uint64_t v9 = *(void *)(a2 + 16);
  if (*((void *)&v21 + 1) / v4 < v9)
  {
LABEL_9:
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 5;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
    return v4;
  }
  if (v21 >= 0) {
    uint64_t v11 = *((void *)&v21 + 1);
  }
  else {
    uint64_t v11 = *((void *)&v21 + 1) + 1;
  }
  uint64_t v12 = v11 >> 1;
  if (*((void *)&v21 + 1) == 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = sub_1DB0AEF54(a2, v13);
  if (v3) {
    return v4;
  }
  uint64_t v15 = v14;
  if (v13 >= v4) {
    uint64_t v16 = v13 / v4;
  }
  else {
    uint64_t v16 = 1;
  }
  uint64_t v24 = v16;
  sub_1DB0B06B4((uint64_t)v20);
  uint64_t v17 = sub_1DB0B0424(v7, (uint64_t)v20);
  sub_1DB0B06FC((uint64_t)v20);
  sub_1DB0B06B4((uint64_t)v20);
  uint64_t v18 = sub_1DB0B0908(v17, (uint64_t)v20);
  sub_1DB0B06FC((uint64_t)v20);
  swift_bridgeObjectRelease();
  unint64_t result = cche_encryption_params_polynomial_degree();
  if (v13)
  {
    uint64_t v19 = result >> 1;
    sub_1DB0B06B4((uint64_t)v20);
    uint64_t v4 = (uint64_t)sub_1DB0B0BBC(0, v9, v15, v19 / v13, v19, v18, v8, v4, (uint64_t)v20, v13, v24);
    sub_1DB0B06FC((uint64_t)v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v4;
  }
LABEL_25:
  __break(1u);
  return result;
}

_OWORD *PIR.IndexPirClient.decrypt(reply:index:)(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 2) == 2)
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 5;
    *(unsigned char *)(v4 + 4) = 1;
    return (_OWORD *)swift_willThrow();
  }
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 16);
  unint64_t result = sub_1DB0AE990(a1);
  if (v3) {
    return result;
  }
  if (!v7)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v10 = (uint64_t)result;
  unint64_t v11 = v9;
  if (a2 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_23;
  }
  uint64_t v12 = a2 % v7 * v8;
  if ((unsigned __int128)(a2 % v7 * (__int128)v8) >> 64 != v12 >> 63) {
    goto LABEL_21;
  }
  uint64_t v13 = v12 + v8;
  if (__OFADD__(v12, v8))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    JUMPOUT(0x1DB0AE034);
  }
  switch(v11 >> 62)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(v10) - v10;
      if (__OFSUB__(HIDWORD(v10), v10)) {
        goto LABEL_25;
      }
      uint64_t v14 = (int)v14;
LABEL_14:
      if (v14 < v13)
      {
LABEL_19:
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v21 = 5;
        *(unsigned char *)(v21 + 4) = 1;
        swift_willThrow();
        return (_OWORD *)sub_1DB042664(v10, v11);
      }
LABEL_15:
      if (v13 < v12) {
        goto LABEL_24;
      }
      uint64_t v18 = sub_1DB0C49B8();
      uint64_t v20 = sub_1DB05BE64(v18, v19);
      sub_1DB042664(v10, v11);
      unint64_t result = (_OWORD *)v20;
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(v10 + 16);
      uint64_t v15 = *(void *)(v10 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_14;
      }
      goto LABEL_26;
    case 3uLL:
      if (v13 > 0) {
        goto LABEL_19;
      }
      goto LABEL_15;
    default:
      uint64_t v14 = BYTE6(v11);
      goto LABEL_14;
  }
  return result;
}

void *sub_1DB0AE044(void *result)
{
  long long v3 = v1[3];
  long long v4 = v1[4];
  long long v49 = v1[2];
  long long v50 = v3;
  long long v51 = v4;
  long long v5 = v1[1];
  long long v47 = *v1;
  long long v48 = v5;
  *(_OWORD *)&v54[10] = *(_OWORD *)((char *)v1 + 42);
  long long v53 = v5;
  *(_OWORD *)uint64_t v54 = v49;
  long long v52 = v47;
  if (v54[24]) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(void *)&v54[16];
  }
  if (!v6)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v7 = v2;
  uint64_t v8 = result;
  if (*(void *)&v54[8] == 0x8000000000000000 && v6 == -1) {
    goto LABEL_57;
  }
  uint64_t v9 = result[2];
  uint64_t v44 = *(void *)&v54[8] / v6;
  if (*(void *)&v54[8] / v6 < v9)
  {
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 5;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
    return v1;
  }
  unsigned int v11 = cche_encryption_params_polynomial_degree();
  if (v11)
  {
    unsigned int v12 = v11;
    uint64_t v13 = v9;
    uint64_t v14 = v11;
    uint64_t v1 = (_OWORD *)sub_1DB0C51B8();
    *((void *)v1 + 2) = v14;
    uint64_t v9 = v13;
    bzero(v1 + 2, 8 * v12);
  }
  else
  {
    uint64_t v1 = (_OWORD *)MEMORY[0x1E4FBC860];
  }
  uint64_t v41 = *((void *)&v53 + 1);
  unint64_t result = sub_1DB0AD70C(v1, *(void *)(*((void *)&v53 + 1) + 16));
  uint64_t v15 = result;
  if (!v9)
  {
LABEL_45:
    sub_1DB0B06B4((uint64_t)&v47);
    uint64_t isUniquelyReferenced_nonNull_native = sub_1DB0AFF8C((uint64_t)v15, (uint64_t)&v47);
    if (v7)
    {
      sub_1DB0B06FC((uint64_t)&v47);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_50:
      uint64_t v1 = (_OWORD *)isUniquelyReferenced_nonNull_native;
      sub_1DB0B06FC((uint64_t)&v47);
      swift_bridgeObjectRelease();
    }
    return v1;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v37 = v2;
    uint64_t v16 = *((void *)&v53 + 1);
    uint64_t v38 = *((void *)&v53 + 1) + 32;
    uint64_t v39 = v8 + 4;
    sub_1DB0C5188();
    uint64_t v45 = 0;
    uint64_t v42 = v6;
LABEL_16:
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = v39[v45];
      sub_1DB0B142C((uint64_t)&v52);
      unint64_t result = sub_1DB07E66C(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v19 = (char *)result;
      uint64_t v20 = (uint64_t *)v38;
      while (1)
      {
        uint64_t v22 = *v20++;
        uint64_t v21 = v22;
        if (!v22) {
          break;
        }
        if (v18 == 0x8000000000000000 && v21 == -1) {
          goto LABEL_55;
        }
        unint64_t v24 = *((void *)v19 + 2);
        unint64_t v23 = *((void *)v19 + 3);
        if (v24 >= v23 >> 1)
        {
          unint64_t result = sub_1DB07E66C((char *)(v23 > 1), v24 + 1, 1, v19);
          unint64_t v19 = (char *)result;
        }
        *((void *)v19 + 2) = v24 + 1;
        *(void *)&v19[8 * v24 + 32] = v18 % v21;
        v18 /= v21;
        if (!--v17)
        {
          uint64_t v25 = v19;
          sub_1DB0B1458((uint64_t)&v52);
          unint64_t result = v25;
          goto LABEL_26;
        }
      }
      __break(1u);
    }
    else
    {
      unint64_t result = (void *)MEMORY[0x1E4FBC860];
LABEL_26:
      uint64_t v26 = 0;
      uint64_t v40 = v45 + 1;
      uint64_t v43 = result;
      while (v26 != v6)
      {
        v46[2] = v49;
        v46[3] = v50;
        v46[4] = v51;
        v46[0] = v47;
        v46[1] = v48;
        uint64_t v27 = v26 * v44;
        if ((unsigned __int128)(v26 * (__int128)v44) >> 64 != (v26 * v44) >> 63) {
          goto LABEL_53;
        }
        uint64_t v28 = v45 + v27;
        if (__OFADD__(v45, v27)) {
          goto LABEL_54;
        }
        unint64_t v29 = (char *)result;
        sub_1DB0C5188();
        uint64_t v1 = v46;
        int v30 = sub_1DB0AE744(v28, v29);
        uint64_t v31 = *((void *)v30 + 2);
        uint64_t v55 = v30;
        if (v31)
        {
          unint64_t v32 = 0;
          unint64_t v33 = v30 + 32;
          while (1)
          {
            unint64_t v34 = *(void *)&v33[8 * v32];
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1DB0526DC(v15);
              uint64_t v15 = (void *)isUniquelyReferenced_nonNull_native;
            }
            if (v32 >= v15[2]) {
              break;
            }
            uint64_t v1 = &v15[v32];
            uint64_t v36 = *((void *)v1 + 4);
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *((void *)v1 + 4) = v36;
            if (isUniquelyReferenced_nonNull_native)
            {
              if ((v34 & 0x8000000000000000) != 0) {
                goto LABEL_48;
              }
            }
            else
            {
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1DB0526C8(v36);
              uint64_t v36 = isUniquelyReferenced_nonNull_native;
              *((void *)v1 + 4) = isUniquelyReferenced_nonNull_native;
              if ((v34 & 0x8000000000000000) != 0) {
                goto LABEL_48;
              }
            }
            if (v34 >= *(void *)(v36 + 16)) {
              goto LABEL_49;
            }
            ++v32;
            *(void *)(v36 + 8 * v34 + 32) = 1;
            if (v31 == v32) {
              goto LABEL_27;
            }
          }
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
LABEL_27:
        ++v26;
        swift_bridgeObjectRelease();
        uint64_t v6 = v42;
        unint64_t result = v43;
        if (v26 == v42)
        {
          swift_bridgeObjectRelease();
          uint64_t v16 = v41;
          ++v45;
          if (v40 != v9) {
            goto LABEL_16;
          }
          swift_bridgeObjectRelease();
          uint64_t v7 = v37;
          goto LABEL_45;
        }
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_1DB0AE460(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v29 = v1[8];
  uint64_t v28 = v1[9];
  if (!v2)
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_1DB0A2C70(v7, v29, v28, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v27;
  }
  uint64_t v3 = v1[4];
  if (!v3) {
    goto LABEL_47;
  }
  uint64_t v4 = v1[3];
  long long v5 = (uint64_t *)(result + 32);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v30 = v1[4];
  while (1)
  {
    uint64_t v9 = *v5++;
    uint64_t v8 = v9;
    if (v9 == 0x8000000000000000 && v3 == -1) {
      break;
    }
    unint64_t result = (uint64_t)sub_1DB07FDC4((char *)(v8 / v3));
    uint64_t v11 = *(void *)(result + 16);
    int64_t v12 = *(void *)(v7 + 16);
    int64_t v13 = v12 + v11;
    if (__OFADD__(v12, v11))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      break;
    }
    uint64_t v14 = result;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v13 <= *(void *)(v7 + 24) >> 1)
    {
      if (*(void *)(v14 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v12 <= v13) {
        int64_t v19 = v12 + v11;
      }
      else {
        int64_t v19 = v12;
      }
      unint64_t result = (uint64_t)sub_1DB07E66C((char *)result, v19, 1, (char *)v7);
      uint64_t v7 = result;
      if (*(void *)(v14 + 16))
      {
LABEL_14:
        uint64_t v15 = *(void *)(v7 + 16);
        if ((*(void *)(v7 + 24) >> 1) - v15 < v11) {
          goto LABEL_42;
        }
        unint64_t result = (uint64_t)memcpy((void *)(v7 + 8 * v15 + 32), (const void *)(v14 + 32), 8 * v11);
        if (v11)
        {
          uint64_t v16 = *(void *)(v7 + 16);
          BOOL v17 = __OFADD__(v16, v11);
          uint64_t v18 = v16 + v11;
          if (v17) {
            goto LABEL_45;
          }
          *(void *)(v7 + 16) = v18;
        }
        goto LABEL_23;
      }
    }
    if (v11) {
      goto LABEL_40;
    }
LABEL_23:
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v4 + 16);
    int64_t v21 = *(void *)(v6 + 16);
    int64_t v22 = v21 + v20;
    if (__OFADD__(v21, v20)) {
      goto LABEL_41;
    }
    sub_1DB0C5188();
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v22 <= *(void *)(v6 + 24) >> 1)
    {
      if (!*(void *)(v4 + 16)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v21 <= v22) {
        int64_t v23 = v21 + v20;
      }
      else {
        int64_t v23 = v21;
      }
      unint64_t result = (uint64_t)sub_1DB07E66C((char *)result, v23, 1, (char *)v6);
      uint64_t v6 = result;
      if (!*(void *)(v4 + 16))
      {
LABEL_4:
        if (v20) {
          goto LABEL_39;
        }
        goto LABEL_5;
      }
    }
    uint64_t v24 = *(void *)(v6 + 16);
    if ((*(void *)(v6 + 24) >> 1) - v24 < v20) {
      goto LABEL_43;
    }
    unint64_t result = (uint64_t)memcpy((void *)(v6 + 8 * v24 + 32), (const void *)(v4 + 32), 8 * v20);
    if (v20)
    {
      uint64_t v25 = *(void *)(v6 + 16);
      BOOL v17 = __OFADD__(v25, v20);
      uint64_t v26 = v25 + v20;
      if (v17) {
        goto LABEL_46;
      }
      *(void *)(v6 + 16) = v26;
    }
LABEL_5:
    unint64_t result = swift_bridgeObjectRelease();
    --v2;
    uint64_t v3 = v30;
    if (!v2) {
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

char *sub_1DB0AE744(uint64_t a1, char *a2)
{
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = (char *)&unk_1DB0C9B30;
  if (v5 >= 2)
  {
    uint64_t v7 = a1 >= 0 ? a1 & 1 : -(a1 & 1);
    unsigned int v8 = cche_encryption_params_polynomial_degree();
    uint64_t v9 = *((void *)a2 + 2);
    if (v9)
    {
      uint64_t v10 = v7 * v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a2 = sub_1DB0526B4((uint64_t)a2);
      }
      uint64_t v11 = 0;
      uint64_t v12 = v10 / v5;
      do
      {
        int64_t v13 = &a2[8 * v11];
        uint64_t v14 = *((void *)v13 + 4);
        BOOL v15 = __OFADD__(v14, v12);
        uint64_t v16 = v14 + v12;
        if (v15) {
          goto LABEL_61;
        }
        ++v11;
        *((void *)v13 + 4) = v16;
      }
      while (v9 != v11);
    }
  }
  if (v5 >= 0) {
    uint64_t v17 = v5;
  }
  else {
    uint64_t v17 = v5 + 1;
  }
  uint64_t v18 = v17 >> 1;
  if (v5 == 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v18;
  }
  unsigned int v19 = cche_encryption_params_polynomial_degree();
  if (!v5) {
    goto LABEL_68;
  }
  uint64_t v20 = v19 / v5;
  if (v20 >= 0) {
    uint64_t v21 = v19 / v5;
  }
  else {
    uint64_t v21 = v20 + 1;
  }
  uint64_t v6 = (char *)*((void *)a2 + 2);
  if (v6 == (char *)1) {
    goto LABEL_49;
  }
  if (!v6) {
    goto LABEL_69;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a2 = sub_1DB0526B4((uint64_t)a2);
  }
  int64_t v22 = 0;
  uint64_t v23 = v21 >> 1;
  unint64_t v24 = v20 + 1;
  unint64_t v25 = v20 + 3;
  do
  {
    if ((unint64_t)v22 >= *((void *)a2 + 2)) {
      goto LABEL_60;
    }
    uint64_t v26 = &a2[8 * (void)v22];
    uint64_t v28 = *((void *)v26 + 4);
    uint64_t v27 = *((void *)v26 + 5);
    BOOL v15 = __OFADD__(v28, v27);
    uint64_t v29 = v28 + v27;
    char v30 = v15;
    if (v28 >= v23)
    {
      if (v30) {
        goto LABEL_63;
      }
      if (v24 < 3) {
        goto LABEL_65;
      }
      if (v29 == 0x8000000000000000 && v25 < 2) {
        goto LABEL_67;
      }
      uint64_t v32 = v29 % v23 + v23;
    }
    else
    {
      if (v30) {
        goto LABEL_62;
      }
      if (v24 < 3) {
        goto LABEL_64;
      }
      if (v29 == 0x8000000000000000 && v25 < 2)
      {
        while (1)
        {
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          a2 = sub_1DB0526B4((uint64_t)a2);
LABEL_50:
          unint64_t v34 = 0;
          if (a1 >= 0) {
            uint64_t v35 = a1;
          }
          else {
            uint64_t v35 = a1 + 1;
          }
          uint64_t v36 = v35 >> 1;
          while (1)
          {
            uint64_t v37 = &a2[8 * (void)v34];
            uint64_t v38 = *((void *)v37 + 4);
            uint64_t v39 = v38 * v5;
            if ((unsigned __int128)(v38 * (__int128)v5) >> 64 != (v38 * v5) >> 63) {
              break;
            }
            *((void *)v37 + 4) = v39;
            BOOL v15 = __OFADD__(v39, v36);
            uint64_t v40 = v39 + v36;
            if (v15) {
              goto LABEL_59;
            }
            ++v34;
            *((void *)v37 + 4) = v40;
            if (v6 == v34) {
              return a2;
            }
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
        }
      }
      uint64_t v32 = v29 % v23;
    }
    *((void *)v26 + 5) = v32;
    ++v22;
  }
  while (v6 - 1 != v22);
  uint64_t v6 = (char *)*((void *)a2 + 2);
  if (v6)
  {
LABEL_49:
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_50;
    }
    goto LABEL_70;
  }
  return a2;
}

_OWORD *sub_1DB0AE990(void *a1)
{
  long long v4 = v1[1];
  v10[0] = *v1;
  v10[1] = v4;
  long long v5 = v1[3];
  v10[2] = v1[2];
  v10[3] = v5;
  v10[4] = v1[4];
  if (BYTE2(v10[0]))
  {
    if (BYTE2(v10[0]) != 1)
    {
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v8 = 5;
      *(unsigned char *)(v8 + 4) = 1;
      swift_willThrow();
      return v1;
    }
    sub_1DB0B06B4((uint64_t)v10);
    uint64_t v1 = (_OWORD *)sub_1DB0B0424((uint64_t)a1, (uint64_t)v10);
    sub_1DB0B06FC((uint64_t)v10);
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = sub_1DB0AEAC8(a1);
    if (!v2)
    {
      uint64_t v1 = (_OWORD *)v6;
LABEL_7:
      sub_1DB0B06B4((uint64_t)v10);
      unint64_t v7 = sub_1DB0B110C((uint64_t)v1, (uint64_t)v10);
      sub_1DB0B06FC((uint64_t)v10);
      swift_bridgeObjectRelease();
      uint64_t v1 = (_OWORD *)sub_1DB0656E0(v7);
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t sub_1DB0AEAC8(void *a1)
{
  long long v4 = v1[3];
  long long v22 = v1[2];
  long long v23 = v4;
  long long v24 = v1[4];
  long long v5 = v1[1];
  long long v20 = *v1;
  long long v21 = v5;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (a1[2])
  {
    uint64_t v6 = a1[5];
    if ((v6 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = a1[6];
      uint64_t v8 = a1[4];
      unint64_t v9 = v6 & 0xDFFFFFFFFFFFFFFFLL;
      sub_1DB04239C(v8, v6 & 0xDFFFFFFFFFFFFFFFLL);
      sub_1DB0C5188();
      sub_1DB042664(v8, v9);
      uint64_t v19 = v7;
    }
  }
  sub_1DB0B06B4((uint64_t)&v20);
  uint64_t v10 = sub_1DB0B0424((uint64_t)a1, (uint64_t)&v20);
  uint64_t result = sub_1DB0B06FC((uint64_t)&v20);
  if (v2) {
    goto LABEL_11;
  }
  if (!*(void *)(v10 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = *(void *)(v10 + 32);
  swift_retain();
  uint64_t v13 = sub_1DB0C5188();
  uint64_t v14 = sub_1DB090FC0(v13, v12);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(*((void *)&v21 + 1) + 16);
  if (v15)
  {
    uint64_t v16 = v15 - 1;
    if (v15 != 1)
    {
      while (v16)
      {
        sub_1DB0B06B4((uint64_t)&v20);
        uint64_t v17 = sub_1DB0B0744(v10, (uint64_t)&v20);
        sub_1DB0B06FC((uint64_t)&v20);
        uint64_t result = swift_bridgeObjectRelease();
        if (!v14) {
          goto LABEL_13;
        }
        int64_t v18 = *(void *)(v17 + 16);
        sub_1DB0C5188();
        uint64_t v10 = sub_1DB0AD4FC(0, v18, (uint64_t)v14, (uint64_t)v14, v17, &v19);
        uint64_t result = swift_bridgeObjectRelease();
        if (!--v16) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1DB0AECB0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = *a1;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v10 = a3;
  if (*(void *)(a3 + 16) >= *a1 + a2) {
    uint64_t v11 = *a1 + a2;
  }
  else {
    uint64_t v11 = *(void *)(a3 + 16);
  }
  if (v11 < v12) {
    goto LABEL_18;
  }
  if (v12 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_bridgeObjectRelease();
    sub_1DB047B98(v10, v10 + 32, v12, (2 * v11) | 1);
    uint64_t v15 = v19;
    goto LABEL_12;
  }
  uint64_t v6 = a5;
  uint64_t v8 = v7;
  unint64_t v9 = a4;
  long long v20 = a6;
  sub_1DB0C53E8();
  sub_1DB0C5188();
  swift_unknownObjectRetain_n();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = *(void *)(v13 + 16);
  swift_release();
  if (v14 != v11 - v12) {
    goto LABEL_20;
  }
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v16 = *v9;
  uint64_t v17 = qword_1EA8FDD78;
  sub_1DB0C5188();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t result = sub_1DB091314(v15, 1uLL, 0, qword_1EA903418, v16);
  if (v8) {
    *uint64_t v6 = v8;
  }
  else {
    *long long v20 = result;
  }
  return result;
}

void sub_1DB0AEE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 < 0) {
    goto LABEL_21;
  }
  if (a6)
  {
    uint64_t v12 = sub_1DB0C51B8();
    *(void *)(v12 + 16) = a6;
    bzero((void *)(v12 + 32), 8 * a6);
    if (!a4)
    {
LABEL_22:
      __break(1u);
      return;
    }
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v15 = v13 * a5;
      if ((unsigned __int128)(v13 * (__int128)a5) >> 64 != (v13 * a5) >> 63) {
        break;
      }
      BOOL v16 = __OFADD__(a2, v15);
      uint64_t v17 = a2 + v15;
      if (v16) {
        goto LABEL_17;
      }
      if (v17 == 0x8000000000000000 && a4 == -1) {
        goto LABEL_20;
      }
      uint64_t v19 = v17 % a4;
      BOOL v16 = __OFADD__(a3, v19);
      unint64_t v20 = a3 + v19;
      if (v16) {
        goto LABEL_18;
      }
      if (v20 >= v14) {
        goto LABEL_19;
      }
      *(void *)(v12 + 8 * v13++ + 32) = *(void *)(a1 + 32 + 8 * v20);
      if (a6 == v13) {
        return;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
}

uint64_t sub_1DB0AEF54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = sub_1DB0C51B8();
    *(void *)(v7 + 16) = v3;
    uint64_t v26 = v7 + 32;
    bzero((void *)(v7 + 32), 8 * v3);
    uint64_t v8 = 0;
    uint64_t v25 = v7;
    uint64_t v23 = v3;
    uint64_t v24 = a2;
    while (1)
    {
      uint64_t v9 = *(void *)(v6 + 16);
      if (v9) {
        break;
      }
      uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_13:
      unint64_t v17 = v8;
      int64_t v18 = sub_1DB0AE744(v8, (char *)v12);
      uint64_t v19 = *((void *)v18 + 2);
      if (!v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v22 = 5;
        *(unsigned char *)(v22 + 4) = 1;
        swift_willThrow();
        return v7;
      }
      uint64_t v20 = *(void *)&v18[8 * v19 + 24];
      uint64_t result = swift_bridgeObjectRelease();
      if (!a2) {
        goto LABEL_27;
      }
      if (v20 == 0x8000000000000000 && a2 == -1) {
        goto LABEL_29;
      }
      if (v17 >= *(void *)(v7 + 16)) {
        goto LABEL_28;
      }
      *(void *)(v26 + 8 * v17) = v20 / a2;
      uint64_t v8 = v17 + 1;
      if (v17 + 1 == v3) {
        return v7;
      }
    }
    uint64_t v27 = v8;
    uint64_t v10 = *(void *)(a1 + 32 + 8 * v8);
    sub_1DB0C5188();
    uint64_t result = (uint64_t)sub_1DB07E66C(0, 1, 1, MEMORY[0x1E4FBC860]);
    uint64_t v12 = result;
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(v6 + 8 * v13 + 32);
      if (!v14) {
        break;
      }
      if (v10 == 0x8000000000000000 && v14 == -1) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v12 + 16);
      unint64_t v15 = *(void *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = (uint64_t)sub_1DB07E66C((char *)(v15 > 1), v16 + 1, 1, (char *)v12);
        uint64_t v12 = result;
      }
      ++v13;
      *(void *)(v12 + 16) = v16 + 1;
      *(void *)(v12 + 8 * v16 + 32) = v10 % v14;
      v10 /= v14;
      if (v9 == v13)
      {
        swift_bridgeObjectRelease();
        a2 = v24;
        uint64_t v7 = v25;
        uint64_t v3 = v23;
        uint64_t v8 = v27;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

char *sub_1DB0AF21C@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, void *a12)
{
  unint64_t v13 = *(void *)result;
  if ((*(void *)result & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
  uint64_t v14 = a2;
  unint64_t v15 = a9;
  if (v13 >= *(void *)(a2 + 16))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (*(void *)(a2 + 8 * v13 + 32) >= a3) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v40 = a4 - v16;
  uint64_t v41 = v16;
  if (__OFSUB__(a4, v16)) {
    goto LABEL_38;
  }
  uint64_t v17 = v12;
  uint64_t v39 = *(void *)(a5 + 16);
  if (v39)
  {
    uint64_t v46 = v17;
    sub_1DB0C5188();
    uint64_t v19 = 0;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    while (1)
    {
      v48[0] = *(void *)(a5 + 8 * v19 + 32);
      sub_1DB0C5188();
      uint64_t v21 = v14;
      unint64_t v22 = v13;
      sub_1DB0AF4F0(v48, a6, a7, a8, v14, v13, a10, v41, &v47, a4, a11, v40);
      uint64_t result = (char *)swift_bridgeObjectRelease();
      uint64_t v23 = v47;
      uint64_t v24 = *(void *)(v47 + 16);
      int64_t v25 = *(void *)(v20 + 16);
      int64_t v26 = v25 + v24;
      if (__OFADD__(v25, v24))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (result && v26 <= *(void *)(v20 + 24) >> 1)
      {
        if (*(void *)(v23 + 16)) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v25 <= v26) {
          int64_t v27 = v25 + v24;
        }
        else {
          int64_t v27 = v25;
        }
        uint64_t result = sub_1DB07E678(result, v27, 1, (char *)v20);
        uint64_t v20 = (uint64_t)result;
        if (*(void *)(v23 + 16))
        {
LABEL_20:
          uint64_t v28 = *(void *)(v20 + 16);
          if ((*(void *)(v20 + 24) >> 1) - v28 < v24) {
            goto LABEL_34;
          }
          uint64_t result = (char *)memcpy((void *)(v20 + 8 * v28 + 32), (const void *)(v23 + 32), 8 * v24);
          if (v24)
          {
            uint64_t v29 = *(void *)(v20 + 16);
            BOOL v30 = __OFADD__(v29, v24);
            uint64_t v31 = v29 + v24;
            if (v30) {
              goto LABEL_35;
            }
            *(void *)(v20 + 16) = v31;
          }
          goto LABEL_10;
        }
      }
      if (v24) {
        goto LABEL_33;
      }
LABEL_10:
      ++v19;
      swift_bridgeObjectRelease();
      uint64_t v14 = v21;
      unint64_t v13 = v22;
      if (v39 == v19)
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = a9;
        uint64_t v17 = v46;
        goto LABEL_26;
      }
    }
  }
  uint64_t v20 = MEMORY[0x1E4FBC860];
LABEL_26:
  v48[2] = v20;
  unint64_t v32 = *(void *)(a8 + 16);
  uint64_t result = (char *)cche_encryption_params_plaintext_modulus();
  if (!result) {
    goto LABEL_39;
  }
  uint64_t v33 = sub_1DB0C42AC(__clz((unint64_t)result) ^ 0x3F);
  if (v17)
  {
    uint64_t result = (char *)swift_bridgeObjectRelease();
    *a12 = v17;
    return result;
  }
  uint64_t v34 = v33;
  uint64_t result = (char *)swift_bridgeObjectRelease();
  if ((v32 & 0x8000000000000000) != 0) {
    goto LABEL_40;
  }
  if (*(void *)(v34 + 16) >= v32)
  {
    uint64_t v35 = sub_1DB0672BC(v34, v34 + 32, 0, (2 * v32) | 1);
    uint64_t v37 = v36;
    uint64_t result = (char *)swift_bridgeObjectRelease();
    *unint64_t v15 = v35;
    v15[1] = v37;
    return result;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1DB0AF4F0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = *a1;
  if (a2 == 1 && a3 >= 2)
  {
    if ((a6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a5 + 16) > a6)
    {
      uint64_t v16 = a5 + 32;
      uint64_t v17 = *(void *)(a5 + 32 + 8 * a6);
      uint64_t v18 = v17 * a7;
      if ((unsigned __int128)(v17 * (__int128)a7) >> 64 == (v17 * a7) >> 63)
      {
        unint64_t v19 = a6 >> 1;
        if (!__OFADD__(v18, a6 >> 1))
        {
          sub_1DB0AEE44(v15, v18 + (a6 >> 1), a8, a10, a11, a10);
          uint64_t v21 = *(void *)(v16 + 8 * a6);
          uint64_t v22 = v21 * a7;
          if ((unsigned __int128)(v21 * (__int128)a7) >> 64 == (v21 * a7) >> 63)
          {
            if (!__OFADD__(v22, v19))
            {
              uint64_t v23 = v20;
              sub_1DB0AEE44(v15, v22 + v19, a12, a10, a11, a10);
              uint64_t v25 = sub_1DB0AD36C(v23, v24);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_20:
              *a9 = v25;
              return;
            }
            goto LABEL_30;
          }
          goto LABEL_25;
        }
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a6 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(void *)(a5 + 16) <= a6)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v26 = a5 + 32;
  uint64_t v27 = *(void *)(a5 + 32 + 8 * a6);
  uint64_t v28 = v27 * a7;
  if ((unsigned __int128)(v27 * (__int128)a7) >> 64 != (v27 * a7) >> 63)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v29 = a6 >> 1;
  if (__OFADD__(v28, a6 >> 1))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_1DB0AEE44(v15, v28 + (a6 >> 1), a8, a10, a11, a10);
  uint64_t v25 = v30;
  uint64_t v36 = v30;
  if (*(void *)(a4 + 40) != 1) {
    goto LABEL_20;
  }
  int v31 = *(unsigned __int8 *)(a4 + 57);
  if (v31 == 2 || (v31 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v32 = *(void *)(v26 + 8 * a6);
  uint64_t v33 = v32 * a7;
  if ((unsigned __int128)(v32 * (__int128)a7) >> 64 != (v32 * a7) >> 63) {
    goto LABEL_31;
  }
  if (!__OFADD__(v33, v29))
  {
    sub_1DB0AEE44(v15, v33 + v29, a12, a10, a11, a10);
    sub_1DB04E8E8(v34);
    uint64_t v25 = v36;
    goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_1DB0AF714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!sub_1DB0C48A8()) {
    goto LABEL_10;
  }
  if (__OFSUB__(a1, sub_1DB0C48D8()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_1DB0C48C8();
  if ((a7 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (HIDWORD(a7))
  {
LABEL_9:
    __break(1u);
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (!ccrng()) {
    goto LABEL_11;
  }
  return cche_encrypt_symmetric();
}

uint64_t sub_1DB0AF824(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v15 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1DB0C7A30;
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = v7 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_17;
      }
      if (v17 < (int)v7) {
        goto LABEL_25;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v7, sub_1DB0C48D8())) {
        goto LABEL_26;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v19 = sub_1DB0C4888();
      swift_release();
      uint64_t v15 = v19;
      uint64_t v17 = v7 >> 32;
LABEL_17:
      if (v17 < (int)v7) {
        goto LABEL_24;
      }
      swift_retain();
      uint64_t v14 = sub_1DB0AF714((int)v7, v15, a2, a3, a4, a5, a6);
      swift_release_n();
      *a1 = v7;
      a1[1] = v15 | 0x4000000000000000;
      return v14;
    case 2uLL:
      uint64_t v23 = *a1;
      uint64_t v25 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain_n();
      sub_1DB0C4938();
      uint64_t v18 = *(void *)(v23 + 16);
      swift_retain();
      uint64_t v14 = sub_1DB0AF714(v18, v25, a2, a3, a4, a5, a6);
      swift_release_n();
      *a1 = v23;
      a1[1] = v25 | 0x8000000000000000;
      return v14;
    case 3uLL:
      if ((a6 & 0x8000000000000000) != 0) {
        goto LABEL_21;
      }
      if (HIDWORD(a6)) {
        goto LABEL_23;
      }
      if (!ccrng()) {
        goto LABEL_28;
      }
      return cche_encrypt_symmetric();
    default:
      LOWORD(v24) = a1[1];
      BYTE2(v24) = BYTE2(a1[1]);
      HIBYTE(v24) = BYTE3(a1[1]);
      __int16 v26 = WORD2(a1[1]);
      unsigned __int8 v27 = BYTE6(a1[1]);
      if ((a6 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
      }
      if (HIDWORD(a6)) {
        goto LABEL_22;
      }
      if (!ccrng())
      {
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x1DB0AFBD8);
      }
      uint64_t v14 = cche_encrypt_symmetric();
      *a1 = v7;
      a1[1] = v24 | ((unint64_t)v26 << 32) | ((unint64_t)HIBYTE(v26) << 40) | ((unint64_t)v27 << 48);
      return v14;
  }
}

uint64_t sub_1DB0AFBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1DB0C48A8();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t result = sub_1DB0C48D8();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_1DB0C48C8();
  if (*(void *)(a4 + 24)) {
    return cche_serialize_seeded_ciphertext_coeff();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1DB0AFC80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1DB0C7A30;
      swift_retain_n();
      uint64_t v10 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_12;
      }
      if (v10 < (int)v3) {
        goto LABEL_16;
      }
      if (sub_1DB0C48A8() && __OFSUB__((int)v3, sub_1DB0C48D8())) {
        goto LABEL_17;
      }
      sub_1DB0C48F8();
      swift_allocObject();
      uint64_t v11 = sub_1DB0C4888();
      swift_release();
      uint64_t v9 = v11;
LABEL_12:
      if (v10 < (int)v3)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      swift_retain();
      uint64_t v6 = sub_1DB0AFBE8((int)v3, v3 >> 32, v9, a2);
      swift_release_n();
      *a1 = v3;
      a1[1] = v9 | 0x4000000000000000;
      return v6;
    case 2uLL:
      uint64_t v13 = *a1;
      uint64_t v15 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain_n();
      sub_1DB0C4938();
      uint64_t v8 = *(void *)(v13 + 16);
      uint64_t v7 = *(void *)(v13 + 24);
      swift_retain();
      uint64_t v6 = sub_1DB0AFBE8(v8, v7, v15, a2);
      swift_release_n();
      *a1 = v13;
      a1[1] = v15 | 0x8000000000000000;
      return v6;
    case 3uLL:
      if (!*(void *)(a2 + 24))
      {
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1DB0AFF7CLL);
      }
      return cche_serialize_seeded_ciphertext_coeff();
    default:
      LOWORD(v14) = a1[1];
      BYTE2(v14) = BYTE2(a1[1]);
      HIBYTE(v14) = BYTE3(a1[1]);
      __int16 v16 = WORD2(a1[1]);
      unsigned __int8 v17 = BYTE6(a1[1]);
      if (!*(void *)(a2 + 24)) {
        goto LABEL_19;
      }
      uint64_t v6 = cche_serialize_seeded_ciphertext_coeff();
      *a1 = v3;
      a1[1] = v14 | ((unint64_t)v16 << 32) | ((unint64_t)HIBYTE(v16) << 40) | ((unint64_t)v17 << 48);
      return v6;
  }
}

uint64_t sub_1DB0AFF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (!v4) {
    return v5;
  }
  uint64_t v48 = MEMORY[0x1E4FBC860];
  sub_1DB04C238(0, v4, 0);
  uint64_t v5 = v48;
  uint64_t v8 = (void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 64);
  type metadata accessor for HE.ObjectStorage();
  uint64_t v40 = a2;
  while (1)
  {
    uint64_t v41 = v8;
    int64_t v42 = v4;
    uint64_t v10 = *v8;
    uint64_t v11 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v9;
    sub_1DB0C5188();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v11;
    if (HIDWORD(*(void *)(v10 + 16))) {
      break;
    }
    uint64_t v14 = result;
    int v15 = cche_encode_simd_uint64();
    if (v15)
    {
      int v35 = v15;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v36 = v35;
      *(unsigned char *)(v36 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v5;
    }
    uint64_t v43 = v5;
    uint64_t v44 = v3;
    uint64_t v45 = *(void *)(a2 + 72);
    uint64_t v5 = cche_param_ctx_ciphertext_ctx_nmoduli();
    uint64_t v16 = cche_ciphertext_sizeof();
    unsigned __int8 v17 = (void *)swift_initStackObject();
    uint64_t v17[2] = v9;
    swift_retain();
    uint64_t v18 = swift_slowAlloc();
    v17[3] = v18;
    unsigned char v17[4] = v18 + v16;
    uint64_t result = cche_rng_seed_sizeof();
    if (result)
    {
      unint64_t v19 = result;
      if (result < 15)
      {
        if (result < 0) {
          goto LABEL_35;
        }
        uint64_t result = 0;
        unint64_t v21 = (unint64_t)v19 << 48;
      }
      else
      {
        sub_1DB0C48F8();
        swift_allocObject();
        uint64_t v20 = sub_1DB0C48B8();
        if (v19 >= 0x7FFFFFFF)
        {
          sub_1DB0C4988();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0;
          *(void *)(result + 24) = v19;
          unint64_t v21 = v20 | 0x8000000000000000;
        }
        else
        {
          uint64_t result = v19 << 32;
          unint64_t v21 = v20 | 0x4000000000000000;
        }
      }
    }
    else
    {
      unint64_t v21 = 0xC000000000000000;
    }
    v47[0] = result;
    v47[1] = v21;
    uint64_t v22 = *(void *)(v45 + 24);
    if (!v22) {
      goto LABEL_37;
    }
    swift_retain();
    int v23 = sub_1DB0AF824(v47, v18, v14, v9, v22, v5);
    swift_release();
    if (v23)
    {
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v37 = v23;
      *(unsigned char *)(v37 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1DB042664(v47[0], v47[1]);
LABEL_32:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v5;
    }
    unint64_t v25 = v47[1];
    uint64_t v24 = v47[0];
    uint64_t result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      unint64_t v26 = result;
      a2 = v40;
      if (result <= 14)
      {
        if (result < 0) {
          goto LABEL_36;
        }
        uint64_t result = 0;
        unint64_t v29 = (unint64_t)v26 << 48;
      }
      else
      {
        uint64_t v27 = v24;
        sub_1DB0C48F8();
        swift_allocObject();
        uint64_t v28 = sub_1DB0C48B8();
        if (v26 >= 0x7FFFFFFF)
        {
          sub_1DB0C4988();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0;
          *(void *)(result + 24) = v26;
          unint64_t v29 = v28 | 0x8000000000000000;
        }
        else
        {
          uint64_t result = v26 << 32;
          unint64_t v29 = v28 | 0x4000000000000000;
        }
        uint64_t v24 = v27;
      }
    }
    else
    {
      unint64_t v29 = 0xC000000000000000;
      a2 = v40;
    }
    v47[0] = result;
    v47[1] = v29;
    int v30 = sub_1DB0AFC80(v47, (uint64_t)v17);
    uint64_t v5 = v43;
    if (v30)
    {
      int v38 = v30;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v39 = v38;
      *(unsigned char *)(v39 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1DB042664(v24, v25);
      sub_1DB042664(v47[0], v47[1]);
      goto LABEL_32;
    }
    uint64_t v3 = v44;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    long long v31 = *(_OWORD *)v47;
    uint64_t v48 = v43;
    unint64_t v33 = *(void *)(v43 + 16);
    unint64_t v32 = *(void *)(v43 + 24);
    if (v33 >= v32 >> 1)
    {
      long long v46 = *(_OWORD *)v47;
      sub_1DB04C238((char *)(v32 > 1), v33 + 1, 1);
      long long v31 = v46;
      uint64_t v5 = v48;
    }
    *(void *)(v5 + 16) = v33 + 1;
    uint64_t v34 = v5 + 32 * v33;
    *(_OWORD *)(v34 + 32) = v31;
    *(void *)(v34 + 48) = v24;
    *(void *)(v34 + 56) = v25;
    uint64_t v8 = v41 + 1;
    int64_t v4 = v42 - 1;
    if (v42 == 1) {
      return v5;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1DB0B0424(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    sub_1DB0C5308();
    uint64_t v18 = *(void *)(*(void *)(a2 + 64) + 32);
    uint64_t v19 = *(void *)(a2 + 64);
    uint64_t v6 = (unint64_t *)(a1 + 56);
    while (1)
    {
      uint64_t v8 = *(v6 - 3);
      unint64_t v7 = *(v6 - 2);
      uint64_t v10 = *(v6 - 1);
      unint64_t v9 = *v6;
      sub_1DB04DDDC(v8, v7, v10, *v6);
      sub_1DB04DDDC(v8, v7, v10, v9);
      uint64_t v11 = qword_1EA8FDD70;
      uint64_t result = swift_retain();
      if (v11 != -1) {
        uint64_t result = swift_once();
      }
      uint64_t v12 = qword_1EA903410;
      if (qword_1EA903410 < 0) {
        break;
      }
      if (HIDWORD(qword_1EA903410)) {
        goto LABEL_13;
      }
      uint64_t v20 = v3;
      uint64_t v13 = cche_ciphertext_sizeof();
      type metadata accessor for HE.ObjectStorage();
      uint64_t v14 = (void *)swift_allocObject();
      void v14[2] = v19;
      swift_retain();
      uint64_t v15 = swift_slowAlloc();
      v14[3] = v15;
      v14[4] = v15 + v13;
      swift_retain();
      sub_1DB0902B4(v18, v8, v7, v10, v9, v15, 1, v12, &v21);
      int v16 = v21;
      swift_release();
      sub_1DB04DE48(v8, v7, v10, v9);
      if (v16)
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v17 = v16;
        *(unsigned char *)(v17 + 4) = 0;
        swift_willThrow();
        swift_release();
        swift_release();
        sub_1DB04DE48(v8, v7, v10, v9);
        return swift_release();
      }
      v6 += 4;
      swift_release();
      sub_1DB04DE48(v8, v7, v10, v9);
      sub_1DB0C52E8();
      sub_1DB0C5318();
      sub_1DB0C5328();
      sub_1DB0C52F8();
      uint64_t v3 = v20 - 1;
      if (v20 == 1) {
        return v22;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB0B06B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB0B06FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB0B0744(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v18 = MEMORY[0x1E4FBC860];
  sub_1DB04C320(0, v2, 0);
  uint64_t v3 = v18;
  uint64_t v6 = (uint64_t *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    uint64_t v8 = *v6;
    uint64_t v9 = cche_plaintext_sizeof();
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v7;
    swift_retain();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    v10[3] = result;
    v10[4] = result + v9;
    if (!*(void *)(v8 + 24)) {
      break;
    }
    if (!*(void *)(v17 + 24)) {
      goto LABEL_13;
    }
    int v12 = cche_decrypt();
    if (v12)
    {
      int v15 = v12;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v16 = v15;
      *(unsigned char *)(v16 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      return v3;
    }
    swift_release();
    unint64_t v14 = *(void *)(v18 + 16);
    unint64_t v13 = *(void *)(v18 + 24);
    if (v14 >= v13 >> 1) {
      sub_1DB04C320((char *)(v13 > 1), v14 + 1, 1);
    }
    *(void *)(v18 + 16) = v14 + 1;
    *(void *)(v18 + 8 * v14 + 32) = v10;
    ++v6;
    if (!--v2) {
      return v3;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1DB0B0908(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v23 = MEMORY[0x1E4FBC860];
  sub_1DB04C418(0, v2, 0);
  uint64_t v3 = v23;
  uint64_t v6 = (uint64_t *)(a1 + 32);
  uint64_t v21 = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 64);
  type metadata accessor for HE.ObjectStorage();
  while (1)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v22;
    swift_retain();
    swift_retain();
    uint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v8;
    if (!*(void *)(v7 + 24)) {
      goto LABEL_20;
    }
    if (!*(void *)(v21 + 24)) {
      goto LABEL_21;
    }
    int v11 = cche_decrypt();
    if (v11)
    {
      int v17 = v11;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v18 = v17;
      *(unsigned char *)(v18 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_17:
      swift_release();
      swift_release();
      return v3;
    }
    unsigned int v12 = cche_param_ctx_polynomial_degree();
    swift_retain();
    if (v12)
    {
      uint64_t v13 = sub_1DB0C51B8();
      *(void *)(v13 + 16) = v12;
    }
    else
    {
      uint64_t v13 = MEMORY[0x1E4FBC860];
    }
    int v14 = cche_decode_simd_uint64();
    if (v14)
    {
      int v19 = v14;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v20 = v19;
      *(unsigned char *)(v20 + 4) = 0;
      swift_willThrow();
      *(void *)(v13 + 16) = 0;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    uint64_t result = cche_param_ctx_polynomial_degree();
    if (v12 < result) {
      break;
    }
    *(void *)(v13 + 16) = result;
    swift_release();
    swift_release();
    swift_release();
    unint64_t v16 = *(void *)(v23 + 16);
    unint64_t v15 = *(void *)(v23 + 24);
    if (v16 >= v15 >> 1) {
      sub_1DB04C418((void *)(v15 > 1), v16 + 1, 1);
    }
    *(void *)(v23 + 16) = v16 + 1;
    *(void *)(v23 + 8 * v16 + 32) = v13;
    ++v6;
    if (!--v2) {
      return v3;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

char *sub_1DB0B0BBC(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v13 = v11;
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (!v12) {
    return (char *)v14;
  }
  unint64_t v16 = result;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1DB04C3F8(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = v32;
    if (a2 <= (uint64_t)v16) {
      int v17 = v16;
    }
    else {
      int v17 = (char *)a2;
    }
    uint64_t v18 = v16;
    while ((char *)a2 != v18)
    {
      int v30 = v18;
      uint64_t result = sub_1DB0AF21C((char *)&v30, a3, a4, a5, a6, a7, a8, a9, &v31, a10, a11, &v29);
      if (v13)
      {
        swift_release();
        return (char *)v14;
      }
      uint64_t v13 = 0;
      long long v19 = v31;
      uint64_t v32 = v14;
      unint64_t v21 = *(void *)(v14 + 16);
      unint64_t v20 = *(void *)(v14 + 24);
      if (v21 >= v20 >> 1)
      {
        long long v22 = v31;
        uint64_t result = sub_1DB04C3F8((char *)(v20 > 1), v21 + 1, 1);
        long long v19 = v22;
        uint64_t v14 = v32;
      }
      *(void *)(v14 + 16) = v21 + 1;
      *(_OWORD *)(v14 + 16 * v21 + 32) = v19;
      if (a2 < (uint64_t)v16) {
        goto LABEL_19;
      }
      if (v17 == v18) {
        goto LABEL_20;
      }
      if ((char *)a2 == ++v18) {
        return (char *)v14;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _s14IndexPirClientVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _s14IndexPirClientVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  sub_1DB0C5188();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s14IndexPirClientVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s14IndexPirClientVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t _s14IndexPirClientVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14IndexPirClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PIR.IndexPirClient()
{
  return &type metadata for PIR.IndexPirClient;
}

uint64_t sub_1DB0B1008(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v3 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C51B8();
    *(void *)(result + 16) = v3;
    if (*(void *)(a2 + 24))
    {
      if (!HIDWORD(v3))
      {
        uint64_t v4 = result;
LABEL_8:
        int v5 = cche_decode_poly_uint64();
        if (v5)
        {
          int v6 = v5;
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v7 = v6;
          *(unsigned char *)(v7 + 4) = 0;
          swift_willThrow();
          *(void *)(v4 + 16) = 0;
          swift_bridgeObjectRelease();
          return v4;
        }
        uint64_t result = cche_param_ctx_polynomial_degree();
        if (result <= v3)
        {
          *(void *)(v4 + 16) = result;
          return v4;
        }
        goto LABEL_15;
      }
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
    }
  }
  else if (*(void *)(a2 + 24))
  {
    uint64_t v4 = MEMORY[0x1E4FBC860];
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_1DB0B110C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v28 = *(void *)(a1 + 16);
  if (!v28) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v29 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(v5 + 32);
  type metadata accessor for HE.ObjectStorage();
  sub_1DB0C5188();
  uint64_t v7 = 0;
  unint64_t v30 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v8 = *(void *)(a1 + 8 * v7 + 32);
    uint64_t v9 = cche_plaintext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v5;
    swift_retain();
    swift_retain();
    unint64_t result = swift_slowAlloc();
    inited[3] = result;
    inited[4] = result + v9;
    if (!*(void *)(v8 + 24)) {
      goto LABEL_32;
    }
    if (!*(void *)(v29 + 24)) {
      goto LABEL_33;
    }
    int v12 = cche_decrypt();
    if (v12)
    {
      int v26 = v12;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v27 = v26;
      *(unsigned char *)(v27 + 4) = 0;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    uint64_t v13 = cche_param_ctx_polynomial_degree();
    swift_retain();
    sub_1DB0B1008(v13, (uint64_t)inited);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_release();
    }
    uint64_t v14 = v5;
    swift_release();
    uint64_t v15 = v6;
    unint64_t result = cche_param_ctx_plaintext_modulus();
    if (!result) {
      break;
    }
    uint64_t v16 = sub_1DB0C42AC(__clz(result) ^ 0x3F);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    int64_t v17 = *(void *)(v16 + 16);
    unint64_t result = v30;
    int64_t v18 = *(void *)(v30 + 16);
    int64_t v19 = v18 + v17;
    if (__OFADD__(v18, v17)) {
      goto LABEL_28;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = v30;
    if ((result & 1) == 0 || v19 > *(void *)(v30 + 24) >> 1)
    {
      if (v18 <= v19) {
        int64_t v21 = v18 + v17;
      }
      else {
        int64_t v21 = v18;
      }
      unint64_t result = (unint64_t)sub_1DB07E358((char *)result, v21, 1, (char *)v30);
      unint64_t v20 = result;
    }
    unint64_t v30 = v20;
    if (*(void *)(v16 + 16))
    {
      uint64_t v22 = *(void *)(v20 + 16);
      if ((*(void *)(v20 + 24) >> 1) - v22 < v17) {
        goto LABEL_30;
      }
      unint64_t result = (unint64_t)memcpy((void *)(v20 + v22 + 32), (const void *)(v16 + 32), v17);
      if (v17)
      {
        uint64_t v23 = *(void *)(v30 + 16);
        BOOL v24 = __OFADD__(v23, v17);
        uint64_t v25 = v23 + v17;
        if (v24) {
          goto LABEL_31;
        }
        *(void *)(v30 + 16) = v25;
      }
    }
    else if (v17)
    {
      goto LABEL_29;
    }
    ++v7;
    swift_bridgeObjectRelease();
    uint64_t v6 = v15;
    uint64_t v5 = v14;
    if (v28 == v7)
    {
      swift_bridgeObjectRelease();
      return v30;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1DB0B142C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB0B1458(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DB0B1484()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v2 = v1;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t result = _s13ServerSecretsVMa();
  if (v4 <= 0x3F)
  {
    uint64_t result = _s14KeyCommitmentsVMa();
    if (v5 <= 0x3F)
    {
      if (v2 > 0x3F)
      {
        return AssociatedTypeWitness;
      }
      else
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_1DB0B1670(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  int v6 = *(_DWORD *)(v4 + 80);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 | 7;
  uint64_t v11 = v10 | v9;
  uint64_t v12 = *(void *)(v8 + 64);
  BOOL v13 = (v10 | v9) == 7 && ((*(_DWORD *)(v8 + 80) | v6) & 0x100000) == 0;
  if (v13
    && (uint64_t v14 = v5 + v6,
        uint64_t v15 = v12 + v9,
        ((v12
        + v9
        + ((v9
          + 8
          + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)
          + ((v12 + v10 + ((v12 + v9 + ((v12 + v9) & ~v9)) & ~v9)) & ~v10)
          + 8
          + ((((v14
              + ((v14 + ((v14 + (v14 & ~(unint64_t)v6)) & ~(unint64_t)v6)) & ~(unint64_t)v6)) & ~(unint64_t)v6)
            + v5
            + v11) & ~v11)) & ~v9)) & ~v9)
      + v12 <= 0x18))
  {
    long long v46 = a1;
    unint64_t v16 = ~(unint64_t)v6;
    uint64_t v17 = ~v9;
    uint64_t v41 = ~v10;
    int64_t v18 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    uint64_t v39 = *(void *)(v7 - 8);
    uint64_t v40 = v12 + v10;
    uint64_t v43 = v9 + 8;
    uint64_t v44 = v7;
    uint64_t v37 = ((v5
          + v6
          + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & v16)) & v16)) & v16)) & v16)
        + v5;
    uint64_t v38 = ~v11;
    unint64_t v42 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v12 + v10 + ((v12 + v9 + ((v12 + v9) & ~v9)) & ~v9)) & ~v10) + 8;
    v18(v46, a2, AssociatedTypeWitness);
    v18((uint64_t *)(((unint64_t)v46 + v14) & v16), (uint64_t *)(((unint64_t)a2 + v14) & v16), AssociatedTypeWitness);
    unint64_t v19 = (v14 + (((unint64_t)v46 + v14) & v16)) & v16;
    unint64_t v20 = (v14 + (((unint64_t)a2 + v14) & v16)) & v16;
    v18((uint64_t *)v19, (uint64_t *)v20, AssociatedTypeWitness);
    unint64_t v21 = (v14 + v19) & v16;
    unint64_t v22 = (v14 + v20) & v16;
    v18((uint64_t *)v21, (uint64_t *)v22, AssociatedTypeWitness);
    v18((uint64_t *)((v14 + v21) & v16), (uint64_t *)((v14 + v22) & v16), AssociatedTypeWitness);
    uint64_t v36 = ((unint64_t)v46 + v37 + 7) & v38;
    uint64_t v23 = ((unint64_t)a2 + v37 + 7) & v38;
    BOOL v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    v24(v36, v23, v44);
    uint64_t v25 = (v15 + v36) & v17;
    v24(v25, (v15 + v23) & v17, v44);
    uint64_t v26 = (v15 + v25) & v17;
    uint64_t v27 = (v15 + ((v15 + v23) & v17)) & v17;
    v24(v26, v27, v44);
    uint64_t v28 = (v40 + v26) & v41;
    uint64_t v29 = (v40 + v27) & v41;
    v18((uint64_t *)v28, (uint64_t *)v29, AssociatedTypeWitness);
    *(void *)((v5 + 7 + v28) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v5 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v30 = v23 + v42;
    *(void *)(v36 + v42) = *(void *)(v23 + v42);
    unint64_t v31 = (v43 + v36 + v42) & v17;
    unint64_t v32 = (v43 + v30) & v17;
    sub_1DB0C5188();
    v24(v31, v32, v44);
    v24((v15 + v31) & v17, (v15 + v32) & v17, v44);
    return v46;
  }
  else
  {
    uint64_t v34 = *a2;
    *a1 = *a2;
    uint64_t v33 = v34 + ((v11 + 16) & ~v11);
    swift_retain();
  }
  return (uint64_t *)v33;
}

uint64_t sub_1DB0B1B0C(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, AssociatedTypeWitness);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 72);
  uint64_t v7 = *(void *)(v5 + 56) + v6;
  uint64_t v8 = *(void *)(v5 + 56);
  uint64_t v22 = v8;
  v4((v7 + a1) & ~v6, AssociatedTypeWitness);
  uint64_t v9 = (v7 + ((v7 + a1) & ~v6)) & ~v6;
  v4(v9, AssociatedTypeWitness);
  uint64_t v10 = (v7 + v9) & ~v6;
  v4(v10, AssociatedTypeWitness);
  v4((v7 + v10) & ~v6, AssociatedTypeWitness);
  uint64_t v11 = (v7 + ((v7 + ((v7 + (v7 & ~v6)) & ~v6)) & ~v6)) & ~v6;
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v23 = *(void (**)(unint64_t, uint64_t))(v13 + 8);
  uint64_t v24 = v13 + 8;
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  v6 |= 7uLL;
  unint64_t v15 = (v8 + a1 + (v6 | v14) + v11) & ~(v6 | v14);
  v23(v15, v12);
  uint64_t v16 = *(void *)(v24 + 56);
  uint64_t v17 = v16 + v14;
  v23((v16 + v14 + v15) & ~v14, v12);
  unint64_t v18 = (v16 + v14 + ((v16 + v14 + v15) & ~v14)) & ~v14;
  v23(v18, v12);
  uint64_t v19 = v16 + v6;
  v4((v19 + v18) & ~v6, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  unint64_t v20 = (v15 + v14 + ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v19 + ((v17 + (v17 & ~v14)) & ~v14)) & ~v6) + 16) & ~v14;
  v23(v20, v12);
  return ((uint64_t (*)(unint64_t, uint64_t))v23)((v17 + v20) & ~v14, v12);
}

uint64_t sub_1DB0B1E28(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = a2;
  uint64_t v41 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v45 = a1;
  uint64_t v46 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v10 = v46 + v9;
  uint64_t v11 = (v46 + v9 + v8) & ~v9;
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t v44 = v6;
  v6((v46 + v9 + a1) & ~v9, v11, AssociatedTypeWitness);
  uint64_t v12 = (v46 + v9 + ((v46 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v13 = (v46 + v9 + v11) & ~v9;
  v6(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v46 + v9 + v12) & ~v9;
  uint64_t v15 = (v46 + v9 + v13) & ~v9;
  v6(v14, v15, AssociatedTypeWitness);
  v6((v10 + v14) & ~v9, (v10 + v15) & ~v9, AssociatedTypeWitness);
  uint64_t v16 = (v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v20 = v18 + 16;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = v9 | 7;
  uint64_t v23 = v9 | 7 | v21;
  uint64_t v24 = v16 + v46 + v23;
  uint64_t v25 = (v24 + a1) & ~v23;
  uint64_t v40 = v25;
  uint64_t v42 = (v24 + v41) & ~v23;
  v19(v25, v42, v17);
  uint64_t v26 = *(void *)(v20 + 48);
  uint64_t v27 = v26 + v21;
  uint64_t v28 = (v26 + v21 + v25) & ~v21;
  uint64_t v29 = (v26 + v21 + v42) & ~v21;
  v19(v28, v29, v17);
  uint64_t v30 = (v26 + v21 + v28) & ~v21;
  uint64_t v31 = (v26 + v21 + v29) & ~v21;
  v19(v30, v31, v17);
  uint64_t v32 = (v26 + v22 + v30) & ~v22;
  uint64_t v33 = (v26 + v22 + v31) & ~v22;
  v44(v32, v33, v43);
  *(void *)((v46 + 7 + v32) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v46 + 7 + v33) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = ((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v26 + v22 + ((v27 + (v27 & ~v21)) & ~v21)) & ~v22) + 8;
  int v35 = (void *)(v34 + v40);
  uint64_t v36 = (void *)(v34 + v42);
  *int v35 = *v36;
  uint64_t v37 = ((unint64_t)v35 + v21 + 8) & ~v21;
  uint64_t v38 = ((unint64_t)v36 + v21 + 8) & ~v21;
  sub_1DB0C5188();
  v19(v37, v38, v17);
  v19((v27 + v37) & ~v21, (v27 + v38) & ~v21, v17);
  return v45;
}

uint64_t sub_1DB0B21D4(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v47 = AssociatedTypeWitness;
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v46 = a2;
  v48(a1, a2, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v6 + 40);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 56);
  uint64_t v11 = v9 + v10;
  uint64_t v44 = v9;
  uint64_t v12 = v7;
  uint64_t v49 = v7;
  uint64_t v13 = (v9 + v10 + v7) & ~v10;
  uint64_t v14 = (v9 + v10 + v8) & ~v10;
  v48(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v9 + v10 + v13) & ~v10;
  uint64_t v16 = (v9 + v10 + v14) & ~v10;
  v48(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = (v9 + v10 + v15) & ~v10;
  uint64_t v18 = (v9 + v10 + v16) & ~v10;
  v48(v17, v18, AssociatedTypeWitness);
  v48((v11 + v17) & ~v10, (v11 + v18) & ~v10, AssociatedTypeWitness);
  uint64_t v19 = (v11 + ((v11 + ((v11 + (v11 & ~v10)) & ~v10)) & ~v10)) & ~v10;
  uint64_t v20 = swift_checkMetadataState();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 24);
  uint64_t v23 = v21 + 24;
  uint64_t v24 = *(unsigned __int8 *)(v21 + 80);
  v10 |= 7uLL;
  uint64_t v25 = v19 + v9 + (v10 | v24);
  uint64_t v26 = (v25 + v12) & ~(v10 | v24);
  uint64_t v45 = v26;
  uint64_t v27 = (v25 + v46) & ~(v10 | v24);
  uint64_t v28 = v20;
  v22(v26, v27);
  uint64_t v29 = *(void *)(v23 + 40);
  uint64_t v30 = v29 + v24;
  uint64_t v31 = (v29 + v24 + v26) & ~v24;
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v31, (v29 + v24 + v27) & ~v24, v28);
  uint64_t v32 = (v29 + v24 + v31) & ~v24;
  uint64_t v33 = (v29 + v24 + ((v29 + v24 + v27) & ~v24)) & ~v24;
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v32, v33, v28);
  uint64_t v34 = v29 + v10;
  uint64_t v35 = (v34 + v32) & ~v10;
  uint64_t v36 = (v34 + v33) & ~v10;
  v48(v35, v36, v47);
  *(void *)((v44 + 7 + v35) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v44 + 7 + v36) & 0xFFFFFFFFFFFFFFF8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  unint64_t v37 = ((v44 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v34 + ((v30 + (v30 & ~v24)) & ~v24)) & ~v10) + 8;
  uint64_t v38 = (void (*)(uint64_t, uint64_t, uint64_t))v22;
  uint64_t v39 = (void *)(v37 + v45);
  uint64_t v40 = (void *)(v37 + v27);
  void *v39 = *v40;
  uint64_t v41 = ((unint64_t)v39 + v24 + 8) & ~v24;
  uint64_t v42 = ((unint64_t)v40 + v24 + 8) & ~v24;
  v38(v41, v42, v28);
  v38((v30 + v41) & ~v24, (v30 + v42) & ~v24, v28);
  return v49;
}

uint64_t sub_1DB0B25A8(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = a2;
  uint64_t v42 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v45 = a1;
  uint64_t v46 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v10 = v46 + v9;
  uint64_t v11 = (v46 + v9 + v8) & ~v9;
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v44 = v6;
  v6((v46 + v9 + a1) & ~v9, v11, AssociatedTypeWitness);
  uint64_t v12 = (v46 + v9 + ((v46 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v13 = (v46 + v9 + v11) & ~v9;
  v6(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = (v46 + v9 + v12) & ~v9;
  uint64_t v15 = (v46 + v9 + v13) & ~v9;
  v6(v14, v15, AssociatedTypeWitness);
  v6((v10 + v14) & ~v9, (v10 + v15) & ~v9, AssociatedTypeWitness);
  uint64_t v16 = (v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  uint64_t v20 = v18 + 32;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = v9 | 7;
  uint64_t v23 = v9 | 7 | v21;
  uint64_t v24 = v16 + v46 + v23;
  uint64_t v25 = (v24 + a1) & ~v23;
  uint64_t v40 = v25;
  uint64_t v43 = (v24 + v42) & ~v23;
  v19(v25, v43, v17);
  uint64_t v26 = *(void *)(v20 + 32);
  uint64_t v27 = v26 + v21;
  uint64_t v28 = (v26 + v21 + v25) & ~v21;
  uint64_t v29 = (v26 + v21 + v43) & ~v21;
  v19(v28, v29, v17);
  uint64_t v30 = (v26 + v21 + v28) & ~v21;
  uint64_t v31 = (v26 + v21 + v29) & ~v21;
  v19(v30, v31, v17);
  uint64_t v32 = (v26 + v22 + v30) & ~v22;
  uint64_t v33 = (v26 + v22 + v31) & ~v22;
  v44(v32, v33, v41);
  *(void *)((v46 + 7 + v32) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v46 + 7 + v33) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = ((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v26 + v22 + ((v27 + (v27 & ~v21)) & ~v21)) & ~v22) + 8;
  uint64_t v35 = (void *)(v34 + v40);
  uint64_t v36 = (void *)(v34 + v43);
  *uint64_t v35 = *v36;
  uint64_t v37 = ((unint64_t)v35 + v21 + 8) & ~v21;
  uint64_t v38 = ((unint64_t)v36 + v21 + 8) & ~v21;
  v19(v37, v38, v17);
  v19((v27 + v37) & ~v21, (v27 + v38) & ~v21, v17);
  return v45;
}

uint64_t sub_1DB0B295C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v8 = a2;
  uint64_t v41 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v45 = a1;
  uint64_t v46 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v10 = v46 + v9;
  uint64_t v11 = a1;
  uint64_t v12 = (v46 + v9 + v8) & ~v9;
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t v44 = v6;
  v6((v46 + v9 + a1) & ~v9, v12, AssociatedTypeWitness);
  uint64_t v13 = (v46 + v9 + ((v46 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v14 = (v46 + v9 + v12) & ~v9;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v46 + v9 + v13) & ~v9;
  uint64_t v16 = (v46 + v9 + v14) & ~v9;
  v6(v15, v16, AssociatedTypeWitness);
  v6((v10 + v15) & ~v9, (v10 + v16) & ~v9, AssociatedTypeWitness);
  uint64_t v17 = (v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9;
  uint64_t v18 = swift_checkMetadataState();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
  uint64_t v21 = v19 + 40;
  uint64_t v22 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v23 = v9 | 7;
  uint64_t v24 = v9 | 7 | v22;
  uint64_t v25 = v17 + v46 + v24;
  uint64_t v40 = (v25 + v11) & ~v24;
  uint64_t v42 = (v25 + v41) & ~v24;
  v20(v40, v42, v18);
  uint64_t v26 = *(void *)(v21 + 24);
  uint64_t v27 = v26 + v22;
  uint64_t v28 = (v26 + v22 + v40) & ~v22;
  uint64_t v29 = (v26 + v22 + v42) & ~v22;
  v20(v28, v29, v18);
  uint64_t v30 = (v26 + v22 + v28) & ~v22;
  uint64_t v31 = (v26 + v22 + v29) & ~v22;
  v20(v30, v31, v18);
  uint64_t v32 = (v26 + v23 + v30) & ~v23;
  uint64_t v33 = (v26 + v23 + v31) & ~v23;
  v44(v32, v33, v43);
  *(void *)((v46 + 7 + v32) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v46 + 7 + v33) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  unint64_t v34 = ((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v26 + v23 + ((v27 + (v27 & ~v22)) & ~v22)) & ~v23) + 8;
  uint64_t v35 = (void *)(v34 + v40);
  uint64_t v36 = (void *)(v34 + v42);
  *uint64_t v35 = *v36;
  uint64_t v37 = ((unint64_t)v35 + v22 + 8) & ~v22;
  uint64_t v38 = ((unint64_t)v36 + v22 + 8) & ~v22;
  v20(v37, v38, v18);
  v20((v27 + v37) & ~v22, (v27 + v38) & ~v22, v18);
  return v45;
}

uint64_t sub_1DB0B2D10(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(swift_checkMetadataState() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v6;
  }
  if (v13 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= v6) {
    unsigned int v15 = v6;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v8 > v15) {
    unsigned int v15 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = (v9 + v10 + ((v9 + v10 + ((v9 + v10 + ((v9 + v10) & ~v10)) & ~v10)) & ~v10)) & ~v10;
  uint64_t v17 = v10 | 7;
  uint64_t v18 = v17 | v11;
  uint64_t v19 = v16 + v9 + (v17 | v11);
  uint64_t v20 = v12 + v11;
  uint64_t v21 = v17 + v12;
  uint64_t v22 = v9 + 7;
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v11 + ((v17 + v12 + ((v12 + v11 + ((v12 + v11) & ~v11)) & ~v11)) & ~v17) + 16;
  if (a2 > v15)
  {
    uint64_t v24 = ((v20 + ((v23 + (v19 & ~v18)) & ~v11)) & ~v11) + v12;
    char v25 = 8 * v24;
    if (v24 > 3) {
      goto LABEL_15;
    }
    unsigned int v28 = ((a2 - v15 + ~(-1 << v25)) >> v25) + 1;
    if (HIWORD(v28))
    {
      int v26 = *(_DWORD *)((char *)a1 + v24);
      if (!v26) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v28 > 0xFF)
    {
      int v26 = *(unsigned __int16 *)((char *)a1 + v24);
      if (!*(unsigned __int16 *)((char *)a1 + v24)) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v28 >= 2)
    {
LABEL_15:
      int v26 = *((unsigned __int8 *)a1 + v24);
      if (!*((unsigned char *)a1 + v24)) {
        goto LABEL_33;
      }
LABEL_23:
      int v29 = (v26 - 1) << v25;
      if (v24 > 3) {
        int v29 = 0;
      }
      if (v24)
      {
        if (v24 <= 3) {
          int v30 = v24;
        }
        else {
          int v30 = 4;
        }
        switch(v30)
        {
          case 2:
            int v31 = *a1;
            break;
          case 3:
            int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v31 = *(_DWORD *)a1;
            break;
          default:
            int v31 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v31 = 0;
      }
      return v15 + (v31 | v29) + 1;
    }
  }
LABEL_33:
  if (v6 == v15)
  {
    uint64_t v32 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v33 = a1;
LABEL_35:
    return v32(v33, v6, AssociatedTypeWitness);
  }
  uint64_t v34 = ~v11;
  unint64_t v35 = ((unint64_t)a1 + v19) & ~v18;
  if (v14 != v15)
  {
    unint64_t v35 = (v23 + v35) & v34;
    goto LABEL_43;
  }
  if (v8 >= v13)
  {
LABEL_43:
    uint64_t v36 = *(uint64_t (**)(unint64_t))(v7 + 48);
    return v36(v35);
  }
  uint64_t v33 = (unsigned __int16 *)((v21 + ((v20 + ((v20 + v35) & v34)) & v34)) & ~v17);
  if (v6 >= 0x7FFFFFFF)
  {
    uint64_t v32 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
    goto LABEL_35;
  }
  unint64_t v37 = *(void *)(((unint64_t)v33 + v22) & 0xFFFFFFFFFFFFFFF8);
  if (v37 >= 0xFFFFFFFF) {
    LODWORD(v37) = -1;
  }
  return (v37 + 1);
}

void sub_1DB0B3150(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_checkMetadataState() - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v8;
  }
  if (v15 <= v10) {
    unsigned int v16 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v16 = v15;
  }
  if (v16 <= v8) {
    unsigned int v17 = v8;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v10 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v19 = v12 | 7;
  uint64_t v20 = v12 | 7 | v13;
  uint64_t v21 = ((v11 + v12 + ((v11 + v12 + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & ~v12)) & ~v12) + v11 + v20;
  uint64_t v22 = v14 + v13;
  uint64_t v23 = v19 + v14;
  uint64_t v24 = v11 + 7;
  size_t v25 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v26 = v13 + v25 + ((v19 + v14 + ((v14 + v13 + ((v14 + v13) & ~v13)) & ~v13)) & ~v19) + 8;
  size_t v27 = ((v14 + v13 + ((v26 + (v21 & ~v20)) & ~v13)) & ~v13) + v14;
  if (a3 <= v18)
  {
    int v28 = 0;
  }
  else if (v27 <= 3)
  {
    unsigned int v33 = ((a3 - v18 + ~(-1 << (8 * v27))) >> (8 * v27)) + 1;
    if (HIWORD(v33))
    {
      int v28 = 4;
    }
    else if (v33 >= 0x100)
    {
      int v28 = 2;
    }
    else
    {
      int v28 = v33 > 1;
    }
  }
  else
  {
    int v28 = 1;
  }
  if (v18 < a2)
  {
    unsigned int v29 = ~v18 + a2;
    if (v27 < 4)
    {
      int v30 = (v29 >> (8 * v27)) + 1;
      if (v27)
      {
        int v34 = v29 & ~(-1 << (8 * v27));
        bzero(a1, v27);
        if (v27 == 3)
        {
          *(_WORD *)a1 = v34;
          a1[2] = BYTE2(v34);
        }
        else if (v27 == 2)
        {
          *(_WORD *)a1 = v34;
        }
        else
        {
          *a1 = v34;
        }
      }
    }
    else
    {
      bzero(a1, v27);
      *(_DWORD *)a1 = v29;
      int v30 = 1;
    }
    switch(v28)
    {
      case 1:
        a1[v27] = v30;
        return;
      case 2:
        *(_WORD *)&a1[v27] = v30;
        return;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)&a1[v27] = v30;
        return;
      default:
        return;
    }
  }
  uint64_t v31 = ~v13;
  uint64_t v32 = ~v19;
  switch(v28)
  {
    case 1:
      a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_61:
      __break(1u);
      JUMPOUT(0x1DB0B3620);
    case 4:
      *(_DWORD *)&a1[v27] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (!a2) {
        return;
      }
LABEL_33:
      if (v8 == v18) {
        goto LABEL_34;
      }
      unint64_t v36 = (unint64_t)&a1[v21] & ~v20;
      if (v16 != v18)
      {
        unint64_t v36 = (v26 + v36) & v31;
        goto LABEL_46;
      }
      if (v10 >= v15)
      {
LABEL_46:
        uint64_t v38 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
        v38(v36, a2);
        return;
      }
      a1 = (unsigned char *)((v23 + ((v22 + ((v22 + v36) & v31)) & v31)) & v32);
      if (v15 >= a2)
      {
        if (v8 >= 0x7FFFFFFF)
        {
LABEL_34:
          unint64_t v35 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v35(a1, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v39 = (void *)((unint64_t)&a1[v24] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v40 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v40 = (a2 - 1);
          }
          void *v39 = v40;
        }
      }
      else if (v25)
      {
        int v37 = ~v15 + a2;
        bzero((void *)((v23 + ((v22 + ((v22 + v36) & v31)) & v31)) & v32), v25);
        *(_DWORD *)a1 = v37;
      }
      return;
  }
}

uint64_t _s6ServerVMa_1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s13ServerSecretsVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB0B3678()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1DB0B3710(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    unsigned int v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    unint64_t v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    unint64_t v17 = (v10 + v16) & v9;
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)v17, v5);
    unint64_t v18 = (v10 + v17) & v9;
    v15((uint64_t *)((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9), (uint64_t *)v18, v5);
    v15((uint64_t *)((v10 + ((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9)) & v9), (uint64_t *)((v10 + v18) & v9), v5);
  }
  return v4;
}

uint64_t sub_1DB0B38AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v11(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v11(v7, v3);
  uint64_t v8 = (v6 + v7) & ~v5;
  v11(v8, v3);
  uint64_t v9 = (v6 + v8) & ~v5;
  v11(v9, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)((v6 + v9) & ~v5, v3);
}

uint64_t sub_1DB0B39B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_1DB0B3AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_1DB0B3BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_1DB0B3CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v12) & ~v8, v5);
  return a1;
}

uint64_t sub_1DB0B3E00(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v9 = ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8) + v6;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v9 | v13) + 1;
}

void sub_1DB0B3F84(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9) + v8;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1DB0B41C4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v18 = *(void (**)(void))(v6 + 56);
        v18();
      }
      return;
  }
}

void *sub_1DB0B41EC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = v6;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (!v7) {
    return (void *)v9;
  }
  uint64_t v12 = (uint64_t)result;
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1DB04C238(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = v28;
    if (a2 <= v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v14 = v12;
    while (a2 != v14)
    {
      uint64_t v25 = v14;
      uint64_t result = sub_1DB0B46CC(&v25, a3, a4, a5, a6, &v26);
      if (v8)
      {
        swift_release();
        return (void *)v9;
      }
      uint64_t v8 = 0;
      long long v15 = v26;
      long long v16 = v27;
      uint64_t v28 = v9;
      unint64_t v18 = *(void *)(v9 + 16);
      unint64_t v17 = *(void *)(v9 + 24);
      if (v18 >= v17 >> 1)
      {
        long long v20 = v27;
        long long v21 = v26;
        uint64_t result = sub_1DB04C238((char *)(v17 > 1), v18 + 1, 1);
        long long v16 = v20;
        long long v15 = v21;
        uint64_t v9 = v28;
      }
      *(void *)(v9 + 16) = v18 + 1;
      uint64_t v19 = v9 + 32 * v18;
      *(_OWORD *)(v19 + 32) = v15;
      *(_OWORD *)(v19 + 48) = v16;
      if (a2 < v12) {
        goto LABEL_19;
      }
      if (v13 == v14) {
        goto LABEL_20;
      }
      if (a2 == ++v14) {
        return (void *)v9;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1DB0B434C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  cche_relin_key_sizeof();
  uint64_t v4 = cche_param_ctx_key_ctx_poly_nbytes();
  uint64_t v5 = cche_rng_seed_sizeof();
  unsigned int v6 = cche_param_ctx_key_ctx_nmoduli();
  uint64_t v7 = v6 - 1;
  unint64_t v8 = v7 * v4;
  if ((unsigned __int128)(v7 * (__int128)v4) >> 64 != (v7 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = v5;
  int64_t v10 = v7 * v5;
  uint64_t v26 = v9;
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != v10 >> 63)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unsigned int v25 = v6;
  if (v8)
  {
    uint64_t v11 = sub_1DB0C51B8();
    *(void *)(v11 + 16) = v8;
    bzero((void *)(v11 + 32), v7 * v4);
    v28[0] = v11;
    if ((v10 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v11 = MEMORY[0x1E4FBC860];
  v28[0] = MEMORY[0x1E4FBC860];
  if (v10 < 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v24 = a2;
  uint64_t v23 = v4;
  if (v10)
  {
    uint64_t v12 = sub_1DB0C51B8();
    *(void *)(v12 + 16) = v10;
    bzero((void *)(v12 + 32), v10);
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_11:
  swift_retain();
  uint64_t v13 = swift_slowAlloc();
  if (!*(void *)(a1 + 24))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  if (HIDWORD(v10)) {
    goto LABEL_25;
  }
  uint64_t v14 = v13;
  if (!ccrng()) {
    goto LABEL_29;
  }
  uint64_t v27 = v12;
  int v15 = cche_relin_key_generate();
  if (v15)
  {
    int v16 = v15;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v17 = v16;
    *(unsigned char *)(v17 + 4) = 0;
    swift_willThrow();
    swift_release();
LABEL_19:
    swift_release();
    swift_retain();
    MEMORY[0x1E0189230](v14, -1, -1);
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (HIDWORD(v8)) {
    goto LABEL_26;
  }
  v28[0] = v11;
  int v18 = cche_relin_key_save();
  if (v18)
  {
    int v19 = v18;
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = v19;
    *(unsigned char *)(v20 + 4) = 0;
    swift_willThrow();
    swift_release();
    goto LABEL_19;
  }
  if (!v25) {
    goto LABEL_27;
  }
  uint64_t v22 = sub_1DB0B41EC(0, v7, v23, v26, v28, &v27);
  swift_release();
  swift_release();
  swift_retain();
  MEMORY[0x1E0189230](v14, -1, -1);
  swift_release_n();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v24 = v22;
  return result;
}

uint64_t HE.SerializedRelinKey.relinKey.getter()
{
  return sub_1DB0C5188();
}

uint64_t HE.SerializedRelinKey.init(relinKey:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedRelinKey()
{
  return &type metadata for HE.SerializedRelinKey;
}

void *sub_1DB0B46CC@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = *result;
  uint64_t v7 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v9 = v6 * a2;
  if ((unsigned __int128)(v6 * (__int128)a2) >> 64 != (v6 * a2) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v10 = v7 * a2;
  if ((unsigned __int128)(v7 * (__int128)a2) >> 64 != (v7 * a2) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v11 = v6 * a3;
  if ((unsigned __int128)(v6 * (__int128)a3) >> 64 != (v6 * a3) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = v7 * a3;
  if ((unsigned __int128)(v7 * (__int128)a3) >> 64 != (v7 * a3) >> 63)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v10 < v9 || v12 < v11) {
    goto LABEL_22;
  }
  if (v9 < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v14 = *a4;
  unint64_t v15 = *(void *)(*a4 + 16);
  if (v15 < v9 || (uint64_t)v15 < v10) {
    goto LABEL_24;
  }
  uint64_t v17 = (2 * v10) | 1;
  uint64_t v18 = sub_1DB0C5188();
  int v19 = sub_1DB0672BC(v18, v14 + 32, v9, v17);
  uint64_t v21 = v20;
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v11 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v22 = *a5;
  unint64_t v23 = *(void *)(v22 + 16);
  if (v23 >= v11 && (uint64_t)v23 >= v12)
  {
    uint64_t v24 = sub_1DB0C5188();
    unsigned int v25 = sub_1DB0672BC(v24, v22 + 32, v11, (2 * v12) | 1);
    uint64_t v27 = v26;
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *a6 = v19;
    a6[1] = v21;
    a6[2] = v25;
    a6[3] = v27;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1DB0B4838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  unint64_t v89 = *(void *)(a2 + 16);
  if (HIDWORD(v89))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t v6 = cche_galois_key_sizeof();
  uint64_t v7 = cche_param_ctx_key_ctx_poly_nbytes();
  uint64_t v8 = cche_rng_seed_sizeof();
  unsigned int v9 = cche_param_ctx_key_ctx_nmoduli();
  uint64_t v10 = v9 - 1;
  uint64_t v11 = v89 * v10;
  if ((unsigned __int128)((uint64_t)v89 * (__int128)v10) >> 64 != (uint64_t)(v89 * v10) >> 63)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  uint64_t v92 = v9 - 1;
  size_t v12 = v11 * v7;
  if ((unsigned __int128)(v11 * (__int128)v7) >> 64 != (v11 * v7) >> 63)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  size_t v13 = v11 * v8;
  if ((unsigned __int128)(v11 * (__int128)v8) >> 64 != (v11 * v8) >> 63)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unsigned int v82 = v9;
  uint64_t v86 = a1;
  unint64_t v80 = a4;
  if (v12)
  {
    uint64_t v14 = sub_1DB0C51B8();
    *(void *)(v14 + 16) = v12;
    bzero((void *)(v14 + 32), v12);
    if ((v13 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if ((v13 & 0x8000000000000000) != 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!v13)
  {
LABEL_12:
    uint64_t v15 = MEMORY[0x1E4FBC860];
    goto LABEL_13;
  }
  uint64_t v15 = sub_1DB0C51B8();
  *(void *)(v15 + 16) = v13;
  bzero((void *)(v15 + 32), v13);
LABEL_13:
  type metadata accessor for HE.ObjectStorage();
  uint64_t inited = (void *)swift_initStackObject();
  inited[2] = v86;
  swift_retain();
  uint64_t v93 = swift_slowAlloc();
  inited[3] = v93;
  inited[4] = v93 + v6;
  if (!*(void *)(a3 + 24))
  {
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
  }
  if (HIDWORD(v13)) {
    goto LABEL_98;
  }
  uint64_t v91 = v8;
  uint64_t v95 = v15;
  LODWORD(v99[0]) = 0;
  if (!ccrng()) {
    goto LABEL_106;
  }
  int v17 = cche_galois_key_generate();
  if (v17)
  {
    int v18 = v17;
LABEL_21:
    swift_bridgeObjectRelease();
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = v18;
    *(unsigned char *)(v20 + 4) = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_setDeallocating();
    swift_retain();
    MEMORY[0x1E0189230](v93, -1, -1);
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (HIDWORD(v12)) {
    goto LABEL_102;
  }
  int v19 = cche_galois_key_save();
  if (v19)
  {
    int v18 = v19;
    goto LABEL_21;
  }
  uint64_t v22 = MEMORY[0x1E4FBC860];
  unint64_t v23 = sub_1DB08A034(MEMORY[0x1E4FBC860]);
  uint64_t v24 = a2;
  uint64_t v78 = *(void *)(a2 + 16);
  if (!v78)
  {
    uint64_t v74 = (void *)v23;
    swift_release();
    swift_release();
    goto LABEL_79;
  }
  uint64_t v88 = v14 + 32;
  if (!v82) {
    goto LABEL_104;
  }
  unint64_t v25 = 0;
  uint64_t v94 = v14;
  int64_t v26 = v92;
  uint64_t v87 = v7;
  do
  {
    if (v25 >= *(void *)(v24 + 16)) {
      goto LABEL_99;
    }
    unsigned int v83 = *(_DWORD *)(a2 + 32 + 4 * v25);
    unint64_t v81 = v25;
    if (v26)
    {
      unint64_t v79 = v23;
      uint64_t v98 = v22;
      sub_1DB04C238(0, v26, 0);
      int64_t v90 = v25 * v26;
      if ((unsigned __int128)((uint64_t)v25 * (__int128)v26) >> 64 != (uint64_t)(v25 * v26) >> 63)
      {
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
      uint64_t v28 = 0;
      while (1)
      {
        uint64_t v29 = v90 + v28;
        if (__OFADD__(v90, v28)) {
          break;
        }
        uint64_t v30 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          goto LABEL_81;
        }
        uint64_t v31 = v29 * v7;
        if ((unsigned __int128)(v29 * (__int128)v7) >> 64 != (v29 * v7) >> 63) {
          goto LABEL_82;
        }
        uint64_t v32 = v30 * v7;
        if ((unsigned __int128)(v30 * (__int128)v7) >> 64 != (v30 * v7) >> 63) {
          goto LABEL_83;
        }
        uint64_t v33 = v29 * v8;
        if ((unsigned __int128)(v29 * (__int128)v8) >> 64 != (v29 * v8) >> 63) {
          goto LABEL_84;
        }
        uint64_t v34 = v30 * v8;
        if ((unsigned __int128)(v30 * (__int128)v8) >> 64 != (v30 * v8) >> 63) {
          goto LABEL_85;
        }
        if (v32 < v31 || v34 < v33) {
          goto LABEL_86;
        }
        if (v31 < 0) {
          goto LABEL_87;
        }
        uint64_t v35 = *(void *)(v14 + 16);
        if (v35 < (unint64_t)v31 || v35 < v32) {
          goto LABEL_88;
        }
        uint64_t v36 = (2 * v32) | 1;
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE3A0);
        uint64_t v100 = v37;
        unint64_t v38 = sub_1DB0B5620();
        unint64_t v101 = v38;
        uint64_t v39 = (void *)swift_allocObject();
        v99[0] = v39;
        v39[2] = v14;
        v39[3] = v88;
        v39[4] = v31;
        v39[5] = v36;
        uint64_t v40 = __swift_project_boxed_opaque_existential_1(v99, v37);
        uint64_t v41 = v40[2];
        uint64_t v42 = v40[3] >> 1;
        uint64_t v43 = v42 - v41;
        if (__OFSUB__(v42, v41)) {
          goto LABEL_89;
        }
        if (v43)
        {
          uint64_t v44 = (const void *)(v40[1] + v41);
          if (v43 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v97 = v42 - v41;
            memcpy(__dst, v44, v42 - v41);
            uint64_t v47 = *(void *)__dst;
            unint64_t v48 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v97 << 48);
            swift_bridgeObjectRetain_n();
          }
          else
          {
            sub_1DB0C48F8();
            swift_allocObject();
            swift_bridgeObjectRetain_n();
            uint64_t v45 = sub_1DB0C4898();
            uint64_t v46 = v45;
            if ((unint64_t)v43 >= 0x7FFFFFFF)
            {
              sub_1DB0C4988();
              uint64_t v47 = swift_allocObject();
              *(void *)(v47 + 16) = 0;
              *(void *)(v47 + 24) = v43;
              unint64_t v48 = v46 | 0x8000000000000000;
            }
            else
            {
              uint64_t v47 = v43 << 32;
              unint64_t v48 = v45 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v47 = 0;
          unint64_t v48 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        if (v33 < 0) {
          goto LABEL_90;
        }
        uint64_t v49 = *(void *)(v95 + 16);
        if (v49 < (unint64_t)v33 || v49 < v34) {
          goto LABEL_91;
        }
        uint64_t v100 = v37;
        unint64_t v101 = v38;
        long long v50 = (void *)swift_allocObject();
        v99[0] = v50;
        v50[2] = v95;
        v50[3] = v95 + 32;
        void v50[4] = v33;
        v50[5] = (2 * v34) | 1;
        long long v51 = __swift_project_boxed_opaque_existential_1(v99, v37);
        uint64_t v52 = v51[2];
        uint64_t v53 = v51[3] >> 1;
        uint64_t v54 = v53 - v52;
        if (__OFSUB__(v53, v52)) {
          goto LABEL_92;
        }
        if (v54)
        {
          uint64_t v55 = (const void *)(v51[1] + v52);
          if (v54 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v97 = v53 - v52;
            memcpy(__dst, v55, v53 - v52);
            uint64_t v58 = *(void *)__dst;
            unint64_t v59 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v97 << 48);
            swift_bridgeObjectRetain_n();
          }
          else
          {
            sub_1DB0C48F8();
            swift_allocObject();
            swift_bridgeObjectRetain_n();
            uint64_t v56 = sub_1DB0C4898();
            uint64_t v57 = v56;
            if ((unint64_t)v54 >= 0x7FFFFFFF)
            {
              sub_1DB0C4988();
              uint64_t v58 = swift_allocObject();
              *(void *)(v58 + 16) = 0;
              *(void *)(v58 + 24) = v54;
              unint64_t v59 = v57 | 0x8000000000000000;
            }
            else
            {
              uint64_t v58 = v54 << 32;
              unint64_t v59 = v56 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v58 = 0;
          unint64_t v59 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        uint64_t v60 = v98;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1DB04C238(0, *(void *)(v60 + 16) + 1, 1);
          uint64_t v60 = v98;
        }
        unint64_t v62 = *(void *)(v60 + 16);
        unint64_t v61 = *(void *)(v60 + 24);
        if (v62 >= v61 >> 1)
        {
          sub_1DB04C238((char *)(v61 > 1), v62 + 1, 1);
          uint64_t v60 = v98;
        }
        ++v28;
        *(void *)(v60 + 16) = v62 + 1;
        uint64_t v63 = (void *)(v60 + 32 * v62);
        v63[4] = v47;
        v63[5] = v48;
        v63[6] = v58;
        v63[7] = v59;
        uint64_t v14 = v94;
        uint64_t v7 = v87;
        uint64_t v8 = v91;
        if (v92 == v28)
        {
          uint64_t v22 = MEMORY[0x1E4FBC860];
          unint64_t v23 = v79;
          goto LABEL_68;
        }
      }
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    uint64_t v60 = v22;
LABEL_68:
    unint64_t v64 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v99[0] = v64;
    unint64_t v67 = sub_1DB089930(v83);
    uint64_t v68 = *(void *)(v64 + 16);
    BOOL v69 = (v66 & 1) == 0;
    uint64_t v70 = v68 + v69;
    if (__OFADD__(v68, v69)) {
      goto LABEL_100;
    }
    char v71 = v66;
    if (*(void *)(v64 + 24) >= v70)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1DB0B5478();
      }
    }
    else
    {
      sub_1DB0B51C4(v70, isUniquelyReferenced_nonNull_native);
      unint64_t v72 = sub_1DB089930(v83);
      if ((v71 & 1) != (v73 & 1))
      {
        uint64_t result = sub_1DB0C5408();
        __break(1u);
        return result;
      }
      unint64_t v67 = v72;
    }
    uint64_t v8 = v91;
    uint64_t v74 = (void *)v99[0];
    if (v71)
    {
      uint64_t v27 = *(void *)(v99[0] + 56);
      swift_bridgeObjectRelease();
      *(void *)(v27 + 8 * v67) = v60;
    }
    else
    {
      *(void *)(v99[0] + 8 * (v67 >> 6) + 64) |= 1 << v67;
      *(_DWORD *)(v74[6] + 4 * v67) = v83;
      *(void *)(v74[7] + 8 * v67) = v60;
      uint64_t v75 = v74[2];
      BOOL v76 = __OFADD__(v75, 1);
      uint64_t v77 = v75 + 1;
      if (v76) {
        goto LABEL_103;
      }
      v74[2] = v77;
    }
    unint64_t v25 = v81 + 1;
    swift_bridgeObjectRelease();
    uint64_t v24 = a2;
    int64_t v26 = v92;
    unint64_t v23 = (unint64_t)v74;
  }
  while (v81 + 1 != v78);
  swift_release();
  swift_release();
LABEL_79:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v80 = v74;
  return result;
}

uint64_t HE.SerializedGaloisKey.galoisKey.getter()
{
  return sub_1DB0C5188();
}

uint64_t HE.SerializedGaloisKey.init(galoisKey:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedGaloisKey()
{
  return &type metadata for HE.SerializedGaloisKey;
}

uint64_t sub_1DB0B51C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE988);
  uint64_t result = sub_1DB0C5398();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unsigned int v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    uint64_t v30 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if (a2)
              {
                if (v30 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v31);
                }
                else {
                  *unsigned int v9 = v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v19);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        sub_1DB0C5188();
      }
      uint64_t result = MEMORY[0x1E0188370](*(void *)(v7 + 40), v27, 4);
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_1DB0B5478()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE988);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1DB0C5388();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)sub_1DB0C5188();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1DB0B5620()
{
  unint64_t result = qword_1EA8FE3A8;
  if (!qword_1EA8FE3A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FE3A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FE3A8);
  }
  return result;
}

uint64_t sub_1DB0B567C()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1DB0B56B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  unsigned __int8 v15 = *a3;
  *(void *)&long long v28 = *a2;
  *((void *)&v28 + 1) = v14;
  unsigned __int8 v33 = v15;
  unint64_t v16 = swift_retain();
  sub_1DB053110(v16, (uint64_t *)&v28, &v33, a4, a6, (uint64_t)&v29);
  if (v7)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v27 = v13;
    long long v18 = v29;
    uint64_t v19 = v30;
    uint64_t v20 = v31;
    sub_1DB0C5188();
    swift_retain();
    uint64_t v26 = sub_1DB0B5AA4(v20, v18, *((uint64_t *)&v18 + 1), v19, v20, a5);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (*(void *)(v20 + 16))
    {
      uint64_t v21 = *(void *)(*(void *)(v20 + 32) + 16);
      unsigned __int8 v22 = *(unsigned char *)(v21 + 40);
      LOBYTE(v21) = *(unsigned char *)(v21 + 41);
      unsigned __int8 v33 = v22;
      char v34 = v21;
      long long v28 = v18;
      unsigned __int8 v32 = v19;
      PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)(&v33, (uint64_t *)&v28, &v32, v26, (uint64_t)&v29);
      swift_bridgeObjectRelease();
      char v23 = *(unsigned char *)(a1 + 41);
      unsigned __int8 v33 = *(unsigned char *)(a1 + 40);
      char v34 = v23;
      *(void *)&long long v28 = v27;
      *((void *)&v28 + 1) = v14;
      unsigned __int8 v32 = v15;
      PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)(&v33, (uint64_t *)&v28, &v32, v31, (uint64_t)&v29);
      swift_release();
      uint64_t result = swift_release();
      unsigned __int8 v24 = v30;
      uint64_t v25 = v31;
      *(_OWORD *)a7 = v29;
      *(unsigned char *)(a7 + 16) = v24;
      *(void *)(a7 + 24) = v25;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!*(void *)(a4 + 16)) {
    goto LABEL_6;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unsigned __int8 v10 = *a3;
  char v11 = a1[1];
  v16[0] = *a1;
  v16[1] = v11;
  v15[0] = v8;
  v15[1] = v9;
  unsigned __int8 v14 = v10;
  uint64_t result = sub_1DB053CB4((uint64_t)v16, v15, &v14);
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  if (*(void *)(a4 + 16) == result)
  {
    *(void *)a5 = v8;
    *(void *)(a5 + 8) = v9;
    *(unsigned char *)(a5 + 16) = v10;
    *(void *)(a5 + 24) = a4;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(unsigned char *)(v13 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

void PEC.SerializedCiphertextCoeffMatrix.packing.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.ciphertexts.getter()
{
  return sub_1DB0C5188();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.rowCount.getter()
{
  return *(void *)v0;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.colCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_1DB0C5188();
  return a1;
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31SerializedCiphertextCoeffMatrixVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PEC.SerializedCiphertextCoeffMatrix()
{
  return &type metadata for PEC.SerializedCiphertextCoeffMatrix;
}

uint64_t sub_1DB0B5AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v6) {
    return v7;
  }
  uint64_t v45 = MEMORY[0x1E4FBC860];
  sub_1DB04C238(0, v6, 0);
  uint64_t v39 = *(void *)(a5 + 32);
  uint64_t result = cche_rng_seed_sizeof();
  if (!*(void *)(a5 + 16)) {
    goto LABEL_34;
  }
  char v11 = (uint64_t *)(a1 + 32);
  uint64_t v7 = v45;
  uint64_t v12 = result;
  unint64_t v38 = (unint64_t)result << 48;
  type metadata accessor for HE.ObjectStorage();
  uint64_t v41 = v12;
  uint64_t v37 = v12 << 32;
  while (1)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = *(void *)(v39 + 16);
    unsigned int v15 = cche_param_ctx_ciphertext_ctx_nmoduli();
    uint64_t v16 = cche_ciphertext_sizeof();
    uint64_t inited = (void *)swift_initStackObject();
    inited[2] = v14;
    swift_retain_n();
    uint64_t v42 = v13;
    swift_retain();
    uint64_t result = swift_slowAlloc();
    uint64_t v18 = result;
    inited[3] = result;
    inited[4] = result + v16;
    if (!v41)
    {
      uint64_t result = 0;
      unint64_t v21 = 0xC000000000000000;
      goto LABEL_12;
    }
    if (v41 < 15) {
      break;
    }
    sub_1DB0C48F8();
    swift_allocObject();
    uint64_t v19 = sub_1DB0C48B8();
    uint64_t v20 = v19;
    if ((unint64_t)v41 >= 0x7FFFFFFF)
    {
      sub_1DB0C4988();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = v41;
      unint64_t v21 = v20 | 0x8000000000000000;
    }
    else
    {
      unint64_t v21 = v19 | 0x4000000000000000;
      uint64_t result = v37;
    }
LABEL_12:
    v44[0] = result;
    v44[1] = v21;
    uint64_t v22 = *(void *)(v42 + 24);
    if (!v22) {
      goto LABEL_35;
    }
    uint64_t v23 = *(void *)(a6 + 24);
    if (!v23) {
      goto LABEL_36;
    }
    swift_retain();
    int v24 = sub_1DB0AF824(v44, v18, v22, v14, v23, v15);
    swift_release();
    if (v24)
    {
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v34 = v24;
      *(unsigned char *)(v34 + 4) = 0;
      swift_willThrow();
      swift_release();
LABEL_30:
      sub_1DB042664(v44[0], v44[1]);
      swift_release();
      swift_release();
      swift_release();
      return v7;
    }
    long long v25 = *(_OWORD *)v44;
    uint64_t result = cche_serialize_seeded_ciphertext_coeff_nbytes();
    if (result)
    {
      unint64_t v26 = result;
      if (result <= 14)
      {
        if (result < 0) {
          goto LABEL_33;
        }
        uint64_t result = 0;
        unint64_t v28 = (unint64_t)v26 << 48;
      }
      else
      {
        sub_1DB0C48F8();
        swift_allocObject();
        uint64_t v27 = sub_1DB0C48B8();
        if (v26 >= 0x7FFFFFFF)
        {
          sub_1DB0C4988();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = 0;
          *(void *)(result + 24) = v26;
          unint64_t v28 = v27 | 0x8000000000000000;
        }
        else
        {
          uint64_t result = v26 << 32;
          unint64_t v28 = v27 | 0x4000000000000000;
        }
      }
    }
    else
    {
      unint64_t v28 = 0xC000000000000000;
    }
    v44[0] = result;
    v44[1] = v28;
    int v29 = sub_1DB0AFC80(v44, (uint64_t)inited);
    if (v29)
    {
      int v35 = v29;
      sub_1DB04D0D4();
      swift_allocError();
      *(_DWORD *)uint64_t v36 = v35;
      *(unsigned char *)(v36 + 4) = 0;
      swift_willThrow();
      swift_release();
      sub_1DB042664(v25, *((unint64_t *)&v25 + 1));
      goto LABEL_30;
    }
    swift_release();
    swift_release();
    swift_release();
    long long v30 = *(_OWORD *)v44;
    uint64_t v45 = v7;
    unint64_t v32 = *(void *)(v7 + 16);
    unint64_t v31 = *(void *)(v7 + 24);
    if (v32 >= v31 >> 1)
    {
      long long v43 = *(_OWORD *)v44;
      sub_1DB04C238((char *)(v31 > 1), v32 + 1, 1);
      long long v30 = v43;
      uint64_t v7 = v45;
    }
    *(void *)(v7 + 16) = v32 + 1;
    uint64_t v33 = v7 + 32 * v32;
    *(_OWORD *)(v33 + 32) = v30;
    *(_OWORD *)(v33 + 48) = v25;
    ++v11;
    if (!--v6) {
      return v7;
    }
  }
  if ((v41 & 0x8000000000000000) == 0)
  {
    uint64_t result = 0;
    unint64_t v21 = v38;
    goto LABEL_12;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1DB0B5EA4()
{
  unint64_t v0 = HE.RlweParams.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == HE.RlweParams.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1DB0C53D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1DB0B5F3C(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 5654338;
  }
  else {
    uint64_t v2 = 5654082;
  }
  if (a2) {
    uint64_t v3 = 5654338;
  }
  else {
    uint64_t v3 = 5654082;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_1DB0C53D8();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1DB0B5FA8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x316D75746E617571;
  }
  else {
    uint64_t v3 = 0x656B636568636E75;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000064;
  }
  else {
    unint64_t v4 = 0xEA00000000003832;
  }
  if (a2) {
    uint64_t v5 = 0x316D75746E617571;
  }
  else {
    uint64_t v5 = 0x656B636568636E75;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000003832;
  }
  else {
    unint64_t v6 = 0xE900000000000064;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1DB0C53D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_1DB0B605C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  unint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL sub_1DB0B60D0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  unint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t HE.RlweParams.plaintextModulus.getter()
{
  return cche_encryption_params_plaintext_modulus();
}

uint64_t HE.RlweParams.init(inParams:plaintextModulus:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = qword_1F353B208;
  if (!qword_1F353B208)
  {
LABEL_40:
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 5;
    *(unsigned char *)(v21 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  uint64_t v23 = qword_1F353B208;
  char v25 = *a1;
  while (1)
  {
    char v6 = *((unsigned char *)&unk_1F353B1F8 + v5 + 32);
    int v7 = cche_encryption_params_polynomial_degree();
    if (v7 != cche_encryption_params_polynomial_degree()
      || cche_encryption_params_plaintext_modulus() != v4)
    {
      goto LABEL_4;
    }
    uint64_t result = cche_encryption_params_coefficient_nmoduli();
    if (result < 0)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v9 = result;
    if (result)
    {
      uint64_t v10 = sub_1DB0C51B8();
      *(void *)(v10 + 16) = v9;
    }
    else
    {
      uint64_t v10 = MEMORY[0x1E4FBC860];
    }
    cche_encryption_params_coefficient_moduli();
    *(void *)(v10 + 16) = v9;
    uint64_t result = cche_encryption_params_coefficient_nmoduli();
    if (result < 0) {
      goto LABEL_44;
    }
    uint64_t v11 = result;
    if (result)
    {
      uint64_t v12 = sub_1DB0C51B8();
      *(void *)(v12 + 16) = v11;
    }
    else
    {
      uint64_t v12 = MEMORY[0x1E4FBC860];
    }
    uint64_t result = cche_encryption_params_coefficient_moduli();
    *(void *)(v12 + 16) = v11;
    if (*(void *)(v10 + 16) != v11)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = v23;
      uint64_t v4 = a2;
      goto LABEL_4;
    }
    if (v11 && v10 != v12)
    {
      if (*(void *)(v10 + 32) != *(void *)(v12 + 32)) {
        goto LABEL_3;
      }
      uint64_t v13 = v11 - 1;
      if (v11 != 1) {
        break;
      }
    }
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v15 = 0x1EFFCu >> v6;
    if (((1 << v25) & 0x1EFFC) != 0) {
      uint64_t v16 = 0x316D75746E617571;
    }
    else {
      uint64_t v16 = 0x656B636568636E75;
    }
    if (((1 << v25) & 0x1EFFC) != 0) {
      unint64_t v17 = 0xEA00000000003832;
    }
    else {
      unint64_t v17 = 0xE900000000000064;
    }
    if (v15) {
      uint64_t v18 = 0x316D75746E617571;
    }
    else {
      uint64_t v18 = 0x656B636568636E75;
    }
    if (v15) {
      unint64_t v19 = 0xEA00000000003832;
    }
    else {
      unint64_t v19 = 0xE900000000000064;
    }
    if (v18 == v16 && v19 == v17)
    {
      uint64_t result = swift_bridgeObjectRelease_n();
LABEL_42:
      *a3 = v6;
      return result;
    }
    char v20 = sub_1DB0C53D8();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v23;
    uint64_t v4 = a2;
    if (v20) {
      goto LABEL_42;
    }
LABEL_4:
    if (++v5 == v3) {
      goto LABEL_40;
    }
  }
  uint64_t v14 = 0;
  while (v13 != v14)
  {
    if (*(void *)(v10 + 40 + 8 * v14) != *(void *)(v12 + 8 * v14 + 40)) {
      goto LABEL_3;
    }
    if (v13 == ++v14) {
      goto LABEL_24;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

unsigned char *HE.EncryptionParams.init(rlweParams:scheme:)@<X0>(unsigned char *result@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  char v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

uint64_t HE.RlweParams.encodeSimdColCount.getter()
{
  return cche_encryption_params_polynomial_degree() >> 1;
}

uint64_t HE.RlweParams.encodeSimdRowCount.getter()
{
  return 2;
}

uint64_t HE.RlweParams.polynomialDegree.getter()
{
  return cche_encryption_params_polynomial_degree();
}

void HE.EncryptionParams.rlweParams.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void HE.EncryptionParams.scheme.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

void *static HE.RlweParams.allCases.getter()
{
  return &unk_1F353B1F8;
}

uint64_t HE.RlweParams.coefficientModuli.getter()
{
  uint64_t result = cche_encryption_params_coefficient_nmoduli();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    if (result)
    {
      uint64_t v2 = sub_1DB0C51B8();
      *(void *)(v2 + 16) = v1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4FBC860];
    }
    cche_encryption_params_coefficient_moduli();
    *(void *)(v2 + 16) = v1;
    return v2;
  }
  return result;
}

void HE.RlweParams.securityLevel.getter(unsigned char *a1@<X8>)
{
  *a1 = byte_1DB0CA150[*v1];
}

BOOL HE.RlweParams.supportsEvaluationKey.getter()
{
  unint64_t v0 = *(void *)(HE.RlweParams.coefficientModuli.getter() + 16);
  swift_bridgeObjectRelease();
  return v0 > 1;
}

uint64_t HE.RlweParams.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1DB0C53F8();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 17;
  if (v2 < 0x11) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

unint64_t HE.RlweParams.rawValue.getter()
{
  unint64_t result = 0xD00000000000001DLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000020;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
    case 9:
    case 0xA:
    case 0xB:
    case 0xE:
    case 0xF:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD000000000000018;
      break;
    case 0xC:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0xD:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x10:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DB0B67C4()
{
  return sub_1DB0B5EA4();
}

uint64_t sub_1DB0B67D0()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0B6838()
{
  HE.RlweParams.rawValue.getter();
  sub_1DB0C50A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DB0B689C()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0B6900@<X0>(char *a1@<X8>)
{
  return HE.RlweParams.init(rawValue:)(a1);
}

unint64_t sub_1DB0B690C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = HE.RlweParams.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1DB0B6934(void *a1@<X8>)
{
  *a1 = &unk_1F353B1F8;
}

uint64_t sub_1DB0B6944()
{
  return sub_1DB0C5148();
}

uint64_t sub_1DB0B69A4()
{
  return sub_1DB0C5138();
}

uint64_t sub_1DB0B69F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1DB0B79E0();
  return MEMORY[0x1F4183E58](a1, a2, v4);
}

uint64_t sub_1DB0B6A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1DB0B79E0();
  return MEMORY[0x1F4183E60](a1, a4, a2, a5, v10, a3);
}

uint64_t HE.SecurityLevel.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1DB0B6EA8(a1);
}

void *static HE.SecurityLevel.allCases.getter()
{
  return &unk_1F353B4C0;
}

uint64_t HE.SecurityLevel.rawValue.getter()
{
  if (*v0) {
    return 0x316D75746E617571;
  }
  else {
    return 0x656B636568636E75;
  }
}

uint64_t sub_1DB0B6B20(char *a1, char *a2)
{
  return sub_1DB0B5FA8(*a1, *a2);
}

uint64_t sub_1DB0B6B2C()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0B6BB8()
{
  sub_1DB0C50A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DB0B6C30()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0B6CB8@<X0>(char *a1@<X8>)
{
  return HE.SecurityLevel.init(rawValue:)(a1);
}

void sub_1DB0B6CC4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656B636568636E75;
  if (*v1) {
    uint64_t v2 = 0x316D75746E617571;
  }
  unint64_t v3 = 0xE900000000000064;
  if (*v1) {
    unint64_t v3 = 0xEA00000000003832;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1DB0B6D0C(void *a1@<X8>)
{
  *a1 = &unk_1F353B5C8;
}

uint64_t sub_1DB0B6D1C()
{
  return sub_1DB0C5148();
}

uint64_t sub_1DB0B6D7C()
{
  return sub_1DB0C5138();
}

uint64_t sub_1DB0B6DCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1DB0B798C();
  return MEMORY[0x1F4183E58](a1, a2, v4);
}

uint64_t sub_1DB0B6E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1DB0B798C();
  return MEMORY[0x1F4183E60](a1, a4, a2, a5, v10, a3);
}

uint64_t HE.Scheme.init(rawValue:)@<X0>(char *a1@<X8>)
{
  return sub_1DB0B6EA8(a1);
}

uint64_t sub_1DB0B6EA8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1DB0C53B8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void *static HE.Scheme.allCases.getter()
{
  return &unk_1F353B8E0;
}

uint64_t HE.Scheme.rawValue.getter()
{
  if (*v0) {
    return 5654338;
  }
  else {
    return 5654082;
  }
}

uint64_t sub_1DB0B6F34(char *a1, char *a2)
{
  return sub_1DB0B5F3C(*a1, *a2);
}

uint64_t sub_1DB0B6F40()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0B6FA4()
{
  sub_1DB0C50A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DB0B6FEC()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0B704C@<X0>(char *a1@<X8>)
{
  return HE.Scheme.init(rawValue:)(a1);
}

void sub_1DB0B7058(uint64_t *a1@<X8>)
{
  if (*v1) {
    uint64_t v2 = 5654338;
  }
  else {
    uint64_t v2 = 5654082;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

void sub_1DB0B707C(void *a1@<X8>)
{
  *a1 = &unk_1F353B9E8;
}

uint64_t sub_1DB0B708C()
{
  return sub_1DB0C5148();
}

uint64_t sub_1DB0B70EC()
{
  return sub_1DB0C5138();
}

uint64_t sub_1DB0B713C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1DB0B7938();
  return MEMORY[0x1F4183E58](a1, a2, v4);
}

uint64_t sub_1DB0B7190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1DB0B7938();
  return MEMORY[0x1F4183E60](a1, a4, a2, a5, v10, a3);
}

uint64_t _s16CryptoKitPrivate2HEO16EncryptionParamsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  int v3 = *(unsigned __int8 *)(a2 + 1);
  unint64_t v4 = HE.RlweParams.rawValue.getter();
  uint64_t v6 = v5;
  if (v4 == HE.RlweParams.rawValue.getter() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = sub_1DB0C53D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v10 = 0;
    if ((v9 & 1) == 0) {
      return v10 & 1;
    }
  }
  if (v2) {
    uint64_t v11 = 5654338;
  }
  else {
    uint64_t v11 = 5654082;
  }
  if (v3) {
    uint64_t v12 = 5654338;
  }
  else {
    uint64_t v12 = 5654082;
  }
  if (v11 == v12) {
    char v10 = 1;
  }
  else {
    char v10 = sub_1DB0C53D8();
  }
  swift_bridgeObjectRelease_n();
  return v10 & 1;
}

unint64_t sub_1DB0B7318()
{
  unint64_t result = qword_1EA8FECD0;
  if (!qword_1EA8FECD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FECD0);
  }
  return result;
}

uint64_t sub_1DB0B736C()
{
  return sub_1DB0B7494(&qword_1EA8FECD8, &qword_1EA8FECE0);
}

unint64_t sub_1DB0B7398()
{
  unint64_t result = qword_1EBE7D868;
  if (!qword_1EBE7D868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE7D868);
  }
  return result;
}

uint64_t sub_1DB0B73EC()
{
  return sub_1DB0B7494(&qword_1EA8FECE8, &qword_1EA8FECF0);
}

unint64_t sub_1DB0B7418()
{
  unint64_t result = qword_1EA8FECF8;
  if (!qword_1EA8FECF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FECF8);
  }
  return result;
}

uint64_t sub_1DB0B746C()
{
  return sub_1DB0B7494(&qword_1EA8FED00, &qword_1EA8FED08);
}

uint64_t sub_1DB0B7494(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s16EncryptionParamsVwet(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t _s16EncryptionParamsVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB0B7650);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.EncryptionParams()
{
  return &type metadata for HE.EncryptionParams;
}

uint64_t _s10RlweParamsOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10RlweParamsOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB0B77E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.RlweParams()
{
  return &type metadata for HE.RlweParams;
}

ValueMetadata *type metadata accessor for HE.SecurityLevel()
{
  return &type metadata for HE.SecurityLevel;
}

unsigned char *_s6SchemeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB0B7900);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.Scheme()
{
  return &type metadata for HE.Scheme;
}

unint64_t sub_1DB0B7938()
{
  unint64_t result = qword_1EBE7D878;
  if (!qword_1EBE7D878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE7D878);
  }
  return result;
}

unint64_t sub_1DB0B798C()
{
  unint64_t result = qword_1EBE7D870;
  if (!qword_1EBE7D870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE7D870);
  }
  return result;
}

unint64_t sub_1DB0B79E0()
{
  unint64_t result = qword_1EBE7D860;
  if (!qword_1EBE7D860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE7D860);
  }
  return result;
}

uint64_t _s20SerializedCiphertextOwxx(uint64_t a1)
{
  return sub_1DB04DE48(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *_s20SerializedCiphertextOwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1DB04DDDC(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *_s20SerializedCiphertextOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1DB04DDDC(*a2, v4, v5, v6);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1DB04DE48(v7, v8, v9, v10);
  return a1;
}

uint64_t *_s20SerializedCiphertextOwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3];
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1DB04DE48(v3, v5, v4, v6);
  return a1;
}

uint64_t _s20SerializedCiphertextOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s20SerializedCiphertextOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_1DB0B7BEC(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_1DB0B7BF8(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1DB0B7C08(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for HE.SerializedCiphertext()
{
  return &type metadata for HE.SerializedCiphertext;
}

char *sub_1DB0B7C30(void *(*a1)(void *__return_ptr, int *, uint64_t *), uint64_t a2, unint64_t a3)
{
  int v4 = a3;
  unint64_t v28 = HIDWORD(a3);
  if (HIDWORD(a3) < a3) {
    uint64_t v5 = -(uint64_t)(a3 - HIDWORD(a3));
  }
  else {
    uint64_t v5 = (HIDWORD(a3) - a3);
  }
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v7 = v5 + 1;
  if (v5 == -1) {
    return (char *)v6;
  }
  uint64_t v39 = MEMORY[0x1E4FBC860];
  int64_t v8 = v7 & ~(v7 >> 63);
  unint64_t result = sub_1DB04C468(0, v8, 0);
  if (v5 >= -1)
  {
    BOOL v10 = 0;
    uint64_t v6 = v39;
    while (v8)
    {
      if (v10) {
        goto LABEL_23;
      }
      int v31 = v4;
      unint64_t result = (char *)a1(v32, &v31, &v30);
      if (v3)
      {
        swift_release();
        return (char *)v6;
      }
      uint64_t v11 = v32[0];
      uint64_t v12 = v32[1];
      char v13 = v33;
      long long v14 = v34;
      long long v15 = v35;
      long long v16 = v36;
      long long v17 = v37;
      long long v18 = v38;
      unint64_t v20 = *(void *)(v6 + 16);
      unint64_t v19 = *(void *)(v6 + 24);
      uint64_t v39 = v6;
      if (v20 >= v19 >> 1)
      {
        long long v26 = v35;
        long long v27 = v34;
        long long v24 = v37;
        long long v25 = v36;
        long long v23 = v38;
        unint64_t result = sub_1DB04C468((char *)(v19 > 1), v20 + 1, 1);
        long long v18 = v23;
        long long v17 = v24;
        long long v16 = v25;
        long long v15 = v26;
        long long v14 = v27;
        uint64_t v6 = v39;
      }
      *(void *)(v6 + 16) = v20 + 1;
      uint64_t v21 = v6 + 104 * v20;
      *(void *)(v21 + 32) = v11;
      *(void *)(v21 + 40) = v12;
      *(unsigned char *)(v21 + 48) = v13;
      *(_OWORD *)(v21 + 56) = v14;
      *(_OWORD *)(v21 + 72) = v15;
      *(_OWORD *)(v21 + 88) = v16;
      *(_OWORD *)(v21 + 104) = v17;
      *(_OWORD *)(v21 + 120) = v18;
      BOOL v10 = v4 == v28;
      if (v4 == v28)
      {
        int v4 = 0;
      }
      else if (__CFADD__(v4++, 1))
      {
        goto LABEL_21;
      }
      --v8;
      if (!--v7) {
        return (char *)v6;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1DB0B7DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t result = a4 - a3;
  if (a3) {
    uint64_t v8 = a4 - a3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a1)
  {
    if (v8 == a2 - a1)
    {
      if (a3)
      {
        uint64_t result = cc_cmp_safe();
        BOOL v9 = result == 0;
LABEL_10:
        *a5 = v9;
        return result;
      }
      goto LABEL_12;
    }
LABEL_9:
    BOOL v9 = 0;
    goto LABEL_10;
  }
  if (v8) {
    goto LABEL_9;
  }
  if (!a3) {
LABEL_12:
  }
    __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_1DB0B7E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = sub_1DB0C4958();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_1DB0C7A30;
  *(unsigned char *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = xmmword_1DB0C7A30;
  type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  sub_1DB0C4AA8();
  uint64_t v39 = 0;
  int v9 = ccss_sizeof_shamir_share_generator_serialization();
  char v10 = v9;
  if (!v9)
  {
    unint64_t v16 = 0xD00000000000003ALL;
    unint64_t v17 = 0x80000001DB0CB210;
    int v15 = -7;
    uint64_t v18 = 49;
    goto LABEL_5;
  }
  v34[0] = v5;
  v34[1] = v2;
  uint64_t v11 = swift_slowAlloc();
  uint64_t v12 = v39;
  uint64_t v35 = a1;
  int v13 = ccss_shamir_share_generator_serialize();
  if (v13)
  {
    int v14 = v13;
    MEMORY[0x1E0189230](v11, -1, -1);
    unint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    int v36 = v14;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    int v15 = 0;
    unint64_t v16 = v37;
    unint64_t v17 = v38;
    uint64_t v18 = 56;
LABEL_5:
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v19 = 3;
    *(_DWORD *)(v19 + 4) = v15;
    *(unsigned char *)(v19 + 8) = v10;
    *(_DWORD *)(v19 + 12) = 0;
    *(_WORD *)(v19 + 16) = 256;
    *(void *)(v19 + 24) = v18;
    *(void *)(v19 + 32) = 0x293A5F2874696E69;
    *(void *)(v19 + 40) = 0xE800000000000000;
    *(void *)(v19 + 48) = 0xD00000000000006BLL;
    *(void *)(v19 + 56) = 0x80000001DB0CC770;
    *(void *)(v19 + 64) = v16;
    *(void *)(v19 + 72) = v17;
    swift_willThrow();
    swift_release();
    return sub_1DB0C2840(a2, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  }
  uint64_t v21 = v34[0];
  (*(void (**)(char *, void, void))(v6 + 104))(v8, *MEMORY[0x1E4F27730], v34[0]);
  sub_1DB0C4948();
  if (v12)
  {
    sub_1DB0C48F8();
    swift_allocObject();
    swift_retain();
    uint64_t v22 = sub_1DB0C4888();
    uint64_t v23 = sub_1DB0C0CC8(v22, v12);
    unint64_t v25 = v24;
    swift_release();
  }
  else
  {
    long long v26 = (void (*)(uint64_t, void))sub_1DB0C4948();
    v26(v11, 0);
    swift_release();
    swift_release();
    uint64_t v23 = 0;
    unint64_t v25 = 0xC000000000000000;
  }
  uint64_t v27 = v35;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
  *(_DWORD *)a2 = 1;
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(v27 + 17);
  uint64_t v28 = *(void *)(v27 + 32);
  *(_DWORD *)(a2 + 20) = *(void *)(v27 + 24);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(v27 + 16);
  unint64_t v29 = *(void *)(v27 + 40);
  if (v29 >> 60 == 15) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v28;
  }
  if (v29 >> 60 == 15) {
    unint64_t v31 = 0xC000000000000000;
  }
  else {
    unint64_t v31 = *(void *)(v27 + 40);
  }
  uint64_t v32 = *(void *)(a2 + 32);
  unint64_t v33 = *(void *)(a2 + 40);
  sub_1DB067A4C(v28, v29);
  sub_1DB042664(v32, v33);
  *(void *)(a2 + 32) = v30;
  *(void *)(a2 + 40) = v31;
  LOBYTE(v32) = *(unsigned char *)(v27 + 18);
  swift_release();
  *(unsigned char *)(a2 + 48) = v32;
  uint64_t result = sub_1DB042664(*(void *)(a2 + 56), *(void *)(a2 + 64));
  *(void *)(a2 + 56) = v23;
  *(void *)(a2 + 64) = v25;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_1DB0B82BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v38 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1DB0C4D58();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  MEMORY[0x1F4188790](v6);
  long long v34 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a2 + 8) = xmmword_1DB0C7A30;
  uint64_t v12 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  sub_1DB0C4AA8();
  uint64_t v13 = a2 + *(int *)(v12 + 28);
  int v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v14(v13, 1, 1, v8);
  uint64_t v15 = *(int *)(v12 + 32);
  unint64_t v16 = *(void (**)(void))(v4 + 56);
  uint64_t v35 = a2 + v15;
  uint64_t v39 = v4 + 56;
  uint64_t v40 = v3;
  v16();
  unint64_t v17 = v16;
  *(_DWORD *)a2 = 1;
  uint64_t v18 = v41;
  uint64_t v19 = swift_retain();
  uint64_t v20 = v42;
  sub_1DB0B7E6C(v19, (uint64_t)v11);
  if (v20)
  {
    sub_1DB0C2840(v18, (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator);
    uint64_t v21 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization;
    uint64_t v22 = a2;
  }
  else
  {
    sub_1DB06F7F4(v13, &qword_1EA8FE708);
    sub_1DB0877CC((uint64_t)v11, v13, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    v14(v13, 0, 1, v8);
    uint64_t v23 = (char *)v18;
    uint64_t v24 = v18 + *(int *)(type metadata accessor for CKSecretSharing.HybridGenerator() + 20);
    uint64_t v26 = v36;
    uint64_t v25 = v37;
    uint64_t v27 = v34;
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v24, v37);
    MEMORY[0x1F4188790](v28);
    *(&v34 - 2) = (char *)a2;
    sub_1DB0C4D38();
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v25);
    MEMORY[0x1F4188790](v29);
    *(&v34 - 2) = v23;
    sub_1DB0C27F8(&qword_1EA8FE790, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    uint64_t v30 = (uint64_t)v38;
    uint64_t v31 = v40;
    sub_1DB0C4BE8();
    uint64_t v32 = v35;
    sub_1DB06F7F4(v35, &qword_1EA8FE710);
    sub_1DB0877CC(v30, v32, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v17)(v32, 0, 1, v31);
    uint64_t v21 = (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator;
    uint64_t v22 = (uint64_t)v23;
  }
  return sub_1DB0C2840(v22, v21);
}

uint64_t sub_1DB0B875C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v16[3] = MEMORY[0x1E4FBB2B8];
  v16[4] = MEMORY[0x1E4F27EF0];
  v16[0] = a1;
  v16[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v16, MEMORY[0x1E4FBB2B8]);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_1DB0C0A50(v5, v6);
      unint64_t v9 = v14 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_1DB0C0B14((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v15 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_1DB0C0B90((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t v10 = *(void *)(a3 + 8);
  unint64_t v11 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v9;
  return sub_1DB042664(v10, v11);
}

uint64_t sub_1DB0B8830(uint64_t a1)
{
  uint64_t v2 = sub_1DB0C4DC8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CKSecretSharing.HybridGenerator();
  uint64_t v6 = sub_1DB0C4DD8();
  uint64_t v8 = v7;
  sub_1DB042664(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = sub_1DB0C4DE8();
  uint64_t v11 = v10;
  sub_1DB042664(*(void *)(a1 + 32), *(void *)(a1 + 40));
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v11;
  sub_1DB0C4E08();
  uint64_t v18 = v2;
  uint64_t v19 = sub_1DB0C27F8(&qword_1EA8FED18, MEMORY[0x1E4F25080]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(boxed_opaque_existential_1, v5, v2);
  __swift_project_boxed_opaque_existential_1(v17, v18);
  sub_1DB0C4908();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v13 = v16[1];
  uint64_t v14 = v16[2];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  uint64_t result = sub_1DB042664(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
  return result;
}

void sub_1DB0B8A18(int64_t a1, uint64_t a2, unint64_t a3, char a4, char a5, uint64_t a6, char a7)
{
  uint64_t v8 = v7;
  *(_WORD *)(v8 + 16) = 257;
  *(unsigned char *)(v8 + 18) = 0;
  sub_1DB0412D0(v8 + 48);
  sub_1DB0412D0((uint64_t)&v30);
  unint64_t v15 = a3;
  int64_t v16 = v30;
  int64_t v17 = v31;
  *(unsigned char *)(v8 + 16) = a4;
  *(unsigned char *)(v8 + 17) = a5;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = v15;
  if (v17 < v16)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  BOOL v18 = v16 > a1 || v17 < a1;
  char v19 = v18;
  char v29 = v19;
  if (v18)
  {
    unint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    unint64_t v20 = v15;
    sub_1DB067A4C(a2, v15);
    sub_1DB0C5288();
    swift_bridgeObjectRelease();
    unint64_t v30 = 0xD000000000000016;
    unint64_t v31 = 0x80000001DB0CB4A0;
    int64_t v32 = v16;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    int64_t v32 = v17;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    unint64_t v21 = v30;
    unint64_t v22 = v31;
    sub_1DB056B5C();
    swift_allocError();
    int v24 = 0;
    *(unsigned char *)uint64_t v23 = 1;
    uint64_t v25 = 141;
LABEL_17:
    *(_DWORD *)(v23 + 4) = v24;
    *(unsigned char *)(v23 + 8) = v29;
    *(_WORD *)(v23 + 16) = 256;
    *(_DWORD *)(v23 + 12) = 0;
    *(void *)(v23 + 24) = v25;
    *(void *)(v23 + 32) = 0xD00000000000007FLL;
    *(void *)(v23 + 40) = 0x80000001DB0CCEE0;
    *(void *)(v23 + 48) = 0xD00000000000006BLL;
    *(void *)(v23 + 56) = 0x80000001DB0CC770;
    *(void *)(v23 + 64) = v21;
    *(void *)(v23 + 72) = v22;
    swift_willThrow();
    sub_1DB069BB4(a2, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1DB069BB4(*(void *)(v8 + 32), *(void *)(v8 + 40));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
    swift_deallocPartialClassInstance();
    return;
  }
  if ((a7 & 1) == 0) {
    *(unsigned char *)(v8 + 18) = 1;
  }
  unint64_t v20 = v15;
  sub_1DB067A4C(a2, v15);
  ccss_sizeof_parameters_fix();
  uint64_t v26 = swift_slowAlloc();
  *(void *)(v8 + 144) = v26;
  if (a1 < 0) {
    goto LABEL_20;
  }
  if (HIDWORD(a1))
  {
LABEL_21:
    __break(1u);
    return;
  }
  uint64_t v27 = v26;
  int v28 = ccss_shamir_parameters_init();
  if (v28)
  {
    int v24 = v28;
    MEMORY[0x1E0189230](v27, -1, -1);
    unint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    LODWORD(v32) = v24;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    unint64_t v21 = v30;
    unint64_t v22 = v31;
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v23 = 3;
    uint64_t v25 = 156;
    goto LABEL_17;
  }
  ccss_sizeof_share();
  *(void *)(v8 + 152) = swift_slowAlloc();
  ccss_sizeof_generator();
  *(void *)(v8 + 160) = swift_slowAlloc();
  ccss_shamir_share_init();
  sub_1DB069BB4(a2, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1DB0B8E20()
{
  MEMORY[0x1E0189230](v0[18], -1, -1);
  MEMORY[0x1E0189230](v0[19], -1, -1);
  uint64_t v1 = (void *)v0[20];
  memset_s(v1, 8uLL, 0, 8uLL);
  MEMORY[0x1E0189230](v1, -1, -1);
  sub_1DB069BB4(v0[4], v0[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CKSecretSharing.HybridGenerator.init(threshold:secret:associatedData:includeADInShares:includeThresholdInShares:ciphersuite:insecureToChangeIncludeMessageEntropy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>, unsigned __int8 a9)
{
  uint64_t v202 = a8;
  LODWORD(v200) = a7;
  LODWORD(v199) = a6;
  uint64_t v203 = a2;
  unint64_t v204 = a3;
  LODWORD(v198) = a9;
  uint64_t v224 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FED10);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v185 = (char *)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1DB0C4E18();
  uint64_t v187 = *(void *)(v14 - 8);
  uint64_t v188 = v14;
  MEMORY[0x1F4188790](v14);
  __n128 v184 = (char *)&v173 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = sub_1DB0C4DC8();
  uint64_t v186 = *(void *)(v193 - 8);
  MEMORY[0x1F4188790](v193);
  uint64_t v192 = (char *)&v173 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = sub_1DB0C4D58();
  uint64_t v190 = *(void *)(v197 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v197);
  unint64_t v194 = (char *)&v173 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v195 = (char *)&v173 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v191 = (char *)&v173 - v21;
  uint64_t v196 = sub_1DB0C4A38();
  uint64_t v189 = *(void *)(v196 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v196);
  int v24 = (char *)&v173 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v173 - v26;
  MEMORY[0x1F4188790](v25);
  char v29 = (char *)&v173 - v28;
  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  swift_allocObject();
  sub_1DB067A4C(a4, a5);
  uint64_t v30 = a1;
  int64_t v31 = a1;
  uint64_t v32 = a4;
  uint64_t v33 = a4;
  unint64_t v34 = a5;
  uint64_t v35 = v201;
  sub_1DB0B8A18(v31, v33, a5, v199, v200, v36, v198);
  if (v35)
  {
    sub_1DB069BB4(v32, a5);
    uint64_t v38 = v203;
    unint64_t v39 = v204;
    return sub_1DB042664(v38, v39);
  }
  uint64_t v183 = v30;
  uint64_t v180 = (uint64_t)v27;
  unint64_t v181 = (unint64_t)v29;
  uint64_t v179 = (uint64_t)v24;
  uint64_t v200 = v32;
  uint64_t v41 = v37;
  *(void *)uint64_t v202 = v37;
  sub_1DB0412D0((uint64_t)&v215);
  long long v42 = v215;
  int64_t v174 = v217;
  uint64_t v182 = v219;
  unint64_t v175 = v220;
  uint64_t v176 = v216;
  unint64_t v177 = v222;
  uint64_t v178 = v218;
  unint64_t v43 = v34;
  unint64_t v44 = v34 >> 60;
  unint64_t v198 = v223;
  unint64_t v199 = v221;
  if (v44 <= 0xE)
  {
    switch(v43 >> 62)
    {
      case 1uLL:
        LODWORD(v45) = HIDWORD(v200) - v200;
        if (__OFSUB__(HIDWORD(v200), v200)) {
          goto LABEL_93;
        }
        uint64_t v45 = (int)v45;
        goto LABEL_6;
      case 2uLL:
        uint64_t v67 = *(void *)(v200 + 16);
        uint64_t v66 = *(void *)(v200 + 24);
        BOOL v46 = __OFSUB__(v66, v67);
        uint64_t v45 = v66 - v67;
        if (!v46) {
          goto LABEL_6;
        }
        __break(1u);
LABEL_25:
        sub_1DB069BB4(v200, v43);
        break;
      case 3uLL:
        goto LABEL_25;
      default:
        sub_1DB069BB4(v200, v43);
        uint64_t v45 = BYTE6(v43);
        goto LABEL_6;
    }
  }
  uint64_t v45 = 0;
LABEL_6:
  BOOL v46 = __OFADD__(v45, 4);
  uint64_t v47 = v45 + 4;
  if (v46)
  {
    __break(1u);
    goto LABEL_90;
  }
  if (__OFADD__(v47, 1))
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  uint64_t v213 = sub_1DB0C0FA4(v47 + 1);
  unint64_t v214 = v48;
  if (qword_1EBE7D890 != -1) {
LABEL_91:
  }
    swift_once();
  uint64_t v206 = off_1EBE7D888;
  int v207 = off_1EBE7D888;
  if (*((uint64_t *)&v42 + 1) < (uint64_t)v42)
  {
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
  }
  if ((uint64_t)v42 > v183 || *((uint64_t *)&v42 + 1) < v183)
  {
    *(void *)&long long v215 = 0;
    *((void *)&v215 + 1) = 0xE000000000000000;
    swift_retain_n();
    sub_1DB0C5288();
    swift_bridgeObjectRelease();
    *(void *)&long long v215 = 0xD000000000000016;
    *((void *)&v215 + 1) = 0x80000001DB0CB4A0;
    uint64_t v212 = v42;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    uint64_t v212 = *((void *)&v42 + 1);
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    long long v64 = v215;
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v65 = 1;
    *(_DWORD *)(v65 + 4) = 0;
    *(unsigned char *)(v65 + 8) = 1;
    *(_DWORD *)(v65 + 12) = 0;
    *(_WORD *)(v65 + 16) = 256;
    *(_OWORD *)(v65 + 24) = xmmword_1DB0CA1B0;
    *(void *)(v65 + 40) = 0x80000001DB0CC6E0;
    *(void *)(v65 + 48) = 0xD00000000000006BLL;
    *(void *)(v65 + 56) = 0x80000001DB0CC770;
    *(_OWORD *)(v65 + 64) = v64;
    swift_willThrow();
    sub_1DB069BB4(v200, v43);
    sub_1DB042664(v203, v204);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_79:
    sub_1DB042664(v213, v214);
    return swift_release();
  }
  else
  {
    uint64_t v201 = 0;
    unsigned int v205 = bswap32(v183);
    swift_retain_n();
    uint64_t v49 = sub_1DB05C640((uint64_t)&v205, (uint64_t)&v206);
    unint64_t v51 = v50;
    sub_1DB05DEE8(v49, v50);
    sub_1DB042664(v49, v51);
    if (v44 <= 0xE)
    {
      uint64_t v52 = v200;
      sub_1DB04239C(v200, v43);
      sub_1DB05DEE8(v52, v43);
      sub_1DB069BB4(v52, v43);
    }
    uint64_t v183 = v43;
    if (*(unsigned char *)(v41 + 18)) {
      uint64_t v53 = &unk_1F353B028;
    }
    else {
      uint64_t v53 = &unk_1F353B000;
    }
    uint64_t v54 = sub_1DB0656E0((uint64_t)v53);
    unint64_t v56 = v55;
    sub_1DB04239C(v54, v55);
    sub_1DB05DEE8(v54, v56);
    sub_1DB042664(v54, v56);
    uint64_t v57 = sub_1DB042664(v54, v56);
    uint64_t v59 = v213;
    unint64_t v58 = v214;
    MEMORY[0x1F4188790](v57);
    switch(v58 >> 62)
    {
      case 1uLL:
        if (v59 >> 32 < (int)v59) {
          goto LABEL_94;
        }
        sub_1DB04239C(v59, v58);
        sub_1DB04239C(v59, v58);
        uint64_t v75 = v201;
        char v76 = sub_1DB0C0C14((int)v59, v59 >> 32, v58 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB0C1040);
        uint64_t v201 = v75;
        uint64_t v73 = v196;
        if (v76)
        {
LABEL_35:
          sub_1DB04239C(v59, v58);
          sub_1DB04239C(v59, v58);
          sub_1DB0C4A48();
          sub_1DB042664(v59, v58);
          sub_1DB0C27F8(qword_1EBE7DE78, MEMORY[0x1E4F27788]);
          sub_1DB0C5268();
          if (BYTE1(v215))
          {
            unint64_t v77 = v181;
          }
          else
          {
            size_t v78 = v215;
            unint64_t v77 = v181;
            do
            {
              unint64_t v79 = v207;
              swift_beginAccess();
              sub_1DB0A928C(v79[2], v79[2], v78);
              sub_1DB0C5268();
              size_t v78 = v215;
            }
            while (BYTE1(v215) != 1);
          }
          (*(void (**)(unint64_t, uint64_t))(v189 + 8))(v77, v73);
        }
        break;
      case 2uLL:
        uint64_t v68 = *(void *)(v59 + 16);
        uint64_t v69 = *(void *)(v59 + 24);
        sub_1DB04239C(v59, v58);
        sub_1DB04239C(v59, v58);
        swift_retain();
        swift_retain();
        uint64_t v70 = v201;
        char v71 = sub_1DB0C0C14(v68, v69, v58 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB0C1040);
        uint64_t v201 = v70;
        if (v70)
        {
          swift_release();
          swift_release();
          __break(1u);
LABEL_98:
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x1DB0BAA68);
        }
        char v72 = v71;
        swift_release();
        swift_release();
        uint64_t v73 = v196;
        if (v72) {
          goto LABEL_35;
        }
        break;
      case 3uLL:
        *(void *)((char *)&v215 + 6) = 0;
        *(void *)&long long v215 = 0;
        uint64_t v74 = v207;
        swift_beginAccess();
        uint64_t v61 = v74[2];
        int64_t v62 = v61;
        size_t v63 = 0;
        goto LABEL_32;
      default:
        *(void *)&long long v215 = v59;
        WORD4(v215) = v58;
        BYTE10(v215) = BYTE2(v58);
        BYTE11(v215) = BYTE3(v58);
        BYTE12(v215) = BYTE4(v58);
        uint64_t v60 = v207;
        BYTE13(v215) = BYTE5(v58);
        swift_beginAccess();
        uint64_t v61 = v60[2];
        int64_t v62 = v61;
        size_t v63 = BYTE6(v58);
LABEL_32:
        sub_1DB0A942C(v61, v62, &v215, v63);
        break;
    }
    sub_1DB042664(v59, v58);
    uint64_t v80 = sub_1DB042664(v59, v58);
    MEMORY[0x1F4188790](v80);
    uint64_t v81 = v203;
    unint64_t v82 = v204 >> 62;
    switch(v204 >> 62)
    {
      case 1uLL:
        unint64_t v181 = v204 >> 62;
        if (v203 >> 32 < (int)v203) {
          goto LABEL_95;
        }
        unint64_t v83 = v204;
        sub_1DB04239C(v203, v204);
        uint64_t v93 = v201;
        char v94 = sub_1DB0C0C14((int)v81, v81 >> 32, v83 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB0C28A0);
        uint64_t v201 = v93;
        uint64_t v91 = v196;
        unint64_t v82 = v181;
        if ((v94 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_50;
      case 2uLL:
        unint64_t v181 = v204 >> 62;
        unint64_t v85 = v204 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v86 = *(void *)(v203 + 16);
        uint64_t v87 = *(void *)(v203 + 24);
        sub_1DB04239C(v203, v204);
        swift_retain();
        swift_retain();
        uint64_t v88 = v201;
        char v89 = sub_1DB0C0C14(v86, v87, v85, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB0C28A0);
        uint64_t v201 = v88;
        if (v88) {
          goto LABEL_98;
        }
        char v90 = v89;
        swift_release();
        swift_release();
        uint64_t v91 = v196;
        if (v90)
        {
          unint64_t v83 = v204;
          unint64_t v82 = v181;
LABEL_50:
          unint64_t v181 = v82;
          sub_1DB04239C(v81, v83);
          sub_1DB04239C(v81, v83);
          sub_1DB0C4A48();
          sub_1DB042664(v81, v83);
          sub_1DB0C27F8(qword_1EBE7DE78, MEMORY[0x1E4F27788]);
          sub_1DB0C5268();
          if (BYTE1(v215))
          {
            uint64_t v95 = v180;
          }
          else
          {
            size_t v96 = v215;
            uint64_t v95 = v180;
            do
            {
              unsigned __int8 v97 = v207;
              swift_beginAccess();
              sub_1DB0A928C(v97[2], v97[2], v96);
              sub_1DB0C5268();
              size_t v96 = v215;
            }
            while (BYTE1(v215) != 1);
          }
          (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v95, v91);
        }
        else
        {
          unint64_t v83 = v204;
        }
        LODWORD(v82) = v181;
LABEL_56:
        uint64_t v98 = sub_1DB042664(v81, v83);
        MEMORY[0x1F4188790](v98);
        switch((int)v82)
        {
          case 0:
            *(void *)&long long v215 = v81;
            WORD4(v215) = v83;
            BYTE10(v215) = BYTE2(v83);
            BYTE11(v215) = BYTE3(v83);
            BYTE12(v215) = BYTE4(v83);
            unint64_t v99 = v206;
            BYTE13(v215) = BYTE5(v83);
            swift_beginAccess();
            uint64_t v100 = v99[2];
            int64_t v101 = v100;
            size_t v102 = BYTE6(v83);
            goto LABEL_62;
          case 1:
            if (v81 >> 32 < (int)v81) {
              goto LABEL_96;
            }
            sub_1DB04239C(v81, v83);
            uint64_t v110 = v201;
            char v111 = sub_1DB0C0C14((int)v81, v81 >> 32, v83 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB0C28A0);
            uint64_t v201 = v110;
            uint64_t v112 = v195;
            uint64_t v108 = v196;
            if (v111) {
              goto LABEL_65;
            }
            goto LABEL_71;
          case 2:
            uint64_t v103 = *(void *)(v81 + 16);
            uint64_t v104 = *(void *)(v81 + 24);
            sub_1DB04239C(v81, v83);
            swift_retain();
            swift_retain();
            uint64_t v105 = v201;
            char v106 = sub_1DB0C0C14(v103, v104, v83 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1DB0C28A0);
            uint64_t v201 = v105;
            if (v105) {
              goto LABEL_98;
            }
            char v107 = v106;
            swift_release();
            swift_release();
            uint64_t v108 = v196;
            if (v107)
            {
LABEL_65:
              sub_1DB04239C(v81, v83);
              sub_1DB04239C(v81, v83);
              sub_1DB0C4A48();
              sub_1DB042664(v81, v83);
              sub_1DB0C27F8(qword_1EBE7DE78, MEMORY[0x1E4F27788]);
              sub_1DB0C5268();
              if (BYTE1(v215))
              {
                uint64_t v113 = v179;
              }
              else
              {
                size_t v114 = v215;
                uint64_t v113 = v179;
                do
                {
                  unint64_t v115 = v206;
                  swift_beginAccess();
                  sub_1DB0A928C(v115[2], v115[2], v114);
                  sub_1DB0C5268();
                  size_t v114 = v215;
                }
                while (BYTE1(v215) != 1);
              }
              (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v113, v108);
            }
            break;
          case 3:
            *(void *)((char *)&v215 + 6) = 0;
            *(void *)&long long v215 = 0;
            uint64_t v109 = v206;
            swift_beginAccess();
            uint64_t v100 = v109[2];
            int64_t v101 = v100;
            size_t v102 = 0;
LABEL_62:
            sub_1DB0A942C(v100, v101, &v215, v102);
            break;
          default:
            JUMPOUT(0);
        }
        uint64_t v112 = v195;
LABEL_71:
        sub_1DB042664(v81, v83);
        if (*(unsigned char *)(*(void *)v202 + 18)) {
          goto LABEL_81;
        }
        if (v174)
        {
          unint64_t v116 = (void *)sub_1DB048414(v174);
        }
        else
        {
          unint64_t v116 = off_1EBE7D888;
          swift_retain();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          size_t v117 = sub_1DB0A97E4((uint64_t)v116);
          swift_release();
          unint64_t v116 = (void *)v117;
        }
        swift_beginAccess();
        if (SecRandomCopyBytes((SecRandomRef)*MEMORY[0x1E4F3BC60], v116[2], v116 + 4))
        {
          sub_1DB056B5C();
          swift_allocError();
          *(unsigned char *)uint64_t v118 = 7;
          *(_DWORD *)(v118 + 4) = 0;
          *(unsigned char *)(v118 + 8) = 1;
          *(_DWORD *)(v118 + 12) = 0;
          *(_WORD *)(v118 + 16) = 256;
          *(_OWORD *)(v118 + 24) = xmmword_1DB0CA190;
          *(void *)(v118 + 40) = 0x80000001DB0CC6E0;
          *(void *)(v118 + 48) = 0xD00000000000006BLL;
          *(void *)(v118 + 56) = 0x80000001DB0CC770;
          *(void *)(v118 + 64) = 0;
          *(void *)(v118 + 72) = 0xE000000000000000;
          swift_willThrow();
          sub_1DB069BB4(v200, v183);
          sub_1DB042664(v81, v204);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          goto LABEL_79;
        }
        swift_beginAccess();
        size_t v119 = v116[2];
        unint64_t v120 = v207;
        swift_beginAccess();
        uint64_t v121 = v120[2];
        swift_retain_n();
        sub_1DB0A942C(v121, v121, v116 + 4, v119);
        swift_release_n();
        swift_beginAccess();
        size_t v122 = v116[2];
        uint64_t v123 = v206;
        swift_beginAccess();
        uint64_t v124 = v123[2];
        swift_retain_n();
        sub_1DB0A942C(v124, v124, v116 + 4, v122);
        swift_release_n();
        uint64_t v112 = v195;
LABEL_81:
        uint64_t v210 = (uint64_t)v207;
        unint64_t v181 = sub_1DB0476AC();
        swift_retain();
        sub_1DB0C4D48();
        unint64_t v125 = v199;
        sub_1DB0C5188();
        unint64_t v126 = v175;
        uint64_t v196 = sub_1DB05C118(v175, v125);
        unint64_t v128 = v127;
        uint64_t v210 = v196;
        unint64_t v211 = v127;
        sub_1DB0C5188();
        uint64_t v129 = sub_1DB05C118(v126, v125);
        unint64_t v131 = v130;
        uint64_t v208 = v129;
        unint64_t v209 = v130;
        uint64_t v180 = sub_1DB0C4F98();
        uint64_t v179 = sub_1DB0C27F8((unint64_t *)&qword_1EA8FE0A0, MEMORY[0x1E4F25170]);
        unint64_t v132 = sub_1DB06F7A0();
        uint64_t v133 = v112;
        uint64_t v134 = v191;
        sub_1DB0C4E38();
        sub_1DB042664(v129, v131);
        sub_1DB042664(v196, v128);
        uint64_t v135 = v190;
        uint64_t v189 = *(void *)(v190 + 8);
        uint64_t v196 = v190 + 8;
        ((void (*)(char *, uint64_t))v189)(v133, v197);
        uint64_t v195 = (char *)type metadata accessor for CKSecretSharing.HybridGenerator();
        unint64_t v136 = *(void (**)(void))(v135 + 32);
        uint64_t v176 = v202 + *((int *)v195 + 5);
        v136();
        uint64_t v210 = (uint64_t)v207;
        swift_retain();
        sub_1DB0C4D48();
        unint64_t v137 = v198;
        sub_1DB0C5188();
        unint64_t v138 = v177;
        uint64_t v139 = sub_1DB05C118(v177, v137);
        unint64_t v141 = v140;
        uint64_t v210 = v139;
        unint64_t v211 = v140;
        sub_1DB0C5188();
        uint64_t v142 = sub_1DB05C118(v138, v137);
        unint64_t v144 = v143;
        uint64_t v208 = v142;
        unint64_t v209 = v143;
        unint64_t v181 = v132;
        uint64_t v145 = v194;
        uint64_t v146 = v197;
        sub_1DB0C4E38();
        sub_1DB042664(v142, v144);
        unint64_t v147 = v141;
        uint64_t v148 = (void (*)(char *, uint64_t))v189;
        sub_1DB042664(v139, v147);
        v148(v134, v146);
        unint64_t v150 = v192;
        uint64_t v149 = v193;
        uint64_t v151 = v201;
        sub_1DB0C4D38();
        if (v151)
        {
          uint64_t v201 = v151;
          sub_1DB069BB4(v200, v183);
          sub_1DB042664(v203, v204);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v152 = v146;
          v148(v145, v146);
          swift_release();
          swift_release();
          int v153 = 0;
          uint64_t v154 = v202;
          uint64_t v156 = v187;
          uint64_t v155 = v188;
          unint64_t v157 = v148;
        }
        else
        {
          uint64_t v208 = (uint64_t)v206;
          uint64_t v158 = (uint64_t)v185;
          uint64_t v159 = v186;
          (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v185, v150, v149);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v159 + 56))(v158, 0, 1, v149);
          uint64_t v160 = v213;
          unint64_t v161 = v214;
          uint64_t v210 = v213;
          unint64_t v211 = v214;
          swift_retain();
          sub_1DB04239C(v160, v161);
          sub_1DB047030();
          uint64_t v162 = v184;
          sub_1DB0C4D98();
          sub_1DB042664(v160, v161);
          sub_1DB06F7F4(v158, &qword_1EA8FED10);
          swift_release();
          uint64_t v154 = v202;
          (*(void (**)(uint64_t, char *, uint64_t))(v187 + 32))(v202 + *((int *)v195 + 6), v162, v188);
          uint64_t v163 = v176;
          sub_1DB0C4D38();
          uint64_t v164 = v191;
          uint64_t v152 = v197;
          uint64_t v165 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v190 + 16))(v191, v163, v197);
          MEMORY[0x1F4188790](v165);
          sub_1DB0C4D38();
          uint64_t v166 = v164;
          unint64_t v157 = (void (*)(char *, uint64_t))v189;
          ((void (*)(char *, uint64_t))v189)(v166, v152);
          int v167 = v210;
          if (!v210)
          {
            sub_1DB069BB4(v200, v183);
            sub_1DB042664(v203, v204);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v186 + 8))(v192, v193);
            v157(v194, v152);
            swift_release();
            swift_release();
            uint64_t v38 = v213;
            unint64_t v39 = v214;
            return sub_1DB042664(v38, v39);
          }
          uint64_t v210 = 0;
          unint64_t v211 = 0xE000000000000000;
          sub_1DB0C5288();
          sub_1DB0C50B8();
          LODWORD(v208) = v167;
          sub_1DB0C53C8();
          sub_1DB0C50B8();
          swift_bridgeObjectRelease();
          uint64_t v168 = v210;
          unint64_t v169 = v211;
          sub_1DB056B5C();
          uint64_t v170 = swift_allocError();
          *(unsigned char *)uint64_t v171 = 3;
          *(_DWORD *)(v171 + 4) = v167;
          *(unsigned char *)(v171 + 8) = 0;
          *(_DWORD *)(v171 + 12) = 0;
          *(_WORD *)(v171 + 16) = 256;
          *(_OWORD *)(v171 + 24) = xmmword_1DB0CA1A0;
          *(void *)(v171 + 40) = 0x80000001DB0CC6E0;
          *(void *)(v171 + 48) = 0xD00000000000006BLL;
          uint64_t v156 = v187;
          uint64_t v155 = v188;
          *(void *)(v171 + 56) = 0x80000001DB0CC770;
          *(void *)(v171 + 64) = v168;
          *(void *)(v171 + 72) = v169;
          uint64_t v201 = v170;
          swift_willThrow();
          sub_1DB069BB4(v200, v183);
          sub_1DB042664(v203, v204);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v186 + 8))(v192, v193);
          v157(v194, v152);
          swift_release();
          swift_release();
          int v153 = 1;
        }
        sub_1DB042664(v213, v214);
        swift_release();
        uint64_t v172 = v195;
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v157)(v154 + *((int *)v195 + 5), v152);
        if (v153) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v156 + 8))(v154 + *((int *)v172 + 6), v155);
        }
        break;
      case 3uLL:
        *(void *)((char *)&v215 + 6) = 0;
        *(void *)&long long v215 = 0;
        uint64_t v92 = v207;
        swift_beginAccess();
        sub_1DB0A942C(v92[2], v92[2], &v215, 0);
        unint64_t v83 = v204;
        goto LABEL_56;
      default:
        *(void *)&long long v215 = v203;
        unint64_t v83 = v204;
        DWORD2(v215) = v204;
        WORD6(v215) = WORD2(v204);
        uint64_t v84 = v207;
        swift_beginAccess();
        sub_1DB0A942C(v84[2], v84[2], &v215, BYTE6(v83));
        goto LABEL_56;
    }
  }
  return result;
}

uint64_t type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState()
{
  return self;
}

uint64_t sub_1DB0BAACC()
{
  return sub_1DB0C01D8();
}

uint64_t sub_1DB0BAAE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2 - result;
  if (!result) {
    uint64_t v3 = 0;
  }
  *a3 = v3;
  return result;
}

uint64_t sub_1DB0BAAF8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (!ccrng())
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (!a1) {
    goto LABEL_5;
  }
  uint64_t result = ccss_shamir_share_generator_init();
  *a2 = result;
  return result;
}

uint64_t CKSecretSharing.HybridGenerator.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v256 = a3;
  uint64_t v227 = sub_1DB0C4E18();
  uint64_t v226 = *(void *)(v227 - 8);
  MEMORY[0x1F4188790](v227);
  uint64_t v232 = (char *)&v218 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = sub_1DB0C4DC8();
  uint64_t v234 = *(void *)(v235 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v235);
  uint64_t v233 = (char *)&v218 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unsigned int v239 = (char *)&v218 - v8;
  uint64_t v9 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox(0);
  uint64_t v259 = *(void *)(v9 - 8);
  uint64_t v260 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  v251 = (_OWORD *)((char *)&v218 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v247 = (_OWORD *)((char *)&v218 - v13);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v244 = (_OWORD *)((char *)&v218 - v15);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v240 = (_OWORD *)((char *)&v218 - v17);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v231 = (_OWORD *)((char *)&v218 - v19);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v230 = (_OWORD *)((char *)&v218 - v21);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  int v238 = (_OWORD *)((char *)&v218 - v23);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v243 = (_OWORD *)((char *)&v218 - v25);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  int v248 = (_OWORD *)((char *)&v218 - v27);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v252 = (_OWORD *)((char *)&v218 - v29);
  MEMORY[0x1F4188790](v28);
  uint64_t v254 = (_OWORD *)((char *)&v218 - v30);
  uint64_t v258 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState(0);
  uint64_t v261 = *(char **)(v258 - 8);
  MEMORY[0x1F4188790](v258);
  uint64_t v255 = (_DWORD *)((char *)&v218 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE710);
  uint64_t v33 = MEMORY[0x1F4188790](v32 - 8);
  uint64_t v257 = (uint64_t)&v218 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v250 = (uint64_t)&v218 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v246 = (uint64_t)&v218 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v242 = (uint64_t)&v218 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v237 = (uint64_t)&v218 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v229 = (uint64_t)&v218 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v228 = (uint64_t)&v218 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v236 = (uint64_t)&v218 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v241 = (uint64_t)&v218 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v245 = (uint64_t)&v218 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v249 = (uint64_t)&v218 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v253 = (uint64_t)&v218 - v56;
  MEMORY[0x1F4188790](v55);
  unint64_t v58 = (char *)&v218 - v57;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE708);
  uint64_t v60 = MEMORY[0x1F4188790](v59 - 8);
  int64_t v62 = (char *)&v218 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x1F4188790](v60);
  uint64_t v65 = (char *)&v218 - v64;
  MEMORY[0x1F4188790](v63);
  uint64_t v67 = (char *)&v218 - v66;
  uint64_t v68 = sub_1DB0C4AD8();
  MEMORY[0x1F4188790](v68 - 8);
  uint64_t v69 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  MEMORY[0x1F4188790](v69);
  char v71 = (char *)&v218 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v269 = 0;
  long long v267 = 0u;
  long long v268 = 0u;
  sub_1DB04239C(a1, a2);
  sub_1DB0C4AC8();
  sub_1DB0C27F8(&qword_1EA8FE7B0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  unint64_t v72 = v262;
  sub_1DB0C4BA8();
  if (v72) {
    return sub_1DB042664(a1, a2);
  }
  unint64_t v223 = v58;
  uint64_t v224 = v62;
  uint64_t v74 = (uint64_t)v261;
  uint64_t v225 = a1;
  unint64_t v262 = a2;
  int v75 = *(_DWORD *)v71;
  if (*(_DWORD *)v71 != 1)
  {
    *(void *)&long long v267 = 0;
    *((void *)&v267 + 1) = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    LODWORD(v263) = v75;
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    uint64_t v86 = *((void *)&v267 + 1);
    uint64_t v85 = v267;
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v87 = 17;
    *(_DWORD *)(v87 + 4) = 0;
    *(unsigned char *)(v87 + 8) = 1;
    *(_DWORD *)(v87 + 12) = 0;
    *(_WORD *)(v87 + 16) = 256;
    *(_OWORD *)(v87 + 24) = xmmword_1DB0CA1C0;
    *(void *)(v87 + 40) = 0xE800000000000000;
    *(void *)(v87 + 48) = 0xD00000000000006BLL;
    goto LABEL_8;
  }
  unint64_t v220 = 0;
  unint64_t v221 = &v71[*(int *)(v69 + 28)];
  sub_1DB087768((uint64_t)v221, (uint64_t)v67, &qword_1EA8FE708);
  char v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  uint64_t v77 = v258;
  uint64_t v261 = (char *)(v74 + 48);
  unint64_t v222 = v76;
  int v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v76)(v67, 1, v258);
  sub_1DB06F7F4((uint64_t)v67, &qword_1EA8FE708);
  if (v78 == 1
    || (uint64_t v219 = &v71[*(int *)(v69 + 32)],
        uint64_t v79 = (uint64_t)v223,
        sub_1DB087768((uint64_t)v219, (uint64_t)v223, &qword_1EA8FE710),
        uint64_t v80 = v259 + 48,
        uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v259 + 48),
        int v82 = v81(v79, 1, v260),
        sub_1DB06F7F4(v79, &qword_1EA8FE710),
        v82 == 1))
  {
    *(void *)&long long v267 = 0;
    *((void *)&v267 + 1) = 0xE000000000000000;
    sub_1DB0C5288();
    sub_1DB0C50B8();
    uint64_t v83 = (uint64_t)v224;
    sub_1DB087768((uint64_t)v221, (uint64_t)v224, &qword_1EA8FE708);
    v222(v83, 1, v77);
    sub_1DB06F7F4(v83, &qword_1EA8FE708);
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    sub_1DB0C50B8();
    uint64_t v84 = v257;
    sub_1DB087768((uint64_t)&v71[*(int *)(v69 + 32)], v257, &qword_1EA8FE710);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v259 + 48))(v84, 1, v260);
    sub_1DB06F7F4(v84, &qword_1EA8FE710);
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    uint64_t v86 = *((void *)&v267 + 1);
    uint64_t v85 = v267;
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v87 = 17;
    *(_DWORD *)(v87 + 4) = 0;
    *(unsigned char *)(v87 + 8) = 1;
    *(_DWORD *)(v87 + 12) = 0;
    *(_WORD *)(v87 + 16) = 256;
    *(_OWORD *)(v87 + 24) = xmmword_1DB0CA230;
    *(void *)(v87 + 40) = 0xE800000000000000;
    *(void *)(v87 + 48) = 0xD00000000000006BLL;
LABEL_8:
    *(void *)(v87 + 56) = 0x80000001DB0CC770;
    *(void *)(v87 + 64) = v85;
    *(void *)(v87 + 72) = v86;
    swift_willThrow();
    sub_1DB058E78((uint64_t *)v71 + 1);
    uint64_t v88 = v225;
    unint64_t v89 = v262;
    goto LABEL_9;
  }
  sub_1DB087768((uint64_t)v221, (uint64_t)v65, &qword_1EA8FE708);
  int v91 = ((uint64_t (*)(char *, uint64_t, uint64_t))v222)(v65, 1, v77);
  uint64_t v92 = v220;
  uint64_t v93 = v255;
  if (v91 == 1)
  {
    *uint64_t v255 = 0;
    *((void *)v93 + 1) = 0;
    *((_WORD *)v93 + 8) = 1;
    v93[5] = 0;
    *((unsigned char *)v93 + 24) = 0;
    *((_OWORD *)v93 + 2) = xmmword_1DB0C7A30;
    *((unsigned char *)v93 + 48) = 0;
    *(_OWORD *)(v93 + 14) = xmmword_1DB0C7A30;
    sub_1DB0C4AA8();
    sub_1DB06F7F4((uint64_t)v65, &qword_1EA8FE708);
  }
  else
  {
    sub_1DB0877CC((uint64_t)v65, (uint64_t)v255, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
  }
  unint64_t v94 = v262;
  uint64_t v95 = sub_1DB0C14B4((uint64_t)v93);
  size_t v96 = (uint64_t *)(v71 + 8);
  unsigned __int8 v97 = v256;
  if (v92)
  {
    sub_1DB058E78((uint64_t *)v71 + 1);
    uint64_t v88 = v225;
    unint64_t v89 = v94;
LABEL_9:
    sub_1DB042664(v88, v89);
    uint64_t v90 = (uint64_t)v71;
    return sub_1DB0C2840(v90, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  }
  uint64_t v257 = v80;
  *uint64_t v256 = v95;
  uint64_t v98 = *((void *)v71 + 1);
  unint64_t v99 = *((void *)v71 + 2);
  uint64_t v261 = v71;
  uint64_t v100 = v225;
  uint64_t v101 = 0;
  switch(v99 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v98), v98))
      {
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
        JUMPOUT(0x1DB0BCDFCLL);
      }
      uint64_t v101 = HIDWORD(v98) - (int)v98;
LABEL_22:
      uint64_t v259 = *(void *)(v95 + 72);
      if (v101 == v259)
      {
        unint64_t v220 = 0;
        *(void *)&long long v267 = v98;
        *((void *)&v267 + 1) = v99;
        uint64_t v104 = v95;
        uint64_t v255 = (_DWORD *)type metadata accessor for CKSecretSharing.HybridGenerator();
        uint64_t v258 = v104;
        swift_retain();
        sub_1DB04239C(v98, v99);
        sub_1DB0C4D48();
        uint64_t v105 = v253;
        sub_1DB087768((uint64_t)v219, v253, &qword_1EA8FE710);
        uint64_t v106 = v260;
        if (v81(v105, 1, v260) == 1)
        {
          char v107 = v254;
          *uint64_t v254 = xmmword_1DB0C7A30;
          v107[1] = xmmword_1DB0C7A30;
          v107[2] = xmmword_1DB0C7A30;
          sub_1DB0C4AA8();
          sub_1DB06F7F4(v105, &qword_1EA8FE710);
        }
        else
        {
          char v107 = v254;
          sub_1DB0877CC(v105, (uint64_t)v254, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
        }
        uint64_t v110 = *(void *)v107;
        unint64_t v111 = *((void *)v107 + 1);
        uint64_t v112 = 0;
        switch(v111 >> 62)
        {
          case 1uLL:
            BOOL v115 = __OFSUB__(HIDWORD(v110), v110);
            int v120 = HIDWORD(v110) - v110;
            if (v115) {
              goto LABEL_124;
            }
            uint64_t v112 = v120;
LABEL_37:
            uint64_t v124 = *(void *)(v258 + 88);
            sub_1DB0C2840((uint64_t)v254, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
            if (v112 == v124)
            {
              uint64_t v125 = v249;
              sub_1DB087768((uint64_t)v219, v249, &qword_1EA8FE710);
              if (v81(v125, 1, v106) == 1)
              {
                unint64_t v126 = v252;
                *uint64_t v252 = xmmword_1DB0C7A30;
                v126[1] = xmmword_1DB0C7A30;
                v126[2] = xmmword_1DB0C7A30;
                sub_1DB0C4AA8();
                sub_1DB06F7F4(v125, &qword_1EA8FE710);
              }
              else
              {
                unint64_t v126 = v252;
                sub_1DB0877CC(v125, (uint64_t)v252, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
              }
              uint64_t v129 = *(void *)v126;
              unint64_t v130 = *((void *)v126 + 1);
              uint64_t v131 = 0;
              switch(v130 >> 62)
              {
                case 1uLL:
                  BOOL v115 = __OFSUB__(HIDWORD(v129), v129);
                  int v135 = HIDWORD(v129) - v129;
                  if (v115) {
                    goto LABEL_126;
                  }
                  uint64_t v131 = v135;
LABEL_51:
                  uint64_t v139 = *(void *)(v258 + 88);
                  sub_1DB0C2840((uint64_t)v252, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                  if (v131 == v139)
                  {
                    uint64_t v140 = v245;
                    sub_1DB087768((uint64_t)v219, v245, &qword_1EA8FE710);
                    if (v81(v140, 1, v106) == 1)
                    {
                      unint64_t v141 = v248;
                      *int v248 = xmmword_1DB0C7A30;
                      v141[1] = xmmword_1DB0C7A30;
                      v141[2] = xmmword_1DB0C7A30;
                      sub_1DB0C4AA8();
                      sub_1DB06F7F4(v140, &qword_1EA8FE710);
                    }
                    else
                    {
                      unint64_t v141 = v248;
                      sub_1DB0877CC(v140, (uint64_t)v248, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                    }
                    uint64_t v148 = *((void *)v141 + 4);
                    unint64_t v149 = *((void *)v141 + 5);
                    uint64_t v150 = 0;
                    switch(v149 >> 62)
                    {
                      case 1uLL:
                        BOOL v115 = __OFSUB__(HIDWORD(v148), v148);
                        int v154 = HIDWORD(v148) - v148;
                        if (v115) {
                          goto LABEL_130;
                        }
                        uint64_t v150 = v154;
LABEL_69:
                        uint64_t v158 = *(void *)(v258 + 96);
                        sub_1DB0C2840((uint64_t)v248, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                        if (v150 == v158)
                        {
                          uint64_t v159 = v241;
                          sub_1DB087768((uint64_t)v219, v241, &qword_1EA8FE710);
                          if (v81(v159, 1, v106) == 1)
                          {
                            uint64_t v160 = v243;
                            *uint64_t v243 = xmmword_1DB0C7A30;
                            v160[1] = xmmword_1DB0C7A30;
                            v160[2] = xmmword_1DB0C7A30;
                            sub_1DB0C4AA8();
                            sub_1DB06F7F4(v159, &qword_1EA8FE710);
                          }
                          else
                          {
                            uint64_t v160 = v243;
                            sub_1DB0877CC(v159, (uint64_t)v243, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                          }
                          uint64_t v167 = *((void *)v160 + 4);
                          unint64_t v168 = *((void *)v160 + 5);
                          uint64_t v169 = 0;
                          switch(v168 >> 62)
                          {
                            case 1uLL:
                              BOOL v115 = __OFSUB__(HIDWORD(v167), v167);
                              int v173 = HIDWORD(v167) - v167;
                              if (v115) {
                                goto LABEL_134;
                              }
                              uint64_t v169 = v173;
LABEL_87:
                              uint64_t v177 = *(void *)(v258 + 96);
                              sub_1DB0C2840((uint64_t)v243, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                              if (v169 != v177)
                              {
                                uint64_t v108 = v96;
                                *(void *)&long long v267 = 0;
                                *((void *)&v267 + 1) = 0xE000000000000000;
                                sub_1DB0C5288();
                                sub_1DB0C50B8();
                                uint64_t v180 = v237;
                                sub_1DB087768((uint64_t)v219, v237, &qword_1EA8FE710);
                                if (v81(v180, 1, v106) == 1)
                                {
                                  unint64_t v181 = v240;
                                  *uint64_t v240 = xmmword_1DB0C7A30;
                                  v181[1] = xmmword_1DB0C7A30;
                                  void v181[2] = xmmword_1DB0C7A30;
                                  sub_1DB0C4AA8();
                                  sub_1DB06F7F4(v180, &qword_1EA8FE710);
                                }
                                else
                                {
                                  unint64_t v181 = v240;
                                  sub_1DB0877CC(v180, (uint64_t)v240, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                                }
                                uint64_t v194 = *((void *)v181 + 4);
                                unint64_t v195 = *((void *)v181 + 5);
                                uint64_t v196 = 0;
                                switch(v195 >> 62)
                                {
                                  case 1uLL:
                                    LODWORD(v196) = HIDWORD(v194) - v194;
                                    if (__OFSUB__(HIDWORD(v194), v194)) {
                                      goto LABEL_138;
                                    }
                                    uint64_t v196 = (int)v196;
LABEL_106:
                                    uint64_t v263 = v196;
                                    sub_1DB0C53C8();
                                    sub_1DB0C50B8();
                                    swift_bridgeObjectRelease();
                                    sub_1DB0C2840((uint64_t)v240, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                                    sub_1DB0C50B8();
                                    uint64_t v200 = *(void *)(v258 + 96);
                                    swift_release();
                                    uint64_t v263 = v200;
                                    sub_1DB0C53C8();
                                    sub_1DB0C50B8();
                                    swift_bridgeObjectRelease();
                                    uint64_t v117 = *((void *)&v267 + 1);
                                    uint64_t v116 = v267;
                                    sub_1DB056B5C();
                                    swift_allocError();
                                    *(unsigned char *)uint64_t v118 = 17;
                                    *(_DWORD *)(v118 + 4) = 0;
                                    *(unsigned char *)(v118 + 8) = 1;
                                    *(_DWORD *)(v118 + 12) = 0;
                                    *(_WORD *)(v118 + 16) = 256;
                                    long long v119 = xmmword_1DB0CA210;
                                    break;
                                  case 2uLL:
                                    uint64_t v199 = v194 + 16;
                                    uint64_t v198 = *(void *)(v194 + 16);
                                    uint64_t v197 = *(void *)(v199 + 8);
                                    BOOL v115 = __OFSUB__(v197, v198);
                                    uint64_t v196 = v197 - v198;
                                    if (!v115) {
                                      goto LABEL_106;
                                    }
                                    goto LABEL_139;
                                  case 3uLL:
                                    goto LABEL_106;
                                  default:
                                    uint64_t v196 = BYTE6(v195);
                                    goto LABEL_106;
                                }
                                goto LABEL_107;
                              }
                              swift_release();
                              uint64_t v178 = v236;
                              sub_1DB087768((uint64_t)v219, v236, &qword_1EA8FE710);
                              if (v81(v178, 1, v106) == 1)
                              {
                                uint64_t v179 = v238;
                                *int v238 = xmmword_1DB0C7A30;
                                v179[1] = xmmword_1DB0C7A30;
                                v179[2] = xmmword_1DB0C7A30;
                                sub_1DB0C4AA8();
                                sub_1DB06F7F4(v178, &qword_1EA8FE710);
                              }
                              else
                              {
                                uint64_t v179 = v238;
                                sub_1DB0877CC(v178, (uint64_t)v238, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                              }
                              uint64_t v186 = v239;
                              uint64_t v188 = *(void *)v179;
                              unint64_t v187 = *((void *)v179 + 1);
                              sub_1DB04239C(*(void *)v179, v187);
                              sub_1DB0C2840((uint64_t)v179, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                              *(void *)&long long v267 = v188;
                              *((void *)&v267 + 1) = v187;
                              sub_1DB06F7A0();
                              uint64_t v189 = v220;
                              sub_1DB0C4DB8();
                              uint64_t v190 = v189;
                              if (!v189)
                              {
                                (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v233, v186, v235);
                                uint64_t v191 = v228;
                                sub_1DB087768((uint64_t)v219, v228, &qword_1EA8FE710);
                                int v192 = v81(v191, 1, v106);
                                unint64_t v220 = 0;
                                uint64_t v193 = v230;
                                if (v192 == 1)
                                {
                                  *uint64_t v230 = xmmword_1DB0C7A30;
                                  v193[1] = xmmword_1DB0C7A30;
                                  v193[2] = xmmword_1DB0C7A30;
                                  sub_1DB0C4AA8();
                                  sub_1DB06F7F4(v191, &qword_1EA8FE710);
                                }
                                else
                                {
                                  sub_1DB0877CC(v191, (uint64_t)v230, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                                }
                                uint64_t v204 = *((void *)v193 + 2);
                                unint64_t v203 = *((void *)v193 + 3);
                                sub_1DB04239C(v204, v203);
                                sub_1DB0C2840((uint64_t)v193, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                                *(void *)&long long v267 = v204;
                                *((void *)&v267 + 1) = v203;
                                uint64_t v205 = v229;
                                sub_1DB087768((uint64_t)v219, v229, &qword_1EA8FE710);
                                if (v81(v205, 1, v106) == 1)
                                {
                                  uint64_t v206 = v231;
                                  _OWORD *v231 = xmmword_1DB0C7A30;
                                  v206[1] = xmmword_1DB0C7A30;
                                  v206[2] = xmmword_1DB0C7A30;
                                  int v207 = v206;
                                  sub_1DB0C4AA8();
                                  sub_1DB06F7F4(v205, &qword_1EA8FE710);
                                }
                                else
                                {
                                  int v207 = v231;
                                  sub_1DB0877CC(v205, (uint64_t)v231, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                                }
                                uint64_t v208 = *((void *)v207 + 4);
                                unint64_t v209 = *((void *)v207 + 5);
                                sub_1DB04239C(v208, v209);
                                sub_1DB0C2840((uint64_t)v207, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                                uint64_t v263 = v208;
                                unint64_t v264 = v209;
                                uint64_t v210 = v232;
                                unint64_t v211 = v220;
                                sub_1DB0C4DF8();
                                uint64_t v190 = v211;
                                if (!v211)
                                {
                                  (*(void (**)(char *, uint64_t))(v234 + 8))(v239, v235);
                                  (*(void (**)(char *, char *, uint64_t))(v226 + 32))((char *)v97 + (int)v255[6], v210, v227);
                                  sub_1DB058E78(v96);
                                  sub_1DB042664(v100, v262);
                                  uint64_t v90 = (uint64_t)v261;
                                  return sub_1DB0C2840(v90, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
                                }
                                (*(void (**)(char *, uint64_t))(v234 + 8))(v239, v235);
                              }
                              *(void *)&long long v267 = v190;
                              id v212 = v190;
                              __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE300);
                              if (swift_dynamicCast())
                              {
                                uint64_t v263 = (uint64_t)v190;
                                id v213 = v190;
                                swift_dynamicCast();
                                unint64_t v214 = v190;
                                int v215 = v265;
                                int v216 = v266;
                                sub_1DB056B5C();
                                swift_allocError();
                                *(unsigned char *)uint64_t v217 = 17;
                                *(_DWORD *)(v217 + 4) = 0;
                                *(unsigned char *)(v217 + 8) = 1;
                                *(unsigned char *)(v217 + 16) = v216 != 0;
                                *(_DWORD *)(v217 + 12) = v215;
                                *(unsigned char *)(v217 + 17) = 0;
                                *(_OWORD *)(v217 + 24) = xmmword_1DB0CA220;
                                *(void *)(v217 + 40) = 0xE800000000000000;
                                *(void *)(v217 + 48) = 0xD00000000000006BLL;
                                *(void *)(v217 + 56) = 0x80000001DB0CC770;
                                *(void *)(v217 + 64) = 0xD00000000000002CLL;
                                *(void *)(v217 + 72) = 0x80000001DB0CCA10;
                                swift_willThrow();
                              }
                              else
                              {

                                swift_willThrow();
                              }
                              sub_1DB058E78(v96);
                              sub_1DB042664(v100, v262);
                              sub_1DB0C2840((uint64_t)v261, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
                              swift_release();
                              break;
                            case 2uLL:
                              uint64_t v176 = v167 + 16;
                              uint64_t v174 = *(void *)(v167 + 16);
                              uint64_t v175 = *(void *)(v176 + 8);
                              uint64_t v169 = v175 - v174;
                              if (!__OFSUB__(v175, v174)) {
                                goto LABEL_87;
                              }
                              goto LABEL_135;
                            case 3uLL:
                              goto LABEL_87;
                            default:
                              uint64_t v169 = BYTE6(v168);
                              goto LABEL_87;
                          }
                          goto LABEL_108;
                        }
                        uint64_t v108 = v96;
                        *(void *)&long long v267 = 0;
                        *((void *)&v267 + 1) = 0xE000000000000000;
                        sub_1DB0C5288();
                        sub_1DB0C50B8();
                        uint64_t v161 = v242;
                        sub_1DB087768((uint64_t)v219, v242, &qword_1EA8FE710);
                        if (v81(v161, 1, v106) == 1)
                        {
                          uint64_t v162 = v244;
                          *uint64_t v244 = xmmword_1DB0C7A30;
                          v162[1] = xmmword_1DB0C7A30;
                          v162[2] = xmmword_1DB0C7A30;
                          sub_1DB0C4AA8();
                          sub_1DB06F7F4(v161, &qword_1EA8FE710);
                        }
                        else
                        {
                          uint64_t v162 = v244;
                          sub_1DB0877CC(v161, (uint64_t)v244, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                        }
                        uint64_t v170 = *((void *)v162 + 4);
                        unint64_t v171 = *((void *)v162 + 5);
                        uint64_t v172 = 0;
                        switch(v171 >> 62)
                        {
                          case 1uLL:
                            LODWORD(v172) = HIDWORD(v170) - v170;
                            if (__OFSUB__(HIDWORD(v170), v170)) {
                              goto LABEL_136;
                            }
                            uint64_t v172 = (int)v172;
LABEL_95:
                            uint64_t v263 = v172;
                            sub_1DB0C53C8();
                            sub_1DB0C50B8();
                            swift_bridgeObjectRelease();
                            sub_1DB0C2840((uint64_t)v244, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                            sub_1DB0C50B8();
                            uint64_t v185 = *(void *)(v258 + 96);
                            swift_release();
                            uint64_t v263 = v185;
                            sub_1DB0C53C8();
                            sub_1DB0C50B8();
                            swift_bridgeObjectRelease();
                            uint64_t v117 = *((void *)&v267 + 1);
                            uint64_t v116 = v267;
                            sub_1DB056B5C();
                            swift_allocError();
                            *(unsigned char *)uint64_t v118 = 17;
                            *(_DWORD *)(v118 + 4) = 0;
                            *(unsigned char *)(v118 + 8) = 1;
                            *(_DWORD *)(v118 + 12) = 0;
                            *(_WORD *)(v118 + 16) = 256;
                            long long v119 = xmmword_1DB0CA200;
                            break;
                          case 2uLL:
                            uint64_t v184 = v170 + 16;
                            uint64_t v183 = *(void *)(v170 + 16);
                            uint64_t v182 = *(void *)(v184 + 8);
                            BOOL v115 = __OFSUB__(v182, v183);
                            uint64_t v172 = v182 - v183;
                            if (!v115) {
                              goto LABEL_95;
                            }
                            goto LABEL_137;
                          case 3uLL:
                            goto LABEL_95;
                          default:
                            uint64_t v172 = BYTE6(v171);
                            goto LABEL_95;
                        }
                        break;
                      case 2uLL:
                        uint64_t v157 = v148 + 16;
                        uint64_t v155 = *(void *)(v148 + 16);
                        uint64_t v156 = *(void *)(v157 + 8);
                        uint64_t v150 = v156 - v155;
                        if (!__OFSUB__(v156, v155)) {
                          goto LABEL_69;
                        }
                        goto LABEL_131;
                      case 3uLL:
                        goto LABEL_69;
                      default:
                        uint64_t v150 = BYTE6(v149);
                        goto LABEL_69;
                    }
                  }
                  else
                  {
                    uint64_t v108 = v96;
                    *(void *)&long long v267 = 0;
                    *((void *)&v267 + 1) = 0xE000000000000000;
                    sub_1DB0C5288();
                    sub_1DB0C50B8();
                    uint64_t v142 = v246;
                    sub_1DB087768((uint64_t)v219, v246, &qword_1EA8FE710);
                    if (v81(v142, 1, v106) == 1)
                    {
                      unint64_t v143 = v247;
                      *uint64_t v247 = xmmword_1DB0C7A30;
                      v143[1] = xmmword_1DB0C7A30;
                      v143[2] = xmmword_1DB0C7A30;
                      sub_1DB0C4AA8();
                      sub_1DB06F7F4(v142, &qword_1EA8FE710);
                    }
                    else
                    {
                      unint64_t v143 = v247;
                      sub_1DB0877CC(v142, (uint64_t)v247, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                    }
                    uint64_t v151 = *(void *)v143;
                    unint64_t v152 = *((void *)v143 + 1);
                    uint64_t v153 = 0;
                    switch(v152 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v153) = HIDWORD(v151) - v151;
                        if (__OFSUB__(HIDWORD(v151), v151)) {
                          goto LABEL_132;
                        }
                        uint64_t v153 = (int)v153;
LABEL_77:
                        uint64_t v263 = v153;
                        sub_1DB0C53C8();
                        sub_1DB0C50B8();
                        swift_bridgeObjectRelease();
                        sub_1DB0C2840((uint64_t)v143, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                        sub_1DB0C50B8();
                        uint64_t v166 = *(void *)(v258 + 88);
                        swift_release();
                        uint64_t v263 = v166;
                        sub_1DB0C53C8();
                        sub_1DB0C50B8();
                        swift_bridgeObjectRelease();
                        uint64_t v117 = *((void *)&v267 + 1);
                        uint64_t v116 = v267;
                        sub_1DB056B5C();
                        swift_allocError();
                        *(unsigned char *)uint64_t v118 = 17;
                        *(_DWORD *)(v118 + 4) = 0;
                        *(unsigned char *)(v118 + 8) = 1;
                        *(_DWORD *)(v118 + 12) = 0;
                        *(_WORD *)(v118 + 16) = 256;
                        long long v119 = xmmword_1DB0CA1F0;
                        break;
                      case 2uLL:
                        uint64_t v165 = v151 + 16;
                        uint64_t v164 = *(void *)(v151 + 16);
                        uint64_t v163 = *(void *)(v165 + 8);
                        BOOL v115 = __OFSUB__(v163, v164);
                        uint64_t v153 = v163 - v164;
                        if (!v115) {
                          goto LABEL_77;
                        }
                        goto LABEL_133;
                      case 3uLL:
                        goto LABEL_77;
                      default:
                        uint64_t v153 = BYTE6(v152);
                        goto LABEL_77;
                    }
                  }
                  break;
                case 2uLL:
                  uint64_t v138 = v129 + 16;
                  uint64_t v136 = *(void *)(v129 + 16);
                  uint64_t v137 = *(void *)(v138 + 8);
                  uint64_t v131 = v137 - v136;
                  if (!__OFSUB__(v137, v136)) {
                    goto LABEL_51;
                  }
                  goto LABEL_127;
                case 3uLL:
                  goto LABEL_51;
                default:
                  uint64_t v131 = BYTE6(v130);
                  goto LABEL_51;
              }
            }
            else
            {
              uint64_t v108 = v96;
              *(void *)&long long v267 = 0;
              *((void *)&v267 + 1) = 0xE000000000000000;
              sub_1DB0C5288();
              sub_1DB0C50B8();
              uint64_t v127 = v250;
              sub_1DB087768((uint64_t)v219, v250, &qword_1EA8FE710);
              if (v81(v127, 1, v106) == 1)
              {
                unint64_t v128 = v251;
                _OWORD *v251 = xmmword_1DB0C7A30;
                v128[1] = xmmword_1DB0C7A30;
                v128[2] = xmmword_1DB0C7A30;
                sub_1DB0C4AA8();
                sub_1DB06F7F4(v127, &qword_1EA8FE710);
              }
              else
              {
                unint64_t v128 = v251;
                sub_1DB0877CC(v127, (uint64_t)v251, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
              }
              uint64_t v132 = *(void *)v128;
              unint64_t v133 = *((void *)v128 + 1);
              uint64_t v134 = 0;
              switch(v133 >> 62)
              {
                case 1uLL:
                  LODWORD(v134) = HIDWORD(v132) - v132;
                  if (__OFSUB__(HIDWORD(v132), v132)) {
                    goto LABEL_128;
                  }
                  uint64_t v134 = (int)v134;
LABEL_59:
                  uint64_t v263 = v134;
                  sub_1DB0C53C8();
                  sub_1DB0C50B8();
                  swift_bridgeObjectRelease();
                  sub_1DB0C2840((uint64_t)v128, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization.SealedBox);
                  sub_1DB0C50B8();
                  uint64_t v147 = *(void *)(v258 + 88);
                  swift_release();
                  uint64_t v263 = v147;
                  sub_1DB0C53C8();
                  sub_1DB0C50B8();
                  swift_bridgeObjectRelease();
                  uint64_t v117 = *((void *)&v267 + 1);
                  uint64_t v116 = v267;
                  sub_1DB056B5C();
                  swift_allocError();
                  *(unsigned char *)uint64_t v118 = 17;
                  *(_DWORD *)(v118 + 4) = 0;
                  *(unsigned char *)(v118 + 8) = 1;
                  *(_DWORD *)(v118 + 12) = 0;
                  *(_WORD *)(v118 + 16) = 256;
                  long long v119 = xmmword_1DB0CA1E0;
                  break;
                case 2uLL:
                  uint64_t v146 = v132 + 16;
                  uint64_t v145 = *(void *)(v132 + 16);
                  uint64_t v144 = *(void *)(v146 + 8);
                  BOOL v115 = __OFSUB__(v144, v145);
                  uint64_t v134 = v144 - v145;
                  if (!v115) {
                    goto LABEL_59;
                  }
                  goto LABEL_129;
                case 3uLL:
                  goto LABEL_59;
                default:
                  uint64_t v134 = BYTE6(v133);
                  goto LABEL_59;
              }
            }
            break;
          case 2uLL:
            uint64_t v123 = v110 + 16;
            uint64_t v121 = *(void *)(v110 + 16);
            uint64_t v122 = *(void *)(v123 + 8);
            uint64_t v112 = v122 - v121;
            if (!__OFSUB__(v122, v121)) {
              goto LABEL_37;
            }
            goto LABEL_125;
          case 3uLL:
            goto LABEL_37;
          default:
            uint64_t v112 = BYTE6(v111);
            goto LABEL_37;
        }
      }
      else
      {
        uint64_t v108 = v96;
        *(void *)&long long v267 = 0;
        *((void *)&v267 + 1) = 0xE000000000000000;
        sub_1DB0C5288();
        sub_1DB0C50B8();
        uint64_t v109 = 0;
        switch(v99 >> 62)
        {
          case 1uLL:
            LODWORD(v109) = HIDWORD(v98) - v98;
            if (__OFSUB__(HIDWORD(v98), v98)) {
              goto LABEL_122;
            }
            uint64_t v109 = (int)v109;
LABEL_33:
            uint64_t v263 = v109;
            sub_1DB0C53C8();
            sub_1DB0C50B8();
            swift_bridgeObjectRelease();
            sub_1DB0C50B8();
            uint64_t v117 = *((void *)&v267 + 1);
            uint64_t v116 = v267;
            sub_1DB056B5C();
            swift_allocError();
            *(unsigned char *)uint64_t v118 = 17;
            *(_DWORD *)(v118 + 4) = 0;
            *(unsigned char *)(v118 + 8) = 1;
            *(_DWORD *)(v118 + 12) = 0;
            *(_WORD *)(v118 + 16) = 256;
            long long v119 = xmmword_1DB0CA1D0;
            break;
          case 2uLL:
            uint64_t v114 = *(void *)(v98 + 16);
            uint64_t v113 = *(void *)(v98 + 24);
            BOOL v115 = __OFSUB__(v113, v114);
            uint64_t v109 = v113 - v114;
            if (!v115) {
              goto LABEL_33;
            }
            goto LABEL_123;
          case 3uLL:
            goto LABEL_33;
          default:
            uint64_t v109 = BYTE6(v99);
            goto LABEL_33;
        }
      }
LABEL_107:
      *(_OWORD *)(v118 + 24) = v119;
      *(void *)(v118 + 40) = 0xE800000000000000;
      *(void *)(v118 + 48) = 0xD00000000000006BLL;
      *(void *)(v118 + 56) = 0x80000001DB0CC770;
      *(void *)(v118 + 64) = v116;
      *(void *)(v118 + 72) = v117;
      swift_willThrow();
      sub_1DB058E78(v108);
      sub_1DB042664(v225, v262);
      sub_1DB0C2840((uint64_t)v261, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
      uint64_t result = swift_release();
      if (v101 == v259)
      {
LABEL_108:
        uint64_t v201 = (char *)v97 + *(int *)(type metadata accessor for CKSecretSharing.HybridGenerator() + 20);
        uint64_t v202 = sub_1DB0C4D58();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v202 - 8) + 8))(v201, v202);
      }
      break;
    case 2uLL:
      uint64_t v103 = *(void *)(v98 + 16);
      uint64_t v102 = *(void *)(v98 + 24);
      uint64_t v101 = v102 - v103;
      if (!__OFSUB__(v102, v103)) {
        goto LABEL_22;
      }
      goto LABEL_121;
    case 3uLL:
      goto LABEL_22;
    default:
      uint64_t v101 = BYTE6(v99);
      goto LABEL_22;
  }
  return result;
}

id sub_1DB0BCE9C(int a1)
{
  if (!a1)
  {
    sub_1DB056B5C();
    swift_allocError();
    int v6 = 0;
    *(unsigned char *)uint64_t v7 = 1;
    unint64_t v9 = 0x80000001DB0CB290;
    uint64_t v10 = 360;
    unint64_t v8 = 0xD000000000000022;
    goto LABEL_5;
  }
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 152);
  int share = ccss_shamir_share_generator_generate_share();
  if (share)
  {
    int v6 = share;
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 3;
    unint64_t v8 = 0xD000000000000041;
    unint64_t v9 = 0x80000001DB0CB2F0;
    uint64_t v10 = 364;
LABEL_5:
    *(_DWORD *)(v7 + 4) = v6;
    *(unsigned char *)(v7 + 8) = a1 == 0;
    *(_WORD *)(v7 + 16) = 256;
    *(_DWORD *)(v7 + 12) = 0;
    *(void *)(v7 + 24) = v10;
    *(void *)(v7 + 32) = 0xD000000000000029;
    *(void *)(v7 + 40) = 0x80000001DB0CCD90;
    *(void *)(v7 + 48) = 0xD00000000000006BLL;
    *(void *)(v7 + 56) = 0x80000001DB0CC770;
    *(void *)(v7 + 64) = v8;
    *(void *)(v7 + 72) = v9;
    return (id)swift_willThrow();
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5E500]), sel_initWithParams_share_, *(void *)(v3 + 144), v4);
}

void CKSecretSharing.HybridGenerator.generateShare(shareIndex:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_1DB0C4DC8();
  uint64_t v55 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CKSecretSharing.HybridGenerator();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)v2;
  uint64_t v14 = *(void *)(*(void *)v2 + 64);
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (a1 < 1 || v14 < a1)
  {
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    sub_1DB0C5288();
    swift_bridgeObjectRelease();
    uint64_t v58 = 0xD00000000000002ALL;
    unint64_t v59 = 0x80000001DB0CCA40;
    id v56 = *(id *)(v13 + 64);
    sub_1DB0C53C8();
    sub_1DB0C50B8();
    swift_bridgeObjectRelease();
    uint64_t v19 = v58;
    unint64_t v20 = v59;
    sub_1DB056B5C();
    uint64_t v4 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v21 = 1;
    *(_DWORD *)(v21 + 4) = 0;
    *(unsigned char *)(v21 + 8) = 1;
    *(_DWORD *)(v21 + 12) = 0;
    *(_WORD *)(v21 + 16) = 256;
    *(_OWORD *)(v21 + 24) = xmmword_1DB0CA240;
    *(void *)(v21 + 40) = 0x80000001DB0CAFC0;
    *(void *)(v21 + 48) = 0xD00000000000006BLL;
    *(void *)(v21 + 56) = 0x80000001DB0CC770;
    *(void *)(v21 + 64) = v19;
    *(void *)(v21 + 72) = v20;
    swift_willThrow();
    goto LABEL_11;
  }
  if (HIDWORD(a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  id v15 = sub_1DB0BCE9C(a1);
  if (!v3)
  {
    uint64_t v16 = v15;
    int v17 = *(unsigned __int8 *)(v13 + 17);
    int v54 = v17;
    if (v17 != 1)
    {
      uint64_t v50 = 0;
      goto LABEL_20;
    }
    unint64_t v18 = *(void *)(v13 + 24);
    if ((v18 & 0x8000000000000000) == 0)
    {
      if (!HIDWORD(v18))
      {
        uint64_t v50 = *(void *)(v13 + 24);
LABEL_20:
        int v29 = *(unsigned __int8 *)(v13 + 16);
        sub_1DB0C191C(v2, (uint64_t)v12);
        if (v29 == 1 && *(void *)(*(void *)v12 + 40) >> 60 != 15)
        {
          sub_1DB0C2840((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator);
          uint64_t v30 = *(void *)(*(void *)v2 + 32);
          unint64_t v52 = *(void *)(*(void *)v2 + 40);
          uint64_t v53 = v30;
          sub_1DB067A4C(v30, v52);
        }
        else
        {
          sub_1DB0C2840((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CKSecretSharing.HybridGenerator);
          unint64_t v52 = 0xF000000000000000;
          uint64_t v53 = 0;
        }
        unsigned int v51 = objc_msgSend(v16, sel_x);
        id v31 = objc_msgSend(v16, sel_y);
        if (v31)
        {
          uint64_t v32 = v31;
          v54 ^= 1u;
          uint64_t v33 = sub_1DB0C4A08();
          uint64_t v48 = v34;
          uint64_t v49 = v33;

          sub_1DB0C4E08();
          uint64_t v60 = v7;
          uint64_t v61 = sub_1DB0C27F8(&qword_1EA8FED18, MEMORY[0x1E4F25080]);
          uint64_t v35 = __swift_allocate_boxed_opaque_existential_1(&v58);
          uint64_t v36 = v55;
          (*(void (**)(uint64_t *, char *, uint64_t))(v55 + 16))(v35, v9, v7);
          __swift_project_boxed_opaque_existential_1(&v58, v60);
          sub_1DB0C4908();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v7);
          id v37 = v56;
          uint64_t v38 = v57;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
          uint64_t v39 = sub_1DB0C4DD8();
          uint64_t v41 = v40;
          uint64_t v42 = sub_1DB0C4DE8();
          uint64_t v44 = v43;

          *(void *)a2 = 1;
          int v45 = v50;
          *(_DWORD *)(a2 + 8) = v51;
          *(_DWORD *)(a2 + 12) = v45;
          *(unsigned char *)(a2 + 16) = v54;
          uint64_t v46 = v48;
          *(void *)(a2 + 24) = v49;
          *(void *)(a2 + 32) = v46;
          *(void *)(a2 + 40) = v37;
          *(void *)(a2 + 48) = v38;
          *(void *)(a2 + 56) = v39;
          *(void *)(a2 + 64) = v41;
          *(void *)(a2 + 72) = v42;
          *(void *)(a2 + 80) = v44;
          unint64_t v47 = v52;
          *(void *)(a2 + 88) = v53;
          *(void *)(a2 + 96) = v47;
          return;
        }
        goto LABEL_30;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      sub_1DB069BB4(v53, v52);
      __break(1u);
      return;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_11:
  id v56 = v4;
  id v22 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE300);
  if (swift_dynamicCast())
  {

    int v23 = v64;
    if (v65 == 1)
    {
      if (v64 == 1)
      {
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v24 = 1;
        *(_DWORD *)(v24 + 4) = 0;
        *(unsigned char *)(v24 + 8) = 1;
        *(_DWORD *)(v24 + 12) = 0;
        *(_WORD *)(v24 + 16) = 256;
        *(_OWORD *)(v24 + 24) = xmmword_1DB0CA260;
        *(void *)(v24 + 40) = 0x80000001DB0CAFC0;
        *(void *)(v24 + 48) = 0xD00000000000006BLL;
        *(void *)(v24 + 56) = 0x80000001DB0CC770;
        *(void *)(v24 + 64) = 0xD000000000000049;
        *(void *)(v24 + 72) = 0x80000001DB0CB070;
      }
      else
      {
        sub_1DB04D0D4();
        swift_allocError();
        *(_DWORD *)uint64_t v28 = v23;
        *(unsigned char *)(v28 + 4) = 1;
      }
    }
    else
    {
      uint64_t v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      sub_1DB0C5288();
      sub_1DB0C50B8();
      int v62 = v23;
      char v63 = 0;
      sub_1DB0C5338();
      sub_1DB0C50B8();
      uint64_t v25 = v58;
      unint64_t v26 = v59;
      sub_1DB056B5C();
      swift_allocError();
      *(unsigned char *)uint64_t v27 = 3;
      *(_DWORD *)(v27 + 4) = v23;
      *(unsigned char *)(v27 + 8) = 0;
      *(_DWORD *)(v27 + 12) = 0;
      *(_WORD *)(v27 + 16) = 256;
      *(_OWORD *)(v27 + 24) = xmmword_1DB0CA250;
      *(void *)(v27 + 40) = 0x80000001DB0CAFC0;
      *(void *)(v27 + 48) = 0xD00000000000006BLL;
      *(void *)(v27 + 56) = 0x80000001DB0CC770;
      *(void *)(v27 + 64) = v25;
      *(void *)(v27 + 72) = v26;
    }
    swift_willThrow();
  }
}

__n128 CKSecretSharing.HybridSecretShare.init(shareNumber:threshold:shamirSecretShare:nonce:Ciphertext:Tag:authenticatedData:)@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10, uint64_t a11, uint64_t a12)
{
  __n128 result = a10;
  *(void *)a9 = 1;
  *(_DWORD *)(a9 + 8) = a1;
  *(_DWORD *)(a9 + 12) = a2;
  *(unsigned char *)(a9 + 16) = BYTE4(a2) & 1;
  *(void *)(a9 + 24) = a3;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 48) = a6;
  *(void *)(a9 + 56) = a7;
  *(void *)(a9 + 64) = a8;
  *(__n128 *)(a9 + 72) = a10;
  *(void *)(a9 + 88) = a11;
  *(void *)(a9 + 96) = a12;
  return result;
}

void CKSecretSharing.HybridGenerator.generateShares(_:)(uint64_t a1)
{
  if (*(void *)(*(void *)v1 + 24) > a1)
  {
    sub_1DB056B5C();
    uint64_t v4 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v3 = 5;
    *(_DWORD *)(v3 + 4) = 0;
    *(unsigned char *)(v3 + 8) = 1;
    *(_DWORD *)(v3 + 12) = 0;
    *(_WORD *)(v3 + 16) = 256;
    long long v5 = xmmword_1DB0CA280;
LABEL_5:
    *(_OWORD *)(v3 + 24) = v5;
    *(void *)(v3 + 40) = 0x80000001DB0CB050;
    *(void *)(v3 + 48) = 0xD00000000000006BLL;
    *(void *)(v3 + 56) = 0x80000001DB0CC770;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0xE000000000000000;
    swift_willThrow();
LABEL_6:
    id v21 = v4;
    id v6 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE300);
    if (swift_dynamicCast())
    {

      int v7 = v19;
      if (v20 == 1)
      {
        if (v19 == 1)
        {
          sub_1DB056B5C();
          swift_allocError();
          *(unsigned char *)uint64_t v8 = 1;
          *(_DWORD *)(v8 + 4) = 0;
          *(unsigned char *)(v8 + 8) = 1;
          *(_DWORD *)(v8 + 12) = 0;
          *(_WORD *)(v8 + 16) = 256;
          *(_OWORD *)(v8 + 24) = xmmword_1DB0CA2A0;
          *(void *)(v8 + 40) = 0x80000001DB0CB050;
          *(void *)(v8 + 48) = 0xD00000000000006BLL;
          *(void *)(v8 + 56) = 0x80000001DB0CC770;
          *(void *)(v8 + 64) = 0xD000000000000049;
          *(void *)(v8 + 72) = 0x80000001DB0CB070;
        }
        else
        {
          sub_1DB04D0D4();
          swift_allocError();
          *(_DWORD *)uint64_t v13 = v7;
          *(unsigned char *)(v13 + 4) = 1;
        }
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0xE000000000000000;
        sub_1DB0C5288();
        sub_1DB0C50B8();
        int v15 = v7;
        char v16 = 0;
        sub_1DB0C5338();
        sub_1DB0C50B8();
        uint64_t v10 = v17;
        unint64_t v11 = v18;
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v12 = 3;
        *(_DWORD *)(v12 + 4) = v7;
        *(unsigned char *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 12) = 0;
        *(_WORD *)(v12 + 16) = 256;
        *(_OWORD *)(v12 + 24) = xmmword_1DB0CA290;
        *(void *)(v12 + 40) = 0x80000001DB0CB050;
        *(void *)(v12 + 48) = 0xD00000000000006BLL;
        *(void *)(v12 + 56) = 0x80000001DB0CC770;
        *(void *)(v12 + 64) = v10;
        *(void *)(v12 + 72) = v11;
      }
      swift_willThrow();
    }

    return;
  }
  if (*(void *)(*(void *)v1 + 64) < a1)
  {
    sub_1DB056B5C();
    uint64_t v4 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v3 = 6;
    *(_DWORD *)(v3 + 4) = 0;
    *(unsigned char *)(v3 + 8) = 1;
    *(_DWORD *)(v3 + 12) = 0;
    *(_WORD *)(v3 + 16) = 256;
    long long v5 = xmmword_1DB0CA270;
    goto LABEL_5;
  }
  if (!a1)
  {
    __break(1u);
    return;
  }
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  void v14[2] = v1;
  sub_1DB0B7C30((void *(*)(void *__return_ptr, int *, uint64_t *))sub_1DB0C1980, (uint64_t)v14, (v9 << 32) | 1);
  uint64_t v4 = v2;
  if (v2) {
    goto LABEL_6;
  }
}

uint64_t CKSecretSharing.HybridGenerator.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for CKSecretSharing.HybridGenerator();
  MEMORY[0x1F4188790](v3 - 8);
  long long v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (void *)((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1DB0C191C(v2, (uint64_t)v5);
  sub_1DB0B82BC((uint64_t)v5, (uint64_t)v8);
  if (!v1)
  {
    sub_1DB0C27F8(&qword_1EA8FE7B0, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
    uint64_t v6 = sub_1DB0C4BB8();
    sub_1DB058E78(v8 + 1);
    sub_1DB0C2840((uint64_t)v8, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingGeneratorSerialization);
  }
  return v6;
}

void CKSecretSharing.HybridReconstructor.init(threshold:associatedData:includeADInShares:includeThresholdInShares:cipherSuite:insecureToChangeIncludeMessageEntropy:)(int64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W6>, void *a7@<X8>)
{
  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  uint64_t v15 = swift_allocObject();
  sub_1DB0B8A18(a1, a2, a3, a4, a5, v15, a6);
  if (!v7) {
    *a7 = v16;
  }
}

uint64_t sub_1DB0BDCF0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = sub_1DB0C4D58();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  int64_t v13 = *(void *)(*v2 + 24);
  if (a1 >> 62)
  {
    uint64_t v16 = v8;
    uint64_t v4 = v9;
    sub_1DB0C5188();
    uint64_t v17 = sub_1DB0C5368();
    swift_bridgeObjectRelease();
    uint64_t v9 = v4;
    uint64_t v8 = v16;
    if (v17 < v13) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < v13)
  {
LABEL_3:
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v14 = 1;
    *(_DWORD *)(v14 + 4) = 0;
    *(unsigned char *)(v14 + 8) = 1;
    *(_DWORD *)(v14 + 12) = 0;
    *(_WORD *)(v14 + 16) = 256;
    *(_OWORD *)(v14 + 24) = xmmword_1DB0CA2C0;
    *(void *)(v14 + 40) = 0x80000001DB0CCD00;
    *(void *)(v14 + 48) = 0xD00000000000006BLL;
    *(void *)(v14 + 56) = 0x80000001DB0CC770;
    *(void *)(v14 + 64) = 0xD00000000000002DLL;
    *(void *)(v14 + 72) = 0x80000001DB0CCBB0;
    return swift_willThrow();
  }
  uint64_t v30 = v9;
  uint64_t v31 = v8;
  uint64_t v32 = a2;
  ccss_sizeof_share_bag();
  uint64_t v39 = swift_slowAlloc();
  ccss_shamir_share_bag_init();
  uint64_t v18 = *(void *)(v12 + 24);
  if (v18 < 0) {
    goto LABEL_27;
  }
  uint64_t v33 = v12;
  uint64_t v34 = v11;
  int64_t v35 = v3;
  if (v18)
  {
    unint64_t v19 = 0;
    int64_t v13 = a1 & 0xC000000000000001;
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
    while (v18 != v19)
    {
      if (v13)
      {
        id v20 = (id)MEMORY[0x1E01881C0](v19, a1);
      }
      else
      {
        if (v19 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_26;
        }
        id v20 = *(id *)(a1 + 8 * v19 + 32);
      }
      id v21 = v20;
      objc_msgSend(v20, sel_share);

      int v22 = ccss_shamir_share_bag_add_share();
      if (v22)
      {
        int v25 = v22;
        uint64_t v36 = 0;
        unint64_t v37 = 0xE000000000000000;
        sub_1DB0C5288();
        sub_1DB0C50B8();
        int v38 = v25;
        sub_1DB0C53C8();
        sub_1DB0C50B8();
        swift_bridgeObjectRelease();
        uint64_t v26 = v36;
        unint64_t v27 = v37;
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v28 = 3;
        *(_DWORD *)(v28 + 4) = v25;
        *(unsigned char *)(v28 + 8) = 0;
        *(_DWORD *)(v28 + 12) = 0;
        *(_WORD *)(v28 + 16) = 256;
        *(_OWORD *)(v28 + 24) = xmmword_1DB0CA2B0;
        *(void *)(v28 + 40) = 0x80000001DB0CCD00;
        *(void *)(v28 + 48) = 0xD00000000000006BLL;
        *(void *)(v28 + 56) = 0x80000001DB0CC770;
        *(void *)(v28 + 64) = v26;
        *(void *)(v28 + 72) = v27;
        swift_willThrow();
        return MEMORY[0x1E0189230](v39, -1, -1);
      }
      if (v18 == ++v19) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once();
    goto LABEL_19;
  }
LABEL_15:
  int64_t v23 = *(void *)(v33 + 72);
  if (v23)
  {
    uint64_t v24 = (void *)sub_1DB048414(v23);
    uint64_t v4 = (uint64_t)v34;
    int64_t v13 = v35;
    goto LABEL_20;
  }
  uint64_t v4 = (uint64_t)v34;
  int64_t v13 = v35;
  if (qword_1EBE7D890 != -1) {
    goto LABEL_28;
  }
LABEL_19:
  uint64_t v24 = off_1EBE7D888;
  swift_retain();
LABEL_20:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    size_t v29 = sub_1DB0A97E4((uint64_t)v24);
    swift_release();
    uint64_t v24 = (void *)v29;
  }
  swift_beginAccess();
  sub_1DB0BE160((uint64_t)v24 + 32);
  swift_release();
  if (!v13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v32, v4, v31);
  }
  return MEMORY[0x1E0189230](v39, -1, -1);
}

uint64_t sub_1DB0BE160(uint64_t result)
{
  if (result)
  {
    int v1 = ccss_shamir_share_bag_recover_secret();
    if (v1)
    {
      int v2 = v1;
      sub_1DB0C5288();
      sub_1DB0C50B8();
      sub_1DB0C53C8();
      sub_1DB0C50B8();
      swift_bridgeObjectRelease();
      sub_1DB056B5C();
      swift_allocError();
      *(unsigned char *)uint64_t v3 = 3;
      *(_DWORD *)(v3 + 4) = v2;
      *(unsigned char *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 12) = 0;
      *(_WORD *)(v3 + 16) = 256;
      *(_OWORD *)(v3 + 24) = xmmword_1DB0CA2D0;
      *(void *)(v3 + 40) = 0x80000001DB0CCD00;
      *(void *)(v3 + 48) = 0xD00000000000006BLL;
      *(void *)(v3 + 56) = 0x80000001DB0CC770;
      *(void *)(v3 + 64) = 0;
      *(void *)(v3 + 72) = 0xE000000000000000;
      return swift_willThrow();
    }
    else
    {
      return sub_1DB0C4D48();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CKSecretSharing.HybridReconstructor.recoverSecret(shares:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = 0xD00000000000006BLL;
  uint64_t v165 = sub_1DB0C4C78();
  uint64_t v6 = *(void *)(v165 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v165);
  uint64_t v163 = (char *)v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)v133 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v164 = (char *)v133 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FED10);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = sub_1DB0C4DC8();
  uint64_t v157 = *(void *)(v159 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v159);
  uint64_t v158 = (char *)v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = sub_1DB0C4E18();
  uint64_t v160 = *(void *)(v18 - 8);
  uint64_t v161 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v156 = (char *)v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v162 = (char *)v133 - v21;
  uint64_t v22 = sub_1DB0C4D58();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v34 = (char *)v133 - v33;
  uint64_t v35 = *v1;
  uint64_t v36 = *(void *)(a1 + 16);
  if (*(void *)(*v1 + 56) < v36)
  {
    sub_1DB056B5C();
    uint64_t v3 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v37 = 6;
    *(_DWORD *)(v37 + 4) = 0;
    *(unsigned char *)(v37 + 8) = 1;
    *(_DWORD *)(v37 + 12) = 0;
    *(_WORD *)(v37 + 16) = 256;
    *(_OWORD *)(v37 + 24) = xmmword_1DB0CA320;
    *(void *)(v37 + 40) = 0x80000001DB0CCA90;
    *(void *)(v37 + 48) = 0xD00000000000006BLL;
    *(void *)(v37 + 56) = 0x80000001DB0CC770;
    *(void *)(v37 + 64) = 0;
    *(void *)(v37 + 72) = 0xE000000000000000;
    swift_willThrow();
LABEL_25:
    unint64_t v5 = v165;
    goto LABEL_26;
  }
  uint64_t v38 = *(void *)(v35 + 24);
  if (v36 < v38)
  {
    sub_1DB056B5C();
    uint64_t v3 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v39 = 5;
    *(_DWORD *)(v39 + 4) = 0;
    *(unsigned char *)(v39 + 8) = 1;
    *(_DWORD *)(v39 + 12) = 0;
    *(_WORD *)(v39 + 16) = 256;
    *(_OWORD *)(v39 + 24) = xmmword_1DB0CA310;
    *(void *)(v39 + 40) = 0x80000001DB0CCA90;
    *(void *)(v39 + 48) = 0xD00000000000006BLL;
    *(void *)(v39 + 56) = 0x80000001DB0CC770;
    *(void *)(v39 + 64) = 0xD00000000000002DLL;
    unint64_t v40 = 0x80000001DB0CCBB0;
LABEL_5:
    *(void *)(v39 + 72) = v40;
    swift_willThrow();
    goto LABEL_25;
  }
  unint64_t v41 = *(void *)(v35 + 72);
  uint64_t v42 = *(void *)(v35 + 80);
  uint64_t v43 = *(void *)(v35 + 88);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v35 + 112);
  uint64_t v45 = *(void *)(v35 + 120);
  unint64_t v47 = *(void *)(v35 + 128);
  unint64_t v46 = *(void *)(v35 + 136);
  unsigned int v166 = bswap32(v38);
  if (!v36)
  {
    __break(1u);
    goto LABEL_41;
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0 && v38 != *(_DWORD *)(a1 + 44))
  {
    sub_1DB056B5C();
    uint64_t v3 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v39 = 4;
    *(_DWORD *)(v39 + 4) = 0;
    *(unsigned char *)(v39 + 8) = 1;
    *(_DWORD *)(v39 + 12) = 0;
    *(_WORD *)(v39 + 16) = 256;
    *(_OWORD *)(v39 + 24) = xmmword_1DB0CA2E0;
    *(void *)(v39 + 40) = 0x80000001DB0CCA90;
    *(void *)(v39 + 48) = 0xD00000000000006BLL;
    *(void *)(v39 + 56) = 0x80000001DB0CC770;
    *(void *)(v39 + 64) = 0;
    unint64_t v40 = 0xE000000000000000;
    goto LABEL_5;
  }
  uint64_t v154 = v6;
  uint64_t v138 = v45;
  uint64_t v139 = v44;
  unint64_t v140 = v41;
  unint64_t v141 = v46;
  unint64_t v142 = v47;
  uint64_t v143 = v43;
  uint64_t v144 = v29;
  uint64_t v148 = v23;
  uint64_t v136 = v42;
  uint64_t v137 = v15;
  uint64_t v146 = v32;
  uint64_t v145 = v31;
  uint64_t v147 = v30;
  uint64_t v150 = v34;
  uint64_t v149 = v28;
  uint64_t v48 = sub_1DB05C640((uint64_t)&v166, (uint64_t)&v167);
  unint64_t v49 = *(void *)(a1 + 128);
  uint64_t v50 = *(void *)(v35 + 32);
  unint64_t v51 = *(void *)(v35 + 40);
  uint64_t v153 = v11;
  unint64_t v155 = v52;
  if (v49 >> 60 == 15)
  {
    if (v51 >> 60 == 15)
    {
      uint64_t v53 = 0;
      unint64_t v51 = 0xC000000000000000;
    }
    else
    {
      uint64_t v53 = v50;
      sub_1DB04239C(v50, v51);
    }
  }
  else
  {
    uint64_t v53 = *(void *)(a1 + 120);
    if (v51 >> 60 == 15)
    {
      sub_1DB04239C(v53, v49);
      unint64_t v51 = v49;
    }
    else
    {
      sub_1DB067A4C(v53, v49);
      uint64_t v54 = v50;
      unint64_t v55 = v51;
      uint64_t v56 = v54;
      sub_1DB067A4C(v54, v55);
      if ((sub_1DB059454(v53, v49, v56, v55) & 1) == 0)
      {
        sub_1DB056B5C();
        uint64_t v3 = (void *)swift_allocError();
        *(unsigned char *)uint64_t v66 = 13;
        *(_DWORD *)(v66 + 4) = 0;
        *(unsigned char *)(v66 + 8) = 1;
        *(_DWORD *)(v66 + 12) = 0;
        *(_WORD *)(v66 + 16) = 256;
        *(_OWORD *)(v66 + 24) = xmmword_1DB0CA2F0;
        *(void *)(v66 + 40) = 0x80000001DB0CCA90;
        *(void *)(v66 + 48) = 0xD00000000000006BLL;
        *(void *)(v66 + 56) = 0x80000001DB0CC770;
        *(void *)(v66 + 64) = 0;
        *(void *)(v66 + 72) = 0xE000000000000000;
        swift_willThrow();
        sub_1DB042664(v48, v155);
        sub_1DB069BB4(v56, v55);
        sub_1DB069BB4(v53, v49);
        unint64_t v11 = v153;
        unint64_t v5 = v165;
        uint64_t v6 = v154;
        goto LABEL_26;
      }
      sub_1DB069BB4(v53, v49);
      uint64_t v53 = v56;
      unint64_t v51 = v55;
    }
  }
  unint64_t v152 = v51;
  uint64_t v151 = v53;
  long long v135 = xmmword_1DB0C7A30;
  long long v170 = xmmword_1DB0C7A30;
  uint64_t v57 = v48;
  uint64_t v58 = v48;
  unint64_t v59 = v155;
  sub_1DB04239C(v57, v155);
  sub_1DB05DEE8(v58, v59);
  sub_1DB042664(v58, v59);
  sub_1DB04239C(v53, v51);
  sub_1DB05DEE8(v53, v51);
  sub_1DB042664(v53, v51);
  if (*(unsigned char *)(v35 + 18)) {
    uint64_t v60 = &unk_1F353B078;
  }
  else {
    uint64_t v60 = &unk_1F353B050;
  }
  uint64_t v61 = sub_1DB0656E0((uint64_t)v60);
  unint64_t v63 = v62;
  sub_1DB04239C(v61, v62);
  sub_1DB05DEE8(v61, v63);
  sub_1DB042664(v61, v63);
  sub_1DB042664(v61, v63);
  sub_1DB0C5188();
  swift_retain();
  uint64_t v64 = sub_1DB0C0DB0(a1, a1, v35);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_1DB042664(v58, v59);
    sub_1DB042664(v151, v152);
    sub_1DB042664(v170, *((unint64_t *)&v170 + 1));
    uint64_t v6 = v154;
    unint64_t v11 = v153;
    goto LABEL_25;
  }
  unint64_t v65 = v64;
  uint64_t v134 = v58;
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)&long long v169 = v35;
  sub_1DB0BDCF0(v65, (uint64_t)v150);
  swift_bridgeObjectRelease();
  unint64_t v67 = *(void *)(a1 + 80);
  *(void *)&long long v169 = *(void *)(a1 + 72);
  *((void *)&v169 + 1) = v67;
  sub_1DB04239C(v169, v67);
  unint64_t v68 = sub_1DB06F7A0();
  sub_1DB0C4DB8();
  unint64_t v81 = *(void *)(a1 + 96);
  *(void *)&long long v169 = *(void *)(a1 + 88);
  *((void *)&v169 + 1) = v81;
  uint64_t v82 = *(void *)(a1 + 104);
  unint64_t v83 = *(void *)(a1 + 112);
  *(void *)&long long v168 = v82;
  *((void *)&v168 + 1) = v83;
  sub_1DB04239C(v169, v81);
  sub_1DB04239C(v82, v83);
  v133[2] = v68;
  sub_1DB0C4DF8();
  long long v84 = v170;
  long long v169 = v170;
  sub_1DB04239C(v170, *((unint64_t *)&v170 + 1));
  uint64_t v85 = sub_1DB0C4D88();
  unint64_t v87 = v86;
  uint64_t v88 = v85;
  sub_1DB042664(v84, *((unint64_t *)&v84 + 1));
  long long v169 = v135;
  sub_1DB04239C(v84, *((unint64_t *)&v84 + 1));
  sub_1DB05DEE8(v84, *((unint64_t *)&v84 + 1));
  sub_1DB042664(v84, *((unint64_t *)&v84 + 1));
  sub_1DB04239C(v88, v87);
  sub_1DB05DEE8(v88, v87);
  *(void *)&long long v135 = v88;
  sub_1DB042664(v88, v87);
  long long v168 = v169;
  sub_1DB04239C(v169, *((unint64_t *)&v169 + 1));
  uint64_t v89 = v144;
  sub_1DB0C4D48();
  unint64_t v90 = v138;
  sub_1DB0C5188();
  unint64_t v91 = (unint64_t)v139;
  v133[0] = sub_1DB05C118((unint64_t)v139, v90);
  unint64_t v93 = v92;
  *(void *)&long long v168 = v133[0];
  *((void *)&v168 + 1) = v92;
  sub_1DB0C5188();
  uint64_t v94 = sub_1DB05C118(v91, v90);
  unint64_t v96 = v95;
  *(void *)&long long v167 = v94;
  *((void *)&v167 + 1) = v95;
  uint64_t v138 = sub_1DB0C4F98();
  v133[1] = sub_1DB0C27F8((unint64_t *)&qword_1EA8FE0A0, MEMORY[0x1E4F25170]);
  sub_1DB0C4E38();
  sub_1DB042664(v94, v96);
  sub_1DB042664(v133[0], v93);
  unint64_t v140 = v87;
  uint64_t v97 = v148 + 8;
  uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v148 + 8);
  v139(v89, v149);
  long long v168 = v169;
  sub_1DB04239C(v169, *((unint64_t *)&v169 + 1));
  sub_1DB0C4D48();
  unint64_t v98 = v141;
  sub_1DB0C5188();
  unint64_t v99 = v142;
  uint64_t v100 = sub_1DB05C118(v142, v98);
  v133[0] = v101;
  *(void *)&long long v168 = v100;
  *((void *)&v168 + 1) = v101;
  sub_1DB0C5188();
  uint64_t v102 = sub_1DB05C118(v99, v98);
  unint64_t v104 = v103;
  *(void *)&long long v167 = v102;
  *((void *)&v167 + 1) = v103;
  sub_1DB0C4E38();
  uint64_t v105 = v102;
  unint64_t v106 = v104;
  char v107 = v139;
  uint64_t v108 = v97;
  sub_1DB042664(v105, v106);
  sub_1DB042664(v100, v133[0]);
  uint64_t v109 = v149;
  v107(v89, v149);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16))(v89, v147, v109);
  sub_1DB0C27F8(&qword_1EA8FED28, MEMORY[0x1E4F25000]);
  sub_1DB0C4D48();
  uint64_t v110 = v158;
  sub_1DB0C4D38();
  uint64_t v148 = v108;
  *(void *)&long long v168 = v135;
  *((void *)&v168 + 1) = v140;
  uint64_t v111 = v157;
  uint64_t v112 = (uint64_t)v137;
  uint64_t v113 = v159;
  (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v137, v110, v159);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v111 + 56))(v112, 0, 1, v113);
  long long v114 = v170;
  long long v167 = v170;
  sub_1DB04239C(v170, *((unint64_t *)&v170 + 1));
  uint64_t v115 = (uint64_t)v156;
  sub_1DB0C4D98();
  uint64_t v6 = v154;
  unint64_t v11 = v153;
  unint64_t v5 = v165;
  sub_1DB042664(v114, *((unint64_t *)&v114 + 1));
  sub_1DB06F7F4(v112, &qword_1EA8FED10);
  a1 = v115;
  if ((sub_1DB0C10C4(v115, (uint64_t)v162) & 1) == 0)
  {
LABEL_41:
    sub_1DB056B5C();
    uint64_t v3 = (void *)swift_allocError();
    *(unsigned char *)uint64_t v120 = 10;
    *(_DWORD *)(v120 + 4) = 0;
    *(unsigned char *)(v120 + 8) = 1;
    *(_DWORD *)(v120 + 12) = 0;
    *(_WORD *)(v120 + 16) = 256;
    *(_OWORD *)(v120 + 24) = xmmword_1DB0CA300;
    *(void *)(v120 + 40) = 0x80000001DB0CCA90;
    *(void *)(v120 + 48) = 0xD00000000000006BLL;
    *(void *)(v120 + 56) = 0x80000001DB0CC770;
    *(void *)(v120 + 64) = 0xD000000000000043;
    *(void *)(v120 + 72) = 0x80000001DB0CCB60;
    swift_willThrow();
    sub_1DB042664(v134, v155);
    sub_1DB042664(v135, v140);
    sub_1DB042664(v151, v152);
    uint64_t v160 = *(void *)(v160 + 8);
    ((void (*)(uint64_t, uint64_t))v160)(a1, v161);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v159);
    uint64_t v121 = v149;
    uint64_t v122 = v139;
    v139(v146, v149);
    v122(v145, v121);
    v122(v147, v121);
    sub_1DB042664(v169, *((unint64_t *)&v169 + 1));
    ((void (*)(char *, uint64_t))v160)(v162, v161);
    v122((uint64_t)v150, v121);
    sub_1DB042664(v170, *((unint64_t *)&v170 + 1));
LABEL_26:
    *(void *)&long long v169 = v3;
    id v69 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8FE300);
    uint64_t v70 = v164;
    if (swift_dynamicCast())
    {

      (*(void (**)(char *, char *, unint64_t))(v6 + 32))(v11, v70, v5);
      char v71 = *(void (**)(char *, char *, unint64_t))(v6 + 16);
      unint64_t v72 = (int *)v163;
      v71(v163, v11, v5);
      int v73 = (*(uint64_t (**)(int *, unint64_t))(v6 + 88))(v72, v5);
      if (v73 == *MEMORY[0x1E4F24EF8])
      {
        (*(void (**)(int *, unint64_t))(v6 + 96))(v72, v5);
        int v74 = *v72;
        *(void *)&long long v170 = 0;
        *((void *)&v170 + 1) = 0xE000000000000000;
        sub_1DB0C5288();
        sub_1DB0C50B8();
        sub_1DB0C5338();
        sub_1DB0C50B8();
        long long v75 = v170;
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v76 = 3;
        *(_DWORD *)(v76 + 4) = v74;
        *(unsigned char *)(v76 + 8) = 0;
        *(_DWORD *)(v76 + 12) = 0;
        *(_WORD *)(v76 + 16) = 256;
        *(_OWORD *)(v76 + 24) = xmmword_1DB0CA350;
        *(void *)(v76 + 40) = 0x80000001DB0CCA90;
        *(void *)(v76 + 48) = 0xD00000000000006BLL;
        *(void *)(v76 + 56) = 0x80000001DB0CC770;
        *(_OWORD *)(v76 + 64) = v75;
      }
      else
      {
        if (v73 == *MEMORY[0x1E4F24F08])
        {
          sub_1DB056B5C();
          swift_allocError();
          *(unsigned char *)uint64_t v77 = 1;
          *(_DWORD *)(v77 + 4) = 0;
          *(unsigned char *)(v77 + 8) = 1;
          *(_DWORD *)(v77 + 12) = 0;
          *(_WORD *)(v77 + 16) = 256;
          *(_OWORD *)(v77 + 24) = xmmword_1DB0CA340;
          *(void *)(v77 + 40) = 0x80000001DB0CCA90;
          *(void *)(v77 + 48) = 0xD00000000000006BLL;
          *(void *)(v77 + 56) = 0x80000001DB0CC770;
          *(void *)(v77 + 64) = 0xD000000000000048;
          int v78 = "Underlying CryptoKit call had incorrect parameter size in recoverSecret?";
        }
        else
        {
          if (v73 != *MEMORY[0x1E4F24F00])
          {
            sub_1DB0C27F8(&qword_1EA8FED20, MEMORY[0x1E4F24F10]);
            swift_allocError();
            v71(v79, v11, v5);
            swift_willThrow();
            uint64_t v80 = *(void (**)(char *, unint64_t))(v6 + 8);
            v80(v11, v5);
            v80((char *)v72, v5);
            goto LABEL_35;
          }
          sub_1DB056B5C();
          swift_allocError();
          *(unsigned char *)uint64_t v77 = 2;
          *(_DWORD *)(v77 + 4) = 0;
          *(unsigned char *)(v77 + 8) = 1;
          *(_DWORD *)(v77 + 12) = 0;
          *(_WORD *)(v77 + 16) = 256;
          *(_OWORD *)(v77 + 24) = xmmword_1DB0CA330;
          *(void *)(v77 + 40) = 0x80000001DB0CCA90;
          *(void *)(v77 + 48) = 0xD00000000000006BLL;
          *(void *)(v77 + 56) = 0x80000001DB0CC770;
          *(void *)(v77 + 64) = 0xD00000000000005DLL;
          int v78 = "Error with Authentication in opening  GCM sealed box contained in ciphertext in recoverSecret";
        }
        *(void *)(v77 + 72) = (unint64_t)(v78 - 32) | 0x8000000000000000;
      }
      swift_willThrow();
      (*(void (**)(char *, unint64_t))(v6 + 8))(v11, v5);
    }
LABEL_35:

    return;
  }
  if (*(unsigned char *)(v35 + 18) != 1)
  {
    switch(v140 >> 62)
    {
      case 1uLL:
        goto LABEL_46;
      case 2uLL:
        uint64_t v125 = *(void *)(v135 + 16);
        uint64_t v126 = *(void *)(v135 + 24);
        BOOL v127 = __OFSUB__(v126, v125);
        uint64_t v128 = v126 - v125;
        if (v127) {
          goto LABEL_60;
        }
        uint64_t v123 = v128 - v136;
        if (!__OFSUB__(v128, v136)) {
          goto LABEL_51;
        }
        goto LABEL_61;
      case 3uLL:
        uint64_t v123 = -v136;
        if (!__OFSUB__(0, v136)) {
          goto LABEL_53;
        }
        goto LABEL_62;
      default:
        uint64_t v123 = BYTE6(v140) - v136;
        if (__OFSUB__(BYTE6(v140), v136))
        {
          __break(1u);
LABEL_46:
          int v124 = DWORD1(v135) - v135;
          if (__OFSUB__(DWORD1(v135), v135))
          {
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
            JUMPOUT(0x1DB0BFD70);
          }
          uint64_t v123 = v124 - v136;
          if (__OFSUB__(v124, v136)) {
            goto LABEL_59;
          }
          uint64_t v125 = (int)v135;
LABEL_51:
          sub_1DB04239C(v135, v140);
        }
        else
        {
LABEL_53:
          uint64_t v125 = 0;
        }
        if (v123 >= v125)
        {
          uint64_t v129 = v135;
          unint64_t v130 = v140;
          uint64_t v165 = sub_1DB0C49B8();
          sub_1DB042664(v129, v130);
          sub_1DB042664(v134, v155);
          sub_1DB042664(v129, v130);
          sub_1DB042664(v151, v152);
          uint64_t v131 = v161;
          uint64_t v132 = *(void (**)(char *, uint64_t))(v160 + 8);
          v132(v156, v161);
          (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v159);
          uint64_t v118 = v149;
          long long v119 = v139;
          v139(v146, v149);
          v119(v145, v118);
          v119(v147, v118);
          sub_1DB042664(v169, *((unint64_t *)&v169 + 1));
          v132(v162, v131);
          *(void *)&long long v135 = v165;
          goto LABEL_56;
        }
        __break(1u);
        goto LABEL_58;
    }
  }
  sub_1DB042664(v134, v155);
  sub_1DB042664(v151, v152);
  uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
  uint64_t v117 = v161;
  v116(v115, v161);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v159);
  uint64_t v118 = v149;
  long long v119 = v139;
  v139(v146, v149);
  v119(v145, v118);
  v119(v147, v118);
  sub_1DB042664(v169, *((unint64_t *)&v169 + 1));
  v116((uint64_t)v162, v117);
LABEL_56:
  v119((uint64_t)v150, v118);
  sub_1DB042664(v170, *((unint64_t *)&v170 + 1));
}

void sub_1DB0BFD80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    unint64_t v9 = *(void *)(a1 + 32);
    char v10 = *(unsigned char *)(a1 + 16);
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 12);
    uint64_t v13 = *(void *)a1;
    char v14 = *(unsigned char *)(a2 + 48);
    uint64_t v34 = *(void *)(a2 + 32);
    int v23 = *(void *)(a2 + 40);
    unint64_t v35 = *(void *)(a2 + 40);
    char v36 = v14;
    long long v37 = *(_OWORD *)(a2 + 56);
    long long v38 = *(_OWORD *)(a2 + 72);
    long long v39 = *(_OWORD *)(a2 + 88);
    long long v40 = *(_OWORD *)(a2 + 104);
    long long v41 = *(_OWORD *)(a2 + 120);
    uint64_t v24 = v13;
    int v25 = v12;
    int v26 = v11;
    char v27 = v10;
    uint64_t v28 = v8;
    unint64_t v29 = v9;
    long long v30 = *(_OWORD *)(a1 + 40);
    long long v31 = *(_OWORD *)(a1 + 56);
    long long v32 = *(_OWORD *)(a1 + 72);
    long long v33 = *(_OWORD *)(a1 + 88);
    if (sub_1DB0C004C(&v24))
    {
      uint64_t v15 = *(void *)(a3 + 144);
      id v16 = objc_allocWithZone(MEMORY[0x1E4F5E500]);
      sub_1DB04239C(v8, v9);
      uint64_t v17 = (void *)sub_1DB0C49E8();
      id v18 = objc_msgSend(v16, sel_initWithParams_x_y_, v15, v12, v17);
      sub_1DB042664(v8, v9);

      *a5 = v18;
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      sub_1DB0C5288();
      sub_1DB0C50B8();
      LODWORD(v24) = v23;
      sub_1DB0C53C8();
      sub_1DB0C50B8();
      swift_bridgeObjectRelease();
      sub_1DB0C50B8();
      LODWORD(v24) = v12;
      sub_1DB0C53C8();
      sub_1DB0C50B8();
      swift_bridgeObjectRelease();
      sub_1DB0C50B8();
      uint64_t v19 = v34;
      unint64_t v20 = v35;
      sub_1DB056B5C();
      uint64_t v21 = swift_allocError();
      *(unsigned char *)uint64_t v22 = 9;
      *(_DWORD *)(v22 + 4) = 0;
      *(unsigned char *)(v22 + 8) = 1;
      *(_DWORD *)(v22 + 12) = 0;
      *(_WORD *)(v22 + 16) = 256;
      *(_OWORD *)(v22 + 24) = xmmword_1DB0CA360;
      *(void *)(v22 + 40) = 0x80000001DB0CCA90;
      *(void *)(v22 + 48) = 0xD00000000000006BLL;
      *(void *)(v22 + 56) = 0x80000001DB0CC770;
      *(void *)(v22 + 64) = v19;
      *(void *)(v22 + 72) = v20;
      swift_willThrow();
      *a4 = v21;
    }
  }
  else
  {
    __break(1u);
  }
}

BOOL sub_1DB0C004C(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v20 = a1[8];
  uint64_t v21 = a1[7];
  unint64_t v4 = a1[10];
  uint64_t v18 = *a1;
  uint64_t v19 = a1[9];
  uint64_t v6 = a1[11];
  unint64_t v5 = a1[12];
  uint64_t v7 = *v1;
  uint64_t v8 = v1[5];
  unint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  unint64_t v11 = v1[8];
  uint64_t v12 = v1[9];
  unint64_t v13 = v1[10];
  uint64_t v15 = v1[11];
  unint64_t v14 = v1[12];
  if ((sub_1DB059454(v8, v9, v2, v3) & 1) == 0
    || (sub_1DB059454(v10, v11, v21, v20) & 1) == 0
    || (sub_1DB059454(v12, v13, v19, v4) & 1) == 0)
  {
    return 0;
  }
  if (v14 >> 60 == 15)
  {
    if (v5 >> 60 == 15) {
      return v7 == v18;
    }
    goto LABEL_8;
  }
  if (v5 >> 60 == 15)
  {
LABEL_8:
    sub_1DB067A4C(v15, v14);
    sub_1DB067A4C(v6, v5);
    sub_1DB069BB4(v15, v14);
    sub_1DB069BB4(v6, v5);
    return 0;
  }
  sub_1DB067A4C(v15, v14);
  sub_1DB067A4C(v6, v5);
  char v17 = sub_1DB059454(v15, v14, v6, v5);
  sub_1DB069BB4(v6, v5);
  sub_1DB069BB4(v15, v14);
  if ((v17 & 1) == 0) {
    return 0;
  }
  return v7 == v18;
}

uint64_t sub_1DB0C01D8()
{
  return sub_1DB0C4DB8();
}

uint64_t CKSecretSharing.HybridSecretShare.version.getter()
{
  return *(void *)v0;
}

uint64_t CKSecretSharing.HybridSecretShare.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_1DB0C4AD8();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v8 = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  sub_1DB04239C(a1, a2);
  sub_1DB0C4AC8();
  sub_1DB0C27F8(&qword_1EA8FEB10, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  sub_1DB0C4BA8();
  if (v3) {
    return sub_1DB042664(a1, a2);
  }
  if (*(_DWORD *)v10 == 1)
  {
    sub_1DB042664(a1, a2);
    uint64_t v12 = *(int *)(v8 + 48);
    unint64_t v13 = &v10[*(int *)(v8 + 44)];
    int v14 = *(_DWORD *)v13;
    LODWORD(v13) = v13[4];
    int v40 = v14;
    int v41 = (int)v13;
    unint64_t v15 = *(void *)&v10[v12 + 8];
    uint64_t v35 = *(void *)&v10[v12];
    unint64_t v36 = v15;
    int v34 = *((_DWORD *)v10 + 1);
    uint64_t v16 = *((void *)v10 + 1);
    unint64_t v32 = *((void *)v10 + 2);
    unint64_t v17 = v32;
    uint64_t v33 = v16;
    uint64_t v18 = *((void *)v10 + 3);
    uint64_t v20 = *((void *)v10 + 5);
    unint64_t v19 = *((void *)v10 + 6);
    uint64_t v22 = *((void *)v10 + 7);
    unint64_t v21 = *((void *)v10 + 8);
    unint64_t v30 = *((void *)v10 + 4);
    unint64_t v31 = v21;
    sub_1DB067A4C(v35, v15);
    sub_1DB04239C(v16, v17);
    unint64_t v23 = v30;
    sub_1DB04239C(v18, v30);
    sub_1DB04239C(v20, v19);
    unint64_t v24 = v31;
    sub_1DB04239C(v22, v31);
    uint64_t result = sub_1DB0C2840((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CryptoKitSecretSharing_SecretShare);
    *(void *)a3 = 1;
    int v25 = v40;
    *(_DWORD *)(a3 + 8) = v34;
    *(_DWORD *)(a3 + 12) = v25;
    *(unsigned char *)(a3 + 16) = v41;
    unint64_t v26 = v32;
    *(void *)(a3 + 24) = v33;
    *(void *)(a3 + 32) = v26;
    *(void *)(a3 + 40) = v18;
    *(void *)(a3 + 48) = v23;
    *(void *)(a3 + 56) = v20;
    *(void *)(a3 + 64) = v19;
    *(void *)(a3 + 72) = v22;
    *(void *)(a3 + 80) = v24;
    unint64_t v27 = v36;
    *(void *)(a3 + 88) = v35;
    *(void *)(a3 + 96) = v27;
  }
  else
  {
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v28 = 15;
    *(_DWORD *)(v28 + 4) = 0;
    *(unsigned char *)(v28 + 8) = 1;
    *(_DWORD *)(v28 + 12) = 0;
    *(_WORD *)(v28 + 16) = 256;
    *(_OWORD *)(v28 + 24) = xmmword_1DB0CA370;
    *(void *)(v28 + 40) = 0xE800000000000000;
    *(void *)(v28 + 48) = 0xD00000000000006BLL;
    *(void *)(v28 + 56) = 0x80000001DB0CC770;
    *(void *)(v28 + 64) = 0;
    *(void *)(v28 + 72) = 0xE000000000000000;
    swift_willThrow();
    sub_1DB042664(a1, a2);
    return sub_1DB0C2840((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  }
  return result;
}

uint64_t Data.init(secretShare:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoKitSecretSharing_SecretShare();
  MEMORY[0x1F4188790](v2);
  unint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *(_DWORD *)(a1 + 8);
  int v31 = *(_DWORD *)(a1 + 12);
  int v32 = v5;
  int v33 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  uint64_t v37 = *(void *)(a1 + 56);
  unint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v35 = v8;
  unint64_t v36 = v10;
  uint64_t v12 = *(void *)(a1 + 88);
  unint64_t v41 = *(void *)(a1 + 80);
  unint64_t v13 = *(void *)(a1 + 96);
  *(_OWORD *)(v4 + 24) = xmmword_1DB0C7A30;
  *(_OWORD *)(v4 + 40) = xmmword_1DB0C7A30;
  *(_OWORD *)(v4 + 56) = xmmword_1DB0C7A30;
  sub_1DB0C4AA8();
  unint64_t v14 = v7;
  uint64_t v15 = v6;
  uint64_t v16 = &v4[*(int *)(v2 + 44)];
  *(_DWORD *)uint64_t v16 = 0;
  v16[4] = 1;
  uint64_t v38 = v2;
  unint64_t v17 = &v4[*(int *)(v2 + 48)];
  *(_DWORD *)unint64_t v4 = 1;
  *((_DWORD *)v4 + 1) = v32;
  *((void *)v4 + 1) = v6;
  *((void *)v4 + 2) = v7;
  if ((v33 & 1) == 0)
  {
    *(_DWORD *)uint64_t v16 = v31;
    v16[4] = 0;
  }
  unint64_t v40 = v13;
  if (v13 >> 60 == 15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v12;
  }
  uint64_t v34 = v12;
  unint64_t v19 = 0xC000000000000000;
  if (v13 >> 60 != 15) {
    unint64_t v19 = v13;
  }
  *(void *)unint64_t v17 = v18;
  *((void *)v17 + 1) = v19;
  uint64_t v20 = v35;
  unint64_t v21 = v36;
  *((void *)v4 + 3) = v35;
  *((void *)v4 + 4) = v9;
  uint64_t v22 = v37;
  *((void *)v4 + 5) = v37;
  *((void *)v4 + 6) = v21;
  unint64_t v23 = v41;
  *((void *)v4 + 7) = v11;
  *((void *)v4 + 8) = v23;
  unint64_t v24 = v14;
  sub_1DB04239C(v15, v14);
  sub_1DB067A4C(v12, v40);
  sub_1DB04239C(v20, v9);
  sub_1DB04239C(v22, v21);
  unint64_t v25 = v41;
  sub_1DB04239C(v11, v41);
  sub_1DB042664(v15, v24);
  sub_1DB042664(v20, v9);
  sub_1DB042664(v22, v21);
  sub_1DB042664(v11, v25);
  sub_1DB069BB4(v34, v40);
  sub_1DB0C27F8(&qword_1EA8FEB10, (void (*)(uint64_t))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  uint64_t v26 = v39;
  uint64_t v27 = sub_1DB0C4BB8();
  if (!v26) {
    uint64_t v20 = sub_1DB05BE64(v27, v28);
  }
  sub_1DB0C2840((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CryptoKitSecretSharing_SecretShare);
  return v20;
}

unsigned char *sub_1DB0C07E8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_1DB0C0A50(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_1DB0C0B14((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_1DB0C0B90((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

BOOL _s16CryptoKitPrivate15CKSecretSharingO17HybridSecretShareV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (*(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    unint64_t v3 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    unint64_t v6 = *(void *)(a1 + 64);
    char v7 = *(unsigned char *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 40);
    unint64_t v9 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 56);
    unint64_t v10 = *(void *)(a2 + 64);
    uint64_t v12 = *(void *)(a2 + 72);
    unint64_t v13 = *(void *)(a2 + 80);
    if (*(unsigned char *)(a1 + 16))
    {
      if (!*(unsigned char *)(a2 + 16)) {
        return 0;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
        char v7 = 1;
      }
      if (v7) {
        return 0;
      }
    }
    unint64_t v21 = *(void *)(a1 + 80);
    uint64_t v22 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a2 + 88);
    uint64_t v18 = *(void *)(a1 + 88);
    unint64_t v19 = *(void *)(a2 + 96);
    unint64_t v20 = *(void *)(a1 + 96);
    if ((sub_1DB059454(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) == 0
      || (sub_1DB059454(v4, v3, v8, v9) & 1) == 0
      || (sub_1DB059454(v5, v6, v11, v10) & 1) == 0
      || (sub_1DB059454(v22, v21, v12, v13) & 1) == 0)
    {
      return 0;
    }
    if (v20 >> 60 == 15)
    {
      unint64_t v14 = v19;
      if (v19 >> 60 == 15) {
        return 1;
      }
    }
    else
    {
      unint64_t v14 = v19;
      if (v19 >> 60 != 15)
      {
        sub_1DB067A4C(v18, v20);
        sub_1DB067A4C(v17, v19);
        char v15 = sub_1DB059454(v18, v20, v17, v19);
        sub_1DB069BB4(v17, v19);
        sub_1DB069BB4(v18, v20);
        return (v15 & 1) != 0;
      }
    }
    sub_1DB067A4C(v18, v20);
    sub_1DB067A4C(v17, v14);
    sub_1DB069BB4(v18, v20);
    sub_1DB069BB4(v17, v14);
    return 0;
  }
  return v2;
}

uint64_t sub_1DB0C0A50(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1DB0C0B14(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1DB0C48F8();
  swift_allocObject();
  uint64_t result = sub_1DB0C4898();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1DB0C4988();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1DB0C0B90(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1DB0C48F8();
  swift_allocObject();
  uint64_t result = sub_1DB0C4898();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1DB0C0C14(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_1DB0C48A8();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_1DB0C48D8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = sub_1DB0C48C8();
  if (v8)
  {
    if (v11 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = v8;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  a4(&v14, v13, v12);
  return 0;
}

uint64_t sub_1DB0C0CC8(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    sub_1DB0C4988();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)sub_1DB0C48A8();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_1DB0C48C8();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      char v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_1DB0C0A50(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = sub_1DB0C48D8();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB0C0DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v36 = MEMORY[0x1E4FBC860];
    sub_1DB0C5308();
    for (unint64_t i = (unint64_t *)(a1 + 64); ; i += 13)
    {
      uint64_t v18 = v4;
      char v7 = *((unsigned char *)i - 16);
      uint64_t v9 = *(i - 1);
      unint64_t v8 = *i;
      uint64_t v11 = i[1];
      unint64_t v10 = i[2];
      uint64_t v13 = i[3];
      unint64_t v12 = i[4];
      uint64_t v14 = i[5];
      uint64_t v15 = i[7];
      unint64_t v19 = i[6];
      unint64_t v20 = i[8];
      v23[0] = *(i - 4);
      v23[1] = *(i - 3);
      char v24 = v7;
      uint64_t v25 = v9;
      unint64_t v26 = v8;
      uint64_t v27 = v11;
      unint64_t v28 = v10;
      uint64_t v29 = v13;
      unint64_t v30 = v12;
      uint64_t v31 = v14;
      unint64_t v32 = v19;
      uint64_t v33 = v15;
      unint64_t v34 = v20;
      sub_1DB04239C(v9, v8);
      sub_1DB04239C(v11, v10);
      sub_1DB04239C(v13, v12);
      sub_1DB04239C(v14, v19);
      sub_1DB067A4C(v15, v20);
      sub_1DB0BFD80((uint64_t)v23, a2, a3, &v22, &v35);
      if (v21) {
        break;
      }
      uint64_t v21 = 0;
      sub_1DB042664(v9, v8);
      sub_1DB042664(v11, v10);
      sub_1DB042664(v13, v12);
      sub_1DB042664(v14, v19);
      sub_1DB069BB4(v15, v20);
      sub_1DB0C52E8();
      sub_1DB0C5318();
      sub_1DB0C5328();
      sub_1DB0C52F8();
      uint64_t v4 = v18 - 1;
      if (v18 == 1) {
        return v36;
      }
    }
    sub_1DB042664(v9, v8);
    sub_1DB042664(v11, v10);
    sub_1DB042664(v13, v12);
    sub_1DB042664(v14, v19);
    sub_1DB069BB4(v15, v20);
    return swift_release();
  }
  return result;
}

uint64_t sub_1DB0C0FA4(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_1DB0C48F8();
      swift_allocObject();
      sub_1DB0C48E8();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1DB0C4988();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1DB0C1040(void *a1, size_t a2)
{
  return sub_1DB046048(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t type metadata accessor for CKSecretSharing.HybridGenerator()
{
  uint64_t result = qword_1EA8FED30;
  if (!qword_1EA8FED30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1DB0C10A8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1DB0BAAF8(a1, a2);
}

uint64_t sub_1DB0C10C4(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_1DB0C4E18();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v53 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v54 = (char *)&v50 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v50 - v9;
  MEMORY[0x1F4188790](v8);
  unint64_t v12 = (char *)&v50 - v11;
  uint64_t v13 = sub_1DB0C4DC8();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v50 - v18;
  sub_1DB0C4E08();
  sub_1DB0C4E08();
  uint64_t v56 = v17;
  sub_1DB0C4DA8();
  int v20 = v57;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v22 = v17;
  unint64_t v23 = v10;
  v21(v22, v13);
  v21(v19, v13);
  char v24 = v12;
  uint64_t v25 = v51;
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  uint64_t v52 = a1;
  v26(v24, a1, v3);
  v26(v23, v55, v3);
  if (v20 == 1)
  {
    uint64_t v27 = v24;
    uint64_t v28 = sub_1DB0C4DD8();
    unint64_t v30 = v29;
    uint64_t v31 = sub_1DB0C4DD8();
    uint64_t v50 = v23;
    uint64_t v32 = v31;
    unint64_t v34 = v33;
    char v35 = sub_1DB059454(v28, v30, v31, v33);
    uint64_t v36 = v32;
    unint64_t v23 = v50;
    sub_1DB042664(v36, v34);
    uint64_t v37 = v28;
    char v24 = v27;
    sub_1DB042664(v37, v30);
  }
  else
  {
    char v35 = 0;
  }
  uint64_t v38 = *(void (**)(char *, uint64_t))(v25 + 8);
  v38(v23, v3);
  v38(v24, v3);
  uint64_t v39 = v54;
  v26(v54, v52, v3);
  unint64_t v40 = v53;
  v26(v53, v55, v3);
  if (v35)
  {
    uint64_t v41 = sub_1DB0C4DE8();
    unint64_t v43 = v42;
    uint64_t v44 = sub_1DB0C4DE8();
    unint64_t v46 = v45;
    char v47 = sub_1DB059454(v41, v43, v44, v45);
    sub_1DB042664(v44, v46);
    uint64_t v48 = v41;
    uint64_t v39 = v54;
    sub_1DB042664(v48, v43);
  }
  else
  {
    char v47 = 0;
  }
  v38(v40, v3);
  v38(v39, v3);
  return v47 & 1;
}

uint64_t sub_1DB0C14B4(uint64_t a1)
{
  if (*(_DWORD *)a1 != 1)
  {
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 17;
    *(_DWORD *)(v4 + 4) = 0;
    *(unsigned char *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_1DB0CA380;
    *(void *)(v4 + 40) = 0xEF293A6675626F74;
    *(void *)(v4 + 48) = 0xD00000000000006BLL;
    *(void *)(v4 + 56) = 0x80000001DB0CC770;
    *(void *)(v4 + 64) = 0xD00000000000004BLL;
    uint64_t v5 = "Unsupported Version in Protobuf Deserialized HybridSecretSharingSharedState";
    goto LABEL_6;
  }
  uint64_t v2 = v1;
  if ((*(unsigned char *)(a1 + 16) & 1) == 0 && *(void *)(a1 + 8))
  {
    sub_1DB056B5C();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 17;
    *(_DWORD *)(v4 + 4) = 0;
    *(unsigned char *)(v4 + 8) = 1;
    *(_DWORD *)(v4 + 12) = 0;
    *(_WORD *)(v4 + 16) = 256;
    *(_OWORD *)(v4 + 24) = xmmword_1DB0CA390;
    *(void *)(v4 + 40) = 0xEF293A6675626F74;
    *(void *)(v4 + 48) = 0xD00000000000006BLL;
    *(void *)(v4 + 56) = 0x80000001DB0CC770;
    *(void *)(v4 + 64) = 0xD000000000000066;
    uint64_t v5 = "Unsupported ciphersuite in Protobuf Deserialized HybridSecretSharingSharedState. Must be .aesGcm256128";
LABEL_6:
    *(void *)(v4 + 72) = (unint64_t)(v5 - 32) | 0x8000000000000000;
    swift_willThrow();
LABEL_8:
    sub_1DB0C2840(a1, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
    return v2;
  }
  int64_t v6 = *(unsigned int *)(a1 + 20);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 17);
  char v11 = *(unsigned char *)(a1 + 48);
  type metadata accessor for CKSecretSharing.CKHybridSecretShareInternalState();
  swift_allocObject();
  sub_1DB04239C(v7, v8);
  sub_1DB0B8A18(v6, v7, v8, v9, v10, v12, v11);
  if (v1) {
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v2 = v13;
  switch(*(void *)(a1 + 64) >> 62)
  {
    case 1:
      if (!__OFSUB__(HIDWORD(v15), v15)) {
        goto LABEL_14;
      }
      __break(1u);
LABEL_18:
      __break(1u);
      JUMPOUT(0x1DB0C190CLL);
    case 2:
      if (!__OFSUB__(*(void *)(v15 + 24), *(void *)(v15 + 16))) {
        goto LABEL_14;
      }
      goto LABEL_18;
    default:
LABEL_14:
      swift_retain();
      uint64_t v16 = (void *)swift_slowAlloc();
      ccss_shamir_share_init();
      sub_1DB0C4A58();
      swift_release();
      int v17 = ccss_shamir_share_generator_deserialize();
      if (v17)
      {
        int v18 = v17;
        sub_1DB0C5288();
        sub_1DB0C50B8();
        sub_1DB0C53C8();
        sub_1DB0C50B8();
        swift_bridgeObjectRelease();
        sub_1DB056B5C();
        swift_allocError();
        *(unsigned char *)uint64_t v19 = 3;
        *(_DWORD *)(v19 + 4) = v18;
        *(unsigned char *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 12) = 0;
        *(_WORD *)(v19 + 16) = 256;
        *(_OWORD *)(v19 + 24) = xmmword_1DB0CA3A0;
        *(void *)(v19 + 40) = 0xEF293A6675626F74;
        *(void *)(v19 + 48) = 0xD00000000000006BLL;
        *(void *)(v19 + 56) = 0x80000001DB0CC770;
        *(void *)(v19 + 64) = 0;
        *(void *)(v19 + 72) = 0xE000000000000000;
        swift_willThrow();
        memset_s(v16, 8uLL, 0, 8uLL);
        MEMORY[0x1E0189230](v16, -1, -1);
        sub_1DB0C2840(a1, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
        swift_release();
      }
      else
      {
        memset_s(v16, 8uLL, 0, 8uLL);
        MEMORY[0x1E0189230](v16, -1, -1);
        sub_1DB0C2840(a1, type metadata accessor for CryptoKitSecretSharing_HybridSecretSharingSharedState);
      }
      break;
  }
  return v2;
}

uint64_t sub_1DB0C191C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKSecretSharing.HybridGenerator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1DB0C1980(unsigned int *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  CKSecretSharing.HybridGenerator.generateShare(shareIndex:)(*a1, a3);
  if (v3) {
    *a2 = v3;
  }
}

ValueMetadata *type metadata accessor for CKSecretSharing()
{
  return &type metadata for CKSecretSharing;
}

uint64_t *initializeBufferWithCopyOfBuffer for CKSecretSharing.HybridGenerator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    char v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1DB0C4D58();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_1DB0C4E18();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v7;
}

uint64_t destroy for CKSecretSharing.HybridGenerator(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1DB0C4D58();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_1DB0C4E18();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

void *initializeWithCopy for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1DB0C4D58();
  char v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_1DB0C4E18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

void *assignWithCopy for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1DB0C4D58();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_1DB0C4E18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

void *initializeWithTake for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1DB0C4D58();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_1DB0C4E18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void *assignWithTake for CKSecretSharing.HybridGenerator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1DB0C4D58();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_1DB0C4E18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CKSecretSharing.HybridGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1DB0C1F5C);
}

uint64_t sub_1DB0C1F5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1DB0C4D58();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1DB0C4E18();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for CKSecretSharing.HybridGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1DB0C209C);
}

void *sub_1DB0C209C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_1DB0C4D58();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1DB0C4E18();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1DB0C21C8()
{
  uint64_t result = sub_1DB0C4D58();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1DB0C4E18();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridReconstructor()
{
  return &type metadata for CKSecretSharing.HybridReconstructor;
}

uint64_t destroy for CKSecretSharing.HybridSecretShare(void *a1)
{
  sub_1DB042664(a1[3], a1[4]);
  sub_1DB042664(a1[5], a1[6]);
  sub_1DB042664(a1[7], a1[8]);
  uint64_t result = sub_1DB042664(a1[9], a1[10]);
  unint64_t v3 = a1[12];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[11];
    return sub_1DB042664(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_1DB04239C(v5, v6);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  sub_1DB04239C(v7, v8);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  unint64_t v10 = *(void *)(a2 + 64);
  sub_1DB04239C(v9, v10);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a2 + 72);
  unint64_t v12 = *(void *)(a2 + 80);
  sub_1DB04239C(v11, v12);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = (uint64_t *)(a2 + 88);
  unint64_t v14 = *(void *)(a2 + 96);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v15 = *v13;
    sub_1DB04239C(*v13, v14);
    *(void *)(a1 + 88) = v15;
    *(void *)(a1 + 96) = v14;
  }
  return a1;
}

uint64_t assignWithCopy for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_1DB04239C(v5, v6);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  sub_1DB042664(v7, v8);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = *(void *)(a2 + 48);
  sub_1DB04239C(v9, v10);
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  sub_1DB042664(v11, v12);
  uint64_t v13 = *(void *)(a2 + 56);
  unint64_t v14 = *(void *)(a2 + 64);
  sub_1DB04239C(v13, v14);
  uint64_t v15 = *(void *)(a1 + 56);
  unint64_t v16 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  sub_1DB042664(v15, v16);
  uint64_t v17 = *(void *)(a2 + 72);
  unint64_t v18 = *(void *)(a2 + 80);
  sub_1DB04239C(v17, v18);
  uint64_t v19 = *(void *)(a1 + 72);
  unint64_t v20 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v18;
  sub_1DB042664(v19, v20);
  uint64_t v21 = (uint64_t *)(a2 + 88);
  unint64_t v22 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 != 15)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v24 = *v21;
      sub_1DB04239C(*v21, v22);
      uint64_t v25 = *(void *)(a1 + 88);
      unint64_t v26 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v24;
      *(void *)(a1 + 96) = v22;
      sub_1DB042664(v25, v26);
      return a1;
    }
    sub_1DB0A7334(a1 + 88);
    goto LABEL_6;
  }
  if (v22 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v21;
    return a1;
  }
  uint64_t v23 = *v21;
  sub_1DB04239C(*v21, v22);
  *(void *)(a1 + 88) = v23;
  *(void *)(a1 + 96) = v22;
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for CKSecretSharing.HybridSecretShare(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1DB042664(v5, v6);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_1DB042664(v7, v8);
  uint64_t v9 = *(void *)(a1 + 56);
  unint64_t v10 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_1DB042664(v9, v10);
  uint64_t v11 = *(void *)(a1 + 72);
  unint64_t v12 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_1DB042664(v11, v12);
  uint64_t v13 = (void *)(a2 + 88);
  unint64_t v14 = *(void *)(a1 + 96);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = *(void *)(a2 + 96);
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v13;
      *(void *)(a1 + 96) = v15;
      sub_1DB042664(v16, v14);
      return a1;
    }
    sub_1DB0A7334(a1 + 88);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for CKSecretSharing.HybridSecretShare(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CKSecretSharing.HybridSecretShare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2)
    {
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSecretSharing.HybridSecretShare()
{
  return &type metadata for CKSecretSharing.HybridSecretShare;
}

uint64_t sub_1DB0C2700()
{
  return sub_1DB0C4DA8();
}

uint64_t sub_1DB0C2750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_1DB0B7DF0(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

unint64_t sub_1DB0C276C()
{
  unint64_t result = qword_1EA8FED40;
  if (!qword_1EA8FED40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FED40);
  }
  return result;
}

uint64_t sub_1DB0C27C0(uint64_t a1, uint64_t a2)
{
  return sub_1DB0B875C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1DB0C27DC(uint64_t a1)
{
  return sub_1DB0B8830(a1);
}

uint64_t sub_1DB0C27F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DB0C2840(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1DB0C28A0(void *a1, size_t a2)
{
  return sub_1DB0C1040(a1, a2);
}

uint64_t sub_1DB0C28B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DB0C28D4(a1, a2, a3) & 1;
}

uint64_t sub_1DB0C28D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = a2 - a1;
  if (a1) {
    uint64_t v7 = a2 - a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != *(void *)(a3 + 16)) {
    return 0;
  }
  if (a1) {
    return cc_cmp_safe() == 0;
  }
  __break(1u);
  return result;
}

uint64_t SymmetricKey.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1DB047FC8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  return *(void *)v0;
}

void static SymmetricKeySize.bits128.getter(void *a1@<X8>)
{
  *a1 = 128;
}

CryptoKitPrivate::SymmetricKeySize __swiftcall SymmetricKeySize.init(bitCount:)(CryptoKitPrivate::SymmetricKeySize bitCount)
{
  if (bitCount.bitCount < 1 || (bitCount.bitCount & 7) != 0) {
    __break(1u);
  }
  else {
    v1->bitCount = bitCount.bitCount;
  }
  return bitCount;
}

void static SymmetricKeySize.bits192.getter(void *a1@<X8>)
{
  *a1 = 192;
}

void static SymmetricKeySize.bits256.getter(void *a1@<X8>)
{
  *a1 = 256;
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_1DB0466F0(a1, a2, *v2);
}

uint64_t SymmetricKey.init(size:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if ((unint64_t)(*a1 + 7) > 0xE)
  {
    if (v3 < 0) {
      uint64_t v3 = *a1 + 7;
    }
    uint64_t result = sub_1DB048414(v3 >> 3);
  }
  else
  {
    if (qword_1EBE7D890 != -1) {
      swift_once();
    }
    uint64_t result = swift_retain();
  }
  *a2 = result;
  return result;
}

uint64_t SymmetricKey.bitCount.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 16);
  if (!(v3 >> 60)) {
    return 8 * v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DB0C2B0C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SymmetricKey.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t static SymmetricKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_1DB0C28D4(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

uint64_t sub_1DB0C2B88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_1DB0C28D4(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

ValueMetadata *type metadata accessor for SymmetricKeySize()
{
  return &type metadata for SymmetricKeySize;
}

ValueMetadata *type metadata accessor for SymmetricKey()
{
  return &type metadata for SymmetricKey;
}

uint64_t _s6ClientVMa()
{
  return __swift_instantiateGenericMetadata();
}

char *sub_1DB0C2C24(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFB8);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1DB04239C(a1, a2);
      break;
    default:
      break;
  }
  sub_1DB04239C(a1, a2);
  sub_1DB04239C(a3, a4);
  sub_1DB0C4A48();
  sub_1DB042664(a1, a2);
  switch(a4 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1DB04239C(a3, a4);
      break;
    default:
      break;
  }
  sub_1DB0C4A48();
  sub_1DB042664(a3, a4);
  sub_1DB0C4A38();
  sub_1DB089124();
  sub_1DB0C5268();
  uint64_t v18 = v8;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  while ((v22 & 1) == 0)
  {
    char v13 = v21;
    sub_1DB0C5268();
    if (v20) {
      break;
    }
    char v14 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1DB07E358(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v16 = *((void *)v11 + 2);
    unint64_t v15 = *((void *)v11 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v11 = sub_1DB07E358((char *)(v15 > 1), v16 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v16 + 1;
    v11[v16 + 32] = v14 ^ v13;
    sub_1DB0C5268();
  }
  v10[*(int *)(v18 + 56)] = 1;
  sub_1DB0C3068((uint64_t)v10);
  return v11;
}

uint64_t sub_1DB0C2EDC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_14;
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      uint64_t v12 = 0;
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_16;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 != v12)
          {
            __break(1u);
LABEL_14:
            __break(1u);
LABEL_15:
            __break(1u);
LABEL_16:
            __break(1u);
LABEL_17:
            __break(1u);
            JUMPOUT(0x1DB0C3048);
          }
          sub_1DB04239C(a1, a2);
          sub_1DB04239C(a3, a4);
          unint64_t v15 = sub_1DB0C2C24(a1, a2, a3, a4);
          sub_1DB042664(a1, a2);
          sub_1DB042664(a3, a4);
          uint64_t v16 = sub_1DB0656E0((uint64_t)v15);
          swift_bridgeObjectRelease();
          return v16;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_11;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1DB0C3068(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE7DFB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for Hash2FieldErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DB0C3164);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Hash2FieldErrors()
{
  return &type metadata for Hash2FieldErrors;
}

unint64_t sub_1DB0C31A0()
{
  unint64_t result = qword_1EA8FED48;
  if (!qword_1EA8FED48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FED48);
  }
  return result;
}

void HE.EvaluationKeyConfig.encryptionParams.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t HE.EvaluationKeyConfig.galoisElements.getter()
{
  return sub_1DB0C5188();
}

uint64_t HE.EvaluationKeyConfig.hasRelinKey.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

unsigned char *HE.EvaluationKeyConfig.init(encryptionParams:galoisElements:hasRelinKey:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = result[1];
  *(unsigned char *)a4 = *result;
  *(unsigned char *)(a4 + 1) = v4;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  return result;
}

uint64_t _s19EvaluationKeyConfigVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19EvaluationKeyConfigVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  sub_1DB0C5188();
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_1DB0C5188();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t _s19EvaluationKeyConfigVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19EvaluationKeyConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HE.EvaluationKeyConfig()
{
  return &type metadata for HE.EvaluationKeyConfig;
}

ValueMetadata *type metadata accessor for OPRF()
{
  return &type metadata for OPRF;
}

uint64_t *sub_1DB0C33D8@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for OPRF.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DB0C348CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OPRF.Errors()
{
  return &type metadata for OPRF.Errors;
}

uint64_t type metadata accessor for OPRF.Ciphersuite()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for OPRF.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB0C35A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OPRF.Mode()
{
  return &type metadata for OPRF.Mode;
}

unint64_t sub_1DB0C35E4()
{
  unint64_t result = qword_1EA8FED50;
  if (!qword_1EA8FED50)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8FED58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FED50);
  }
  return result;
}

void sub_1DB0C3640(void *a1@<X8>)
{
  *a1 = &unk_1F353BD30;
}

unint64_t sub_1DB0C3654()
{
  unint64_t result = qword_1EA8FED60;
  if (!qword_1EA8FED60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FED60);
  }
  return result;
}

unint64_t sub_1DB0C36AC()
{
  unint64_t result = qword_1EA8FED68;
  if (!qword_1EA8FED68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FED68);
  }
  return result;
}

BOOL sub_1DB0C3700(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 4) == *(unsigned __int8 *)(a1 + 4) && *(_DWORD *)a1 == *(_DWORD *)a2;
}

uint64_t sub_1DB0C3720()
{
  return sub_1DB0C54A8();
}

uint64_t sub_1DB0C3780()
{
  return sub_1DB0C5498();
}

uint64_t sub_1DB0C37C0()
{
  return sub_1DB0C54A8();
}

uint64_t LubyRackoff.AES256Encryptor.init(key:blockSizeInBits:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1DB0C387C(a1, a2, a3);
}

uint64_t LubyRackoff.AES256Encryptor.encrypt(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1DB0C3B30(a1, a2);
}

uint64_t LubyRackoff.AES256Decryptor.init(key:blockSizeInBits:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1DB0C387C(a1, a2, a3);
}

uint64_t sub_1DB0C387C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  swift_beginAccess();
  if (a2 > 128 || (a2 & 7) != 0 || *(void *)(v6 + 16) != 32)
  {
    __break(1u);
  }
  else
  {
    ccaes_ecb_encrypt_mode();
    uint64_t result = MEMORY[0x1E0188C30]();
    uint64_t v3 = result;
    if (qword_1EBE7D890 == -1) {
      goto LABEL_5;
    }
  }
  uint64_t result = swift_once();
LABEL_5:
  uint64_t v8 = off_1EBE7D888;
  uint64_t v16 = off_1EBE7D888;
  if (v3)
  {
    if (v3 < 0)
    {
      __break(1u);
      goto LABEL_25;
    }
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1DB0A928C(v16[2], v16[2], 0);
      --v3;
    }
    while (v3);
    uint64_t v9 = (uint64_t)v16;
  }
  else
  {
    swift_retain();
    uint64_t v9 = (uint64_t)v8;
  }
  uint64_t result = AESLubyRackoffContextSize();
  if (result)
  {
    uint64_t v10 = result;
    if ((result & 0x8000000000000000) == 0)
    {
      swift_retain();
      do
      {
        swift_beginAccess();
        sub_1DB0A928C(v8[2], v8[2], 0);
        --v10;
      }
      while (v10);
      goto LABEL_17;
    }
LABEL_25:
    __break(1u);
    return result;
  }
  swift_retain();
LABEL_17:
  uint64_t v17 = (uint64_t)v8;
  int v15 = 0;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    size_t v11 = sub_1DB0A97E4(v9);
    swift_release();
    uint64_t v9 = v11;
  }
  swift_beginAccess();
  swift_retain();
  sub_1DB0C3D18(&v17, v6, &v15);
  swift_release_n();
  int v12 = v15;
  if (v15)
  {
    sub_1DB0C3DFC();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 4) = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v14 = v17;
    *a3 = a2;
    a3[1] = v9;
    a3[2] = v14;
  }
  return result;
}

uint64_t LubyRackoff.AES256Decryptor.decrypt(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1DB0C3B30(a1, a2);
}

uint64_t sub_1DB0C3B30(uint64_t a1, unint64_t a2)
{
  if (__OFADD__(*v2, 7))
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x1DB0C3D08);
  }
  uint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_11;
      }
      uint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_7:
      uint64_t v10 = sub_1DB065640(v5);
      sub_1DB04239C(a1, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v2[2] = sub_1DB0A97E4(v2[2]);
        swift_release();
      }
      uint64_t v8 = swift_beginAccess();
      MEMORY[0x1F4188790](v8);
      sub_1DB0C49D8();
      sub_1DB042664(a1, a2);
      return v10;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_1DB0C3D18(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *a1 = sub_1DB0A97E4(*a1);
    swift_release();
  }
  swift_beginAccess();
  swift_beginAccess();
  uint64_t result = ccecb_init();
  *a3 = result;
  if (!result)
  {
    uint64_t result = cclr_aes_init();
    *a3 = result;
  }
  return result;
}

unint64_t sub_1DB0C3DFC()
{
  unint64_t result = qword_1EA8FED70;
  if (!qword_1EA8FED70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FED70);
  }
  return result;
}

uint64_t sub_1DB0C3E50()
{
  return sub_1DB0C3EA8();
}

uint64_t sub_1DB0C3E7C()
{
  return sub_1DB0C3EA8();
}

uint64_t sub_1DB0C3EA8()
{
  return sub_1DB0C49F8();
}

ValueMetadata *type metadata accessor for LubyRackoff()
{
  return &type metadata for LubyRackoff;
}

ValueMetadata *type metadata accessor for LubyRackoff.AES256Encryptor()
{
  return &type metadata for LubyRackoff.AES256Encryptor;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwxx_0()
{
  swift_release();
  return swift_release();
}

void *_s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *_s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t _s16CryptoKitPrivate11LubyRackoffO15AES256EncryptorVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DB0C40B0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LubyRackoff.AES256Decryptor()
{
  return &type metadata for LubyRackoff.AES256Decryptor;
}

uint64_t getEnumTagSinglePayload for LubyRackoffError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LubyRackoffError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1DB0C418C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_1DB0C4194(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LubyRackoffError()
{
  return &type metadata for LubyRackoffError;
}

unint64_t sub_1DB0C41B0()
{
  unint64_t result = qword_1EA8FED78;
  if (!qword_1EA8FED78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8FED78);
  }
  return result;
}

uint64_t sub_1DB0C4204(uint64_t a1)
{
  return sub_1DB0C425C(a1, MEMORY[0x1E4F146E0]);
}

uint64_t sub_1DB0C4230(uint64_t a1)
{
  return sub_1DB0C425C(a1, MEMORY[0x1E4F146E8]);
}

uint64_t sub_1DB0C425C(uint64_t a1, uint64_t (*a2)(void, void, uint64_t, void))
{
  unsigned int v3 = (_DWORD *)v2[2];
  uint64_t result = a2(v2[3], v2[4], a1, v2[5]);
  *unsigned int v3 = result;
  return result;
}

ValueMetadata *type metadata accessor for HE()
{
  return &type metadata for HE;
}

uint64_t sub_1DB0C42AC(uint64_t result)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  uint64_t v3 = result * v2;
  if ((unsigned __int128)(result * (__int128)v2) >> 64 != (result * v2) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0)
  {
    uint64_t v4 = sub_1DB0C51B8();
    uint64_t v5 = v4;
    *(void *)(v4 + 16) = ((unint64_t)(v3 - 1) >> 3) + 1;
    *(unsigned char *)(v4 + 32) = 0;
    if ((unint64_t)v3 >= 9) {
      bzero((void *)(v4 + 33), (unint64_t)(v3 - 1) >> 3);
    }
    goto LABEL_7;
  }
  if ((unint64_t)(v3 + 7) >= 8)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v5 = MEMORY[0x1E4FBC860];
LABEL_7:
  int v6 = cche_coeffs_to_bytes();
  if (v6)
  {
    int v7 = v6;
    swift_bridgeObjectRelease();
    sub_1DB04D0D4();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 0;
    swift_willThrow();
  }
  return v5;
}

uint64_t sub_1DB0C43C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  if (v1) {
    MEMORY[0x1E0189230](v1, -1, -1);
  }
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HE.ObjectStorage()
{
  return self;
}

uint64_t sub_1DB0C4468()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    memset_s(*(void **)(v0 + 24), *(void *)(v0 + 32) - v1, 0, *(void *)(v0 + 32) - v1);
    swift_retain();
    MEMORY[0x1E0189230](v1, -1, -1);
    swift_release();
    swift_release();
    return v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DB0C44E0()
{
  sub_1DB0C4468();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HE.ObjectStorageWithZeroize()
{
  return self;
}

char *sub_1DB0C4538(char *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  unint64_t v7 = a5;
  int64_t v10 = *((void *)result + 2);
  size_t v11 = (char *)MEMORY[0x1E4FBC860];
  if (v10)
  {
    int v12 = result;
    char v21 = (char *)MEMORY[0x1E4FBC860];
    uint64_t result = sub_1DB04C448(0, v10, 0);
    size_t v11 = v21;
    uint64_t v13 = v12 + 32;
    while (1)
    {
      uint64_t v14 = *(void *)(*(void *)v13 + 24);
      if (!v14) {
        break;
      }
      char v21 = v11;
      unint64_t v16 = *((void *)v11 + 2);
      unint64_t v15 = *((void *)v11 + 3);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = sub_1DB04C448((char *)(v15 > 1), v16 + 1, 1);
        size_t v11 = v21;
      }
      *((void *)v11 + 2) = v16 + 1;
      *(void *)&v11[8 * v16 + 32] = v14;
      v13 += 8;
      if (!--v10)
      {
        uint64_t v6 = a6;
        unint64_t v7 = a5;
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    char v21 = v11;
    if (*(void *)(*(void *)a2 + 24))
    {
      swift_retain();
      sub_1DB090EC4(&v21, v7, v6, a3, a3 + 32, &v20);
      uint64_t v17 = v20;
      swift_release();
      swift_bridgeObjectRelease();
      return (char *)v17;
    }
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ATHM()
{
  return &type metadata for ATHM;
}

unsigned char *storeEnumTagSinglePayload for ATHM.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB0C4780);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ATHM.Errors()
{
  return &type metadata for ATHM.Errors;
}

unint64_t sub_1DB0C47BC()
{
  unint64_t result = qword_1EA8FED80[0];
  if (!qword_1EA8FED80[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA8FED80);
  }
  return result;
}

uint64_t type metadata accessor for ATHM.Ciphersuite()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1DB0C4868()
{
  return MEMORY[0x1F40E3460]();
}

uint64_t sub_1DB0C4888()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t sub_1DB0C4898()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t sub_1DB0C48A8()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_1DB0C48B8()
{
  return MEMORY[0x1F40E37F0]();
}

uint64_t sub_1DB0C48C8()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_1DB0C48D8()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_1DB0C48E8()
{
  return MEMORY[0x1F40E3820]();
}

uint64_t sub_1DB0C48F8()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_1DB0C4908()
{
  return MEMORY[0x1F40E3B70]();
}

uint64_t sub_1DB0C4928()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1DB0C4938()
{
  return MEMORY[0x1F40E4BC8]();
}

uint64_t sub_1DB0C4948()
{
  return MEMORY[0x1F40E4BF0]();
}

uint64_t sub_1DB0C4958()
{
  return MEMORY[0x1F40E4C00]();
}

uint64_t sub_1DB0C4968()
{
  return MEMORY[0x1F40E4C08]();
}

uint64_t sub_1DB0C4978()
{
  return MEMORY[0x1F40E4C58]();
}

uint64_t sub_1DB0C4988()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_1DB0C4998()
{
  return MEMORY[0x1F40E4CA8]();
}

uint64_t sub_1DB0C49A8()
{
  return MEMORY[0x1F40E4CD8]();
}

uint64_t sub_1DB0C49B8()
{
  return MEMORY[0x1F40E4CF8]();
}

uint64_t sub_1DB0C49C8()
{
  return MEMORY[0x1F40E4D10]();
}

uint64_t sub_1DB0C49D8()
{
  return MEMORY[0x1F40E4D20]();
}

uint64_t sub_1DB0C49E8()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1DB0C49F8()
{
  return MEMORY[0x1F40E4D68]();
}

uint64_t sub_1DB0C4A08()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1DB0C4A18()
{
  return MEMORY[0x1F40E4E30]();
}

uint64_t sub_1DB0C4A28()
{
  return MEMORY[0x1F40E4E48]();
}

uint64_t sub_1DB0C4A38()
{
  return MEMORY[0x1F40E4E60]();
}

uint64_t sub_1DB0C4A48()
{
  return MEMORY[0x1F40E4E70]();
}

uint64_t sub_1DB0C4A58()
{
  return MEMORY[0x1F40E4E98]();
}

uint64_t sub_1DB0C4A68()
{
  return MEMORY[0x1F4186958]();
}

uint64_t sub_1DB0C4A78()
{
  return MEMORY[0x1F4186968]();
}

uint64_t sub_1DB0C4A88()
{
  return MEMORY[0x1F4186978]();
}

uint64_t sub_1DB0C4A98()
{
  return MEMORY[0x1F4127060]();
}

uint64_t sub_1DB0C4AA8()
{
  return MEMORY[0x1F4127078]();
}

uint64_t sub_1DB0C4AB8()
{
  return MEMORY[0x1F4127088]();
}

uint64_t sub_1DB0C4AC8()
{
  return MEMORY[0x1F4127110]();
}

uint64_t sub_1DB0C4AD8()
{
  return MEMORY[0x1F4127118]();
}

uint64_t sub_1DB0C4AE8()
{
  return MEMORY[0x1F4127138]();
}

uint64_t sub_1DB0C4B18()
{
  return MEMORY[0x1F4127180]();
}

uint64_t sub_1DB0C4B28()
{
  return MEMORY[0x1F41271A8]();
}

uint64_t sub_1DB0C4B38()
{
  return MEMORY[0x1F41271C0]();
}

uint64_t sub_1DB0C4B48()
{
  return MEMORY[0x1F41271F0]();
}

uint64_t sub_1DB0C4B58()
{
  return MEMORY[0x1F4127200]();
}

uint64_t sub_1DB0C4B68()
{
  return MEMORY[0x1F4127298]();
}

uint64_t sub_1DB0C4B78()
{
  return MEMORY[0x1F41272A0]();
}

uint64_t sub_1DB0C4B88()
{
  return MEMORY[0x1F41272E0]();
}

uint64_t sub_1DB0C4B98()
{
  return MEMORY[0x1F4127330]();
}

uint64_t sub_1DB0C4BA8()
{
  return MEMORY[0x1F4127340]();
}

uint64_t sub_1DB0C4BB8()
{
  return MEMORY[0x1F4127348]();
}

uint64_t sub_1DB0C4BD8()
{
  return MEMORY[0x1F4127398]();
}

uint64_t sub_1DB0C4BE8()
{
  return MEMORY[0x1F41273A0]();
}

uint64_t sub_1DB0C4BF8()
{
  return MEMORY[0x1F4127410]();
}

uint64_t sub_1DB0C4C08()
{
  return MEMORY[0x1F4127418]();
}

uint64_t sub_1DB0C4C18()
{
  return MEMORY[0x1F4127458]();
}

uint64_t sub_1DB0C4C28()
{
  return MEMORY[0x1F41274B8]();
}

uint64_t sub_1DB0C4C38()
{
  return MEMORY[0x1F41274E8]();
}

uint64_t sub_1DB0C4C48()
{
  return MEMORY[0x1F4127660]();
}

uint64_t sub_1DB0C4C58()
{
  return MEMORY[0x1F4127678]();
}

uint64_t sub_1DB0C4C68()
{
  return MEMORY[0x1F4127690]();
}

uint64_t sub_1DB0C4C78()
{
  return MEMORY[0x1F40DFEA0]();
}

uint64_t sub_1DB0C4C88()
{
  return MEMORY[0x1F40DFF10]();
}

uint64_t sub_1DB0C4C98()
{
  return MEMORY[0x1F40DFF18]();
}

uint64_t sub_1DB0C4CA8()
{
  return MEMORY[0x1F40DFF20]();
}

uint64_t sub_1DB0C4CB8()
{
  return MEMORY[0x1F40DFF28]();
}

uint64_t sub_1DB0C4CC8()
{
  return MEMORY[0x1F40DFF30]();
}

uint64_t sub_1DB0C4CD8()
{
  return MEMORY[0x1F40DFF38]();
}

uint64_t sub_1DB0C4CE8()
{
  return MEMORY[0x1F40DFF40]();
}

uint64_t sub_1DB0C4CF8()
{
  return MEMORY[0x1F40DFF58]();
}

uint64_t sub_1DB0C4D08()
{
  return MEMORY[0x1F40DFF60]();
}

uint64_t sub_1DB0C4D18()
{
  return MEMORY[0x1F40DFF70]();
}

uint64_t sub_1DB0C4D28()
{
  return MEMORY[0x1F40DFF80]();
}

uint64_t sub_1DB0C4D38()
{
  return MEMORY[0x1F40DFFB0]();
}

uint64_t sub_1DB0C4D48()
{
  return MEMORY[0x1F40DFFC0]();
}

uint64_t sub_1DB0C4D58()
{
  return MEMORY[0x1F40DFFD8]();
}

uint64_t sub_1DB0C4D68()
{
  return MEMORY[0x1F40E0028]();
}

uint64_t sub_1DB0C4D78()
{
  return MEMORY[0x1F40E0030]();
}

uint64_t sub_1DB0C4D88()
{
  return MEMORY[0x1F40E0040]();
}

uint64_t sub_1DB0C4D98()
{
  return MEMORY[0x1F40E0048]();
}

uint64_t sub_1DB0C4DA8()
{
  return MEMORY[0x1F40E0058]();
}

uint64_t sub_1DB0C4DB8()
{
  return MEMORY[0x1F40E0060]();
}

uint64_t sub_1DB0C4DC8()
{
  return MEMORY[0x1F40E0070]();
}

uint64_t sub_1DB0C4DD8()
{
  return MEMORY[0x1F40E0078]();
}

uint64_t sub_1DB0C4DE8()
{
  return MEMORY[0x1F40E0080]();
}

uint64_t sub_1DB0C4DF8()
{
  return MEMORY[0x1F40E0088]();
}

uint64_t sub_1DB0C4E08()
{
  return MEMORY[0x1F40E0090]();
}

uint64_t sub_1DB0C4E18()
{
  return MEMORY[0x1F40E00A8]();
}

uint64_t sub_1DB0C4E28()
{
  return MEMORY[0x1F40E00C8]();
}

uint64_t sub_1DB0C4E38()
{
  return MEMORY[0x1F40E00F8]();
}

uint64_t sub_1DB0C4E48()
{
  return MEMORY[0x1F40E02B8]();
}

uint64_t sub_1DB0C4E58()
{
  return MEMORY[0x1F40E02C0]();
}

uint64_t sub_1DB0C4E68()
{
  return MEMORY[0x1F40E02C8]();
}

uint64_t sub_1DB0C4E78()
{
  return MEMORY[0x1F40E0318]();
}

uint64_t sub_1DB0C4E88()
{
  return MEMORY[0x1F40E0328]();
}

uint64_t sub_1DB0C4E98()
{
  return MEMORY[0x1F40E0338]();
}

uint64_t sub_1DB0C4EA8()
{
  return MEMORY[0x1F40E0340]();
}

uint64_t sub_1DB0C4EB8()
{
  return MEMORY[0x1F40E0348]();
}

uint64_t sub_1DB0C4EC8()
{
  return MEMORY[0x1F40E0350]();
}

uint64_t sub_1DB0C4ED8()
{
  return MEMORY[0x1F40E0358]();
}

uint64_t sub_1DB0C4EE8()
{
  return MEMORY[0x1F40E0378]();
}

uint64_t sub_1DB0C4EF8()
{
  return MEMORY[0x1F40E0380]();
}

uint64_t sub_1DB0C4F08()
{
  return MEMORY[0x1F40E0388]();
}

uint64_t sub_1DB0C4F18()
{
  return MEMORY[0x1F40E0390]();
}

uint64_t sub_1DB0C4F28()
{
  return MEMORY[0x1F40E0398]();
}

uint64_t sub_1DB0C4F38()
{
  return MEMORY[0x1F40E03A0]();
}

uint64_t sub_1DB0C4F48()
{
  return MEMORY[0x1F40E0470]();
}

uint64_t sub_1DB0C4F58()
{
  return MEMORY[0x1F40E0488]();
}

uint64_t sub_1DB0C4F68()
{
  return MEMORY[0x1F40E0490]();
}

uint64_t sub_1DB0C4F78()
{
  return MEMORY[0x1F40E0498]();
}

uint64_t sub_1DB0C4F88()
{
  return MEMORY[0x1F40E04A0]();
}

uint64_t sub_1DB0C4F98()
{
  return MEMORY[0x1F40E04A8]();
}

uint64_t sub_1DB0C4FA8()
{
  return MEMORY[0x1F40E04B0]();
}

uint64_t sub_1DB0C4FB8()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1DB0C4FC8()
{
  return MEMORY[0x1F40E6008]();
}

uint64_t sub_1DB0C4FD8()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1DB0C4FE8()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1DB0C4FF8()
{
  return MEMORY[0x1F4183788]();
}

uint64_t sub_1DB0C5008()
{
  return MEMORY[0x1F4183790]();
}

uint64_t sub_1DB0C5018()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1DB0C5028()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1DB0C5038()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1DB0C5048()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t sub_1DB0C5058()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t sub_1DB0C5068()
{
  return MEMORY[0x1F40E6278]();
}

uint64_t sub_1DB0C5078()
{
  return MEMORY[0x1F40E6290]();
}

uint64_t sub_1DB0C5088()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_1DB0C5098()
{
  return MEMORY[0x1F4183950]();
}

uint64_t sub_1DB0C50A8()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1DB0C50B8()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1DB0C50C8()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1DB0C50D8()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1DB0C50E8()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1DB0C50F8()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1DB0C5108()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1DB0C5118()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t sub_1DB0C5128()
{
  return MEMORY[0x1F4183BD0]();
}

uint64_t sub_1DB0C5138()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t sub_1DB0C5148()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t sub_1DB0C5178()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1DB0C5188()
{
  return MEMORY[0x1F40E6378]();
}

uint64_t sub_1DB0C5198()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1DB0C51A8()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1DB0C51B8()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1DB0C51C8()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1DB0C51D8()
{
  return MEMORY[0x1F40E6398]();
}

uint64_t sub_1DB0C51E8()
{
  return MEMORY[0x1F40E6478]();
}

uint64_t sub_1DB0C51F8()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t sub_1DB0C5228()
{
  return MEMORY[0x1F40E68F8]();
}

uint64_t sub_1DB0C5238()
{
  return MEMORY[0x1F41874A8]();
}

uint64_t sub_1DB0C5248()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t sub_1DB0C5258()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1DB0C5268()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t sub_1DB0C5278()
{
  return MEMORY[0x1F4184800]();
}

uint64_t sub_1DB0C5288()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1DB0C5298()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1DB0C52A8()
{
  return MEMORY[0x1F4184D70]();
}

uint64_t sub_1DB0C52B8()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1DB0C52C8()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_1DB0C52D8()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1DB0C52E8()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1DB0C52F8()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1DB0C5308()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_1DB0C5318()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1DB0C5328()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1DB0C5338()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1DB0C5348()
{
  return MEMORY[0x1F4185260]();
}

uint64_t sub_1DB0C5358()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1DB0C5368()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1DB0C5378()
{
  return MEMORY[0x1F4185358]();
}

uint64_t sub_1DB0C5388()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1DB0C5398()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1DB0C53A8()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1DB0C53B8()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_1DB0C53C8()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1DB0C53D8()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1DB0C53E8()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t sub_1DB0C53F8()
{
  return MEMORY[0x1F4185D10]();
}

uint64_t sub_1DB0C5408()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1DB0C5418()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1DB0C5428()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1DB0C5438()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1DB0C5448()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1DB0C5458()
{
  return MEMORY[0x1F4185E90]();
}

uint64_t sub_1DB0C5468()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t sub_1DB0C5478()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1DB0C5488()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1DB0C5498()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_1DB0C54A8()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t AESLubyRackoffContextSize()
{
  return MEMORY[0x1F4116ED8]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

uint64_t SPAKE2Alishaz0Size()
{
  return MEMORY[0x1F4116EE0]();
}

uint64_t SPAKE2CtxSize()
{
  return MEMORY[0x1F4116EE8]();
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x1F40F6E38](key);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6E40](key, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6F08](keyData, attributes, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1F40CA6A8]();
}

uint64_t ccaes_ecb_encrypt_mode()
{
  return MEMORY[0x1F40CA6E0]();
}

uint64_t ccapsic_client_check_intersect_response()
{
  return MEMORY[0x1F40CA718]();
}

uint64_t ccapsic_client_generate_match_response()
{
  return MEMORY[0x1F40CA720]();
}

uint64_t ccapsic_client_init()
{
  return MEMORY[0x1F40CA728]();
}

uint64_t ccapsic_client_state_sizeof()
{
  return MEMORY[0x1F40CA730]();
}

uint64_t ccder_decode_rsa_pub()
{
  return MEMORY[0x1F40CA8A0]();
}

uint64_t ccder_decode_rsa_pub_n()
{
  return MEMORY[0x1F40CA8A8]();
}

uint64_t ccder_encode_rsa_pub()
{
  return MEMORY[0x1F40CA918]();
}

uint64_t ccder_encode_rsa_pub_size()
{
  return MEMORY[0x1F40CA920]();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return MEMORY[0x1F40CAA10]();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return MEMORY[0x1F40CAA18]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1F40CAA40]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x1F40CAA48]();
}

uint64_t ccec_cp_521()
{
  return MEMORY[0x1F40CAA50]();
}

uint64_t ccec_validate_pub()
{
  return MEMORY[0x1F40CAB70]();
}

uint64_t ccec_x963_import_pub()
{
  return MEMORY[0x1F40CABA8]();
}

uint64_t ccecb_init()
{
  return MEMORY[0x1F40CABC0]();
}

uint64_t cche_ciphertext_coeff_compose()
{
  return MEMORY[0x1F40CACC8]();
}

uint64_t cche_ciphertext_coeff_decompose_nptexts()
{
  return MEMORY[0x1F40CACD0]();
}

uint64_t cche_ciphertext_fresh_correction_factor()
{
  return MEMORY[0x1F40CACD8]();
}

uint64_t cche_ciphertext_fresh_npolys()
{
  return MEMORY[0x1F40CACE0]();
}

uint64_t cche_ciphertext_galois_elt_rotate_rows_right()
{
  return MEMORY[0x1F40CACE8]();
}

uint64_t cche_ciphertext_galois_elt_swap_columns()
{
  return MEMORY[0x1F40CACF0]();
}

uint64_t cche_ciphertext_sizeof()
{
  return MEMORY[0x1F40CACF8]();
}

uint64_t cche_coeffs_to_bytes()
{
  return MEMORY[0x1F40CAD00]();
}

uint64_t cche_crt_compose()
{
  return MEMORY[0x1F40CAD08]();
}

uint64_t cche_decode_poly_uint64()
{
  return MEMORY[0x1F40CAD10]();
}

uint64_t cche_decode_simd_int64()
{
  return MEMORY[0x1F40CAD18]();
}

uint64_t cche_decode_simd_uint64()
{
  return MEMORY[0x1F40CAD20]();
}

uint64_t cche_decrypt()
{
  return MEMORY[0x1F40CAD28]();
}

uint64_t cche_deserialize_ciphertext_coeff()
{
  return MEMORY[0x1F40CAD30]();
}

uint64_t cche_deserialize_seeded_ciphertext_coeff()
{
  return MEMORY[0x1F40CAD38]();
}

uint64_t cche_encode_poly_uint64()
{
  return MEMORY[0x1F40CAD40]();
}

uint64_t cche_encode_simd_int64()
{
  return MEMORY[0x1F40CAD48]();
}

uint64_t cche_encode_simd_reduced_int64()
{
  return MEMORY[0x1F40CAD50]();
}

uint64_t cche_encode_simd_uint64()
{
  return MEMORY[0x1F40CAD58]();
}

uint64_t cche_encrypt_symmetric()
{
  return MEMORY[0x1F40CAD60]();
}

uint64_t cche_encryption_params_coefficient_moduli()
{
  return MEMORY[0x1F40CAD68]();
}

uint64_t cche_encryption_params_coefficient_nmoduli()
{
  return MEMORY[0x1F40CAD70]();
}

uint64_t cche_encryption_params_plaintext_modulus()
{
  return MEMORY[0x1F40CAD78]();
}

uint64_t cche_encryption_params_polynomial_degree()
{
  return MEMORY[0x1F40CAD80]();
}

uint64_t cche_galois_key_generate()
{
  return MEMORY[0x1F40CAD88]();
}

uint64_t cche_galois_key_save()
{
  return MEMORY[0x1F40CAD90]();
}

uint64_t cche_galois_key_sizeof()
{
  return MEMORY[0x1F40CAD98]();
}

uint64_t cche_param_ctx_ciphertext_ctx_nmoduli()
{
  return MEMORY[0x1F40CADA0]();
}

uint64_t cche_param_ctx_init()
{
  return MEMORY[0x1F40CADA8]();
}

uint64_t cche_param_ctx_key_ctx_nmoduli()
{
  return MEMORY[0x1F40CADB0]();
}

uint64_t cche_param_ctx_key_ctx_poly_nbytes()
{
  return MEMORY[0x1F40CADB8]();
}

uint64_t cche_param_ctx_plaintext_modulus()
{
  return MEMORY[0x1F40CADC0]();
}

uint64_t cche_param_ctx_plaintext_modulus_inverse()
{
  return MEMORY[0x1F40CADC8]();
}

uint64_t cche_param_ctx_polynomial_degree()
{
  return MEMORY[0x1F40CADD0]();
}

uint64_t cche_param_ctx_sizeof()
{
  return MEMORY[0x1F40CADD8]();
}

uint64_t cche_plaintext_sizeof()
{
  return MEMORY[0x1F40CADE0]();
}

uint64_t cche_relin_key_generate()
{
  return MEMORY[0x1F40CADE8]();
}

uint64_t cche_relin_key_save()
{
  return MEMORY[0x1F40CADF0]();
}

uint64_t cche_relin_key_sizeof()
{
  return MEMORY[0x1F40CADF8]();
}

uint64_t cche_rng_seed_sizeof()
{
  return MEMORY[0x1F40CAE00]();
}

uint64_t cche_secret_key_generate_from_seed()
{
  return MEMORY[0x1F40CAE08]();
}

uint64_t cche_secret_key_sizeof()
{
  return MEMORY[0x1F40CAE10]();
}

uint64_t cche_serialize_seeded_ciphertext_coeff()
{
  return MEMORY[0x1F40CAE18]();
}

uint64_t cche_serialize_seeded_ciphertext_coeff_nbytes()
{
  return MEMORY[0x1F40CAE20]();
}

uint64_t cchkdf()
{
  return MEMORY[0x1F40CAE28]();
}

uint64_t cckem_decapsulate()
{
  return MEMORY[0x1F40CAEC0]();
}

uint64_t cckem_encapsulate()
{
  return MEMORY[0x1F40CAEC8]();
}

uint64_t cckem_encapsulated_key_nbytes_info()
{
  return MEMORY[0x1F40CAED8]();
}

uint64_t cckem_export_privkey()
{
  return MEMORY[0x1F40CAEE0]();
}

uint64_t cckem_export_pubkey()
{
  return MEMORY[0x1F40CAEE8]();
}

uint64_t cckem_full_ctx_init()
{
  return MEMORY[0x1F40CAEF0]();
}

uint64_t cckem_generate_key()
{
  return MEMORY[0x1F40CAEF8]();
}

uint64_t cckem_import_privkey()
{
  return MEMORY[0x1F40CAF00]();
}

uint64_t cckem_import_pubkey()
{
  return MEMORY[0x1F40CAF08]();
}

uint64_t cckem_kyber768()
{
  return MEMORY[0x1F40CAF18]();
}

uint64_t cckem_privkey_nbytes_info()
{
  return MEMORY[0x1F40CAF28]();
}

uint64_t cckem_pub_ctx_init()
{
  return MEMORY[0x1F40CAF30]();
}

uint64_t cckem_pubkey_nbytes_info()
{
  return MEMORY[0x1F40CAF40]();
}

uint64_t cckem_public_ctx()
{
  return MEMORY[0x1F40CAF48]();
}

uint64_t cckem_shared_key_nbytes_info()
{
  return MEMORY[0x1F40CAF58]();
}

uint64_t cckem_sizeof_full_ctx()
{
  return MEMORY[0x1F40CAF60]();
}

uint64_t cckem_sizeof_pub_ctx()
{
  return MEMORY[0x1F40CAF68]();
}

uint64_t cclr_aes_init()
{
  return MEMORY[0x1F40CAF70]();
}

uint64_t ccrng()
{
  return MEMORY[0x1F40CB030]();
}

uint64_t ccrng_generate_bridge()
{
  return MEMORY[0x1F4116EF0]();
}

uint64_t ccrsa_ctx_public()
{
  return MEMORY[0x1F40CB058]();
}

uint64_t ccrsa_generate_key()
{
  return MEMORY[0x1F40CB0B8]();
}

uint64_t ccrsabssa_blind_message()
{
  return MEMORY[0x1F40CB110]();
}

uint64_t ccrsabssa_sign_blinded_message()
{
  return MEMORY[0x1F40CB118]();
}

uint64_t ccrsabssa_unblind_signature()
{
  return MEMORY[0x1F40CB120]();
}

uint64_t ccscrypt()
{
  return MEMORY[0x1F40CB128]();
}

uint64_t ccscrypt_storage_size()
{
  return MEMORY[0x1F40CB130]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1F40CB148]();
}

uint64_t ccspake_cp_256()
{
  return MEMORY[0x1F40CB1A0]();
}

uint64_t ccspake_cp_256_rfc()
{
  return MEMORY[0x1F40CB1A8]();
}

uint64_t ccspake_generate_L()
{
  return MEMORY[0x1F40CB1B0]();
}

uint64_t ccspake_kex_generate()
{
  return MEMORY[0x1F40CB1B8]();
}

uint64_t ccspake_kex_process()
{
  return MEMORY[0x1F40CB1C0]();
}

uint64_t ccspake_mac_compute()
{
  return MEMORY[0x1F40CB1C8]();
}

uint64_t ccspake_mac_hkdf_cmac_aes128_sha256()
{
  return MEMORY[0x1F40CB1D0]();
}

uint64_t ccspake_mac_hkdf_hmac_sha256()
{
  return MEMORY[0x1F40CB1D8]();
}

uint64_t ccspake_mac_verify_and_get_session_key()
{
  return MEMORY[0x1F40CB1E0]();
}

uint64_t ccspake_prover_init()
{
  return MEMORY[0x1F40CB1E8]();
}

uint64_t ccspake_prover_initialize()
{
  return MEMORY[0x1F40CB1F0]();
}

uint64_t ccspake_reduce_w()
{
  return MEMORY[0x1F40CB1F8]();
}

uint64_t ccspake_sizeof_ctx()
{
  return MEMORY[0x1F40CB200]();
}

uint64_t ccspake_sizeof_point()
{
  return MEMORY[0x1F40CB208]();
}

uint64_t ccspake_sizeof_w()
{
  return MEMORY[0x1F40CB210]();
}

uint64_t ccspake_verifier_initialize()
{
  return MEMORY[0x1F40CB220]();
}

uint64_t ccss_shamir_parameters_init()
{
  return MEMORY[0x1F40CB278]();
}

uint64_t ccss_shamir_share_bag_add_share()
{
  return MEMORY[0x1F40CB280]();
}

uint64_t ccss_shamir_share_bag_init()
{
  return MEMORY[0x1F40CB288]();
}

uint64_t ccss_shamir_share_bag_recover_secret()
{
  return MEMORY[0x1F40CB290]();
}

uint64_t ccss_shamir_share_generator_deserialize()
{
  return MEMORY[0x1F40CB2A0]();
}

uint64_t ccss_shamir_share_generator_generate_share()
{
  return MEMORY[0x1F40CB2A8]();
}

uint64_t ccss_shamir_share_generator_init()
{
  return MEMORY[0x1F40CB2B0]();
}

uint64_t ccss_shamir_share_generator_init_with_secrets_less_than_prime()
{
  return MEMORY[0x1F40CB2B8]();
}

uint64_t ccss_shamir_share_generator_serialize()
{
  return MEMORY[0x1F40CB2C0]();
}

uint64_t ccss_shamir_share_init()
{
  return MEMORY[0x1F40CB2D0]();
}

uint64_t ccss_sizeof_generator()
{
  return MEMORY[0x1F40CB2E0]();
}

uint64_t ccss_sizeof_parameters_fix()
{
  return MEMORY[0x1F4116EF8]();
}

uint64_t ccss_sizeof_shamir_share_generator_serialization()
{
  return MEMORY[0x1F40CB2F0]();
}

uint64_t ccss_sizeof_share()
{
  return MEMORY[0x1F40CB2F8]();
}

uint64_t ccss_sizeof_share_bag()
{
  return MEMORY[0x1F40CB300]();
}

void free(void *a1)
{
}

uint64_t getContextSizeForECBMode()
{
  return MEMORY[0x1F4116F08]();
}

uint64_t getccec_pub_ctx_size()
{
  return MEMORY[0x1F4116F28]();
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}